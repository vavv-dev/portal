(function (django$1) {
	'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	var react = {exports: {}};

	var react_production_min = {};

	/**
	 * @license React
	 * react.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReact_production_min;

	function requireReact_production_min () {
		if (hasRequiredReact_production_min) return react_production_min;
		hasRequiredReact_production_min = 1;
	var l=Symbol.for("react.element"),n=Symbol.for("react.portal"),p=Symbol.for("react.fragment"),q=Symbol.for("react.strict_mode"),r=Symbol.for("react.profiler"),t=Symbol.for("react.provider"),u=Symbol.for("react.context"),v=Symbol.for("react.forward_ref"),w=Symbol.for("react.suspense"),x=Symbol.for("react.memo"),y=Symbol.for("react.lazy"),z=Symbol.iterator;function A(a){if(null===a||"object"!==typeof a)return null;a=z&&a[z]||a["@@iterator"];return "function"===typeof a?a:null}
		var B={isMounted:function(){return !1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},C=Object.assign,D={};function E(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B;}E.prototype.isReactComponent={};
		E.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,a,b,"setState");};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate");};function F(){}F.prototype=E.prototype;function G(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B;}var H=G.prototype=new F;
		H.constructor=G;C(H,E.prototype);H.isPureReactComponent=!0;var I=Array.isArray,J=Object.prototype.hasOwnProperty,K={current:null},L={key:!0,ref:!0,__self:!0,__source:!0};
		function M(a,b,e){var d,c={},k=null,h=null;if(null!=b)for(d in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=""+b.key),b)J.call(b,d)&&!L.hasOwnProperty(d)&&(c[d]=b[d]);var g=arguments.length-2;if(1===g)c.children=e;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];c.children=f;}if(a&&a.defaultProps)for(d in g=a.defaultProps,g)void 0===c[d]&&(c[d]=g[d]);return {$$typeof:l,type:a,key:k,ref:h,props:c,_owner:K.current}}
		function N(a,b){return {$$typeof:l,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return "object"===typeof a&&null!==a&&a.$$typeof===l}function escape(a){var b={"=":"=0",":":"=2"};return "$"+a.replace(/[=:]/g,function(a){return b[a]})}var P=/\/+/g;function Q(a,b){return "object"===typeof a&&null!==a&&null!=a.key?escape(""+a.key):b.toString(36)}
		function R(a,b,e,d,c){var k=typeof a;if("undefined"===k||"boolean"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case "string":case "number":h=!0;break;case "object":switch(a.$$typeof){case l:case n:h=!0;}}if(h)return h=a,c=c(h),a=""===d?"."+Q(h,0):d,I(c)?(e="",null!=a&&(e=a.replace(P,"$&/")+"/"),R(c,b,e,"",function(a){return a})):null!=c&&(O(c)&&(c=N(c,e+(!c.key||h&&h.key===c.key?"":(""+c.key).replace(P,"$&/")+"/")+a)),b.push(c)),1;h=0;d=""===d?".":d+":";if(I(a))for(var g=0;g<a.length;g++){k=
		a[g];var f=d+Q(k,g);h+=R(k,b,e,f,c);}else if(f=A(a),"function"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=d+Q(k,g++),h+=R(k,b,e,f,c);else if("object"===k)throw b=String(a),Error("Objects are not valid as a React child (found: "+("[object Object]"===b?"object with keys {"+Object.keys(a).join(", ")+"}":b)+"). If you meant to render a collection of children, use an array instead.");return h}
		function S(a,b,e){if(null==a)return a;var d=[],c=0;R(a,d,"","",function(a){return b.call(e,a,c++)});return d}function T(a){if(-1===a._status){var b=a._result;b=b();b.then(function(b){if(0===a._status||-1===a._status)a._status=1,a._result=b;},function(b){if(0===a._status||-1===a._status)a._status=2,a._result=b;});-1===a._status&&(a._status=0,a._result=b);}if(1===a._status)return a._result.default;throw a._result;}
		var U={current:null},V={transition:null},W={ReactCurrentDispatcher:U,ReactCurrentBatchConfig:V,ReactCurrentOwner:K};react_production_min.Children={map:S,forEach:function(a,b,e){S(a,function(){b.apply(this,arguments);},e);},count:function(a){var b=0;S(a,function(){b++;});return b},toArray:function(a){return S(a,function(a){return a})||[]},only:function(a){if(!O(a))throw Error("React.Children.only expected to receive a single React element child.");return a}};react_production_min.Component=E;react_production_min.Fragment=p;
		react_production_min.Profiler=r;react_production_min.PureComponent=G;react_production_min.StrictMode=q;react_production_min.Suspense=w;react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W;
		react_production_min.cloneElement=function(a,b,e){if(null===a||void 0===a)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+a+".");var d=C({},a.props),c=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=K.current);void 0!==b.key&&(c=""+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)J.call(b,f)&&!L.hasOwnProperty(f)&&(d[f]=void 0===b[f]&&void 0!==g?g[f]:b[f]);}var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){g=Array(f);
		for(var m=0;m<f;m++)g[m]=arguments[m+2];d.children=g;}return {$$typeof:l,type:a.type,key:c,ref:k,props:d,_owner:h}};react_production_min.createContext=function(a){a={$$typeof:u,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null};a.Provider={$$typeof:t,_context:a};return a.Consumer=a};react_production_min.createElement=M;react_production_min.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};react_production_min.createRef=function(){return {current:null}};
		react_production_min.forwardRef=function(a){return {$$typeof:v,render:a}};react_production_min.isValidElement=O;react_production_min.lazy=function(a){return {$$typeof:y,_payload:{_status:-1,_result:a},_init:T}};react_production_min.memo=function(a,b){return {$$typeof:x,type:a,compare:void 0===b?null:b}};react_production_min.startTransition=function(a){var b=V.transition;V.transition={};try{a();}finally{V.transition=b;}};react_production_min.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.");};
		react_production_min.useCallback=function(a,b){return U.current.useCallback(a,b)};react_production_min.useContext=function(a){return U.current.useContext(a)};react_production_min.useDebugValue=function(){};react_production_min.useDeferredValue=function(a){return U.current.useDeferredValue(a)};react_production_min.useEffect=function(a,b){return U.current.useEffect(a,b)};react_production_min.useId=function(){return U.current.useId()};react_production_min.useImperativeHandle=function(a,b,e){return U.current.useImperativeHandle(a,b,e)};
		react_production_min.useInsertionEffect=function(a,b){return U.current.useInsertionEffect(a,b)};react_production_min.useLayoutEffect=function(a,b){return U.current.useLayoutEffect(a,b)};react_production_min.useMemo=function(a,b){return U.current.useMemo(a,b)};react_production_min.useReducer=function(a,b,e){return U.current.useReducer(a,b,e)};react_production_min.useRef=function(a){return U.current.useRef(a)};react_production_min.useState=function(a){return U.current.useState(a)};react_production_min.useSyncExternalStore=function(a,b,e){return U.current.useSyncExternalStore(a,b,e)};
		react_production_min.useTransition=function(){return U.current.useTransition()};react_production_min.version="18.2.0";
		return react_production_min;
	}

	{
	  react.exports = requireReact_production_min();
	}

	var reactExports = react.exports;
	const React = /*@__PURE__*/getDefaultExportFromCjs(reactExports);

	var reactDom = {exports: {}};

	var reactDom_production_min = {};

	var scheduler = {exports: {}};

	var scheduler_production_min = {};

	/**
	 * @license React
	 * scheduler.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredScheduler_production_min;

	function requireScheduler_production_min () {
		if (hasRequiredScheduler_production_min) return scheduler_production_min;
		hasRequiredScheduler_production_min = 1;
		(function (exports) {
	function f(a,b){var c=a.length;a.push(b);a:for(;0<c;){var d=c-1>>>1,e=a[d];if(0<g(e,b))a[d]=b,a[c]=e,c=d;else break a}}function h(a){return 0===a.length?null:a[0]}function k(a){if(0===a.length)return null;var b=a[0],c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length,w=e>>>1;d<w;){var m=2*(d+1)-1,C=a[m],n=m+1,x=a[n];if(0>g(C,c))n<e&&0>g(x,C)?(a[d]=x,a[n]=c,d=n):(a[d]=C,a[m]=c,d=m);else if(n<e&&0>g(x,c))a[d]=x,a[n]=c,d=n;else break a}}return b}
			function g(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}if("object"===typeof performance&&"function"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()};}else {var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q};}var r=[],t=[],u=1,v=null,y=3,z=!1,A=!1,B=!1,D="function"===typeof setTimeout?setTimeout:null,E="function"===typeof clearTimeout?clearTimeout:null,F="undefined"!==typeof setImmediate?setImmediate:null;
			"undefined"!==typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function G(a){for(var b=h(t);null!==b;){if(null===b.callback)k(t);else if(b.startTime<=a)k(t),b.sortIndex=b.expirationTime,f(r,b);else break;b=h(t);}}function H(a){B=!1;G(a);if(!A)if(null!==h(r))A=!0,I(J);else {var b=h(t);null!==b&&K(H,b.startTime-a);}}
			function J(a,b){A=!1;B&&(B=!1,E(L),L=-1);z=!0;var c=y;try{G(b);for(v=h(r);null!==v&&(!(v.expirationTime>b)||a&&!M());){var d=v.callback;if("function"===typeof d){v.callback=null;y=v.priorityLevel;var e=d(v.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?v.callback=e:v===h(r)&&k(r);G(b);}else k(r);v=h(r);}if(null!==v)var w=!0;else {var m=h(t);null!==m&&K(H,m.startTime-b);w=!1;}return w}finally{v=null,y=c,z=!1;}}var N=!1,O=null,L=-1,P=5,Q=-1;
			function M(){return exports.unstable_now()-Q<P?!1:!0}function R(){if(null!==O){var a=exports.unstable_now();Q=a;var b=!0;try{b=O(!0,a);}finally{b?S():(N=!1,O=null);}}else N=!1;}var S;if("function"===typeof F)S=function(){F(R);};else if("undefined"!==typeof MessageChannel){var T=new MessageChannel,U=T.port2;T.port1.onmessage=R;S=function(){U.postMessage(null);};}else S=function(){D(R,0);};function I(a){O=a;N||(N=!0,S());}function K(a,b){L=D(function(){a(exports.unstable_now());},b);}
			exports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null;};exports.unstable_continueExecution=function(){A||z||(A=!0,I(J));};
			exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):P=0<a?Math.floor(1E3/a):5;};exports.unstable_getCurrentPriorityLevel=function(){return y};exports.unstable_getFirstCallbackNode=function(){return h(r)};exports.unstable_next=function(a){switch(y){case 1:case 2:case 3:var b=3;break;default:b=y;}var c=y;y=b;try{return a()}finally{y=c;}};exports.unstable_pauseExecution=function(){};
			exports.unstable_requestPaint=function(){};exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3;}var c=y;y=a;try{return b()}finally{y=c;}};
			exports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();"object"===typeof c&&null!==c?(c=c.delay,c="number"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3;}e=c+e;a={id:u++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,f(t,a),null===h(r)&&a===h(t)&&(B?(E(L),L=-1):B=!0,K(H,c-d))):(a.sortIndex=e,f(r,a),A||z||(A=!0,I(J)));return a};
			exports.unstable_shouldYield=M;exports.unstable_wrapCallback=function(a){var b=y;return function(){var c=y;y=b;try{return a.apply(this,arguments)}finally{y=c;}}}; 
		} (scheduler_production_min));
		return scheduler_production_min;
	}

	var hasRequiredScheduler;

	function requireScheduler () {
		if (hasRequiredScheduler) return scheduler.exports;
		hasRequiredScheduler = 1;

		{
		  scheduler.exports = requireScheduler_production_min();
		}
		return scheduler.exports;
	}

	/**
	 * @license React
	 * react-dom.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactDom_production_min;

	function requireReactDom_production_min () {
		if (hasRequiredReactDom_production_min) return reactDom_production_min;
		hasRequiredReactDom_production_min = 1;
	var aa=reactExports,ca=requireScheduler();function p(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return "Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var da=new Set,ea={};function fa(a,b){ha(a,b);ha(a+"Capture",b);}
		function ha(a,b){ea[a]=b;for(a=0;a<b.length;a++)da.add(b[a]);}
		var ia=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),ja=Object.prototype.hasOwnProperty,ka=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,la=
		{},ma={};function oa(a){if(ja.call(ma,a))return !0;if(ja.call(la,a))return !1;if(ka.test(a))return ma[a]=!0;la[a]=!0;return !1}function pa(a,b,c,d){if(null!==c&&0===c.type)return !1;switch(typeof b){case "function":case "symbol":return !0;case "boolean":if(d)return !1;if(null!==c)return !c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return "data-"!==a&&"aria-"!==a;default:return !1}}
		function qa(a,b,c,d){if(null===b||"undefined"===typeof b||pa(a,b,c,d))return !0;if(d)return !1;if(null!==c)switch(c.type){case 3:return !b;case 4:return !1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return !1}function v(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g;}var z={};
		"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){z[a]=new v(a,0,!1,a,null,!1,!1);});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];z[b]=new v(b,1,!1,a[1],null,!1,!1);});["contentEditable","draggable","spellCheck","value"].forEach(function(a){z[a]=new v(a,2,!1,a.toLowerCase(),null,!1,!1);});
		["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){z[a]=new v(a,2,!1,a,null,!1,!1);});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){z[a]=new v(a,3,!1,a.toLowerCase(),null,!1,!1);});
		["checked","multiple","muted","selected"].forEach(function(a){z[a]=new v(a,3,!0,a,null,!1,!1);});["capture","download"].forEach(function(a){z[a]=new v(a,4,!1,a,null,!1,!1);});["cols","rows","size","span"].forEach(function(a){z[a]=new v(a,6,!1,a,null,!1,!1);});["rowSpan","start"].forEach(function(a){z[a]=new v(a,5,!1,a.toLowerCase(),null,!1,!1);});var ra=/[\-:]([a-z])/g;function sa(a){return a[1].toUpperCase()}
		"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(ra,
		sa);z[b]=new v(b,1,!1,a,null,!1,!1);});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,"http://www.w3.org/1999/xlink",!1,!1);});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,"http://www.w3.org/XML/1998/namespace",!1,!1);});["tabIndex","crossOrigin"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!1,!1);});
		z.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!0,!0);});
		function ta(a,b,c,d){var e=z.hasOwnProperty(b)?z[b]:null;if(null!==e?0!==e.type:d||!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1])qa(b,c,e,d)&&(c=null),d||null===e?oa(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c)));}
		var ua=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,va=Symbol.for("react.element"),wa=Symbol.for("react.portal"),ya=Symbol.for("react.fragment"),za=Symbol.for("react.strict_mode"),Aa=Symbol.for("react.profiler"),Ba=Symbol.for("react.provider"),Ca=Symbol.for("react.context"),Da=Symbol.for("react.forward_ref"),Ea=Symbol.for("react.suspense"),Fa=Symbol.for("react.suspense_list"),Ga=Symbol.for("react.memo"),Ha=Symbol.for("react.lazy");	var Ia=Symbol.for("react.offscreen");var Ja=Symbol.iterator;function Ka(a){if(null===a||"object"!==typeof a)return null;a=Ja&&a[Ja]||a["@@iterator"];return "function"===typeof a?a:null}var A=Object.assign,La;function Ma(a){if(void 0===La)try{throw Error();}catch(c){var b=c.stack.trim().match(/\n( *(at )?)/);La=b&&b[1]||"";}return "\n"+La+a}var Na=!1;
		function Oa(a,b){if(!a||Na)return "";Na=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,"props",{set:function(){throw Error();}}),"object"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[]);}catch(l){var d=l;}Reflect.construct(a,[],b);}else {try{b.call();}catch(l){d=l;}a.call(b.prototype);}else {try{throw Error();}catch(l){d=l;}a();}}catch(l){if(l&&d&&"string"===typeof l.stack){for(var e=l.stack.split("\n"),
		f=d.stack.split("\n"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h]){var k="\n"+e[g].replace(" at new "," at ");a.displayName&&k.includes("<anonymous>")&&(k=k.replace("<anonymous>",a.displayName));return k}while(1<=g&&0<=h)}break}}}finally{Na=!1,Error.prepareStackTrace=c;}return (a=a?a.displayName||a.name:"")?Ma(a):""}
		function Pa(a){switch(a.tag){case 5:return Ma(a.type);case 16:return Ma("Lazy");case 13:return Ma("Suspense");case 19:return Ma("SuspenseList");case 0:case 2:case 15:return a=Oa(a.type,!1),a;case 11:return a=Oa(a.type.render,!1),a;case 1:return a=Oa(a.type,!0),a;default:return ""}}
		function Qa(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case ya:return "Fragment";case wa:return "Portal";case Aa:return "Profiler";case za:return "StrictMode";case Ea:return "Suspense";case Fa:return "SuspenseList"}if("object"===typeof a)switch(a.$$typeof){case Ca:return (a.displayName||"Context")+".Consumer";case Ba:return (a._context.displayName||"Context")+".Provider";case Da:var b=a.render;a=a.displayName;a||(a=b.displayName||
		b.name||"",a=""!==a?"ForwardRef("+a+")":"ForwardRef");return a;case Ga:return b=a.displayName||null,null!==b?b:Qa(a.type)||"Memo";case Ha:b=a._payload;a=a._init;try{return Qa(a(b))}catch(c){}}return null}
		function Ra(a){var b=a.type;switch(a.tag){case 24:return "Cache";case 9:return (b.displayName||"Context")+".Consumer";case 10:return (b._context.displayName||"Context")+".Provider";case 18:return "DehydratedFragment";case 11:return a=b.render,a=a.displayName||a.name||"",b.displayName||(""!==a?"ForwardRef("+a+")":"ForwardRef");case 7:return "Fragment";case 5:return b;case 4:return "Portal";case 3:return "Root";case 6:return "Text";case 16:return Qa(b);case 8:return b===za?"StrictMode":"Mode";case 22:return "Offscreen";
		case 12:return "Profiler";case 21:return "Scope";case 13:return "Suspense";case 19:return "SuspenseList";case 25:return "TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"===typeof b)return b.displayName||b.name||null;if("string"===typeof b)return b}return null}function Sa(a){switch(typeof a){case "boolean":case "number":case "string":case "undefined":return a;case "object":return a;default:return ""}}
		function Ta(a){var b=a.type;return (a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
		function Ua(a){var b=Ta(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a);}});Object.defineProperty(a,b,{enumerable:c.enumerable});return {getValue:function(){return d},setValue:function(a){d=""+a;},stopTracking:function(){a._valueTracker=
		null;delete a[b];}}}}function Va(a){a._valueTracker||(a._valueTracker=Ua(a));}function Wa(a){if(!a)return !1;var b=a._valueTracker;if(!b)return !0;var c=b.getValue();var d="";a&&(d=Ta(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Xa(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}
		function Ya(a,b){var c=b.checked;return A({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Za(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Sa(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value};}function ab(a,b){b=b.checked;null!=b&&ta(a,"checked",b,!1);}
		function bb(a,b){ab(a,b);var c=Sa(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c;}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?cb(a,b.type,c):b.hasOwnProperty("defaultValue")&&cb(a,b.type,Sa(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked);}
		function db(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b;}c=a.name;""!==c&&(a.name="");a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c);}
		function cb(a,b,c){if("number"!==b||Xa(a.ownerDocument)!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c);}var eb=Array.isArray;
		function fb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0);}else {c=""+Sa(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e]);}null!==b&&(b.selected=!0);}}
		function gb(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(p(91));return A({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function hb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(p(92));if(eb(c)){if(1<c.length)throw Error(p(93));c=c[0];}b=c;}null==b&&(b="");c=b;}a._wrapperState={initialValue:Sa(c)};}
		function ib(a,b){var c=Sa(b.value),d=Sa(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d);}function jb(a){var b=a.textContent;b===a._wrapperState.initialValue&&""!==b&&null!==b&&(a.value=b);}function kb(a){switch(a){case "svg":return "http://www.w3.org/2000/svg";case "math":return "http://www.w3.org/1998/Math/MathML";default:return "http://www.w3.org/1999/xhtml"}}
		function lb(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?kb(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
		var mb,nb=function(a){return "undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)});}:a}(function(a,b){if("http://www.w3.org/2000/svg"!==a.namespaceURI||"innerHTML"in a)a.innerHTML=b;else {mb=mb||document.createElement("div");mb.innerHTML="<svg>"+b.valueOf().toString()+"</svg>";for(b=mb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild);}});
		function ob(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b;}
		var pb={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,
		zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},qb=["Webkit","ms","Moz","O"];Object.keys(pb).forEach(function(a){qb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);pb[b]=pb[a];});});function rb(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||pb.hasOwnProperty(a)&&pb[a]?(""+b).trim():b+"px"}
		function sb(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=rb(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e;}}var tb=A({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
		function ub(a,b){if(b){if(tb[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(p(137,a));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(p(60));if("object"!==typeof b.dangerouslySetInnerHTML||!("__html"in b.dangerouslySetInnerHTML))throw Error(p(61));}if(null!=b.style&&"object"!==typeof b.style)throw Error(p(62));}}
		function vb(a,b){if(-1===a.indexOf("-"))return "string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return !1;default:return !0}}var wb=null;function xb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var yb=null,zb=null,Ab=null;
		function Bb(a){if(a=Cb(a)){if("function"!==typeof yb)throw Error(p(280));var b=a.stateNode;b&&(b=Db(b),yb(a.stateNode,a.type,b));}}function Eb(a){zb?Ab?Ab.push(a):Ab=[a]:zb=a;}function Fb(){if(zb){var a=zb,b=Ab;Ab=zb=null;Bb(a);if(b)for(a=0;a<b.length;a++)Bb(b[a]);}}function Gb(a,b){return a(b)}function Hb(){}var Ib=!1;function Jb(a,b,c){if(Ib)return a(b,c);Ib=!0;try{return Gb(a,b,c)}finally{if(Ib=!1,null!==zb||null!==Ab)Hb(),Fb();}}
		function Kb(a,b){var c=a.stateNode;if(null===c)return null;var d=Db(c);if(null===d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":case "onMouseEnter":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1;}if(a)return null;if(c&&"function"!==
		typeof c)throw Error(p(231,b,typeof c));return c}var Lb=!1;if(ia)try{var Mb={};Object.defineProperty(Mb,"passive",{get:function(){Lb=!0;}});window.addEventListener("test",Mb,Mb);window.removeEventListener("test",Mb,Mb);}catch(a){Lb=!1;}function Nb(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l);}catch(m){this.onError(m);}}var Ob=!1,Pb=null,Qb=!1,Rb=null,Sb={onError:function(a){Ob=!0;Pb=a;}};function Tb(a,b,c,d,e,f,g,h,k){Ob=!1;Pb=null;Nb.apply(Sb,arguments);}
		function Ub(a,b,c,d,e,f,g,h,k){Tb.apply(this,arguments);if(Ob){if(Ob){var l=Pb;Ob=!1;Pb=null;}else throw Error(p(198));Qb||(Qb=!0,Rb=l);}}function Vb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else {a=b;do b=a,0!==(b.flags&4098)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function Wb(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function Xb(a){if(Vb(a)!==a)throw Error(p(188));}
		function Yb(a){var b=a.alternate;if(!b){b=Vb(a);if(null===b)throw Error(p(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return Xb(e),a;if(f===d)return Xb(e),b;f=f.sibling;}throw Error(p(188));}if(c.return!==d.return)c=e,d=f;else {for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling;}if(!g){for(h=f.child;h;){if(h===
		c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling;}if(!g)throw Error(p(189));}}if(c.alternate!==d)throw Error(p(190));}if(3!==c.tag)throw Error(p(188));return c.stateNode.current===c?a:b}function Zb(a){a=Yb(a);return null!==a?$b(a):null}function $b(a){if(5===a.tag||6===a.tag)return a;for(a=a.child;null!==a;){var b=$b(a);if(null!==b)return b;a=a.sibling;}return null}
		var ac=ca.unstable_scheduleCallback,bc=ca.unstable_cancelCallback,cc=ca.unstable_shouldYield,dc=ca.unstable_requestPaint,B=ca.unstable_now,ec=ca.unstable_getCurrentPriorityLevel,fc=ca.unstable_ImmediatePriority,gc=ca.unstable_UserBlockingPriority,hc=ca.unstable_NormalPriority,ic=ca.unstable_LowPriority,jc=ca.unstable_IdlePriority,kc=null,lc=null;function mc(a){if(lc&&"function"===typeof lc.onCommitFiberRoot)try{lc.onCommitFiberRoot(kc,a,void 0,128===(a.current.flags&128));}catch(b){}}
		var oc=Math.clz32?Math.clz32:nc,pc=Math.log,qc=Math.LN2;function nc(a){a>>>=0;return 0===a?32:31-(pc(a)/qc|0)|0}var rc=64,sc=4194304;
		function tc(a){switch(a&-a){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return a&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return a&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;
		default:return a}}function uc(a,b){var c=a.pendingLanes;if(0===c)return 0;var d=0,e=a.suspendedLanes,f=a.pingedLanes,g=c&268435455;if(0!==g){var h=g&~e;0!==h?d=tc(h):(f&=g,0!==f&&(d=tc(f)));}else g=c&~e,0!==g?d=tc(g):0!==f&&(d=tc(f));if(0===d)return 0;if(0!==b&&b!==d&&0===(b&e)&&(e=d&-d,f=b&-b,e>=f||16===e&&0!==(f&4194240)))return b;0!==(d&4)&&(d|=c&16);b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-oc(b),e=1<<c,d|=a[c],b&=~e;return d}
		function vc(a,b){switch(a){case 1:case 2:case 4:return b+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return b+5E3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return -1;case 134217728:case 268435456:case 536870912:case 1073741824:return -1;default:return -1}}
		function wc(a,b){for(var c=a.suspendedLanes,d=a.pingedLanes,e=a.expirationTimes,f=a.pendingLanes;0<f;){var g=31-oc(f),h=1<<g,k=e[g];if(-1===k){if(0===(h&c)||0!==(h&d))e[g]=vc(h,b);}else k<=b&&(a.expiredLanes|=h);f&=~h;}}function xc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function yc(){var a=rc;rc<<=1;0===(rc&4194240)&&(rc=64);return a}function zc(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}
		function Ac(a,b,c){a.pendingLanes|=b;536870912!==b&&(a.suspendedLanes=0,a.pingedLanes=0);a=a.eventTimes;b=31-oc(b);a[b]=c;}function Bc(a,b){var c=a.pendingLanes&~b;a.pendingLanes=b;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=b;a.mutableReadLanes&=b;a.entangledLanes&=b;b=a.entanglements;var d=a.eventTimes;for(a=a.expirationTimes;0<c;){var e=31-oc(c),f=1<<e;b[e]=0;d[e]=-1;a[e]=-1;c&=~f;}}
		function Cc(a,b){var c=a.entangledLanes|=b;for(a=a.entanglements;c;){var d=31-oc(c),e=1<<d;e&b|a[d]&b&&(a[d]|=b);c&=~e;}}var C=0;function Dc(a){a&=-a;return 1<a?4<a?0!==(a&268435455)?16:536870912:4:1}var Ec,Fc,Gc,Hc,Ic,Jc=!1,Kc=[],Lc=null,Mc=null,Nc=null,Oc=new Map,Pc=new Map,Qc=[],Rc="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
		function Sc(a,b){switch(a){case "focusin":case "focusout":Lc=null;break;case "dragenter":case "dragleave":Mc=null;break;case "mouseover":case "mouseout":Nc=null;break;case "pointerover":case "pointerout":Oc.delete(b.pointerId);break;case "gotpointercapture":case "lostpointercapture":Pc.delete(b.pointerId);}}
		function Tc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a={blockedOn:b,domEventName:c,eventSystemFlags:d,nativeEvent:f,targetContainers:[e]},null!==b&&(b=Cb(b),null!==b&&Fc(b)),a;a.eventSystemFlags|=d;b=a.targetContainers;null!==e&&-1===b.indexOf(e)&&b.push(e);return a}
		function Uc(a,b,c,d,e){switch(b){case "focusin":return Lc=Tc(Lc,a,b,c,d,e),!0;case "dragenter":return Mc=Tc(Mc,a,b,c,d,e),!0;case "mouseover":return Nc=Tc(Nc,a,b,c,d,e),!0;case "pointerover":var f=e.pointerId;Oc.set(f,Tc(Oc.get(f)||null,a,b,c,d,e));return !0;case "gotpointercapture":return f=e.pointerId,Pc.set(f,Tc(Pc.get(f)||null,a,b,c,d,e)),!0}return !1}
		function Vc(a){var b=Wc(a.target);if(null!==b){var c=Vb(b);if(null!==c)if(b=c.tag,13===b){if(b=Wb(c),null!==b){a.blockedOn=b;Ic(a.priority,function(){Gc(c);});return}}else if(3===b&&c.stateNode.current.memoizedState.isDehydrated){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null;}
		function Xc(a){if(null!==a.blockedOn)return !1;for(var b=a.targetContainers;0<b.length;){var c=Yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null===c){c=a.nativeEvent;var d=new c.constructor(c.type,c);wb=d;c.target.dispatchEvent(d);wb=null;}else return b=Cb(c),null!==b&&Fc(b),a.blockedOn=c,!1;b.shift();}return !0}function Zc(a,b,c){Xc(a)&&c.delete(b);}function $c(){Jc=!1;null!==Lc&&Xc(Lc)&&(Lc=null);null!==Mc&&Xc(Mc)&&(Mc=null);null!==Nc&&Xc(Nc)&&(Nc=null);Oc.forEach(Zc);Pc.forEach(Zc);}
		function ad(a,b){a.blockedOn===b&&(a.blockedOn=null,Jc||(Jc=!0,ca.unstable_scheduleCallback(ca.unstable_NormalPriority,$c)));}
		function bd(a){function b(b){return ad(b,a)}if(0<Kc.length){ad(Kc[0],a);for(var c=1;c<Kc.length;c++){var d=Kc[c];d.blockedOn===a&&(d.blockedOn=null);}}null!==Lc&&ad(Lc,a);null!==Mc&&ad(Mc,a);null!==Nc&&ad(Nc,a);Oc.forEach(b);Pc.forEach(b);for(c=0;c<Qc.length;c++)d=Qc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Qc.length&&(c=Qc[0],null===c.blockedOn);)Vc(c),null===c.blockedOn&&Qc.shift();}var cd=ua.ReactCurrentBatchConfig,dd=!0;
		function ed(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=1,fd(a,b,c,d);}finally{C=e,cd.transition=f;}}function gd(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=4,fd(a,b,c,d);}finally{C=e,cd.transition=f;}}
		function fd(a,b,c,d){if(dd){var e=Yc(a,b,c,d);if(null===e)hd(a,b,d,id,c),Sc(a,d);else if(Uc(e,a,b,c,d))d.stopPropagation();else if(Sc(a,d),b&4&&-1<Rc.indexOf(a)){for(;null!==e;){var f=Cb(e);null!==f&&Ec(f);f=Yc(a,b,c,d);null===f&&hd(a,b,d,id,c);if(f===e)break;e=f;}null!==e&&d.stopPropagation();}else hd(a,b,d,null,c);}}var id=null;
		function Yc(a,b,c,d){id=null;a=xb(d);a=Wc(a);if(null!==a)if(b=Vb(a),null===b)a=null;else if(c=b.tag,13===c){a=Wb(b);if(null!==a)return a;a=null;}else if(3===c){if(b.stateNode.current.memoizedState.isDehydrated)return 3===b.tag?b.stateNode.containerInfo:null;a=null;}else b!==a&&(a=null);id=a;return null}
		function jd(a){switch(a){case "cancel":case "click":case "close":case "contextmenu":case "copy":case "cut":case "auxclick":case "dblclick":case "dragend":case "dragstart":case "drop":case "focusin":case "focusout":case "input":case "invalid":case "keydown":case "keypress":case "keyup":case "mousedown":case "mouseup":case "paste":case "pause":case "play":case "pointercancel":case "pointerdown":case "pointerup":case "ratechange":case "reset":case "resize":case "seeked":case "submit":case "touchcancel":case "touchend":case "touchstart":case "volumechange":case "change":case "selectionchange":case "textInput":case "compositionstart":case "compositionend":case "compositionupdate":case "beforeblur":case "afterblur":case "beforeinput":case "blur":case "fullscreenchange":case "focus":case "hashchange":case "popstate":case "select":case "selectstart":return 1;case "drag":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "mousemove":case "mouseout":case "mouseover":case "pointermove":case "pointerout":case "pointerover":case "scroll":case "toggle":case "touchmove":case "wheel":case "mouseenter":case "mouseleave":case "pointerenter":case "pointerleave":return 4;
		case "message":switch(ec()){case fc:return 1;case gc:return 4;case hc:case ic:return 16;case jc:return 536870912;default:return 16}default:return 16}}var kd=null,ld=null,md=null;function nd(){if(md)return md;var a,b=ld,c=b.length,d,e="value"in kd?kd.value:kd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return md=e.slice(a,1<d?1-d:void 0)}
		function od(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return !0}function qd(){return !1}
		function rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}A(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&
		(a.returnValue=!1),this.isDefaultPrevented=pd);},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd);},persist:function(){},isPersistent:pd});return b}
		var sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=A({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=A({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if("movementX"in
		a)return a.movementX;a!==yd&&(yd&&"mousemove"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return "movementY"in a?a.movementY:xd}}),Bd=rd(Ad),Cd=A({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=A({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=A({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=A({},sd,{clipboardData:function(a){return "clipboardData"in a?a.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=A({},sd,{data:0}),Ld=rd(Kd),Md={Esc:"Escape",
		Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Nd={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",
		119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Od={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}
		var Qd=A({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if("Unidentified"!==b)return b}return "keypress"===a.type?(a=od(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?Nd[a.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return "keypress"===a.type?od(a):0},keyCode:function(a){return "keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return "keypress"===
		a.type?od(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),Rd=rd(Qd),Sd=A({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=A({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=A({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=A({},Ad,{deltaX:function(a){return "deltaX"in a?a.deltaX:"wheelDeltaX"in a?-a.wheelDeltaX:0},
		deltaY:function(a){return "deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd),$d=[9,13,27,32],ae=ia&&"CompositionEvent"in window,be=null;ia&&"documentMode"in document&&(be=document.documentMode);var ce=ia&&"TextEvent"in window&&!be,de=ia&&(!ae||be&&8<be&&11>=be),ee=String.fromCharCode(32),fe=!1;
		function ge(a,b){switch(a){case "keyup":return -1!==$d.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "focusout":return !0;default:return !1}}function he(a){a=a.detail;return "object"===typeof a&&"data"in a?a.data:null}var ie=!1;function je(a,b){switch(a){case "compositionend":return he(b);case "keypress":if(32!==b.which)return null;fe=!0;return ee;case "textInput":return a=b.data,a===ee&&fe?null:a;default:return null}}
		function ke(a,b){if(ie)return "compositionend"===a||!ae&&ge(a,b)?(a=nd(),md=ld=kd=null,ie=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return de&&"ko"!==b.locale?null:b.data;default:return null}}
		var le={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return "input"===b?!!le[a.type]:"textarea"===b?!0:!1}function ne(a,b,c,d){Eb(d);b=oe(b,"onChange");0<b.length&&(c=new td("onChange","change",null,c,d),a.push({event:c,listeners:b}));}var pe=null,qe=null;function re(a){se(a,0);}function te(a){var b=ue(a);if(Wa(b))return a}
		function ve(a,b){if("change"===a)return b}var we=!1;if(ia){var xe;if(ia){var ye="oninput"in document;if(!ye){var ze=document.createElement("div");ze.setAttribute("oninput","return;");ye="function"===typeof ze.oninput;}xe=ye;}else xe=!1;we=xe&&(!document.documentMode||9<document.documentMode);}function Ae(){pe&&(pe.detachEvent("onpropertychange",Be),qe=pe=null);}function Be(a){if("value"===a.propertyName&&te(qe)){var b=[];ne(b,qe,a,xb(a));Jb(re,b);}}
		function Ce(a,b,c){"focusin"===a?(Ae(),pe=b,qe=c,pe.attachEvent("onpropertychange",Be)):"focusout"===a&&Ae();}function De(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return te(qe)}function Ee(a,b){if("click"===a)return te(b)}function Fe(a,b){if("input"===a||"change"===a)return te(b)}function Ge(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var He="function"===typeof Object.is?Object.is:Ge;
		function Ie(a,b){if(He(a,b))return !0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return !1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return !1;for(d=0;d<c.length;d++){var e=c[d];if(!ja.call(b,e)||!He(a[e],b[e]))return !1}return !0}function Je(a){for(;a&&a.firstChild;)a=a.firstChild;return a}
		function Ke(a,b){var c=Je(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return {node:c,offset:b-a};a=d;}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode;}c=void 0;}c=Je(c);}}function Le(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Le(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}
		function Me(){for(var a=window,b=Xa();b instanceof a.HTMLIFrameElement;){try{var c="string"===typeof b.contentWindow.location.href;}catch(d){c=!1;}if(c)a=b.contentWindow;else break;b=Xa(a.document);}return b}function Ne(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}
		function Oe(a){var b=Me(),c=a.focusedElem,d=a.selectionRange;if(b!==c&&c&&c.ownerDocument&&Le(c.ownerDocument.documentElement,c)){if(null!==d&&Ne(c))if(b=d.start,a=d.end,void 0===a&&(a=b),"selectionStart"in c)c.selectionStart=b,c.selectionEnd=Math.min(a,c.value.length);else if(a=(b=c.ownerDocument||document)&&b.defaultView||window,a.getSelection){a=a.getSelection();var e=c.textContent.length,f=Math.min(d.start,e);d=void 0===d.end?f:Math.min(d.end,e);!a.extend&&f>d&&(e=d,d=f,f=e);e=Ke(c,f);var g=Ke(c,
		d);e&&g&&(1!==a.rangeCount||a.anchorNode!==e.node||a.anchorOffset!==e.offset||a.focusNode!==g.node||a.focusOffset!==g.offset)&&(b=b.createRange(),b.setStart(e.node,e.offset),a.removeAllRanges(),f>d?(a.addRange(b),a.extend(g.node,g.offset)):(b.setEnd(g.node,g.offset),a.addRange(b)));}b=[];for(a=c;a=a.parentNode;)1===a.nodeType&&b.push({element:a,left:a.scrollLeft,top:a.scrollTop});"function"===typeof c.focus&&c.focus();for(c=0;c<b.length;c++)a=b[c],a.element.scrollLeft=a.left,a.element.scrollTop=a.top;}}
		var Pe=ia&&"documentMode"in document&&11>=document.documentMode,Qe=null,Re=null,Se=null,Te=!1;
		function Ue(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te||null==Qe||Qe!==Xa(d)||(d=Qe,"selectionStart"in d&&Ne(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se&&Ie(Se,d)||(Se=d,d=oe(Re,"onSelect"),0<d.length&&(b=new td("onSelect","select",null,b,c),a.push({event:b,listeners:d}),b.target=Qe)));}
		function Ve(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var We={animationend:Ve("Animation","AnimationEnd"),animationiteration:Ve("Animation","AnimationIteration"),animationstart:Ve("Animation","AnimationStart"),transitionend:Ve("Transition","TransitionEnd")},Xe={},Ye={};
		ia&&(Ye=document.createElement("div").style,"AnimationEvent"in window||(delete We.animationend.animation,delete We.animationiteration.animation,delete We.animationstart.animation),"TransitionEvent"in window||delete We.transitionend.transition);function Ze(a){if(Xe[a])return Xe[a];if(!We[a])return a;var b=We[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Ye)return Xe[a]=b[c];return a}var $e=Ze("animationend"),af=Ze("animationiteration"),bf=Ze("animationstart"),cf=Ze("transitionend"),df=new Map,ef="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
		function ff(a,b){df.set(a,b);fa(b,[a]);}for(var gf=0;gf<ef.length;gf++){var hf=ef[gf],jf=hf.toLowerCase(),kf=hf[0].toUpperCase()+hf.slice(1);ff(jf,"on"+kf);}ff($e,"onAnimationEnd");ff(af,"onAnimationIteration");ff(bf,"onAnimationStart");ff("dblclick","onDoubleClick");ff("focusin","onFocus");ff("focusout","onBlur");ff(cf,"onTransitionEnd");ha("onMouseEnter",["mouseout","mouseover"]);ha("onMouseLeave",["mouseout","mouseover"]);ha("onPointerEnter",["pointerout","pointerover"]);
		ha("onPointerLeave",["pointerout","pointerover"]);fa("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));fa("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));fa("onBeforeInput",["compositionend","keypress","textInput","paste"]);fa("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));fa("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));
		fa("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var lf="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),mf=new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
		function nf(a,b,c){var d=a.type||"unknown-event";a.currentTarget=c;Ub(d,b,void 0,a);a.currentTarget=null;}
		function se(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=a[c],e=d.event;d=d.listeners;a:{var f=void 0;if(b)for(var g=d.length-1;0<=g;g--){var h=d[g],k=h.instance,l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k;}else for(g=0;g<d.length;g++){h=d[g];k=h.instance;l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k;}}}if(Qb)throw a=Rb,Qb=!1,Rb=null,a;}
		function D(a,b){var c=b[of];void 0===c&&(c=b[of]=new Set);var d=a+"__bubble";c.has(d)||(pf(b,a,2,!1),c.add(d));}function qf(a,b,c){var d=0;b&&(d|=4);pf(c,a,d,b);}var rf="_reactListening"+Math.random().toString(36).slice(2);function sf(a){if(!a[rf]){a[rf]=!0;da.forEach(function(b){"selectionchange"!==b&&(mf.has(b)||qf(b,!1,a),qf(b,!0,a));});var b=9===a.nodeType?a:a.ownerDocument;null===b||b[rf]||(b[rf]=!0,qf("selectionchange",!1,b));}}
		function pf(a,b,c,d){switch(jd(b)){case 1:var e=ed;break;case 4:e=gd;break;default:e=fd;}c=e.bind(null,b,c,a);e=void 0;!Lb||"touchstart"!==b&&"touchmove"!==b&&"wheel"!==b||(e=!0);d?void 0!==e?a.addEventListener(b,c,{capture:!0,passive:e}):a.addEventListener(b,c,!0):void 0!==e?a.addEventListener(b,c,{passive:e}):a.addEventListener(b,c,!1);}
		function hd(a,b,c,d,e){var f=d;if(0===(b&1)&&0===(b&2)&&null!==d)a:for(;;){if(null===d)return;var g=d.tag;if(3===g||4===g){var h=d.stateNode.containerInfo;if(h===e||8===h.nodeType&&h.parentNode===e)break;if(4===g)for(g=d.return;null!==g;){var k=g.tag;if(3===k||4===k)if(k=g.stateNode.containerInfo,k===e||8===k.nodeType&&k.parentNode===e)return;g=g.return;}for(;null!==h;){g=Wc(h);if(null===g)return;k=g.tag;if(5===k||6===k){d=f=g;continue a}h=h.parentNode;}}d=d.return;}Jb(function(){var d=f,e=xb(c),g=[];
		a:{var h=df.get(a);if(void 0!==h){var k=td,n=a;switch(a){case "keypress":if(0===od(c))break a;case "keydown":case "keyup":k=Rd;break;case "focusin":n="focus";k=Fd;break;case "focusout":n="blur";k=Fd;break;case "beforeblur":case "afterblur":k=Fd;break;case "click":if(2===c.button)break a;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":k=Bd;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":k=
		Dd;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":k=Vd;break;case $e:case af:case bf:k=Hd;break;case cf:k=Xd;break;case "scroll":k=vd;break;case "wheel":k=Zd;break;case "copy":case "cut":case "paste":k=Jd;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":k=Td;}var t=0!==(b&4),J=!t&&"scroll"===a,x=t?null!==h?h+"Capture":null:h;t=[];for(var w=d,u;null!==
		w;){u=w;var F=u.stateNode;5===u.tag&&null!==F&&(u=F,null!==x&&(F=Kb(w,x),null!=F&&t.push(tf(w,F,u))));if(J)break;w=w.return;}0<t.length&&(h=new k(h,n,null,c,e),g.push({event:h,listeners:t}));}}if(0===(b&7)){a:{h="mouseover"===a||"pointerover"===a;k="mouseout"===a||"pointerout"===a;if(h&&c!==wb&&(n=c.relatedTarget||c.fromElement)&&(Wc(n)||n[uf]))break a;if(k||h){h=e.window===e?e:(h=e.ownerDocument)?h.defaultView||h.parentWindow:window;if(k){if(n=c.relatedTarget||c.toElement,k=d,n=n?Wc(n):null,null!==
		n&&(J=Vb(n),n!==J||5!==n.tag&&6!==n.tag))n=null;}else k=null,n=d;if(k!==n){t=Bd;F="onMouseLeave";x="onMouseEnter";w="mouse";if("pointerout"===a||"pointerover"===a)t=Td,F="onPointerLeave",x="onPointerEnter",w="pointer";J=null==k?h:ue(k);u=null==n?h:ue(n);h=new t(F,w+"leave",k,c,e);h.target=J;h.relatedTarget=u;F=null;Wc(e)===d&&(t=new t(x,w+"enter",n,c,e),t.target=u,t.relatedTarget=J,F=t);J=F;if(k&&n)b:{t=k;x=n;w=0;for(u=t;u;u=vf(u))w++;u=0;for(F=x;F;F=vf(F))u++;for(;0<w-u;)t=vf(t),w--;for(;0<u-w;)x=
		vf(x),u--;for(;w--;){if(t===x||null!==x&&t===x.alternate)break b;t=vf(t);x=vf(x);}t=null;}else t=null;null!==k&&wf(g,h,k,t,!1);null!==n&&null!==J&&wf(g,J,n,t,!0);}}}a:{h=d?ue(d):window;k=h.nodeName&&h.nodeName.toLowerCase();if("select"===k||"input"===k&&"file"===h.type)var na=ve;else if(me(h))if(we)na=Fe;else {na=De;var xa=Ce;}else (k=h.nodeName)&&"input"===k.toLowerCase()&&("checkbox"===h.type||"radio"===h.type)&&(na=Ee);if(na&&(na=na(a,d))){ne(g,na,c,e);break a}xa&&xa(a,h,d);"focusout"===a&&(xa=h._wrapperState)&&
		xa.controlled&&"number"===h.type&&cb(h,"number",h.value);}xa=d?ue(d):window;switch(a){case "focusin":if(me(xa)||"true"===xa.contentEditable)Qe=xa,Re=d,Se=null;break;case "focusout":Se=Re=Qe=null;break;case "mousedown":Te=!0;break;case "contextmenu":case "mouseup":case "dragend":Te=!1;Ue(g,c,e);break;case "selectionchange":if(Pe)break;case "keydown":case "keyup":Ue(g,c,e);}var $a;if(ae)b:{switch(a){case "compositionstart":var ba="onCompositionStart";break b;case "compositionend":ba="onCompositionEnd";
		break b;case "compositionupdate":ba="onCompositionUpdate";break b}ba=void 0;}else ie?ge(a,c)&&(ba="onCompositionEnd"):"keydown"===a&&229===c.keyCode&&(ba="onCompositionStart");ba&&(de&&"ko"!==c.locale&&(ie||"onCompositionStart"!==ba?"onCompositionEnd"===ba&&ie&&($a=nd()):(kd=e,ld="value"in kd?kd.value:kd.textContent,ie=!0)),xa=oe(d,ba),0<xa.length&&(ba=new Ld(ba,a,null,c,e),g.push({event:ba,listeners:xa}),$a?ba.data=$a:($a=he(c),null!==$a&&(ba.data=$a))));if($a=ce?je(a,c):ke(a,c))d=oe(d,"onBeforeInput"),
		0<d.length&&(e=new Ld("onBeforeInput","beforeinput",null,c,e),g.push({event:e,listeners:d}),e.data=$a);}se(g,b);});}function tf(a,b,c){return {instance:a,listener:b,currentTarget:c}}function oe(a,b){for(var c=b+"Capture",d=[];null!==a;){var e=a,f=e.stateNode;5===e.tag&&null!==f&&(e=f,f=Kb(a,c),null!=f&&d.unshift(tf(a,f,e)),f=Kb(a,b),null!=f&&d.push(tf(a,f,e)));a=a.return;}return d}function vf(a){if(null===a)return null;do a=a.return;while(a&&5!==a.tag);return a?a:null}
		function wf(a,b,c,d,e){for(var f=b._reactName,g=[];null!==c&&c!==d;){var h=c,k=h.alternate,l=h.stateNode;if(null!==k&&k===d)break;5===h.tag&&null!==l&&(h=l,e?(k=Kb(c,f),null!=k&&g.unshift(tf(c,k,h))):e||(k=Kb(c,f),null!=k&&g.push(tf(c,k,h))));c=c.return;}0!==g.length&&a.push({event:b,listeners:g});}var xf=/\r\n?/g,yf=/\u0000|\uFFFD/g;function zf(a){return ("string"===typeof a?a:""+a).replace(xf,"\n").replace(yf,"")}function Af(a,b,c){b=zf(b);if(zf(a)!==b&&c)throw Error(p(425));}function Bf(){}
		var Cf=null,Df=null;function Ef(a,b){return "textarea"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}
		var Ff="function"===typeof setTimeout?setTimeout:void 0,Gf="function"===typeof clearTimeout?clearTimeout:void 0,Hf="function"===typeof Promise?Promise:void 0,Jf="function"===typeof queueMicrotask?queueMicrotask:"undefined"!==typeof Hf?function(a){return Hf.resolve(null).then(a).catch(If)}:Ff;function If(a){setTimeout(function(){throw a;});}
		function Kf(a,b){var c=b,d=0;do{var e=c.nextSibling;a.removeChild(c);if(e&&8===e.nodeType)if(c=e.data,"/$"===c){if(0===d){a.removeChild(e);bd(b);return}d--;}else "$"!==c&&"$?"!==c&&"$!"!==c||d++;c=e;}while(c);bd(b);}function Lf(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break;if(8===b){b=a.data;if("$"===b||"$!"===b||"$?"===b)break;if("/$"===b)return null}}return a}
		function Mf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if("$"===c||"$!"===c||"$?"===c){if(0===b)return a;b--;}else "/$"===c&&b++;}a=a.previousSibling;}return null}var Nf=Math.random().toString(36).slice(2),Of="__reactFiber$"+Nf,Pf="__reactProps$"+Nf,uf="__reactContainer$"+Nf,of="__reactEvents$"+Nf,Qf="__reactListeners$"+Nf,Rf="__reactHandles$"+Nf;
		function Wc(a){var b=a[Of];if(b)return b;for(var c=a.parentNode;c;){if(b=c[uf]||c[Of]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Mf(a);null!==a;){if(c=a[Of])return c;a=Mf(a);}return b}a=c;c=a.parentNode;}return null}function Cb(a){a=a[Of]||a[uf];return !a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function ue(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(p(33));}function Db(a){return a[Pf]||null}var Sf=[],Tf=-1;function Uf(a){return {current:a}}
		function E(a){0>Tf||(a.current=Sf[Tf],Sf[Tf]=null,Tf--);}function G(a,b){Tf++;Sf[Tf]=a.current;a.current=b;}var Vf={},H=Uf(Vf),Wf=Uf(!1),Xf=Vf;function Yf(a,b){var c=a.type.contextTypes;if(!c)return Vf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}
		function Zf(a){a=a.childContextTypes;return null!==a&&void 0!==a}function $f(){E(Wf);E(H);}function ag(a,b,c){if(H.current!==Vf)throw Error(p(168));G(H,b);G(Wf,c);}function bg(a,b,c){var d=a.stateNode;b=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in b))throw Error(p(108,Ra(a)||"Unknown",e));return A({},c,d)}
		function cg(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Vf;Xf=H.current;G(H,a);G(Wf,Wf.current);return !0}function dg(a,b,c){var d=a.stateNode;if(!d)throw Error(p(169));c?(a=bg(a,b,Xf),d.__reactInternalMemoizedMergedChildContext=a,E(Wf),E(H),G(H,a)):E(Wf);G(Wf,c);}var eg=null,fg=!1,gg=!1;function hg(a){null===eg?eg=[a]:eg.push(a);}function ig(a){fg=!0;hg(a);}
		function jg(){if(!gg&&null!==eg){gg=!0;var a=0,b=C;try{var c=eg;for(C=1;a<c.length;a++){var d=c[a];do d=d(!0);while(null!==d)}eg=null;fg=!1;}catch(e){throw null!==eg&&(eg=eg.slice(a+1)),ac(fc,jg),e;}finally{C=b,gg=!1;}}return null}var kg=[],lg=0,mg=null,ng=0,og=[],pg=0,qg=null,rg=1,sg="";function tg(a,b){kg[lg++]=ng;kg[lg++]=mg;mg=a;ng=b;}
		function ug(a,b,c){og[pg++]=rg;og[pg++]=sg;og[pg++]=qg;qg=a;var d=rg;a=sg;var e=32-oc(d)-1;d&=~(1<<e);c+=1;var f=32-oc(b)+e;if(30<f){var g=e-e%5;f=(d&(1<<g)-1).toString(32);d>>=g;e-=g;rg=1<<32-oc(b)+e|c<<e|d;sg=f+a;}else rg=1<<f|c<<e|d,sg=a;}function vg(a){null!==a.return&&(tg(a,1),ug(a,1,0));}function wg(a){for(;a===mg;)mg=kg[--lg],kg[lg]=null,ng=kg[--lg],kg[lg]=null;for(;a===qg;)qg=og[--pg],og[pg]=null,sg=og[--pg],og[pg]=null,rg=og[--pg],og[pg]=null;}var xg=null,yg=null,I=!1,zg=null;
		function Ag(a,b){var c=Bg(5,null,null,0);c.elementType="DELETED";c.stateNode=b;c.return=a;b=a.deletions;null===b?(a.deletions=[c],a.flags|=16):b.push(c);}
		function Cg(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,xg=a,yg=Lf(b.firstChild),!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,xg=a,yg=null,!0):!1;case 13:return b=8!==b.nodeType?null:b,null!==b?(c=null!==qg?{id:rg,overflow:sg}:null,a.memoizedState={dehydrated:b,treeContext:c,retryLane:1073741824},c=Bg(18,null,null,0),c.stateNode=b,c.return=a,a.child=c,xg=a,yg=
		null,!0):!1;default:return !1}}function Dg(a){return 0!==(a.mode&1)&&0===(a.flags&128)}function Eg(a){if(I){var b=yg;if(b){var c=b;if(!Cg(a,b)){if(Dg(a))throw Error(p(418));b=Lf(c.nextSibling);var d=xg;b&&Cg(a,b)?Ag(d,c):(a.flags=a.flags&-4097|2,I=!1,xg=a);}}else {if(Dg(a))throw Error(p(418));a.flags=a.flags&-4097|2;I=!1;xg=a;}}}function Fg(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;xg=a;}
		function Gg(a){if(a!==xg)return !1;if(!I)return Fg(a),I=!0,!1;var b;(b=3!==a.tag)&&!(b=5!==a.tag)&&(b=a.type,b="head"!==b&&"body"!==b&&!Ef(a.type,a.memoizedProps));if(b&&(b=yg)){if(Dg(a))throw Hg(),Error(p(418));for(;b;)Ag(a,b),b=Lf(b.nextSibling);}Fg(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(p(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if("/$"===c){if(0===b){yg=Lf(a.nextSibling);break a}b--;}else "$"!==c&&"$!"!==c&&"$?"!==c||b++;}a=a.nextSibling;}yg=
		null;}}else yg=xg?Lf(a.stateNode.nextSibling):null;return !0}function Hg(){for(var a=yg;a;)a=Lf(a.nextSibling);}function Ig(){yg=xg=null;I=!1;}function Jg(a){null===zg?zg=[a]:zg.push(a);}var Kg=ua.ReactCurrentBatchConfig;function Lg(a,b){if(a&&a.defaultProps){b=A({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}var Mg=Uf(null),Ng=null,Og=null,Pg=null;function Qg(){Pg=Og=Ng=null;}function Rg(a){var b=Mg.current;E(Mg);a._currentValue=b;}
		function Sg(a,b,c){for(;null!==a;){var d=a.alternate;(a.childLanes&b)!==b?(a.childLanes|=b,null!==d&&(d.childLanes|=b)):null!==d&&(d.childLanes&b)!==b&&(d.childLanes|=b);if(a===c)break;a=a.return;}}function Tg(a,b){Ng=a;Pg=Og=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(Ug=!0),a.firstContext=null);}
		function Vg(a){var b=a._currentValue;if(Pg!==a)if(a={context:a,memoizedValue:b,next:null},null===Og){if(null===Ng)throw Error(p(308));Og=a;Ng.dependencies={lanes:0,firstContext:a};}else Og=Og.next=a;return b}var Wg=null;function Xg(a){null===Wg?Wg=[a]:Wg.push(a);}function Yg(a,b,c,d){var e=b.interleaved;null===e?(c.next=c,Xg(b)):(c.next=e.next,e.next=c);b.interleaved=c;return Zg(a,d)}
		function Zg(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}var $g=!1;function ah(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null};}
		function bh(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects});}function ch(a,b){return {eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}
		function dh(a,b,c){var d=a.updateQueue;if(null===d)return null;d=d.shared;if(0!==(K&2)){var e=d.pending;null===e?b.next=b:(b.next=e.next,e.next=b);d.pending=b;return Zg(a,c)}e=d.interleaved;null===e?(b.next=b,Xg(d)):(b.next=e.next,e.next=b);d.interleaved=b;return Zg(a,c)}function eh(a,b,c){b=b.updateQueue;if(null!==b&&(b=b.shared,0!==(c&4194240))){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c);}}
		function fh(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next;}while(null!==c);null===f?e=f=b:f=f.next=b;}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=
		b;c.lastBaseUpdate=b;}
		function gh(a,b,c,d){var e=a.updateQueue;$g=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var m=a.alternate;null!==m&&(m=m.updateQueue,h=m.lastBaseUpdate,h!==g&&(null===h?m.firstBaseUpdate=l:h.next=l,m.lastBaseUpdate=k));}if(null!==f){var q=e.baseState;g=0;m=l=k=null;h=f;do{var r=h.lane,y=h.eventTime;if((d&r)===r){null!==m&&(m=m.next={eventTime:y,lane:0,tag:h.tag,payload:h.payload,callback:h.callback,
		next:null});a:{var n=a,t=h;r=b;y=c;switch(t.tag){case 1:n=t.payload;if("function"===typeof n){q=n.call(y,q,r);break a}q=n;break a;case 3:n.flags=n.flags&-65537|128;case 0:n=t.payload;r="function"===typeof n?n.call(y,q,r):n;if(null===r||void 0===r)break a;q=A({},q,r);break a;case 2:$g=!0;}}null!==h.callback&&0!==h.lane&&(a.flags|=64,r=e.effects,null===r?e.effects=[h]:r.push(h));}else y={eventTime:y,lane:r,tag:h.tag,payload:h.payload,callback:h.callback,next:null},null===m?(l=m=y,k=q):m=m.next=y,g|=r;
		h=h.next;if(null===h)if(h=e.shared.pending,null===h)break;else r=h,h=r.next,r.next=null,e.lastBaseUpdate=r,e.shared.pending=null;}while(1);null===m&&(k=q);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=m;b=e.shared.interleaved;if(null!==b){e=b;do g|=e.lane,e=e.next;while(e!==b)}else null===f&&(e.shared.lanes=0);hh|=g;a.lanes=g;a.memoizedState=q;}}
		function ih(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if("function"!==typeof e)throw Error(p(191,e));e.call(d);}}}var jh=(new aa.Component).refs;function kh(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:A({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c);}
		var nh={isMounted:function(a){return (a=a._reactInternals)?Vb(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=L(),e=lh(a),f=ch(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=dh(a,f,e);null!==b&&(mh(b,a,e,d),eh(b,a,e));},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=L(),e=lh(a),f=ch(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=dh(a,f,e);null!==b&&(mh(b,a,e,d),eh(b,a,e));},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=L(),d=
		lh(a),e=ch(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=b);b=dh(a,e,d);null!==b&&(mh(b,a,d,c),eh(b,a,d));}};function oh(a,b,c,d,e,f,g){a=a.stateNode;return "function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Ie(c,d)||!Ie(e,f):!0}
		function ph(a,b,c){var d=!1,e=Vf;var f=b.contextType;"object"===typeof f&&null!==f?f=Vg(f):(e=Zf(b)?Xf:H.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Yf(a,e):Vf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=nh;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}
		function qh(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&nh.enqueueReplaceState(b,b.state,null);}
		function rh(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=jh;ah(a);var f=b.contextType;"object"===typeof f&&null!==f?e.context=Vg(f):(f=Zf(b)?Xf:H.current,e.context=Yf(a,f));e.state=a.memoizedState;f=b.getDerivedStateFromProps;"function"===typeof f&&(kh(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||(b=e.state,
		"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&nh.enqueueReplaceState(e,e.state,null),gh(a,c,e,d),e.state=a.memoizedState);"function"===typeof e.componentDidMount&&(a.flags|=4194308);}
		function sh(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(p(309));var d=c.stateNode;}if(!d)throw Error(p(147,a));var e=d,f=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===f)return b.ref;b=function(a){var b=e.refs;b===jh&&(b=e.refs={});null===a?delete b[f]:b[f]=a;};b._stringRef=f;return b}if("string"!==typeof a)throw Error(p(284));if(!c._owner)throw Error(p(290,a));}return a}
		function th(a,b){a=Object.prototype.toString.call(b);throw Error(p(31,"[object Object]"===a?"object with keys {"+Object.keys(b).join(", ")+"}":a));}function uh(a){var b=a._init;return b(a._payload)}
		function vh(a){function b(b,c){if(a){var d=b.deletions;null===d?(b.deletions=[c],b.flags|=16):d.push(c);}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=wh(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return b.flags|=1048576,c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags|=2,c):d;b.flags|=2;return c}function g(b){a&&
		null===b.alternate&&(b.flags|=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=xh(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){var f=c.type;if(f===ya)return m(a,b,c.props.children,d,c.key);if(null!==b&&(b.elementType===f||"object"===typeof f&&null!==f&&f.$$typeof===Ha&&uh(f)===b.type))return d=e(b,c.props),d.ref=sh(a,b,c),d.return=a,d;d=yh(c.type,c.key,c.props,null,a.mode,d);d.ref=sh(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||
		b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=zh(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Ah(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function q(a,b,c){if("string"===typeof b&&""!==b||"number"===typeof b)return b=xh(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case va:return c=yh(b.type,b.key,b.props,null,a.mode,c),
		c.ref=sh(a,null,b),c.return=a,c;case wa:return b=zh(b,a.mode,c),b.return=a,b;case Ha:var d=b._init;return q(a,d(b._payload),c)}if(eb(b)||Ka(b))return b=Ah(b,a.mode,c,null),b.return=a,b;th(a,b);}return null}function r(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c&&""!==c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case va:return c.key===e?k(a,b,c,d):null;case wa:return c.key===e?l(a,b,c,d):null;case Ha:return e=c._init,r(a,
		b,e(c._payload),d)}if(eb(c)||Ka(c))return null!==e?null:m(a,b,c,d,null);th(a,c);}return null}function y(a,b,c,d,e){if("string"===typeof d&&""!==d||"number"===typeof d)return a=a.get(c)||null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case va:return a=a.get(null===d.key?c:d.key)||null,k(b,a,d,e);case wa:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e);case Ha:var f=d._init;return y(a,b,c,f(d._payload),e)}if(eb(d)||Ka(d))return a=a.get(c)||null,m(b,a,d,e,null);th(b,d);}return null}
		function n(e,g,h,k){for(var l=null,m=null,u=g,w=g=0,x=null;null!==u&&w<h.length;w++){u.index>w?(x=u,u=null):x=u.sibling;var n=r(e,u,h[w],k);if(null===n){null===u&&(u=x);break}a&&u&&null===n.alternate&&b(e,u);g=f(n,g,w);null===m?l=n:m.sibling=n;m=n;u=x;}if(w===h.length)return c(e,u),I&&tg(e,w),l;if(null===u){for(;w<h.length;w++)u=q(e,h[w],k),null!==u&&(g=f(u,g,w),null===m?l=u:m.sibling=u,m=u);I&&tg(e,w);return l}for(u=d(e,u);w<h.length;w++)x=y(u,e,w,h[w],k),null!==x&&(a&&null!==x.alternate&&u.delete(null===
		x.key?w:x.key),g=f(x,g,w),null===m?l=x:m.sibling=x,m=x);a&&u.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function t(e,g,h,k){var l=Ka(h);if("function"!==typeof l)throw Error(p(150));h=l.call(h);if(null==h)throw Error(p(151));for(var u=l=null,m=g,w=g=0,x=null,n=h.next();null!==m&&!n.done;w++,n=h.next()){m.index>w?(x=m,m=null):x=m.sibling;var t=r(e,m,n.value,k);if(null===t){null===m&&(m=x);break}a&&m&&null===t.alternate&&b(e,m);g=f(t,g,w);null===u?l=t:u.sibling=t;u=t;m=x;}if(n.done)return c(e,
		m),I&&tg(e,w),l;if(null===m){for(;!n.done;w++,n=h.next())n=q(e,n.value,k),null!==n&&(g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);I&&tg(e,w);return l}for(m=d(e,m);!n.done;w++,n=h.next())n=y(m,e,w,n.value,k),null!==n&&(a&&null!==n.alternate&&m.delete(null===n.key?w:n.key),g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);a&&m.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function J(a,d,f,h){"object"===typeof f&&null!==f&&f.type===ya&&null===f.key&&(f=f.props.children);if("object"===typeof f&&null!==f){switch(f.$$typeof){case va:a:{for(var k=
		f.key,l=d;null!==l;){if(l.key===k){k=f.type;if(k===ya){if(7===l.tag){c(a,l.sibling);d=e(l,f.props.children);d.return=a;a=d;break a}}else if(l.elementType===k||"object"===typeof k&&null!==k&&k.$$typeof===Ha&&uh(k)===l.type){c(a,l.sibling);d=e(l,f.props);d.ref=sh(a,l,f);d.return=a;a=d;break a}c(a,l);break}else b(a,l);l=l.sibling;}f.type===ya?(d=Ah(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=yh(f.type,f.key,f.props,null,a.mode,h),h.ref=sh(a,d,f),h.return=a,a=h);}return g(a);case wa:a:{for(l=f.key;null!==
		d;){if(d.key===l)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else {c(a,d);break}else b(a,d);d=d.sibling;}d=zh(f,a.mode,h);d.return=a;a=d;}return g(a);case Ha:return l=f._init,J(a,d,l(f._payload),h)}if(eb(f))return n(a,d,f,h);if(Ka(f))return t(a,d,f,h);th(a,f);}return "string"===typeof f&&""!==f||"number"===typeof f?(f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):
		(c(a,d),d=xh(f,a.mode,h),d.return=a,a=d),g(a)):c(a,d)}return J}var Bh=vh(!0),Ch=vh(!1),Dh={},Eh=Uf(Dh),Fh=Uf(Dh),Gh=Uf(Dh);function Hh(a){if(a===Dh)throw Error(p(174));return a}function Ih(a,b){G(Gh,b);G(Fh,a);G(Eh,Dh);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:lb(null,"");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=lb(b,a);}E(Eh);G(Eh,b);}function Jh(){E(Eh);E(Fh);E(Gh);}
		function Kh(a){Hh(Gh.current);var b=Hh(Eh.current);var c=lb(b,a.type);b!==c&&(G(Fh,a),G(Eh,c));}function Lh(a){Fh.current===a&&(E(Eh),E(Fh));}var M=Uf(0);
		function Mh(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||"$?"===c.data||"$!"===c.data))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&128))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return;}b.sibling.return=b.return;b=b.sibling;}return null}var Nh=[];
		function Oh(){for(var a=0;a<Nh.length;a++)Nh[a]._workInProgressVersionPrimary=null;Nh.length=0;}var Ph=ua.ReactCurrentDispatcher,Qh=ua.ReactCurrentBatchConfig,Rh=0,N=null,O=null,P=null,Sh=!1,Th=!1,Uh=0,Vh=0;function Q(){throw Error(p(321));}function Wh(a,b){if(null===b)return !1;for(var c=0;c<b.length&&c<a.length;c++)if(!He(a[c],b[c]))return !1;return !0}
		function Xh(a,b,c,d,e,f){Rh=f;N=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;Ph.current=null===a||null===a.memoizedState?Yh:Zh;a=c(d,e);if(Th){f=0;do{Th=!1;Uh=0;if(25<=f)throw Error(p(301));f+=1;P=O=null;b.updateQueue=null;Ph.current=$h;a=c(d,e);}while(Th)}Ph.current=ai;b=null!==O&&null!==O.next;Rh=0;P=O=N=null;Sh=!1;if(b)throw Error(p(300));return a}function bi(){var a=0!==Uh;Uh=0;return a}
		function ci(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===P?N.memoizedState=P=a:P=P.next=a;return P}function di(){if(null===O){var a=N.alternate;a=null!==a?a.memoizedState:null;}else a=O.next;var b=null===P?N.memoizedState:P.next;if(null!==b)P=b,O=a;else {if(null===a)throw Error(p(310));O=a;a={memoizedState:O.memoizedState,baseState:O.baseState,baseQueue:O.baseQueue,queue:O.queue,next:null};null===P?N.memoizedState=P=a:P=P.next=a;}return P}
		function ei(a,b){return "function"===typeof b?b(a):b}
		function fi(a){var b=di(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=O,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g;}d.baseQueue=e=f;c.pending=null;}if(null!==e){f=e.next;d=d.baseState;var h=g=null,k=null,l=f;do{var m=l.lane;if((Rh&m)===m)null!==k&&(k=k.next={lane:0,action:l.action,hasEagerState:l.hasEagerState,eagerState:l.eagerState,next:null}),d=l.hasEagerState?l.eagerState:a(d,l.action);else {var q={lane:m,action:l.action,hasEagerState:l.hasEagerState,
		eagerState:l.eagerState,next:null};null===k?(h=k=q,g=d):k=k.next=q;N.lanes|=m;hh|=m;}l=l.next;}while(null!==l&&l!==f);null===k?g=d:k.next=h;He(d,b.memoizedState)||(Ug=!0);b.memoizedState=d;b.baseState=g;b.baseQueue=k;c.lastRenderedState=d;}a=c.interleaved;if(null!==a){e=a;do f=e.lane,N.lanes|=f,hh|=f,e=e.next;while(e!==a)}else null===e&&(c.lanes=0);return [b.memoizedState,c.dispatch]}
		function gi(a){var b=di(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);He(f,b.memoizedState)||(Ug=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f;}return [f,d]}function hi(){}
		function ii(a,b){var c=N,d=di(),e=b(),f=!He(d.memoizedState,e);f&&(d.memoizedState=e,Ug=!0);d=d.queue;ji(ki.bind(null,c,d,a),[a]);if(d.getSnapshot!==b||f||null!==P&&P.memoizedState.tag&1){c.flags|=2048;li(9,mi.bind(null,c,d,e,b),void 0,null);if(null===R)throw Error(p(349));0!==(Rh&30)||ni(c,b,e);}return e}function ni(a,b,c){a.flags|=16384;a={getSnapshot:b,value:c};b=N.updateQueue;null===b?(b={lastEffect:null,stores:null},N.updateQueue=b,b.stores=[a]):(c=b.stores,null===c?b.stores=[a]:c.push(a));}
		function mi(a,b,c,d){b.value=c;b.getSnapshot=d;oi(b)&&pi(a);}function ki(a,b,c){return c(function(){oi(b)&&pi(a);})}function oi(a){var b=a.getSnapshot;a=a.value;try{var c=b();return !He(a,c)}catch(d){return !0}}function pi(a){var b=Zg(a,1);null!==b&&mh(b,a,1,-1);}
		function qi(a){var b=ci();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:ei,lastRenderedState:a};b.queue=a;a=a.dispatch=ri.bind(null,N,a);return [b.memoizedState,a]}
		function li(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=N.updateQueue;null===b?(b={lastEffect:null,stores:null},N.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function si(){return di().memoizedState}function ti(a,b,c,d){var e=ci();N.flags|=a;e.memoizedState=li(1|b,c,void 0,void 0===d?null:d);}
		function ui(a,b,c,d){var e=di();d=void 0===d?null:d;var f=void 0;if(null!==O){var g=O.memoizedState;f=g.destroy;if(null!==d&&Wh(d,g.deps)){e.memoizedState=li(b,c,f,d);return}}N.flags|=a;e.memoizedState=li(1|b,c,f,d);}function vi(a,b){return ti(8390656,8,a,b)}function ji(a,b){return ui(2048,8,a,b)}function wi(a,b){return ui(4,2,a,b)}function xi(a,b){return ui(4,4,a,b)}
		function yi(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null);};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null;}}function zi(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ui(4,4,yi.bind(null,b,a),c)}function Ai(){}function Bi(a,b){var c=di();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Wh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}
		function Ci(a,b){var c=di();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Wh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function Di(a,b,c){if(0===(Rh&21))return a.baseState&&(a.baseState=!1,Ug=!0),a.memoizedState=c;He(c,b)||(c=yc(),N.lanes|=c,hh|=c,a.baseState=!0);return b}function Ei(a,b){var c=C;C=0!==c&&4>c?c:4;a(!0);var d=Qh.transition;Qh.transition={};try{a(!1),b();}finally{C=c,Qh.transition=d;}}function Fi(){return di().memoizedState}
		function Gi(a,b,c){var d=lh(a);c={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(Hi(a))Ii(b,c);else if(c=Yg(a,b,c,d),null!==c){var e=L();mh(c,a,d,e);Ji(c,b,d);}}
		function ri(a,b,c){var d=lh(a),e={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(Hi(a))Ii(b,e);else {var f=a.alternate;if(0===a.lanes&&(null===f||0===f.lanes)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.hasEagerState=!0;e.eagerState=h;if(He(h,g)){var k=b.interleaved;null===k?(e.next=e,Xg(b)):(e.next=k.next,k.next=e);b.interleaved=e;return}}catch(l){}finally{}c=Yg(a,b,e,d);null!==c&&(e=L(),mh(c,a,d,e),Ji(c,b,d));}}
		function Hi(a){var b=a.alternate;return a===N||null!==b&&b===N}function Ii(a,b){Th=Sh=!0;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b;}function Ji(a,b,c){if(0!==(c&4194240)){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c);}}
		var ai={readContext:Vg,useCallback:Q,useContext:Q,useEffect:Q,useImperativeHandle:Q,useInsertionEffect:Q,useLayoutEffect:Q,useMemo:Q,useReducer:Q,useRef:Q,useState:Q,useDebugValue:Q,useDeferredValue:Q,useTransition:Q,useMutableSource:Q,useSyncExternalStore:Q,useId:Q,unstable_isNewReconciler:!1},Yh={readContext:Vg,useCallback:function(a,b){ci().memoizedState=[a,void 0===b?null:b];return a},useContext:Vg,useEffect:vi,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ti(4194308,
		4,yi.bind(null,b,a),c)},useLayoutEffect:function(a,b){return ti(4194308,4,a,b)},useInsertionEffect:function(a,b){return ti(4,2,a,b)},useMemo:function(a,b){var c=ci();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=ci();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};d.queue=a;a=a.dispatch=Gi.bind(null,N,a);return [d.memoizedState,a]},useRef:function(a){var b=
		ci();a={current:a};return b.memoizedState=a},useState:qi,useDebugValue:Ai,useDeferredValue:function(a){return ci().memoizedState=a},useTransition:function(){var a=qi(!1),b=a[0];a=Ei.bind(null,a[1]);ci().memoizedState=a;return [b,a]},useMutableSource:function(){},useSyncExternalStore:function(a,b,c){var d=N,e=ci();if(I){if(void 0===c)throw Error(p(407));c=c();}else {c=b();if(null===R)throw Error(p(349));0!==(Rh&30)||ni(d,b,c);}e.memoizedState=c;var f={value:c,getSnapshot:b};e.queue=f;vi(ki.bind(null,d,
		f,a),[a]);d.flags|=2048;li(9,mi.bind(null,d,f,c,b),void 0,null);return c},useId:function(){var a=ci(),b=R.identifierPrefix;if(I){var c=sg;var d=rg;c=(d&~(1<<32-oc(d)-1)).toString(32)+c;b=":"+b+"R"+c;c=Uh++;0<c&&(b+="H"+c.toString(32));b+=":";}else c=Vh++,b=":"+b+"r"+c.toString(32)+":";return a.memoizedState=b},unstable_isNewReconciler:!1},Zh={readContext:Vg,useCallback:Bi,useContext:Vg,useEffect:ji,useImperativeHandle:zi,useInsertionEffect:wi,useLayoutEffect:xi,useMemo:Ci,useReducer:fi,useRef:si,useState:function(){return fi(ei)},
		useDebugValue:Ai,useDeferredValue:function(a){var b=di();return Di(b,O.memoizedState,a)},useTransition:function(){var a=fi(ei)[0],b=di().memoizedState;return [a,b]},useMutableSource:hi,useSyncExternalStore:ii,useId:Fi,unstable_isNewReconciler:!1},$h={readContext:Vg,useCallback:Bi,useContext:Vg,useEffect:ji,useImperativeHandle:zi,useInsertionEffect:wi,useLayoutEffect:xi,useMemo:Ci,useReducer:gi,useRef:si,useState:function(){return gi(ei)},useDebugValue:Ai,useDeferredValue:function(a){var b=di();return null===
		O?b.memoizedState=a:Di(b,O.memoizedState,a)},useTransition:function(){var a=gi(ei)[0],b=di().memoizedState;return [a,b]},useMutableSource:hi,useSyncExternalStore:ii,useId:Fi,unstable_isNewReconciler:!1};function Ki(a,b){try{var c="",d=b;do c+=Pa(d),d=d.return;while(d);var e=c;}catch(f){e="\nError generating stack: "+f.message+"\n"+f.stack;}return {value:a,source:b,stack:e,digest:null}}function Li(a,b,c){return {value:a,source:null,stack:null!=c?c:null,digest:null!=b?b:null}}
		function Mi(a,b){try{console.error(b.value);}catch(c){setTimeout(function(){throw c;});}}var Ni="function"===typeof WeakMap?WeakMap:Map;function Oi(a,b,c){c=ch(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Pi||(Pi=!0,Qi=d);Mi(a,b);};return c}
		function Ri(a,b,c){c=ch(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){return d(e)};c.callback=function(){Mi(a,b);};}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){Mi(a,b);"function"!==typeof d&&(null===Si?Si=new Set([this]):Si.add(this));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:""});});return c}
		function Ti(a,b,c){var d=a.pingCache;if(null===d){d=a.pingCache=new Ni;var e=new Set;d.set(b,e);}else e=d.get(b),void 0===e&&(e=new Set,d.set(b,e));e.has(c)||(e.add(c),a=Ui.bind(null,a,b,c),b.then(a,a));}function Vi(a){do{var b;if(b=13===a.tag)b=a.memoizedState,b=null!==b?null!==b.dehydrated?!0:!1:!0;if(b)return a;a=a.return;}while(null!==a);return null}
		function Wi(a,b,c,d,e){if(0===(a.mode&1))return a===b?a.flags|=65536:(a.flags|=128,c.flags|=131072,c.flags&=-52805,1===c.tag&&(null===c.alternate?c.tag=17:(b=ch(-1,1),b.tag=2,dh(c,b,1))),c.lanes|=1),a;a.flags|=65536;a.lanes=e;return a}var Xi=ua.ReactCurrentOwner,Ug=!1;function Yi(a,b,c,d){b.child=null===a?Ch(b,null,c,d):Bh(b,a.child,c,d);}
		function Zi(a,b,c,d,e){c=c.render;var f=b.ref;Tg(b,e);d=Xh(a,b,c,d,f,e);c=bi();if(null!==a&&!Ug)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,$i(a,b,e);I&&c&&vg(b);b.flags|=1;Yi(a,b,d,e);return b.child}
		function aj(a,b,c,d,e){if(null===a){var f=c.type;if("function"===typeof f&&!bj(f)&&void 0===f.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=f,cj(a,b,f,d,e);a=yh(c.type,null,d,b,b.mode,e);a.ref=b.ref;a.return=b;return b.child=a}f=a.child;if(0===(a.lanes&e)){var g=f.memoizedProps;c=c.compare;c=null!==c?c:Ie;if(c(g,d)&&a.ref===b.ref)return $i(a,b,e)}b.flags|=1;a=wh(f,d);a.ref=b.ref;a.return=b;return b.child=a}
		function cj(a,b,c,d,e){if(null!==a){var f=a.memoizedProps;if(Ie(f,d)&&a.ref===b.ref)if(Ug=!1,b.pendingProps=d=f,0!==(a.lanes&e))0!==(a.flags&131072)&&(Ug=!0);else return b.lanes=a.lanes,$i(a,b,e)}return dj(a,b,c,d,e)}
		function ej(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if("hidden"===d.mode)if(0===(b.mode&1))b.memoizedState={baseLanes:0,cachePool:null,transitions:null},G(fj,gj),gj|=c;else {if(0===(c&1073741824))return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a,cachePool:null,transitions:null},b.updateQueue=null,G(fj,gj),gj|=a,null;b.memoizedState={baseLanes:0,cachePool:null,transitions:null};d=null!==f?f.baseLanes:c;G(fj,gj);gj|=d;}else null!==
		f?(d=f.baseLanes|c,b.memoizedState=null):d=c,G(fj,gj),gj|=d;Yi(a,b,e,c);return b.child}function hj(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=512,b.flags|=2097152;}function dj(a,b,c,d,e){var f=Zf(c)?Xf:H.current;f=Yf(b,f);Tg(b,e);c=Xh(a,b,c,d,f,e);d=bi();if(null!==a&&!Ug)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,$i(a,b,e);I&&d&&vg(b);b.flags|=1;Yi(a,b,c,e);return b.child}
		function ij(a,b,c,d,e){if(Zf(c)){var f=!0;cg(b);}else f=!1;Tg(b,e);if(null===b.stateNode)jj(a,b),ph(b,c,d),rh(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=Vg(l):(l=Zf(c)?Xf:H.current,l=Yf(b,l));var m=c.getDerivedStateFromProps,q="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate;q||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||
		(h!==d||k!==l)&&qh(b,g,d,l);$g=!1;var r=b.memoizedState;g.state=r;gh(b,d,g,e);k=b.memoizedState;h!==d||r!==k||Wf.current||$g?("function"===typeof m&&(kh(b,c,m,d),k=b.memoizedState),(h=$g||oh(b,c,h,d,r,k,l))?(q||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),"function"===typeof g.componentDidMount&&(b.flags|=4194308)):
		("function"===typeof g.componentDidMount&&(b.flags|=4194308),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.flags|=4194308),d=!1);}else {g=b.stateNode;bh(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:Lg(b.type,h);g.props=l;q=b.pendingProps;r=g.context;k=c.contextType;"object"===typeof k&&null!==k?k=Vg(k):(k=Zf(c)?Xf:H.current,k=Yf(b,k));var y=c.getDerivedStateFromProps;(m="function"===typeof y||"function"===typeof g.getSnapshotBeforeUpdate)||
		"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==q||r!==k)&&qh(b,g,d,k);$g=!1;r=b.memoizedState;g.state=r;gh(b,d,g,e);var n=b.memoizedState;h!==q||r!==n||Wf.current||$g?("function"===typeof y&&(kh(b,c,y,d),n=b.memoizedState),(l=$g||oh(b,c,l,d,r,n,k)||!1)?(m||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,n,k),"function"===typeof g.UNSAFE_componentWillUpdate&&
		g.UNSAFE_componentWillUpdate(d,n,k)),"function"===typeof g.componentDidUpdate&&(b.flags|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=1024)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),b.memoizedProps=d,b.memoizedState=n),g.props=d,g.state=n,g.context=k,d=l):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===
		a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),d=!1);}return kj(a,b,c,d,f,e)}
		function kj(a,b,c,d,e,f){hj(a,b);var g=0!==(b.flags&128);if(!d&&!g)return e&&dg(b,c,!1),$i(a,b,f);d=b.stateNode;Xi.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Bh(b,a.child,null,f),b.child=Bh(b,null,h,f)):Yi(a,b,h,f);b.memoizedState=d.state;e&&dg(b,c,!0);return b.child}function lj(a){var b=a.stateNode;b.pendingContext?ag(a,b.pendingContext,b.pendingContext!==b.context):b.context&&ag(a,b.context,!1);Ih(a,b.containerInfo);}
		function mj(a,b,c,d,e){Ig();Jg(e);b.flags|=256;Yi(a,b,c,d);return b.child}var nj={dehydrated:null,treeContext:null,retryLane:0};function oj(a){return {baseLanes:a,cachePool:null,transitions:null}}
		function pj(a,b,c){var d=b.pendingProps,e=M.current,f=!1,g=0!==(b.flags&128),h;(h=g)||(h=null!==a&&null===a.memoizedState?!1:0!==(e&2));if(h)f=!0,b.flags&=-129;else if(null===a||null!==a.memoizedState)e|=1;G(M,e&1);if(null===a){Eg(b);a=b.memoizedState;if(null!==a&&(a=a.dehydrated,null!==a))return 0===(b.mode&1)?b.lanes=1:"$!"===a.data?b.lanes=8:b.lanes=1073741824,null;g=d.children;a=d.fallback;return f?(d=b.mode,f=b.child,g={mode:"hidden",children:g},0===(d&1)&&null!==f?(f.childLanes=0,f.pendingProps=
		g):f=qj(g,d,0,null),a=Ah(a,d,c,null),f.return=b,a.return=b,f.sibling=a,b.child=f,b.child.memoizedState=oj(c),b.memoizedState=nj,a):rj(b,g)}e=a.memoizedState;if(null!==e&&(h=e.dehydrated,null!==h))return sj(a,b,g,d,h,e,c);if(f){f=d.fallback;g=b.mode;e=a.child;h=e.sibling;var k={mode:"hidden",children:d.children};0===(g&1)&&b.child!==e?(d=b.child,d.childLanes=0,d.pendingProps=k,b.deletions=null):(d=wh(e,k),d.subtreeFlags=e.subtreeFlags&14680064);null!==h?f=wh(h,f):(f=Ah(f,g,c,null),f.flags|=2);f.return=
		b;d.return=b;d.sibling=f;b.child=d;d=f;f=b.child;g=a.child.memoizedState;g=null===g?oj(c):{baseLanes:g.baseLanes|c,cachePool:null,transitions:g.transitions};f.memoizedState=g;f.childLanes=a.childLanes&~c;b.memoizedState=nj;return d}f=a.child;a=f.sibling;d=wh(f,{mode:"visible",children:d.children});0===(b.mode&1)&&(d.lanes=c);d.return=b;d.sibling=null;null!==a&&(c=b.deletions,null===c?(b.deletions=[a],b.flags|=16):c.push(a));b.child=d;b.memoizedState=null;return d}
		function rj(a,b){b=qj({mode:"visible",children:b},a.mode,0,null);b.return=a;return a.child=b}function tj(a,b,c,d){null!==d&&Jg(d);Bh(b,a.child,null,c);a=rj(b,b.pendingProps.children);a.flags|=2;b.memoizedState=null;return a}
		function sj(a,b,c,d,e,f,g){if(c){if(b.flags&256)return b.flags&=-257,d=Li(Error(p(422))),tj(a,b,g,d);if(null!==b.memoizedState)return b.child=a.child,b.flags|=128,null;f=d.fallback;e=b.mode;d=qj({mode:"visible",children:d.children},e,0,null);f=Ah(f,e,g,null);f.flags|=2;d.return=b;f.return=b;d.sibling=f;b.child=d;0!==(b.mode&1)&&Bh(b,a.child,null,g);b.child.memoizedState=oj(g);b.memoizedState=nj;return f}if(0===(b.mode&1))return tj(a,b,g,null);if("$!"===e.data){d=e.nextSibling&&e.nextSibling.dataset;
		if(d)var h=d.dgst;d=h;f=Error(p(419));d=Li(f,d,void 0);return tj(a,b,g,d)}h=0!==(g&a.childLanes);if(Ug||h){d=R;if(null!==d){switch(g&-g){case 4:e=2;break;case 16:e=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:e=32;break;case 536870912:e=268435456;break;default:e=0;}e=0!==(e&(d.suspendedLanes|g))?0:e;
		0!==e&&e!==f.retryLane&&(f.retryLane=e,Zg(a,e),mh(d,a,e,-1));}uj();d=Li(Error(p(421)));return tj(a,b,g,d)}if("$?"===e.data)return b.flags|=128,b.child=a.child,b=vj.bind(null,a),e._reactRetry=b,null;a=f.treeContext;yg=Lf(e.nextSibling);xg=b;I=!0;zg=null;null!==a&&(og[pg++]=rg,og[pg++]=sg,og[pg++]=qg,rg=a.id,sg=a.overflow,qg=b);b=rj(b,d.children);b.flags|=4096;return b}function wj(a,b,c){a.lanes|=b;var d=a.alternate;null!==d&&(d.lanes|=b);Sg(a.return,b,c);}
		function xj(a,b,c,d,e){var f=a.memoizedState;null===f?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e}:(f.isBackwards=b,f.rendering=null,f.renderingStartTime=0,f.last=d,f.tail=c,f.tailMode=e);}
		function yj(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;Yi(a,b,d.children,c);d=M.current;if(0!==(d&2))d=d&1|2,b.flags|=128;else {if(null!==a&&0!==(a.flags&128))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&wj(a,c,b);else if(19===a.tag)wj(a,c,b);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return;}a.sibling.return=a.return;a=a.sibling;}d&=1;}G(M,d);if(0===(b.mode&1))b.memoizedState=
		null;else switch(e){case "forwards":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===Mh(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);xj(b,!1,e,c,f);break;case "backwards":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===Mh(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a;}xj(b,!0,c,null,f);break;case "together":xj(b,!1,null,null,void 0);break;default:b.memoizedState=null;}return b.child}
		function jj(a,b){0===(b.mode&1)&&null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);}function $i(a,b,c){null!==a&&(b.dependencies=a.dependencies);hh|=b.lanes;if(0===(c&b.childLanes))return null;if(null!==a&&b.child!==a.child)throw Error(p(153));if(null!==b.child){a=b.child;c=wh(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=wh(a,a.pendingProps),c.return=b;c.sibling=null;}return b.child}
		function zj(a,b,c){switch(b.tag){case 3:lj(b);Ig();break;case 5:Kh(b);break;case 1:Zf(b.type)&&cg(b);break;case 4:Ih(b,b.stateNode.containerInfo);break;case 10:var d=b.type._context,e=b.memoizedProps.value;G(Mg,d._currentValue);d._currentValue=e;break;case 13:d=b.memoizedState;if(null!==d){if(null!==d.dehydrated)return G(M,M.current&1),b.flags|=128,null;if(0!==(c&b.child.childLanes))return pj(a,b,c);G(M,M.current&1);a=$i(a,b,c);return null!==a?a.sibling:null}G(M,M.current&1);break;case 19:d=0!==(c&
		b.childLanes);if(0!==(a.flags&128)){if(d)return yj(a,b,c);b.flags|=128;}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);G(M,M.current);if(d)break;else return null;case 22:case 23:return b.lanes=0,ej(a,b,c)}return $i(a,b,c)}var Aj,Bj,Cj,Dj;
		Aj=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return;}c.sibling.return=c.return;c=c.sibling;}};Bj=function(){};
		Cj=function(a,b,c,d){var e=a.memoizedProps;if(e!==d){a=b.stateNode;Hh(Eh.current);var f=null;switch(c){case "input":e=Ya(a,e);d=Ya(a,d);f=[];break;case "select":e=A({},e,{value:void 0});d=A({},d,{value:void 0});f=[];break;case "textarea":e=gb(a,e);d=gb(a,d);f=[];break;default:"function"!==typeof e.onClick&&"function"===typeof d.onClick&&(a.onclick=Bf);}ub(c,d);var g;c=null;for(l in e)if(!d.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if("style"===l){var h=e[l];for(g in h)h.hasOwnProperty(g)&&
		(c||(c={}),c[g]="");}else "dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(ea.hasOwnProperty(l)?f||(f=[]):(f=f||[]).push(l,null));for(l in d){var k=d[l];h=null!=e?e[l]:void 0;if(d.hasOwnProperty(l)&&k!==h&&(null!=k||null!=h))if("style"===l)if(h){for(g in h)!h.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(c||(c={}),c[g]="");for(g in k)k.hasOwnProperty(g)&&h[g]!==k[g]&&(c||(c={}),c[g]=k[g]);}else c||(f||(f=[]),f.push(l,
		c)),c=k;else "dangerouslySetInnerHTML"===l?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(l,k)):"children"===l?"string"!==typeof k&&"number"!==typeof k||(f=f||[]).push(l,""+k):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(ea.hasOwnProperty(l)?(null!=k&&"onScroll"===l&&D("scroll",a),f||h===k||(f=[])):(f=f||[]).push(l,k));}c&&(f=f||[]).push("style",c);var l=f;if(b.updateQueue=l)b.flags|=4;}};Dj=function(a,b,c,d){c!==d&&(b.flags|=4);};
		function Ej(a,b){if(!I)switch(a.tailMode){case "hidden":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case "collapsed":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null;}}
		function S(a){var b=null!==a.alternate&&a.alternate.child===a.child,c=0,d=0;if(b)for(var e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags&14680064,d|=e.flags&14680064,e.return=a,e=e.sibling;else for(e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags,d|=e.flags,e.return=a,e=e.sibling;a.subtreeFlags|=d;a.childLanes=c;return b}
		function Fj(a,b,c){var d=b.pendingProps;wg(b);switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return S(b),null;case 1:return Zf(b.type)&&$f(),S(b),null;case 3:d=b.stateNode;Jh();E(Wf);E(H);Oh();d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)Gg(b)?b.flags|=4:null===a||a.memoizedState.isDehydrated&&0===(b.flags&256)||(b.flags|=1024,null!==zg&&(Gj(zg),zg=null));Bj(a,b);S(b);return null;case 5:Lh(b);var e=Hh(Gh.current);
		c=b.type;if(null!==a&&null!=b.stateNode)Cj(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=512,b.flags|=2097152);else {if(!d){if(null===b.stateNode)throw Error(p(166));S(b);return null}a=Hh(Eh.current);if(Gg(b)){d=b.stateNode;c=b.type;var f=b.memoizedProps;d[Of]=b;d[Pf]=f;a=0!==(b.mode&1);switch(c){case "dialog":D("cancel",d);D("close",d);break;case "iframe":case "object":case "embed":D("load",d);break;case "video":case "audio":for(e=0;e<lf.length;e++)D(lf[e],d);break;case "source":D("error",d);break;case "img":case "image":case "link":D("error",
		d);D("load",d);break;case "details":D("toggle",d);break;case "input":Za(d,f);D("invalid",d);break;case "select":d._wrapperState={wasMultiple:!!f.multiple};D("invalid",d);break;case "textarea":hb(d,f),D("invalid",d);}ub(c,f);e=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];"children"===g?"string"===typeof h?d.textContent!==h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,h,a),e=["children",h]):"number"===typeof h&&d.textContent!==""+h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,
		h,a),e=["children",""+h]):ea.hasOwnProperty(g)&&null!=h&&"onScroll"===g&&D("scroll",d);}switch(c){case "input":Va(d);db(d,f,!0);break;case "textarea":Va(d);jb(d);break;case "select":case "option":break;default:"function"===typeof f.onClick&&(d.onclick=Bf);}d=e;b.updateQueue=d;null!==d&&(b.flags|=4);}else {g=9===e.nodeType?e:e.ownerDocument;"http://www.w3.org/1999/xhtml"===a&&(a=kb(c));"http://www.w3.org/1999/xhtml"===a?"script"===c?(a=g.createElement("div"),a.innerHTML="<script>\x3c/script>",a=a.removeChild(a.firstChild)):
		"string"===typeof d.is?a=g.createElement(c,{is:d.is}):(a=g.createElement(c),"select"===c&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,c);a[Of]=b;a[Pf]=d;Aj(a,b,!1,!1);b.stateNode=a;a:{g=vb(c,d);switch(c){case "dialog":D("cancel",a);D("close",a);e=d;break;case "iframe":case "object":case "embed":D("load",a);e=d;break;case "video":case "audio":for(e=0;e<lf.length;e++)D(lf[e],a);e=d;break;case "source":D("error",a);e=d;break;case "img":case "image":case "link":D("error",
		a);D("load",a);e=d;break;case "details":D("toggle",a);e=d;break;case "input":Za(a,d);e=Ya(a,d);D("invalid",a);break;case "option":e=d;break;case "select":a._wrapperState={wasMultiple:!!d.multiple};e=A({},d,{value:void 0});D("invalid",a);break;case "textarea":hb(a,d);e=gb(a,d);D("invalid",a);break;default:e=d;}ub(c,e);h=e;for(f in h)if(h.hasOwnProperty(f)){var k=h[f];"style"===f?sb(a,k):"dangerouslySetInnerHTML"===f?(k=k?k.__html:void 0,null!=k&&nb(a,k)):"children"===f?"string"===typeof k?("textarea"!==
		c||""!==k)&&ob(a,k):"number"===typeof k&&ob(a,""+k):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(ea.hasOwnProperty(f)?null!=k&&"onScroll"===f&&D("scroll",a):null!=k&&ta(a,f,k,g));}switch(c){case "input":Va(a);db(a,d,!1);break;case "textarea":Va(a);jb(a);break;case "option":null!=d.value&&a.setAttribute("value",""+Sa(d.value));break;case "select":a.multiple=!!d.multiple;f=d.value;null!=f?fb(a,!!d.multiple,f,!1):null!=d.defaultValue&&fb(a,!!d.multiple,d.defaultValue,
		!0);break;default:"function"===typeof e.onClick&&(a.onclick=Bf);}switch(c){case "button":case "input":case "select":case "textarea":d=!!d.autoFocus;break a;case "img":d=!0;break a;default:d=!1;}}d&&(b.flags|=4);}null!==b.ref&&(b.flags|=512,b.flags|=2097152);}S(b);return null;case 6:if(a&&null!=b.stateNode)Dj(a,b,a.memoizedProps,d);else {if("string"!==typeof d&&null===b.stateNode)throw Error(p(166));c=Hh(Gh.current);Hh(Eh.current);if(Gg(b)){d=b.stateNode;c=b.memoizedProps;d[Of]=b;if(f=d.nodeValue!==c)if(a=
		xg,null!==a)switch(a.tag){case 3:Af(d.nodeValue,c,0!==(a.mode&1));break;case 5:!0!==a.memoizedProps.suppressHydrationWarning&&Af(d.nodeValue,c,0!==(a.mode&1));}f&&(b.flags|=4);}else d=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),d[Of]=b,b.stateNode=d;}S(b);return null;case 13:E(M);d=b.memoizedState;if(null===a||null!==a.memoizedState&&null!==a.memoizedState.dehydrated){if(I&&null!==yg&&0!==(b.mode&1)&&0===(b.flags&128))Hg(),Ig(),b.flags|=98560,f=!1;else if(f=Gg(b),null!==d&&null!==d.dehydrated){if(null===
		a){if(!f)throw Error(p(318));f=b.memoizedState;f=null!==f?f.dehydrated:null;if(!f)throw Error(p(317));f[Of]=b;}else Ig(),0===(b.flags&128)&&(b.memoizedState=null),b.flags|=4;S(b);f=!1;}else null!==zg&&(Gj(zg),zg=null),f=!0;if(!f)return b.flags&65536?b:null}if(0!==(b.flags&128))return b.lanes=c,b;d=null!==d;d!==(null!==a&&null!==a.memoizedState)&&d&&(b.child.flags|=8192,0!==(b.mode&1)&&(null===a||0!==(M.current&1)?0===T&&(T=3):uj()));null!==b.updateQueue&&(b.flags|=4);S(b);return null;case 4:return Jh(),
		Bj(a,b),null===a&&sf(b.stateNode.containerInfo),S(b),null;case 10:return Rg(b.type._context),S(b),null;case 17:return Zf(b.type)&&$f(),S(b),null;case 19:E(M);f=b.memoizedState;if(null===f)return S(b),null;d=0!==(b.flags&128);g=f.rendering;if(null===g)if(d)Ej(f,!1);else {if(0!==T||null!==a&&0!==(a.flags&128))for(a=b.child;null!==a;){g=Mh(a);if(null!==g){b.flags|=128;Ej(f,!1);d=g.updateQueue;null!==d&&(b.updateQueue=d,b.flags|=4);b.subtreeFlags=0;d=c;for(c=b.child;null!==c;)f=c,a=d,f.flags&=14680066,
		g=f.alternate,null===g?(f.childLanes=0,f.lanes=a,f.child=null,f.subtreeFlags=0,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=g.childLanes,f.lanes=g.lanes,f.child=g.child,f.subtreeFlags=0,f.deletions=null,f.memoizedProps=g.memoizedProps,f.memoizedState=g.memoizedState,f.updateQueue=g.updateQueue,f.type=g.type,a=g.dependencies,f.dependencies=null===a?null:{lanes:a.lanes,firstContext:a.firstContext}),c=c.sibling;G(M,M.current&1|2);return b.child}a=
		a.sibling;}null!==f.tail&&B()>Hj&&(b.flags|=128,d=!0,Ej(f,!1),b.lanes=4194304);}else {if(!d)if(a=Mh(g),null!==a){if(b.flags|=128,d=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.flags|=4),Ej(f,!0),null===f.tail&&"hidden"===f.tailMode&&!g.alternate&&!I)return S(b),null}else 2*B()-f.renderingStartTime>Hj&&1073741824!==c&&(b.flags|=128,d=!0,Ej(f,!1),b.lanes=4194304);f.isBackwards?(g.sibling=b.child,b.child=g):(c=f.last,null!==c?c.sibling=g:b.child=g,f.last=g);}if(null!==f.tail)return b=f.tail,f.rendering=
		b,f.tail=b.sibling,f.renderingStartTime=B(),b.sibling=null,c=M.current,G(M,d?c&1|2:c&1),b;S(b);return null;case 22:case 23:return Ij(),d=null!==b.memoizedState,null!==a&&null!==a.memoizedState!==d&&(b.flags|=8192),d&&0!==(b.mode&1)?0!==(gj&1073741824)&&(S(b),b.subtreeFlags&6&&(b.flags|=8192)):S(b),null;case 24:return null;case 25:return null}throw Error(p(156,b.tag));}
		function Jj(a,b){wg(b);switch(b.tag){case 1:return Zf(b.type)&&$f(),a=b.flags,a&65536?(b.flags=a&-65537|128,b):null;case 3:return Jh(),E(Wf),E(H),Oh(),a=b.flags,0!==(a&65536)&&0===(a&128)?(b.flags=a&-65537|128,b):null;case 5:return Lh(b),null;case 13:E(M);a=b.memoizedState;if(null!==a&&null!==a.dehydrated){if(null===b.alternate)throw Error(p(340));Ig();}a=b.flags;return a&65536?(b.flags=a&-65537|128,b):null;case 19:return E(M),null;case 4:return Jh(),null;case 10:return Rg(b.type._context),null;case 22:case 23:return Ij(),
		null;case 24:return null;default:return null}}var Kj=!1,U=!1,Lj="function"===typeof WeakSet?WeakSet:Set,V=null;function Mj(a,b){var c=a.ref;if(null!==c)if("function"===typeof c)try{c(null);}catch(d){W(a,b,d);}else c.current=null;}function Nj(a,b,c){try{c();}catch(d){W(a,b,d);}}var Oj=!1;
		function Pj(a,b){Cf=dd;a=Me();if(Ne(a)){if("selectionStart"in a)var c={start:a.selectionStart,end:a.selectionEnd};else a:{c=(c=a.ownerDocument)&&c.defaultView||window;var d=c.getSelection&&c.getSelection();if(d&&0!==d.rangeCount){c=d.anchorNode;var e=d.anchorOffset,f=d.focusNode;d=d.focusOffset;try{c.nodeType,f.nodeType;}catch(F){c=null;break a}var g=0,h=-1,k=-1,l=0,m=0,q=a,r=null;b:for(;;){for(var y;;){q!==c||0!==e&&3!==q.nodeType||(h=g+e);q!==f||0!==d&&3!==q.nodeType||(k=g+d);3===q.nodeType&&(g+=
		q.nodeValue.length);if(null===(y=q.firstChild))break;r=q;q=y;}for(;;){if(q===a)break b;r===c&&++l===e&&(h=g);r===f&&++m===d&&(k=g);if(null!==(y=q.nextSibling))break;q=r;r=q.parentNode;}q=y;}c=-1===h||-1===k?null:{start:h,end:k};}else c=null;}c=c||{start:0,end:0};}else c=null;Df={focusedElem:a,selectionRange:c};dd=!1;for(V=b;null!==V;)if(b=V,a=b.child,0!==(b.subtreeFlags&1028)&&null!==a)a.return=b,V=a;else for(;null!==V;){b=V;try{var n=b.alternate;if(0!==(b.flags&1024))switch(b.tag){case 0:case 11:case 15:break;
		case 1:if(null!==n){var t=n.memoizedProps,J=n.memoizedState,x=b.stateNode,w=x.getSnapshotBeforeUpdate(b.elementType===b.type?t:Lg(b.type,t),J);x.__reactInternalSnapshotBeforeUpdate=w;}break;case 3:var u=b.stateNode.containerInfo;1===u.nodeType?u.textContent="":9===u.nodeType&&u.documentElement&&u.removeChild(u.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(p(163));}}catch(F){W(b,b.return,F);}a=b.sibling;if(null!==a){a.return=b.return;V=a;break}V=b.return;}n=Oj;Oj=!1;return n}
		function Qj(a,b,c){var d=b.updateQueue;d=null!==d?d.lastEffect:null;if(null!==d){var e=d=d.next;do{if((e.tag&a)===a){var f=e.destroy;e.destroy=void 0;void 0!==f&&Nj(b,c,f);}e=e.next;}while(e!==d)}}function Rj(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d();}c=c.next;}while(c!==b)}}function Sj(a){var b=a.ref;if(null!==b){var c=a.stateNode;switch(a.tag){case 5:a=c;break;default:a=c;}"function"===typeof b?b(a):b.current=a;}}
		function Tj(a){var b=a.alternate;null!==b&&(a.alternate=null,Tj(b));a.child=null;a.deletions=null;a.sibling=null;5===a.tag&&(b=a.stateNode,null!==b&&(delete b[Of],delete b[Pf],delete b[of],delete b[Qf],delete b[Rf]));a.stateNode=null;a.return=null;a.dependencies=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.stateNode=null;a.updateQueue=null;}function Uj(a){return 5===a.tag||3===a.tag||4===a.tag}
		function Vj(a){a:for(;;){for(;null===a.sibling;){if(null===a.return||Uj(a.return))return null;a=a.return;}a.sibling.return=a.return;for(a=a.sibling;5!==a.tag&&6!==a.tag&&18!==a.tag;){if(a.flags&2)continue a;if(null===a.child||4===a.tag)continue a;else a.child.return=a,a=a.child;}if(!(a.flags&2))return a.stateNode}}
		function Wj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=Bf));else if(4!==d&&(a=a.child,null!==a))for(Wj(a,b,c),a=a.sibling;null!==a;)Wj(a,b,c),a=a.sibling;}
		function Xj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Xj(a,b,c),a=a.sibling;null!==a;)Xj(a,b,c),a=a.sibling;}var X=null,Yj=!1;function Zj(a,b,c){for(c=c.child;null!==c;)ak(a,b,c),c=c.sibling;}
		function ak(a,b,c){if(lc&&"function"===typeof lc.onCommitFiberUnmount)try{lc.onCommitFiberUnmount(kc,c);}catch(h){}switch(c.tag){case 5:U||Mj(c,b);case 6:var d=X,e=Yj;X=null;Zj(a,b,c);X=d;Yj=e;null!==X&&(Yj?(a=X,c=c.stateNode,8===a.nodeType?a.parentNode.removeChild(c):a.removeChild(c)):X.removeChild(c.stateNode));break;case 18:null!==X&&(Yj?(a=X,c=c.stateNode,8===a.nodeType?Kf(a.parentNode,c):1===a.nodeType&&Kf(a,c),bd(a)):Kf(X,c.stateNode));break;case 4:d=X;e=Yj;X=c.stateNode.containerInfo;Yj=!0;
		Zj(a,b,c);X=d;Yj=e;break;case 0:case 11:case 14:case 15:if(!U&&(d=c.updateQueue,null!==d&&(d=d.lastEffect,null!==d))){e=d=d.next;do{var f=e,g=f.destroy;f=f.tag;void 0!==g&&(0!==(f&2)?Nj(c,b,g):0!==(f&4)&&Nj(c,b,g));e=e.next;}while(e!==d)}Zj(a,b,c);break;case 1:if(!U&&(Mj(c,b),d=c.stateNode,"function"===typeof d.componentWillUnmount))try{d.props=c.memoizedProps,d.state=c.memoizedState,d.componentWillUnmount();}catch(h){W(c,b,h);}Zj(a,b,c);break;case 21:Zj(a,b,c);break;case 22:c.mode&1?(U=(d=U)||null!==
		c.memoizedState,Zj(a,b,c),U=d):Zj(a,b,c);break;default:Zj(a,b,c);}}function bk(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Lj);b.forEach(function(b){var d=ck.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d));});}}
		function dk(a,b){var c=b.deletions;if(null!==c)for(var d=0;d<c.length;d++){var e=c[d];try{var f=a,g=b,h=g;a:for(;null!==h;){switch(h.tag){case 5:X=h.stateNode;Yj=!1;break a;case 3:X=h.stateNode.containerInfo;Yj=!0;break a;case 4:X=h.stateNode.containerInfo;Yj=!0;break a}h=h.return;}if(null===X)throw Error(p(160));ak(f,g,e);X=null;Yj=!1;var k=e.alternate;null!==k&&(k.return=null);e.return=null;}catch(l){W(e,b,l);}}if(b.subtreeFlags&12854)for(b=b.child;null!==b;)ek(b,a),b=b.sibling;}
		function ek(a,b){var c=a.alternate,d=a.flags;switch(a.tag){case 0:case 11:case 14:case 15:dk(b,a);fk(a);if(d&4){try{Qj(3,a,a.return),Rj(3,a);}catch(t){W(a,a.return,t);}try{Qj(5,a,a.return);}catch(t){W(a,a.return,t);}}break;case 1:dk(b,a);fk(a);d&512&&null!==c&&Mj(c,c.return);break;case 5:dk(b,a);fk(a);d&512&&null!==c&&Mj(c,c.return);if(a.flags&32){var e=a.stateNode;try{ob(e,"");}catch(t){W(a,a.return,t);}}if(d&4&&(e=a.stateNode,null!=e)){var f=a.memoizedProps,g=null!==c?c.memoizedProps:f,h=a.type,k=a.updateQueue;
		a.updateQueue=null;if(null!==k)try{"input"===h&&"radio"===f.type&&null!=f.name&&ab(e,f);vb(h,g);var l=vb(h,f);for(g=0;g<k.length;g+=2){var m=k[g],q=k[g+1];"style"===m?sb(e,q):"dangerouslySetInnerHTML"===m?nb(e,q):"children"===m?ob(e,q):ta(e,m,q,l);}switch(h){case "input":bb(e,f);break;case "textarea":ib(e,f);break;case "select":var r=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=!!f.multiple;var y=f.value;null!=y?fb(e,!!f.multiple,y,!1):r!==!!f.multiple&&(null!=f.defaultValue?fb(e,!!f.multiple,
		f.defaultValue,!0):fb(e,!!f.multiple,f.multiple?[]:"",!1));}e[Pf]=f;}catch(t){W(a,a.return,t);}}break;case 6:dk(b,a);fk(a);if(d&4){if(null===a.stateNode)throw Error(p(162));e=a.stateNode;f=a.memoizedProps;try{e.nodeValue=f;}catch(t){W(a,a.return,t);}}break;case 3:dk(b,a);fk(a);if(d&4&&null!==c&&c.memoizedState.isDehydrated)try{bd(b.containerInfo);}catch(t){W(a,a.return,t);}break;case 4:dk(b,a);fk(a);break;case 13:dk(b,a);fk(a);e=a.child;e.flags&8192&&(f=null!==e.memoizedState,e.stateNode.isHidden=f,!f||
		null!==e.alternate&&null!==e.alternate.memoizedState||(gk=B()));d&4&&bk(a);break;case 22:m=null!==c&&null!==c.memoizedState;a.mode&1?(U=(l=U)||m,dk(b,a),U=l):dk(b,a);fk(a);if(d&8192){l=null!==a.memoizedState;if((a.stateNode.isHidden=l)&&!m&&0!==(a.mode&1))for(V=a,m=a.child;null!==m;){for(q=V=m;null!==V;){r=V;y=r.child;switch(r.tag){case 0:case 11:case 14:case 15:Qj(4,r,r.return);break;case 1:Mj(r,r.return);var n=r.stateNode;if("function"===typeof n.componentWillUnmount){d=r;c=r.return;try{b=d,n.props=
		b.memoizedProps,n.state=b.memoizedState,n.componentWillUnmount();}catch(t){W(d,c,t);}}break;case 5:Mj(r,r.return);break;case 22:if(null!==r.memoizedState){hk(q);continue}}null!==y?(y.return=r,V=y):hk(q);}m=m.sibling;}a:for(m=null,q=a;;){if(5===q.tag){if(null===m){m=q;try{e=q.stateNode,l?(f=e.style,"function"===typeof f.setProperty?f.setProperty("display","none","important"):f.display="none"):(h=q.stateNode,k=q.memoizedProps.style,g=void 0!==k&&null!==k&&k.hasOwnProperty("display")?k.display:null,h.style.display=
		rb("display",g));}catch(t){W(a,a.return,t);}}}else if(6===q.tag){if(null===m)try{q.stateNode.nodeValue=l?"":q.memoizedProps;}catch(t){W(a,a.return,t);}}else if((22!==q.tag&&23!==q.tag||null===q.memoizedState||q===a)&&null!==q.child){q.child.return=q;q=q.child;continue}if(q===a)break a;for(;null===q.sibling;){if(null===q.return||q.return===a)break a;m===q&&(m=null);q=q.return;}m===q&&(m=null);q.sibling.return=q.return;q=q.sibling;}}break;case 19:dk(b,a);fk(a);d&4&&bk(a);break;case 21:break;default:dk(b,
		a),fk(a);}}function fk(a){var b=a.flags;if(b&2){try{a:{for(var c=a.return;null!==c;){if(Uj(c)){var d=c;break a}c=c.return;}throw Error(p(160));}switch(d.tag){case 5:var e=d.stateNode;d.flags&32&&(ob(e,""),d.flags&=-33);var f=Vj(a);Xj(a,f,e);break;case 3:case 4:var g=d.stateNode.containerInfo,h=Vj(a);Wj(a,h,g);break;default:throw Error(p(161));}}catch(k){W(a,a.return,k);}a.flags&=-3;}b&4096&&(a.flags&=-4097);}function ik(a,b,c){V=a;jk(a);}
		function jk(a,b,c){for(var d=0!==(a.mode&1);null!==V;){var e=V,f=e.child;if(22===e.tag&&d){var g=null!==e.memoizedState||Kj;if(!g){var h=e.alternate,k=null!==h&&null!==h.memoizedState||U;h=Kj;var l=U;Kj=g;if((U=k)&&!l)for(V=e;null!==V;)g=V,k=g.child,22===g.tag&&null!==g.memoizedState?kk(e):null!==k?(k.return=g,V=k):kk(e);for(;null!==f;)V=f,jk(f),f=f.sibling;V=e;Kj=h;U=l;}lk(a);}else 0!==(e.subtreeFlags&8772)&&null!==f?(f.return=e,V=f):lk(a);}}
		function lk(a){for(;null!==V;){var b=V;if(0!==(b.flags&8772)){var c=b.alternate;try{if(0!==(b.flags&8772))switch(b.tag){case 0:case 11:case 15:U||Rj(5,b);break;case 1:var d=b.stateNode;if(b.flags&4&&!U)if(null===c)d.componentDidMount();else {var e=b.elementType===b.type?c.memoizedProps:Lg(b.type,c.memoizedProps);d.componentDidUpdate(e,c.memoizedState,d.__reactInternalSnapshotBeforeUpdate);}var f=b.updateQueue;null!==f&&ih(b,f,d);break;case 3:var g=b.updateQueue;if(null!==g){c=null;if(null!==b.child)switch(b.child.tag){case 5:c=
		b.child.stateNode;break;case 1:c=b.child.stateNode;}ih(b,g,c);}break;case 5:var h=b.stateNode;if(null===c&&b.flags&4){c=h;var k=b.memoizedProps;switch(b.type){case "button":case "input":case "select":case "textarea":k.autoFocus&&c.focus();break;case "img":k.src&&(c.src=k.src);}}break;case 6:break;case 4:break;case 12:break;case 13:if(null===b.memoizedState){var l=b.alternate;if(null!==l){var m=l.memoizedState;if(null!==m){var q=m.dehydrated;null!==q&&bd(q);}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;
		default:throw Error(p(163));}U||b.flags&512&&Sj(b);}catch(r){W(b,b.return,r);}}if(b===a){V=null;break}c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return;}}function hk(a){for(;null!==V;){var b=V;if(b===a){V=null;break}var c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return;}}
		function kk(a){for(;null!==V;){var b=V;try{switch(b.tag){case 0:case 11:case 15:var c=b.return;try{Rj(4,b);}catch(k){W(b,c,k);}break;case 1:var d=b.stateNode;if("function"===typeof d.componentDidMount){var e=b.return;try{d.componentDidMount();}catch(k){W(b,e,k);}}var f=b.return;try{Sj(b);}catch(k){W(b,f,k);}break;case 5:var g=b.return;try{Sj(b);}catch(k){W(b,g,k);}}}catch(k){W(b,b.return,k);}if(b===a){V=null;break}var h=b.sibling;if(null!==h){h.return=b.return;V=h;break}V=b.return;}}
		var mk=Math.ceil,nk=ua.ReactCurrentDispatcher,ok=ua.ReactCurrentOwner,pk=ua.ReactCurrentBatchConfig,K=0,R=null,Y=null,Z=0,gj=0,fj=Uf(0),T=0,qk=null,hh=0,rk=0,sk=0,tk=null,uk=null,gk=0,Hj=Infinity,vk=null,Pi=!1,Qi=null,Si=null,wk=!1,xk=null,yk=0,zk=0,Ak=null,Bk=-1,Ck=0;function L(){return 0!==(K&6)?B():-1!==Bk?Bk:Bk=B()}
		function lh(a){if(0===(a.mode&1))return 1;if(0!==(K&2)&&0!==Z)return Z&-Z;if(null!==Kg.transition)return 0===Ck&&(Ck=yc()),Ck;a=C;if(0!==a)return a;a=window.event;a=void 0===a?16:jd(a.type);return a}function mh(a,b,c,d){if(50<zk)throw zk=0,Ak=null,Error(p(185));Ac(a,c,d);if(0===(K&2)||a!==R)a===R&&(0===(K&2)&&(rk|=c),4===T&&Dk(a,Z)),Ek(a,d),1===c&&0===K&&0===(b.mode&1)&&(Hj=B()+500,fg&&jg());}
		function Ek(a,b){var c=a.callbackNode;wc(a,b);var d=uc(a,a===R?Z:0);if(0===d)null!==c&&bc(c),a.callbackNode=null,a.callbackPriority=0;else if(b=d&-d,a.callbackPriority!==b){null!=c&&bc(c);if(1===b)0===a.tag?ig(Fk.bind(null,a)):hg(Fk.bind(null,a)),Jf(function(){0===(K&6)&&jg();}),c=null;else {switch(Dc(d)){case 1:c=fc;break;case 4:c=gc;break;case 16:c=hc;break;case 536870912:c=jc;break;default:c=hc;}c=Gk(c,Hk.bind(null,a));}a.callbackPriority=b;a.callbackNode=c;}}
		function Hk(a,b){Bk=-1;Ck=0;if(0!==(K&6))throw Error(p(327));var c=a.callbackNode;if(Ik()&&a.callbackNode!==c)return null;var d=uc(a,a===R?Z:0);if(0===d)return null;if(0!==(d&30)||0!==(d&a.expiredLanes)||b)b=Jk(a,d);else {b=d;var e=K;K|=2;var f=Kk();if(R!==a||Z!==b)vk=null,Hj=B()+500,Lk(a,b);do try{Mk();break}catch(h){Nk(a,h);}while(1);Qg();nk.current=f;K=e;null!==Y?b=0:(R=null,Z=0,b=T);}if(0!==b){2===b&&(e=xc(a),0!==e&&(d=e,b=Ok(a,e)));if(1===b)throw c=qk,Lk(a,0),Dk(a,d),Ek(a,B()),c;if(6===b)Dk(a,d);
		else {e=a.current.alternate;if(0===(d&30)&&!Pk(e)&&(b=Jk(a,d),2===b&&(f=xc(a),0!==f&&(d=f,b=Ok(a,f))),1===b))throw c=qk,Lk(a,0),Dk(a,d),Ek(a,B()),c;a.finishedWork=e;a.finishedLanes=d;switch(b){case 0:case 1:throw Error(p(345));case 2:Qk(a,uk,vk);break;case 3:Dk(a,d);if((d&130023424)===d&&(b=gk+500-B(),10<b)){if(0!==uc(a,0))break;e=a.suspendedLanes;if((e&d)!==d){L();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=Ff(Qk.bind(null,a,uk,vk),b);break}Qk(a,uk,vk);break;case 4:Dk(a,d);if((d&4194240)===
		d)break;b=a.eventTimes;for(e=-1;0<d;){var g=31-oc(d);f=1<<g;g=b[g];g>e&&(e=g);d&=~f;}d=e;d=B()-d;d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*mk(d/1960))-d;if(10<d){a.timeoutHandle=Ff(Qk.bind(null,a,uk,vk),d);break}Qk(a,uk,vk);break;case 5:Qk(a,uk,vk);break;default:throw Error(p(329));}}}Ek(a,B());return a.callbackNode===c?Hk.bind(null,a):null}
		function Ok(a,b){var c=tk;a.current.memoizedState.isDehydrated&&(Lk(a,b).flags|=256);a=Jk(a,b);2!==a&&(b=uk,uk=c,null!==b&&Gj(b));return a}function Gj(a){null===uk?uk=a:uk.push.apply(uk,a);}
		function Pk(a){for(var b=a;;){if(b.flags&16384){var c=b.updateQueue;if(null!==c&&(c=c.stores,null!==c))for(var d=0;d<c.length;d++){var e=c[d],f=e.getSnapshot;e=e.value;try{if(!He(f(),e))return !1}catch(g){return !1}}}c=b.child;if(b.subtreeFlags&16384&&null!==c)c.return=b,b=c;else {if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return !0;b=b.return;}b.sibling.return=b.return;b=b.sibling;}}return !0}
		function Dk(a,b){b&=~sk;b&=~rk;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-oc(b),d=1<<c;a[c]=-1;b&=~d;}}function Fk(a){if(0!==(K&6))throw Error(p(327));Ik();var b=uc(a,0);if(0===(b&1))return Ek(a,B()),null;var c=Jk(a,b);if(0!==a.tag&&2===c){var d=xc(a);0!==d&&(b=d,c=Ok(a,d));}if(1===c)throw c=qk,Lk(a,0),Dk(a,b),Ek(a,B()),c;if(6===c)throw Error(p(345));a.finishedWork=a.current.alternate;a.finishedLanes=b;Qk(a,uk,vk);Ek(a,B());return null}
		function Rk(a,b){var c=K;K|=1;try{return a(b)}finally{K=c,0===K&&(Hj=B()+500,fg&&jg());}}function Sk(a){null!==xk&&0===xk.tag&&0===(K&6)&&Ik();var b=K;K|=1;var c=pk.transition,d=C;try{if(pk.transition=null,C=1,a)return a()}finally{C=d,pk.transition=c,K=b,0===(K&6)&&jg();}}function Ij(){gj=fj.current;E(fj);}
		function Lk(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Gf(c));if(null!==Y)for(c=Y.return;null!==c;){var d=c;wg(d);switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&$f();break;case 3:Jh();E(Wf);E(H);Oh();break;case 5:Lh(d);break;case 4:Jh();break;case 13:E(M);break;case 19:E(M);break;case 10:Rg(d.type._context);break;case 22:case 23:Ij();}c=c.return;}R=a;Y=a=wh(a.current,null);Z=gj=b;T=0;qk=null;sk=rk=hh=0;uk=tk=null;if(null!==Wg){for(b=
		0;b<Wg.length;b++)if(c=Wg[b],d=c.interleaved,null!==d){c.interleaved=null;var e=d.next,f=c.pending;if(null!==f){var g=f.next;f.next=e;d.next=g;}c.pending=d;}Wg=null;}return a}
		function Nk(a,b){do{var c=Y;try{Qg();Ph.current=ai;if(Sh){for(var d=N.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next;}Sh=!1;}Rh=0;P=O=N=null;Th=!1;Uh=0;ok.current=null;if(null===c||null===c.return){T=1;qk=b;Y=null;break}a:{var f=a,g=c.return,h=c,k=b;b=Z;h.flags|=32768;if(null!==k&&"object"===typeof k&&"function"===typeof k.then){var l=k,m=h,q=m.tag;if(0===(m.mode&1)&&(0===q||11===q||15===q)){var r=m.alternate;r?(m.updateQueue=r.updateQueue,m.memoizedState=r.memoizedState,
		m.lanes=r.lanes):(m.updateQueue=null,m.memoizedState=null);}var y=Vi(g);if(null!==y){y.flags&=-257;Wi(y,g,h,f,b);y.mode&1&&Ti(f,l,b);b=y;k=l;var n=b.updateQueue;if(null===n){var t=new Set;t.add(k);b.updateQueue=t;}else n.add(k);break a}else {if(0===(b&1)){Ti(f,l,b);uj();break a}k=Error(p(426));}}else if(I&&h.mode&1){var J=Vi(g);if(null!==J){0===(J.flags&65536)&&(J.flags|=256);Wi(J,g,h,f,b);Jg(Ki(k,h));break a}}f=k=Ki(k,h);4!==T&&(T=2);null===tk?tk=[f]:tk.push(f);f=g;do{switch(f.tag){case 3:f.flags|=65536;
		b&=-b;f.lanes|=b;var x=Oi(f,k,b);fh(f,x);break a;case 1:h=k;var w=f.type,u=f.stateNode;if(0===(f.flags&128)&&("function"===typeof w.getDerivedStateFromError||null!==u&&"function"===typeof u.componentDidCatch&&(null===Si||!Si.has(u)))){f.flags|=65536;b&=-b;f.lanes|=b;var F=Ri(f,h,b);fh(f,F);break a}}f=f.return;}while(null!==f)}Tk(c);}catch(na){b=na;Y===c&&null!==c&&(Y=c=c.return);continue}break}while(1)}function Kk(){var a=nk.current;nk.current=ai;return null===a?ai:a}
		function uj(){if(0===T||3===T||2===T)T=4;null===R||0===(hh&268435455)&&0===(rk&268435455)||Dk(R,Z);}function Jk(a,b){var c=K;K|=2;var d=Kk();if(R!==a||Z!==b)vk=null,Lk(a,b);do try{Uk();break}catch(e){Nk(a,e);}while(1);Qg();K=c;nk.current=d;if(null!==Y)throw Error(p(261));R=null;Z=0;return T}function Uk(){for(;null!==Y;)Vk(Y);}function Mk(){for(;null!==Y&&!cc();)Vk(Y);}function Vk(a){var b=Wk(a.alternate,a,gj);a.memoizedProps=a.pendingProps;null===b?Tk(a):Y=b;ok.current=null;}
		function Tk(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&32768)){if(c=Fj(c,b,gj),null!==c){Y=c;return}}else {c=Jj(c,b);if(null!==c){c.flags&=32767;Y=c;return}if(null!==a)a.flags|=32768,a.subtreeFlags=0,a.deletions=null;else {T=6;Y=null;return}}b=b.sibling;if(null!==b){Y=b;return}Y=b=a;}while(null!==b);0===T&&(T=5);}function Qk(a,b,c){var d=C,e=pk.transition;try{pk.transition=null,C=1,Xk(a,b,c,d);}finally{pk.transition=e,C=d;}return null}
		function Xk(a,b,c,d){do Ik();while(null!==xk);if(0!==(K&6))throw Error(p(327));c=a.finishedWork;var e=a.finishedLanes;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(p(177));a.callbackNode=null;a.callbackPriority=0;var f=c.lanes|c.childLanes;Bc(a,f);a===R&&(Y=R=null,Z=0);0===(c.subtreeFlags&2064)&&0===(c.flags&2064)||wk||(wk=!0,Gk(hc,function(){Ik();return null}));f=0!==(c.flags&15990);if(0!==(c.subtreeFlags&15990)||f){f=pk.transition;pk.transition=null;
		var g=C;C=1;var h=K;K|=4;ok.current=null;Pj(a,c);ek(c,a);Oe(Df);dd=!!Cf;Df=Cf=null;a.current=c;ik(c);dc();K=h;C=g;pk.transition=f;}else a.current=c;wk&&(wk=!1,xk=a,yk=e);f=a.pendingLanes;0===f&&(Si=null);mc(c.stateNode);Ek(a,B());if(null!==b)for(d=a.onRecoverableError,c=0;c<b.length;c++)e=b[c],d(e.value,{componentStack:e.stack,digest:e.digest});if(Pi)throw Pi=!1,a=Qi,Qi=null,a;0!==(yk&1)&&0!==a.tag&&Ik();f=a.pendingLanes;0!==(f&1)?a===Ak?zk++:(zk=0,Ak=a):zk=0;jg();return null}
		function Ik(){if(null!==xk){var a=Dc(yk),b=pk.transition,c=C;try{pk.transition=null;C=16>a?16:a;if(null===xk)var d=!1;else {a=xk;xk=null;yk=0;if(0!==(K&6))throw Error(p(331));var e=K;K|=4;for(V=a.current;null!==V;){var f=V,g=f.child;if(0!==(V.flags&16)){var h=f.deletions;if(null!==h){for(var k=0;k<h.length;k++){var l=h[k];for(V=l;null!==V;){var m=V;switch(m.tag){case 0:case 11:case 15:Qj(8,m,f);}var q=m.child;if(null!==q)q.return=m,V=q;else for(;null!==V;){m=V;var r=m.sibling,y=m.return;Tj(m);if(m===
		l){V=null;break}if(null!==r){r.return=y;V=r;break}V=y;}}}var n=f.alternate;if(null!==n){var t=n.child;if(null!==t){n.child=null;do{var J=t.sibling;t.sibling=null;t=J;}while(null!==t)}}V=f;}}if(0!==(f.subtreeFlags&2064)&&null!==g)g.return=f,V=g;else b:for(;null!==V;){f=V;if(0!==(f.flags&2048))switch(f.tag){case 0:case 11:case 15:Qj(9,f,f.return);}var x=f.sibling;if(null!==x){x.return=f.return;V=x;break b}V=f.return;}}var w=a.current;for(V=w;null!==V;){g=V;var u=g.child;if(0!==(g.subtreeFlags&2064)&&null!==
		u)u.return=g,V=u;else b:for(g=w;null!==V;){h=V;if(0!==(h.flags&2048))try{switch(h.tag){case 0:case 11:case 15:Rj(9,h);}}catch(na){W(h,h.return,na);}if(h===g){V=null;break b}var F=h.sibling;if(null!==F){F.return=h.return;V=F;break b}V=h.return;}}K=e;jg();if(lc&&"function"===typeof lc.onPostCommitFiberRoot)try{lc.onPostCommitFiberRoot(kc,a);}catch(na){}d=!0;}return d}finally{C=c,pk.transition=b;}}return !1}function Yk(a,b,c){b=Ki(c,b);b=Oi(a,b,1);a=dh(a,b,1);b=L();null!==a&&(Ac(a,1,b),Ek(a,b));}
		function W(a,b,c){if(3===a.tag)Yk(a,a,c);else for(;null!==b;){if(3===b.tag){Yk(b,a,c);break}else if(1===b.tag){var d=b.stateNode;if("function"===typeof b.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===Si||!Si.has(d))){a=Ki(c,a);a=Ri(b,a,1);b=dh(b,a,1);a=L();null!==b&&(Ac(b,1,a),Ek(b,a));break}}b=b.return;}}
		function Ui(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=L();a.pingedLanes|=a.suspendedLanes&c;R===a&&(Z&c)===c&&(4===T||3===T&&(Z&130023424)===Z&&500>B()-gk?Lk(a,0):sk|=c);Ek(a,b);}function Zk(a,b){0===b&&(0===(a.mode&1)?b=1:(b=sc,sc<<=1,0===(sc&130023424)&&(sc=4194304)));var c=L();a=Zg(a,b);null!==a&&(Ac(a,b,c),Ek(a,c));}function vj(a){var b=a.memoizedState,c=0;null!==b&&(c=b.retryLane);Zk(a,c);}
		function ck(a,b){var c=0;switch(a.tag){case 13:var d=a.stateNode;var e=a.memoizedState;null!==e&&(c=e.retryLane);break;case 19:d=a.stateNode;break;default:throw Error(p(314));}null!==d&&d.delete(b);Zk(a,c);}var Wk;
		Wk=function(a,b,c){if(null!==a)if(a.memoizedProps!==b.pendingProps||Wf.current)Ug=!0;else {if(0===(a.lanes&c)&&0===(b.flags&128))return Ug=!1,zj(a,b,c);Ug=0!==(a.flags&131072)?!0:!1;}else Ug=!1,I&&0!==(b.flags&1048576)&&ug(b,ng,b.index);b.lanes=0;switch(b.tag){case 2:var d=b.type;jj(a,b);a=b.pendingProps;var e=Yf(b,H.current);Tg(b,c);e=Xh(null,b,d,a,e,c);var f=bi();b.flags|=1;"object"===typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof?(b.tag=1,b.memoizedState=null,b.updateQueue=
		null,Zf(d)?(f=!0,cg(b)):f=!1,b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,ah(b),e.updater=nh,b.stateNode=e,e._reactInternals=b,rh(b,d,a,c),b=kj(null,b,d,!0,f,c)):(b.tag=0,I&&f&&vg(b),Yi(null,b,e,c),b=b.child);return b;case 16:d=b.elementType;a:{jj(a,b);a=b.pendingProps;e=d._init;d=e(d._payload);b.type=d;e=b.tag=$k(d);a=Lg(d,a);switch(e){case 0:b=dj(null,b,d,a,c);break a;case 1:b=ij(null,b,d,a,c);break a;case 11:b=Zi(null,b,d,a,c);break a;case 14:b=aj(null,b,d,Lg(d.type,a),c);break a}throw Error(p(306,
		d,""));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),dj(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),ij(a,b,d,e,c);case 3:a:{lj(b);if(null===a)throw Error(p(387));d=b.pendingProps;f=b.memoizedState;e=f.element;bh(a,b);gh(b,d,null,c);var g=b.memoizedState;d=g.element;if(f.isDehydrated)if(f={element:d,isDehydrated:!1,cache:g.cache,pendingSuspenseBoundaries:g.pendingSuspenseBoundaries,transitions:g.transitions},b.updateQueue.baseState=
		f,b.memoizedState=f,b.flags&256){e=Ki(Error(p(423)),b);b=mj(a,b,d,c,e);break a}else if(d!==e){e=Ki(Error(p(424)),b);b=mj(a,b,d,c,e);break a}else for(yg=Lf(b.stateNode.containerInfo.firstChild),xg=b,I=!0,zg=null,c=Ch(b,null,d,c),b.child=c;c;)c.flags=c.flags&-3|4096,c=c.sibling;else {Ig();if(d===e){b=$i(a,b,c);break a}Yi(a,b,d,c);}b=b.child;}return b;case 5:return Kh(b),null===a&&Eg(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,Ef(d,e)?g=null:null!==f&&Ef(d,f)&&(b.flags|=32),
		hj(a,b),Yi(a,b,g,c),b.child;case 6:return null===a&&Eg(b),null;case 13:return pj(a,b,c);case 4:return Ih(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Bh(b,null,d,c):Yi(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),Zi(a,b,d,e,c);case 7:return Yi(a,b,b.pendingProps,c),b.child;case 8:return Yi(a,b,b.pendingProps.children,c),b.child;case 12:return Yi(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;f=b.memoizedProps;
		g=e.value;G(Mg,d._currentValue);d._currentValue=g;if(null!==f)if(He(f.value,g)){if(f.children===e.children&&!Wf.current){b=$i(a,b,c);break a}}else for(f=b.child,null!==f&&(f.return=b);null!==f;){var h=f.dependencies;if(null!==h){g=f.child;for(var k=h.firstContext;null!==k;){if(k.context===d){if(1===f.tag){k=ch(-1,c&-c);k.tag=2;var l=f.updateQueue;if(null!==l){l=l.shared;var m=l.pending;null===m?k.next=k:(k.next=m.next,m.next=k);l.pending=k;}}f.lanes|=c;k=f.alternate;null!==k&&(k.lanes|=c);Sg(f.return,
		c,b);h.lanes|=c;break}k=k.next;}}else if(10===f.tag)g=f.type===b.type?null:f.child;else if(18===f.tag){g=f.return;if(null===g)throw Error(p(341));g.lanes|=c;h=g.alternate;null!==h&&(h.lanes|=c);Sg(g,c,b);g=f.sibling;}else g=f.child;if(null!==g)g.return=f;else for(g=f;null!==g;){if(g===b){g=null;break}f=g.sibling;if(null!==f){f.return=g.return;g=f;break}g=g.return;}f=g;}Yi(a,b,e.children,c);b=b.child;}return b;case 9:return e=b.type,d=b.pendingProps.children,Tg(b,c),e=Vg(e),d=d(e),b.flags|=1,Yi(a,b,d,c),
		b.child;case 14:return d=b.type,e=Lg(d,b.pendingProps),e=Lg(d.type,e),aj(a,b,d,e,c);case 15:return cj(a,b,b.type,b.pendingProps,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),jj(a,b),b.tag=1,Zf(d)?(a=!0,cg(b)):a=!1,Tg(b,c),ph(b,d,e),rh(b,d,e,c),kj(null,b,d,!0,a,c);case 19:return yj(a,b,c);case 22:return ej(a,b,c)}throw Error(p(156,b.tag));};function Gk(a,b){return ac(a,b)}
		function al(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.subtreeFlags=this.flags=0;this.deletions=null;this.childLanes=this.lanes=0;this.alternate=null;}function Bg(a,b,c,d){return new al(a,b,c,d)}function bj(a){a=a.prototype;return !(!a||!a.isReactComponent)}
		function $k(a){if("function"===typeof a)return bj(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Da)return 11;if(a===Ga)return 14}return 2}
		function wh(a,b){var c=a.alternate;null===c?(c=Bg(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.subtreeFlags=0,c.deletions=null);c.flags=a.flags&14680064;c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};
		c.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}
		function yh(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)bj(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ya:return Ah(c.children,e,f,b);case za:g=8;e|=8;break;case Aa:return a=Bg(12,c,b,e|2),a.elementType=Aa,a.lanes=f,a;case Ea:return a=Bg(13,c,b,e),a.elementType=Ea,a.lanes=f,a;case Fa:return a=Bg(19,c,b,e),a.elementType=Fa,a.lanes=f,a;case Ia:return qj(c,e,f,b);default:if("object"===typeof a&&null!==a)switch(a.$$typeof){case Ba:g=10;break a;case Ca:g=9;break a;case Da:g=11;
		break a;case Ga:g=14;break a;case Ha:g=16;d=null;break a}throw Error(p(130,null==a?a:typeof a,""));}b=Bg(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Ah(a,b,c,d){a=Bg(7,a,d,b);a.lanes=c;return a}function qj(a,b,c,d){a=Bg(22,a,d,b);a.elementType=Ia;a.lanes=c;a.stateNode={isHidden:!1};return a}function xh(a,b,c){a=Bg(6,a,null,b);a.lanes=c;return a}
		function zh(a,b,c){b=Bg(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}
		function bl(a,b,c,d,e){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=-1;this.callbackNode=this.pendingContext=this.context=null;this.callbackPriority=0;this.eventTimes=zc(0);this.expirationTimes=zc(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=zc(0);this.identifierPrefix=d;this.onRecoverableError=e;this.mutableSourceEagerHydrationData=
		null;}function cl(a,b,c,d,e,f,g,h,k){a=new bl(a,b,c,h,k);1===b?(b=1,!0===f&&(b|=8)):b=0;f=Bg(3,null,null,b);a.current=f;f.stateNode=a;f.memoizedState={element:d,isDehydrated:c,cache:null,transitions:null,pendingSuspenseBoundaries:null};ah(f);return a}function dl(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return {$$typeof:wa,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}
		function el(a){if(!a)return Vf;a=a._reactInternals;a:{if(Vb(a)!==a||1!==a.tag)throw Error(p(170));var b=a;do{switch(b.tag){case 3:b=b.stateNode.context;break a;case 1:if(Zf(b.type)){b=b.stateNode.__reactInternalMemoizedMergedChildContext;break a}}b=b.return;}while(null!==b);throw Error(p(171));}if(1===a.tag){var c=a.type;if(Zf(c))return bg(a,c,b)}return b}
		function fl(a,b,c,d,e,f,g,h,k){a=cl(c,d,!0,a,e,f,g,h,k);a.context=el(null);c=a.current;d=L();e=lh(c);f=ch(d,e);f.callback=void 0!==b&&null!==b?b:null;dh(c,f,e);a.current.lanes=e;Ac(a,e,d);Ek(a,d);return a}function gl(a,b,c,d){var e=b.current,f=L(),g=lh(e);c=el(c);null===b.context?b.context=c:b.pendingContext=c;b=ch(f,g);b.payload={element:a};d=void 0===d?null:d;null!==d&&(b.callback=d);a=dh(e,b,g);null!==a&&(mh(a,e,g,f),eh(a,e,g));return g}
		function hl(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function il(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b;}}function jl(a,b){il(a,b);(a=a.alternate)&&il(a,b);}function kl(){return null}var ll="function"===typeof reportError?reportError:function(a){console.error(a);};function ml(a){this._internalRoot=a;}
		nl.prototype.render=ml.prototype.render=function(a){var b=this._internalRoot;if(null===b)throw Error(p(409));gl(a,b,null,null);};nl.prototype.unmount=ml.prototype.unmount=function(){var a=this._internalRoot;if(null!==a){this._internalRoot=null;var b=a.containerInfo;Sk(function(){gl(null,a,null,null);});b[uf]=null;}};function nl(a){this._internalRoot=a;}
		nl.prototype.unstable_scheduleHydration=function(a){if(a){var b=Hc();a={blockedOn:null,target:a,priority:b};for(var c=0;c<Qc.length&&0!==b&&b<Qc[c].priority;c++);Qc.splice(c,0,a);0===c&&Vc(a);}};function ol(a){return !(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType)}function pl(a){return !(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}function ql(){}
		function rl(a,b,c,d,e){if(e){if("function"===typeof d){var f=d;d=function(){var a=hl(g);f.call(a);};}var g=fl(b,d,a,0,null,!1,!1,"",ql);a._reactRootContainer=g;a[uf]=g.current;sf(8===a.nodeType?a.parentNode:a);Sk();return g}for(;e=a.lastChild;)a.removeChild(e);if("function"===typeof d){var h=d;d=function(){var a=hl(k);h.call(a);};}var k=cl(a,0,!1,null,null,!1,!1,"",ql);a._reactRootContainer=k;a[uf]=k.current;sf(8===a.nodeType?a.parentNode:a);Sk(function(){gl(b,k,c,d);});return k}
		function sl(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f;if("function"===typeof e){var h=e;e=function(){var a=hl(g);h.call(a);};}gl(b,g,a,e);}else g=rl(c,b,a,e,d);return hl(g)}Ec=function(a){switch(a.tag){case 3:var b=a.stateNode;if(b.current.memoizedState.isDehydrated){var c=tc(b.pendingLanes);0!==c&&(Cc(b,c|1),Ek(b,B()),0===(K&6)&&(Hj=B()+500,jg()));}break;case 13:Sk(function(){var b=Zg(a,1);if(null!==b){var c=L();mh(b,a,1,c);}}),jl(a,1);}};
		Fc=function(a){if(13===a.tag){var b=Zg(a,134217728);if(null!==b){var c=L();mh(b,a,134217728,c);}jl(a,134217728);}};Gc=function(a){if(13===a.tag){var b=lh(a),c=Zg(a,b);if(null!==c){var d=L();mh(c,a,b,d);}jl(a,b);}};Hc=function(){return C};Ic=function(a,b){var c=C;try{return C=a,b()}finally{C=c;}};
		yb=function(a,b,c){switch(b){case "input":bb(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Db(d);if(!e)throw Error(p(90));Wa(d);bb(d,e);}}}break;case "textarea":ib(a,c);break;case "select":b=c.value,null!=b&&fb(a,!!c.multiple,b,!1);}};Gb=Rk;Hb=Sk;
		var tl={usingClientEntryPoint:!1,Events:[Cb,ue,Db,Eb,Fb,Rk]},ul={findFiberByHostInstance:Wc,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"};
		var vl={bundleType:ul.bundleType,version:ul.version,rendererPackageName:ul.rendererPackageName,rendererConfig:ul.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ua.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=Zb(a);return null===a?null:a.stateNode},findFiberByHostInstance:ul.findFiberByHostInstance||
		kl,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var wl=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!wl.isDisabled&&wl.supportsFiber)try{kc=wl.inject(vl),lc=wl;}catch(a){}}reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tl;
		reactDom_production_min.createPortal=function(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!ol(b))throw Error(p(200));return dl(a,b,null,c)};reactDom_production_min.createRoot=function(a,b){if(!ol(a))throw Error(p(299));var c=!1,d="",e=ll;null!==b&&void 0!==b&&(!0===b.unstable_strictMode&&(c=!0),void 0!==b.identifierPrefix&&(d=b.identifierPrefix),void 0!==b.onRecoverableError&&(e=b.onRecoverableError));b=cl(a,1,!1,null,null,c,!1,d,e);a[uf]=b.current;sf(8===a.nodeType?a.parentNode:a);return new ml(b)};
		reactDom_production_min.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternals;if(void 0===b){if("function"===typeof a.render)throw Error(p(188));a=Object.keys(a).join(",");throw Error(p(268,a));}a=Zb(b);a=null===a?null:a.stateNode;return a};reactDom_production_min.flushSync=function(a){return Sk(a)};reactDom_production_min.hydrate=function(a,b,c){if(!pl(b))throw Error(p(200));return sl(null,a,b,!0,c)};
		reactDom_production_min.hydrateRoot=function(a,b,c){if(!ol(a))throw Error(p(405));var d=null!=c&&c.hydratedSources||null,e=!1,f="",g=ll;null!==c&&void 0!==c&&(!0===c.unstable_strictMode&&(e=!0),void 0!==c.identifierPrefix&&(f=c.identifierPrefix),void 0!==c.onRecoverableError&&(g=c.onRecoverableError));b=fl(b,null,a,1,null!=c?c:null,e,!1,f,g);a[uf]=b.current;sf(a);if(d)for(a=0;a<d.length;a++)c=d[a],e=c._getVersion,e=e(c._source),null==b.mutableSourceEagerHydrationData?b.mutableSourceEagerHydrationData=[c,e]:b.mutableSourceEagerHydrationData.push(c,
		e);return new nl(b)};reactDom_production_min.render=function(a,b,c){if(!pl(b))throw Error(p(200));return sl(null,a,b,!1,c)};reactDom_production_min.unmountComponentAtNode=function(a){if(!pl(a))throw Error(p(40));return a._reactRootContainer?(Sk(function(){sl(null,null,a,!1,function(){a._reactRootContainer=null;a[uf]=null;});}),!0):!1};reactDom_production_min.unstable_batchedUpdates=Rk;
		reactDom_production_min.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!pl(c))throw Error(p(200));if(null==a||void 0===a._reactInternals)throw Error(p(38));return sl(a,b,c,!1,d)};reactDom_production_min.version="18.2.0-next-9e3b772b8-20220608";
		return reactDom_production_min;
	}

	function checkDCE() {
	  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
	  if (
	    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
	    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
	  ) {
	    return;
	  }
	  try {
	    // Verify that the code above has been dead code eliminated (DCE'd).
	    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
	  } catch (err) {
	    // DevTools shouldn't crash React, no matter what.
	    // We should still report in case we break this code.
	    console.error(err);
	  }
	}

	{
	  // DCE check should happen before ReactDOM bundle executes so that
	  // DevTools can report bad minification during injection.
	  checkDCE();
	  reactDom.exports = requireReactDom_production_min();
	}

	var reactDomExports = reactDom.exports;
	const ReactDOM = /*@__PURE__*/getDefaultExportFromCjs(reactDomExports);

	function _iterableToArrayLimit(r, l) {
	  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
	  if (null != t) {
	    var e,
	      n,
	      i,
	      u,
	      a = [],
	      f = !0,
	      o = !1;
	    try {
	      if (i = (t = t.call(r)).next, 0 === l) {
	        if (Object(t) !== t) return;
	        f = !1;
	      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
	    } catch (r) {
	      o = !0, n = r;
	    } finally {
	      try {
	        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
	      } finally {
	        if (o) throw n;
	      }
	    }
	    return a;
	  }
	}
	function ownKeys(e, r) {
	  var t = Object.keys(e);
	  if (Object.getOwnPropertySymbols) {
	    var o = Object.getOwnPropertySymbols(e);
	    r && (o = o.filter(function (r) {
	      return Object.getOwnPropertyDescriptor(e, r).enumerable;
	    })), t.push.apply(t, o);
	  }
	  return t;
	}
	function _objectSpread2(e) {
	  for (var r = 1; r < arguments.length; r++) {
	    var t = null != arguments[r] ? arguments[r] : {};
	    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
	      _defineProperty(e, r, t[r]);
	    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
	      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
	    });
	  }
	  return e;
	}
	function _toPrimitive(t, r) {
	  if ("object" != typeof t || !t) return t;
	  var e = t[Symbol.toPrimitive];
	  if (void 0 !== e) {
	    var i = e.call(t, r || "default");
	    if ("object" != typeof i) return i;
	    throw new TypeError("@@toPrimitive must return a primitive value.");
	  }
	  return ("string" === r ? String : Number)(t);
	}
	function _toPropertyKey(t) {
	  var i = _toPrimitive(t, "string");
	  return "symbol" == typeof i ? i : String(i);
	}
	function _defineProperty(obj, key, value) {
	  key = _toPropertyKey(key);
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	  return obj;
	}
	function _extends$1() {
	  _extends$1 = Object.assign ? Object.assign.bind() : function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];
	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }
	    return target;
	  };
	  return _extends$1.apply(this, arguments);
	}
	function _slicedToArray(arr, i) {
	  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
	}
	function _toConsumableArray(arr) {
	  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
	}
	function _arrayWithoutHoles(arr) {
	  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
	}
	function _arrayWithHoles(arr) {
	  if (Array.isArray(arr)) return arr;
	}
	function _iterableToArray(iter) {
	  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
	}
	function _unsupportedIterableToArray(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	}
	function _arrayLikeToArray(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;
	  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
	  return arr2;
	}
	function _nonIterableSpread() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}
	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}
	function _createForOfIteratorHelper(o, allowArrayLike) {
	  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
	  if (!it) {
	    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
	      if (it) o = it;
	      var i = 0;
	      var F = function () {};
	      return {
	        s: F,
	        n: function () {
	          if (i >= o.length) return {
	            done: true
	          };
	          return {
	            done: false,
	            value: o[i++]
	          };
	        },
	        e: function (e) {
	          throw e;
	        },
	        f: F
	      };
	    }
	    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	  }
	  var normalCompletion = true,
	    didErr = false,
	    err;
	  return {
	    s: function () {
	      it = it.call(o);
	    },
	    n: function () {
	      var step = it.next();
	      normalCompletion = step.done;
	      return step;
	    },
	    e: function (e) {
	      didErr = true;
	      err = e;
	    },
	    f: function () {
	      try {
	        if (!normalCompletion && it.return != null) it.return();
	      } finally {
	        if (didErr) throw err;
	      }
	    }
	  };
	}

	var StateContext = /*#__PURE__*/React.createContext({
	  state: {
	    tree: [],
	    cids: [],
	    newcids: [],
	    counter: 0
	  },
	  dispath: function dispath() {}
	});
	var init_context_default = {
	  comment_count: 0,
	  allow_comments: false,
	  current_user: "",
	  request_name: false,
	  request_email_address: false,
	  is_authenticated: false,
	  who_can_post: "",
	  allow_flagging: false,
	  allow_feedback: false,
	  show_feedback: false,
	  can_moderate: false,
	  polling_interval: 2000,
	  feedback_url: "",
	  delete_url: "",
	  dislike_url: "",
	  like_url: "",
	  login_url: "",
	  reply_url: "",
	  flag_url: "",
	  list_url: "",
	  count_url: "",
	  send_url: "",
	  preview_url: "",
	  default_form: {
	    content_type: "",
	    object_pk: "",
	    timestamp: "",
	    security_hash: ""
	  },
	  default_followup: false,
	  html_ud_suffix: "",
	  max_thread_level: -1
	};
	var InitContext = /*#__PURE__*/React.createContext(init_context_default);

	function create_tree(cids, data) {
	  var tree = new Array();
	  var corder = new Array();
	  var comments = {};
	  var children = {};
	  var in_cids = new Set();
	  var cur_cids = new Set();
	  var new_cids = new Set();
	  function get_children(cid) {
	    return children[cid].map(function (index) {
	      if (comments[index].children === undefined) {
	        comments[index].children = get_children(index);
	      }
	      return comments[index];
	    });
	  }
	  var _iterator = _createForOfIteratorHelper(data),
	    _step;
	  try {
	    for (_iterator.s(); !(_step = _iterator.n()).done;) {
	      var item = _step.value;
	      in_cids.add(item.id);
	      comments[item.id] = item;
	      if (item.level === 0) {
	        corder.push(item.id);
	      }
	      children[item.id] = [];
	      if (item.parent_id !== item.id) {
	        children[item.parent_id].push(item.id);
	      }
	    }
	  } catch (err) {
	    _iterator.e(err);
	  } finally {
	    _iterator.f();
	  }
	  for (var _i = 0, _corder = corder; _i < _corder.length; _i++) {
	    var id = _corder[_i];
	    comments[id].children = get_children(id);
	    tree.push(comments[id]);
	  }
	  if (in_cids.size > 0) {
	    if (cids.size > 0) {
	      var _iterator2 = _createForOfIteratorHelper(in_cids),
	        _step2;
	      try {
	        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	          var _id = _step2.value;
	          if (!cids.has(_id)) {
	            new_cids.add(_id);
	          }
	          cur_cids.add(_id);
	        }
	      } catch (err) {
	        _iterator2.e(err);
	      } finally {
	        _iterator2.f();
	      }
	    } else {
	      cur_cids = in_cids;
	      new_cids = new Set();
	    }
	  }
	  return {
	    tree: tree,
	    cids: cur_cids,
	    newcids: new_cids,
	    counter: cur_cids.size
	  };
	}
	function reducer$1(state, action) {
	  switch (action.type) {
	    case 'CREATE_TREE':
	      {
	        return _objectSpread2(_objectSpread2({}, state), create_tree(state.cids, action.data));
	      }
	    case 'UPDATE_COUNTER':
	      {
	        return _objectSpread2(_objectSpread2({}, state), {}, {
	          counter: action.counter
	        });
	      }
	    default:
	      {
	        return state;
	      }
	  }
	}

	// List of valid entities
	//
	// Generate with ./support/entities.js script
	//

	/*eslint quotes:0*/
	var entities = {
	  "Aacute":"\u00C1",
	  "aacute":"\u00E1",
	  "Abreve":"\u0102",
	  "abreve":"\u0103",
	  "ac":"\u223E",
	  "acd":"\u223F",
	  "acE":"\u223E\u0333",
	  "Acirc":"\u00C2",
	  "acirc":"\u00E2",
	  "acute":"\u00B4",
	  "Acy":"\u0410",
	  "acy":"\u0430",
	  "AElig":"\u00C6",
	  "aelig":"\u00E6",
	  "af":"\u2061",
	  "Afr":"\uD835\uDD04",
	  "afr":"\uD835\uDD1E",
	  "Agrave":"\u00C0",
	  "agrave":"\u00E0",
	  "alefsym":"\u2135",
	  "aleph":"\u2135",
	  "Alpha":"\u0391",
	  "alpha":"\u03B1",
	  "Amacr":"\u0100",
	  "amacr":"\u0101",
	  "amalg":"\u2A3F",
	  "AMP":"\u0026",
	  "amp":"\u0026",
	  "And":"\u2A53",
	  "and":"\u2227",
	  "andand":"\u2A55",
	  "andd":"\u2A5C",
	  "andslope":"\u2A58",
	  "andv":"\u2A5A",
	  "ang":"\u2220",
	  "ange":"\u29A4",
	  "angle":"\u2220",
	  "angmsd":"\u2221",
	  "angmsdaa":"\u29A8",
	  "angmsdab":"\u29A9",
	  "angmsdac":"\u29AA",
	  "angmsdad":"\u29AB",
	  "angmsdae":"\u29AC",
	  "angmsdaf":"\u29AD",
	  "angmsdag":"\u29AE",
	  "angmsdah":"\u29AF",
	  "angrt":"\u221F",
	  "angrtvb":"\u22BE",
	  "angrtvbd":"\u299D",
	  "angsph":"\u2222",
	  "angst":"\u00C5",
	  "angzarr":"\u237C",
	  "Aogon":"\u0104",
	  "aogon":"\u0105",
	  "Aopf":"\uD835\uDD38",
	  "aopf":"\uD835\uDD52",
	  "ap":"\u2248",
	  "apacir":"\u2A6F",
	  "apE":"\u2A70",
	  "ape":"\u224A",
	  "apid":"\u224B",
	  "apos":"\u0027",
	  "ApplyFunction":"\u2061",
	  "approx":"\u2248",
	  "approxeq":"\u224A",
	  "Aring":"\u00C5",
	  "aring":"\u00E5",
	  "Ascr":"\uD835\uDC9C",
	  "ascr":"\uD835\uDCB6",
	  "Assign":"\u2254",
	  "ast":"\u002A",
	  "asymp":"\u2248",
	  "asympeq":"\u224D",
	  "Atilde":"\u00C3",
	  "atilde":"\u00E3",
	  "Auml":"\u00C4",
	  "auml":"\u00E4",
	  "awconint":"\u2233",
	  "awint":"\u2A11",
	  "backcong":"\u224C",
	  "backepsilon":"\u03F6",
	  "backprime":"\u2035",
	  "backsim":"\u223D",
	  "backsimeq":"\u22CD",
	  "Backslash":"\u2216",
	  "Barv":"\u2AE7",
	  "barvee":"\u22BD",
	  "Barwed":"\u2306",
	  "barwed":"\u2305",
	  "barwedge":"\u2305",
	  "bbrk":"\u23B5",
	  "bbrktbrk":"\u23B6",
	  "bcong":"\u224C",
	  "Bcy":"\u0411",
	  "bcy":"\u0431",
	  "bdquo":"\u201E",
	  "becaus":"\u2235",
	  "Because":"\u2235",
	  "because":"\u2235",
	  "bemptyv":"\u29B0",
	  "bepsi":"\u03F6",
	  "bernou":"\u212C",
	  "Bernoullis":"\u212C",
	  "Beta":"\u0392",
	  "beta":"\u03B2",
	  "beth":"\u2136",
	  "between":"\u226C",
	  "Bfr":"\uD835\uDD05",
	  "bfr":"\uD835\uDD1F",
	  "bigcap":"\u22C2",
	  "bigcirc":"\u25EF",
	  "bigcup":"\u22C3",
	  "bigodot":"\u2A00",
	  "bigoplus":"\u2A01",
	  "bigotimes":"\u2A02",
	  "bigsqcup":"\u2A06",
	  "bigstar":"\u2605",
	  "bigtriangledown":"\u25BD",
	  "bigtriangleup":"\u25B3",
	  "biguplus":"\u2A04",
	  "bigvee":"\u22C1",
	  "bigwedge":"\u22C0",
	  "bkarow":"\u290D",
	  "blacklozenge":"\u29EB",
	  "blacksquare":"\u25AA",
	  "blacktriangle":"\u25B4",
	  "blacktriangledown":"\u25BE",
	  "blacktriangleleft":"\u25C2",
	  "blacktriangleright":"\u25B8",
	  "blank":"\u2423",
	  "blk12":"\u2592",
	  "blk14":"\u2591",
	  "blk34":"\u2593",
	  "block":"\u2588",
	  "bne":"\u003D\u20E5",
	  "bnequiv":"\u2261\u20E5",
	  "bNot":"\u2AED",
	  "bnot":"\u2310",
	  "Bopf":"\uD835\uDD39",
	  "bopf":"\uD835\uDD53",
	  "bot":"\u22A5",
	  "bottom":"\u22A5",
	  "bowtie":"\u22C8",
	  "boxbox":"\u29C9",
	  "boxDL":"\u2557",
	  "boxDl":"\u2556",
	  "boxdL":"\u2555",
	  "boxdl":"\u2510",
	  "boxDR":"\u2554",
	  "boxDr":"\u2553",
	  "boxdR":"\u2552",
	  "boxdr":"\u250C",
	  "boxH":"\u2550",
	  "boxh":"\u2500",
	  "boxHD":"\u2566",
	  "boxHd":"\u2564",
	  "boxhD":"\u2565",
	  "boxhd":"\u252C",
	  "boxHU":"\u2569",
	  "boxHu":"\u2567",
	  "boxhU":"\u2568",
	  "boxhu":"\u2534",
	  "boxminus":"\u229F",
	  "boxplus":"\u229E",
	  "boxtimes":"\u22A0",
	  "boxUL":"\u255D",
	  "boxUl":"\u255C",
	  "boxuL":"\u255B",
	  "boxul":"\u2518",
	  "boxUR":"\u255A",
	  "boxUr":"\u2559",
	  "boxuR":"\u2558",
	  "boxur":"\u2514",
	  "boxV":"\u2551",
	  "boxv":"\u2502",
	  "boxVH":"\u256C",
	  "boxVh":"\u256B",
	  "boxvH":"\u256A",
	  "boxvh":"\u253C",
	  "boxVL":"\u2563",
	  "boxVl":"\u2562",
	  "boxvL":"\u2561",
	  "boxvl":"\u2524",
	  "boxVR":"\u2560",
	  "boxVr":"\u255F",
	  "boxvR":"\u255E",
	  "boxvr":"\u251C",
	  "bprime":"\u2035",
	  "Breve":"\u02D8",
	  "breve":"\u02D8",
	  "brvbar":"\u00A6",
	  "Bscr":"\u212C",
	  "bscr":"\uD835\uDCB7",
	  "bsemi":"\u204F",
	  "bsim":"\u223D",
	  "bsime":"\u22CD",
	  "bsol":"\u005C",
	  "bsolb":"\u29C5",
	  "bsolhsub":"\u27C8",
	  "bull":"\u2022",
	  "bullet":"\u2022",
	  "bump":"\u224E",
	  "bumpE":"\u2AAE",
	  "bumpe":"\u224F",
	  "Bumpeq":"\u224E",
	  "bumpeq":"\u224F",
	  "Cacute":"\u0106",
	  "cacute":"\u0107",
	  "Cap":"\u22D2",
	  "cap":"\u2229",
	  "capand":"\u2A44",
	  "capbrcup":"\u2A49",
	  "capcap":"\u2A4B",
	  "capcup":"\u2A47",
	  "capdot":"\u2A40",
	  "CapitalDifferentialD":"\u2145",
	  "caps":"\u2229\uFE00",
	  "caret":"\u2041",
	  "caron":"\u02C7",
	  "Cayleys":"\u212D",
	  "ccaps":"\u2A4D",
	  "Ccaron":"\u010C",
	  "ccaron":"\u010D",
	  "Ccedil":"\u00C7",
	  "ccedil":"\u00E7",
	  "Ccirc":"\u0108",
	  "ccirc":"\u0109",
	  "Cconint":"\u2230",
	  "ccups":"\u2A4C",
	  "ccupssm":"\u2A50",
	  "Cdot":"\u010A",
	  "cdot":"\u010B",
	  "cedil":"\u00B8",
	  "Cedilla":"\u00B8",
	  "cemptyv":"\u29B2",
	  "cent":"\u00A2",
	  "CenterDot":"\u00B7",
	  "centerdot":"\u00B7",
	  "Cfr":"\u212D",
	  "cfr":"\uD835\uDD20",
	  "CHcy":"\u0427",
	  "chcy":"\u0447",
	  "check":"\u2713",
	  "checkmark":"\u2713",
	  "Chi":"\u03A7",
	  "chi":"\u03C7",
	  "cir":"\u25CB",
	  "circ":"\u02C6",
	  "circeq":"\u2257",
	  "circlearrowleft":"\u21BA",
	  "circlearrowright":"\u21BB",
	  "circledast":"\u229B",
	  "circledcirc":"\u229A",
	  "circleddash":"\u229D",
	  "CircleDot":"\u2299",
	  "circledR":"\u00AE",
	  "circledS":"\u24C8",
	  "CircleMinus":"\u2296",
	  "CirclePlus":"\u2295",
	  "CircleTimes":"\u2297",
	  "cirE":"\u29C3",
	  "cire":"\u2257",
	  "cirfnint":"\u2A10",
	  "cirmid":"\u2AEF",
	  "cirscir":"\u29C2",
	  "ClockwiseContourIntegral":"\u2232",
	  "CloseCurlyDoubleQuote":"\u201D",
	  "CloseCurlyQuote":"\u2019",
	  "clubs":"\u2663",
	  "clubsuit":"\u2663",
	  "Colon":"\u2237",
	  "colon":"\u003A",
	  "Colone":"\u2A74",
	  "colone":"\u2254",
	  "coloneq":"\u2254",
	  "comma":"\u002C",
	  "commat":"\u0040",
	  "comp":"\u2201",
	  "compfn":"\u2218",
	  "complement":"\u2201",
	  "complexes":"\u2102",
	  "cong":"\u2245",
	  "congdot":"\u2A6D",
	  "Congruent":"\u2261",
	  "Conint":"\u222F",
	  "conint":"\u222E",
	  "ContourIntegral":"\u222E",
	  "Copf":"\u2102",
	  "copf":"\uD835\uDD54",
	  "coprod":"\u2210",
	  "Coproduct":"\u2210",
	  "COPY":"\u00A9",
	  "copy":"\u00A9",
	  "copysr":"\u2117",
	  "CounterClockwiseContourIntegral":"\u2233",
	  "crarr":"\u21B5",
	  "Cross":"\u2A2F",
	  "cross":"\u2717",
	  "Cscr":"\uD835\uDC9E",
	  "cscr":"\uD835\uDCB8",
	  "csub":"\u2ACF",
	  "csube":"\u2AD1",
	  "csup":"\u2AD0",
	  "csupe":"\u2AD2",
	  "ctdot":"\u22EF",
	  "cudarrl":"\u2938",
	  "cudarrr":"\u2935",
	  "cuepr":"\u22DE",
	  "cuesc":"\u22DF",
	  "cularr":"\u21B6",
	  "cularrp":"\u293D",
	  "Cup":"\u22D3",
	  "cup":"\u222A",
	  "cupbrcap":"\u2A48",
	  "CupCap":"\u224D",
	  "cupcap":"\u2A46",
	  "cupcup":"\u2A4A",
	  "cupdot":"\u228D",
	  "cupor":"\u2A45",
	  "cups":"\u222A\uFE00",
	  "curarr":"\u21B7",
	  "curarrm":"\u293C",
	  "curlyeqprec":"\u22DE",
	  "curlyeqsucc":"\u22DF",
	  "curlyvee":"\u22CE",
	  "curlywedge":"\u22CF",
	  "curren":"\u00A4",
	  "curvearrowleft":"\u21B6",
	  "curvearrowright":"\u21B7",
	  "cuvee":"\u22CE",
	  "cuwed":"\u22CF",
	  "cwconint":"\u2232",
	  "cwint":"\u2231",
	  "cylcty":"\u232D",
	  "Dagger":"\u2021",
	  "dagger":"\u2020",
	  "daleth":"\u2138",
	  "Darr":"\u21A1",
	  "dArr":"\u21D3",
	  "darr":"\u2193",
	  "dash":"\u2010",
	  "Dashv":"\u2AE4",
	  "dashv":"\u22A3",
	  "dbkarow":"\u290F",
	  "dblac":"\u02DD",
	  "Dcaron":"\u010E",
	  "dcaron":"\u010F",
	  "Dcy":"\u0414",
	  "dcy":"\u0434",
	  "DD":"\u2145",
	  "dd":"\u2146",
	  "ddagger":"\u2021",
	  "ddarr":"\u21CA",
	  "DDotrahd":"\u2911",
	  "ddotseq":"\u2A77",
	  "deg":"\u00B0",
	  "Del":"\u2207",
	  "Delta":"\u0394",
	  "delta":"\u03B4",
	  "demptyv":"\u29B1",
	  "dfisht":"\u297F",
	  "Dfr":"\uD835\uDD07",
	  "dfr":"\uD835\uDD21",
	  "dHar":"\u2965",
	  "dharl":"\u21C3",
	  "dharr":"\u21C2",
	  "DiacriticalAcute":"\u00B4",
	  "DiacriticalDot":"\u02D9",
	  "DiacriticalDoubleAcute":"\u02DD",
	  "DiacriticalGrave":"\u0060",
	  "DiacriticalTilde":"\u02DC",
	  "diam":"\u22C4",
	  "Diamond":"\u22C4",
	  "diamond":"\u22C4",
	  "diamondsuit":"\u2666",
	  "diams":"\u2666",
	  "die":"\u00A8",
	  "DifferentialD":"\u2146",
	  "digamma":"\u03DD",
	  "disin":"\u22F2",
	  "div":"\u00F7",
	  "divide":"\u00F7",
	  "divideontimes":"\u22C7",
	  "divonx":"\u22C7",
	  "DJcy":"\u0402",
	  "djcy":"\u0452",
	  "dlcorn":"\u231E",
	  "dlcrop":"\u230D",
	  "dollar":"\u0024",
	  "Dopf":"\uD835\uDD3B",
	  "dopf":"\uD835\uDD55",
	  "Dot":"\u00A8",
	  "dot":"\u02D9",
	  "DotDot":"\u20DC",
	  "doteq":"\u2250",
	  "doteqdot":"\u2251",
	  "DotEqual":"\u2250",
	  "dotminus":"\u2238",
	  "dotplus":"\u2214",
	  "dotsquare":"\u22A1",
	  "doublebarwedge":"\u2306",
	  "DoubleContourIntegral":"\u222F",
	  "DoubleDot":"\u00A8",
	  "DoubleDownArrow":"\u21D3",
	  "DoubleLeftArrow":"\u21D0",
	  "DoubleLeftRightArrow":"\u21D4",
	  "DoubleLeftTee":"\u2AE4",
	  "DoubleLongLeftArrow":"\u27F8",
	  "DoubleLongLeftRightArrow":"\u27FA",
	  "DoubleLongRightArrow":"\u27F9",
	  "DoubleRightArrow":"\u21D2",
	  "DoubleRightTee":"\u22A8",
	  "DoubleUpArrow":"\u21D1",
	  "DoubleUpDownArrow":"\u21D5",
	  "DoubleVerticalBar":"\u2225",
	  "DownArrow":"\u2193",
	  "Downarrow":"\u21D3",
	  "downarrow":"\u2193",
	  "DownArrowBar":"\u2913",
	  "DownArrowUpArrow":"\u21F5",
	  "DownBreve":"\u0311",
	  "downdownarrows":"\u21CA",
	  "downharpoonleft":"\u21C3",
	  "downharpoonright":"\u21C2",
	  "DownLeftRightVector":"\u2950",
	  "DownLeftTeeVector":"\u295E",
	  "DownLeftVector":"\u21BD",
	  "DownLeftVectorBar":"\u2956",
	  "DownRightTeeVector":"\u295F",
	  "DownRightVector":"\u21C1",
	  "DownRightVectorBar":"\u2957",
	  "DownTee":"\u22A4",
	  "DownTeeArrow":"\u21A7",
	  "drbkarow":"\u2910",
	  "drcorn":"\u231F",
	  "drcrop":"\u230C",
	  "Dscr":"\uD835\uDC9F",
	  "dscr":"\uD835\uDCB9",
	  "DScy":"\u0405",
	  "dscy":"\u0455",
	  "dsol":"\u29F6",
	  "Dstrok":"\u0110",
	  "dstrok":"\u0111",
	  "dtdot":"\u22F1",
	  "dtri":"\u25BF",
	  "dtrif":"\u25BE",
	  "duarr":"\u21F5",
	  "duhar":"\u296F",
	  "dwangle":"\u29A6",
	  "DZcy":"\u040F",
	  "dzcy":"\u045F",
	  "dzigrarr":"\u27FF",
	  "Eacute":"\u00C9",
	  "eacute":"\u00E9",
	  "easter":"\u2A6E",
	  "Ecaron":"\u011A",
	  "ecaron":"\u011B",
	  "ecir":"\u2256",
	  "Ecirc":"\u00CA",
	  "ecirc":"\u00EA",
	  "ecolon":"\u2255",
	  "Ecy":"\u042D",
	  "ecy":"\u044D",
	  "eDDot":"\u2A77",
	  "Edot":"\u0116",
	  "eDot":"\u2251",
	  "edot":"\u0117",
	  "ee":"\u2147",
	  "efDot":"\u2252",
	  "Efr":"\uD835\uDD08",
	  "efr":"\uD835\uDD22",
	  "eg":"\u2A9A",
	  "Egrave":"\u00C8",
	  "egrave":"\u00E8",
	  "egs":"\u2A96",
	  "egsdot":"\u2A98",
	  "el":"\u2A99",
	  "Element":"\u2208",
	  "elinters":"\u23E7",
	  "ell":"\u2113",
	  "els":"\u2A95",
	  "elsdot":"\u2A97",
	  "Emacr":"\u0112",
	  "emacr":"\u0113",
	  "empty":"\u2205",
	  "emptyset":"\u2205",
	  "EmptySmallSquare":"\u25FB",
	  "emptyv":"\u2205",
	  "EmptyVerySmallSquare":"\u25AB",
	  "emsp":"\u2003",
	  "emsp13":"\u2004",
	  "emsp14":"\u2005",
	  "ENG":"\u014A",
	  "eng":"\u014B",
	  "ensp":"\u2002",
	  "Eogon":"\u0118",
	  "eogon":"\u0119",
	  "Eopf":"\uD835\uDD3C",
	  "eopf":"\uD835\uDD56",
	  "epar":"\u22D5",
	  "eparsl":"\u29E3",
	  "eplus":"\u2A71",
	  "epsi":"\u03B5",
	  "Epsilon":"\u0395",
	  "epsilon":"\u03B5",
	  "epsiv":"\u03F5",
	  "eqcirc":"\u2256",
	  "eqcolon":"\u2255",
	  "eqsim":"\u2242",
	  "eqslantgtr":"\u2A96",
	  "eqslantless":"\u2A95",
	  "Equal":"\u2A75",
	  "equals":"\u003D",
	  "EqualTilde":"\u2242",
	  "equest":"\u225F",
	  "Equilibrium":"\u21CC",
	  "equiv":"\u2261",
	  "equivDD":"\u2A78",
	  "eqvparsl":"\u29E5",
	  "erarr":"\u2971",
	  "erDot":"\u2253",
	  "Escr":"\u2130",
	  "escr":"\u212F",
	  "esdot":"\u2250",
	  "Esim":"\u2A73",
	  "esim":"\u2242",
	  "Eta":"\u0397",
	  "eta":"\u03B7",
	  "ETH":"\u00D0",
	  "eth":"\u00F0",
	  "Euml":"\u00CB",
	  "euml":"\u00EB",
	  "euro":"\u20AC",
	  "excl":"\u0021",
	  "exist":"\u2203",
	  "Exists":"\u2203",
	  "expectation":"\u2130",
	  "ExponentialE":"\u2147",
	  "exponentiale":"\u2147",
	  "fallingdotseq":"\u2252",
	  "Fcy":"\u0424",
	  "fcy":"\u0444",
	  "female":"\u2640",
	  "ffilig":"\uFB03",
	  "fflig":"\uFB00",
	  "ffllig":"\uFB04",
	  "Ffr":"\uD835\uDD09",
	  "ffr":"\uD835\uDD23",
	  "filig":"\uFB01",
	  "FilledSmallSquare":"\u25FC",
	  "FilledVerySmallSquare":"\u25AA",
	  "fjlig":"\u0066\u006A",
	  "flat":"\u266D",
	  "fllig":"\uFB02",
	  "fltns":"\u25B1",
	  "fnof":"\u0192",
	  "Fopf":"\uD835\uDD3D",
	  "fopf":"\uD835\uDD57",
	  "ForAll":"\u2200",
	  "forall":"\u2200",
	  "fork":"\u22D4",
	  "forkv":"\u2AD9",
	  "Fouriertrf":"\u2131",
	  "fpartint":"\u2A0D",
	  "frac12":"\u00BD",
	  "frac13":"\u2153",
	  "frac14":"\u00BC",
	  "frac15":"\u2155",
	  "frac16":"\u2159",
	  "frac18":"\u215B",
	  "frac23":"\u2154",
	  "frac25":"\u2156",
	  "frac34":"\u00BE",
	  "frac35":"\u2157",
	  "frac38":"\u215C",
	  "frac45":"\u2158",
	  "frac56":"\u215A",
	  "frac58":"\u215D",
	  "frac78":"\u215E",
	  "frasl":"\u2044",
	  "frown":"\u2322",
	  "Fscr":"\u2131",
	  "fscr":"\uD835\uDCBB",
	  "gacute":"\u01F5",
	  "Gamma":"\u0393",
	  "gamma":"\u03B3",
	  "Gammad":"\u03DC",
	  "gammad":"\u03DD",
	  "gap":"\u2A86",
	  "Gbreve":"\u011E",
	  "gbreve":"\u011F",
	  "Gcedil":"\u0122",
	  "Gcirc":"\u011C",
	  "gcirc":"\u011D",
	  "Gcy":"\u0413",
	  "gcy":"\u0433",
	  "Gdot":"\u0120",
	  "gdot":"\u0121",
	  "gE":"\u2267",
	  "ge":"\u2265",
	  "gEl":"\u2A8C",
	  "gel":"\u22DB",
	  "geq":"\u2265",
	  "geqq":"\u2267",
	  "geqslant":"\u2A7E",
	  "ges":"\u2A7E",
	  "gescc":"\u2AA9",
	  "gesdot":"\u2A80",
	  "gesdoto":"\u2A82",
	  "gesdotol":"\u2A84",
	  "gesl":"\u22DB\uFE00",
	  "gesles":"\u2A94",
	  "Gfr":"\uD835\uDD0A",
	  "gfr":"\uD835\uDD24",
	  "Gg":"\u22D9",
	  "gg":"\u226B",
	  "ggg":"\u22D9",
	  "gimel":"\u2137",
	  "GJcy":"\u0403",
	  "gjcy":"\u0453",
	  "gl":"\u2277",
	  "gla":"\u2AA5",
	  "glE":"\u2A92",
	  "glj":"\u2AA4",
	  "gnap":"\u2A8A",
	  "gnapprox":"\u2A8A",
	  "gnE":"\u2269",
	  "gne":"\u2A88",
	  "gneq":"\u2A88",
	  "gneqq":"\u2269",
	  "gnsim":"\u22E7",
	  "Gopf":"\uD835\uDD3E",
	  "gopf":"\uD835\uDD58",
	  "grave":"\u0060",
	  "GreaterEqual":"\u2265",
	  "GreaterEqualLess":"\u22DB",
	  "GreaterFullEqual":"\u2267",
	  "GreaterGreater":"\u2AA2",
	  "GreaterLess":"\u2277",
	  "GreaterSlantEqual":"\u2A7E",
	  "GreaterTilde":"\u2273",
	  "Gscr":"\uD835\uDCA2",
	  "gscr":"\u210A",
	  "gsim":"\u2273",
	  "gsime":"\u2A8E",
	  "gsiml":"\u2A90",
	  "GT":"\u003E",
	  "Gt":"\u226B",
	  "gt":"\u003E",
	  "gtcc":"\u2AA7",
	  "gtcir":"\u2A7A",
	  "gtdot":"\u22D7",
	  "gtlPar":"\u2995",
	  "gtquest":"\u2A7C",
	  "gtrapprox":"\u2A86",
	  "gtrarr":"\u2978",
	  "gtrdot":"\u22D7",
	  "gtreqless":"\u22DB",
	  "gtreqqless":"\u2A8C",
	  "gtrless":"\u2277",
	  "gtrsim":"\u2273",
	  "gvertneqq":"\u2269\uFE00",
	  "gvnE":"\u2269\uFE00",
	  "Hacek":"\u02C7",
	  "hairsp":"\u200A",
	  "half":"\u00BD",
	  "hamilt":"\u210B",
	  "HARDcy":"\u042A",
	  "hardcy":"\u044A",
	  "hArr":"\u21D4",
	  "harr":"\u2194",
	  "harrcir":"\u2948",
	  "harrw":"\u21AD",
	  "Hat":"\u005E",
	  "hbar":"\u210F",
	  "Hcirc":"\u0124",
	  "hcirc":"\u0125",
	  "hearts":"\u2665",
	  "heartsuit":"\u2665",
	  "hellip":"\u2026",
	  "hercon":"\u22B9",
	  "Hfr":"\u210C",
	  "hfr":"\uD835\uDD25",
	  "HilbertSpace":"\u210B",
	  "hksearow":"\u2925",
	  "hkswarow":"\u2926",
	  "hoarr":"\u21FF",
	  "homtht":"\u223B",
	  "hookleftarrow":"\u21A9",
	  "hookrightarrow":"\u21AA",
	  "Hopf":"\u210D",
	  "hopf":"\uD835\uDD59",
	  "horbar":"\u2015",
	  "HorizontalLine":"\u2500",
	  "Hscr":"\u210B",
	  "hscr":"\uD835\uDCBD",
	  "hslash":"\u210F",
	  "Hstrok":"\u0126",
	  "hstrok":"\u0127",
	  "HumpDownHump":"\u224E",
	  "HumpEqual":"\u224F",
	  "hybull":"\u2043",
	  "hyphen":"\u2010",
	  "Iacute":"\u00CD",
	  "iacute":"\u00ED",
	  "ic":"\u2063",
	  "Icirc":"\u00CE",
	  "icirc":"\u00EE",
	  "Icy":"\u0418",
	  "icy":"\u0438",
	  "Idot":"\u0130",
	  "IEcy":"\u0415",
	  "iecy":"\u0435",
	  "iexcl":"\u00A1",
	  "iff":"\u21D4",
	  "Ifr":"\u2111",
	  "ifr":"\uD835\uDD26",
	  "Igrave":"\u00CC",
	  "igrave":"\u00EC",
	  "ii":"\u2148",
	  "iiiint":"\u2A0C",
	  "iiint":"\u222D",
	  "iinfin":"\u29DC",
	  "iiota":"\u2129",
	  "IJlig":"\u0132",
	  "ijlig":"\u0133",
	  "Im":"\u2111",
	  "Imacr":"\u012A",
	  "imacr":"\u012B",
	  "image":"\u2111",
	  "ImaginaryI":"\u2148",
	  "imagline":"\u2110",
	  "imagpart":"\u2111",
	  "imath":"\u0131",
	  "imof":"\u22B7",
	  "imped":"\u01B5",
	  "Implies":"\u21D2",
	  "in":"\u2208",
	  "incare":"\u2105",
	  "infin":"\u221E",
	  "infintie":"\u29DD",
	  "inodot":"\u0131",
	  "Int":"\u222C",
	  "int":"\u222B",
	  "intcal":"\u22BA",
	  "integers":"\u2124",
	  "Integral":"\u222B",
	  "intercal":"\u22BA",
	  "Intersection":"\u22C2",
	  "intlarhk":"\u2A17",
	  "intprod":"\u2A3C",
	  "InvisibleComma":"\u2063",
	  "InvisibleTimes":"\u2062",
	  "IOcy":"\u0401",
	  "iocy":"\u0451",
	  "Iogon":"\u012E",
	  "iogon":"\u012F",
	  "Iopf":"\uD835\uDD40",
	  "iopf":"\uD835\uDD5A",
	  "Iota":"\u0399",
	  "iota":"\u03B9",
	  "iprod":"\u2A3C",
	  "iquest":"\u00BF",
	  "Iscr":"\u2110",
	  "iscr":"\uD835\uDCBE",
	  "isin":"\u2208",
	  "isindot":"\u22F5",
	  "isinE":"\u22F9",
	  "isins":"\u22F4",
	  "isinsv":"\u22F3",
	  "isinv":"\u2208",
	  "it":"\u2062",
	  "Itilde":"\u0128",
	  "itilde":"\u0129",
	  "Iukcy":"\u0406",
	  "iukcy":"\u0456",
	  "Iuml":"\u00CF",
	  "iuml":"\u00EF",
	  "Jcirc":"\u0134",
	  "jcirc":"\u0135",
	  "Jcy":"\u0419",
	  "jcy":"\u0439",
	  "Jfr":"\uD835\uDD0D",
	  "jfr":"\uD835\uDD27",
	  "jmath":"\u0237",
	  "Jopf":"\uD835\uDD41",
	  "jopf":"\uD835\uDD5B",
	  "Jscr":"\uD835\uDCA5",
	  "jscr":"\uD835\uDCBF",
	  "Jsercy":"\u0408",
	  "jsercy":"\u0458",
	  "Jukcy":"\u0404",
	  "jukcy":"\u0454",
	  "Kappa":"\u039A",
	  "kappa":"\u03BA",
	  "kappav":"\u03F0",
	  "Kcedil":"\u0136",
	  "kcedil":"\u0137",
	  "Kcy":"\u041A",
	  "kcy":"\u043A",
	  "Kfr":"\uD835\uDD0E",
	  "kfr":"\uD835\uDD28",
	  "kgreen":"\u0138",
	  "KHcy":"\u0425",
	  "khcy":"\u0445",
	  "KJcy":"\u040C",
	  "kjcy":"\u045C",
	  "Kopf":"\uD835\uDD42",
	  "kopf":"\uD835\uDD5C",
	  "Kscr":"\uD835\uDCA6",
	  "kscr":"\uD835\uDCC0",
	  "lAarr":"\u21DA",
	  "Lacute":"\u0139",
	  "lacute":"\u013A",
	  "laemptyv":"\u29B4",
	  "lagran":"\u2112",
	  "Lambda":"\u039B",
	  "lambda":"\u03BB",
	  "Lang":"\u27EA",
	  "lang":"\u27E8",
	  "langd":"\u2991",
	  "langle":"\u27E8",
	  "lap":"\u2A85",
	  "Laplacetrf":"\u2112",
	  "laquo":"\u00AB",
	  "Larr":"\u219E",
	  "lArr":"\u21D0",
	  "larr":"\u2190",
	  "larrb":"\u21E4",
	  "larrbfs":"\u291F",
	  "larrfs":"\u291D",
	  "larrhk":"\u21A9",
	  "larrlp":"\u21AB",
	  "larrpl":"\u2939",
	  "larrsim":"\u2973",
	  "larrtl":"\u21A2",
	  "lat":"\u2AAB",
	  "lAtail":"\u291B",
	  "latail":"\u2919",
	  "late":"\u2AAD",
	  "lates":"\u2AAD\uFE00",
	  "lBarr":"\u290E",
	  "lbarr":"\u290C",
	  "lbbrk":"\u2772",
	  "lbrace":"\u007B",
	  "lbrack":"\u005B",
	  "lbrke":"\u298B",
	  "lbrksld":"\u298F",
	  "lbrkslu":"\u298D",
	  "Lcaron":"\u013D",
	  "lcaron":"\u013E",
	  "Lcedil":"\u013B",
	  "lcedil":"\u013C",
	  "lceil":"\u2308",
	  "lcub":"\u007B",
	  "Lcy":"\u041B",
	  "lcy":"\u043B",
	  "ldca":"\u2936",
	  "ldquo":"\u201C",
	  "ldquor":"\u201E",
	  "ldrdhar":"\u2967",
	  "ldrushar":"\u294B",
	  "ldsh":"\u21B2",
	  "lE":"\u2266",
	  "le":"\u2264",
	  "LeftAngleBracket":"\u27E8",
	  "LeftArrow":"\u2190",
	  "Leftarrow":"\u21D0",
	  "leftarrow":"\u2190",
	  "LeftArrowBar":"\u21E4",
	  "LeftArrowRightArrow":"\u21C6",
	  "leftarrowtail":"\u21A2",
	  "LeftCeiling":"\u2308",
	  "LeftDoubleBracket":"\u27E6",
	  "LeftDownTeeVector":"\u2961",
	  "LeftDownVector":"\u21C3",
	  "LeftDownVectorBar":"\u2959",
	  "LeftFloor":"\u230A",
	  "leftharpoondown":"\u21BD",
	  "leftharpoonup":"\u21BC",
	  "leftleftarrows":"\u21C7",
	  "LeftRightArrow":"\u2194",
	  "Leftrightarrow":"\u21D4",
	  "leftrightarrow":"\u2194",
	  "leftrightarrows":"\u21C6",
	  "leftrightharpoons":"\u21CB",
	  "leftrightsquigarrow":"\u21AD",
	  "LeftRightVector":"\u294E",
	  "LeftTee":"\u22A3",
	  "LeftTeeArrow":"\u21A4",
	  "LeftTeeVector":"\u295A",
	  "leftthreetimes":"\u22CB",
	  "LeftTriangle":"\u22B2",
	  "LeftTriangleBar":"\u29CF",
	  "LeftTriangleEqual":"\u22B4",
	  "LeftUpDownVector":"\u2951",
	  "LeftUpTeeVector":"\u2960",
	  "LeftUpVector":"\u21BF",
	  "LeftUpVectorBar":"\u2958",
	  "LeftVector":"\u21BC",
	  "LeftVectorBar":"\u2952",
	  "lEg":"\u2A8B",
	  "leg":"\u22DA",
	  "leq":"\u2264",
	  "leqq":"\u2266",
	  "leqslant":"\u2A7D",
	  "les":"\u2A7D",
	  "lescc":"\u2AA8",
	  "lesdot":"\u2A7F",
	  "lesdoto":"\u2A81",
	  "lesdotor":"\u2A83",
	  "lesg":"\u22DA\uFE00",
	  "lesges":"\u2A93",
	  "lessapprox":"\u2A85",
	  "lessdot":"\u22D6",
	  "lesseqgtr":"\u22DA",
	  "lesseqqgtr":"\u2A8B",
	  "LessEqualGreater":"\u22DA",
	  "LessFullEqual":"\u2266",
	  "LessGreater":"\u2276",
	  "lessgtr":"\u2276",
	  "LessLess":"\u2AA1",
	  "lesssim":"\u2272",
	  "LessSlantEqual":"\u2A7D",
	  "LessTilde":"\u2272",
	  "lfisht":"\u297C",
	  "lfloor":"\u230A",
	  "Lfr":"\uD835\uDD0F",
	  "lfr":"\uD835\uDD29",
	  "lg":"\u2276",
	  "lgE":"\u2A91",
	  "lHar":"\u2962",
	  "lhard":"\u21BD",
	  "lharu":"\u21BC",
	  "lharul":"\u296A",
	  "lhblk":"\u2584",
	  "LJcy":"\u0409",
	  "ljcy":"\u0459",
	  "Ll":"\u22D8",
	  "ll":"\u226A",
	  "llarr":"\u21C7",
	  "llcorner":"\u231E",
	  "Lleftarrow":"\u21DA",
	  "llhard":"\u296B",
	  "lltri":"\u25FA",
	  "Lmidot":"\u013F",
	  "lmidot":"\u0140",
	  "lmoust":"\u23B0",
	  "lmoustache":"\u23B0",
	  "lnap":"\u2A89",
	  "lnapprox":"\u2A89",
	  "lnE":"\u2268",
	  "lne":"\u2A87",
	  "lneq":"\u2A87",
	  "lneqq":"\u2268",
	  "lnsim":"\u22E6",
	  "loang":"\u27EC",
	  "loarr":"\u21FD",
	  "lobrk":"\u27E6",
	  "LongLeftArrow":"\u27F5",
	  "Longleftarrow":"\u27F8",
	  "longleftarrow":"\u27F5",
	  "LongLeftRightArrow":"\u27F7",
	  "Longleftrightarrow":"\u27FA",
	  "longleftrightarrow":"\u27F7",
	  "longmapsto":"\u27FC",
	  "LongRightArrow":"\u27F6",
	  "Longrightarrow":"\u27F9",
	  "longrightarrow":"\u27F6",
	  "looparrowleft":"\u21AB",
	  "looparrowright":"\u21AC",
	  "lopar":"\u2985",
	  "Lopf":"\uD835\uDD43",
	  "lopf":"\uD835\uDD5D",
	  "loplus":"\u2A2D",
	  "lotimes":"\u2A34",
	  "lowast":"\u2217",
	  "lowbar":"\u005F",
	  "LowerLeftArrow":"\u2199",
	  "LowerRightArrow":"\u2198",
	  "loz":"\u25CA",
	  "lozenge":"\u25CA",
	  "lozf":"\u29EB",
	  "lpar":"\u0028",
	  "lparlt":"\u2993",
	  "lrarr":"\u21C6",
	  "lrcorner":"\u231F",
	  "lrhar":"\u21CB",
	  "lrhard":"\u296D",
	  "lrm":"\u200E",
	  "lrtri":"\u22BF",
	  "lsaquo":"\u2039",
	  "Lscr":"\u2112",
	  "lscr":"\uD835\uDCC1",
	  "Lsh":"\u21B0",
	  "lsh":"\u21B0",
	  "lsim":"\u2272",
	  "lsime":"\u2A8D",
	  "lsimg":"\u2A8F",
	  "lsqb":"\u005B",
	  "lsquo":"\u2018",
	  "lsquor":"\u201A",
	  "Lstrok":"\u0141",
	  "lstrok":"\u0142",
	  "LT":"\u003C",
	  "Lt":"\u226A",
	  "lt":"\u003C",
	  "ltcc":"\u2AA6",
	  "ltcir":"\u2A79",
	  "ltdot":"\u22D6",
	  "lthree":"\u22CB",
	  "ltimes":"\u22C9",
	  "ltlarr":"\u2976",
	  "ltquest":"\u2A7B",
	  "ltri":"\u25C3",
	  "ltrie":"\u22B4",
	  "ltrif":"\u25C2",
	  "ltrPar":"\u2996",
	  "lurdshar":"\u294A",
	  "luruhar":"\u2966",
	  "lvertneqq":"\u2268\uFE00",
	  "lvnE":"\u2268\uFE00",
	  "macr":"\u00AF",
	  "male":"\u2642",
	  "malt":"\u2720",
	  "maltese":"\u2720",
	  "Map":"\u2905",
	  "map":"\u21A6",
	  "mapsto":"\u21A6",
	  "mapstodown":"\u21A7",
	  "mapstoleft":"\u21A4",
	  "mapstoup":"\u21A5",
	  "marker":"\u25AE",
	  "mcomma":"\u2A29",
	  "Mcy":"\u041C",
	  "mcy":"\u043C",
	  "mdash":"\u2014",
	  "mDDot":"\u223A",
	  "measuredangle":"\u2221",
	  "MediumSpace":"\u205F",
	  "Mellintrf":"\u2133",
	  "Mfr":"\uD835\uDD10",
	  "mfr":"\uD835\uDD2A",
	  "mho":"\u2127",
	  "micro":"\u00B5",
	  "mid":"\u2223",
	  "midast":"\u002A",
	  "midcir":"\u2AF0",
	  "middot":"\u00B7",
	  "minus":"\u2212",
	  "minusb":"\u229F",
	  "minusd":"\u2238",
	  "minusdu":"\u2A2A",
	  "MinusPlus":"\u2213",
	  "mlcp":"\u2ADB",
	  "mldr":"\u2026",
	  "mnplus":"\u2213",
	  "models":"\u22A7",
	  "Mopf":"\uD835\uDD44",
	  "mopf":"\uD835\uDD5E",
	  "mp":"\u2213",
	  "Mscr":"\u2133",
	  "mscr":"\uD835\uDCC2",
	  "mstpos":"\u223E",
	  "Mu":"\u039C",
	  "mu":"\u03BC",
	  "multimap":"\u22B8",
	  "mumap":"\u22B8",
	  "nabla":"\u2207",
	  "Nacute":"\u0143",
	  "nacute":"\u0144",
	  "nang":"\u2220\u20D2",
	  "nap":"\u2249",
	  "napE":"\u2A70\u0338",
	  "napid":"\u224B\u0338",
	  "napos":"\u0149",
	  "napprox":"\u2249",
	  "natur":"\u266E",
	  "natural":"\u266E",
	  "naturals":"\u2115",
	  "nbsp":"\u00A0",
	  "nbump":"\u224E\u0338",
	  "nbumpe":"\u224F\u0338",
	  "ncap":"\u2A43",
	  "Ncaron":"\u0147",
	  "ncaron":"\u0148",
	  "Ncedil":"\u0145",
	  "ncedil":"\u0146",
	  "ncong":"\u2247",
	  "ncongdot":"\u2A6D\u0338",
	  "ncup":"\u2A42",
	  "Ncy":"\u041D",
	  "ncy":"\u043D",
	  "ndash":"\u2013",
	  "ne":"\u2260",
	  "nearhk":"\u2924",
	  "neArr":"\u21D7",
	  "nearr":"\u2197",
	  "nearrow":"\u2197",
	  "nedot":"\u2250\u0338",
	  "NegativeMediumSpace":"\u200B",
	  "NegativeThickSpace":"\u200B",
	  "NegativeThinSpace":"\u200B",
	  "NegativeVeryThinSpace":"\u200B",
	  "nequiv":"\u2262",
	  "nesear":"\u2928",
	  "nesim":"\u2242\u0338",
	  "NestedGreaterGreater":"\u226B",
	  "NestedLessLess":"\u226A",
	  "NewLine":"\u000A",
	  "nexist":"\u2204",
	  "nexists":"\u2204",
	  "Nfr":"\uD835\uDD11",
	  "nfr":"\uD835\uDD2B",
	  "ngE":"\u2267\u0338",
	  "nge":"\u2271",
	  "ngeq":"\u2271",
	  "ngeqq":"\u2267\u0338",
	  "ngeqslant":"\u2A7E\u0338",
	  "nges":"\u2A7E\u0338",
	  "nGg":"\u22D9\u0338",
	  "ngsim":"\u2275",
	  "nGt":"\u226B\u20D2",
	  "ngt":"\u226F",
	  "ngtr":"\u226F",
	  "nGtv":"\u226B\u0338",
	  "nhArr":"\u21CE",
	  "nharr":"\u21AE",
	  "nhpar":"\u2AF2",
	  "ni":"\u220B",
	  "nis":"\u22FC",
	  "nisd":"\u22FA",
	  "niv":"\u220B",
	  "NJcy":"\u040A",
	  "njcy":"\u045A",
	  "nlArr":"\u21CD",
	  "nlarr":"\u219A",
	  "nldr":"\u2025",
	  "nlE":"\u2266\u0338",
	  "nle":"\u2270",
	  "nLeftarrow":"\u21CD",
	  "nleftarrow":"\u219A",
	  "nLeftrightarrow":"\u21CE",
	  "nleftrightarrow":"\u21AE",
	  "nleq":"\u2270",
	  "nleqq":"\u2266\u0338",
	  "nleqslant":"\u2A7D\u0338",
	  "nles":"\u2A7D\u0338",
	  "nless":"\u226E",
	  "nLl":"\u22D8\u0338",
	  "nlsim":"\u2274",
	  "nLt":"\u226A\u20D2",
	  "nlt":"\u226E",
	  "nltri":"\u22EA",
	  "nltrie":"\u22EC",
	  "nLtv":"\u226A\u0338",
	  "nmid":"\u2224",
	  "NoBreak":"\u2060",
	  "NonBreakingSpace":"\u00A0",
	  "Nopf":"\u2115",
	  "nopf":"\uD835\uDD5F",
	  "Not":"\u2AEC",
	  "not":"\u00AC",
	  "NotCongruent":"\u2262",
	  "NotCupCap":"\u226D",
	  "NotDoubleVerticalBar":"\u2226",
	  "NotElement":"\u2209",
	  "NotEqual":"\u2260",
	  "NotEqualTilde":"\u2242\u0338",
	  "NotExists":"\u2204",
	  "NotGreater":"\u226F",
	  "NotGreaterEqual":"\u2271",
	  "NotGreaterFullEqual":"\u2267\u0338",
	  "NotGreaterGreater":"\u226B\u0338",
	  "NotGreaterLess":"\u2279",
	  "NotGreaterSlantEqual":"\u2A7E\u0338",
	  "NotGreaterTilde":"\u2275",
	  "NotHumpDownHump":"\u224E\u0338",
	  "NotHumpEqual":"\u224F\u0338",
	  "notin":"\u2209",
	  "notindot":"\u22F5\u0338",
	  "notinE":"\u22F9\u0338",
	  "notinva":"\u2209",
	  "notinvb":"\u22F7",
	  "notinvc":"\u22F6",
	  "NotLeftTriangle":"\u22EA",
	  "NotLeftTriangleBar":"\u29CF\u0338",
	  "NotLeftTriangleEqual":"\u22EC",
	  "NotLess":"\u226E",
	  "NotLessEqual":"\u2270",
	  "NotLessGreater":"\u2278",
	  "NotLessLess":"\u226A\u0338",
	  "NotLessSlantEqual":"\u2A7D\u0338",
	  "NotLessTilde":"\u2274",
	  "NotNestedGreaterGreater":"\u2AA2\u0338",
	  "NotNestedLessLess":"\u2AA1\u0338",
	  "notni":"\u220C",
	  "notniva":"\u220C",
	  "notnivb":"\u22FE",
	  "notnivc":"\u22FD",
	  "NotPrecedes":"\u2280",
	  "NotPrecedesEqual":"\u2AAF\u0338",
	  "NotPrecedesSlantEqual":"\u22E0",
	  "NotReverseElement":"\u220C",
	  "NotRightTriangle":"\u22EB",
	  "NotRightTriangleBar":"\u29D0\u0338",
	  "NotRightTriangleEqual":"\u22ED",
	  "NotSquareSubset":"\u228F\u0338",
	  "NotSquareSubsetEqual":"\u22E2",
	  "NotSquareSuperset":"\u2290\u0338",
	  "NotSquareSupersetEqual":"\u22E3",
	  "NotSubset":"\u2282\u20D2",
	  "NotSubsetEqual":"\u2288",
	  "NotSucceeds":"\u2281",
	  "NotSucceedsEqual":"\u2AB0\u0338",
	  "NotSucceedsSlantEqual":"\u22E1",
	  "NotSucceedsTilde":"\u227F\u0338",
	  "NotSuperset":"\u2283\u20D2",
	  "NotSupersetEqual":"\u2289",
	  "NotTilde":"\u2241",
	  "NotTildeEqual":"\u2244",
	  "NotTildeFullEqual":"\u2247",
	  "NotTildeTilde":"\u2249",
	  "NotVerticalBar":"\u2224",
	  "npar":"\u2226",
	  "nparallel":"\u2226",
	  "nparsl":"\u2AFD\u20E5",
	  "npart":"\u2202\u0338",
	  "npolint":"\u2A14",
	  "npr":"\u2280",
	  "nprcue":"\u22E0",
	  "npre":"\u2AAF\u0338",
	  "nprec":"\u2280",
	  "npreceq":"\u2AAF\u0338",
	  "nrArr":"\u21CF",
	  "nrarr":"\u219B",
	  "nrarrc":"\u2933\u0338",
	  "nrarrw":"\u219D\u0338",
	  "nRightarrow":"\u21CF",
	  "nrightarrow":"\u219B",
	  "nrtri":"\u22EB",
	  "nrtrie":"\u22ED",
	  "nsc":"\u2281",
	  "nsccue":"\u22E1",
	  "nsce":"\u2AB0\u0338",
	  "Nscr":"\uD835\uDCA9",
	  "nscr":"\uD835\uDCC3",
	  "nshortmid":"\u2224",
	  "nshortparallel":"\u2226",
	  "nsim":"\u2241",
	  "nsime":"\u2244",
	  "nsimeq":"\u2244",
	  "nsmid":"\u2224",
	  "nspar":"\u2226",
	  "nsqsube":"\u22E2",
	  "nsqsupe":"\u22E3",
	  "nsub":"\u2284",
	  "nsubE":"\u2AC5\u0338",
	  "nsube":"\u2288",
	  "nsubset":"\u2282\u20D2",
	  "nsubseteq":"\u2288",
	  "nsubseteqq":"\u2AC5\u0338",
	  "nsucc":"\u2281",
	  "nsucceq":"\u2AB0\u0338",
	  "nsup":"\u2285",
	  "nsupE":"\u2AC6\u0338",
	  "nsupe":"\u2289",
	  "nsupset":"\u2283\u20D2",
	  "nsupseteq":"\u2289",
	  "nsupseteqq":"\u2AC6\u0338",
	  "ntgl":"\u2279",
	  "Ntilde":"\u00D1",
	  "ntilde":"\u00F1",
	  "ntlg":"\u2278",
	  "ntriangleleft":"\u22EA",
	  "ntrianglelefteq":"\u22EC",
	  "ntriangleright":"\u22EB",
	  "ntrianglerighteq":"\u22ED",
	  "Nu":"\u039D",
	  "nu":"\u03BD",
	  "num":"\u0023",
	  "numero":"\u2116",
	  "numsp":"\u2007",
	  "nvap":"\u224D\u20D2",
	  "nVDash":"\u22AF",
	  "nVdash":"\u22AE",
	  "nvDash":"\u22AD",
	  "nvdash":"\u22AC",
	  "nvge":"\u2265\u20D2",
	  "nvgt":"\u003E\u20D2",
	  "nvHarr":"\u2904",
	  "nvinfin":"\u29DE",
	  "nvlArr":"\u2902",
	  "nvle":"\u2264\u20D2",
	  "nvlt":"\u003C\u20D2",
	  "nvltrie":"\u22B4\u20D2",
	  "nvrArr":"\u2903",
	  "nvrtrie":"\u22B5\u20D2",
	  "nvsim":"\u223C\u20D2",
	  "nwarhk":"\u2923",
	  "nwArr":"\u21D6",
	  "nwarr":"\u2196",
	  "nwarrow":"\u2196",
	  "nwnear":"\u2927",
	  "Oacute":"\u00D3",
	  "oacute":"\u00F3",
	  "oast":"\u229B",
	  "ocir":"\u229A",
	  "Ocirc":"\u00D4",
	  "ocirc":"\u00F4",
	  "Ocy":"\u041E",
	  "ocy":"\u043E",
	  "odash":"\u229D",
	  "Odblac":"\u0150",
	  "odblac":"\u0151",
	  "odiv":"\u2A38",
	  "odot":"\u2299",
	  "odsold":"\u29BC",
	  "OElig":"\u0152",
	  "oelig":"\u0153",
	  "ofcir":"\u29BF",
	  "Ofr":"\uD835\uDD12",
	  "ofr":"\uD835\uDD2C",
	  "ogon":"\u02DB",
	  "Ograve":"\u00D2",
	  "ograve":"\u00F2",
	  "ogt":"\u29C1",
	  "ohbar":"\u29B5",
	  "ohm":"\u03A9",
	  "oint":"\u222E",
	  "olarr":"\u21BA",
	  "olcir":"\u29BE",
	  "olcross":"\u29BB",
	  "oline":"\u203E",
	  "olt":"\u29C0",
	  "Omacr":"\u014C",
	  "omacr":"\u014D",
	  "Omega":"\u03A9",
	  "omega":"\u03C9",
	  "Omicron":"\u039F",
	  "omicron":"\u03BF",
	  "omid":"\u29B6",
	  "ominus":"\u2296",
	  "Oopf":"\uD835\uDD46",
	  "oopf":"\uD835\uDD60",
	  "opar":"\u29B7",
	  "OpenCurlyDoubleQuote":"\u201C",
	  "OpenCurlyQuote":"\u2018",
	  "operp":"\u29B9",
	  "oplus":"\u2295",
	  "Or":"\u2A54",
	  "or":"\u2228",
	  "orarr":"\u21BB",
	  "ord":"\u2A5D",
	  "order":"\u2134",
	  "orderof":"\u2134",
	  "ordf":"\u00AA",
	  "ordm":"\u00BA",
	  "origof":"\u22B6",
	  "oror":"\u2A56",
	  "orslope":"\u2A57",
	  "orv":"\u2A5B",
	  "oS":"\u24C8",
	  "Oscr":"\uD835\uDCAA",
	  "oscr":"\u2134",
	  "Oslash":"\u00D8",
	  "oslash":"\u00F8",
	  "osol":"\u2298",
	  "Otilde":"\u00D5",
	  "otilde":"\u00F5",
	  "Otimes":"\u2A37",
	  "otimes":"\u2297",
	  "otimesas":"\u2A36",
	  "Ouml":"\u00D6",
	  "ouml":"\u00F6",
	  "ovbar":"\u233D",
	  "OverBar":"\u203E",
	  "OverBrace":"\u23DE",
	  "OverBracket":"\u23B4",
	  "OverParenthesis":"\u23DC",
	  "par":"\u2225",
	  "para":"\u00B6",
	  "parallel":"\u2225",
	  "parsim":"\u2AF3",
	  "parsl":"\u2AFD",
	  "part":"\u2202",
	  "PartialD":"\u2202",
	  "Pcy":"\u041F",
	  "pcy":"\u043F",
	  "percnt":"\u0025",
	  "period":"\u002E",
	  "permil":"\u2030",
	  "perp":"\u22A5",
	  "pertenk":"\u2031",
	  "Pfr":"\uD835\uDD13",
	  "pfr":"\uD835\uDD2D",
	  "Phi":"\u03A6",
	  "phi":"\u03C6",
	  "phiv":"\u03D5",
	  "phmmat":"\u2133",
	  "phone":"\u260E",
	  "Pi":"\u03A0",
	  "pi":"\u03C0",
	  "pitchfork":"\u22D4",
	  "piv":"\u03D6",
	  "planck":"\u210F",
	  "planckh":"\u210E",
	  "plankv":"\u210F",
	  "plus":"\u002B",
	  "plusacir":"\u2A23",
	  "plusb":"\u229E",
	  "pluscir":"\u2A22",
	  "plusdo":"\u2214",
	  "plusdu":"\u2A25",
	  "pluse":"\u2A72",
	  "PlusMinus":"\u00B1",
	  "plusmn":"\u00B1",
	  "plussim":"\u2A26",
	  "plustwo":"\u2A27",
	  "pm":"\u00B1",
	  "Poincareplane":"\u210C",
	  "pointint":"\u2A15",
	  "Popf":"\u2119",
	  "popf":"\uD835\uDD61",
	  "pound":"\u00A3",
	  "Pr":"\u2ABB",
	  "pr":"\u227A",
	  "prap":"\u2AB7",
	  "prcue":"\u227C",
	  "prE":"\u2AB3",
	  "pre":"\u2AAF",
	  "prec":"\u227A",
	  "precapprox":"\u2AB7",
	  "preccurlyeq":"\u227C",
	  "Precedes":"\u227A",
	  "PrecedesEqual":"\u2AAF",
	  "PrecedesSlantEqual":"\u227C",
	  "PrecedesTilde":"\u227E",
	  "preceq":"\u2AAF",
	  "precnapprox":"\u2AB9",
	  "precneqq":"\u2AB5",
	  "precnsim":"\u22E8",
	  "precsim":"\u227E",
	  "Prime":"\u2033",
	  "prime":"\u2032",
	  "primes":"\u2119",
	  "prnap":"\u2AB9",
	  "prnE":"\u2AB5",
	  "prnsim":"\u22E8",
	  "prod":"\u220F",
	  "Product":"\u220F",
	  "profalar":"\u232E",
	  "profline":"\u2312",
	  "profsurf":"\u2313",
	  "prop":"\u221D",
	  "Proportion":"\u2237",
	  "Proportional":"\u221D",
	  "propto":"\u221D",
	  "prsim":"\u227E",
	  "prurel":"\u22B0",
	  "Pscr":"\uD835\uDCAB",
	  "pscr":"\uD835\uDCC5",
	  "Psi":"\u03A8",
	  "psi":"\u03C8",
	  "puncsp":"\u2008",
	  "Qfr":"\uD835\uDD14",
	  "qfr":"\uD835\uDD2E",
	  "qint":"\u2A0C",
	  "Qopf":"\u211A",
	  "qopf":"\uD835\uDD62",
	  "qprime":"\u2057",
	  "Qscr":"\uD835\uDCAC",
	  "qscr":"\uD835\uDCC6",
	  "quaternions":"\u210D",
	  "quatint":"\u2A16",
	  "quest":"\u003F",
	  "questeq":"\u225F",
	  "QUOT":"\u0022",
	  "quot":"\u0022",
	  "rAarr":"\u21DB",
	  "race":"\u223D\u0331",
	  "Racute":"\u0154",
	  "racute":"\u0155",
	  "radic":"\u221A",
	  "raemptyv":"\u29B3",
	  "Rang":"\u27EB",
	  "rang":"\u27E9",
	  "rangd":"\u2992",
	  "range":"\u29A5",
	  "rangle":"\u27E9",
	  "raquo":"\u00BB",
	  "Rarr":"\u21A0",
	  "rArr":"\u21D2",
	  "rarr":"\u2192",
	  "rarrap":"\u2975",
	  "rarrb":"\u21E5",
	  "rarrbfs":"\u2920",
	  "rarrc":"\u2933",
	  "rarrfs":"\u291E",
	  "rarrhk":"\u21AA",
	  "rarrlp":"\u21AC",
	  "rarrpl":"\u2945",
	  "rarrsim":"\u2974",
	  "Rarrtl":"\u2916",
	  "rarrtl":"\u21A3",
	  "rarrw":"\u219D",
	  "rAtail":"\u291C",
	  "ratail":"\u291A",
	  "ratio":"\u2236",
	  "rationals":"\u211A",
	  "RBarr":"\u2910",
	  "rBarr":"\u290F",
	  "rbarr":"\u290D",
	  "rbbrk":"\u2773",
	  "rbrace":"\u007D",
	  "rbrack":"\u005D",
	  "rbrke":"\u298C",
	  "rbrksld":"\u298E",
	  "rbrkslu":"\u2990",
	  "Rcaron":"\u0158",
	  "rcaron":"\u0159",
	  "Rcedil":"\u0156",
	  "rcedil":"\u0157",
	  "rceil":"\u2309",
	  "rcub":"\u007D",
	  "Rcy":"\u0420",
	  "rcy":"\u0440",
	  "rdca":"\u2937",
	  "rdldhar":"\u2969",
	  "rdquo":"\u201D",
	  "rdquor":"\u201D",
	  "rdsh":"\u21B3",
	  "Re":"\u211C",
	  "real":"\u211C",
	  "realine":"\u211B",
	  "realpart":"\u211C",
	  "reals":"\u211D",
	  "rect":"\u25AD",
	  "REG":"\u00AE",
	  "reg":"\u00AE",
	  "ReverseElement":"\u220B",
	  "ReverseEquilibrium":"\u21CB",
	  "ReverseUpEquilibrium":"\u296F",
	  "rfisht":"\u297D",
	  "rfloor":"\u230B",
	  "Rfr":"\u211C",
	  "rfr":"\uD835\uDD2F",
	  "rHar":"\u2964",
	  "rhard":"\u21C1",
	  "rharu":"\u21C0",
	  "rharul":"\u296C",
	  "Rho":"\u03A1",
	  "rho":"\u03C1",
	  "rhov":"\u03F1",
	  "RightAngleBracket":"\u27E9",
	  "RightArrow":"\u2192",
	  "Rightarrow":"\u21D2",
	  "rightarrow":"\u2192",
	  "RightArrowBar":"\u21E5",
	  "RightArrowLeftArrow":"\u21C4",
	  "rightarrowtail":"\u21A3",
	  "RightCeiling":"\u2309",
	  "RightDoubleBracket":"\u27E7",
	  "RightDownTeeVector":"\u295D",
	  "RightDownVector":"\u21C2",
	  "RightDownVectorBar":"\u2955",
	  "RightFloor":"\u230B",
	  "rightharpoondown":"\u21C1",
	  "rightharpoonup":"\u21C0",
	  "rightleftarrows":"\u21C4",
	  "rightleftharpoons":"\u21CC",
	  "rightrightarrows":"\u21C9",
	  "rightsquigarrow":"\u219D",
	  "RightTee":"\u22A2",
	  "RightTeeArrow":"\u21A6",
	  "RightTeeVector":"\u295B",
	  "rightthreetimes":"\u22CC",
	  "RightTriangle":"\u22B3",
	  "RightTriangleBar":"\u29D0",
	  "RightTriangleEqual":"\u22B5",
	  "RightUpDownVector":"\u294F",
	  "RightUpTeeVector":"\u295C",
	  "RightUpVector":"\u21BE",
	  "RightUpVectorBar":"\u2954",
	  "RightVector":"\u21C0",
	  "RightVectorBar":"\u2953",
	  "ring":"\u02DA",
	  "risingdotseq":"\u2253",
	  "rlarr":"\u21C4",
	  "rlhar":"\u21CC",
	  "rlm":"\u200F",
	  "rmoust":"\u23B1",
	  "rmoustache":"\u23B1",
	  "rnmid":"\u2AEE",
	  "roang":"\u27ED",
	  "roarr":"\u21FE",
	  "robrk":"\u27E7",
	  "ropar":"\u2986",
	  "Ropf":"\u211D",
	  "ropf":"\uD835\uDD63",
	  "roplus":"\u2A2E",
	  "rotimes":"\u2A35",
	  "RoundImplies":"\u2970",
	  "rpar":"\u0029",
	  "rpargt":"\u2994",
	  "rppolint":"\u2A12",
	  "rrarr":"\u21C9",
	  "Rrightarrow":"\u21DB",
	  "rsaquo":"\u203A",
	  "Rscr":"\u211B",
	  "rscr":"\uD835\uDCC7",
	  "Rsh":"\u21B1",
	  "rsh":"\u21B1",
	  "rsqb":"\u005D",
	  "rsquo":"\u2019",
	  "rsquor":"\u2019",
	  "rthree":"\u22CC",
	  "rtimes":"\u22CA",
	  "rtri":"\u25B9",
	  "rtrie":"\u22B5",
	  "rtrif":"\u25B8",
	  "rtriltri":"\u29CE",
	  "RuleDelayed":"\u29F4",
	  "ruluhar":"\u2968",
	  "rx":"\u211E",
	  "Sacute":"\u015A",
	  "sacute":"\u015B",
	  "sbquo":"\u201A",
	  "Sc":"\u2ABC",
	  "sc":"\u227B",
	  "scap":"\u2AB8",
	  "Scaron":"\u0160",
	  "scaron":"\u0161",
	  "sccue":"\u227D",
	  "scE":"\u2AB4",
	  "sce":"\u2AB0",
	  "Scedil":"\u015E",
	  "scedil":"\u015F",
	  "Scirc":"\u015C",
	  "scirc":"\u015D",
	  "scnap":"\u2ABA",
	  "scnE":"\u2AB6",
	  "scnsim":"\u22E9",
	  "scpolint":"\u2A13",
	  "scsim":"\u227F",
	  "Scy":"\u0421",
	  "scy":"\u0441",
	  "sdot":"\u22C5",
	  "sdotb":"\u22A1",
	  "sdote":"\u2A66",
	  "searhk":"\u2925",
	  "seArr":"\u21D8",
	  "searr":"\u2198",
	  "searrow":"\u2198",
	  "sect":"\u00A7",
	  "semi":"\u003B",
	  "seswar":"\u2929",
	  "setminus":"\u2216",
	  "setmn":"\u2216",
	  "sext":"\u2736",
	  "Sfr":"\uD835\uDD16",
	  "sfr":"\uD835\uDD30",
	  "sfrown":"\u2322",
	  "sharp":"\u266F",
	  "SHCHcy":"\u0429",
	  "shchcy":"\u0449",
	  "SHcy":"\u0428",
	  "shcy":"\u0448",
	  "ShortDownArrow":"\u2193",
	  "ShortLeftArrow":"\u2190",
	  "shortmid":"\u2223",
	  "shortparallel":"\u2225",
	  "ShortRightArrow":"\u2192",
	  "ShortUpArrow":"\u2191",
	  "shy":"\u00AD",
	  "Sigma":"\u03A3",
	  "sigma":"\u03C3",
	  "sigmaf":"\u03C2",
	  "sigmav":"\u03C2",
	  "sim":"\u223C",
	  "simdot":"\u2A6A",
	  "sime":"\u2243",
	  "simeq":"\u2243",
	  "simg":"\u2A9E",
	  "simgE":"\u2AA0",
	  "siml":"\u2A9D",
	  "simlE":"\u2A9F",
	  "simne":"\u2246",
	  "simplus":"\u2A24",
	  "simrarr":"\u2972",
	  "slarr":"\u2190",
	  "SmallCircle":"\u2218",
	  "smallsetminus":"\u2216",
	  "smashp":"\u2A33",
	  "smeparsl":"\u29E4",
	  "smid":"\u2223",
	  "smile":"\u2323",
	  "smt":"\u2AAA",
	  "smte":"\u2AAC",
	  "smtes":"\u2AAC\uFE00",
	  "SOFTcy":"\u042C",
	  "softcy":"\u044C",
	  "sol":"\u002F",
	  "solb":"\u29C4",
	  "solbar":"\u233F",
	  "Sopf":"\uD835\uDD4A",
	  "sopf":"\uD835\uDD64",
	  "spades":"\u2660",
	  "spadesuit":"\u2660",
	  "spar":"\u2225",
	  "sqcap":"\u2293",
	  "sqcaps":"\u2293\uFE00",
	  "sqcup":"\u2294",
	  "sqcups":"\u2294\uFE00",
	  "Sqrt":"\u221A",
	  "sqsub":"\u228F",
	  "sqsube":"\u2291",
	  "sqsubset":"\u228F",
	  "sqsubseteq":"\u2291",
	  "sqsup":"\u2290",
	  "sqsupe":"\u2292",
	  "sqsupset":"\u2290",
	  "sqsupseteq":"\u2292",
	  "squ":"\u25A1",
	  "Square":"\u25A1",
	  "square":"\u25A1",
	  "SquareIntersection":"\u2293",
	  "SquareSubset":"\u228F",
	  "SquareSubsetEqual":"\u2291",
	  "SquareSuperset":"\u2290",
	  "SquareSupersetEqual":"\u2292",
	  "SquareUnion":"\u2294",
	  "squarf":"\u25AA",
	  "squf":"\u25AA",
	  "srarr":"\u2192",
	  "Sscr":"\uD835\uDCAE",
	  "sscr":"\uD835\uDCC8",
	  "ssetmn":"\u2216",
	  "ssmile":"\u2323",
	  "sstarf":"\u22C6",
	  "Star":"\u22C6",
	  "star":"\u2606",
	  "starf":"\u2605",
	  "straightepsilon":"\u03F5",
	  "straightphi":"\u03D5",
	  "strns":"\u00AF",
	  "Sub":"\u22D0",
	  "sub":"\u2282",
	  "subdot":"\u2ABD",
	  "subE":"\u2AC5",
	  "sube":"\u2286",
	  "subedot":"\u2AC3",
	  "submult":"\u2AC1",
	  "subnE":"\u2ACB",
	  "subne":"\u228A",
	  "subplus":"\u2ABF",
	  "subrarr":"\u2979",
	  "Subset":"\u22D0",
	  "subset":"\u2282",
	  "subseteq":"\u2286",
	  "subseteqq":"\u2AC5",
	  "SubsetEqual":"\u2286",
	  "subsetneq":"\u228A",
	  "subsetneqq":"\u2ACB",
	  "subsim":"\u2AC7",
	  "subsub":"\u2AD5",
	  "subsup":"\u2AD3",
	  "succ":"\u227B",
	  "succapprox":"\u2AB8",
	  "succcurlyeq":"\u227D",
	  "Succeeds":"\u227B",
	  "SucceedsEqual":"\u2AB0",
	  "SucceedsSlantEqual":"\u227D",
	  "SucceedsTilde":"\u227F",
	  "succeq":"\u2AB0",
	  "succnapprox":"\u2ABA",
	  "succneqq":"\u2AB6",
	  "succnsim":"\u22E9",
	  "succsim":"\u227F",
	  "SuchThat":"\u220B",
	  "Sum":"\u2211",
	  "sum":"\u2211",
	  "sung":"\u266A",
	  "Sup":"\u22D1",
	  "sup":"\u2283",
	  "sup1":"\u00B9",
	  "sup2":"\u00B2",
	  "sup3":"\u00B3",
	  "supdot":"\u2ABE",
	  "supdsub":"\u2AD8",
	  "supE":"\u2AC6",
	  "supe":"\u2287",
	  "supedot":"\u2AC4",
	  "Superset":"\u2283",
	  "SupersetEqual":"\u2287",
	  "suphsol":"\u27C9",
	  "suphsub":"\u2AD7",
	  "suplarr":"\u297B",
	  "supmult":"\u2AC2",
	  "supnE":"\u2ACC",
	  "supne":"\u228B",
	  "supplus":"\u2AC0",
	  "Supset":"\u22D1",
	  "supset":"\u2283",
	  "supseteq":"\u2287",
	  "supseteqq":"\u2AC6",
	  "supsetneq":"\u228B",
	  "supsetneqq":"\u2ACC",
	  "supsim":"\u2AC8",
	  "supsub":"\u2AD4",
	  "supsup":"\u2AD6",
	  "swarhk":"\u2926",
	  "swArr":"\u21D9",
	  "swarr":"\u2199",
	  "swarrow":"\u2199",
	  "swnwar":"\u292A",
	  "szlig":"\u00DF",
	  "Tab":"\u0009",
	  "target":"\u2316",
	  "Tau":"\u03A4",
	  "tau":"\u03C4",
	  "tbrk":"\u23B4",
	  "Tcaron":"\u0164",
	  "tcaron":"\u0165",
	  "Tcedil":"\u0162",
	  "tcedil":"\u0163",
	  "Tcy":"\u0422",
	  "tcy":"\u0442",
	  "tdot":"\u20DB",
	  "telrec":"\u2315",
	  "Tfr":"\uD835\uDD17",
	  "tfr":"\uD835\uDD31",
	  "there4":"\u2234",
	  "Therefore":"\u2234",
	  "therefore":"\u2234",
	  "Theta":"\u0398",
	  "theta":"\u03B8",
	  "thetasym":"\u03D1",
	  "thetav":"\u03D1",
	  "thickapprox":"\u2248",
	  "thicksim":"\u223C",
	  "ThickSpace":"\u205F\u200A",
	  "thinsp":"\u2009",
	  "ThinSpace":"\u2009",
	  "thkap":"\u2248",
	  "thksim":"\u223C",
	  "THORN":"\u00DE",
	  "thorn":"\u00FE",
	  "Tilde":"\u223C",
	  "tilde":"\u02DC",
	  "TildeEqual":"\u2243",
	  "TildeFullEqual":"\u2245",
	  "TildeTilde":"\u2248",
	  "times":"\u00D7",
	  "timesb":"\u22A0",
	  "timesbar":"\u2A31",
	  "timesd":"\u2A30",
	  "tint":"\u222D",
	  "toea":"\u2928",
	  "top":"\u22A4",
	  "topbot":"\u2336",
	  "topcir":"\u2AF1",
	  "Topf":"\uD835\uDD4B",
	  "topf":"\uD835\uDD65",
	  "topfork":"\u2ADA",
	  "tosa":"\u2929",
	  "tprime":"\u2034",
	  "TRADE":"\u2122",
	  "trade":"\u2122",
	  "triangle":"\u25B5",
	  "triangledown":"\u25BF",
	  "triangleleft":"\u25C3",
	  "trianglelefteq":"\u22B4",
	  "triangleq":"\u225C",
	  "triangleright":"\u25B9",
	  "trianglerighteq":"\u22B5",
	  "tridot":"\u25EC",
	  "trie":"\u225C",
	  "triminus":"\u2A3A",
	  "TripleDot":"\u20DB",
	  "triplus":"\u2A39",
	  "trisb":"\u29CD",
	  "tritime":"\u2A3B",
	  "trpezium":"\u23E2",
	  "Tscr":"\uD835\uDCAF",
	  "tscr":"\uD835\uDCC9",
	  "TScy":"\u0426",
	  "tscy":"\u0446",
	  "TSHcy":"\u040B",
	  "tshcy":"\u045B",
	  "Tstrok":"\u0166",
	  "tstrok":"\u0167",
	  "twixt":"\u226C",
	  "twoheadleftarrow":"\u219E",
	  "twoheadrightarrow":"\u21A0",
	  "Uacute":"\u00DA",
	  "uacute":"\u00FA",
	  "Uarr":"\u219F",
	  "uArr":"\u21D1",
	  "uarr":"\u2191",
	  "Uarrocir":"\u2949",
	  "Ubrcy":"\u040E",
	  "ubrcy":"\u045E",
	  "Ubreve":"\u016C",
	  "ubreve":"\u016D",
	  "Ucirc":"\u00DB",
	  "ucirc":"\u00FB",
	  "Ucy":"\u0423",
	  "ucy":"\u0443",
	  "udarr":"\u21C5",
	  "Udblac":"\u0170",
	  "udblac":"\u0171",
	  "udhar":"\u296E",
	  "ufisht":"\u297E",
	  "Ufr":"\uD835\uDD18",
	  "ufr":"\uD835\uDD32",
	  "Ugrave":"\u00D9",
	  "ugrave":"\u00F9",
	  "uHar":"\u2963",
	  "uharl":"\u21BF",
	  "uharr":"\u21BE",
	  "uhblk":"\u2580",
	  "ulcorn":"\u231C",
	  "ulcorner":"\u231C",
	  "ulcrop":"\u230F",
	  "ultri":"\u25F8",
	  "Umacr":"\u016A",
	  "umacr":"\u016B",
	  "uml":"\u00A8",
	  "UnderBar":"\u005F",
	  "UnderBrace":"\u23DF",
	  "UnderBracket":"\u23B5",
	  "UnderParenthesis":"\u23DD",
	  "Union":"\u22C3",
	  "UnionPlus":"\u228E",
	  "Uogon":"\u0172",
	  "uogon":"\u0173",
	  "Uopf":"\uD835\uDD4C",
	  "uopf":"\uD835\uDD66",
	  "UpArrow":"\u2191",
	  "Uparrow":"\u21D1",
	  "uparrow":"\u2191",
	  "UpArrowBar":"\u2912",
	  "UpArrowDownArrow":"\u21C5",
	  "UpDownArrow":"\u2195",
	  "Updownarrow":"\u21D5",
	  "updownarrow":"\u2195",
	  "UpEquilibrium":"\u296E",
	  "upharpoonleft":"\u21BF",
	  "upharpoonright":"\u21BE",
	  "uplus":"\u228E",
	  "UpperLeftArrow":"\u2196",
	  "UpperRightArrow":"\u2197",
	  "Upsi":"\u03D2",
	  "upsi":"\u03C5",
	  "upsih":"\u03D2",
	  "Upsilon":"\u03A5",
	  "upsilon":"\u03C5",
	  "UpTee":"\u22A5",
	  "UpTeeArrow":"\u21A5",
	  "upuparrows":"\u21C8",
	  "urcorn":"\u231D",
	  "urcorner":"\u231D",
	  "urcrop":"\u230E",
	  "Uring":"\u016E",
	  "uring":"\u016F",
	  "urtri":"\u25F9",
	  "Uscr":"\uD835\uDCB0",
	  "uscr":"\uD835\uDCCA",
	  "utdot":"\u22F0",
	  "Utilde":"\u0168",
	  "utilde":"\u0169",
	  "utri":"\u25B5",
	  "utrif":"\u25B4",
	  "uuarr":"\u21C8",
	  "Uuml":"\u00DC",
	  "uuml":"\u00FC",
	  "uwangle":"\u29A7",
	  "vangrt":"\u299C",
	  "varepsilon":"\u03F5",
	  "varkappa":"\u03F0",
	  "varnothing":"\u2205",
	  "varphi":"\u03D5",
	  "varpi":"\u03D6",
	  "varpropto":"\u221D",
	  "vArr":"\u21D5",
	  "varr":"\u2195",
	  "varrho":"\u03F1",
	  "varsigma":"\u03C2",
	  "varsubsetneq":"\u228A\uFE00",
	  "varsubsetneqq":"\u2ACB\uFE00",
	  "varsupsetneq":"\u228B\uFE00",
	  "varsupsetneqq":"\u2ACC\uFE00",
	  "vartheta":"\u03D1",
	  "vartriangleleft":"\u22B2",
	  "vartriangleright":"\u22B3",
	  "Vbar":"\u2AEB",
	  "vBar":"\u2AE8",
	  "vBarv":"\u2AE9",
	  "Vcy":"\u0412",
	  "vcy":"\u0432",
	  "VDash":"\u22AB",
	  "Vdash":"\u22A9",
	  "vDash":"\u22A8",
	  "vdash":"\u22A2",
	  "Vdashl":"\u2AE6",
	  "Vee":"\u22C1",
	  "vee":"\u2228",
	  "veebar":"\u22BB",
	  "veeeq":"\u225A",
	  "vellip":"\u22EE",
	  "Verbar":"\u2016",
	  "verbar":"\u007C",
	  "Vert":"\u2016",
	  "vert":"\u007C",
	  "VerticalBar":"\u2223",
	  "VerticalLine":"\u007C",
	  "VerticalSeparator":"\u2758",
	  "VerticalTilde":"\u2240",
	  "VeryThinSpace":"\u200A",
	  "Vfr":"\uD835\uDD19",
	  "vfr":"\uD835\uDD33",
	  "vltri":"\u22B2",
	  "vnsub":"\u2282\u20D2",
	  "vnsup":"\u2283\u20D2",
	  "Vopf":"\uD835\uDD4D",
	  "vopf":"\uD835\uDD67",
	  "vprop":"\u221D",
	  "vrtri":"\u22B3",
	  "Vscr":"\uD835\uDCB1",
	  "vscr":"\uD835\uDCCB",
	  "vsubnE":"\u2ACB\uFE00",
	  "vsubne":"\u228A\uFE00",
	  "vsupnE":"\u2ACC\uFE00",
	  "vsupne":"\u228B\uFE00",
	  "Vvdash":"\u22AA",
	  "vzigzag":"\u299A",
	  "Wcirc":"\u0174",
	  "wcirc":"\u0175",
	  "wedbar":"\u2A5F",
	  "Wedge":"\u22C0",
	  "wedge":"\u2227",
	  "wedgeq":"\u2259",
	  "weierp":"\u2118",
	  "Wfr":"\uD835\uDD1A",
	  "wfr":"\uD835\uDD34",
	  "Wopf":"\uD835\uDD4E",
	  "wopf":"\uD835\uDD68",
	  "wp":"\u2118",
	  "wr":"\u2240",
	  "wreath":"\u2240",
	  "Wscr":"\uD835\uDCB2",
	  "wscr":"\uD835\uDCCC",
	  "xcap":"\u22C2",
	  "xcirc":"\u25EF",
	  "xcup":"\u22C3",
	  "xdtri":"\u25BD",
	  "Xfr":"\uD835\uDD1B",
	  "xfr":"\uD835\uDD35",
	  "xhArr":"\u27FA",
	  "xharr":"\u27F7",
	  "Xi":"\u039E",
	  "xi":"\u03BE",
	  "xlArr":"\u27F8",
	  "xlarr":"\u27F5",
	  "xmap":"\u27FC",
	  "xnis":"\u22FB",
	  "xodot":"\u2A00",
	  "Xopf":"\uD835\uDD4F",
	  "xopf":"\uD835\uDD69",
	  "xoplus":"\u2A01",
	  "xotime":"\u2A02",
	  "xrArr":"\u27F9",
	  "xrarr":"\u27F6",
	  "Xscr":"\uD835\uDCB3",
	  "xscr":"\uD835\uDCCD",
	  "xsqcup":"\u2A06",
	  "xuplus":"\u2A04",
	  "xutri":"\u25B3",
	  "xvee":"\u22C1",
	  "xwedge":"\u22C0",
	  "Yacute":"\u00DD",
	  "yacute":"\u00FD",
	  "YAcy":"\u042F",
	  "yacy":"\u044F",
	  "Ycirc":"\u0176",
	  "ycirc":"\u0177",
	  "Ycy":"\u042B",
	  "ycy":"\u044B",
	  "yen":"\u00A5",
	  "Yfr":"\uD835\uDD1C",
	  "yfr":"\uD835\uDD36",
	  "YIcy":"\u0407",
	  "yicy":"\u0457",
	  "Yopf":"\uD835\uDD50",
	  "yopf":"\uD835\uDD6A",
	  "Yscr":"\uD835\uDCB4",
	  "yscr":"\uD835\uDCCE",
	  "YUcy":"\u042E",
	  "yucy":"\u044E",
	  "Yuml":"\u0178",
	  "yuml":"\u00FF",
	  "Zacute":"\u0179",
	  "zacute":"\u017A",
	  "Zcaron":"\u017D",
	  "zcaron":"\u017E",
	  "Zcy":"\u0417",
	  "zcy":"\u0437",
	  "Zdot":"\u017B",
	  "zdot":"\u017C",
	  "zeetrf":"\u2128",
	  "ZeroWidthSpace":"\u200B",
	  "Zeta":"\u0396",
	  "zeta":"\u03B6",
	  "Zfr":"\u2128",
	  "zfr":"\uD835\uDD37",
	  "ZHcy":"\u0416",
	  "zhcy":"\u0436",
	  "zigrarr":"\u21DD",
	  "Zopf":"\u2124",
	  "zopf":"\uD835\uDD6B",
	  "Zscr":"\uD835\uDCB5",
	  "zscr":"\uD835\uDCCF",
	  "zwj":"\u200D",
	  "zwnj":"\u200C"
	};

	var hasOwn$1 = Object.prototype.hasOwnProperty;

	function has$1(object, key) {
	  return object
	    ? hasOwn$1.call(object, key)
	    : false;
	}

	function decodeEntity(name) {
	  if (has$1(entities, name)) {
	    return entities[name]
	  } else {
	    return name;
	  }
	}

	var hasOwn$1$1 = Object.prototype.hasOwnProperty;

	function has$1$1(object, key) {
	  return object
	    ? hasOwn$1$1.call(object, key)
	    : false;
	}

	// Extend objects
	//
	function assign(obj /*from1, from2, from3, ...*/) {
	  var sources = [].slice.call(arguments, 1);

	  sources.forEach(function (source) {
	    if (!source) { return; }

	    if (typeof source !== 'object') {
	      throw new TypeError(source + 'must be object');
	    }

	    Object.keys(source).forEach(function (key) {
	      obj[key] = source[key];
	    });
	  });

	  return obj;
	}

	////////////////////////////////////////////////////////////////////////////////

	var UNESCAPE_MD_RE = /\\([\\!"#$%&'()*+,.\/:;<=>?@[\]^_`{|}~-])/g;

	function unescapeMd(str) {
	  if (str.indexOf('\\') < 0) { return str; }
	  return str.replace(UNESCAPE_MD_RE, '$1');
	}

	////////////////////////////////////////////////////////////////////////////////

	function isValidEntityCode(c) {
	  /*eslint no-bitwise:0*/
	  // broken sequence
	  if (c >= 0xD800 && c <= 0xDFFF) { return false; }
	  // never used
	  if (c >= 0xFDD0 && c <= 0xFDEF) { return false; }
	  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) { return false; }
	  // control codes
	  if (c >= 0x00 && c <= 0x08) { return false; }
	  if (c === 0x0B) { return false; }
	  if (c >= 0x0E && c <= 0x1F) { return false; }
	  if (c >= 0x7F && c <= 0x9F) { return false; }
	  // out of range
	  if (c > 0x10FFFF) { return false; }
	  return true;
	}

	function fromCodePoint$1(c) {
	  /*eslint no-bitwise:0*/
	  if (c > 0xffff) {
	    c -= 0x10000;
	    var surrogate1 = 0xd800 + (c >> 10),
	        surrogate2 = 0xdc00 + (c & 0x3ff);

	    return String.fromCharCode(surrogate1, surrogate2);
	  }
	  return String.fromCharCode(c);
	}

	var NAMED_ENTITY_RE   = /&([a-z#][a-z0-9]{1,31});/gi;
	var DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;

	function replaceEntityPattern(match, name) {
	  var code = 0;
	  var decoded = decodeEntity(name);

	  if (name !== decoded) {
	    return decoded;
	  } else if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {
	    code = name[1].toLowerCase() === 'x' ?
	      parseInt(name.slice(2), 16)
	    :
	      parseInt(name.slice(1), 10);
	    if (isValidEntityCode(code)) {
	      return fromCodePoint$1(code);
	    }
	  }
	  return match;
	}

	function replaceEntities(str) {
	  if (str.indexOf('&') < 0) { return str; }

	  return str.replace(NAMED_ENTITY_RE, replaceEntityPattern);
	}

	////////////////////////////////////////////////////////////////////////////////

	var HTML_ESCAPE_TEST_RE = /[&<>"]/;
	var HTML_ESCAPE_REPLACE_RE = /[&<>"]/g;
	var HTML_REPLACEMENTS = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;'
	};

	function replaceUnsafeChar(ch) {
	  return HTML_REPLACEMENTS[ch];
	}

	function escapeHtml(str) {
	  if (HTML_ESCAPE_TEST_RE.test(str)) {
	    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);
	  }
	  return str;
	}

	/**
	 * Renderer rules cache
	 */

	var rules = {};

	/**
	 * Blockquotes
	 */

	rules.blockquote_open = function(/* tokens, idx, options, env */) {
	  return '<blockquote>\n';
	};

	rules.blockquote_close = function(tokens, idx /*, options, env */) {
	  return '</blockquote>' + getBreak(tokens, idx);
	};

	/**
	 * Code
	 */

	rules.code = function(tokens, idx /*, options, env */) {
	  if (tokens[idx].block) {
	    return '<pre><code>' + escapeHtml(tokens[idx].content) + '</code></pre>' + getBreak(tokens, idx);
	  }
	  return '<code>' + escapeHtml(tokens[idx].content) + '</code>';
	};

	/**
	 * Fenced code blocks
	 */

	rules.fence = function(tokens, idx, options, env, instance) {
	  var token = tokens[idx];
	  var langClass = '';
	  var langPrefix = options.langPrefix;
	  var langName = '', fences, fenceName;
	  var highlighted;

	  if (token.params) {

	    //
	    // ```foo bar
	    //
	    // Try custom renderer "foo" first. That will simplify overwrite
	    // for diagrams, latex, and any other fenced block with custom look
	    //

	    fences = token.params.split(/\s+/g);
	    fenceName = fences.join(' ');

	    if (has$1$1(instance.rules.fence_custom, fences[0])) {
	      return instance.rules.fence_custom[fences[0]](tokens, idx, options, env, instance);
	    }

	    langName = escapeHtml(replaceEntities(unescapeMd(fenceName)));
	    langClass = ' class="' + langPrefix + langName + '"';
	  }

	  if (options.highlight) {
	    highlighted = options.highlight.apply(options.highlight, [ token.content ].concat(fences))
	      || escapeHtml(token.content);
	  } else {
	    highlighted = escapeHtml(token.content);
	  }

	  return '<pre><code' + langClass + '>'
	        + highlighted
	        + '</code></pre>'
	        + getBreak(tokens, idx);
	};

	rules.fence_custom = {};

	/**
	 * Headings
	 */

	rules.heading_open = function(tokens, idx /*, options, env */) {
	  return '<h' + tokens[idx].hLevel + '>';
	};
	rules.heading_close = function(tokens, idx /*, options, env */) {
	  return '</h' + tokens[idx].hLevel + '>\n';
	};

	/**
	 * Horizontal rules
	 */

	rules.hr = function(tokens, idx, options /*, env */) {
	  return (options.xhtmlOut ? '<hr />' : '<hr>') + getBreak(tokens, idx);
	};

	/**
	 * Bullets
	 */

	rules.bullet_list_open = function(/* tokens, idx, options, env */) {
	  return '<ul>\n';
	};
	rules.bullet_list_close = function(tokens, idx /*, options, env */) {
	  return '</ul>' + getBreak(tokens, idx);
	};

	/**
	 * List items
	 */

	rules.list_item_open = function(/* tokens, idx, options, env */) {
	  return '<li>';
	};
	rules.list_item_close = function(/* tokens, idx, options, env */) {
	  return '</li>\n';
	};

	/**
	 * Ordered list items
	 */

	rules.ordered_list_open = function(tokens, idx /*, options, env */) {
	  var token = tokens[idx];
	  var order = token.order > 1 ? ' start="' + token.order + '"' : '';
	  return '<ol' + order + '>\n';
	};
	rules.ordered_list_close = function(tokens, idx /*, options, env */) {
	  return '</ol>' + getBreak(tokens, idx);
	};

	/**
	 * Paragraphs
	 */

	rules.paragraph_open = function(tokens, idx /*, options, env */) {
	  return tokens[idx].tight ? '' : '<p>';
	};
	rules.paragraph_close = function(tokens, idx /*, options, env */) {
	  var addBreak = !(tokens[idx].tight && idx && tokens[idx - 1].type === 'inline' && !tokens[idx - 1].content);
	  return (tokens[idx].tight ? '' : '</p>') + (addBreak ? getBreak(tokens, idx) : '');
	};

	/**
	 * Links
	 */

	rules.link_open = function(tokens, idx, options /* env */) {
	  var title = tokens[idx].title ? (' title="' + escapeHtml(replaceEntities(tokens[idx].title)) + '"') : '';
	  var target = options.linkTarget ? (' target="' + options.linkTarget + '"') : '';
	  return '<a href="' + escapeHtml(tokens[idx].href) + '"' + title + target + '>';
	};
	rules.link_close = function(/* tokens, idx, options, env */) {
	  return '</a>';
	};

	/**
	 * Images
	 */

	rules.image = function(tokens, idx, options /*, env */) {
	  var src = ' src="' + escapeHtml(tokens[idx].src) + '"';
	  var title = tokens[idx].title ? (' title="' + escapeHtml(replaceEntities(tokens[idx].title)) + '"') : '';
	  var alt = ' alt="' + (tokens[idx].alt ? escapeHtml(replaceEntities(unescapeMd(tokens[idx].alt))) : '') + '"';
	  var suffix = options.xhtmlOut ? ' /' : '';
	  return '<img' + src + alt + title + suffix + '>';
	};

	/**
	 * Tables
	 */

	rules.table_open = function(/* tokens, idx, options, env */) {
	  return '<table>\n';
	};
	rules.table_close = function(/* tokens, idx, options, env */) {
	  return '</table>\n';
	};
	rules.thead_open = function(/* tokens, idx, options, env */) {
	  return '<thead>\n';
	};
	rules.thead_close = function(/* tokens, idx, options, env */) {
	  return '</thead>\n';
	};
	rules.tbody_open = function(/* tokens, idx, options, env */) {
	  return '<tbody>\n';
	};
	rules.tbody_close = function(/* tokens, idx, options, env */) {
	  return '</tbody>\n';
	};
	rules.tr_open = function(/* tokens, idx, options, env */) {
	  return '<tr>';
	};
	rules.tr_close = function(/* tokens, idx, options, env */) {
	  return '</tr>\n';
	};
	rules.th_open = function(tokens, idx /*, options, env */) {
	  var token = tokens[idx];
	  return '<th'
	    + (token.align ? ' style="text-align:' + token.align + '"' : '')
	    + '>';
	};
	rules.th_close = function(/* tokens, idx, options, env */) {
	  return '</th>';
	};
	rules.td_open = function(tokens, idx /*, options, env */) {
	  var token = tokens[idx];
	  return '<td'
	    + (token.align ? ' style="text-align:' + token.align + '"' : '')
	    + '>';
	};
	rules.td_close = function(/* tokens, idx, options, env */) {
	  return '</td>';
	};

	/**
	 * Bold
	 */

	rules.strong_open = function(/* tokens, idx, options, env */) {
	  return '<strong>';
	};
	rules.strong_close = function(/* tokens, idx, options, env */) {
	  return '</strong>';
	};

	/**
	 * Italicize
	 */

	rules.em_open = function(/* tokens, idx, options, env */) {
	  return '<em>';
	};
	rules.em_close = function(/* tokens, idx, options, env */) {
	  return '</em>';
	};

	/**
	 * Strikethrough
	 */

	rules.del_open = function(/* tokens, idx, options, env */) {
	  return '<del>';
	};
	rules.del_close = function(/* tokens, idx, options, env */) {
	  return '</del>';
	};

	/**
	 * Insert
	 */

	rules.ins_open = function(/* tokens, idx, options, env */) {
	  return '<ins>';
	};
	rules.ins_close = function(/* tokens, idx, options, env */) {
	  return '</ins>';
	};

	/**
	 * Highlight
	 */

	rules.mark_open = function(/* tokens, idx, options, env */) {
	  return '<mark>';
	};
	rules.mark_close = function(/* tokens, idx, options, env */) {
	  return '</mark>';
	};

	/**
	 * Super- and sub-script
	 */

	rules.sub = function(tokens, idx /*, options, env */) {
	  return '<sub>' + escapeHtml(tokens[idx].content) + '</sub>';
	};
	rules.sup = function(tokens, idx /*, options, env */) {
	  return '<sup>' + escapeHtml(tokens[idx].content) + '</sup>';
	};

	/**
	 * Breaks
	 */

	rules.hardbreak = function(tokens, idx, options /*, env */) {
	  return options.xhtmlOut ? '<br />\n' : '<br>\n';
	};
	rules.softbreak = function(tokens, idx, options /*, env */) {
	  return options.breaks ? (options.xhtmlOut ? '<br />\n' : '<br>\n') : '\n';
	};

	/**
	 * Text
	 */

	rules.text = function(tokens, idx /*, options, env */) {
	  return escapeHtml(tokens[idx].content);
	};

	/**
	 * Content
	 */

	rules.htmlblock = function(tokens, idx /*, options, env */) {
	  return tokens[idx].content;
	};
	rules.htmltag = function(tokens, idx /*, options, env */) {
	  return tokens[idx].content;
	};

	/**
	 * Abbreviations, initialism
	 */

	rules.abbr_open = function(tokens, idx /*, options, env */) {
	  return '<abbr title="' + escapeHtml(replaceEntities(tokens[idx].title)) + '">';
	};
	rules.abbr_close = function(/* tokens, idx, options, env */) {
	  return '</abbr>';
	};

	/**
	 * Footnotes
	 */

	rules.footnote_ref = function(tokens, idx) {
	  var n = Number(tokens[idx].id + 1).toString();
	  var id = 'fnref' + n;
	  if (tokens[idx].subId > 0) {
	    id += ':' + tokens[idx].subId;
	  }
	  return '<sup class="footnote-ref"><a href="#fn' + n + '" id="' + id + '">[' + n + ']</a></sup>';
	};
	rules.footnote_block_open = function(tokens, idx, options) {
	  var hr = options.xhtmlOut
	    ? '<hr class="footnotes-sep" />\n'
	    : '<hr class="footnotes-sep">\n';
	  return hr + '<section class="footnotes">\n<ol class="footnotes-list">\n';
	};
	rules.footnote_block_close = function() {
	  return '</ol>\n</section>\n';
	};
	rules.footnote_open = function(tokens, idx) {
	  var id = Number(tokens[idx].id + 1).toString();
	  return '<li id="fn' + id + '"  class="footnote-item">';
	};
	rules.footnote_close = function() {
	  return '</li>\n';
	};
	rules.footnote_anchor = function(tokens, idx) {
	  var n = Number(tokens[idx].id + 1).toString();
	  var id = 'fnref' + n;
	  if (tokens[idx].subId > 0) {
	    id += ':' + tokens[idx].subId;
	  }
	  return ' <a href="#' + id + '" class="footnote-backref">↩</a>';
	};

	/**
	 * Definition lists
	 */

	rules.dl_open = function() {
	  return '<dl>\n';
	};
	rules.dt_open = function() {
	  return '<dt>';
	};
	rules.dd_open = function() {
	  return '<dd>';
	};
	rules.dl_close = function() {
	  return '</dl>\n';
	};
	rules.dt_close = function() {
	  return '</dt>\n';
	};
	rules.dd_close = function() {
	  return '</dd>\n';
	};

	/**
	 * Helper functions
	 */

	function nextToken(tokens, idx) {
	  if (++idx >= tokens.length - 2) {
	    return idx;
	  }
	  if ((tokens[idx].type === 'paragraph_open' && tokens[idx].tight) &&
	      (tokens[idx + 1].type === 'inline' && tokens[idx + 1].content.length === 0) &&
	      (tokens[idx + 2].type === 'paragraph_close' && tokens[idx + 2].tight)) {
	    return nextToken(tokens, idx + 2);
	  }
	  return idx;
	}

	/**
	 * Check to see if `\n` is needed before the next token.
	 *
	 * @param  {Array} `tokens`
	 * @param  {Number} `idx`
	 * @return {String} Empty string or newline
	 * @api private
	 */

	var getBreak = rules.getBreak = function getBreak(tokens, idx) {
	  idx = nextToken(tokens, idx);
	  if (idx < tokens.length && tokens[idx].type === 'list_item_close') {
	    return '';
	  }
	  return '\n';
	};

	/**
	 * Renderer class. Renders HTML and exposes `rules` to allow
	 * local modifications.
	 */

	function Renderer() {
	  this.rules = assign({}, rules);

	  // exported helper, for custom rules only
	  this.getBreak = rules.getBreak;
	}

	/**
	 * Render a string of inline HTML with the given `tokens` and
	 * `options`.
	 *
	 * @param  {Array} `tokens`
	 * @param  {Object} `options`
	 * @param  {Object} `env`
	 * @return {String}
	 * @api public
	 */

	Renderer.prototype.renderInline = function (tokens, options, env) {
	  var _rules = this.rules;
	  var len = tokens.length, i = 0;
	  var result = '';

	  while (len--) {
	    result += _rules[tokens[i].type](tokens, i++, options, env, this);
	  }

	  return result;
	};

	/**
	 * Render a string of HTML with the given `tokens` and
	 * `options`.
	 *
	 * @param  {Array} `tokens`
	 * @param  {Object} `options`
	 * @param  {Object} `env`
	 * @return {String}
	 * @api public
	 */

	Renderer.prototype.render = function (tokens, options, env) {
	  var _rules = this.rules;
	  var len = tokens.length, i = -1;
	  var result = '';

	  while (++i < len) {
	    if (tokens[i].type === 'inline') {
	      result += this.renderInline(tokens[i].children, options, env);
	    } else {
	      result += _rules[tokens[i].type](tokens, i, options, env, this);
	    }
	  }
	  return result;
	};

	/**
	 * Ruler is a helper class for building responsibility chains from
	 * parse rules. It allows:
	 *
	 *   - easy stack rules chains
	 *   - getting main chain and named chains content (as arrays of functions)
	 *
	 * Helper methods, should not be used directly.
	 * @api private
	 */

	function Ruler() {
	  // List of added rules. Each element is:
	  //
	  // { name: XXX,
	  //   enabled: Boolean,
	  //   fn: Function(),
	  //   alt: [ name2, name3 ] }
	  //
	  this.__rules__ = [];

	  // Cached rule chains.
	  //
	  // First level - chain name, '' for default.
	  // Second level - digital anchor for fast filtering by charcodes.
	  //
	  this.__cache__ = null;
	}

	/**
	 * Find the index of a rule by `name`.
	 *
	 * @param  {String} `name`
	 * @return {Number} Index of the given `name`
	 * @api private
	 */

	Ruler.prototype.__find__ = function (name) {
	  var len = this.__rules__.length;
	  var i = -1;

	  while (len--) {
	    if (this.__rules__[++i].name === name) {
	      return i;
	    }
	  }
	  return -1;
	};

	/**
	 * Build the rules lookup cache
	 *
	 * @api private
	 */

	Ruler.prototype.__compile__ = function () {
	  var self = this;
	  var chains = [ '' ];

	  // collect unique names
	  self.__rules__.forEach(function (rule) {
	    if (!rule.enabled) {
	      return;
	    }

	    rule.alt.forEach(function (altName) {
	      if (chains.indexOf(altName) < 0) {
	        chains.push(altName);
	      }
	    });
	  });

	  self.__cache__ = {};

	  chains.forEach(function (chain) {
	    self.__cache__[chain] = [];
	    self.__rules__.forEach(function (rule) {
	      if (!rule.enabled) {
	        return;
	      }

	      if (chain && rule.alt.indexOf(chain) < 0) {
	        return;
	      }
	      self.__cache__[chain].push(rule.fn);
	    });
	  });
	};

	/**
	 * Ruler public methods
	 * ------------------------------------------------
	 */

	/**
	 * Replace rule function
	 *
	 * @param  {String} `name` Rule name
	 * @param  {Function `fn`
	 * @param  {Object} `options`
	 * @api private
	 */

	Ruler.prototype.at = function (name, fn, options) {
	  var idx = this.__find__(name);
	  var opt = options || {};

	  if (idx === -1) {
	    throw new Error('Parser rule not found: ' + name);
	  }

	  this.__rules__[idx].fn = fn;
	  this.__rules__[idx].alt = opt.alt || [];
	  this.__cache__ = null;
	};

	/**
	 * Add a rule to the chain before given the `ruleName`.
	 *
	 * @param  {String}   `beforeName`
	 * @param  {String}   `ruleName`
	 * @param  {Function} `fn`
	 * @param  {Object}   `options`
	 * @api private
	 */

	Ruler.prototype.before = function (beforeName, ruleName, fn, options) {
	  var idx = this.__find__(beforeName);
	  var opt = options || {};

	  if (idx === -1) {
	    throw new Error('Parser rule not found: ' + beforeName);
	  }

	  this.__rules__.splice(idx, 0, {
	    name: ruleName,
	    enabled: true,
	    fn: fn,
	    alt: opt.alt || []
	  });

	  this.__cache__ = null;
	};

	/**
	 * Add a rule to the chain after the given `ruleName`.
	 *
	 * @param  {String}   `afterName`
	 * @param  {String}   `ruleName`
	 * @param  {Function} `fn`
	 * @param  {Object}   `options`
	 * @api private
	 */

	Ruler.prototype.after = function (afterName, ruleName, fn, options) {
	  var idx = this.__find__(afterName);
	  var opt = options || {};

	  if (idx === -1) {
	    throw new Error('Parser rule not found: ' + afterName);
	  }

	  this.__rules__.splice(idx + 1, 0, {
	    name: ruleName,
	    enabled: true,
	    fn: fn,
	    alt: opt.alt || []
	  });

	  this.__cache__ = null;
	};

	/**
	 * Add a rule to the end of chain.
	 *
	 * @param  {String}   `ruleName`
	 * @param  {Function} `fn`
	 * @param  {Object}   `options`
	 * @return {String}
	 */

	Ruler.prototype.push = function (ruleName, fn, options) {
	  var opt = options || {};

	  this.__rules__.push({
	    name: ruleName,
	    enabled: true,
	    fn: fn,
	    alt: opt.alt || []
	  });

	  this.__cache__ = null;
	};

	/**
	 * Enable a rule or list of rules.
	 *
	 * @param  {String|Array} `list` Name or array of rule names to enable
	 * @param  {Boolean} `strict` If `true`, all non listed rules will be disabled.
	 * @api private
	 */

	Ruler.prototype.enable = function (list, strict) {
	  list = !Array.isArray(list)
	    ? [ list ]
	    : list;

	  // In strict mode disable all existing rules first
	  if (strict) {
	    this.__rules__.forEach(function (rule) {
	      rule.enabled = false;
	    });
	  }

	  // Search by name and enable
	  list.forEach(function (name) {
	    var idx = this.__find__(name);
	    if (idx < 0) {
	      throw new Error('Rules manager: invalid rule name ' + name);
	    }
	    this.__rules__[idx].enabled = true;
	  }, this);

	  this.__cache__ = null;
	};


	/**
	 * Disable a rule or list of rules.
	 *
	 * @param  {String|Array} `list` Name or array of rule names to disable
	 * @api private
	 */

	Ruler.prototype.disable = function (list) {
	  list = !Array.isArray(list)
	    ? [ list ]
	    : list;

	  // Search by name and disable
	  list.forEach(function (name) {
	    var idx = this.__find__(name);
	    if (idx < 0) {
	      throw new Error('Rules manager: invalid rule name ' + name);
	    }
	    this.__rules__[idx].enabled = false;
	  }, this);

	  this.__cache__ = null;
	};

	/**
	 * Get a rules list as an array of functions.
	 *
	 * @param  {String} `chainName`
	 * @return {Object}
	 * @api private
	 */

	Ruler.prototype.getRules = function (chainName) {
	  if (this.__cache__ === null) {
	    this.__compile__();
	  }
	  return this.__cache__[chainName] || [];
	};

	function block(state) {

	  if (state.inlineMode) {
	    state.tokens.push({
	      type: 'inline',
	      content: state.src.replace(/\n/g, ' ').trim(),
	      level: 0,
	      lines: [ 0, 1 ],
	      children: []
	    });

	  } else {
	    state.block.parse(state.src, state.options, state.env, state.tokens);
	  }
	}

	// Inline parser state

	function StateInline(src, parserInline, options, env, outTokens) {
	  this.src = src;
	  this.env = env;
	  this.options = options;
	  this.parser = parserInline;
	  this.tokens = outTokens;
	  this.pos = 0;
	  this.posMax = this.src.length;
	  this.level = 0;
	  this.pending = '';
	  this.pendingLevel = 0;

	  this.cache = [];        // Stores { start: end } pairs. Useful for backtrack
	                          // optimization of pairs parse (emphasis, strikes).

	  // Link parser state vars

	  this.isInLabel = false; // Set true when seek link label - we should disable
	                          // "paired" rules (emphasis, strikes) to not skip
	                          // tailing `]`

	  this.linkLevel = 0;     // Increment for each nesting link. Used to prevent
	                          // nesting in definitions

	  this.linkContent = '';  // Temporary storage for link url

	  this.labelUnmatchedScopes = 0; // Track unpaired `[` for link labels
	                                 // (backtrack optimization)
	}

	// Flush pending text
	//
	StateInline.prototype.pushPending = function () {
	  this.tokens.push({
	    type: 'text',
	    content: this.pending,
	    level: this.pendingLevel
	  });
	  this.pending = '';
	};

	// Push new token to "stream".
	// If pending text exists - flush it as text token
	//
	StateInline.prototype.push = function (token) {
	  if (this.pending) {
	    this.pushPending();
	  }

	  this.tokens.push(token);
	  this.pendingLevel = this.level;
	};

	// Store value to cache.
	// !!! Implementation has parser-specific optimizations
	// !!! keys MUST be integer, >= 0; values MUST be integer, > 0
	//
	StateInline.prototype.cacheSet = function (key, val) {
	  for (var i = this.cache.length; i <= key; i++) {
	    this.cache.push(0);
	  }

	  this.cache[key] = val;
	};

	// Get cache value
	//
	StateInline.prototype.cacheGet = function (key) {
	  return key < this.cache.length ? this.cache[key] : 0;
	};

	/**
	 * Parse link labels
	 *
	 * This function assumes that first character (`[`) already matches;
	 * returns the end of the label.
	 *
	 * @param  {Object} state
	 * @param  {Number} start
	 * @api private
	 */

	function parseLinkLabel(state, start) {
	  var level, found, marker,
	      labelEnd = -1,
	      max = state.posMax,
	      oldPos = state.pos,
	      oldFlag = state.isInLabel;

	  if (state.isInLabel) { return -1; }

	  if (state.labelUnmatchedScopes) {
	    state.labelUnmatchedScopes--;
	    return -1;
	  }

	  state.pos = start + 1;
	  state.isInLabel = true;
	  level = 1;

	  while (state.pos < max) {
	    marker = state.src.charCodeAt(state.pos);
	    if (marker === 0x5B /* [ */) {
	      level++;
	    } else if (marker === 0x5D /* ] */) {
	      level--;
	      if (level === 0) {
	        found = true;
	        break;
	      }
	    }

	    state.parser.skipToken(state);
	  }

	  if (found) {
	    labelEnd = state.pos;
	    state.labelUnmatchedScopes = 0;
	  } else {
	    state.labelUnmatchedScopes = level - 1;
	  }

	  // restore old state
	  state.pos = oldPos;
	  state.isInLabel = oldFlag;

	  return labelEnd;
	}

	// Parse abbreviation definitions, i.e. `*[abbr]: description`


	function parseAbbr(str, parserInline, options, env) {
	  var state, labelEnd, pos, max, label, title;

	  if (str.charCodeAt(0) !== 0x2A/* * */) { return -1; }
	  if (str.charCodeAt(1) !== 0x5B/* [ */) { return -1; }

	  if (str.indexOf(']:') === -1) { return -1; }

	  state = new StateInline(str, parserInline, options, env, []);
	  labelEnd = parseLinkLabel(state, 1);

	  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return -1; }

	  max = state.posMax;

	  // abbr title is always one line, so looking for ending "\n" here
	  for (pos = labelEnd + 2; pos < max; pos++) {
	    if (state.src.charCodeAt(pos) === 0x0A) { break; }
	  }

	  label = str.slice(2, labelEnd);
	  title = str.slice(labelEnd + 2, pos).trim();
	  if (title.length === 0) { return -1; }
	  if (!env.abbreviations) { env.abbreviations = {}; }
	  // prepend ':' to avoid conflict with Object.prototype members
	  if (typeof env.abbreviations[':' + label] === 'undefined') {
	    env.abbreviations[':' + label] = title;
	  }

	  return pos;
	}

	function abbr(state) {
	  var tokens = state.tokens, i, l, content, pos;

	  if (state.inlineMode) {
	    return;
	  }

	  // Parse inlines
	  for (i = 1, l = tokens.length - 1; i < l; i++) {
	    if (tokens[i - 1].type === 'paragraph_open' &&
	        tokens[i].type === 'inline' &&
	        tokens[i + 1].type === 'paragraph_close') {

	      content = tokens[i].content;
	      while (content.length) {
	        pos = parseAbbr(content, state.inline, state.options, state.env);
	        if (pos < 0) { break; }
	        content = content.slice(pos).trim();
	      }

	      tokens[i].content = content;
	      if (!content.length) {
	        tokens[i - 1].tight = true;
	        tokens[i + 1].tight = true;
	      }
	    }
	  }
	}

	function normalizeLink(url) {
	  var normalized = replaceEntities(url);
	  // We shouldn't care about the result of malformed URIs,
	  // and should not throw an exception.
	  try {
	    normalized = decodeURI(normalized);
	  } catch (err) {}
	  return encodeURI(normalized);
	}

	/**
	 * Parse link destination
	 *
	 *   - on success it returns a string and updates state.pos;
	 *   - on failure it returns null
	 *
	 * @param  {Object} state
	 * @param  {Number} pos
	 * @api private
	 */

	function parseLinkDestination(state, pos) {
	  var code, level, link,
	      start = pos,
	      max = state.posMax;

	  if (state.src.charCodeAt(pos) === 0x3C /* < */) {
	    pos++;
	    while (pos < max) {
	      code = state.src.charCodeAt(pos);
	      if (code === 0x0A /* \n */) { return false; }
	      if (code === 0x3E /* > */) {
	        link = normalizeLink(unescapeMd(state.src.slice(start + 1, pos)));
	        if (!state.parser.validateLink(link)) { return false; }
	        state.pos = pos + 1;
	        state.linkContent = link;
	        return true;
	      }
	      if (code === 0x5C /* \ */ && pos + 1 < max) {
	        pos += 2;
	        continue;
	      }

	      pos++;
	    }

	    // no closing '>'
	    return false;
	  }

	  // this should be ... } else { ... branch

	  level = 0;
	  while (pos < max) {
	    code = state.src.charCodeAt(pos);

	    if (code === 0x20) { break; }

	    // ascii control chars
	    if (code < 0x20 || code === 0x7F) { break; }

	    if (code === 0x5C /* \ */ && pos + 1 < max) {
	      pos += 2;
	      continue;
	    }

	    if (code === 0x28 /* ( */) {
	      level++;
	      if (level > 1) { break; }
	    }

	    if (code === 0x29 /* ) */) {
	      level--;
	      if (level < 0) { break; }
	    }

	    pos++;
	  }

	  if (start === pos) { return false; }

	  link = unescapeMd(state.src.slice(start, pos));
	  if (!state.parser.validateLink(link)) { return false; }

	  state.linkContent = link;
	  state.pos = pos;
	  return true;
	}

	/**
	 * Parse link title
	 *
	 *   - on success it returns a string and updates state.pos;
	 *   - on failure it returns null
	 *
	 * @param  {Object} state
	 * @param  {Number} pos
	 * @api private
	 */

	function parseLinkTitle(state, pos) {
	  var code,
	      start = pos,
	      max = state.posMax,
	      marker = state.src.charCodeAt(pos);

	  if (marker !== 0x22 /* " */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return false; }

	  pos++;

	  // if opening marker is "(", switch it to closing marker ")"
	  if (marker === 0x28) { marker = 0x29; }

	  while (pos < max) {
	    code = state.src.charCodeAt(pos);
	    if (code === marker) {
	      state.pos = pos + 1;
	      state.linkContent = unescapeMd(state.src.slice(start + 1, pos));
	      return true;
	    }
	    if (code === 0x5C /* \ */ && pos + 1 < max) {
	      pos += 2;
	      continue;
	    }

	    pos++;
	  }

	  return false;
	}

	function normalizeReference(str) {
	  // use .toUpperCase() instead of .toLowerCase()
	  // here to avoid a conflict with Object.prototype
	  // members (most notably, `__proto__`)
	  return str.trim().replace(/\s+/g, ' ').toUpperCase();
	}

	function parseReference(str, parser, options, env) {
	  var state, labelEnd, pos, max, code, start, href, title, label;

	  if (str.charCodeAt(0) !== 0x5B/* [ */) { return -1; }

	  if (str.indexOf(']:') === -1) { return -1; }

	  state = new StateInline(str, parser, options, env, []);
	  labelEnd = parseLinkLabel(state, 0);

	  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return -1; }

	  max = state.posMax;

	  // [label]:   destination   'title'
	  //         ^^^ skip optional whitespace here
	  for (pos = labelEnd + 2; pos < max; pos++) {
	    code = state.src.charCodeAt(pos);
	    if (code !== 0x20 && code !== 0x0A) { break; }
	  }

	  // [label]:   destination   'title'
	  //            ^^^^^^^^^^^ parse this
	  if (!parseLinkDestination(state, pos)) { return -1; }
	  href = state.linkContent;
	  pos = state.pos;

	  // [label]:   destination   'title'
	  //                       ^^^ skipping those spaces
	  start = pos;
	  for (pos = pos + 1; pos < max; pos++) {
	    code = state.src.charCodeAt(pos);
	    if (code !== 0x20 && code !== 0x0A) { break; }
	  }

	  // [label]:   destination   'title'
	  //                          ^^^^^^^ parse this
	  if (pos < max && start !== pos && parseLinkTitle(state, pos)) {
	    title = state.linkContent;
	    pos = state.pos;
	  } else {
	    title = '';
	    pos = start;
	  }

	  // ensure that the end of the line is empty
	  while (pos < max && state.src.charCodeAt(pos) === 0x20/* space */) { pos++; }
	  if (pos < max && state.src.charCodeAt(pos) !== 0x0A) { return -1; }

	  label = normalizeReference(str.slice(1, labelEnd));
	  if (typeof env.references[label] === 'undefined') {
	    env.references[label] = { title: title, href: href };
	  }

	  return pos;
	}


	function references(state) {
	  var tokens = state.tokens, i, l, content, pos;

	  state.env.references = state.env.references || {};

	  if (state.inlineMode) {
	    return;
	  }

	  // Scan definitions in paragraph inlines
	  for (i = 1, l = tokens.length - 1; i < l; i++) {
	    if (tokens[i].type === 'inline' &&
	        tokens[i - 1].type === 'paragraph_open' &&
	        tokens[i + 1].type === 'paragraph_close') {

	      content = tokens[i].content;
	      while (content.length) {
	        pos = parseReference(content, state.inline, state.options, state.env);
	        if (pos < 0) { break; }
	        content = content.slice(pos).trim();
	      }

	      tokens[i].content = content;
	      if (!content.length) {
	        tokens[i - 1].tight = true;
	        tokens[i + 1].tight = true;
	      }
	    }
	  }
	}

	function inline(state) {
	  var tokens = state.tokens, tok, i, l;

	  // Parse inlines
	  for (i = 0, l = tokens.length; i < l; i++) {
	    tok = tokens[i];
	    if (tok.type === 'inline') {
	      state.inline.parse(tok.content, state.options, state.env, tok.children);
	    }
	  }
	}

	function footnote_block(state) {
	  var i, l, j, t, lastParagraph, list, tokens, current, currentLabel,
	      level = 0,
	      insideRef = false,
	      refTokens = {};

	  if (!state.env.footnotes) { return; }

	  state.tokens = state.tokens.filter(function(tok) {
	    if (tok.type === 'footnote_reference_open') {
	      insideRef = true;
	      current = [];
	      currentLabel = tok.label;
	      return false;
	    }
	    if (tok.type === 'footnote_reference_close') {
	      insideRef = false;
	      // prepend ':' to avoid conflict with Object.prototype members
	      refTokens[':' + currentLabel] = current;
	      return false;
	    }
	    if (insideRef) { current.push(tok); }
	    return !insideRef;
	  });

	  if (!state.env.footnotes.list) { return; }
	  list = state.env.footnotes.list;

	  state.tokens.push({
	    type: 'footnote_block_open',
	    level: level++
	  });
	  for (i = 0, l = list.length; i < l; i++) {
	    state.tokens.push({
	      type: 'footnote_open',
	      id: i,
	      level: level++
	    });

	    if (list[i].tokens) {
	      tokens = [];
	      tokens.push({
	        type: 'paragraph_open',
	        tight: false,
	        level: level++
	      });
	      tokens.push({
	        type: 'inline',
	        content: '',
	        level: level,
	        children: list[i].tokens
	      });
	      tokens.push({
	        type: 'paragraph_close',
	        tight: false,
	        level: --level
	      });
	    } else if (list[i].label) {
	      tokens = refTokens[':' + list[i].label];
	    }

	    state.tokens = state.tokens.concat(tokens);
	    if (state.tokens[state.tokens.length - 1].type === 'paragraph_close') {
	      lastParagraph = state.tokens.pop();
	    } else {
	      lastParagraph = null;
	    }

	    t = list[i].count > 0 ? list[i].count : 1;
	    for (j = 0; j < t; j++) {
	      state.tokens.push({
	        type: 'footnote_anchor',
	        id: i,
	        subId: j,
	        level: level
	      });
	    }

	    if (lastParagraph) {
	      state.tokens.push(lastParagraph);
	    }

	    state.tokens.push({
	      type: 'footnote_close',
	      level: --level
	    });
	  }
	  state.tokens.push({
	    type: 'footnote_block_close',
	    level: --level
	  });
	}

	// Enclose abbreviations in <abbr> tags
	//

	var PUNCT_CHARS = ' \n()[]\'".,!?-';


	// from Google closure library
	// http://closure-library.googlecode.com/git-history/docs/local_closure_goog_string_string.js.source.html#line1021
	function regEscape(s) {
	  return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1');
	}


	function abbr2(state) {
	  var i, j, l, tokens, token, text, nodes, pos, level, reg, m, regText,
	      blockTokens = state.tokens;

	  if (!state.env.abbreviations) { return; }
	  if (!state.env.abbrRegExp) {
	    regText = '(^|[' + PUNCT_CHARS.split('').map(regEscape).join('') + '])'
	            + '(' + Object.keys(state.env.abbreviations).map(function (x) {
	                      return x.substr(1);
	                    }).sort(function (a, b) {
	                      return b.length - a.length;
	                    }).map(regEscape).join('|') + ')'
	            + '($|[' + PUNCT_CHARS.split('').map(regEscape).join('') + '])';
	    state.env.abbrRegExp = new RegExp(regText, 'g');
	  }
	  reg = state.env.abbrRegExp;

	  for (j = 0, l = blockTokens.length; j < l; j++) {
	    if (blockTokens[j].type !== 'inline') { continue; }
	    tokens = blockTokens[j].children;

	    // We scan from the end, to keep position when new tags added.
	    for (i = tokens.length - 1; i >= 0; i--) {
	      token = tokens[i];
	      if (token.type !== 'text') { continue; }

	      pos = 0;
	      text = token.content;
	      reg.lastIndex = 0;
	      level = token.level;
	      nodes = [];

	      while ((m = reg.exec(text))) {
	        if (reg.lastIndex > pos) {
	          nodes.push({
	            type: 'text',
	            content: text.slice(pos, m.index + m[1].length),
	            level: level
	          });
	        }

	        nodes.push({
	          type: 'abbr_open',
	          title: state.env.abbreviations[':' + m[2]],
	          level: level++
	        });
	        nodes.push({
	          type: 'text',
	          content: m[2],
	          level: level
	        });
	        nodes.push({
	          type: 'abbr_close',
	          level: --level
	        });
	        pos = reg.lastIndex - m[3].length;
	      }

	      if (!nodes.length) { continue; }

	      if (pos < text.length) {
	        nodes.push({
	          type: 'text',
	          content: text.slice(pos),
	          level: level
	        });
	      }

	      // replace current node
	      blockTokens[j].children = tokens = [].concat(tokens.slice(0, i), nodes, tokens.slice(i + 1));
	    }
	  }
	}

	// Simple typographical replacements
	//
	// TODO:
	// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾
	// - miltiplication 2 x 4 -> 2 × 4

	var RARE_RE = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/;

	var SCOPED_ABBR_RE = /\((c|tm|r|p)\)/ig;
	var SCOPED_ABBR = {
	  'c': '©',
	  'r': '®',
	  'p': '§',
	  'tm': '™'
	};

	function replaceScopedAbbr(str) {
	  if (str.indexOf('(') < 0) { return str; }

	  return str.replace(SCOPED_ABBR_RE, function(match, name) {
	    return SCOPED_ABBR[name.toLowerCase()];
	  });
	}


	function replace$1(state) {
	  var i, token, text, inlineTokens, blkIdx;

	  if (!state.options.typographer) { return; }

	  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {

	    if (state.tokens[blkIdx].type !== 'inline') { continue; }

	    inlineTokens = state.tokens[blkIdx].children;

	    for (i = inlineTokens.length - 1; i >= 0; i--) {
	      token = inlineTokens[i];
	      if (token.type === 'text') {
	        text = token.content;

	        text = replaceScopedAbbr(text);

	        if (RARE_RE.test(text)) {
	          text = text
	            .replace(/\+-/g, '±')
	            // .., ..., ....... -> …
	            // but ?..... & !..... -> ?.. & !..
	            .replace(/\.{2,}/g, '…').replace(/([?!])…/g, '$1..')
	            .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')
	            // em-dash
	            .replace(/(^|[^-])---([^-]|$)/mg, '$1\u2014$2')
	            // en-dash
	            .replace(/(^|\s)--(\s|$)/mg, '$1\u2013$2')
	            .replace(/(^|[^-\s])--([^-\s]|$)/mg, '$1\u2013$2');
	        }

	        token.content = text;
	      }
	    }
	  }
	}

	// Convert straight quotation marks to typographic ones
	//

	var QUOTE_TEST_RE = /['"]/;
	var QUOTE_RE = /['"]/g;
	var PUNCT_RE = /[-\s()\[\]]/;
	var APOSTROPHE = '’';

	// This function returns true if the character at `pos`
	// could be inside a word.
	function isLetter(str, pos) {
	  if (pos < 0 || pos >= str.length) { return false; }
	  return !PUNCT_RE.test(str[pos]);
	}


	function replaceAt(str, index, ch) {
	  return str.substr(0, index) + ch + str.substr(index + 1);
	}


	function smartquotes(state) {
	  /*eslint max-depth:0*/
	  var i, token, text, t, pos, max, thisLevel, lastSpace, nextSpace, item,
	      canOpen, canClose, j, isSingle, blkIdx, tokens,
	      stack;

	  if (!state.options.typographer) { return; }

	  stack = [];

	  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {

	    if (state.tokens[blkIdx].type !== 'inline') { continue; }

	    tokens = state.tokens[blkIdx].children;
	    stack.length = 0;

	    for (i = 0; i < tokens.length; i++) {
	      token = tokens[i];

	      if (token.type !== 'text' || QUOTE_TEST_RE.test(token.text)) { continue; }

	      thisLevel = tokens[i].level;

	      for (j = stack.length - 1; j >= 0; j--) {
	        if (stack[j].level <= thisLevel) { break; }
	      }
	      stack.length = j + 1;

	      text = token.content;
	      pos = 0;
	      max = text.length;

	      /*eslint no-labels:0,block-scoped-var:0*/
	      OUTER:
	      while (pos < max) {
	        QUOTE_RE.lastIndex = pos;
	        t = QUOTE_RE.exec(text);
	        if (!t) { break; }

	        lastSpace = !isLetter(text, t.index - 1);
	        pos = t.index + 1;
	        isSingle = (t[0] === "'");
	        nextSpace = !isLetter(text, pos);

	        if (!nextSpace && !lastSpace) {
	          // middle of word
	          if (isSingle) {
	            token.content = replaceAt(token.content, t.index, APOSTROPHE);
	          }
	          continue;
	        }

	        canOpen = !nextSpace;
	        canClose = !lastSpace;

	        if (canClose) {
	          // this could be a closing quote, rewind the stack to get a match
	          for (j = stack.length - 1; j >= 0; j--) {
	            item = stack[j];
	            if (stack[j].level < thisLevel) { break; }
	            if (item.single === isSingle && stack[j].level === thisLevel) {
	              item = stack[j];
	              if (isSingle) {
	                tokens[item.token].content = replaceAt(tokens[item.token].content, item.pos, state.options.quotes[2]);
	                token.content = replaceAt(token.content, t.index, state.options.quotes[3]);
	              } else {
	                tokens[item.token].content = replaceAt(tokens[item.token].content, item.pos, state.options.quotes[0]);
	                token.content = replaceAt(token.content, t.index, state.options.quotes[1]);
	              }
	              stack.length = j;
	              continue OUTER;
	            }
	          }
	        }

	        if (canOpen) {
	          stack.push({
	            token: i,
	            pos: t.index,
	            single: isSingle,
	            level: thisLevel
	          });
	        } else if (canClose && isSingle) {
	          token.content = replaceAt(token.content, t.index, APOSTROPHE);
	        }
	      }
	    }
	  }
	}

	/**
	 * Core parser `rules`
	 */

	var _rules = [
	  [ 'block',          block          ],
	  [ 'abbr',           abbr           ],
	  [ 'references',     references     ],
	  [ 'inline',         inline         ],
	  [ 'footnote_tail',  footnote_block  ],
	  [ 'abbr2',          abbr2          ],
	  [ 'replacements',   replace$1   ],
	  [ 'smartquotes',    smartquotes    ],
	];

	/**
	 * Class for top level (`core`) parser rules
	 *
	 * @api private
	 */

	function Core() {
	  this.options = {};
	  this.ruler = new Ruler();
	  for (var i = 0; i < _rules.length; i++) {
	    this.ruler.push(_rules[i][0], _rules[i][1]);
	  }
	}

	/**
	 * Process rules with the given `state`
	 *
	 * @param  {Object} `state`
	 * @api private
	 */

	Core.prototype.process = function (state) {
	  var i, l, rules;
	  rules = this.ruler.getRules('');
	  for (i = 0, l = rules.length; i < l; i++) {
	    rules[i](state);
	  }
	};

	// Parser state class

	function StateBlock(src, parser, options, env, tokens) {
	  var ch, s, start, pos, len, indent, indent_found;

	  this.src = src;

	  // Shortcuts to simplify nested calls
	  this.parser = parser;

	  this.options = options;

	  this.env = env;

	  //
	  // Internal state vartiables
	  //

	  this.tokens = tokens;

	  this.bMarks = [];  // line begin offsets for fast jumps
	  this.eMarks = [];  // line end offsets for fast jumps
	  this.tShift = [];  // indent for each line

	  // block parser variables
	  this.blkIndent  = 0; // required block content indent
	                       // (for example, if we are in list)
	  this.line       = 0; // line index in src
	  this.lineMax    = 0; // lines count
	  this.tight      = false;  // loose/tight mode for lists
	  this.parentType = 'root'; // if `list`, block parser stops on two newlines
	  this.ddIndent   = -1; // indent of the current dd block (-1 if there isn't any)

	  this.level = 0;

	  // renderer
	  this.result = '';

	  // Create caches
	  // Generate markers.
	  s = this.src;
	  indent = 0;
	  indent_found = false;

	  for (start = pos = indent = 0, len = s.length; pos < len; pos++) {
	    ch = s.charCodeAt(pos);

	    if (!indent_found) {
	      if (ch === 0x20/* space */) {
	        indent++;
	        continue;
	      } else {
	        indent_found = true;
	      }
	    }

	    if (ch === 0x0A || pos === len - 1) {
	      if (ch !== 0x0A) { pos++; }
	      this.bMarks.push(start);
	      this.eMarks.push(pos);
	      this.tShift.push(indent);

	      indent_found = false;
	      indent = 0;
	      start = pos + 1;
	    }
	  }

	  // Push fake entry to simplify cache bounds checks
	  this.bMarks.push(s.length);
	  this.eMarks.push(s.length);
	  this.tShift.push(0);

	  this.lineMax = this.bMarks.length - 1; // don't count last fake line
	}

	StateBlock.prototype.isEmpty = function isEmpty(line) {
	  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];
	};

	StateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {
	  for (var max = this.lineMax; from < max; from++) {
	    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {
	      break;
	    }
	  }
	  return from;
	};

	// Skip spaces from given position.
	StateBlock.prototype.skipSpaces = function skipSpaces(pos) {
	  for (var max = this.src.length; pos < max; pos++) {
	    if (this.src.charCodeAt(pos) !== 0x20/* space */) { break; }
	  }
	  return pos;
	};

	// Skip char codes from given position
	StateBlock.prototype.skipChars = function skipChars(pos, code) {
	  for (var max = this.src.length; pos < max; pos++) {
	    if (this.src.charCodeAt(pos) !== code) { break; }
	  }
	  return pos;
	};

	// Skip char codes reverse from given position - 1
	StateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {
	  if (pos <= min) { return pos; }

	  while (pos > min) {
	    if (code !== this.src.charCodeAt(--pos)) { return pos + 1; }
	  }
	  return pos;
	};

	// cut lines range from source.
	StateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {
	  var i, first, last, queue, shift,
	      line = begin;

	  if (begin >= end) {
	    return '';
	  }

	  // Opt: don't use push queue for single line;
	  if (line + 1 === end) {
	    first = this.bMarks[line] + Math.min(this.tShift[line], indent);
	    last = keepLastLF ? this.eMarks[line] + 1 : this.eMarks[line];
	    return this.src.slice(first, last);
	  }

	  queue = new Array(end - begin);

	  for (i = 0; line < end; line++, i++) {
	    shift = this.tShift[line];
	    if (shift > indent) { shift = indent; }
	    if (shift < 0) { shift = 0; }

	    first = this.bMarks[line] + shift;

	    if (line + 1 < end || keepLastLF) {
	      // No need for bounds check because we have fake entry on tail.
	      last = this.eMarks[line] + 1;
	    } else {
	      last = this.eMarks[line];
	    }

	    queue[i] = this.src.slice(first, last);
	  }

	  return queue.join('');
	};

	// Code block (4 spaces padded)

	function code$4(state, startLine, endLine/*, silent*/) {
	  var nextLine, last;

	  if (state.tShift[startLine] - state.blkIndent < 4) { return false; }

	  last = nextLine = startLine + 1;

	  while (nextLine < endLine) {
	    if (state.isEmpty(nextLine)) {
	      nextLine++;
	      continue;
	    }
	    if (state.tShift[nextLine] - state.blkIndent >= 4) {
	      nextLine++;
	      last = nextLine;
	      continue;
	    }
	    break;
	  }

	  state.line = nextLine;
	  state.tokens.push({
	    type: 'code',
	    content: state.getLines(startLine, last, 4 + state.blkIndent, true),
	    block: true,
	    lines: [ startLine, state.line ],
	    level: state.level
	  });

	  return true;
	}

	// fences (``` lang, ~~~ lang)

	function fences(state, startLine, endLine, silent) {
	  var marker, len, params, nextLine, mem,
	      haveEndMarker = false,
	      pos = state.bMarks[startLine] + state.tShift[startLine],
	      max = state.eMarks[startLine];

	  if (pos + 3 > max) { return false; }

	  marker = state.src.charCodeAt(pos);

	  if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {
	    return false;
	  }

	  // scan marker length
	  mem = pos;
	  pos = state.skipChars(pos, marker);

	  len = pos - mem;

	  if (len < 3) { return false; }

	  params = state.src.slice(pos, max).trim();

	  if (params.indexOf('`') >= 0) { return false; }

	  // Since start is found, we can report success here in validation mode
	  if (silent) { return true; }

	  // search end of block
	  nextLine = startLine;

	  for (;;) {
	    nextLine++;
	    if (nextLine >= endLine) {
	      // unclosed block should be autoclosed by end of document.
	      // also block seems to be autoclosed by end of parent
	      break;
	    }

	    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];
	    max = state.eMarks[nextLine];

	    if (pos < max && state.tShift[nextLine] < state.blkIndent) {
	      // non-empty line with negative indent should stop the list:
	      // - ```
	      //  test
	      break;
	    }

	    if (state.src.charCodeAt(pos) !== marker) { continue; }

	    if (state.tShift[nextLine] - state.blkIndent >= 4) {
	      // closing fence should be indented less than 4 spaces
	      continue;
	    }

	    pos = state.skipChars(pos, marker);

	    // closing code fence must be at least as long as the opening one
	    if (pos - mem < len) { continue; }

	    // make sure tail has spaces only
	    pos = state.skipSpaces(pos);

	    if (pos < max) { continue; }

	    haveEndMarker = true;
	    // found!
	    break;
	  }

	  // If a fence has heading spaces, they should be removed from its inner block
	  len = state.tShift[startLine];

	  state.line = nextLine + (haveEndMarker ? 1 : 0);
	  state.tokens.push({
	    type: 'fence',
	    params: params,
	    content: state.getLines(startLine + 1, nextLine, len, true),
	    lines: [ startLine, state.line ],
	    level: state.level
	  });

	  return true;
	}

	// Block quotes

	function blockquote$2(state, startLine, endLine, silent) {
	  var nextLine, lastLineEmpty, oldTShift, oldBMarks, oldIndent, oldParentType, lines,
	      terminatorRules,
	      i, l, terminate,
	      pos = state.bMarks[startLine] + state.tShift[startLine],
	      max = state.eMarks[startLine];

	  if (pos > max) { return false; }

	  // check the block quote marker
	  if (state.src.charCodeAt(pos++) !== 0x3E/* > */) { return false; }

	  if (state.level >= state.options.maxNesting) { return false; }

	  // we know that it's going to be a valid blockquote,
	  // so no point trying to find the end of it in silent mode
	  if (silent) { return true; }

	  // skip one optional space after '>'
	  if (state.src.charCodeAt(pos) === 0x20) { pos++; }

	  oldIndent = state.blkIndent;
	  state.blkIndent = 0;

	  oldBMarks = [ state.bMarks[startLine] ];
	  state.bMarks[startLine] = pos;

	  // check if we have an empty blockquote
	  pos = pos < max ? state.skipSpaces(pos) : pos;
	  lastLineEmpty = pos >= max;

	  oldTShift = [ state.tShift[startLine] ];
	  state.tShift[startLine] = pos - state.bMarks[startLine];

	  terminatorRules = state.parser.ruler.getRules('blockquote');

	  // Search the end of the block
	  //
	  // Block ends with either:
	  //  1. an empty line outside:
	  //     ```
	  //     > test
	  //
	  //     ```
	  //  2. an empty line inside:
	  //     ```
	  //     >
	  //     test
	  //     ```
	  //  3. another tag
	  //     ```
	  //     > test
	  //      - - -
	  //     ```
	  for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {
	    pos = state.bMarks[nextLine] + state.tShift[nextLine];
	    max = state.eMarks[nextLine];

	    if (pos >= max) {
	      // Case 1: line is not inside the blockquote, and this line is empty.
	      break;
	    }

	    if (state.src.charCodeAt(pos++) === 0x3E/* > */) {
	      // This line is inside the blockquote.

	      // skip one optional space after '>'
	      if (state.src.charCodeAt(pos) === 0x20) { pos++; }

	      oldBMarks.push(state.bMarks[nextLine]);
	      state.bMarks[nextLine] = pos;

	      pos = pos < max ? state.skipSpaces(pos) : pos;
	      lastLineEmpty = pos >= max;

	      oldTShift.push(state.tShift[nextLine]);
	      state.tShift[nextLine] = pos - state.bMarks[nextLine];
	      continue;
	    }

	    // Case 2: line is not inside the blockquote, and the last line was empty.
	    if (lastLineEmpty) { break; }

	    // Case 3: another tag found.
	    terminate = false;
	    for (i = 0, l = terminatorRules.length; i < l; i++) {
	      if (terminatorRules[i](state, nextLine, endLine, true)) {
	        terminate = true;
	        break;
	      }
	    }
	    if (terminate) { break; }

	    oldBMarks.push(state.bMarks[nextLine]);
	    oldTShift.push(state.tShift[nextLine]);

	    // A negative number means that this is a paragraph continuation;
	    //
	    // Any negative number will do the job here, but it's better for it
	    // to be large enough to make any bugs obvious.
	    state.tShift[nextLine] = -1337;
	  }

	  oldParentType = state.parentType;
	  state.parentType = 'blockquote';
	  state.tokens.push({
	    type: 'blockquote_open',
	    lines: lines = [ startLine, 0 ],
	    level: state.level++
	  });
	  state.parser.tokenize(state, startLine, nextLine);
	  state.tokens.push({
	    type: 'blockquote_close',
	    level: --state.level
	  });
	  state.parentType = oldParentType;
	  lines[1] = state.line;

	  // Restore original tShift; this might not be necessary since the parser
	  // has already been here, but just to make sure we can do that.
	  for (i = 0; i < oldTShift.length; i++) {
	    state.bMarks[i + startLine] = oldBMarks[i];
	    state.tShift[i + startLine] = oldTShift[i];
	  }
	  state.blkIndent = oldIndent;

	  return true;
	}

	// Horizontal rule

	function hr$1(state, startLine, endLine, silent) {
	  var marker, cnt, ch,
	      pos = state.bMarks[startLine],
	      max = state.eMarks[startLine];

	  pos += state.tShift[startLine];

	  if (pos > max) { return false; }

	  marker = state.src.charCodeAt(pos++);

	  // Check hr marker
	  if (marker !== 0x2A/* * */ &&
	      marker !== 0x2D/* - */ &&
	      marker !== 0x5F/* _ */) {
	    return false;
	  }

	  // markers can be mixed with spaces, but there should be at least 3 one

	  cnt = 1;
	  while (pos < max) {
	    ch = state.src.charCodeAt(pos++);
	    if (ch !== marker && ch !== 0x20/* space */) { return false; }
	    if (ch === marker) { cnt++; }
	  }

	  if (cnt < 3) { return false; }

	  if (silent) { return true; }

	  state.line = startLine + 1;
	  state.tokens.push({
	    type: 'hr',
	    lines: [ startLine, state.line ],
	    level: state.level
	  });

	  return true;
	}

	// Lists

	// Search `[-+*][\n ]`, returns next pos arter marker on success
	// or -1 on fail.
	function skipBulletListMarker(state, startLine) {
	  var marker, pos, max;

	  pos = state.bMarks[startLine] + state.tShift[startLine];
	  max = state.eMarks[startLine];

	  if (pos >= max) { return -1; }

	  marker = state.src.charCodeAt(pos++);
	  // Check bullet
	  if (marker !== 0x2A/* * */ &&
	      marker !== 0x2D/* - */ &&
	      marker !== 0x2B/* + */) {
	    return -1;
	  }

	  if (pos < max && state.src.charCodeAt(pos) !== 0x20) {
	    // " 1.test " - is not a list item
	    return -1;
	  }

	  return pos;
	}

	// Search `\d+[.)][\n ]`, returns next pos arter marker on success
	// or -1 on fail.
	function skipOrderedListMarker(state, startLine) {
	  var ch,
	      pos = state.bMarks[startLine] + state.tShift[startLine],
	      max = state.eMarks[startLine];

	  if (pos + 1 >= max) { return -1; }

	  ch = state.src.charCodeAt(pos++);

	  if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1; }

	  for (;;) {
	    // EOL -> fail
	    if (pos >= max) { return -1; }

	    ch = state.src.charCodeAt(pos++);

	    if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {
	      continue;
	    }

	    // found valid marker
	    if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {
	      break;
	    }

	    return -1;
	  }


	  if (pos < max && state.src.charCodeAt(pos) !== 0x20/* space */) {
	    // " 1.test " - is not a list item
	    return -1;
	  }
	  return pos;
	}

	function markTightParagraphs(state, idx) {
	  var i, l,
	      level = state.level + 2;

	  for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {
	    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {
	      state.tokens[i + 2].tight = true;
	      state.tokens[i].tight = true;
	      i += 2;
	    }
	  }
	}


	function list$3(state, startLine, endLine, silent) {
	  var nextLine,
	      indent,
	      oldTShift,
	      oldIndent,
	      oldTight,
	      oldParentType,
	      start,
	      posAfterMarker,
	      max,
	      indentAfterMarker,
	      markerValue,
	      markerCharCode,
	      isOrdered,
	      contentStart,
	      listTokIdx,
	      prevEmptyEnd,
	      listLines,
	      itemLines,
	      tight = true,
	      terminatorRules,
	      i, l, terminate;

	  // Detect list type and position after marker
	  if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {
	    isOrdered = true;
	  } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {
	    isOrdered = false;
	  } else {
	    return false;
	  }

	  if (state.level >= state.options.maxNesting) { return false; }

	  // We should terminate list on style change. Remember first one to compare.
	  markerCharCode = state.src.charCodeAt(posAfterMarker - 1);

	  // For validation mode we can terminate immediately
	  if (silent) { return true; }

	  // Start list
	  listTokIdx = state.tokens.length;

	  if (isOrdered) {
	    start = state.bMarks[startLine] + state.tShift[startLine];
	    markerValue = Number(state.src.substr(start, posAfterMarker - start - 1));

	    state.tokens.push({
	      type: 'ordered_list_open',
	      order: markerValue,
	      lines: listLines = [ startLine, 0 ],
	      level: state.level++
	    });

	  } else {
	    state.tokens.push({
	      type: 'bullet_list_open',
	      lines: listLines = [ startLine, 0 ],
	      level: state.level++
	    });
	  }

	  //
	  // Iterate list items
	  //

	  nextLine = startLine;
	  prevEmptyEnd = false;
	  terminatorRules = state.parser.ruler.getRules('list');

	  while (nextLine < endLine) {
	    contentStart = state.skipSpaces(posAfterMarker);
	    max = state.eMarks[nextLine];

	    if (contentStart >= max) {
	      // trimming space in "-    \n  3" case, indent is 1 here
	      indentAfterMarker = 1;
	    } else {
	      indentAfterMarker = contentStart - posAfterMarker;
	    }

	    // If we have more than 4 spaces, the indent is 1
	    // (the rest is just indented code block)
	    if (indentAfterMarker > 4) { indentAfterMarker = 1; }

	    // If indent is less than 1, assume that it's one, example:
	    //  "-\n  test"
	    if (indentAfterMarker < 1) { indentAfterMarker = 1; }

	    // "  -  test"
	    //  ^^^^^ - calculating total length of this thing
	    indent = (posAfterMarker - state.bMarks[nextLine]) + indentAfterMarker;

	    // Run subparser & write tokens
	    state.tokens.push({
	      type: 'list_item_open',
	      lines: itemLines = [ startLine, 0 ],
	      level: state.level++
	    });

	    oldIndent = state.blkIndent;
	    oldTight = state.tight;
	    oldTShift = state.tShift[startLine];
	    oldParentType = state.parentType;
	    state.tShift[startLine] = contentStart - state.bMarks[startLine];
	    state.blkIndent = indent;
	    state.tight = true;
	    state.parentType = 'list';

	    state.parser.tokenize(state, startLine, endLine, true);

	    // If any of list item is tight, mark list as tight
	    if (!state.tight || prevEmptyEnd) {
	      tight = false;
	    }
	    // Item become loose if finish with empty line,
	    // but we should filter last element, because it means list finish
	    prevEmptyEnd = (state.line - startLine) > 1 && state.isEmpty(state.line - 1);

	    state.blkIndent = oldIndent;
	    state.tShift[startLine] = oldTShift;
	    state.tight = oldTight;
	    state.parentType = oldParentType;

	    state.tokens.push({
	      type: 'list_item_close',
	      level: --state.level
	    });

	    nextLine = startLine = state.line;
	    itemLines[1] = nextLine;
	    contentStart = state.bMarks[startLine];

	    if (nextLine >= endLine) { break; }

	    if (state.isEmpty(nextLine)) {
	      break;
	    }

	    //
	    // Try to check if list is terminated or continued.
	    //
	    if (state.tShift[nextLine] < state.blkIndent) { break; }

	    // fail if terminating block found
	    terminate = false;
	    for (i = 0, l = terminatorRules.length; i < l; i++) {
	      if (terminatorRules[i](state, nextLine, endLine, true)) {
	        terminate = true;
	        break;
	      }
	    }
	    if (terminate) { break; }

	    // fail if list has another type
	    if (isOrdered) {
	      posAfterMarker = skipOrderedListMarker(state, nextLine);
	      if (posAfterMarker < 0) { break; }
	    } else {
	      posAfterMarker = skipBulletListMarker(state, nextLine);
	      if (posAfterMarker < 0) { break; }
	    }

	    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break; }
	  }

	  // Finilize list
	  state.tokens.push({
	    type: isOrdered ? 'ordered_list_close' : 'bullet_list_close',
	    level: --state.level
	  });
	  listLines[1] = nextLine;

	  state.line = nextLine;

	  // mark paragraphs tight if needed
	  if (tight) {
	    markTightParagraphs(state, listTokIdx);
	  }

	  return true;
	}

	// Process footnote reference list

	function footnote(state, startLine, endLine, silent) {
	  var oldBMark, oldTShift, oldParentType, pos, label,
	      start = state.bMarks[startLine] + state.tShift[startLine],
	      max = state.eMarks[startLine];

	  // line should be at least 5 chars - "[^x]:"
	  if (start + 4 > max) { return false; }

	  if (state.src.charCodeAt(start) !== 0x5B/* [ */) { return false; }
	  if (state.src.charCodeAt(start + 1) !== 0x5E/* ^ */) { return false; }
	  if (state.level >= state.options.maxNesting) { return false; }

	  for (pos = start + 2; pos < max; pos++) {
	    if (state.src.charCodeAt(pos) === 0x20) { return false; }
	    if (state.src.charCodeAt(pos) === 0x5D /* ] */) {
	      break;
	    }
	  }

	  if (pos === start + 2) { return false; } // no empty footnote labels
	  if (pos + 1 >= max || state.src.charCodeAt(++pos) !== 0x3A /* : */) { return false; }
	  if (silent) { return true; }
	  pos++;

	  if (!state.env.footnotes) { state.env.footnotes = {}; }
	  if (!state.env.footnotes.refs) { state.env.footnotes.refs = {}; }
	  label = state.src.slice(start + 2, pos - 2);
	  state.env.footnotes.refs[':' + label] = -1;

	  state.tokens.push({
	    type: 'footnote_reference_open',
	    label: label,
	    level: state.level++
	  });

	  oldBMark = state.bMarks[startLine];
	  oldTShift = state.tShift[startLine];
	  oldParentType = state.parentType;
	  state.tShift[startLine] = state.skipSpaces(pos) - pos;
	  state.bMarks[startLine] = pos;
	  state.blkIndent += 4;
	  state.parentType = 'footnote';

	  if (state.tShift[startLine] < state.blkIndent) {
	    state.tShift[startLine] += state.blkIndent;
	    state.bMarks[startLine] -= state.blkIndent;
	  }

	  state.parser.tokenize(state, startLine, endLine, true);

	  state.parentType = oldParentType;
	  state.blkIndent -= 4;
	  state.tShift[startLine] = oldTShift;
	  state.bMarks[startLine] = oldBMark;

	  state.tokens.push({
	    type: 'footnote_reference_close',
	    level: --state.level
	  });

	  return true;
	}

	// heading (#, ##, ...)

	function heading$2(state, startLine, endLine, silent) {
	  var ch, level, tmp,
	      pos = state.bMarks[startLine] + state.tShift[startLine],
	      max = state.eMarks[startLine];

	  if (pos >= max) { return false; }

	  ch  = state.src.charCodeAt(pos);

	  if (ch !== 0x23/* # */ || pos >= max) { return false; }

	  // count heading level
	  level = 1;
	  ch = state.src.charCodeAt(++pos);
	  while (ch === 0x23/* # */ && pos < max && level <= 6) {
	    level++;
	    ch = state.src.charCodeAt(++pos);
	  }

	  if (level > 6 || (pos < max && ch !== 0x20/* space */)) { return false; }

	  if (silent) { return true; }

	  // Let's cut tails like '    ###  ' from the end of string

	  max = state.skipCharsBack(max, 0x20, pos); // space
	  tmp = state.skipCharsBack(max, 0x23, pos); // #
	  if (tmp > pos && state.src.charCodeAt(tmp - 1) === 0x20/* space */) {
	    max = tmp;
	  }

	  state.line = startLine + 1;

	  state.tokens.push({ type: 'heading_open',
	    hLevel: level,
	    lines: [ startLine, state.line ],
	    level: state.level
	  });

	  // only if header is not empty
	  if (pos < max) {
	    state.tokens.push({
	      type: 'inline',
	      content: state.src.slice(pos, max).trim(),
	      level: state.level + 1,
	      lines: [ startLine, state.line ],
	      children: []
	    });
	  }
	  state.tokens.push({ type: 'heading_close', hLevel: level, level: state.level });

	  return true;
	}

	// lheading (---, ===)

	function lheading(state, startLine, endLine/*, silent*/) {
	  var marker, pos, max,
	      next = startLine + 1;

	  if (next >= endLine) { return false; }
	  if (state.tShift[next] < state.blkIndent) { return false; }

	  // Scan next line

	  if (state.tShift[next] - state.blkIndent > 3) { return false; }

	  pos = state.bMarks[next] + state.tShift[next];
	  max = state.eMarks[next];

	  if (pos >= max) { return false; }

	  marker = state.src.charCodeAt(pos);

	  if (marker !== 0x2D/* - */ && marker !== 0x3D/* = */) { return false; }

	  pos = state.skipChars(pos, marker);

	  pos = state.skipSpaces(pos);

	  if (pos < max) { return false; }

	  pos = state.bMarks[startLine] + state.tShift[startLine];

	  state.line = next + 1;
	  state.tokens.push({
	    type: 'heading_open',
	    hLevel: marker === 0x3D/* = */ ? 1 : 2,
	    lines: [ startLine, state.line ],
	    level: state.level
	  });
	  state.tokens.push({
	    type: 'inline',
	    content: state.src.slice(pos, state.eMarks[startLine]).trim(),
	    level: state.level + 1,
	    lines: [ startLine, state.line - 1 ],
	    children: []
	  });
	  state.tokens.push({
	    type: 'heading_close',
	    hLevel: marker === 0x3D/* = */ ? 1 : 2,
	    level: state.level
	  });

	  return true;
	}

	// List of valid html blocks names, accorting to commonmark spec
	// http://jgm.github.io/CommonMark/spec.html#html-blocks

	var html_blocks = {};

	[
	  'article',
	  'aside',
	  'button',
	  'blockquote',
	  'body',
	  'canvas',
	  'caption',
	  'col',
	  'colgroup',
	  'dd',
	  'div',
	  'dl',
	  'dt',
	  'embed',
	  'fieldset',
	  'figcaption',
	  'figure',
	  'footer',
	  'form',
	  'h1',
	  'h2',
	  'h3',
	  'h4',
	  'h5',
	  'h6',
	  'header',
	  'hgroup',
	  'hr',
	  'iframe',
	  'li',
	  'map',
	  'object',
	  'ol',
	  'output',
	  'p',
	  'pre',
	  'progress',
	  'script',
	  'section',
	  'style',
	  'table',
	  'tbody',
	  'td',
	  'textarea',
	  'tfoot',
	  'th',
	  'tr',
	  'thead',
	  'ul',
	  'video'
	].forEach(function (name) { html_blocks[name] = true; });

	// HTML block


	var HTML_TAG_OPEN_RE = /^<([a-zA-Z]{1,15})[\s\/>]/;
	var HTML_TAG_CLOSE_RE = /^<\/([a-zA-Z]{1,15})[\s>]/;

	function isLetter$1(ch) {
	  /*eslint no-bitwise:0*/
	  var lc = ch | 0x20; // to lower case
	  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */);
	}

	function htmlblock(state, startLine, endLine, silent) {
	  var ch, match, nextLine,
	      pos = state.bMarks[startLine],
	      max = state.eMarks[startLine],
	      shift = state.tShift[startLine];

	  pos += shift;

	  if (!state.options.html) { return false; }

	  if (shift > 3 || pos + 2 >= max) { return false; }

	  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }

	  ch = state.src.charCodeAt(pos + 1);

	  if (ch === 0x21/* ! */ || ch === 0x3F/* ? */) {
	    // Directive start / comment start / processing instruction start
	    if (silent) { return true; }

	  } else if (ch === 0x2F/* / */ || isLetter$1(ch)) {

	    // Probably start or end of tag
	    if (ch === 0x2F/* \ */) {
	      // closing tag
	      match = state.src.slice(pos, max).match(HTML_TAG_CLOSE_RE);
	      if (!match) { return false; }
	    } else {
	      // opening tag
	      match = state.src.slice(pos, max).match(HTML_TAG_OPEN_RE);
	      if (!match) { return false; }
	    }
	    // Make sure tag name is valid
	    if (html_blocks[match[1].toLowerCase()] !== true) { return false; }
	    if (silent) { return true; }

	  } else {
	    return false;
	  }

	  // If we are here - we detected HTML block.
	  // Let's roll down till empty line (block end).
	  nextLine = startLine + 1;
	  while (nextLine < state.lineMax && !state.isEmpty(nextLine)) {
	    nextLine++;
	  }

	  state.line = nextLine;
	  state.tokens.push({
	    type: 'htmlblock',
	    level: state.level,
	    lines: [ startLine, state.line ],
	    content: state.getLines(startLine, nextLine, 0, true)
	  });

	  return true;
	}

	// GFM table, non-standard

	function getLine(state, line) {
	  var pos = state.bMarks[line] + state.blkIndent,
	      max = state.eMarks[line];

	  return state.src.substr(pos, max - pos);
	}

	function table$2(state, startLine, endLine, silent) {
	  var ch, lineText, pos, i, nextLine, rows, cell,
	      aligns, t, tableLines, tbodyLines;

	  // should have at least three lines
	  if (startLine + 2 > endLine) { return false; }

	  nextLine = startLine + 1;

	  if (state.tShift[nextLine] < state.blkIndent) { return false; }

	  // first character of the second line should be '|' or '-'

	  pos = state.bMarks[nextLine] + state.tShift[nextLine];
	  if (pos >= state.eMarks[nextLine]) { return false; }

	  ch = state.src.charCodeAt(pos);
	  if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */) { return false; }

	  lineText = getLine(state, startLine + 1);
	  if (!/^[-:| ]+$/.test(lineText)) { return false; }

	  rows = lineText.split('|');
	  if (rows <= 2) { return false; }
	  aligns = [];
	  for (i = 0; i < rows.length; i++) {
	    t = rows[i].trim();
	    if (!t) {
	      // allow empty columns before and after table, but not in between columns;
	      // e.g. allow ` |---| `, disallow ` ---||--- `
	      if (i === 0 || i === rows.length - 1) {
	        continue;
	      } else {
	        return false;
	      }
	    }

	    if (!/^:?-+:?$/.test(t)) { return false; }
	    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {
	      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');
	    } else if (t.charCodeAt(0) === 0x3A/* : */) {
	      aligns.push('left');
	    } else {
	      aligns.push('');
	    }
	  }

	  lineText = getLine(state, startLine).trim();
	  if (lineText.indexOf('|') === -1) { return false; }
	  rows = lineText.replace(/^\||\|$/g, '').split('|');
	  if (aligns.length !== rows.length) { return false; }
	  if (silent) { return true; }

	  state.tokens.push({
	    type: 'table_open',
	    lines: tableLines = [ startLine, 0 ],
	    level: state.level++
	  });
	  state.tokens.push({
	    type: 'thead_open',
	    lines: [ startLine, startLine + 1 ],
	    level: state.level++
	  });

	  state.tokens.push({
	    type: 'tr_open',
	    lines: [ startLine, startLine + 1 ],
	    level: state.level++
	  });
	  for (i = 0; i < rows.length; i++) {
	    state.tokens.push({
	      type: 'th_open',
	      align: aligns[i],
	      lines: [ startLine, startLine + 1 ],
	      level: state.level++
	    });
	    state.tokens.push({
	      type: 'inline',
	      content: rows[i].trim(),
	      lines: [ startLine, startLine + 1 ],
	      level: state.level,
	      children: []
	    });
	    state.tokens.push({ type: 'th_close', level: --state.level });
	  }
	  state.tokens.push({ type: 'tr_close', level: --state.level });
	  state.tokens.push({ type: 'thead_close', level: --state.level });

	  state.tokens.push({
	    type: 'tbody_open',
	    lines: tbodyLines = [ startLine + 2, 0 ],
	    level: state.level++
	  });

	  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {
	    if (state.tShift[nextLine] < state.blkIndent) { break; }

	    lineText = getLine(state, nextLine).trim();
	    if (lineText.indexOf('|') === -1) { break; }
	    rows = lineText.replace(/^\||\|$/g, '').split('|');

	    state.tokens.push({ type: 'tr_open', level: state.level++ });
	    for (i = 0; i < rows.length; i++) {
	      state.tokens.push({ type: 'td_open', align: aligns[i], level: state.level++ });
	      // 0x7c === '|'
	      cell = rows[i].substring(
	          rows[i].charCodeAt(0) === 0x7c ? 1 : 0,
	          rows[i].charCodeAt(rows[i].length - 1) === 0x7c ? rows[i].length - 1 : rows[i].length
	      ).trim();
	      state.tokens.push({
	        type: 'inline',
	        content: cell,
	        level: state.level,
	        children: []
	      });
	      state.tokens.push({ type: 'td_close', level: --state.level });
	    }
	    state.tokens.push({ type: 'tr_close', level: --state.level });
	  }
	  state.tokens.push({ type: 'tbody_close', level: --state.level });
	  state.tokens.push({ type: 'table_close', level: --state.level });

	  tableLines[1] = tbodyLines[1] = nextLine;
	  state.line = nextLine;
	  return true;
	}

	// Definition lists

	// Search `[:~][\n ]`, returns next pos after marker on success
	// or -1 on fail.
	function skipMarker(state, line) {
	  var pos, marker,
	      start = state.bMarks[line] + state.tShift[line],
	      max = state.eMarks[line];

	  if (start >= max) { return -1; }

	  // Check bullet
	  marker = state.src.charCodeAt(start++);
	  if (marker !== 0x7E/* ~ */ && marker !== 0x3A/* : */) { return -1; }

	  pos = state.skipSpaces(start);

	  // require space after ":"
	  if (start === pos) { return -1; }

	  // no empty definitions, e.g. "  : "
	  if (pos >= max) { return -1; }

	  return pos;
	}

	function markTightParagraphs$1(state, idx) {
	  var i, l,
	      level = state.level + 2;

	  for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {
	    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {
	      state.tokens[i + 2].tight = true;
	      state.tokens[i].tight = true;
	      i += 2;
	    }
	  }
	}

	function deflist(state, startLine, endLine, silent) {
	  var contentStart,
	      ddLine,
	      dtLine,
	      itemLines,
	      listLines,
	      listTokIdx,
	      nextLine,
	      oldIndent,
	      oldDDIndent,
	      oldParentType,
	      oldTShift,
	      oldTight,
	      prevEmptyEnd,
	      tight;

	  if (silent) {
	    // quirk: validation mode validates a dd block only, not a whole deflist
	    if (state.ddIndent < 0) { return false; }
	    return skipMarker(state, startLine) >= 0;
	  }

	  nextLine = startLine + 1;
	  if (state.isEmpty(nextLine)) {
	    if (++nextLine > endLine) { return false; }
	  }

	  if (state.tShift[nextLine] < state.blkIndent) { return false; }
	  contentStart = skipMarker(state, nextLine);
	  if (contentStart < 0) { return false; }

	  if (state.level >= state.options.maxNesting) { return false; }

	  // Start list
	  listTokIdx = state.tokens.length;

	  state.tokens.push({
	    type: 'dl_open',
	    lines: listLines = [ startLine, 0 ],
	    level: state.level++
	  });

	  //
	  // Iterate list items
	  //

	  dtLine = startLine;
	  ddLine = nextLine;

	  // One definition list can contain multiple DTs,
	  // and one DT can be followed by multiple DDs.
	  //
	  // Thus, there is two loops here, and label is
	  // needed to break out of the second one
	  //
	  /*eslint no-labels:0,block-scoped-var:0*/
	  OUTER:
	  for (;;) {
	    tight = true;
	    prevEmptyEnd = false;

	    state.tokens.push({
	      type: 'dt_open',
	      lines: [ dtLine, dtLine ],
	      level: state.level++
	    });
	    state.tokens.push({
	      type: 'inline',
	      content: state.getLines(dtLine, dtLine + 1, state.blkIndent, false).trim(),
	      level: state.level + 1,
	      lines: [ dtLine, dtLine ],
	      children: []
	    });
	    state.tokens.push({
	      type: 'dt_close',
	      level: --state.level
	    });

	    for (;;) {
	      state.tokens.push({
	        type: 'dd_open',
	        lines: itemLines = [ nextLine, 0 ],
	        level: state.level++
	      });

	      oldTight = state.tight;
	      oldDDIndent = state.ddIndent;
	      oldIndent = state.blkIndent;
	      oldTShift = state.tShift[ddLine];
	      oldParentType = state.parentType;
	      state.blkIndent = state.ddIndent = state.tShift[ddLine] + 2;
	      state.tShift[ddLine] = contentStart - state.bMarks[ddLine];
	      state.tight = true;
	      state.parentType = 'deflist';

	      state.parser.tokenize(state, ddLine, endLine, true);

	      // If any of list item is tight, mark list as tight
	      if (!state.tight || prevEmptyEnd) {
	        tight = false;
	      }
	      // Item become loose if finish with empty line,
	      // but we should filter last element, because it means list finish
	      prevEmptyEnd = (state.line - ddLine) > 1 && state.isEmpty(state.line - 1);

	      state.tShift[ddLine] = oldTShift;
	      state.tight = oldTight;
	      state.parentType = oldParentType;
	      state.blkIndent = oldIndent;
	      state.ddIndent = oldDDIndent;

	      state.tokens.push({
	        type: 'dd_close',
	        level: --state.level
	      });

	      itemLines[1] = nextLine = state.line;

	      if (nextLine >= endLine) { break OUTER; }

	      if (state.tShift[nextLine] < state.blkIndent) { break OUTER; }
	      contentStart = skipMarker(state, nextLine);
	      if (contentStart < 0) { break; }

	      ddLine = nextLine;

	      // go to the next loop iteration:
	      // insert DD tag and repeat checking
	    }

	    if (nextLine >= endLine) { break; }
	    dtLine = nextLine;

	    if (state.isEmpty(dtLine)) { break; }
	    if (state.tShift[dtLine] < state.blkIndent) { break; }

	    ddLine = dtLine + 1;
	    if (ddLine >= endLine) { break; }
	    if (state.isEmpty(ddLine)) { ddLine++; }
	    if (ddLine >= endLine) { break; }

	    if (state.tShift[ddLine] < state.blkIndent) { break; }
	    contentStart = skipMarker(state, ddLine);
	    if (contentStart < 0) { break; }

	    // go to the next loop iteration:
	    // insert DT and DD tags and repeat checking
	  }

	  // Finilize list
	  state.tokens.push({
	    type: 'dl_close',
	    level: --state.level
	  });
	  listLines[1] = nextLine;

	  state.line = nextLine;

	  // mark paragraphs tight if needed
	  if (tight) {
	    markTightParagraphs$1(state, listTokIdx);
	  }

	  return true;
	}

	// Paragraph

	function paragraph$2(state, startLine/*, endLine*/) {
	  var endLine, content, terminate, i, l,
	      nextLine = startLine + 1,
	      terminatorRules;

	  endLine = state.lineMax;

	  // jump line-by-line until empty one or EOF
	  if (nextLine < endLine && !state.isEmpty(nextLine)) {
	    terminatorRules = state.parser.ruler.getRules('paragraph');

	    for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
	      // this would be a code block normally, but after paragraph
	      // it's considered a lazy continuation regardless of what's there
	      if (state.tShift[nextLine] - state.blkIndent > 3) { continue; }

	      // Some tags can terminate paragraph without empty line.
	      terminate = false;
	      for (i = 0, l = terminatorRules.length; i < l; i++) {
	        if (terminatorRules[i](state, nextLine, endLine, true)) {
	          terminate = true;
	          break;
	        }
	      }
	      if (terminate) { break; }
	    }
	  }

	  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();

	  state.line = nextLine;
	  if (content.length) {
	    state.tokens.push({
	      type: 'paragraph_open',
	      tight: false,
	      lines: [ startLine, state.line ],
	      level: state.level
	    });
	    state.tokens.push({
	      type: 'inline',
	      content: content,
	      level: state.level + 1,
	      lines: [ startLine, state.line ],
	      children: []
	    });
	    state.tokens.push({
	      type: 'paragraph_close',
	      tight: false,
	      level: state.level
	    });
	  }

	  return true;
	}

	/**
	 * Parser rules
	 */

	var _rules$1 = [
	  [ 'code',       code$4 ],
	  [ 'fences',     fences,     [ 'paragraph', 'blockquote', 'list' ] ],
	  [ 'blockquote', blockquote$2, [ 'paragraph', 'blockquote', 'list' ] ],
	  [ 'hr',         hr$1,         [ 'paragraph', 'blockquote', 'list' ] ],
	  [ 'list',       list$3,       [ 'paragraph', 'blockquote' ] ],
	  [ 'footnote',   footnote,   [ 'paragraph' ] ],
	  [ 'heading',    heading$2,    [ 'paragraph', 'blockquote' ] ],
	  [ 'lheading',   lheading ],
	  [ 'htmlblock',  htmlblock,  [ 'paragraph', 'blockquote' ] ],
	  [ 'table',      table$2,      [ 'paragraph' ] ],
	  [ 'deflist',    deflist,    [ 'paragraph' ] ],
	  [ 'paragraph',  paragraph$2 ]
	];

	/**
	 * Block Parser class
	 *
	 * @api private
	 */

	function ParserBlock() {
	  this.ruler = new Ruler();
	  for (var i = 0; i < _rules$1.length; i++) {
	    this.ruler.push(_rules$1[i][0], _rules$1[i][1], {
	      alt: (_rules$1[i][2] || []).slice()
	    });
	  }
	}

	/**
	 * Generate tokens for the given input range.
	 *
	 * @param  {Object} `state` Has properties like `src`, `parser`, `options` etc
	 * @param  {Number} `startLine`
	 * @param  {Number} `endLine`
	 * @api private
	 */

	ParserBlock.prototype.tokenize = function (state, startLine, endLine) {
	  var rules = this.ruler.getRules('');
	  var len = rules.length;
	  var line = startLine;
	  var hasEmptyLines = false;
	  var ok, i;

	  while (line < endLine) {
	    state.line = line = state.skipEmptyLines(line);
	    if (line >= endLine) {
	      break;
	    }

	    // Termination condition for nested calls.
	    // Nested calls currently used for blockquotes & lists
	    if (state.tShift[line] < state.blkIndent) {
	      break;
	    }

	    // Try all possible rules.
	    // On success, rule should:
	    //
	    // - update `state.line`
	    // - update `state.tokens`
	    // - return true

	    for (i = 0; i < len; i++) {
	      ok = rules[i](state, line, endLine, false);
	      if (ok) {
	        break;
	      }
	    }

	    // set state.tight iff we had an empty line before current tag
	    // i.e. latest empty line should not count
	    state.tight = !hasEmptyLines;

	    // paragraph might "eat" one newline after it in nested lists
	    if (state.isEmpty(state.line - 1)) {
	      hasEmptyLines = true;
	    }

	    line = state.line;

	    if (line < endLine && state.isEmpty(line)) {
	      hasEmptyLines = true;
	      line++;

	      // two empty lines should stop the parser in list mode
	      if (line < endLine && state.parentType === 'list' && state.isEmpty(line)) { break; }
	      state.line = line;
	    }
	  }
	};

	var TABS_SCAN_RE = /[\n\t]/g;
	var NEWLINES_RE  = /\r[\n\u0085]|[\u2424\u2028\u0085]/g;
	var SPACES_RE    = /\u00a0/g;

	/**
	 * Tokenize the given `str`.
	 *
	 * @param  {String} `str` Source string
	 * @param  {Object} `options`
	 * @param  {Object} `env`
	 * @param  {Array} `outTokens`
	 * @api private
	 */

	ParserBlock.prototype.parse = function (str, options, env, outTokens) {
	  var state, lineStart = 0, lastTabPos = 0;
	  if (!str) { return []; }

	  // Normalize spaces
	  str = str.replace(SPACES_RE, ' ');

	  // Normalize newlines
	  str = str.replace(NEWLINES_RE, '\n');

	  // Replace tabs with proper number of spaces (1..4)
	  if (str.indexOf('\t') >= 0) {
	    str = str.replace(TABS_SCAN_RE, function (match, offset) {
	      var result;
	      if (str.charCodeAt(offset) === 0x0A) {
	        lineStart = offset + 1;
	        lastTabPos = 0;
	        return match;
	      }
	      result = '    '.slice((offset - lineStart - lastTabPos) % 4);
	      lastTabPos = offset - lineStart + 1;
	      return result;
	    });
	  }

	  state = new StateBlock(str, this, options, env, outTokens);
	  this.tokenize(state, state.line, state.lineMax);
	};

	// Skip text characters for text token, place those to pending buffer
	// and increment current pos

	// Rule to skip pure text
	// '{}$%@~+=:' reserved for extentions

	function isTerminatorChar(ch) {
	  switch (ch) {
	    case 0x0A/* \n */:
	    case 0x5C/* \ */:
	    case 0x60/* ` */:
	    case 0x2A/* * */:
	    case 0x5F/* _ */:
	    case 0x5E/* ^ */:
	    case 0x5B/* [ */:
	    case 0x5D/* ] */:
	    case 0x21/* ! */:
	    case 0x26/* & */:
	    case 0x3C/* < */:
	    case 0x3E/* > */:
	    case 0x7B/* { */:
	    case 0x7D/* } */:
	    case 0x24/* $ */:
	    case 0x25/* % */:
	    case 0x40/* @ */:
	    case 0x7E/* ~ */:
	    case 0x2B/* + */:
	    case 0x3D/* = */:
	    case 0x3A/* : */:
	      return true;
	    default:
	      return false;
	  }
	}

	function text$9(state, silent) {
	  var pos = state.pos;

	  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {
	    pos++;
	  }

	  if (pos === state.pos) { return false; }

	  if (!silent) { state.pending += state.src.slice(state.pos, pos); }

	  state.pos = pos;

	  return true;
	}

	// Proceess '\n'

	function newline(state, silent) {
	  var pmax, max, pos = state.pos;

	  if (state.src.charCodeAt(pos) !== 0x0A/* \n */) { return false; }

	  pmax = state.pending.length - 1;
	  max = state.posMax;

	  // '  \n' -> hardbreak
	  // Lookup in pending chars is bad practice! Don't copy to other rules!
	  // Pending string is stored in concat mode, indexed lookups will cause
	  // convertion to flat mode.
	  if (!silent) {
	    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {
	      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {
	        // Strip out all trailing spaces on this line.
	        for (var i = pmax - 2; i >= 0; i--) {
	          if (state.pending.charCodeAt(i) !== 0x20) {
	            state.pending = state.pending.substring(0, i + 1);
	            break;
	          }
	        }
	        state.push({
	          type: 'hardbreak',
	          level: state.level
	        });
	      } else {
	        state.pending = state.pending.slice(0, -1);
	        state.push({
	          type: 'softbreak',
	          level: state.level
	        });
	      }

	    } else {
	      state.push({
	        type: 'softbreak',
	        level: state.level
	      });
	    }
	  }

	  pos++;

	  // skip heading spaces for next line
	  while (pos < max && state.src.charCodeAt(pos) === 0x20) { pos++; }

	  state.pos = pos;
	  return true;
	}

	// Proceess escaped chars and hardbreaks

	var ESCAPED = [];

	for (var i = 0; i < 256; i++) { ESCAPED.push(0); }

	'\\!"#$%&\'()*+,./:;<=>?@[]^_`{|}~-'
	  .split('').forEach(function(ch) { ESCAPED[ch.charCodeAt(0)] = 1; });


	function escape(state, silent) {
	  var ch, pos = state.pos, max = state.posMax;

	  if (state.src.charCodeAt(pos) !== 0x5C/* \ */) { return false; }

	  pos++;

	  if (pos < max) {
	    ch = state.src.charCodeAt(pos);

	    if (ch < 256 && ESCAPED[ch] !== 0) {
	      if (!silent) { state.pending += state.src[pos]; }
	      state.pos += 2;
	      return true;
	    }

	    if (ch === 0x0A) {
	      if (!silent) {
	        state.push({
	          type: 'hardbreak',
	          level: state.level
	        });
	      }

	      pos++;
	      // skip leading whitespaces from next line
	      while (pos < max && state.src.charCodeAt(pos) === 0x20) { pos++; }

	      state.pos = pos;
	      return true;
	    }
	  }

	  if (!silent) { state.pending += '\\'; }
	  state.pos++;
	  return true;
	}

	// Parse backticks

	function backticks(state, silent) {
	  var start, max, marker, matchStart, matchEnd,
	      pos = state.pos,
	      ch = state.src.charCodeAt(pos);

	  if (ch !== 0x60/* ` */) { return false; }

	  start = pos;
	  pos++;
	  max = state.posMax;

	  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++; }

	  marker = state.src.slice(start, pos);

	  matchStart = matchEnd = pos;

	  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {
	    matchEnd = matchStart + 1;

	    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++; }

	    if (matchEnd - matchStart === marker.length) {
	      if (!silent) {
	        state.push({
	          type: 'code',
	          content: state.src.slice(pos, matchStart)
	                              .replace(/[ \n]+/g, ' ')
	                              .trim(),
	          block: false,
	          level: state.level
	        });
	      }
	      state.pos = matchEnd;
	      return true;
	    }
	  }

	  if (!silent) { state.pending += marker; }
	  state.pos += marker.length;
	  return true;
	}

	// Process ~~deleted text~~

	function del(state, silent) {
	  var found,
	      pos,
	      stack,
	      max = state.posMax,
	      start = state.pos,
	      lastChar,
	      nextChar;

	  if (state.src.charCodeAt(start) !== 0x7E/* ~ */) { return false; }
	  if (silent) { return false; } // don't run any pairs in validation mode
	  if (start + 4 >= max) { return false; }
	  if (state.src.charCodeAt(start + 1) !== 0x7E/* ~ */) { return false; }
	  if (state.level >= state.options.maxNesting) { return false; }

	  lastChar = start > 0 ? state.src.charCodeAt(start - 1) : -1;
	  nextChar = state.src.charCodeAt(start + 2);

	  if (lastChar === 0x7E/* ~ */) { return false; }
	  if (nextChar === 0x7E/* ~ */) { return false; }
	  if (nextChar === 0x20 || nextChar === 0x0A) { return false; }

	  pos = start + 2;
	  while (pos < max && state.src.charCodeAt(pos) === 0x7E/* ~ */) { pos++; }
	  if (pos > start + 3) {
	    // sequence of 4+ markers taking as literal, same as in a emphasis
	    state.pos += pos - start;
	    if (!silent) { state.pending += state.src.slice(start, pos); }
	    return true;
	  }

	  state.pos = start + 2;
	  stack = 1;

	  while (state.pos + 1 < max) {
	    if (state.src.charCodeAt(state.pos) === 0x7E/* ~ */) {
	      if (state.src.charCodeAt(state.pos + 1) === 0x7E/* ~ */) {
	        lastChar = state.src.charCodeAt(state.pos - 1);
	        nextChar = state.pos + 2 < max ? state.src.charCodeAt(state.pos + 2) : -1;
	        if (nextChar !== 0x7E/* ~ */ && lastChar !== 0x7E/* ~ */) {
	          if (lastChar !== 0x20 && lastChar !== 0x0A) {
	            // closing '~~'
	            stack--;
	          } else if (nextChar !== 0x20 && nextChar !== 0x0A) {
	            // opening '~~'
	            stack++;
	          } // else {
	            //  // standalone ' ~~ ' indented with spaces
	            // }
	          if (stack <= 0) {
	            found = true;
	            break;
	          }
	        }
	      }
	    }

	    state.parser.skipToken(state);
	  }

	  if (!found) {
	    // parser failed to find ending tag, so it's not valid emphasis
	    state.pos = start;
	    return false;
	  }

	  // found!
	  state.posMax = state.pos;
	  state.pos = start + 2;

	  if (!silent) {
	    state.push({ type: 'del_open', level: state.level++ });
	    state.parser.tokenize(state);
	    state.push({ type: 'del_close', level: --state.level });
	  }

	  state.pos = state.posMax + 2;
	  state.posMax = max;
	  return true;
	}

	// Process ++inserted text++

	function ins(state, silent) {
	  var found,
	      pos,
	      stack,
	      max = state.posMax,
	      start = state.pos,
	      lastChar,
	      nextChar;

	  if (state.src.charCodeAt(start) !== 0x2B/* + */) { return false; }
	  if (silent) { return false; } // don't run any pairs in validation mode
	  if (start + 4 >= max) { return false; }
	  if (state.src.charCodeAt(start + 1) !== 0x2B/* + */) { return false; }
	  if (state.level >= state.options.maxNesting) { return false; }

	  lastChar = start > 0 ? state.src.charCodeAt(start - 1) : -1;
	  nextChar = state.src.charCodeAt(start + 2);

	  if (lastChar === 0x2B/* + */) { return false; }
	  if (nextChar === 0x2B/* + */) { return false; }
	  if (nextChar === 0x20 || nextChar === 0x0A) { return false; }

	  pos = start + 2;
	  while (pos < max && state.src.charCodeAt(pos) === 0x2B/* + */) { pos++; }
	  if (pos !== start + 2) {
	    // sequence of 3+ markers taking as literal, same as in a emphasis
	    state.pos += pos - start;
	    if (!silent) { state.pending += state.src.slice(start, pos); }
	    return true;
	  }

	  state.pos = start + 2;
	  stack = 1;

	  while (state.pos + 1 < max) {
	    if (state.src.charCodeAt(state.pos) === 0x2B/* + */) {
	      if (state.src.charCodeAt(state.pos + 1) === 0x2B/* + */) {
	        lastChar = state.src.charCodeAt(state.pos - 1);
	        nextChar = state.pos + 2 < max ? state.src.charCodeAt(state.pos + 2) : -1;
	        if (nextChar !== 0x2B/* + */ && lastChar !== 0x2B/* + */) {
	          if (lastChar !== 0x20 && lastChar !== 0x0A) {
	            // closing '++'
	            stack--;
	          } else if (nextChar !== 0x20 && nextChar !== 0x0A) {
	            // opening '++'
	            stack++;
	          } // else {
	            //  // standalone ' ++ ' indented with spaces
	            // }
	          if (stack <= 0) {
	            found = true;
	            break;
	          }
	        }
	      }
	    }

	    state.parser.skipToken(state);
	  }

	  if (!found) {
	    // parser failed to find ending tag, so it's not valid emphasis
	    state.pos = start;
	    return false;
	  }

	  // found!
	  state.posMax = state.pos;
	  state.pos = start + 2;

	  if (!silent) {
	    state.push({ type: 'ins_open', level: state.level++ });
	    state.parser.tokenize(state);
	    state.push({ type: 'ins_close', level: --state.level });
	  }

	  state.pos = state.posMax + 2;
	  state.posMax = max;
	  return true;
	}

	// Process ==highlighted text==

	function mark$1(state, silent) {
	  var found,
	      pos,
	      stack,
	      max = state.posMax,
	      start = state.pos,
	      lastChar,
	      nextChar;

	  if (state.src.charCodeAt(start) !== 0x3D/* = */) { return false; }
	  if (silent) { return false; } // don't run any pairs in validation mode
	  if (start + 4 >= max) { return false; }
	  if (state.src.charCodeAt(start + 1) !== 0x3D/* = */) { return false; }
	  if (state.level >= state.options.maxNesting) { return false; }

	  lastChar = start > 0 ? state.src.charCodeAt(start - 1) : -1;
	  nextChar = state.src.charCodeAt(start + 2);

	  if (lastChar === 0x3D/* = */) { return false; }
	  if (nextChar === 0x3D/* = */) { return false; }
	  if (nextChar === 0x20 || nextChar === 0x0A) { return false; }

	  pos = start + 2;
	  while (pos < max && state.src.charCodeAt(pos) === 0x3D/* = */) { pos++; }
	  if (pos !== start + 2) {
	    // sequence of 3+ markers taking as literal, same as in a emphasis
	    state.pos += pos - start;
	    if (!silent) { state.pending += state.src.slice(start, pos); }
	    return true;
	  }

	  state.pos = start + 2;
	  stack = 1;

	  while (state.pos + 1 < max) {
	    if (state.src.charCodeAt(state.pos) === 0x3D/* = */) {
	      if (state.src.charCodeAt(state.pos + 1) === 0x3D/* = */) {
	        lastChar = state.src.charCodeAt(state.pos - 1);
	        nextChar = state.pos + 2 < max ? state.src.charCodeAt(state.pos + 2) : -1;
	        if (nextChar !== 0x3D/* = */ && lastChar !== 0x3D/* = */) {
	          if (lastChar !== 0x20 && lastChar !== 0x0A) {
	            // closing '=='
	            stack--;
	          } else if (nextChar !== 0x20 && nextChar !== 0x0A) {
	            // opening '=='
	            stack++;
	          } // else {
	            //  // standalone ' == ' indented with spaces
	            // }
	          if (stack <= 0) {
	            found = true;
	            break;
	          }
	        }
	      }
	    }

	    state.parser.skipToken(state);
	  }

	  if (!found) {
	    // parser failed to find ending tag, so it's not valid emphasis
	    state.pos = start;
	    return false;
	  }

	  // found!
	  state.posMax = state.pos;
	  state.pos = start + 2;

	  if (!silent) {
	    state.push({ type: 'mark_open', level: state.level++ });
	    state.parser.tokenize(state);
	    state.push({ type: 'mark_close', level: --state.level });
	  }

	  state.pos = state.posMax + 2;
	  state.posMax = max;
	  return true;
	}

	// Process *this* and _that_

	function isAlphaNum(code) {
	  return (code >= 0x30 /* 0 */ && code <= 0x39 /* 9 */) ||
	         (code >= 0x41 /* A */ && code <= 0x5A /* Z */) ||
	         (code >= 0x61 /* a */ && code <= 0x7A /* z */);
	}

	// parse sequence of emphasis markers,
	// "start" should point at a valid marker
	function scanDelims(state, start) {
	  var pos = start, lastChar, nextChar, count,
	      can_open = true,
	      can_close = true,
	      max = state.posMax,
	      marker = state.src.charCodeAt(start);

	  lastChar = start > 0 ? state.src.charCodeAt(start - 1) : -1;

	  while (pos < max && state.src.charCodeAt(pos) === marker) { pos++; }
	  if (pos >= max) { can_open = false; }
	  count = pos - start;

	  if (count >= 4) {
	    // sequence of four or more unescaped markers can't start/end an emphasis
	    can_open = can_close = false;
	  } else {
	    nextChar = pos < max ? state.src.charCodeAt(pos) : -1;

	    // check whitespace conditions
	    if (nextChar === 0x20 || nextChar === 0x0A) { can_open = false; }
	    if (lastChar === 0x20 || lastChar === 0x0A) { can_close = false; }

	    if (marker === 0x5F /* _ */) {
	      // check if we aren't inside the word
	      if (isAlphaNum(lastChar)) { can_open = false; }
	      if (isAlphaNum(nextChar)) { can_close = false; }
	    }
	  }

	  return {
	    can_open: can_open,
	    can_close: can_close,
	    delims: count
	  };
	}

	function emphasis$2(state, silent) {
	  var startCount,
	      count,
	      found,
	      oldCount,
	      newCount,
	      stack,
	      res,
	      max = state.posMax,
	      start = state.pos,
	      marker = state.src.charCodeAt(start);

	  if (marker !== 0x5F/* _ */ && marker !== 0x2A /* * */) { return false; }
	  if (silent) { return false; } // don't run any pairs in validation mode

	  res = scanDelims(state, start);
	  startCount = res.delims;
	  if (!res.can_open) {
	    state.pos += startCount;
	    if (!silent) { state.pending += state.src.slice(start, state.pos); }
	    return true;
	  }

	  if (state.level >= state.options.maxNesting) { return false; }

	  state.pos = start + startCount;
	  stack = [ startCount ];

	  while (state.pos < max) {
	    if (state.src.charCodeAt(state.pos) === marker) {
	      res = scanDelims(state, state.pos);
	      count = res.delims;
	      if (res.can_close) {
	        oldCount = stack.pop();
	        newCount = count;

	        while (oldCount !== newCount) {
	          if (newCount < oldCount) {
	            stack.push(oldCount - newCount);
	            break;
	          }

	          // assert(newCount > oldCount)
	          newCount -= oldCount;

	          if (stack.length === 0) { break; }
	          state.pos += oldCount;
	          oldCount = stack.pop();
	        }

	        if (stack.length === 0) {
	          startCount = oldCount;
	          found = true;
	          break;
	        }
	        state.pos += count;
	        continue;
	      }

	      if (res.can_open) { stack.push(count); }
	      state.pos += count;
	      continue;
	    }

	    state.parser.skipToken(state);
	  }

	  if (!found) {
	    // parser failed to find ending tag, so it's not valid emphasis
	    state.pos = start;
	    return false;
	  }

	  // found!
	  state.posMax = state.pos;
	  state.pos = start + startCount;

	  if (!silent) {
	    if (startCount === 2 || startCount === 3) {
	      state.push({ type: 'strong_open', level: state.level++ });
	    }
	    if (startCount === 1 || startCount === 3) {
	      state.push({ type: 'em_open', level: state.level++ });
	    }

	    state.parser.tokenize(state);

	    if (startCount === 1 || startCount === 3) {
	      state.push({ type: 'em_close', level: --state.level });
	    }
	    if (startCount === 2 || startCount === 3) {
	      state.push({ type: 'strong_close', level: --state.level });
	    }
	  }

	  state.pos = state.posMax + startCount;
	  state.posMax = max;
	  return true;
	}

	// Process ~subscript~

	// same as UNESCAPE_MD_RE plus a space
	var UNESCAPE_RE = /\\([ \\!"#$%&'()*+,.\/:;<=>?@[\]^_`{|}~-])/g;

	function sub(state, silent) {
	  var found,
	      content,
	      max = state.posMax,
	      start = state.pos;

	  if (state.src.charCodeAt(start) !== 0x7E/* ~ */) { return false; }
	  if (silent) { return false; } // don't run any pairs in validation mode
	  if (start + 2 >= max) { return false; }
	  if (state.level >= state.options.maxNesting) { return false; }

	  state.pos = start + 1;

	  while (state.pos < max) {
	    if (state.src.charCodeAt(state.pos) === 0x7E/* ~ */) {
	      found = true;
	      break;
	    }

	    state.parser.skipToken(state);
	  }

	  if (!found || start + 1 === state.pos) {
	    state.pos = start;
	    return false;
	  }

	  content = state.src.slice(start + 1, state.pos);

	  // don't allow unescaped spaces/newlines inside
	  if (content.match(/(^|[^\\])(\\\\)*\s/)) {
	    state.pos = start;
	    return false;
	  }

	  // found!
	  state.posMax = state.pos;
	  state.pos = start + 1;

	  if (!silent) {
	    state.push({
	      type: 'sub',
	      level: state.level,
	      content: content.replace(UNESCAPE_RE, '$1')
	    });
	  }

	  state.pos = state.posMax + 1;
	  state.posMax = max;
	  return true;
	}

	// Process ^superscript^

	// same as UNESCAPE_MD_RE plus a space
	var UNESCAPE_RE$1 = /\\([ \\!"#$%&'()*+,.\/:;<=>?@[\]^_`{|}~-])/g;

	function sup(state, silent) {
	  var found,
	      content,
	      max = state.posMax,
	      start = state.pos;

	  if (state.src.charCodeAt(start) !== 0x5E/* ^ */) { return false; }
	  if (silent) { return false; } // don't run any pairs in validation mode
	  if (start + 2 >= max) { return false; }
	  if (state.level >= state.options.maxNesting) { return false; }

	  state.pos = start + 1;

	  while (state.pos < max) {
	    if (state.src.charCodeAt(state.pos) === 0x5E/* ^ */) {
	      found = true;
	      break;
	    }

	    state.parser.skipToken(state);
	  }

	  if (!found || start + 1 === state.pos) {
	    state.pos = start;
	    return false;
	  }

	  content = state.src.slice(start + 1, state.pos);

	  // don't allow unescaped spaces/newlines inside
	  if (content.match(/(^|[^\\])(\\\\)*\s/)) {
	    state.pos = start;
	    return false;
	  }

	  // found!
	  state.posMax = state.pos;
	  state.pos = start + 1;

	  if (!silent) {
	    state.push({
	      type: 'sup',
	      level: state.level,
	      content: content.replace(UNESCAPE_RE$1, '$1')
	    });
	  }

	  state.pos = state.posMax + 1;
	  state.posMax = max;
	  return true;
	}

	// Process [links](<to> "stuff")


	function links(state, silent) {
	  var labelStart,
	      labelEnd,
	      label,
	      href,
	      title,
	      pos,
	      ref,
	      code,
	      isImage = false,
	      oldPos = state.pos,
	      max = state.posMax,
	      start = state.pos,
	      marker = state.src.charCodeAt(start);

	  if (marker === 0x21/* ! */) {
	    isImage = true;
	    marker = state.src.charCodeAt(++start);
	  }

	  if (marker !== 0x5B/* [ */) { return false; }
	  if (state.level >= state.options.maxNesting) { return false; }

	  labelStart = start + 1;
	  labelEnd = parseLinkLabel(state, start);

	  // parser failed to find ']', so it's not a valid link
	  if (labelEnd < 0) { return false; }

	  pos = labelEnd + 1;
	  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {
	    //
	    // Inline link
	    //

	    // [link](  <href>  "title"  )
	    //        ^^ skipping these spaces
	    pos++;
	    for (; pos < max; pos++) {
	      code = state.src.charCodeAt(pos);
	      if (code !== 0x20 && code !== 0x0A) { break; }
	    }
	    if (pos >= max) { return false; }

	    // [link](  <href>  "title"  )
	    //          ^^^^^^ parsing link destination
	    start = pos;
	    if (parseLinkDestination(state, pos)) {
	      href = state.linkContent;
	      pos = state.pos;
	    } else {
	      href = '';
	    }

	    // [link](  <href>  "title"  )
	    //                ^^ skipping these spaces
	    start = pos;
	    for (; pos < max; pos++) {
	      code = state.src.charCodeAt(pos);
	      if (code !== 0x20 && code !== 0x0A) { break; }
	    }

	    // [link](  <href>  "title"  )
	    //                  ^^^^^^^ parsing link title
	    if (pos < max && start !== pos && parseLinkTitle(state, pos)) {
	      title = state.linkContent;
	      pos = state.pos;

	      // [link](  <href>  "title"  )
	      //                         ^^ skipping these spaces
	      for (; pos < max; pos++) {
	        code = state.src.charCodeAt(pos);
	        if (code !== 0x20 && code !== 0x0A) { break; }
	      }
	    } else {
	      title = '';
	    }

	    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {
	      state.pos = oldPos;
	      return false;
	    }
	    pos++;
	  } else {
	    //
	    // Link reference
	    //

	    // do not allow nested reference links
	    if (state.linkLevel > 0) { return false; }

	    // [foo]  [bar]
	    //      ^^ optional whitespace (can include newlines)
	    for (; pos < max; pos++) {
	      code = state.src.charCodeAt(pos);
	      if (code !== 0x20 && code !== 0x0A) { break; }
	    }

	    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {
	      start = pos + 1;
	      pos = parseLinkLabel(state, pos);
	      if (pos >= 0) {
	        label = state.src.slice(start, pos++);
	      } else {
	        pos = start - 1;
	      }
	    }

	    // covers label === '' and label === undefined
	    // (collapsed reference link and shortcut reference link respectively)
	    if (!label) {
	      if (typeof label === 'undefined') {
	        pos = labelEnd + 1;
	      }
	      label = state.src.slice(labelStart, labelEnd);
	    }

	    ref = state.env.references[normalizeReference(label)];
	    if (!ref) {
	      state.pos = oldPos;
	      return false;
	    }
	    href = ref.href;
	    title = ref.title;
	  }

	  //
	  // We found the end of the link, and know for a fact it's a valid link;
	  // so all that's left to do is to call tokenizer.
	  //
	  if (!silent) {
	    state.pos = labelStart;
	    state.posMax = labelEnd;

	    if (isImage) {
	      state.push({
	        type: 'image',
	        src: href,
	        title: title,
	        alt: state.src.substr(labelStart, labelEnd - labelStart),
	        level: state.level
	      });
	    } else {
	      state.push({
	        type: 'link_open',
	        href: href,
	        title: title,
	        level: state.level++
	      });
	      state.linkLevel++;
	      state.parser.tokenize(state);
	      state.linkLevel--;
	      state.push({ type: 'link_close', level: --state.level });
	    }
	  }

	  state.pos = pos;
	  state.posMax = max;
	  return true;
	}

	// Process inline footnotes (^[...])


	function footnote_inline(state, silent) {
	  var labelStart,
	      labelEnd,
	      footnoteId,
	      oldLength,
	      max = state.posMax,
	      start = state.pos;

	  if (start + 2 >= max) { return false; }
	  if (state.src.charCodeAt(start) !== 0x5E/* ^ */) { return false; }
	  if (state.src.charCodeAt(start + 1) !== 0x5B/* [ */) { return false; }
	  if (state.level >= state.options.maxNesting) { return false; }

	  labelStart = start + 2;
	  labelEnd = parseLinkLabel(state, start + 1);

	  // parser failed to find ']', so it's not a valid note
	  if (labelEnd < 0) { return false; }

	  // We found the end of the link, and know for a fact it's a valid link;
	  // so all that's left to do is to call tokenizer.
	  //
	  if (!silent) {
	    if (!state.env.footnotes) { state.env.footnotes = {}; }
	    if (!state.env.footnotes.list) { state.env.footnotes.list = []; }
	    footnoteId = state.env.footnotes.list.length;

	    state.pos = labelStart;
	    state.posMax = labelEnd;

	    state.push({
	      type: 'footnote_ref',
	      id: footnoteId,
	      level: state.level
	    });
	    state.linkLevel++;
	    oldLength = state.tokens.length;
	    state.parser.tokenize(state);
	    state.env.footnotes.list[footnoteId] = { tokens: state.tokens.splice(oldLength) };
	    state.linkLevel--;
	  }

	  state.pos = labelEnd + 1;
	  state.posMax = max;
	  return true;
	}

	// Process footnote references ([^...])

	function footnote_ref(state, silent) {
	  var label,
	      pos,
	      footnoteId,
	      footnoteSubId,
	      max = state.posMax,
	      start = state.pos;

	  // should be at least 4 chars - "[^x]"
	  if (start + 3 > max) { return false; }

	  if (!state.env.footnotes || !state.env.footnotes.refs) { return false; }
	  if (state.src.charCodeAt(start) !== 0x5B/* [ */) { return false; }
	  if (state.src.charCodeAt(start + 1) !== 0x5E/* ^ */) { return false; }
	  if (state.level >= state.options.maxNesting) { return false; }

	  for (pos = start + 2; pos < max; pos++) {
	    if (state.src.charCodeAt(pos) === 0x20) { return false; }
	    if (state.src.charCodeAt(pos) === 0x0A) { return false; }
	    if (state.src.charCodeAt(pos) === 0x5D /* ] */) {
	      break;
	    }
	  }

	  if (pos === start + 2) { return false; } // no empty footnote labels
	  if (pos >= max) { return false; }
	  pos++;

	  label = state.src.slice(start + 2, pos - 1);
	  if (typeof state.env.footnotes.refs[':' + label] === 'undefined') { return false; }

	  if (!silent) {
	    if (!state.env.footnotes.list) { state.env.footnotes.list = []; }

	    if (state.env.footnotes.refs[':' + label] < 0) {
	      footnoteId = state.env.footnotes.list.length;
	      state.env.footnotes.list[footnoteId] = { label: label, count: 0 };
	      state.env.footnotes.refs[':' + label] = footnoteId;
	    } else {
	      footnoteId = state.env.footnotes.refs[':' + label];
	    }

	    footnoteSubId = state.env.footnotes.list[footnoteId].count;
	    state.env.footnotes.list[footnoteId].count++;

	    state.push({
	      type: 'footnote_ref',
	      id: footnoteId,
	      subId: footnoteSubId,
	      level: state.level
	    });
	  }

	  state.pos = pos;
	  state.posMax = max;
	  return true;
	}

	// List of valid url schemas, accorting to commonmark spec
	// http://jgm.github.io/CommonMark/spec.html#autolinks

	var url_schemas = [
	  'coap',
	  'doi',
	  'javascript',
	  'aaa',
	  'aaas',
	  'about',
	  'acap',
	  'cap',
	  'cid',
	  'crid',
	  'data',
	  'dav',
	  'dict',
	  'dns',
	  'file',
	  'ftp',
	  'geo',
	  'go',
	  'gopher',
	  'h323',
	  'http',
	  'https',
	  'iax',
	  'icap',
	  'im',
	  'imap',
	  'info',
	  'ipp',
	  'iris',
	  'iris.beep',
	  'iris.xpc',
	  'iris.xpcs',
	  'iris.lwz',
	  'ldap',
	  'mailto',
	  'mid',
	  'msrp',
	  'msrps',
	  'mtqp',
	  'mupdate',
	  'news',
	  'nfs',
	  'ni',
	  'nih',
	  'nntp',
	  'opaquelocktoken',
	  'pop',
	  'pres',
	  'rtsp',
	  'service',
	  'session',
	  'shttp',
	  'sieve',
	  'sip',
	  'sips',
	  'sms',
	  'snmp',
	  'soap.beep',
	  'soap.beeps',
	  'tag',
	  'tel',
	  'telnet',
	  'tftp',
	  'thismessage',
	  'tn3270',
	  'tip',
	  'tv',
	  'urn',
	  'vemmi',
	  'ws',
	  'wss',
	  'xcon',
	  'xcon-userid',
	  'xmlrpc.beep',
	  'xmlrpc.beeps',
	  'xmpp',
	  'z39.50r',
	  'z39.50s',
	  'adiumxtra',
	  'afp',
	  'afs',
	  'aim',
	  'apt',
	  'attachment',
	  'aw',
	  'beshare',
	  'bitcoin',
	  'bolo',
	  'callto',
	  'chrome',
	  'chrome-extension',
	  'com-eventbrite-attendee',
	  'content',
	  'cvs',
	  'dlna-playsingle',
	  'dlna-playcontainer',
	  'dtn',
	  'dvb',
	  'ed2k',
	  'facetime',
	  'feed',
	  'finger',
	  'fish',
	  'gg',
	  'git',
	  'gizmoproject',
	  'gtalk',
	  'hcp',
	  'icon',
	  'ipn',
	  'irc',
	  'irc6',
	  'ircs',
	  'itms',
	  'jar',
	  'jms',
	  'keyparc',
	  'lastfm',
	  'ldaps',
	  'magnet',
	  'maps',
	  'market',
	  'message',
	  'mms',
	  'ms-help',
	  'msnim',
	  'mumble',
	  'mvn',
	  'notes',
	  'oid',
	  'palm',
	  'paparazzi',
	  'platform',
	  'proxy',
	  'psyc',
	  'query',
	  'res',
	  'resource',
	  'rmi',
	  'rsync',
	  'rtmp',
	  'secondlife',
	  'sftp',
	  'sgn',
	  'skype',
	  'smb',
	  'soldat',
	  'spotify',
	  'ssh',
	  'steam',
	  'svn',
	  'teamspeak',
	  'things',
	  'udp',
	  'unreal',
	  'ut2004',
	  'ventrilo',
	  'view-source',
	  'webcal',
	  'wtai',
	  'wyciwyg',
	  'xfire',
	  'xri',
	  'ymsgr'
	];

	// Process autolinks '<protocol:...>'


	/*eslint max-len:0*/
	var EMAIL_RE    = /^<([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/;
	var AUTOLINK_RE = /^<([a-zA-Z.\-]{1,25}):([^<>\x00-\x20]*)>/;


	function autolink$1(state, silent) {
	  var tail, linkMatch, emailMatch, url, fullUrl, pos = state.pos;

	  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }

	  tail = state.src.slice(pos);

	  if (tail.indexOf('>') < 0) { return false; }

	  linkMatch = tail.match(AUTOLINK_RE);

	  if (linkMatch) {
	    if (url_schemas.indexOf(linkMatch[1].toLowerCase()) < 0) { return false; }

	    url = linkMatch[0].slice(1, -1);
	    fullUrl = normalizeLink(url);
	    if (!state.parser.validateLink(url)) { return false; }

	    if (!silent) {
	      state.push({
	        type: 'link_open',
	        href: fullUrl,
	        level: state.level
	      });
	      state.push({
	        type: 'text',
	        content: url,
	        level: state.level + 1
	      });
	      state.push({ type: 'link_close', level: state.level });
	    }

	    state.pos += linkMatch[0].length;
	    return true;
	  }

	  emailMatch = tail.match(EMAIL_RE);

	  if (emailMatch) {

	    url = emailMatch[0].slice(1, -1);

	    fullUrl = normalizeLink('mailto:' + url);
	    if (!state.parser.validateLink(fullUrl)) { return false; }

	    if (!silent) {
	      state.push({
	        type: 'link_open',
	        href: fullUrl,
	        level: state.level
	      });
	      state.push({
	        type: 'text',
	        content: url,
	        level: state.level + 1
	      });
	      state.push({ type: 'link_close', level: state.level });
	    }

	    state.pos += emailMatch[0].length;
	    return true;
	  }

	  return false;
	}

	// Regexps to match html elements

	function replace$1$1(regex, options) {
	  regex = regex.source;
	  options = options || '';

	  return function self(name, val) {
	    if (!name) {
	      return new RegExp(regex, options);
	    }
	    val = val.source || val;
	    regex = regex.replace(name, val);
	    return self;
	  };
	}


	var attr_name     = /[a-zA-Z_:][a-zA-Z0-9:._-]*/;

	var unquoted      = /[^"'=<>`\x00-\x20]+/;
	var single_quoted = /'[^']*'/;
	var double_quoted = /"[^"]*"/;

	/*eslint no-spaced-func:0*/
	var attr_value  = replace$1$1(/(?:unquoted|single_quoted|double_quoted)/)
	                    ('unquoted', unquoted)
	                    ('single_quoted', single_quoted)
	                    ('double_quoted', double_quoted)
	                    ();

	var attribute$1   = replace$1$1(/(?:\s+attr_name(?:\s*=\s*attr_value)?)/)
	                    ('attr_name', attr_name)
	                    ('attr_value', attr_value)
	                    ();

	var open_tag    = replace$1$1(/<[A-Za-z][A-Za-z0-9]*attribute*\s*\/?>/)
	                    ('attribute', attribute$1)
	                    ();

	var close_tag   = /<\/[A-Za-z][A-Za-z0-9]*\s*>/;
	var comment$4     = /<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->/;
	var processing$1  = /<[?].*?[?]>/;
	var declaration = /<![A-Z]+\s+[^>]*>/;
	var cdata       = /<!\[CDATA\[[\s\S]*?\]\]>/;

	var HTML_TAG_RE = replace$1$1(/^(?:open_tag|close_tag|comment|processing|declaration|cdata)/)
	  ('open_tag', open_tag)
	  ('close_tag', close_tag)
	  ('comment', comment$4)
	  ('processing', processing$1)
	  ('declaration', declaration)
	  ('cdata', cdata)
	  ();

	// Process html tags


	function isLetter$2(ch) {
	  /*eslint no-bitwise:0*/
	  var lc = ch | 0x20; // to lower case
	  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */);
	}


	function htmltag(state, silent) {
	  var ch, match, max, pos = state.pos;

	  if (!state.options.html) { return false; }

	  // Check start
	  max = state.posMax;
	  if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||
	      pos + 2 >= max) {
	    return false;
	  }

	  // Quick fail on second char
	  ch = state.src.charCodeAt(pos + 1);
	  if (ch !== 0x21/* ! */ &&
	      ch !== 0x3F/* ? */ &&
	      ch !== 0x2F/* / */ &&
	      !isLetter$2(ch)) {
	    return false;
	  }

	  match = state.src.slice(pos).match(HTML_TAG_RE);
	  if (!match) { return false; }

	  if (!silent) {
	    state.push({
	      type: 'htmltag',
	      content: state.src.slice(pos, pos + match[0].length),
	      level: state.level
	    });
	  }
	  state.pos += match[0].length;
	  return true;
	}

	// Process html entity - &#123;, &#xAF;, &quot;, ...


	var DIGITAL_RE = /^&#((?:x[a-f0-9]{1,8}|[0-9]{1,8}));/i;
	var NAMED_RE   = /^&([a-z][a-z0-9]{1,31});/i;


	function entity(state, silent) {
	  var ch, code, match, pos = state.pos, max = state.posMax;

	  if (state.src.charCodeAt(pos) !== 0x26/* & */) { return false; }

	  if (pos + 1 < max) {
	    ch = state.src.charCodeAt(pos + 1);

	    if (ch === 0x23 /* # */) {
	      match = state.src.slice(pos).match(DIGITAL_RE);
	      if (match) {
	        if (!silent) {
	          code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);
	          state.pending += isValidEntityCode(code) ? fromCodePoint$1(code) : fromCodePoint$1(0xFFFD);
	        }
	        state.pos += match[0].length;
	        return true;
	      }
	    } else {
	      match = state.src.slice(pos).match(NAMED_RE);
	      if (match) {
	        var decoded = decodeEntity(match[1]);
	        if (match[1] !== decoded) {
	          if (!silent) { state.pending += decoded; }
	          state.pos += match[0].length;
	          return true;
	        }
	      }
	    }
	  }

	  if (!silent) { state.pending += '&'; }
	  state.pos++;
	  return true;
	}

	/**
	 * Inline Parser `rules`
	 */

	var _rules$2 = [
	  [ 'text',            text$9 ],
	  [ 'newline',         newline ],
	  [ 'escape',          escape ],
	  [ 'backticks',       backticks ],
	  [ 'del',             del ],
	  [ 'ins',             ins ],
	  [ 'mark',            mark$1 ],
	  [ 'emphasis',        emphasis$2 ],
	  [ 'sub',             sub ],
	  [ 'sup',             sup ],
	  [ 'links',           links ],
	  [ 'footnote_inline', footnote_inline ],
	  [ 'footnote_ref',    footnote_ref ],
	  [ 'autolink',        autolink$1 ],
	  [ 'htmltag',         htmltag ],
	  [ 'entity',          entity ]
	];

	/**
	 * Inline Parser class. Note that link validation is stricter
	 * in Remarkable than what is specified by CommonMark. If you
	 * want to change this you can use a custom validator.
	 *
	 * @api private
	 */

	function ParserInline() {
	  this.ruler = new Ruler();
	  for (var i = 0; i < _rules$2.length; i++) {
	    this.ruler.push(_rules$2[i][0], _rules$2[i][1]);
	  }

	  // Can be overridden with a custom validator
	  this.validateLink = validateLink;
	}

	/**
	 * Skip a single token by running all rules in validation mode.
	 * Returns `true` if any rule reports success.
	 *
	 * @param  {Object} `state`
	 * @api privage
	 */

	ParserInline.prototype.skipToken = function (state) {
	  var rules = this.ruler.getRules('');
	  var len = rules.length;
	  var pos = state.pos;
	  var i, cached_pos;

	  if ((cached_pos = state.cacheGet(pos)) > 0) {
	    state.pos = cached_pos;
	    return;
	  }

	  for (i = 0; i < len; i++) {
	    if (rules[i](state, true)) {
	      state.cacheSet(pos, state.pos);
	      return;
	    }
	  }

	  state.pos++;
	  state.cacheSet(pos, state.pos);
	};

	/**
	 * Generate tokens for the given input range.
	 *
	 * @param  {Object} `state`
	 * @api private
	 */

	ParserInline.prototype.tokenize = function (state) {
	  var rules = this.ruler.getRules('');
	  var len = rules.length;
	  var end = state.posMax;
	  var ok, i;

	  while (state.pos < end) {

	    // Try all possible rules.
	    // On success, the rule should:
	    //
	    // - update `state.pos`
	    // - update `state.tokens`
	    // - return true
	    for (i = 0; i < len; i++) {
	      ok = rules[i](state, false);

	      if (ok) {
	        break;
	      }
	    }

	    if (ok) {
	      if (state.pos >= end) { break; }
	      continue;
	    }

	    state.pending += state.src[state.pos++];
	  }

	  if (state.pending) {
	    state.pushPending();
	  }
	};

	/**
	 * Parse the given input string.
	 *
	 * @param  {String} `str`
	 * @param  {Object} `options`
	 * @param  {Object} `env`
	 * @param  {Array} `outTokens`
	 * @api private
	 */

	ParserInline.prototype.parse = function (str, options, env, outTokens) {
	  var state = new StateInline(str, this, options, env, outTokens);
	  this.tokenize(state);
	};

	/**
	 * Validate the given `url` by checking for bad protocols.
	 *
	 * @param  {String} `url`
	 * @return {Boolean}
	 */

	function validateLink(url) {
	  var BAD_PROTOCOLS = [ 'vbscript', 'javascript', 'file', 'data' ];
	  var str = url.trim().toLowerCase();
	  // Care about digital entities "javascript&#x3A;alert(1)"
	  str = replaceEntities(str);
	  if (str.indexOf(':') !== -1 && BAD_PROTOCOLS.indexOf(str.split(':')[0]) !== -1) {
	    return false;
	  }
	  return true;
	}

	// Remarkable default options

	var defaultConfig = {
	  options: {
	    html:         false,        // Enable HTML tags in source
	    xhtmlOut:     false,        // Use '/' to close single tags (<br />)
	    breaks:       false,        // Convert '\n' in paragraphs into <br>
	    langPrefix:   'language-',  // CSS language prefix for fenced blocks
	    linkTarget:   '',           // set target to open link in

	    // Enable some language-neutral replacements + quotes beautification
	    typographer:  false,

	    // Double + single quotes replacement pairs, when typographer enabled,
	    // and smartquotes on. Set doubles to '«»' for Russian, '„“' for German.
	    quotes: '“”‘’',

	    // Highlighter function. Should return escaped HTML,
	    // or '' if input not changed
	    //
	    // function (/*str, lang*/) { return ''; }
	    //
	    highlight: null,

	    maxNesting:   20            // Internal protection, recursion limit
	  },

	  components: {

	    core: {
	      rules: [
	        'block',
	        'inline',
	        'references',
	        'replacements',
	        'smartquotes',
	        'references',
	        'abbr2',
	        'footnote_tail'
	      ]
	    },

	    block: {
	      rules: [
	        'blockquote',
	        'code',
	        'fences',
	        'footnote',
	        'heading',
	        'hr',
	        'htmlblock',
	        'lheading',
	        'list',
	        'paragraph',
	        'table'
	      ]
	    },

	    inline: {
	      rules: [
	        'autolink',
	        'backticks',
	        'del',
	        'emphasis',
	        'entity',
	        'escape',
	        'footnote_ref',
	        'htmltag',
	        'links',
	        'newline',
	        'text'
	      ]
	    }
	  }
	};

	// Remarkable default options

	var fullConfig = {
	  options: {
	    html:         false,        // Enable HTML tags in source
	    xhtmlOut:     false,        // Use '/' to close single tags (<br />)
	    breaks:       false,        // Convert '\n' in paragraphs into <br>
	    langPrefix:   'language-',  // CSS language prefix for fenced blocks
	    linkTarget:   '',           // set target to open link in

	    // Enable some language-neutral replacements + quotes beautification
	    typographer:  false,

	    // Double + single quotes replacement pairs, when typographer enabled,
	    // and smartquotes on. Set doubles to '«»' for Russian, '„“' for German.
	    quotes:       '“”‘’',

	    // Highlighter function. Should return escaped HTML,
	    // or '' if input not changed
	    //
	    // function (/*str, lang*/) { return ''; }
	    //
	    highlight:     null,

	    maxNesting:    20            // Internal protection, recursion limit
	  },

	  components: {
	    // Don't restrict core/block/inline rules
	    core: {},
	    block: {},
	    inline: {}
	  }
	};

	// Commonmark default options

	var commonmarkConfig = {
	  options: {
	    html:         true,         // Enable HTML tags in source
	    xhtmlOut:     true,         // Use '/' to close single tags (<br />)
	    breaks:       false,        // Convert '\n' in paragraphs into <br>
	    langPrefix:   'language-',  // CSS language prefix for fenced blocks
	    linkTarget:   '',           // set target to open link in

	    // Enable some language-neutral replacements + quotes beautification
	    typographer:  false,

	    // Double + single quotes replacement pairs, when typographer enabled,
	    // and smartquotes on. Set doubles to '«»' for Russian, '„“' for German.
	    quotes: '“”‘’',

	    // Highlighter function. Should return escaped HTML,
	    // or '' if input not changed
	    //
	    // function (/*str, lang*/) { return ''; }
	    //
	    highlight: null,

	    maxNesting:   20            // Internal protection, recursion limit
	  },

	  components: {

	    core: {
	      rules: [
	        'block',
	        'inline',
	        'references',
	        'abbr2'
	      ]
	    },

	    block: {
	      rules: [
	        'blockquote',
	        'code',
	        'fences',
	        'heading',
	        'hr',
	        'htmlblock',
	        'lheading',
	        'list',
	        'paragraph'
	      ]
	    },

	    inline: {
	      rules: [
	        'autolink',
	        'backticks',
	        'emphasis',
	        'entity',
	        'escape',
	        'htmltag',
	        'links',
	        'newline',
	        'text'
	      ]
	    }
	  }
	};

	/**
	 * Preset configs
	 */

	var config = {
	  'default': defaultConfig,
	  'full': fullConfig,
	  'commonmark': commonmarkConfig
	};

	/**
	 * The `StateCore` class manages state.
	 *
	 * @param {Object} `instance` Remarkable instance
	 * @param {String} `str` Markdown string
	 * @param {Object} `env`
	 */

	function StateCore(instance, str, env) {
	  this.src = str;
	  this.env = env;
	  this.options = instance.options;
	  this.tokens = [];
	  this.inlineMode = false;

	  this.inline = instance.inline;
	  this.block = instance.block;
	  this.renderer = instance.renderer;
	  this.typographer = instance.typographer;
	}

	/**
	 * The main `Remarkable` class. Create an instance of
	 * `Remarkable` with a `preset` and/or `options`.
	 *
	 * @param {String} `preset` If no preset is given, `default` is used.
	 * @param {Object} `options`
	 */

	function Remarkable(preset, options) {
	  if (typeof preset !== 'string') {
	    options = preset;
	    preset = 'default';
	  }

	  if (options && options.linkify != null) {
	    console.warn(
	      'linkify option is removed. Use linkify plugin instead:\n\n' +
	      'import Remarkable from \'remarkable\';\n' +
	      'import linkify from \'remarkable/linkify\';\n' +
	      'new Remarkable().use(linkify)\n'
	    );
	  }

	  this.inline   = new ParserInline();
	  this.block    = new ParserBlock();
	  this.core     = new Core();
	  this.renderer = new Renderer();
	  this.ruler    = new Ruler();

	  this.options  = {};
	  this.configure(config[preset]);
	  this.set(options || {});
	}

	/**
	 * Set options as an alternative to passing them
	 * to the constructor.
	 *
	 * ```js
	 * md.set({typographer: true});
	 * ```
	 * @param {Object} `options`
	 * @api public
	 */

	Remarkable.prototype.set = function (options) {
	  assign(this.options, options);
	};

	/**
	 * Batch loader for components rules states, and options
	 *
	 * @param  {Object} `presets`
	 */

	Remarkable.prototype.configure = function (presets) {
	  var self = this;

	  if (!presets) { throw new Error('Wrong `remarkable` preset, check name/content'); }
	  if (presets.options) { self.set(presets.options); }
	  if (presets.components) {
	    Object.keys(presets.components).forEach(function (name) {
	      if (presets.components[name].rules) {
	        self[name].ruler.enable(presets.components[name].rules, true);
	      }
	    });
	  }
	};

	/**
	 * Use a plugin.
	 *
	 * ```js
	 * var md = new Remarkable();
	 *
	 * md.use(plugin1)
	 *   .use(plugin2, opts)
	 *   .use(plugin3);
	 * ```
	 *
	 * @param  {Function} `plugin`
	 * @param  {Object} `options`
	 * @return {Object} `Remarkable` for chaining
	 */

	Remarkable.prototype.use = function (plugin, options) {
	  plugin(this, options);
	  return this;
	};


	/**
	 * Parse the input `string` and return a tokens array.
	 * Modifies `env` with definitions data.
	 *
	 * @param  {String} `string`
	 * @param  {Object} `env`
	 * @return {Array} Array of tokens
	 */

	Remarkable.prototype.parse = function (str, env) {
	  var state = new StateCore(this, str, env);
	  this.core.process(state);
	  return state.tokens;
	};

	/**
	 * The main `.render()` method that does all the magic :)
	 *
	 * @param  {String} `string`
	 * @param  {Object} `env`
	 * @return {String} Rendered HTML.
	 */

	Remarkable.prototype.render = function (str, env) {
	  env = env || {};
	  return this.renderer.render(this.parse(str, env), this.options, env);
	};

	/**
	 * Parse the given content `string` as a single string.
	 *
	 * @param  {String} `string`
	 * @param  {Object} `env`
	 * @return {Array} Array of tokens
	 */

	Remarkable.prototype.parseInline = function (str, env) {
	  var state = new StateCore(this, str, env);
	  state.inlineMode = true;
	  this.core.process(state);
	  return state.tokens;
	};

	/**
	 * Render a single content `string`, without wrapping it
	 * to paragraphs
	 *
	 * @param  {String} `str`
	 * @param  {Object} `env`
	 * @return {String}
	 */

	Remarkable.prototype.renderInline = function (str, env) {
	  env = env || {};
	  return this.renderer.render(this.parseInline(str, env), this.options, env);
	};

	function getCookie(name) {
	  var value;
	  if (document.cookie && document.cookie !== '') {
	    var all_cookies = document.cookie.split(';');
	    var _iterator = _createForOfIteratorHelper(all_cookies),
	      _step;
	    try {
	      for (_iterator.s(); !(_step = _iterator.n()).done;) {
	        var cookie = _step.value;
	        var content = cookie.trim();
	        if (content.slice(0, name.length + 1) === name + '=') {
	          value = decodeURIComponent(content.slice(name.length + 1));
	          break;
	        }
	      }
	    } catch (err) {
	      _iterator.e(err);
	    } finally {
	      _iterator.f();
	    }
	  }
	  return value;
	}

	function _extends() {
	  _extends = Object.assign ? Object.assign.bind() : function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];
	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }
	    return target;
	  };
	  return _extends.apply(this, arguments);
	}

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;
	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }
	  return target;
	}

	function ok$3() {}

	function unreachable() {}

	/**
	 * @typedef Options
	 *   Configuration for `stringify`.
	 * @property {boolean} [padLeft=true]
	 *   Whether to pad a space before a token.
	 * @property {boolean} [padRight=false]
	 *   Whether to pad a space after a token.
	 */

	/**
	 * @typedef {Options} StringifyOptions
	 *   Please use `StringifyOptions` instead.
	 */

	/**
	 * Parse comma-separated tokens to an array.
	 *
	 * @param {string} value
	 *   Comma-separated tokens.
	 * @returns {Array<string>}
	 *   List of tokens.
	 */
	function parse$5(value) {
	  /** @type {Array<string>} */
	  const tokens = [];
	  const input = String(value || '');
	  let index = input.indexOf(',');
	  let start = 0;
	  /** @type {boolean} */
	  let end = false;

	  while (!end) {
	    if (index === -1) {
	      index = input.length;
	      end = true;
	    }

	    const token = input.slice(start, index).trim();

	    if (token || !end) {
	      tokens.push(token);
	    }

	    start = index + 1;
	    index = input.indexOf(',', start);
	  }

	  return tokens
	}

	/**
	 * Serialize an array of strings or numbers to comma-separated tokens.
	 *
	 * @param {Array<string|number>} values
	 *   List of tokens.
	 * @param {Options} [options]
	 *   Configuration for `stringify` (optional).
	 * @returns {string}
	 *   Comma-separated tokens.
	 */
	function stringify$2(values, options) {
	  const settings = options || {};

	  // Ensure the last empty entry is seen.
	  const input = values[values.length - 1] === '' ? [...values, ''] : values;

	  return input
	    .join(
	      (settings.padRight ? ' ' : '') +
	        ',' +
	        (settings.padLeft === false ? '' : ' ')
	    )
	    .trim()
	}

	/**
	 * @typedef Options
	 *   Configuration.
	 * @property {boolean | null | undefined} [jsx=false]
	 *   Support JSX identifiers (default: `false`).
	 */

	const nameRe = /^[$_\p{ID_Start}][$_\u{200C}\u{200D}\p{ID_Continue}]*$/u;
	const nameReJsx = /^[$_\p{ID_Start}][-$_\u{200C}\u{200D}\p{ID_Continue}]*$/u;

	/** @type {Options} */
	const emptyOptions$8 = {};

	/**
	 * Checks if the given value is a valid identifier name.
	 *
	 * @param {string} name
	 *   Identifier to check.
	 * @param {Options | null | undefined} [options]
	 *   Configuration (optional).
	 * @returns {boolean}
	 *   Whether `name` can be an identifier.
	 */
	function name$1(name, options) {
	  const settings = options || emptyOptions$8;
	  const re = settings.jsx ? nameReJsx : nameRe;
	  return re.test(name)
	}

	/**
	 * @typedef {import('hast').Nodes} Nodes
	 */

	// HTML whitespace expression.
	// See <https://infra.spec.whatwg.org/#ascii-whitespace>.
	const re = /[ \t\n\f\r]/g;

	/**
	 * Check if the given value is *inter-element whitespace*.
	 *
	 * @param {Nodes | string} thing
	 *   Thing to check (`Node` or `string`).
	 * @returns {boolean}
	 *   Whether the `value` is inter-element whitespace (`boolean`): consisting of
	 *   zero or more of space, tab (`\t`), line feed (`\n`), carriage return
	 *   (`\r`), or form feed (`\f`); if a node is passed it must be a `Text` node,
	 *   whose `value` field is checked.
	 */
	function whitespace$1(thing) {
	  return typeof thing === 'object'
	    ? thing.type === 'text'
	      ? empty$3(thing.value)
	      : false
	    : empty$3(thing)
	}

	/**
	 * @param {string} value
	 * @returns {boolean}
	 */
	function empty$3(value) {
	  return value.replace(re, '') === ''
	}

	/**
	 * @typedef {import('./info.js').Info} Info
	 * @typedef {Record<string, Info>} Properties
	 * @typedef {Record<string, string>} Normal
	 */

	class Schema {
	  /**
	   * @constructor
	   * @param {Properties} property
	   * @param {Normal} normal
	   * @param {string} [space]
	   */
	  constructor(property, normal, space) {
	    this.property = property;
	    this.normal = normal;
	    if (space) {
	      this.space = space;
	    }
	  }
	}

	/** @type {Properties} */
	Schema.prototype.property = {};
	/** @type {Normal} */
	Schema.prototype.normal = {};
	/** @type {string|null} */
	Schema.prototype.space = null;

	/**
	 * @typedef {import('./schema.js').Properties} Properties
	 * @typedef {import('./schema.js').Normal} Normal
	 */


	/**
	 * @param {Schema[]} definitions
	 * @param {string} [space]
	 * @returns {Schema}
	 */
	function merge(definitions, space) {
	  /** @type {Properties} */
	  const property = {};
	  /** @type {Normal} */
	  const normal = {};
	  let index = -1;

	  while (++index < definitions.length) {
	    Object.assign(property, definitions[index].property);
	    Object.assign(normal, definitions[index].normal);
	  }

	  return new Schema(property, normal, space)
	}

	/**
	 * @param {string} value
	 * @returns {string}
	 */
	function normalize$1(value) {
	  return value.toLowerCase()
	}

	class Info {
	  /**
	   * @constructor
	   * @param {string} property
	   * @param {string} attribute
	   */
	  constructor(property, attribute) {
	    /** @type {string} */
	    this.property = property;
	    /** @type {string} */
	    this.attribute = attribute;
	  }
	}

	/** @type {string|null} */
	Info.prototype.space = null;
	Info.prototype.boolean = false;
	Info.prototype.booleanish = false;
	Info.prototype.overloadedBoolean = false;
	Info.prototype.number = false;
	Info.prototype.commaSeparated = false;
	Info.prototype.spaceSeparated = false;
	Info.prototype.commaOrSpaceSeparated = false;
	Info.prototype.mustUseProperty = false;
	Info.prototype.defined = false;

	let powers = 0;

	const boolean = increment();
	const booleanish = increment();
	const overloadedBoolean = increment();
	const number = increment();
	const spaceSeparated = increment();
	const commaSeparated = increment();
	const commaOrSpaceSeparated = increment();

	function increment() {
	  return 2 ** ++powers
	}

	const types = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
		__proto__: null,
		boolean,
		booleanish,
		commaOrSpaceSeparated,
		commaSeparated,
		number,
		overloadedBoolean,
		spaceSeparated
	}, Symbol.toStringTag, { value: 'Module' }));

	/** @type {Array<keyof types>} */
	// @ts-expect-error: hush.
	const checks = Object.keys(types);

	class DefinedInfo extends Info {
	  /**
	   * @constructor
	   * @param {string} property
	   * @param {string} attribute
	   * @param {number|null} [mask]
	   * @param {string} [space]
	   */
	  constructor(property, attribute, mask, space) {
	    let index = -1;

	    super(property, attribute);

	    mark(this, 'space', space);

	    if (typeof mask === 'number') {
	      while (++index < checks.length) {
	        const check = checks[index];
	        mark(this, checks[index], (mask & types[check]) === types[check]);
	      }
	    }
	  }
	}

	DefinedInfo.prototype.defined = true;

	/**
	 * @param {DefinedInfo} values
	 * @param {string} key
	 * @param {unknown} value
	 */
	function mark(values, key, value) {
	  if (value) {
	    // @ts-expect-error: assume `value` matches the expected value of `key`.
	    values[key] = value;
	  }
	}

	/**
	 * @typedef {import('./schema.js').Properties} Properties
	 * @typedef {import('./schema.js').Normal} Normal
	 *
	 * @typedef {Record<string, string>} Attributes
	 *
	 * @typedef {Object} Definition
	 * @property {Record<string, number|null>} properties
	 * @property {(attributes: Attributes, property: string) => string} transform
	 * @property {string} [space]
	 * @property {Attributes} [attributes]
	 * @property {Array<string>} [mustUseProperty]
	 */


	const own$g = {}.hasOwnProperty;

	/**
	 * @param {Definition} definition
	 * @returns {Schema}
	 */
	function create$1(definition) {
	  /** @type {Properties} */
	  const property = {};
	  /** @type {Normal} */
	  const normal = {};
	  /** @type {string} */
	  let prop;

	  for (prop in definition.properties) {
	    if (own$g.call(definition.properties, prop)) {
	      const value = definition.properties[prop];
	      const info = new DefinedInfo(
	        prop,
	        definition.transform(definition.attributes || {}, prop),
	        value,
	        definition.space
	      );

	      if (
	        definition.mustUseProperty &&
	        definition.mustUseProperty.includes(prop)
	      ) {
	        info.mustUseProperty = true;
	      }

	      property[prop] = info;

	      normal[normalize$1(prop)] = prop;
	      normal[normalize$1(info.attribute)] = prop;
	    }
	  }

	  return new Schema(property, normal, definition.space)
	}

	const xlink = create$1({
	  space: 'xlink',
	  transform(_, prop) {
	    return 'xlink:' + prop.slice(5).toLowerCase()
	  },
	  properties: {
	    xLinkActuate: null,
	    xLinkArcRole: null,
	    xLinkHref: null,
	    xLinkRole: null,
	    xLinkShow: null,
	    xLinkTitle: null,
	    xLinkType: null
	  }
	});

	const xml = create$1({
	  space: 'xml',
	  transform(_, prop) {
	    return 'xml:' + prop.slice(3).toLowerCase()
	  },
	  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}
	});

	/**
	 * @param {Record<string, string>} attributes
	 * @param {string} attribute
	 * @returns {string}
	 */
	function caseSensitiveTransform(attributes, attribute) {
	  return attribute in attributes ? attributes[attribute] : attribute
	}

	/**
	 * @param {Record<string, string>} attributes
	 * @param {string} property
	 * @returns {string}
	 */
	function caseInsensitiveTransform(attributes, property) {
	  return caseSensitiveTransform(attributes, property.toLowerCase())
	}

	const xmlns = create$1({
	  space: 'xmlns',
	  attributes: {xmlnsxlink: 'xmlns:xlink'},
	  transform: caseInsensitiveTransform,
	  properties: {xmlns: null, xmlnsXLink: null}
	});

	const aria = create$1({
	  transform(_, prop) {
	    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()
	  },
	  properties: {
	    ariaActiveDescendant: null,
	    ariaAtomic: booleanish,
	    ariaAutoComplete: null,
	    ariaBusy: booleanish,
	    ariaChecked: booleanish,
	    ariaColCount: number,
	    ariaColIndex: number,
	    ariaColSpan: number,
	    ariaControls: spaceSeparated,
	    ariaCurrent: null,
	    ariaDescribedBy: spaceSeparated,
	    ariaDetails: null,
	    ariaDisabled: booleanish,
	    ariaDropEffect: spaceSeparated,
	    ariaErrorMessage: null,
	    ariaExpanded: booleanish,
	    ariaFlowTo: spaceSeparated,
	    ariaGrabbed: booleanish,
	    ariaHasPopup: null,
	    ariaHidden: booleanish,
	    ariaInvalid: null,
	    ariaKeyShortcuts: null,
	    ariaLabel: null,
	    ariaLabelledBy: spaceSeparated,
	    ariaLevel: number,
	    ariaLive: null,
	    ariaModal: booleanish,
	    ariaMultiLine: booleanish,
	    ariaMultiSelectable: booleanish,
	    ariaOrientation: null,
	    ariaOwns: spaceSeparated,
	    ariaPlaceholder: null,
	    ariaPosInSet: number,
	    ariaPressed: booleanish,
	    ariaReadOnly: booleanish,
	    ariaRelevant: null,
	    ariaRequired: booleanish,
	    ariaRoleDescription: spaceSeparated,
	    ariaRowCount: number,
	    ariaRowIndex: number,
	    ariaRowSpan: number,
	    ariaSelected: booleanish,
	    ariaSetSize: number,
	    ariaSort: null,
	    ariaValueMax: number,
	    ariaValueMin: number,
	    ariaValueNow: number,
	    ariaValueText: null,
	    role: null
	  }
	});

	const html$5 = create$1({
	  space: 'html',
	  attributes: {
	    acceptcharset: 'accept-charset',
	    classname: 'class',
	    htmlfor: 'for',
	    httpequiv: 'http-equiv'
	  },
	  transform: caseInsensitiveTransform,
	  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],
	  properties: {
	    // Standard Properties.
	    abbr: null,
	    accept: commaSeparated,
	    acceptCharset: spaceSeparated,
	    accessKey: spaceSeparated,
	    action: null,
	    allow: null,
	    allowFullScreen: boolean,
	    allowPaymentRequest: boolean,
	    allowUserMedia: boolean,
	    alt: null,
	    as: null,
	    async: boolean,
	    autoCapitalize: null,
	    autoComplete: spaceSeparated,
	    autoFocus: boolean,
	    autoPlay: boolean,
	    blocking: spaceSeparated,
	    capture: boolean,
	    charSet: null,
	    checked: boolean,
	    cite: null,
	    className: spaceSeparated,
	    cols: number,
	    colSpan: null,
	    content: null,
	    contentEditable: booleanish,
	    controls: boolean,
	    controlsList: spaceSeparated,
	    coords: number | commaSeparated,
	    crossOrigin: null,
	    data: null,
	    dateTime: null,
	    decoding: null,
	    default: boolean,
	    defer: boolean,
	    dir: null,
	    dirName: null,
	    disabled: boolean,
	    download: overloadedBoolean,
	    draggable: booleanish,
	    encType: null,
	    enterKeyHint: null,
	    fetchPriority: null,
	    form: null,
	    formAction: null,
	    formEncType: null,
	    formMethod: null,
	    formNoValidate: boolean,
	    formTarget: null,
	    headers: spaceSeparated,
	    height: number,
	    hidden: boolean,
	    high: number,
	    href: null,
	    hrefLang: null,
	    htmlFor: spaceSeparated,
	    httpEquiv: spaceSeparated,
	    id: null,
	    imageSizes: null,
	    imageSrcSet: null,
	    inert: boolean,
	    inputMode: null,
	    integrity: null,
	    is: null,
	    isMap: boolean,
	    itemId: null,
	    itemProp: spaceSeparated,
	    itemRef: spaceSeparated,
	    itemScope: boolean,
	    itemType: spaceSeparated,
	    kind: null,
	    label: null,
	    lang: null,
	    language: null,
	    list: null,
	    loading: null,
	    loop: boolean,
	    low: number,
	    manifest: null,
	    max: null,
	    maxLength: number,
	    media: null,
	    method: null,
	    min: null,
	    minLength: number,
	    multiple: boolean,
	    muted: boolean,
	    name: null,
	    nonce: null,
	    noModule: boolean,
	    noValidate: boolean,
	    onAbort: null,
	    onAfterPrint: null,
	    onAuxClick: null,
	    onBeforeMatch: null,
	    onBeforePrint: null,
	    onBeforeToggle: null,
	    onBeforeUnload: null,
	    onBlur: null,
	    onCancel: null,
	    onCanPlay: null,
	    onCanPlayThrough: null,
	    onChange: null,
	    onClick: null,
	    onClose: null,
	    onContextLost: null,
	    onContextMenu: null,
	    onContextRestored: null,
	    onCopy: null,
	    onCueChange: null,
	    onCut: null,
	    onDblClick: null,
	    onDrag: null,
	    onDragEnd: null,
	    onDragEnter: null,
	    onDragExit: null,
	    onDragLeave: null,
	    onDragOver: null,
	    onDragStart: null,
	    onDrop: null,
	    onDurationChange: null,
	    onEmptied: null,
	    onEnded: null,
	    onError: null,
	    onFocus: null,
	    onFormData: null,
	    onHashChange: null,
	    onInput: null,
	    onInvalid: null,
	    onKeyDown: null,
	    onKeyPress: null,
	    onKeyUp: null,
	    onLanguageChange: null,
	    onLoad: null,
	    onLoadedData: null,
	    onLoadedMetadata: null,
	    onLoadEnd: null,
	    onLoadStart: null,
	    onMessage: null,
	    onMessageError: null,
	    onMouseDown: null,
	    onMouseEnter: null,
	    onMouseLeave: null,
	    onMouseMove: null,
	    onMouseOut: null,
	    onMouseOver: null,
	    onMouseUp: null,
	    onOffline: null,
	    onOnline: null,
	    onPageHide: null,
	    onPageShow: null,
	    onPaste: null,
	    onPause: null,
	    onPlay: null,
	    onPlaying: null,
	    onPopState: null,
	    onProgress: null,
	    onRateChange: null,
	    onRejectionHandled: null,
	    onReset: null,
	    onResize: null,
	    onScroll: null,
	    onScrollEnd: null,
	    onSecurityPolicyViolation: null,
	    onSeeked: null,
	    onSeeking: null,
	    onSelect: null,
	    onSlotChange: null,
	    onStalled: null,
	    onStorage: null,
	    onSubmit: null,
	    onSuspend: null,
	    onTimeUpdate: null,
	    onToggle: null,
	    onUnhandledRejection: null,
	    onUnload: null,
	    onVolumeChange: null,
	    onWaiting: null,
	    onWheel: null,
	    open: boolean,
	    optimum: number,
	    pattern: null,
	    ping: spaceSeparated,
	    placeholder: null,
	    playsInline: boolean,
	    popover: null,
	    popoverTarget: null,
	    popoverTargetAction: null,
	    poster: null,
	    preload: null,
	    readOnly: boolean,
	    referrerPolicy: null,
	    rel: spaceSeparated,
	    required: boolean,
	    reversed: boolean,
	    rows: number,
	    rowSpan: number,
	    sandbox: spaceSeparated,
	    scope: null,
	    scoped: boolean,
	    seamless: boolean,
	    selected: boolean,
	    shadowRootDelegatesFocus: boolean,
	    shadowRootMode: null,
	    shape: null,
	    size: number,
	    sizes: null,
	    slot: null,
	    span: number,
	    spellCheck: booleanish,
	    src: null,
	    srcDoc: null,
	    srcLang: null,
	    srcSet: null,
	    start: number,
	    step: null,
	    style: null,
	    tabIndex: number,
	    target: null,
	    title: null,
	    translate: null,
	    type: null,
	    typeMustMatch: boolean,
	    useMap: null,
	    value: booleanish,
	    width: number,
	    wrap: null,

	    // Legacy.
	    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
	    align: null, // Several. Use CSS `text-align` instead,
	    aLink: null, // `<body>`. Use CSS `a:active {color}` instead
	    archive: spaceSeparated, // `<object>`. List of URIs to archives
	    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`
	    background: null, // `<body>`. Use CSS `background-image` instead
	    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead
	    border: number, // `<table>`. Use CSS `border-width` instead,
	    borderColor: null, // `<table>`. Use CSS `border-color` instead,
	    bottomMargin: number, // `<body>`
	    cellPadding: null, // `<table>`
	    cellSpacing: null, // `<table>`
	    char: null, // Several table elements. When `align=char`, sets the character to align on
	    charOff: null, // Several table elements. When `char`, offsets the alignment
	    classId: null, // `<object>`
	    clear: null, // `<br>`. Use CSS `clear` instead
	    code: null, // `<object>`
	    codeBase: null, // `<object>`
	    codeType: null, // `<object>`
	    color: null, // `<font>` and `<hr>`. Use CSS instead
	    compact: boolean, // Lists. Use CSS to reduce space between items instead
	    declare: boolean, // `<object>`
	    event: null, // `<script>`
	    face: null, // `<font>`. Use CSS instead
	    frame: null, // `<table>`
	    frameBorder: null, // `<iframe>`. Use CSS `border` instead
	    hSpace: number, // `<img>` and `<object>`
	    leftMargin: number, // `<body>`
	    link: null, // `<body>`. Use CSS `a:link {color: *}` instead
	    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
	    lowSrc: null, // `<img>`. Use a `<picture>`
	    marginHeight: number, // `<body>`
	    marginWidth: number, // `<body>`
	    noResize: boolean, // `<frame>`
	    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`
	    noShade: boolean, // `<hr>`. Use background-color and height instead of borders
	    noWrap: boolean, // `<td>` and `<th>`
	    object: null, // `<applet>`
	    profile: null, // `<head>`
	    prompt: null, // `<isindex>`
	    rev: null, // `<link>`
	    rightMargin: number, // `<body>`
	    rules: null, // `<table>`
	    scheme: null, // `<meta>`
	    scrolling: booleanish, // `<frame>`. Use overflow in the child context
	    standby: null, // `<object>`
	    summary: null, // `<table>`
	    text: null, // `<body>`. Use CSS `color` instead
	    topMargin: number, // `<body>`
	    valueType: null, // `<param>`
	    version: null, // `<html>`. Use a doctype.
	    vAlign: null, // Several. Use CSS `vertical-align` instead
	    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead
	    vSpace: number, // `<img>` and `<object>`

	    // Non-standard Properties.
	    allowTransparency: null,
	    autoCorrect: null,
	    autoSave: null,
	    disablePictureInPicture: boolean,
	    disableRemotePlayback: boolean,
	    prefix: null,
	    property: null,
	    results: number,
	    security: null,
	    unselectable: null
	  }
	});

	const svg$1 = create$1({
	  space: 'svg',
	  attributes: {
	    accentHeight: 'accent-height',
	    alignmentBaseline: 'alignment-baseline',
	    arabicForm: 'arabic-form',
	    baselineShift: 'baseline-shift',
	    capHeight: 'cap-height',
	    className: 'class',
	    clipPath: 'clip-path',
	    clipRule: 'clip-rule',
	    colorInterpolation: 'color-interpolation',
	    colorInterpolationFilters: 'color-interpolation-filters',
	    colorProfile: 'color-profile',
	    colorRendering: 'color-rendering',
	    crossOrigin: 'crossorigin',
	    dataType: 'datatype',
	    dominantBaseline: 'dominant-baseline',
	    enableBackground: 'enable-background',
	    fillOpacity: 'fill-opacity',
	    fillRule: 'fill-rule',
	    floodColor: 'flood-color',
	    floodOpacity: 'flood-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    fontSizeAdjust: 'font-size-adjust',
	    fontStretch: 'font-stretch',
	    fontStyle: 'font-style',
	    fontVariant: 'font-variant',
	    fontWeight: 'font-weight',
	    glyphName: 'glyph-name',
	    glyphOrientationHorizontal: 'glyph-orientation-horizontal',
	    glyphOrientationVertical: 'glyph-orientation-vertical',
	    hrefLang: 'hreflang',
	    horizAdvX: 'horiz-adv-x',
	    horizOriginX: 'horiz-origin-x',
	    horizOriginY: 'horiz-origin-y',
	    imageRendering: 'image-rendering',
	    letterSpacing: 'letter-spacing',
	    lightingColor: 'lighting-color',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    navDown: 'nav-down',
	    navDownLeft: 'nav-down-left',
	    navDownRight: 'nav-down-right',
	    navLeft: 'nav-left',
	    navNext: 'nav-next',
	    navPrev: 'nav-prev',
	    navRight: 'nav-right',
	    navUp: 'nav-up',
	    navUpLeft: 'nav-up-left',
	    navUpRight: 'nav-up-right',
	    onAbort: 'onabort',
	    onActivate: 'onactivate',
	    onAfterPrint: 'onafterprint',
	    onBeforePrint: 'onbeforeprint',
	    onBegin: 'onbegin',
	    onCancel: 'oncancel',
	    onCanPlay: 'oncanplay',
	    onCanPlayThrough: 'oncanplaythrough',
	    onChange: 'onchange',
	    onClick: 'onclick',
	    onClose: 'onclose',
	    onCopy: 'oncopy',
	    onCueChange: 'oncuechange',
	    onCut: 'oncut',
	    onDblClick: 'ondblclick',
	    onDrag: 'ondrag',
	    onDragEnd: 'ondragend',
	    onDragEnter: 'ondragenter',
	    onDragExit: 'ondragexit',
	    onDragLeave: 'ondragleave',
	    onDragOver: 'ondragover',
	    onDragStart: 'ondragstart',
	    onDrop: 'ondrop',
	    onDurationChange: 'ondurationchange',
	    onEmptied: 'onemptied',
	    onEnd: 'onend',
	    onEnded: 'onended',
	    onError: 'onerror',
	    onFocus: 'onfocus',
	    onFocusIn: 'onfocusin',
	    onFocusOut: 'onfocusout',
	    onHashChange: 'onhashchange',
	    onInput: 'oninput',
	    onInvalid: 'oninvalid',
	    onKeyDown: 'onkeydown',
	    onKeyPress: 'onkeypress',
	    onKeyUp: 'onkeyup',
	    onLoad: 'onload',
	    onLoadedData: 'onloadeddata',
	    onLoadedMetadata: 'onloadedmetadata',
	    onLoadStart: 'onloadstart',
	    onMessage: 'onmessage',
	    onMouseDown: 'onmousedown',
	    onMouseEnter: 'onmouseenter',
	    onMouseLeave: 'onmouseleave',
	    onMouseMove: 'onmousemove',
	    onMouseOut: 'onmouseout',
	    onMouseOver: 'onmouseover',
	    onMouseUp: 'onmouseup',
	    onMouseWheel: 'onmousewheel',
	    onOffline: 'onoffline',
	    onOnline: 'ononline',
	    onPageHide: 'onpagehide',
	    onPageShow: 'onpageshow',
	    onPaste: 'onpaste',
	    onPause: 'onpause',
	    onPlay: 'onplay',
	    onPlaying: 'onplaying',
	    onPopState: 'onpopstate',
	    onProgress: 'onprogress',
	    onRateChange: 'onratechange',
	    onRepeat: 'onrepeat',
	    onReset: 'onreset',
	    onResize: 'onresize',
	    onScroll: 'onscroll',
	    onSeeked: 'onseeked',
	    onSeeking: 'onseeking',
	    onSelect: 'onselect',
	    onShow: 'onshow',
	    onStalled: 'onstalled',
	    onStorage: 'onstorage',
	    onSubmit: 'onsubmit',
	    onSuspend: 'onsuspend',
	    onTimeUpdate: 'ontimeupdate',
	    onToggle: 'ontoggle',
	    onUnload: 'onunload',
	    onVolumeChange: 'onvolumechange',
	    onWaiting: 'onwaiting',
	    onZoom: 'onzoom',
	    overlinePosition: 'overline-position',
	    overlineThickness: 'overline-thickness',
	    paintOrder: 'paint-order',
	    panose1: 'panose-1',
	    pointerEvents: 'pointer-events',
	    referrerPolicy: 'referrerpolicy',
	    renderingIntent: 'rendering-intent',
	    shapeRendering: 'shape-rendering',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strikethroughPosition: 'strikethrough-position',
	    strikethroughThickness: 'strikethrough-thickness',
	    strokeDashArray: 'stroke-dasharray',
	    strokeDashOffset: 'stroke-dashoffset',
	    strokeLineCap: 'stroke-linecap',
	    strokeLineJoin: 'stroke-linejoin',
	    strokeMiterLimit: 'stroke-miterlimit',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    tabIndex: 'tabindex',
	    textAnchor: 'text-anchor',
	    textDecoration: 'text-decoration',
	    textRendering: 'text-rendering',
	    transformOrigin: 'transform-origin',
	    typeOf: 'typeof',
	    underlinePosition: 'underline-position',
	    underlineThickness: 'underline-thickness',
	    unicodeBidi: 'unicode-bidi',
	    unicodeRange: 'unicode-range',
	    unitsPerEm: 'units-per-em',
	    vAlphabetic: 'v-alphabetic',
	    vHanging: 'v-hanging',
	    vIdeographic: 'v-ideographic',
	    vMathematical: 'v-mathematical',
	    vectorEffect: 'vector-effect',
	    vertAdvY: 'vert-adv-y',
	    vertOriginX: 'vert-origin-x',
	    vertOriginY: 'vert-origin-y',
	    wordSpacing: 'word-spacing',
	    writingMode: 'writing-mode',
	    xHeight: 'x-height',
	    // These were camelcased in Tiny. Now lowercased in SVG 2
	    playbackOrder: 'playbackorder',
	    timelineBegin: 'timelinebegin'
	  },
	  transform: caseSensitiveTransform,
	  properties: {
	    about: commaOrSpaceSeparated,
	    accentHeight: number,
	    accumulate: null,
	    additive: null,
	    alignmentBaseline: null,
	    alphabetic: number,
	    amplitude: number,
	    arabicForm: null,
	    ascent: number,
	    attributeName: null,
	    attributeType: null,
	    azimuth: number,
	    bandwidth: null,
	    baselineShift: null,
	    baseFrequency: null,
	    baseProfile: null,
	    bbox: null,
	    begin: null,
	    bias: number,
	    by: null,
	    calcMode: null,
	    capHeight: number,
	    className: spaceSeparated,
	    clip: null,
	    clipPath: null,
	    clipPathUnits: null,
	    clipRule: null,
	    color: null,
	    colorInterpolation: null,
	    colorInterpolationFilters: null,
	    colorProfile: null,
	    colorRendering: null,
	    content: null,
	    contentScriptType: null,
	    contentStyleType: null,
	    crossOrigin: null,
	    cursor: null,
	    cx: null,
	    cy: null,
	    d: null,
	    dataType: null,
	    defaultAction: null,
	    descent: number,
	    diffuseConstant: number,
	    direction: null,
	    display: null,
	    dur: null,
	    divisor: number,
	    dominantBaseline: null,
	    download: boolean,
	    dx: null,
	    dy: null,
	    edgeMode: null,
	    editable: null,
	    elevation: number,
	    enableBackground: null,
	    end: null,
	    event: null,
	    exponent: number,
	    externalResourcesRequired: null,
	    fill: null,
	    fillOpacity: number,
	    fillRule: null,
	    filter: null,
	    filterRes: null,
	    filterUnits: null,
	    floodColor: null,
	    floodOpacity: null,
	    focusable: null,
	    focusHighlight: null,
	    fontFamily: null,
	    fontSize: null,
	    fontSizeAdjust: null,
	    fontStretch: null,
	    fontStyle: null,
	    fontVariant: null,
	    fontWeight: null,
	    format: null,
	    fr: null,
	    from: null,
	    fx: null,
	    fy: null,
	    g1: commaSeparated,
	    g2: commaSeparated,
	    glyphName: commaSeparated,
	    glyphOrientationHorizontal: null,
	    glyphOrientationVertical: null,
	    glyphRef: null,
	    gradientTransform: null,
	    gradientUnits: null,
	    handler: null,
	    hanging: number,
	    hatchContentUnits: null,
	    hatchUnits: null,
	    height: null,
	    href: null,
	    hrefLang: null,
	    horizAdvX: number,
	    horizOriginX: number,
	    horizOriginY: number,
	    id: null,
	    ideographic: number,
	    imageRendering: null,
	    initialVisibility: null,
	    in: null,
	    in2: null,
	    intercept: number,
	    k: number,
	    k1: number,
	    k2: number,
	    k3: number,
	    k4: number,
	    kernelMatrix: commaOrSpaceSeparated,
	    kernelUnitLength: null,
	    keyPoints: null, // SEMI_COLON_SEPARATED
	    keySplines: null, // SEMI_COLON_SEPARATED
	    keyTimes: null, // SEMI_COLON_SEPARATED
	    kerning: null,
	    lang: null,
	    lengthAdjust: null,
	    letterSpacing: null,
	    lightingColor: null,
	    limitingConeAngle: number,
	    local: null,
	    markerEnd: null,
	    markerMid: null,
	    markerStart: null,
	    markerHeight: null,
	    markerUnits: null,
	    markerWidth: null,
	    mask: null,
	    maskContentUnits: null,
	    maskUnits: null,
	    mathematical: null,
	    max: null,
	    media: null,
	    mediaCharacterEncoding: null,
	    mediaContentEncodings: null,
	    mediaSize: number,
	    mediaTime: null,
	    method: null,
	    min: null,
	    mode: null,
	    name: null,
	    navDown: null,
	    navDownLeft: null,
	    navDownRight: null,
	    navLeft: null,
	    navNext: null,
	    navPrev: null,
	    navRight: null,
	    navUp: null,
	    navUpLeft: null,
	    navUpRight: null,
	    numOctaves: null,
	    observer: null,
	    offset: null,
	    onAbort: null,
	    onActivate: null,
	    onAfterPrint: null,
	    onBeforePrint: null,
	    onBegin: null,
	    onCancel: null,
	    onCanPlay: null,
	    onCanPlayThrough: null,
	    onChange: null,
	    onClick: null,
	    onClose: null,
	    onCopy: null,
	    onCueChange: null,
	    onCut: null,
	    onDblClick: null,
	    onDrag: null,
	    onDragEnd: null,
	    onDragEnter: null,
	    onDragExit: null,
	    onDragLeave: null,
	    onDragOver: null,
	    onDragStart: null,
	    onDrop: null,
	    onDurationChange: null,
	    onEmptied: null,
	    onEnd: null,
	    onEnded: null,
	    onError: null,
	    onFocus: null,
	    onFocusIn: null,
	    onFocusOut: null,
	    onHashChange: null,
	    onInput: null,
	    onInvalid: null,
	    onKeyDown: null,
	    onKeyPress: null,
	    onKeyUp: null,
	    onLoad: null,
	    onLoadedData: null,
	    onLoadedMetadata: null,
	    onLoadStart: null,
	    onMessage: null,
	    onMouseDown: null,
	    onMouseEnter: null,
	    onMouseLeave: null,
	    onMouseMove: null,
	    onMouseOut: null,
	    onMouseOver: null,
	    onMouseUp: null,
	    onMouseWheel: null,
	    onOffline: null,
	    onOnline: null,
	    onPageHide: null,
	    onPageShow: null,
	    onPaste: null,
	    onPause: null,
	    onPlay: null,
	    onPlaying: null,
	    onPopState: null,
	    onProgress: null,
	    onRateChange: null,
	    onRepeat: null,
	    onReset: null,
	    onResize: null,
	    onScroll: null,
	    onSeeked: null,
	    onSeeking: null,
	    onSelect: null,
	    onShow: null,
	    onStalled: null,
	    onStorage: null,
	    onSubmit: null,
	    onSuspend: null,
	    onTimeUpdate: null,
	    onToggle: null,
	    onUnload: null,
	    onVolumeChange: null,
	    onWaiting: null,
	    onZoom: null,
	    opacity: null,
	    operator: null,
	    order: null,
	    orient: null,
	    orientation: null,
	    origin: null,
	    overflow: null,
	    overlay: null,
	    overlinePosition: number,
	    overlineThickness: number,
	    paintOrder: null,
	    panose1: null,
	    path: null,
	    pathLength: number,
	    patternContentUnits: null,
	    patternTransform: null,
	    patternUnits: null,
	    phase: null,
	    ping: spaceSeparated,
	    pitch: null,
	    playbackOrder: null,
	    pointerEvents: null,
	    points: null,
	    pointsAtX: number,
	    pointsAtY: number,
	    pointsAtZ: number,
	    preserveAlpha: null,
	    preserveAspectRatio: null,
	    primitiveUnits: null,
	    propagate: null,
	    property: commaOrSpaceSeparated,
	    r: null,
	    radius: null,
	    referrerPolicy: null,
	    refX: null,
	    refY: null,
	    rel: commaOrSpaceSeparated,
	    rev: commaOrSpaceSeparated,
	    renderingIntent: null,
	    repeatCount: null,
	    repeatDur: null,
	    requiredExtensions: commaOrSpaceSeparated,
	    requiredFeatures: commaOrSpaceSeparated,
	    requiredFonts: commaOrSpaceSeparated,
	    requiredFormats: commaOrSpaceSeparated,
	    resource: null,
	    restart: null,
	    result: null,
	    rotate: null,
	    rx: null,
	    ry: null,
	    scale: null,
	    seed: null,
	    shapeRendering: null,
	    side: null,
	    slope: null,
	    snapshotTime: null,
	    specularConstant: number,
	    specularExponent: number,
	    spreadMethod: null,
	    spacing: null,
	    startOffset: null,
	    stdDeviation: null,
	    stemh: null,
	    stemv: null,
	    stitchTiles: null,
	    stopColor: null,
	    stopOpacity: null,
	    strikethroughPosition: number,
	    strikethroughThickness: number,
	    string: null,
	    stroke: null,
	    strokeDashArray: commaOrSpaceSeparated,
	    strokeDashOffset: null,
	    strokeLineCap: null,
	    strokeLineJoin: null,
	    strokeMiterLimit: number,
	    strokeOpacity: number,
	    strokeWidth: null,
	    style: null,
	    surfaceScale: number,
	    syncBehavior: null,
	    syncBehaviorDefault: null,
	    syncMaster: null,
	    syncTolerance: null,
	    syncToleranceDefault: null,
	    systemLanguage: commaOrSpaceSeparated,
	    tabIndex: number,
	    tableValues: null,
	    target: null,
	    targetX: number,
	    targetY: number,
	    textAnchor: null,
	    textDecoration: null,
	    textRendering: null,
	    textLength: null,
	    timelineBegin: null,
	    title: null,
	    transformBehavior: null,
	    type: null,
	    typeOf: commaOrSpaceSeparated,
	    to: null,
	    transform: null,
	    transformOrigin: null,
	    u1: null,
	    u2: null,
	    underlinePosition: number,
	    underlineThickness: number,
	    unicode: null,
	    unicodeBidi: null,
	    unicodeRange: null,
	    unitsPerEm: number,
	    values: null,
	    vAlphabetic: number,
	    vMathematical: number,
	    vectorEffect: null,
	    vHanging: number,
	    vIdeographic: number,
	    version: null,
	    vertAdvY: number,
	    vertOriginX: number,
	    vertOriginY: number,
	    viewBox: null,
	    viewTarget: null,
	    visibility: null,
	    width: null,
	    widths: null,
	    wordSpacing: null,
	    writingMode: null,
	    x: null,
	    x1: null,
	    x2: null,
	    xChannelSelector: null,
	    xHeight: number,
	    y: null,
	    y1: null,
	    y2: null,
	    yChannelSelector: null,
	    z: null,
	    zoomAndPan: null
	  }
	});

	/**
	 * @typedef {import('./util/schema.js').Schema} Schema
	 */


	const valid = /^data[-\w.:]+$/i;
	const dash = /-[a-z]/g;
	const cap$1 = /[A-Z]/g;

	/**
	 * @param {Schema} schema
	 * @param {string} value
	 * @returns {Info}
	 */
	function find(schema, value) {
	  const normal = normalize$1(value);
	  let prop = value;
	  let Type = Info;

	  if (normal in schema.normal) {
	    return schema.property[schema.normal[normal]]
	  }

	  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {
	    // Attribute or property.
	    if (value.charAt(4) === '-') {
	      // Turn it into a property.
	      const rest = value.slice(5).replace(dash, camelcase$1);
	      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);
	    } else {
	      // Turn it into an attribute.
	      const rest = value.slice(4);

	      if (!dash.test(rest)) {
	        let dashes = rest.replace(cap$1, kebab);

	        if (dashes.charAt(0) !== '-') {
	          dashes = '-' + dashes;
	        }

	        value = 'data' + dashes;
	      }
	    }

	    Type = DefinedInfo;
	  }

	  return new Type(prop, value)
	}

	/**
	 * @param {string} $0
	 * @returns {string}
	 */
	function kebab($0) {
	  return '-' + $0.toLowerCase()
	}

	/**
	 * @param {string} $0
	 * @returns {string}
	 */
	function camelcase$1($0) {
	  return $0.charAt(1).toUpperCase()
	}

	/**
	 * `hast` is close to `React`, but differs in a couple of cases.
	 *
	 * To get a React property from a hast property, check if it is in
	 * `hastToReact`, if it is, then use the corresponding value,
	 * otherwise, use the hast property.
	 *
	 * @type {Record<string, string>}
	 */
	const hastToReact = {
	  classId: 'classID',
	  dataType: 'datatype',
	  itemId: 'itemID',
	  strokeDashArray: 'strokeDasharray',
	  strokeDashOffset: 'strokeDashoffset',
	  strokeLineCap: 'strokeLinecap',
	  strokeLineJoin: 'strokeLinejoin',
	  strokeMiterLimit: 'strokeMiterlimit',
	  typeOf: 'typeof',
	  xLinkActuate: 'xlinkActuate',
	  xLinkArcRole: 'xlinkArcrole',
	  xLinkHref: 'xlinkHref',
	  xLinkRole: 'xlinkRole',
	  xLinkShow: 'xlinkShow',
	  xLinkTitle: 'xlinkTitle',
	  xLinkType: 'xlinkType',
	  xmlnsXLink: 'xmlnsXlink'
	};

	/**
	 * @typedef {import('./lib/util/info.js').Info} Info
	 * @typedef {import('./lib/util/schema.js').Schema} Schema
	 */

	const html$4 = merge([xml, xlink, xmlns, aria, html$5], 'html');
	const svg = merge([xml, xlink, xmlns, aria, svg$1], 'svg');

	/**
	 * Parse space-separated tokens to an array of strings.
	 *
	 * @param {string} value
	 *   Space-separated tokens.
	 * @returns {Array<string>}
	 *   List of tokens.
	 */
	function parse$4(value) {
	  const input = String(value || '').trim();
	  return input ? input.split(/[ \t\n\r\f]+/g) : []
	}

	/**
	 * Serialize an array of strings as space separated-tokens.
	 *
	 * @param {Array<string|number>} values
	 *   List of tokens.
	 * @returns {string}
	 *   Space-separated tokens.
	 */
	function stringify$1(values) {
	  return values.join(' ').trim()
	}

	var cjs = {};

	// http://www.w3.org/TR/CSS21/grammar.html
	// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027
	var COMMENT_REGEX = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;

	var NEWLINE_REGEX = /\n/g;
	var WHITESPACE_REGEX = /^\s*/;

	// declaration
	var PROPERTY_REGEX = /^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/;
	var COLON_REGEX = /^:\s*/;
	var VALUE_REGEX = /^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/;
	var SEMICOLON_REGEX = /^[;\s]*/;

	// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill
	var TRIM_REGEX = /^\s+|\s+$/g;

	// strings
	var NEWLINE = '\n';
	var FORWARD_SLASH = '/';
	var ASTERISK = '*';
	var EMPTY_STRING = '';

	// types
	var TYPE_COMMENT = 'comment';
	var TYPE_DECLARATION = 'declaration';

	/**
	 * @param {String} style
	 * @param {Object} [options]
	 * @return {Object[]}
	 * @throws {TypeError}
	 * @throws {Error}
	 */
	var inlineStyleParser = function (style, options) {
	  if (typeof style !== 'string') {
	    throw new TypeError('First argument must be a string');
	  }

	  if (!style) return [];

	  options = options || {};

	  /**
	   * Positional.
	   */
	  var lineno = 1;
	  var column = 1;

	  /**
	   * Update lineno and column based on `str`.
	   *
	   * @param {String} str
	   */
	  function updatePosition(str) {
	    var lines = str.match(NEWLINE_REGEX);
	    if (lines) lineno += lines.length;
	    var i = str.lastIndexOf(NEWLINE);
	    column = ~i ? str.length - i : column + str.length;
	  }

	  /**
	   * Mark position and patch `node.position`.
	   *
	   * @return {Function}
	   */
	  function position() {
	    var start = { line: lineno, column: column };
	    return function (node) {
	      node.position = new Position(start);
	      whitespace();
	      return node;
	    };
	  }

	  /**
	   * Store position information for a node.
	   *
	   * @constructor
	   * @property {Object} start
	   * @property {Object} end
	   * @property {undefined|String} source
	   */
	  function Position(start) {
	    this.start = start;
	    this.end = { line: lineno, column: column };
	    this.source = options.source;
	  }

	  /**
	   * Non-enumerable source string.
	   */
	  Position.prototype.content = style;

	  /**
	   * Error `msg`.
	   *
	   * @param {String} msg
	   * @throws {Error}
	   */
	  function error(msg) {
	    var err = new Error(
	      options.source + ':' + lineno + ':' + column + ': ' + msg
	    );
	    err.reason = msg;
	    err.filename = options.source;
	    err.line = lineno;
	    err.column = column;
	    err.source = style;

	    if (options.silent) ; else {
	      throw err;
	    }
	  }

	  /**
	   * Match `re` and return captures.
	   *
	   * @param {RegExp} re
	   * @return {undefined|Array}
	   */
	  function match(re) {
	    var m = re.exec(style);
	    if (!m) return;
	    var str = m[0];
	    updatePosition(str);
	    style = style.slice(str.length);
	    return m;
	  }

	  /**
	   * Parse whitespace.
	   */
	  function whitespace() {
	    match(WHITESPACE_REGEX);
	  }

	  /**
	   * Parse comments.
	   *
	   * @param {Object[]} [rules]
	   * @return {Object[]}
	   */
	  function comments(rules) {
	    var c;
	    rules = rules || [];
	    while ((c = comment())) {
	      if (c !== false) {
	        rules.push(c);
	      }
	    }
	    return rules;
	  }

	  /**
	   * Parse comment.
	   *
	   * @return {Object}
	   * @throws {Error}
	   */
	  function comment() {
	    var pos = position();
	    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;

	    var i = 2;
	    while (
	      EMPTY_STRING != style.charAt(i) &&
	      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))
	    ) {
	      ++i;
	    }
	    i += 2;

	    if (EMPTY_STRING === style.charAt(i - 1)) {
	      return error('End of comment missing');
	    }

	    var str = style.slice(2, i - 2);
	    column += 2;
	    updatePosition(str);
	    style = style.slice(i);
	    column += 2;

	    return pos({
	      type: TYPE_COMMENT,
	      comment: str
	    });
	  }

	  /**
	   * Parse declaration.
	   *
	   * @return {Object}
	   * @throws {Error}
	   */
	  function declaration() {
	    var pos = position();

	    // prop
	    var prop = match(PROPERTY_REGEX);
	    if (!prop) return;
	    comment();

	    // :
	    if (!match(COLON_REGEX)) return error("property missing ':'");

	    // val
	    var val = match(VALUE_REGEX);

	    var ret = pos({
	      type: TYPE_DECLARATION,
	      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),
	      value: val
	        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))
	        : EMPTY_STRING
	    });

	    // ;
	    match(SEMICOLON_REGEX);

	    return ret;
	  }

	  /**
	   * Parse declarations.
	   *
	   * @return {Object[]}
	   */
	  function declarations() {
	    var decls = [];

	    comments(decls);

	    // declarations
	    var decl;
	    while ((decl = declaration())) {
	      if (decl !== false) {
	        decls.push(decl);
	        comments(decls);
	      }
	    }

	    return decls;
	  }

	  whitespace();
	  return declarations();
	};

	/**
	 * Trim `str`.
	 *
	 * @param {String} str
	 * @return {String}
	 */
	function trim(str) {
	  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;
	}

	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(cjs, "__esModule", { value: true });
	var inline_style_parser_1 = __importDefault(inlineStyleParser);
	/**
	 * Parses inline style to object.
	 *
	 * @param style - Inline style.
	 * @param iterator - Iterator.
	 * @returns - Style object or null.
	 *
	 * @example Parsing inline style to object:
	 *
	 * ```js
	 * import parse from 'style-to-object';
	 * parse('line-height: 42;'); // { 'line-height': '42' }
	 * ```
	 */
	function StyleToObject(style, iterator) {
	    var styleObject = null;
	    if (!style || typeof style !== 'string') {
	        return styleObject;
	    }
	    var declarations = (0, inline_style_parser_1.default)(style);
	    var hasIterator = typeof iterator === 'function';
	    declarations.forEach(function (declaration) {
	        if (declaration.type !== 'declaration') {
	            return;
	        }
	        var property = declaration.property, value = declaration.value;
	        if (hasIterator) {
	            iterator(property, value, declaration);
	        }
	        else if (value) {
	            styleObject = styleObject || {};
	            styleObject[property] = value;
	        }
	    });
	    return styleObject;
	}
	var _default = cjs.default = StyleToObject;

	// ensure compatibility with rollup umd build
	const styleToObject = _default.default || _default;

	/**
	 * @typedef {import('unist').Node} Node
	 * @typedef {import('unist').Point} Point
	 * @typedef {import('unist').Position} Position
	 */

	/**
	 * @typedef NodeLike
	 * @property {string} type
	 * @property {PositionLike | null | undefined} [position]
	 *
	 * @typedef PositionLike
	 * @property {PointLike | null | undefined} [start]
	 * @property {PointLike | null | undefined} [end]
	 *
	 * @typedef PointLike
	 * @property {number | null | undefined} [line]
	 * @property {number | null | undefined} [column]
	 * @property {number | null | undefined} [offset]
	 */

	/**
	 * Get the ending point of `node`.
	 *
	 * @param node
	 *   Node.
	 * @returns
	 *   Point.
	 */
	const pointEnd = point$3('end');

	/**
	 * Get the starting point of `node`.
	 *
	 * @param node
	 *   Node.
	 * @returns
	 *   Point.
	 */
	const pointStart = point$3('start');

	/**
	 * Get the positional info of `node`.
	 *
	 * @param {'end' | 'start'} type
	 *   Side.
	 * @returns
	 *   Getter.
	 */
	function point$3(type) {
	  return point

	  /**
	   * Get the point info of `node` at a bound side.
	   *
	   * @param {Node | NodeLike | null | undefined} [node]
	   * @returns {Point | undefined}
	   */
	  function point(node) {
	    const point = (node && node.position && node.position[type]) || {};

	    if (
	      typeof point.line === 'number' &&
	      point.line > 0 &&
	      typeof point.column === 'number' &&
	      point.column > 0
	    ) {
	      return {
	        line: point.line,
	        column: point.column,
	        offset:
	          typeof point.offset === 'number' && point.offset > -1
	            ? point.offset
	            : undefined
	      }
	    }
	  }
	}

	/**
	 * Get the positional info of `node`.
	 *
	 * @param {Node | NodeLike | null | undefined} [node]
	 *   Node.
	 * @returns {Position | undefined}
	 *   Position.
	 */
	function position$2(node) {
	  const start = pointStart(node);
	  const end = pointEnd(node);

	  if (start && end) {
	    return {start, end}
	  }
	}

	/**
	 * @typedef {import('unist').Node} Node
	 * @typedef {import('unist').Point} Point
	 * @typedef {import('unist').Position} Position
	 */

	/**
	 * @typedef NodeLike
	 * @property {string} type
	 * @property {PositionLike | null | undefined} [position]
	 *
	 * @typedef PointLike
	 * @property {number | null | undefined} [line]
	 * @property {number | null | undefined} [column]
	 * @property {number | null | undefined} [offset]
	 *
	 * @typedef PositionLike
	 * @property {PointLike | null | undefined} [start]
	 * @property {PointLike | null | undefined} [end]
	 */

	/**
	 * Serialize the positional info of a point, position (start and end points),
	 * or node.
	 *
	 * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]
	 *   Node, position, or point.
	 * @returns {string}
	 *   Pretty printed positional info of a node (`string`).
	 *
	 *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)
	 *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for
	 *   column, `s` for `start`, and `e` for end.
	 *   An empty string (`''`) is returned if the given value is neither `node`,
	 *   `position`, nor `point`.
	 */
	function stringifyPosition(value) {
	  // Nothing.
	  if (!value || typeof value !== 'object') {
	    return ''
	  }

	  // Node.
	  if ('position' in value || 'type' in value) {
	    return position$1(value.position)
	  }

	  // Position.
	  if ('start' in value || 'end' in value) {
	    return position$1(value)
	  }

	  // Point.
	  if ('line' in value || 'column' in value) {
	    return point$2(value)
	  }

	  // ?
	  return ''
	}

	/**
	 * @param {Point | PointLike | null | undefined} point
	 * @returns {string}
	 */
	function point$2(point) {
	  return index(point && point.line) + ':' + index(point && point.column)
	}

	/**
	 * @param {Position | PositionLike | null | undefined} pos
	 * @returns {string}
	 */
	function position$1(pos) {
	  return point$2(pos && pos.start) + '-' + point$2(pos && pos.end)
	}

	/**
	 * @param {number | null | undefined} value
	 * @returns {number}
	 */
	function index(value) {
	  return value && typeof value === 'number' ? value : 1
	}

	/**
	 * @typedef {import('unist').Node} Node
	 * @typedef {import('unist').Point} Point
	 * @typedef {import('unist').Position} Position
	 */


	/**
	 * Message.
	 */
	class VFileMessage extends Error {
	  /**
	   * Create a message for `reason`.
	   *
	   * > 🪦 **Note**: also has obsolete signatures.
	   *
	   * @overload
	   * @param {string} reason
	   * @param {Options | null | undefined} [options]
	   * @returns
	   *
	   * @overload
	   * @param {string} reason
	   * @param {Node | NodeLike | null | undefined} parent
	   * @param {string | null | undefined} [origin]
	   * @returns
	   *
	   * @overload
	   * @param {string} reason
	   * @param {Point | Position | null | undefined} place
	   * @param {string | null | undefined} [origin]
	   * @returns
	   *
	   * @overload
	   * @param {string} reason
	   * @param {string | null | undefined} [origin]
	   * @returns
	   *
	   * @overload
	   * @param {Error | VFileMessage} cause
	   * @param {Node | NodeLike | null | undefined} parent
	   * @param {string | null | undefined} [origin]
	   * @returns
	   *
	   * @overload
	   * @param {Error | VFileMessage} cause
	   * @param {Point | Position | null | undefined} place
	   * @param {string | null | undefined} [origin]
	   * @returns
	   *
	   * @overload
	   * @param {Error | VFileMessage} cause
	   * @param {string | null | undefined} [origin]
	   * @returns
	   *
	   * @param {Error | VFileMessage | string} causeOrReason
	   *   Reason for message, should use markdown.
	   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
	   *   Configuration (optional).
	   * @param {string | null | undefined} [origin]
	   *   Place in code where the message originates (example:
	   *   `'my-package:my-rule'` or `'my-rule'`).
	   * @returns
	   *   Instance of `VFileMessage`.
	   */
	  // eslint-disable-next-line complexity
	  constructor(causeOrReason, optionsOrParentOrPlace, origin) {
	    super();

	    if (typeof optionsOrParentOrPlace === 'string') {
	      origin = optionsOrParentOrPlace;
	      optionsOrParentOrPlace = undefined;
	    }

	    /** @type {string} */
	    let reason = '';
	    /** @type {Options} */
	    let options = {};
	    let legacyCause = false;

	    if (optionsOrParentOrPlace) {
	      // Point.
	      if (
	        'line' in optionsOrParentOrPlace &&
	        'column' in optionsOrParentOrPlace
	      ) {
	        options = {place: optionsOrParentOrPlace};
	      }
	      // Position.
	      else if (
	        'start' in optionsOrParentOrPlace &&
	        'end' in optionsOrParentOrPlace
	      ) {
	        options = {place: optionsOrParentOrPlace};
	      }
	      // Node.
	      else if ('type' in optionsOrParentOrPlace) {
	        options = {
	          ancestors: [optionsOrParentOrPlace],
	          place: optionsOrParentOrPlace.position
	        };
	      }
	      // Options.
	      else {
	        options = {...optionsOrParentOrPlace};
	      }
	    }

	    if (typeof causeOrReason === 'string') {
	      reason = causeOrReason;
	    }
	    // Error.
	    else if (!options.cause && causeOrReason) {
	      legacyCause = true;
	      reason = causeOrReason.message;
	      options.cause = causeOrReason;
	    }

	    if (!options.ruleId && !options.source && typeof origin === 'string') {
	      const index = origin.indexOf(':');

	      if (index === -1) {
	        options.ruleId = origin;
	      } else {
	        options.source = origin.slice(0, index);
	        options.ruleId = origin.slice(index + 1);
	      }
	    }

	    if (!options.place && options.ancestors && options.ancestors) {
	      const parent = options.ancestors[options.ancestors.length - 1];

	      if (parent) {
	        options.place = parent.position;
	      }
	    }

	    const start =
	      options.place && 'start' in options.place
	        ? options.place.start
	        : options.place;

	    /* eslint-disable no-unused-expressions */
	    /**
	     * Stack of ancestor nodes surrounding the message.
	     *
	     * @type {Array<Node> | undefined}
	     */
	    this.ancestors = options.ancestors || undefined;

	    /**
	     * Original error cause of the message.
	     *
	     * @type {Error | undefined}
	     */
	    this.cause = options.cause || undefined;

	    /**
	     * Starting column of message.
	     *
	     * @type {number | undefined}
	     */
	    this.column = start ? start.column : undefined;

	    /**
	     * State of problem.
	     *
	     * * `true` — error, file not usable
	     * * `false` — warning, change may be needed
	     * * `undefined` — change likely not needed
	     *
	     * @type {boolean | null | undefined}
	     */
	    this.fatal = undefined;

	    /**
	     * Path of a file (used throughout the `VFile` ecosystem).
	     *
	     * @type {string | undefined}
	     */
	    this.file;

	    // Field from `Error`.
	    /**
	     * Reason for message.
	     *
	     * @type {string}
	     */
	    this.message = reason;

	    /**
	     * Starting line of error.
	     *
	     * @type {number | undefined}
	     */
	    this.line = start ? start.line : undefined;

	    // Field from `Error`.
	    /**
	     * Serialized positional info of message.
	     *
	     * On normal errors, this would be something like `ParseError`, buit in
	     * `VFile` messages we use this space to show where an error happened.
	     */
	    this.name = stringifyPosition(options.place) || '1:1';

	    /**
	     * Place of message.
	     *
	     * @type {Point | Position | undefined}
	     */
	    this.place = options.place || undefined;

	    /**
	     * Reason for message, should use markdown.
	     *
	     * @type {string}
	     */
	    this.reason = this.message;

	    /**
	     * Category of message (example: `'my-rule'`).
	     *
	     * @type {string | undefined}
	     */
	    this.ruleId = options.ruleId || undefined;

	    /**
	     * Namespace of message (example: `'my-package'`).
	     *
	     * @type {string | undefined}
	     */
	    this.source = options.source || undefined;

	    // Field from `Error`.
	    /**
	     * Stack of message.
	     *
	     * This is used by normal errors to show where something happened in
	     * programming code, irrelevant for `VFile` messages,
	     *
	     * @type {string}
	     */
	    this.stack =
	      legacyCause && options.cause && typeof options.cause.stack === 'string'
	        ? options.cause.stack
	        : '';

	    // The following fields are “well known”.
	    // Not standard.
	    // Feel free to add other non-standard fields to your messages.

	    /**
	     * Specify the source value that’s being reported, which is deemed
	     * incorrect.
	     *
	     * @type {string | undefined}
	     */
	    this.actual;

	    /**
	     * Suggest acceptable values that can be used instead of `actual`.
	     *
	     * @type {Array<string> | undefined}
	     */
	    this.expected;

	    /**
	     * Long form description of the message (you should use markdown).
	     *
	     * @type {string | undefined}
	     */
	    this.note;

	    /**
	     * Link to docs for the message.
	     *
	     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`
	     * > to `new URL(x)`.
	     *
	     * @type {string | undefined}
	     */
	    this.url;
	    /* eslint-enable no-unused-expressions */
	  }
	}

	VFileMessage.prototype.file = '';
	VFileMessage.prototype.name = '';
	VFileMessage.prototype.reason = '';
	VFileMessage.prototype.message = '';
	VFileMessage.prototype.stack = '';
	VFileMessage.prototype.column = undefined;
	VFileMessage.prototype.line = undefined;
	VFileMessage.prototype.ancestors = undefined;
	VFileMessage.prototype.cause = undefined;
	VFileMessage.prototype.fatal = undefined;
	VFileMessage.prototype.place = undefined;
	VFileMessage.prototype.ruleId = undefined;
	VFileMessage.prototype.source = undefined;

	// Register MDX nodes in mdast:
	/// <reference types="mdast-util-mdx-expression" />
	/// <reference types="mdast-util-mdx-jsx" />
	/// <reference types="mdast-util-mdxjs-esm" />


	const own$f = {}.hasOwnProperty;

	/** @type {Map<string, number>} */
	const emptyMap = new Map();

	const cap = /[A-Z]/g;
	const dashSomething = /-([a-z])/g;

	// `react-dom` triggers a warning for *any* white space in tables.
	// To follow GFM, `mdast-util-to-hast` injects line endings between elements.
	// Other tools might do so too, but they don’t do here, so we remove all of
	// that.

	// See: <https://github.com/facebook/react/pull/7081>.
	// See: <https://github.com/facebook/react/pull/7515>.
	// See: <https://github.com/remarkjs/remark-react/issues/64>.
	// See: <https://github.com/rehypejs/rehype-react/pull/29>.
	// See: <https://github.com/rehypejs/rehype-react/pull/32>.
	// See: <https://github.com/rehypejs/rehype-react/pull/45>.
	const tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr']);

	const tableCellElement = new Set(['td', 'th']);

	const docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime';

	/**
	 * Transform a hast tree to preact, react, solid, svelte, vue, etc.,
	 * with an automatic JSX runtime.
	 *
	 * @param {Nodes} tree
	 *   Tree to transform.
	 * @param {Options} options
	 *   Configuration (required).
	 * @returns {JSX.Element}
	 *   JSX element.
	 */

	function toJsxRuntime(tree, options) {
	  if (!options || options.Fragment === undefined) {
	    throw new TypeError('Expected `Fragment` in options')
	  }

	  const filePath = options.filePath || undefined;
	  /** @type {Create} */
	  let create;

	  if (options.development) {
	    if (typeof options.jsxDEV !== 'function') {
	      throw new TypeError(
	        'Expected `jsxDEV` in options when `development: true`'
	      )
	    }

	    create = developmentCreate(filePath, options.jsxDEV);
	  } else {
	    if (typeof options.jsx !== 'function') {
	      throw new TypeError('Expected `jsx` in production options')
	    }

	    if (typeof options.jsxs !== 'function') {
	      throw new TypeError('Expected `jsxs` in production options')
	    }

	    create = productionCreate(filePath, options.jsx, options.jsxs);
	  }

	  /** @type {State} */
	  const state = {
	    Fragment: options.Fragment,
	    ancestors: [],
	    components: options.components || {},
	    create,
	    elementAttributeNameCase: options.elementAttributeNameCase || 'react',
	    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,
	    filePath,
	    ignoreInvalidStyle: options.ignoreInvalidStyle || false,
	    passKeys: options.passKeys !== false,
	    passNode: options.passNode || false,
	    schema: options.space === 'svg' ? svg : html$4,
	    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',
	    tableCellAlignToStyle: options.tableCellAlignToStyle !== false
	  };

	  const result = one$7(state, tree, undefined);

	  // JSX element.
	  if (result && typeof result !== 'string') {
	    return result
	  }

	  // Text node or something that turned into nothing.
	  return state.create(
	    tree,
	    state.Fragment,
	    {children: result || undefined},
	    undefined
	  )
	}

	/**
	 * Transform a node.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {Nodes} node
	 *   Current node.
	 * @param {string | undefined} key
	 *   Key.
	 * @returns {Child | undefined}
	 *   Child, optional.
	 */
	function one$7(state, node, key) {
	  if (node.type === 'element') {
	    return element$5(state, node, key)
	  }

	  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {
	    return mdxExpression(state, node)
	  }

	  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {
	    return mdxJsxElement(state, node, key)
	  }

	  if (node.type === 'mdxjsEsm') {
	    return mdxEsm(state, node)
	  }

	  if (node.type === 'root') {
	    return root$7(state, node, key)
	  }

	  if (node.type === 'text') {
	    return text$8(state, node)
	  }
	}

	/**
	 * Handle element.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {Element} node
	 *   Current node.
	 * @param {string | undefined} key
	 *   Key.
	 * @returns {Child | undefined}
	 *   Child, optional.
	 */
	function element$5(state, node, key) {
	  const parentSchema = state.schema;
	  let schema = parentSchema;

	  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {
	    schema = svg;
	    state.schema = schema;
	  }

	  state.ancestors.push(node);

	  const type = findComponentFromName(state, node.tagName, false);
	  const props = createElementProps(state, node);
	  let children = createChildren(state, node);

	  if (tableElements.has(node.tagName)) {
	    children = children.filter(function (child) {
	      return typeof child === 'string' ? !whitespace$1(child) : true
	    });
	  }

	  addNode(state, props, type, node);
	  addChildren(props, children);

	  // Restore.
	  state.ancestors.pop();
	  state.schema = parentSchema;

	  return state.create(node, type, props, key)
	}

	/**
	 * Handle MDX expression.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {MdxFlowExpression | MdxTextExpression} node
	 *   Current node.
	 * @returns {Child | undefined}
	 *   Child, optional.
	 */
	function mdxExpression(state, node) {
	  if (node.data && node.data.estree && state.evaluater) {
	    const program = node.data.estree;
	    const expression = program.body[0];
	    ok$3(expression.type === 'ExpressionStatement');

	    // Assume result is a child.
	    return /** @type {Child | undefined} */ (
	      state.evaluater.evaluateExpression(expression.expression)
	    )
	  }

	  crashEstree(state, node.position);
	}

	/**
	 * Handle MDX ESM.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {MdxjsEsm} node
	 *   Current node.
	 * @returns {Child | undefined}
	 *   Child, optional.
	 */
	function mdxEsm(state, node) {
	  if (node.data && node.data.estree && state.evaluater) {
	    // Assume result is a child.
	    return /** @type {Child | undefined} */ (
	      state.evaluater.evaluateProgram(node.data.estree)
	    )
	  }

	  crashEstree(state, node.position);
	}

	/**
	 * Handle MDX JSX.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {MdxJsxFlowElement | MdxJsxTextElement} node
	 *   Current node.
	 * @param {string | undefined} key
	 *   Key.
	 * @returns {Child | undefined}
	 *   Child, optional.
	 */
	function mdxJsxElement(state, node, key) {
	  const parentSchema = state.schema;
	  let schema = parentSchema;

	  if (node.name === 'svg' && parentSchema.space === 'html') {
	    schema = svg;
	    state.schema = schema;
	  }

	  state.ancestors.push(node);

	  const type =
	    node.name === null
	      ? state.Fragment
	      : findComponentFromName(state, node.name, true);
	  const props = createJsxElementProps(state, node);
	  const children = createChildren(state, node);

	  addNode(state, props, type, node);
	  addChildren(props, children);

	  // Restore.
	  state.ancestors.pop();
	  state.schema = parentSchema;

	  return state.create(node, type, props, key)
	}

	/**
	 * Handle root.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {Root} node
	 *   Current node.
	 * @param {string | undefined} key
	 *   Key.
	 * @returns {Child | undefined}
	 *   Child, optional.
	 */
	function root$7(state, node, key) {
	  /** @type {Props} */
	  const props = {};

	  addChildren(props, createChildren(state, node));

	  return state.create(node, state.Fragment, props, key)
	}

	/**
	 * Handle text.
	 *
	 * @param {State} _
	 *   Info passed around.
	 * @param {Text} node
	 *   Current node.
	 * @returns {Child | undefined}
	 *   Child, optional.
	 */
	function text$8(_, node) {
	  return node.value
	}

	/**
	 * Add `node` to props.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {Props} props
	 *   Props.
	 * @param {unknown} type
	 *   Type.
	 * @param {Element | MdxJsxFlowElement | MdxJsxTextElement} node
	 *   Node.
	 * @returns {undefined}
	 *   Nothing.
	 */
	function addNode(state, props, type, node) {
	  // If this is swapped out for a component:
	  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {
	    props.node = node;
	  }
	}

	/**
	 * Add children to props.
	 *
	 * @param {Props} props
	 *   Props.
	 * @param {Array<Child>} children
	 *   Children.
	 * @returns {undefined}
	 *   Nothing.
	 */
	function addChildren(props, children) {
	  if (children.length > 0) {
	    const value = children.length > 1 ? children : children[0];

	    if (value) {
	      props.children = value;
	    }
	  }
	}

	/**
	 * @param {string | undefined} _
	 *   Path to file.
	 * @param {Jsx} jsx
	 *   Dynamic.
	 * @param {Jsx} jsxs
	 *   Static.
	 * @returns {Create}
	 *   Create a production element.
	 */
	function productionCreate(_, jsx, jsxs) {
	  return create
	  /** @type {Create} */
	  function create(_, type, props, key) {
	    // Only an array when there are 2 or more children.
	    const isStaticChildren = Array.isArray(props.children);
	    const fn = isStaticChildren ? jsxs : jsx;
	    return key ? fn(type, props, key) : fn(type, props)
	  }
	}

	/**
	 * @param {string | undefined} filePath
	 *   Path to file.
	 * @param {JsxDev} jsxDEV
	 *   Development.
	 * @returns {Create}
	 *   Create a development element.
	 */
	function developmentCreate(filePath, jsxDEV) {
	  return create
	  /** @type {Create} */
	  function create(node, type, props, key) {
	    // Only an array when there are 2 or more children.
	    const isStaticChildren = Array.isArray(props.children);
	    const point = pointStart(node);
	    return jsxDEV(
	      type,
	      props,
	      key,
	      isStaticChildren,
	      {
	        columnNumber: point ? point.column - 1 : undefined,
	        fileName: filePath,
	        lineNumber: point ? point.line : undefined
	      },
	      undefined
	    )
	  }
	}

	/**
	 * Create props from an element.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {Element} node
	 *   Current element.
	 * @returns {Props}
	 *   Props.
	 */
	function createElementProps(state, node) {
	  /** @type {Props} */
	  const props = {};
	  /** @type {string | undefined} */
	  let alignValue;
	  /** @type {string} */
	  let prop;

	  for (prop in node.properties) {
	    if (prop !== 'children' && own$f.call(node.properties, prop)) {
	      const result = createProperty$1(state, prop, node.properties[prop]);

	      if (result) {
	        const [key, value] = result;

	        if (
	          state.tableCellAlignToStyle &&
	          key === 'align' &&
	          typeof value === 'string' &&
	          tableCellElement.has(node.tagName)
	        ) {
	          alignValue = value;
	        } else {
	          props[key] = value;
	        }
	      }
	    }
	  }

	  if (alignValue) {
	    // Assume style is an object.
	    const style = /** @type {Style} */ (props.style || (props.style = {}));
	    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =
	      alignValue;
	  }

	  return props
	}

	/**
	 * Create props from a JSX element.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {MdxJsxFlowElement | MdxJsxTextElement} node
	 *   Current JSX element.
	 * @returns {Props}
	 *   Props.
	 */
	function createJsxElementProps(state, node) {
	  /** @type {Props} */
	  const props = {};

	  for (const attribute of node.attributes) {
	    if (attribute.type === 'mdxJsxExpressionAttribute') {
	      if (attribute.data && attribute.data.estree && state.evaluater) {
	        const program = attribute.data.estree;
	        const expression = program.body[0];
	        ok$3(expression.type === 'ExpressionStatement');
	        const objectExpression = expression.expression;
	        ok$3(objectExpression.type === 'ObjectExpression');
	        const property = objectExpression.properties[0];
	        ok$3(property.type === 'SpreadElement');

	        Object.assign(
	          props,
	          state.evaluater.evaluateExpression(property.argument)
	        );
	      } else {
	        crashEstree(state, node.position);
	      }
	    } else {
	      // For JSX, the author is responsible of passing in the correct values.
	      const name = attribute.name;
	      /** @type {unknown} */
	      let value;

	      if (attribute.value && typeof attribute.value === 'object') {
	        if (
	          attribute.value.data &&
	          attribute.value.data.estree &&
	          state.evaluater
	        ) {
	          const program = attribute.value.data.estree;
	          const expression = program.body[0];
	          ok$3(expression.type === 'ExpressionStatement');
	          value = state.evaluater.evaluateExpression(expression.expression);
	        } else {
	          crashEstree(state, node.position);
	        }
	      } else {
	        value = attribute.value === null ? true : attribute.value;
	      }

	      // Assume a prop.
	      props[name] = /** @type {Props[keyof Props]} */ (value);
	    }
	  }

	  return props
	}

	/**
	 * Create children.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {Parents} node
	 *   Current element.
	 * @returns {Array<Child>}
	 *   Children.
	 */
	function createChildren(state, node) {
	  /** @type {Array<Child>} */
	  const children = [];
	  let index = -1;
	  /** @type {Map<string, number>} */
	  // Note: test this when Solid doesn’t want to merge my upcoming PR.
	  /* c8 ignore next */
	  const countsByName = state.passKeys ? new Map() : emptyMap;

	  while (++index < node.children.length) {
	    const child = node.children[index];
	    /** @type {string | undefined} */
	    let key;

	    if (state.passKeys) {
	      const name =
	        child.type === 'element'
	          ? child.tagName
	          : child.type === 'mdxJsxFlowElement' ||
	              child.type === 'mdxJsxTextElement'
	            ? child.name
	            : undefined;

	      if (name) {
	        const count = countsByName.get(name) || 0;
	        key = name + '-' + count;
	        countsByName.set(name, count + 1);
	      }
	    }

	    const result = one$7(state, child, key);
	    if (result !== undefined) children.push(result);
	  }

	  return children
	}

	/**
	 * Handle a property.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {string} prop
	 *   Key.
	 * @param {Array<number | string> | boolean | number | string | null | undefined} value
	 *   hast property value.
	 * @returns {Field | undefined}
	 *   Field for runtime, optional.
	 */
	function createProperty$1(state, prop, value) {
	  const info = find(state.schema, prop);

	  // Ignore nullish and `NaN` values.
	  if (
	    value === null ||
	    value === undefined ||
	    (typeof value === 'number' && Number.isNaN(value))
	  ) {
	    return
	  }

	  if (Array.isArray(value)) {
	    // Accept `array`.
	    // Most props are space-separated.
	    value = info.commaSeparated ? stringify$2(value) : stringify$1(value);
	  }

	  // React only accepts `style` as object.
	  if (info.property === 'style') {
	    let styleObject =
	      typeof value === 'object' ? value : parseStyle(state, String(value));

	    if (state.stylePropertyNameCase === 'css') {
	      styleObject = transformStylesToCssCasing(styleObject);
	    }

	    return ['style', styleObject]
	  }

	  return [
	    state.elementAttributeNameCase === 'react' && info.space
	      ? hastToReact[info.property] || info.property
	      : info.attribute,
	    value
	  ]
	}

	/**
	 * Parse a CSS declaration to an object.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {string} value
	 *   CSS declarations.
	 * @returns {Style}
	 *   Properties.
	 * @throws
	 *   Throws `VFileMessage` when CSS cannot be parsed.
	 */
	function parseStyle(state, value) {
	  /** @type {Style} */
	  const result = {};

	  try {
	    // @ts-expect-error: `style-to-object` types are broken.
	    styleToObject(value, replacer);
	  } catch (error) {
	    if (!state.ignoreInvalidStyle) {
	      const cause = /** @type {Error} */ (error);
	      const message = new VFileMessage('Cannot parse `style` attribute', {
	        ancestors: state.ancestors,
	        cause,
	        ruleId: 'style',
	        source: 'hast-util-to-jsx-runtime'
	      });
	      message.file = state.filePath || undefined;
	      message.url = docs + '#cannot-parse-style-attribute';

	      throw message
	    }
	  }

	  return result

	  /**
	   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS
	   * property.
	   *
	   * @param {string} name
	   *   Key.
	   * @param {string} value
	   *   Value
	   * @returns {undefined}
	   *   Nothing.
	   */
	  function replacer(name, value) {
	    let key = name;

	    if (key.slice(0, 2) !== '--') {
	      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4);
	      key = key.replace(dashSomething, toCamel);
	    }

	    result[key] = value;
	  }
	}

	/**
	 * Create a JSX name from a string.
	 *
	 * @param {State} state
	 *   To do.
	 * @param {string} name
	 *   Name.
	 * @param {boolean} allowExpression
	 *   Allow member expressions and identifiers.
	 * @returns {unknown}
	 *   To do.
	 */
	function findComponentFromName(state, name, allowExpression) {
	  /** @type {Identifier | Literal | MemberExpression} */
	  let result;

	  if (!allowExpression) {
	    result = {type: 'Literal', value: name};
	  } else if (name.includes('.')) {
	    const identifiers = name.split('.');
	    let index = -1;
	    /** @type {Identifier | Literal | MemberExpression | undefined} */
	    let node;

	    while (++index < identifiers.length) {
	      /** @type {Identifier | Literal} */
	      const prop = name$1(identifiers[index])
	        ? {type: 'Identifier', name: identifiers[index]}
	        : {type: 'Literal', value: identifiers[index]};
	      node = node
	        ? {
	            type: 'MemberExpression',
	            object: node,
	            property: prop,
	            computed: Boolean(index && prop.type === 'Literal'),
	            optional: false
	          }
	        : prop;
	    }
	    result = node;
	  } else {
	    result =
	      name$1(name) && !/^[a-z]/.test(name)
	        ? {type: 'Identifier', name}
	        : {type: 'Literal', value: name};
	  }

	  // Only literals can be passed in `components` currently.
	  // No identifiers / member expressions.
	  if (result.type === 'Literal') {
	    const name = /** @type {keyof JSX.IntrinsicElements} */ (result.value);

	    return own$f.call(state.components, name) ? state.components[name] : name
	  }

	  // Assume component.
	  if (state.evaluater) {
	    return state.evaluater.evaluateExpression(result)
	  }

	  crashEstree(state);
	}

	/**
	 * @param {State} state
	 * @param {Position | undefined} [place]
	 * @returns {never}
	 */
	function crashEstree(state, place) {
	  const message = new VFileMessage(
	    'Cannot handle MDX estrees without `createEvaluater`',
	    {
	      ancestors: state.ancestors,
	      place,
	      ruleId: 'mdx-estree',
	      source: 'hast-util-to-jsx-runtime'
	    }
	  );
	  message.file = state.filePath || undefined;
	  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater';

	  throw message
	}

	/**
	 * Transform a DOM casing style object to a CSS casing style object.
	 *
	 * @param {Style} domCasing
	 * @returns {Style}
	 */
	function transformStylesToCssCasing(domCasing) {
	  /** @type {Style} */
	  const cssCasing = {};
	  /** @type {string} */
	  let from;

	  for (from in domCasing) {
	    if (own$f.call(domCasing, from)) {
	      cssCasing[transformStyleToCssCasing(from)] = domCasing[from];
	    }
	  }

	  return cssCasing
	}

	/**
	 * Transform a DOM casing style field to a CSS casing style field.
	 *
	 * @param {string} from
	 * @returns {string}
	 */
	function transformStyleToCssCasing(from) {
	  let to = from.replace(cap, toDash);
	  // Handle `ms-xxx` -> `-ms-xxx`.
	  if (to.slice(0, 3) === 'ms-') to = '-' + to;
	  return to
	}

	/**
	 * Make `$1` capitalized.
	 *
	 * @param {string} _
	 *   Whatever.
	 * @param {string} $1
	 *   Single ASCII alphabetical.
	 * @returns {string}
	 *   Capitalized `$1`.
	 */
	function toCamel(_, $1) {
	  return $1.toUpperCase()
	}

	/**
	 * Make `$0` dash cased.
	 *
	 * @param {string} $0
	 *   Capitalized ASCII leter.
	 * @returns {string}
	 *   Dash and lower letter.
	 */
	function toDash($0) {
	  return '-' + $0.toLowerCase()
	}

	/**
	 * HTML URL properties.
	 *
	 * Each key is a property name and each value is a list of tag names it applies
	 * to or `null` if it applies to all elements.
	 *
	 * @type {Record<string, Array<string> | null>}
	 */
	const urlAttributes = {
	  action: ['form'],
	  cite: ['blockquote', 'del', 'ins', 'q'],
	  data: ['object'],
	  formAction: ['button', 'input'],
	  href: ['a', 'area', 'base', 'link'],
	  icon: ['menuitem'],
	  itemId: null,
	  manifest: ['html'],
	  ping: ['a', 'area'],
	  poster: ['video'],
	  src: [
	    'audio',
	    'embed',
	    'iframe',
	    'img',
	    'input',
	    'script',
	    'source',
	    'track',
	    'video'
	  ]
	};

	var jsxRuntime = {exports: {}};

	var reactJsxRuntime_production_min = {};

	/**
	 * @license React
	 * react-jsx-runtime.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactJsxRuntime_production_min;

	function requireReactJsxRuntime_production_min () {
		if (hasRequiredReactJsxRuntime_production_min) return reactJsxRuntime_production_min;
		hasRequiredReactJsxRuntime_production_min = 1;
	var f=reactExports,k=Symbol.for("react.element"),l=Symbol.for("react.fragment"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};
		function q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=""+g);void 0!==a.key&&(e=""+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return {$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}reactJsxRuntime_production_min.Fragment=l;reactJsxRuntime_production_min.jsx=q;reactJsxRuntime_production_min.jsxs=q;
		return reactJsxRuntime_production_min;
	}

	{
	  jsxRuntime.exports = requireReactJsxRuntime_production_min();
	}

	var jsxRuntimeExports = jsxRuntime.exports;

	/**
	 * @typedef {import('mdast').Nodes} Nodes
	 *
	 * @typedef Options
	 *   Configuration (optional).
	 * @property {boolean | null | undefined} [includeImageAlt=true]
	 *   Whether to use `alt` for `image`s (default: `true`).
	 * @property {boolean | null | undefined} [includeHtml=true]
	 *   Whether to use `value` of HTML (default: `true`).
	 */

	/** @type {Options} */
	const emptyOptions$7 = {};

	/**
	 * Get the text content of a node or list of nodes.
	 *
	 * Prefers the node’s plain-text fields, otherwise serializes its children,
	 * and if the given value is an array, serialize the nodes in it.
	 *
	 * @param {unknown} [value]
	 *   Thing to serialize, typically `Node`.
	 * @param {Options | null | undefined} [options]
	 *   Configuration (optional).
	 * @returns {string}
	 *   Serialized `value`.
	 */
	function toString$3(value, options) {
	  const settings = options || emptyOptions$7;
	  const includeImageAlt =
	    typeof settings.includeImageAlt === 'boolean'
	      ? settings.includeImageAlt
	      : true;
	  const includeHtml =
	    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true;

	  return one$6(value, includeImageAlt, includeHtml)
	}

	/**
	 * One node or several nodes.
	 *
	 * @param {unknown} value
	 *   Thing to serialize.
	 * @param {boolean} includeImageAlt
	 *   Include image `alt`s.
	 * @param {boolean} includeHtml
	 *   Include HTML.
	 * @returns {string}
	 *   Serialized node.
	 */
	function one$6(value, includeImageAlt, includeHtml) {
	  if (node(value)) {
	    if ('value' in value) {
	      return value.type === 'html' && !includeHtml ? '' : value.value
	    }

	    if (includeImageAlt && 'alt' in value && value.alt) {
	      return value.alt
	    }

	    if ('children' in value) {
	      return all$7(value.children, includeImageAlt, includeHtml)
	    }
	  }

	  if (Array.isArray(value)) {
	    return all$7(value, includeImageAlt, includeHtml)
	  }

	  return ''
	}

	/**
	 * Serialize a list of nodes.
	 *
	 * @param {Array<unknown>} values
	 *   Thing to serialize.
	 * @param {boolean} includeImageAlt
	 *   Include image `alt`s.
	 * @param {boolean} includeHtml
	 *   Include HTML.
	 * @returns {string}
	 *   Serialized nodes.
	 */
	function all$7(values, includeImageAlt, includeHtml) {
	  /** @type {Array<string>} */
	  const result = [];
	  let index = -1;

	  while (++index < values.length) {
	    result[index] = one$6(values[index], includeImageAlt, includeHtml);
	  }

	  return result.join('')
	}

	/**
	 * Check if `value` looks like a node.
	 *
	 * @param {unknown} value
	 *   Thing.
	 * @returns {value is Nodes}
	 *   Whether `value` is a node.
	 */
	function node(value) {
	  return Boolean(value && typeof value === 'object')
	}

	/**
	 * Map of named character references.
	 *
	 * @type {Record<string, string>}
	 */
	const characterEntities = {
	  AElig: 'Æ',
	  AMP: '&',
	  Aacute: 'Á',
	  Abreve: 'Ă',
	  Acirc: 'Â',
	  Acy: 'А',
	  Afr: '𝔄',
	  Agrave: 'À',
	  Alpha: 'Α',
	  Amacr: 'Ā',
	  And: '⩓',
	  Aogon: 'Ą',
	  Aopf: '𝔸',
	  ApplyFunction: '⁡',
	  Aring: 'Å',
	  Ascr: '𝒜',
	  Assign: '≔',
	  Atilde: 'Ã',
	  Auml: 'Ä',
	  Backslash: '∖',
	  Barv: '⫧',
	  Barwed: '⌆',
	  Bcy: 'Б',
	  Because: '∵',
	  Bernoullis: 'ℬ',
	  Beta: 'Β',
	  Bfr: '𝔅',
	  Bopf: '𝔹',
	  Breve: '˘',
	  Bscr: 'ℬ',
	  Bumpeq: '≎',
	  CHcy: 'Ч',
	  COPY: '©',
	  Cacute: 'Ć',
	  Cap: '⋒',
	  CapitalDifferentialD: 'ⅅ',
	  Cayleys: 'ℭ',
	  Ccaron: 'Č',
	  Ccedil: 'Ç',
	  Ccirc: 'Ĉ',
	  Cconint: '∰',
	  Cdot: 'Ċ',
	  Cedilla: '¸',
	  CenterDot: '·',
	  Cfr: 'ℭ',
	  Chi: 'Χ',
	  CircleDot: '⊙',
	  CircleMinus: '⊖',
	  CirclePlus: '⊕',
	  CircleTimes: '⊗',
	  ClockwiseContourIntegral: '∲',
	  CloseCurlyDoubleQuote: '”',
	  CloseCurlyQuote: '’',
	  Colon: '∷',
	  Colone: '⩴',
	  Congruent: '≡',
	  Conint: '∯',
	  ContourIntegral: '∮',
	  Copf: 'ℂ',
	  Coproduct: '∐',
	  CounterClockwiseContourIntegral: '∳',
	  Cross: '⨯',
	  Cscr: '𝒞',
	  Cup: '⋓',
	  CupCap: '≍',
	  DD: 'ⅅ',
	  DDotrahd: '⤑',
	  DJcy: 'Ђ',
	  DScy: 'Ѕ',
	  DZcy: 'Џ',
	  Dagger: '‡',
	  Darr: '↡',
	  Dashv: '⫤',
	  Dcaron: 'Ď',
	  Dcy: 'Д',
	  Del: '∇',
	  Delta: 'Δ',
	  Dfr: '𝔇',
	  DiacriticalAcute: '´',
	  DiacriticalDot: '˙',
	  DiacriticalDoubleAcute: '˝',
	  DiacriticalGrave: '`',
	  DiacriticalTilde: '˜',
	  Diamond: '⋄',
	  DifferentialD: 'ⅆ',
	  Dopf: '𝔻',
	  Dot: '¨',
	  DotDot: '⃜',
	  DotEqual: '≐',
	  DoubleContourIntegral: '∯',
	  DoubleDot: '¨',
	  DoubleDownArrow: '⇓',
	  DoubleLeftArrow: '⇐',
	  DoubleLeftRightArrow: '⇔',
	  DoubleLeftTee: '⫤',
	  DoubleLongLeftArrow: '⟸',
	  DoubleLongLeftRightArrow: '⟺',
	  DoubleLongRightArrow: '⟹',
	  DoubleRightArrow: '⇒',
	  DoubleRightTee: '⊨',
	  DoubleUpArrow: '⇑',
	  DoubleUpDownArrow: '⇕',
	  DoubleVerticalBar: '∥',
	  DownArrow: '↓',
	  DownArrowBar: '⤓',
	  DownArrowUpArrow: '⇵',
	  DownBreve: '̑',
	  DownLeftRightVector: '⥐',
	  DownLeftTeeVector: '⥞',
	  DownLeftVector: '↽',
	  DownLeftVectorBar: '⥖',
	  DownRightTeeVector: '⥟',
	  DownRightVector: '⇁',
	  DownRightVectorBar: '⥗',
	  DownTee: '⊤',
	  DownTeeArrow: '↧',
	  Downarrow: '⇓',
	  Dscr: '𝒟',
	  Dstrok: 'Đ',
	  ENG: 'Ŋ',
	  ETH: 'Ð',
	  Eacute: 'É',
	  Ecaron: 'Ě',
	  Ecirc: 'Ê',
	  Ecy: 'Э',
	  Edot: 'Ė',
	  Efr: '𝔈',
	  Egrave: 'È',
	  Element: '∈',
	  Emacr: 'Ē',
	  EmptySmallSquare: '◻',
	  EmptyVerySmallSquare: '▫',
	  Eogon: 'Ę',
	  Eopf: '𝔼',
	  Epsilon: 'Ε',
	  Equal: '⩵',
	  EqualTilde: '≂',
	  Equilibrium: '⇌',
	  Escr: 'ℰ',
	  Esim: '⩳',
	  Eta: 'Η',
	  Euml: 'Ë',
	  Exists: '∃',
	  ExponentialE: 'ⅇ',
	  Fcy: 'Ф',
	  Ffr: '𝔉',
	  FilledSmallSquare: '◼',
	  FilledVerySmallSquare: '▪',
	  Fopf: '𝔽',
	  ForAll: '∀',
	  Fouriertrf: 'ℱ',
	  Fscr: 'ℱ',
	  GJcy: 'Ѓ',
	  GT: '>',
	  Gamma: 'Γ',
	  Gammad: 'Ϝ',
	  Gbreve: 'Ğ',
	  Gcedil: 'Ģ',
	  Gcirc: 'Ĝ',
	  Gcy: 'Г',
	  Gdot: 'Ġ',
	  Gfr: '𝔊',
	  Gg: '⋙',
	  Gopf: '𝔾',
	  GreaterEqual: '≥',
	  GreaterEqualLess: '⋛',
	  GreaterFullEqual: '≧',
	  GreaterGreater: '⪢',
	  GreaterLess: '≷',
	  GreaterSlantEqual: '⩾',
	  GreaterTilde: '≳',
	  Gscr: '𝒢',
	  Gt: '≫',
	  HARDcy: 'Ъ',
	  Hacek: 'ˇ',
	  Hat: '^',
	  Hcirc: 'Ĥ',
	  Hfr: 'ℌ',
	  HilbertSpace: 'ℋ',
	  Hopf: 'ℍ',
	  HorizontalLine: '─',
	  Hscr: 'ℋ',
	  Hstrok: 'Ħ',
	  HumpDownHump: '≎',
	  HumpEqual: '≏',
	  IEcy: 'Е',
	  IJlig: 'Ĳ',
	  IOcy: 'Ё',
	  Iacute: 'Í',
	  Icirc: 'Î',
	  Icy: 'И',
	  Idot: 'İ',
	  Ifr: 'ℑ',
	  Igrave: 'Ì',
	  Im: 'ℑ',
	  Imacr: 'Ī',
	  ImaginaryI: 'ⅈ',
	  Implies: '⇒',
	  Int: '∬',
	  Integral: '∫',
	  Intersection: '⋂',
	  InvisibleComma: '⁣',
	  InvisibleTimes: '⁢',
	  Iogon: 'Į',
	  Iopf: '𝕀',
	  Iota: 'Ι',
	  Iscr: 'ℐ',
	  Itilde: 'Ĩ',
	  Iukcy: 'І',
	  Iuml: 'Ï',
	  Jcirc: 'Ĵ',
	  Jcy: 'Й',
	  Jfr: '𝔍',
	  Jopf: '𝕁',
	  Jscr: '𝒥',
	  Jsercy: 'Ј',
	  Jukcy: 'Є',
	  KHcy: 'Х',
	  KJcy: 'Ќ',
	  Kappa: 'Κ',
	  Kcedil: 'Ķ',
	  Kcy: 'К',
	  Kfr: '𝔎',
	  Kopf: '𝕂',
	  Kscr: '𝒦',
	  LJcy: 'Љ',
	  LT: '<',
	  Lacute: 'Ĺ',
	  Lambda: 'Λ',
	  Lang: '⟪',
	  Laplacetrf: 'ℒ',
	  Larr: '↞',
	  Lcaron: 'Ľ',
	  Lcedil: 'Ļ',
	  Lcy: 'Л',
	  LeftAngleBracket: '⟨',
	  LeftArrow: '←',
	  LeftArrowBar: '⇤',
	  LeftArrowRightArrow: '⇆',
	  LeftCeiling: '⌈',
	  LeftDoubleBracket: '⟦',
	  LeftDownTeeVector: '⥡',
	  LeftDownVector: '⇃',
	  LeftDownVectorBar: '⥙',
	  LeftFloor: '⌊',
	  LeftRightArrow: '↔',
	  LeftRightVector: '⥎',
	  LeftTee: '⊣',
	  LeftTeeArrow: '↤',
	  LeftTeeVector: '⥚',
	  LeftTriangle: '⊲',
	  LeftTriangleBar: '⧏',
	  LeftTriangleEqual: '⊴',
	  LeftUpDownVector: '⥑',
	  LeftUpTeeVector: '⥠',
	  LeftUpVector: '↿',
	  LeftUpVectorBar: '⥘',
	  LeftVector: '↼',
	  LeftVectorBar: '⥒',
	  Leftarrow: '⇐',
	  Leftrightarrow: '⇔',
	  LessEqualGreater: '⋚',
	  LessFullEqual: '≦',
	  LessGreater: '≶',
	  LessLess: '⪡',
	  LessSlantEqual: '⩽',
	  LessTilde: '≲',
	  Lfr: '𝔏',
	  Ll: '⋘',
	  Lleftarrow: '⇚',
	  Lmidot: 'Ŀ',
	  LongLeftArrow: '⟵',
	  LongLeftRightArrow: '⟷',
	  LongRightArrow: '⟶',
	  Longleftarrow: '⟸',
	  Longleftrightarrow: '⟺',
	  Longrightarrow: '⟹',
	  Lopf: '𝕃',
	  LowerLeftArrow: '↙',
	  LowerRightArrow: '↘',
	  Lscr: 'ℒ',
	  Lsh: '↰',
	  Lstrok: 'Ł',
	  Lt: '≪',
	  Map: '⤅',
	  Mcy: 'М',
	  MediumSpace: ' ',
	  Mellintrf: 'ℳ',
	  Mfr: '𝔐',
	  MinusPlus: '∓',
	  Mopf: '𝕄',
	  Mscr: 'ℳ',
	  Mu: 'Μ',
	  NJcy: 'Њ',
	  Nacute: 'Ń',
	  Ncaron: 'Ň',
	  Ncedil: 'Ņ',
	  Ncy: 'Н',
	  NegativeMediumSpace: '​',
	  NegativeThickSpace: '​',
	  NegativeThinSpace: '​',
	  NegativeVeryThinSpace: '​',
	  NestedGreaterGreater: '≫',
	  NestedLessLess: '≪',
	  NewLine: '\n',
	  Nfr: '𝔑',
	  NoBreak: '⁠',
	  NonBreakingSpace: ' ',
	  Nopf: 'ℕ',
	  Not: '⫬',
	  NotCongruent: '≢',
	  NotCupCap: '≭',
	  NotDoubleVerticalBar: '∦',
	  NotElement: '∉',
	  NotEqual: '≠',
	  NotEqualTilde: '≂̸',
	  NotExists: '∄',
	  NotGreater: '≯',
	  NotGreaterEqual: '≱',
	  NotGreaterFullEqual: '≧̸',
	  NotGreaterGreater: '≫̸',
	  NotGreaterLess: '≹',
	  NotGreaterSlantEqual: '⩾̸',
	  NotGreaterTilde: '≵',
	  NotHumpDownHump: '≎̸',
	  NotHumpEqual: '≏̸',
	  NotLeftTriangle: '⋪',
	  NotLeftTriangleBar: '⧏̸',
	  NotLeftTriangleEqual: '⋬',
	  NotLess: '≮',
	  NotLessEqual: '≰',
	  NotLessGreater: '≸',
	  NotLessLess: '≪̸',
	  NotLessSlantEqual: '⩽̸',
	  NotLessTilde: '≴',
	  NotNestedGreaterGreater: '⪢̸',
	  NotNestedLessLess: '⪡̸',
	  NotPrecedes: '⊀',
	  NotPrecedesEqual: '⪯̸',
	  NotPrecedesSlantEqual: '⋠',
	  NotReverseElement: '∌',
	  NotRightTriangle: '⋫',
	  NotRightTriangleBar: '⧐̸',
	  NotRightTriangleEqual: '⋭',
	  NotSquareSubset: '⊏̸',
	  NotSquareSubsetEqual: '⋢',
	  NotSquareSuperset: '⊐̸',
	  NotSquareSupersetEqual: '⋣',
	  NotSubset: '⊂⃒',
	  NotSubsetEqual: '⊈',
	  NotSucceeds: '⊁',
	  NotSucceedsEqual: '⪰̸',
	  NotSucceedsSlantEqual: '⋡',
	  NotSucceedsTilde: '≿̸',
	  NotSuperset: '⊃⃒',
	  NotSupersetEqual: '⊉',
	  NotTilde: '≁',
	  NotTildeEqual: '≄',
	  NotTildeFullEqual: '≇',
	  NotTildeTilde: '≉',
	  NotVerticalBar: '∤',
	  Nscr: '𝒩',
	  Ntilde: 'Ñ',
	  Nu: 'Ν',
	  OElig: 'Œ',
	  Oacute: 'Ó',
	  Ocirc: 'Ô',
	  Ocy: 'О',
	  Odblac: 'Ő',
	  Ofr: '𝔒',
	  Ograve: 'Ò',
	  Omacr: 'Ō',
	  Omega: 'Ω',
	  Omicron: 'Ο',
	  Oopf: '𝕆',
	  OpenCurlyDoubleQuote: '“',
	  OpenCurlyQuote: '‘',
	  Or: '⩔',
	  Oscr: '𝒪',
	  Oslash: 'Ø',
	  Otilde: 'Õ',
	  Otimes: '⨷',
	  Ouml: 'Ö',
	  OverBar: '‾',
	  OverBrace: '⏞',
	  OverBracket: '⎴',
	  OverParenthesis: '⏜',
	  PartialD: '∂',
	  Pcy: 'П',
	  Pfr: '𝔓',
	  Phi: 'Φ',
	  Pi: 'Π',
	  PlusMinus: '±',
	  Poincareplane: 'ℌ',
	  Popf: 'ℙ',
	  Pr: '⪻',
	  Precedes: '≺',
	  PrecedesEqual: '⪯',
	  PrecedesSlantEqual: '≼',
	  PrecedesTilde: '≾',
	  Prime: '″',
	  Product: '∏',
	  Proportion: '∷',
	  Proportional: '∝',
	  Pscr: '𝒫',
	  Psi: 'Ψ',
	  QUOT: '"',
	  Qfr: '𝔔',
	  Qopf: 'ℚ',
	  Qscr: '𝒬',
	  RBarr: '⤐',
	  REG: '®',
	  Racute: 'Ŕ',
	  Rang: '⟫',
	  Rarr: '↠',
	  Rarrtl: '⤖',
	  Rcaron: 'Ř',
	  Rcedil: 'Ŗ',
	  Rcy: 'Р',
	  Re: 'ℜ',
	  ReverseElement: '∋',
	  ReverseEquilibrium: '⇋',
	  ReverseUpEquilibrium: '⥯',
	  Rfr: 'ℜ',
	  Rho: 'Ρ',
	  RightAngleBracket: '⟩',
	  RightArrow: '→',
	  RightArrowBar: '⇥',
	  RightArrowLeftArrow: '⇄',
	  RightCeiling: '⌉',
	  RightDoubleBracket: '⟧',
	  RightDownTeeVector: '⥝',
	  RightDownVector: '⇂',
	  RightDownVectorBar: '⥕',
	  RightFloor: '⌋',
	  RightTee: '⊢',
	  RightTeeArrow: '↦',
	  RightTeeVector: '⥛',
	  RightTriangle: '⊳',
	  RightTriangleBar: '⧐',
	  RightTriangleEqual: '⊵',
	  RightUpDownVector: '⥏',
	  RightUpTeeVector: '⥜',
	  RightUpVector: '↾',
	  RightUpVectorBar: '⥔',
	  RightVector: '⇀',
	  RightVectorBar: '⥓',
	  Rightarrow: '⇒',
	  Ropf: 'ℝ',
	  RoundImplies: '⥰',
	  Rrightarrow: '⇛',
	  Rscr: 'ℛ',
	  Rsh: '↱',
	  RuleDelayed: '⧴',
	  SHCHcy: 'Щ',
	  SHcy: 'Ш',
	  SOFTcy: 'Ь',
	  Sacute: 'Ś',
	  Sc: '⪼',
	  Scaron: 'Š',
	  Scedil: 'Ş',
	  Scirc: 'Ŝ',
	  Scy: 'С',
	  Sfr: '𝔖',
	  ShortDownArrow: '↓',
	  ShortLeftArrow: '←',
	  ShortRightArrow: '→',
	  ShortUpArrow: '↑',
	  Sigma: 'Σ',
	  SmallCircle: '∘',
	  Sopf: '𝕊',
	  Sqrt: '√',
	  Square: '□',
	  SquareIntersection: '⊓',
	  SquareSubset: '⊏',
	  SquareSubsetEqual: '⊑',
	  SquareSuperset: '⊐',
	  SquareSupersetEqual: '⊒',
	  SquareUnion: '⊔',
	  Sscr: '𝒮',
	  Star: '⋆',
	  Sub: '⋐',
	  Subset: '⋐',
	  SubsetEqual: '⊆',
	  Succeeds: '≻',
	  SucceedsEqual: '⪰',
	  SucceedsSlantEqual: '≽',
	  SucceedsTilde: '≿',
	  SuchThat: '∋',
	  Sum: '∑',
	  Sup: '⋑',
	  Superset: '⊃',
	  SupersetEqual: '⊇',
	  Supset: '⋑',
	  THORN: 'Þ',
	  TRADE: '™',
	  TSHcy: 'Ћ',
	  TScy: 'Ц',
	  Tab: '\t',
	  Tau: 'Τ',
	  Tcaron: 'Ť',
	  Tcedil: 'Ţ',
	  Tcy: 'Т',
	  Tfr: '𝔗',
	  Therefore: '∴',
	  Theta: 'Θ',
	  ThickSpace: '  ',
	  ThinSpace: ' ',
	  Tilde: '∼',
	  TildeEqual: '≃',
	  TildeFullEqual: '≅',
	  TildeTilde: '≈',
	  Topf: '𝕋',
	  TripleDot: '⃛',
	  Tscr: '𝒯',
	  Tstrok: 'Ŧ',
	  Uacute: 'Ú',
	  Uarr: '↟',
	  Uarrocir: '⥉',
	  Ubrcy: 'Ў',
	  Ubreve: 'Ŭ',
	  Ucirc: 'Û',
	  Ucy: 'У',
	  Udblac: 'Ű',
	  Ufr: '𝔘',
	  Ugrave: 'Ù',
	  Umacr: 'Ū',
	  UnderBar: '_',
	  UnderBrace: '⏟',
	  UnderBracket: '⎵',
	  UnderParenthesis: '⏝',
	  Union: '⋃',
	  UnionPlus: '⊎',
	  Uogon: 'Ų',
	  Uopf: '𝕌',
	  UpArrow: '↑',
	  UpArrowBar: '⤒',
	  UpArrowDownArrow: '⇅',
	  UpDownArrow: '↕',
	  UpEquilibrium: '⥮',
	  UpTee: '⊥',
	  UpTeeArrow: '↥',
	  Uparrow: '⇑',
	  Updownarrow: '⇕',
	  UpperLeftArrow: '↖',
	  UpperRightArrow: '↗',
	  Upsi: 'ϒ',
	  Upsilon: 'Υ',
	  Uring: 'Ů',
	  Uscr: '𝒰',
	  Utilde: 'Ũ',
	  Uuml: 'Ü',
	  VDash: '⊫',
	  Vbar: '⫫',
	  Vcy: 'В',
	  Vdash: '⊩',
	  Vdashl: '⫦',
	  Vee: '⋁',
	  Verbar: '‖',
	  Vert: '‖',
	  VerticalBar: '∣',
	  VerticalLine: '|',
	  VerticalSeparator: '❘',
	  VerticalTilde: '≀',
	  VeryThinSpace: ' ',
	  Vfr: '𝔙',
	  Vopf: '𝕍',
	  Vscr: '𝒱',
	  Vvdash: '⊪',
	  Wcirc: 'Ŵ',
	  Wedge: '⋀',
	  Wfr: '𝔚',
	  Wopf: '𝕎',
	  Wscr: '𝒲',
	  Xfr: '𝔛',
	  Xi: 'Ξ',
	  Xopf: '𝕏',
	  Xscr: '𝒳',
	  YAcy: 'Я',
	  YIcy: 'Ї',
	  YUcy: 'Ю',
	  Yacute: 'Ý',
	  Ycirc: 'Ŷ',
	  Ycy: 'Ы',
	  Yfr: '𝔜',
	  Yopf: '𝕐',
	  Yscr: '𝒴',
	  Yuml: 'Ÿ',
	  ZHcy: 'Ж',
	  Zacute: 'Ź',
	  Zcaron: 'Ž',
	  Zcy: 'З',
	  Zdot: 'Ż',
	  ZeroWidthSpace: '​',
	  Zeta: 'Ζ',
	  Zfr: 'ℨ',
	  Zopf: 'ℤ',
	  Zscr: '𝒵',
	  aacute: 'á',
	  abreve: 'ă',
	  ac: '∾',
	  acE: '∾̳',
	  acd: '∿',
	  acirc: 'â',
	  acute: '´',
	  acy: 'а',
	  aelig: 'æ',
	  af: '⁡',
	  afr: '𝔞',
	  agrave: 'à',
	  alefsym: 'ℵ',
	  aleph: 'ℵ',
	  alpha: 'α',
	  amacr: 'ā',
	  amalg: '⨿',
	  amp: '&',
	  and: '∧',
	  andand: '⩕',
	  andd: '⩜',
	  andslope: '⩘',
	  andv: '⩚',
	  ang: '∠',
	  ange: '⦤',
	  angle: '∠',
	  angmsd: '∡',
	  angmsdaa: '⦨',
	  angmsdab: '⦩',
	  angmsdac: '⦪',
	  angmsdad: '⦫',
	  angmsdae: '⦬',
	  angmsdaf: '⦭',
	  angmsdag: '⦮',
	  angmsdah: '⦯',
	  angrt: '∟',
	  angrtvb: '⊾',
	  angrtvbd: '⦝',
	  angsph: '∢',
	  angst: 'Å',
	  angzarr: '⍼',
	  aogon: 'ą',
	  aopf: '𝕒',
	  ap: '≈',
	  apE: '⩰',
	  apacir: '⩯',
	  ape: '≊',
	  apid: '≋',
	  apos: "'",
	  approx: '≈',
	  approxeq: '≊',
	  aring: 'å',
	  ascr: '𝒶',
	  ast: '*',
	  asymp: '≈',
	  asympeq: '≍',
	  atilde: 'ã',
	  auml: 'ä',
	  awconint: '∳',
	  awint: '⨑',
	  bNot: '⫭',
	  backcong: '≌',
	  backepsilon: '϶',
	  backprime: '‵',
	  backsim: '∽',
	  backsimeq: '⋍',
	  barvee: '⊽',
	  barwed: '⌅',
	  barwedge: '⌅',
	  bbrk: '⎵',
	  bbrktbrk: '⎶',
	  bcong: '≌',
	  bcy: 'б',
	  bdquo: '„',
	  becaus: '∵',
	  because: '∵',
	  bemptyv: '⦰',
	  bepsi: '϶',
	  bernou: 'ℬ',
	  beta: 'β',
	  beth: 'ℶ',
	  between: '≬',
	  bfr: '𝔟',
	  bigcap: '⋂',
	  bigcirc: '◯',
	  bigcup: '⋃',
	  bigodot: '⨀',
	  bigoplus: '⨁',
	  bigotimes: '⨂',
	  bigsqcup: '⨆',
	  bigstar: '★',
	  bigtriangledown: '▽',
	  bigtriangleup: '△',
	  biguplus: '⨄',
	  bigvee: '⋁',
	  bigwedge: '⋀',
	  bkarow: '⤍',
	  blacklozenge: '⧫',
	  blacksquare: '▪',
	  blacktriangle: '▴',
	  blacktriangledown: '▾',
	  blacktriangleleft: '◂',
	  blacktriangleright: '▸',
	  blank: '␣',
	  blk12: '▒',
	  blk14: '░',
	  blk34: '▓',
	  block: '█',
	  bne: '=⃥',
	  bnequiv: '≡⃥',
	  bnot: '⌐',
	  bopf: '𝕓',
	  bot: '⊥',
	  bottom: '⊥',
	  bowtie: '⋈',
	  boxDL: '╗',
	  boxDR: '╔',
	  boxDl: '╖',
	  boxDr: '╓',
	  boxH: '═',
	  boxHD: '╦',
	  boxHU: '╩',
	  boxHd: '╤',
	  boxHu: '╧',
	  boxUL: '╝',
	  boxUR: '╚',
	  boxUl: '╜',
	  boxUr: '╙',
	  boxV: '║',
	  boxVH: '╬',
	  boxVL: '╣',
	  boxVR: '╠',
	  boxVh: '╫',
	  boxVl: '╢',
	  boxVr: '╟',
	  boxbox: '⧉',
	  boxdL: '╕',
	  boxdR: '╒',
	  boxdl: '┐',
	  boxdr: '┌',
	  boxh: '─',
	  boxhD: '╥',
	  boxhU: '╨',
	  boxhd: '┬',
	  boxhu: '┴',
	  boxminus: '⊟',
	  boxplus: '⊞',
	  boxtimes: '⊠',
	  boxuL: '╛',
	  boxuR: '╘',
	  boxul: '┘',
	  boxur: '└',
	  boxv: '│',
	  boxvH: '╪',
	  boxvL: '╡',
	  boxvR: '╞',
	  boxvh: '┼',
	  boxvl: '┤',
	  boxvr: '├',
	  bprime: '‵',
	  breve: '˘',
	  brvbar: '¦',
	  bscr: '𝒷',
	  bsemi: '⁏',
	  bsim: '∽',
	  bsime: '⋍',
	  bsol: '\\',
	  bsolb: '⧅',
	  bsolhsub: '⟈',
	  bull: '•',
	  bullet: '•',
	  bump: '≎',
	  bumpE: '⪮',
	  bumpe: '≏',
	  bumpeq: '≏',
	  cacute: 'ć',
	  cap: '∩',
	  capand: '⩄',
	  capbrcup: '⩉',
	  capcap: '⩋',
	  capcup: '⩇',
	  capdot: '⩀',
	  caps: '∩︀',
	  caret: '⁁',
	  caron: 'ˇ',
	  ccaps: '⩍',
	  ccaron: 'č',
	  ccedil: 'ç',
	  ccirc: 'ĉ',
	  ccups: '⩌',
	  ccupssm: '⩐',
	  cdot: 'ċ',
	  cedil: '¸',
	  cemptyv: '⦲',
	  cent: '¢',
	  centerdot: '·',
	  cfr: '𝔠',
	  chcy: 'ч',
	  check: '✓',
	  checkmark: '✓',
	  chi: 'χ',
	  cir: '○',
	  cirE: '⧃',
	  circ: 'ˆ',
	  circeq: '≗',
	  circlearrowleft: '↺',
	  circlearrowright: '↻',
	  circledR: '®',
	  circledS: 'Ⓢ',
	  circledast: '⊛',
	  circledcirc: '⊚',
	  circleddash: '⊝',
	  cire: '≗',
	  cirfnint: '⨐',
	  cirmid: '⫯',
	  cirscir: '⧂',
	  clubs: '♣',
	  clubsuit: '♣',
	  colon: ':',
	  colone: '≔',
	  coloneq: '≔',
	  comma: ',',
	  commat: '@',
	  comp: '∁',
	  compfn: '∘',
	  complement: '∁',
	  complexes: 'ℂ',
	  cong: '≅',
	  congdot: '⩭',
	  conint: '∮',
	  copf: '𝕔',
	  coprod: '∐',
	  copy: '©',
	  copysr: '℗',
	  crarr: '↵',
	  cross: '✗',
	  cscr: '𝒸',
	  csub: '⫏',
	  csube: '⫑',
	  csup: '⫐',
	  csupe: '⫒',
	  ctdot: '⋯',
	  cudarrl: '⤸',
	  cudarrr: '⤵',
	  cuepr: '⋞',
	  cuesc: '⋟',
	  cularr: '↶',
	  cularrp: '⤽',
	  cup: '∪',
	  cupbrcap: '⩈',
	  cupcap: '⩆',
	  cupcup: '⩊',
	  cupdot: '⊍',
	  cupor: '⩅',
	  cups: '∪︀',
	  curarr: '↷',
	  curarrm: '⤼',
	  curlyeqprec: '⋞',
	  curlyeqsucc: '⋟',
	  curlyvee: '⋎',
	  curlywedge: '⋏',
	  curren: '¤',
	  curvearrowleft: '↶',
	  curvearrowright: '↷',
	  cuvee: '⋎',
	  cuwed: '⋏',
	  cwconint: '∲',
	  cwint: '∱',
	  cylcty: '⌭',
	  dArr: '⇓',
	  dHar: '⥥',
	  dagger: '†',
	  daleth: 'ℸ',
	  darr: '↓',
	  dash: '‐',
	  dashv: '⊣',
	  dbkarow: '⤏',
	  dblac: '˝',
	  dcaron: 'ď',
	  dcy: 'д',
	  dd: 'ⅆ',
	  ddagger: '‡',
	  ddarr: '⇊',
	  ddotseq: '⩷',
	  deg: '°',
	  delta: 'δ',
	  demptyv: '⦱',
	  dfisht: '⥿',
	  dfr: '𝔡',
	  dharl: '⇃',
	  dharr: '⇂',
	  diam: '⋄',
	  diamond: '⋄',
	  diamondsuit: '♦',
	  diams: '♦',
	  die: '¨',
	  digamma: 'ϝ',
	  disin: '⋲',
	  div: '÷',
	  divide: '÷',
	  divideontimes: '⋇',
	  divonx: '⋇',
	  djcy: 'ђ',
	  dlcorn: '⌞',
	  dlcrop: '⌍',
	  dollar: '$',
	  dopf: '𝕕',
	  dot: '˙',
	  doteq: '≐',
	  doteqdot: '≑',
	  dotminus: '∸',
	  dotplus: '∔',
	  dotsquare: '⊡',
	  doublebarwedge: '⌆',
	  downarrow: '↓',
	  downdownarrows: '⇊',
	  downharpoonleft: '⇃',
	  downharpoonright: '⇂',
	  drbkarow: '⤐',
	  drcorn: '⌟',
	  drcrop: '⌌',
	  dscr: '𝒹',
	  dscy: 'ѕ',
	  dsol: '⧶',
	  dstrok: 'đ',
	  dtdot: '⋱',
	  dtri: '▿',
	  dtrif: '▾',
	  duarr: '⇵',
	  duhar: '⥯',
	  dwangle: '⦦',
	  dzcy: 'џ',
	  dzigrarr: '⟿',
	  eDDot: '⩷',
	  eDot: '≑',
	  eacute: 'é',
	  easter: '⩮',
	  ecaron: 'ě',
	  ecir: '≖',
	  ecirc: 'ê',
	  ecolon: '≕',
	  ecy: 'э',
	  edot: 'ė',
	  ee: 'ⅇ',
	  efDot: '≒',
	  efr: '𝔢',
	  eg: '⪚',
	  egrave: 'è',
	  egs: '⪖',
	  egsdot: '⪘',
	  el: '⪙',
	  elinters: '⏧',
	  ell: 'ℓ',
	  els: '⪕',
	  elsdot: '⪗',
	  emacr: 'ē',
	  empty: '∅',
	  emptyset: '∅',
	  emptyv: '∅',
	  emsp13: ' ',
	  emsp14: ' ',
	  emsp: ' ',
	  eng: 'ŋ',
	  ensp: ' ',
	  eogon: 'ę',
	  eopf: '𝕖',
	  epar: '⋕',
	  eparsl: '⧣',
	  eplus: '⩱',
	  epsi: 'ε',
	  epsilon: 'ε',
	  epsiv: 'ϵ',
	  eqcirc: '≖',
	  eqcolon: '≕',
	  eqsim: '≂',
	  eqslantgtr: '⪖',
	  eqslantless: '⪕',
	  equals: '=',
	  equest: '≟',
	  equiv: '≡',
	  equivDD: '⩸',
	  eqvparsl: '⧥',
	  erDot: '≓',
	  erarr: '⥱',
	  escr: 'ℯ',
	  esdot: '≐',
	  esim: '≂',
	  eta: 'η',
	  eth: 'ð',
	  euml: 'ë',
	  euro: '€',
	  excl: '!',
	  exist: '∃',
	  expectation: 'ℰ',
	  exponentiale: 'ⅇ',
	  fallingdotseq: '≒',
	  fcy: 'ф',
	  female: '♀',
	  ffilig: 'ﬃ',
	  fflig: 'ﬀ',
	  ffllig: 'ﬄ',
	  ffr: '𝔣',
	  filig: 'ﬁ',
	  fjlig: 'fj',
	  flat: '♭',
	  fllig: 'ﬂ',
	  fltns: '▱',
	  fnof: 'ƒ',
	  fopf: '𝕗',
	  forall: '∀',
	  fork: '⋔',
	  forkv: '⫙',
	  fpartint: '⨍',
	  frac12: '½',
	  frac13: '⅓',
	  frac14: '¼',
	  frac15: '⅕',
	  frac16: '⅙',
	  frac18: '⅛',
	  frac23: '⅔',
	  frac25: '⅖',
	  frac34: '¾',
	  frac35: '⅗',
	  frac38: '⅜',
	  frac45: '⅘',
	  frac56: '⅚',
	  frac58: '⅝',
	  frac78: '⅞',
	  frasl: '⁄',
	  frown: '⌢',
	  fscr: '𝒻',
	  gE: '≧',
	  gEl: '⪌',
	  gacute: 'ǵ',
	  gamma: 'γ',
	  gammad: 'ϝ',
	  gap: '⪆',
	  gbreve: 'ğ',
	  gcirc: 'ĝ',
	  gcy: 'г',
	  gdot: 'ġ',
	  ge: '≥',
	  gel: '⋛',
	  geq: '≥',
	  geqq: '≧',
	  geqslant: '⩾',
	  ges: '⩾',
	  gescc: '⪩',
	  gesdot: '⪀',
	  gesdoto: '⪂',
	  gesdotol: '⪄',
	  gesl: '⋛︀',
	  gesles: '⪔',
	  gfr: '𝔤',
	  gg: '≫',
	  ggg: '⋙',
	  gimel: 'ℷ',
	  gjcy: 'ѓ',
	  gl: '≷',
	  glE: '⪒',
	  gla: '⪥',
	  glj: '⪤',
	  gnE: '≩',
	  gnap: '⪊',
	  gnapprox: '⪊',
	  gne: '⪈',
	  gneq: '⪈',
	  gneqq: '≩',
	  gnsim: '⋧',
	  gopf: '𝕘',
	  grave: '`',
	  gscr: 'ℊ',
	  gsim: '≳',
	  gsime: '⪎',
	  gsiml: '⪐',
	  gt: '>',
	  gtcc: '⪧',
	  gtcir: '⩺',
	  gtdot: '⋗',
	  gtlPar: '⦕',
	  gtquest: '⩼',
	  gtrapprox: '⪆',
	  gtrarr: '⥸',
	  gtrdot: '⋗',
	  gtreqless: '⋛',
	  gtreqqless: '⪌',
	  gtrless: '≷',
	  gtrsim: '≳',
	  gvertneqq: '≩︀',
	  gvnE: '≩︀',
	  hArr: '⇔',
	  hairsp: ' ',
	  half: '½',
	  hamilt: 'ℋ',
	  hardcy: 'ъ',
	  harr: '↔',
	  harrcir: '⥈',
	  harrw: '↭',
	  hbar: 'ℏ',
	  hcirc: 'ĥ',
	  hearts: '♥',
	  heartsuit: '♥',
	  hellip: '…',
	  hercon: '⊹',
	  hfr: '𝔥',
	  hksearow: '⤥',
	  hkswarow: '⤦',
	  hoarr: '⇿',
	  homtht: '∻',
	  hookleftarrow: '↩',
	  hookrightarrow: '↪',
	  hopf: '𝕙',
	  horbar: '―',
	  hscr: '𝒽',
	  hslash: 'ℏ',
	  hstrok: 'ħ',
	  hybull: '⁃',
	  hyphen: '‐',
	  iacute: 'í',
	  ic: '⁣',
	  icirc: 'î',
	  icy: 'и',
	  iecy: 'е',
	  iexcl: '¡',
	  iff: '⇔',
	  ifr: '𝔦',
	  igrave: 'ì',
	  ii: 'ⅈ',
	  iiiint: '⨌',
	  iiint: '∭',
	  iinfin: '⧜',
	  iiota: '℩',
	  ijlig: 'ĳ',
	  imacr: 'ī',
	  image: 'ℑ',
	  imagline: 'ℐ',
	  imagpart: 'ℑ',
	  imath: 'ı',
	  imof: '⊷',
	  imped: 'Ƶ',
	  in: '∈',
	  incare: '℅',
	  infin: '∞',
	  infintie: '⧝',
	  inodot: 'ı',
	  int: '∫',
	  intcal: '⊺',
	  integers: 'ℤ',
	  intercal: '⊺',
	  intlarhk: '⨗',
	  intprod: '⨼',
	  iocy: 'ё',
	  iogon: 'į',
	  iopf: '𝕚',
	  iota: 'ι',
	  iprod: '⨼',
	  iquest: '¿',
	  iscr: '𝒾',
	  isin: '∈',
	  isinE: '⋹',
	  isindot: '⋵',
	  isins: '⋴',
	  isinsv: '⋳',
	  isinv: '∈',
	  it: '⁢',
	  itilde: 'ĩ',
	  iukcy: 'і',
	  iuml: 'ï',
	  jcirc: 'ĵ',
	  jcy: 'й',
	  jfr: '𝔧',
	  jmath: 'ȷ',
	  jopf: '𝕛',
	  jscr: '𝒿',
	  jsercy: 'ј',
	  jukcy: 'є',
	  kappa: 'κ',
	  kappav: 'ϰ',
	  kcedil: 'ķ',
	  kcy: 'к',
	  kfr: '𝔨',
	  kgreen: 'ĸ',
	  khcy: 'х',
	  kjcy: 'ќ',
	  kopf: '𝕜',
	  kscr: '𝓀',
	  lAarr: '⇚',
	  lArr: '⇐',
	  lAtail: '⤛',
	  lBarr: '⤎',
	  lE: '≦',
	  lEg: '⪋',
	  lHar: '⥢',
	  lacute: 'ĺ',
	  laemptyv: '⦴',
	  lagran: 'ℒ',
	  lambda: 'λ',
	  lang: '⟨',
	  langd: '⦑',
	  langle: '⟨',
	  lap: '⪅',
	  laquo: '«',
	  larr: '←',
	  larrb: '⇤',
	  larrbfs: '⤟',
	  larrfs: '⤝',
	  larrhk: '↩',
	  larrlp: '↫',
	  larrpl: '⤹',
	  larrsim: '⥳',
	  larrtl: '↢',
	  lat: '⪫',
	  latail: '⤙',
	  late: '⪭',
	  lates: '⪭︀',
	  lbarr: '⤌',
	  lbbrk: '❲',
	  lbrace: '{',
	  lbrack: '[',
	  lbrke: '⦋',
	  lbrksld: '⦏',
	  lbrkslu: '⦍',
	  lcaron: 'ľ',
	  lcedil: 'ļ',
	  lceil: '⌈',
	  lcub: '{',
	  lcy: 'л',
	  ldca: '⤶',
	  ldquo: '“',
	  ldquor: '„',
	  ldrdhar: '⥧',
	  ldrushar: '⥋',
	  ldsh: '↲',
	  le: '≤',
	  leftarrow: '←',
	  leftarrowtail: '↢',
	  leftharpoondown: '↽',
	  leftharpoonup: '↼',
	  leftleftarrows: '⇇',
	  leftrightarrow: '↔',
	  leftrightarrows: '⇆',
	  leftrightharpoons: '⇋',
	  leftrightsquigarrow: '↭',
	  leftthreetimes: '⋋',
	  leg: '⋚',
	  leq: '≤',
	  leqq: '≦',
	  leqslant: '⩽',
	  les: '⩽',
	  lescc: '⪨',
	  lesdot: '⩿',
	  lesdoto: '⪁',
	  lesdotor: '⪃',
	  lesg: '⋚︀',
	  lesges: '⪓',
	  lessapprox: '⪅',
	  lessdot: '⋖',
	  lesseqgtr: '⋚',
	  lesseqqgtr: '⪋',
	  lessgtr: '≶',
	  lesssim: '≲',
	  lfisht: '⥼',
	  lfloor: '⌊',
	  lfr: '𝔩',
	  lg: '≶',
	  lgE: '⪑',
	  lhard: '↽',
	  lharu: '↼',
	  lharul: '⥪',
	  lhblk: '▄',
	  ljcy: 'љ',
	  ll: '≪',
	  llarr: '⇇',
	  llcorner: '⌞',
	  llhard: '⥫',
	  lltri: '◺',
	  lmidot: 'ŀ',
	  lmoust: '⎰',
	  lmoustache: '⎰',
	  lnE: '≨',
	  lnap: '⪉',
	  lnapprox: '⪉',
	  lne: '⪇',
	  lneq: '⪇',
	  lneqq: '≨',
	  lnsim: '⋦',
	  loang: '⟬',
	  loarr: '⇽',
	  lobrk: '⟦',
	  longleftarrow: '⟵',
	  longleftrightarrow: '⟷',
	  longmapsto: '⟼',
	  longrightarrow: '⟶',
	  looparrowleft: '↫',
	  looparrowright: '↬',
	  lopar: '⦅',
	  lopf: '𝕝',
	  loplus: '⨭',
	  lotimes: '⨴',
	  lowast: '∗',
	  lowbar: '_',
	  loz: '◊',
	  lozenge: '◊',
	  lozf: '⧫',
	  lpar: '(',
	  lparlt: '⦓',
	  lrarr: '⇆',
	  lrcorner: '⌟',
	  lrhar: '⇋',
	  lrhard: '⥭',
	  lrm: '‎',
	  lrtri: '⊿',
	  lsaquo: '‹',
	  lscr: '𝓁',
	  lsh: '↰',
	  lsim: '≲',
	  lsime: '⪍',
	  lsimg: '⪏',
	  lsqb: '[',
	  lsquo: '‘',
	  lsquor: '‚',
	  lstrok: 'ł',
	  lt: '<',
	  ltcc: '⪦',
	  ltcir: '⩹',
	  ltdot: '⋖',
	  lthree: '⋋',
	  ltimes: '⋉',
	  ltlarr: '⥶',
	  ltquest: '⩻',
	  ltrPar: '⦖',
	  ltri: '◃',
	  ltrie: '⊴',
	  ltrif: '◂',
	  lurdshar: '⥊',
	  luruhar: '⥦',
	  lvertneqq: '≨︀',
	  lvnE: '≨︀',
	  mDDot: '∺',
	  macr: '¯',
	  male: '♂',
	  malt: '✠',
	  maltese: '✠',
	  map: '↦',
	  mapsto: '↦',
	  mapstodown: '↧',
	  mapstoleft: '↤',
	  mapstoup: '↥',
	  marker: '▮',
	  mcomma: '⨩',
	  mcy: 'м',
	  mdash: '—',
	  measuredangle: '∡',
	  mfr: '𝔪',
	  mho: '℧',
	  micro: 'µ',
	  mid: '∣',
	  midast: '*',
	  midcir: '⫰',
	  middot: '·',
	  minus: '−',
	  minusb: '⊟',
	  minusd: '∸',
	  minusdu: '⨪',
	  mlcp: '⫛',
	  mldr: '…',
	  mnplus: '∓',
	  models: '⊧',
	  mopf: '𝕞',
	  mp: '∓',
	  mscr: '𝓂',
	  mstpos: '∾',
	  mu: 'μ',
	  multimap: '⊸',
	  mumap: '⊸',
	  nGg: '⋙̸',
	  nGt: '≫⃒',
	  nGtv: '≫̸',
	  nLeftarrow: '⇍',
	  nLeftrightarrow: '⇎',
	  nLl: '⋘̸',
	  nLt: '≪⃒',
	  nLtv: '≪̸',
	  nRightarrow: '⇏',
	  nVDash: '⊯',
	  nVdash: '⊮',
	  nabla: '∇',
	  nacute: 'ń',
	  nang: '∠⃒',
	  nap: '≉',
	  napE: '⩰̸',
	  napid: '≋̸',
	  napos: 'ŉ',
	  napprox: '≉',
	  natur: '♮',
	  natural: '♮',
	  naturals: 'ℕ',
	  nbsp: ' ',
	  nbump: '≎̸',
	  nbumpe: '≏̸',
	  ncap: '⩃',
	  ncaron: 'ň',
	  ncedil: 'ņ',
	  ncong: '≇',
	  ncongdot: '⩭̸',
	  ncup: '⩂',
	  ncy: 'н',
	  ndash: '–',
	  ne: '≠',
	  neArr: '⇗',
	  nearhk: '⤤',
	  nearr: '↗',
	  nearrow: '↗',
	  nedot: '≐̸',
	  nequiv: '≢',
	  nesear: '⤨',
	  nesim: '≂̸',
	  nexist: '∄',
	  nexists: '∄',
	  nfr: '𝔫',
	  ngE: '≧̸',
	  nge: '≱',
	  ngeq: '≱',
	  ngeqq: '≧̸',
	  ngeqslant: '⩾̸',
	  nges: '⩾̸',
	  ngsim: '≵',
	  ngt: '≯',
	  ngtr: '≯',
	  nhArr: '⇎',
	  nharr: '↮',
	  nhpar: '⫲',
	  ni: '∋',
	  nis: '⋼',
	  nisd: '⋺',
	  niv: '∋',
	  njcy: 'њ',
	  nlArr: '⇍',
	  nlE: '≦̸',
	  nlarr: '↚',
	  nldr: '‥',
	  nle: '≰',
	  nleftarrow: '↚',
	  nleftrightarrow: '↮',
	  nleq: '≰',
	  nleqq: '≦̸',
	  nleqslant: '⩽̸',
	  nles: '⩽̸',
	  nless: '≮',
	  nlsim: '≴',
	  nlt: '≮',
	  nltri: '⋪',
	  nltrie: '⋬',
	  nmid: '∤',
	  nopf: '𝕟',
	  not: '¬',
	  notin: '∉',
	  notinE: '⋹̸',
	  notindot: '⋵̸',
	  notinva: '∉',
	  notinvb: '⋷',
	  notinvc: '⋶',
	  notni: '∌',
	  notniva: '∌',
	  notnivb: '⋾',
	  notnivc: '⋽',
	  npar: '∦',
	  nparallel: '∦',
	  nparsl: '⫽⃥',
	  npart: '∂̸',
	  npolint: '⨔',
	  npr: '⊀',
	  nprcue: '⋠',
	  npre: '⪯̸',
	  nprec: '⊀',
	  npreceq: '⪯̸',
	  nrArr: '⇏',
	  nrarr: '↛',
	  nrarrc: '⤳̸',
	  nrarrw: '↝̸',
	  nrightarrow: '↛',
	  nrtri: '⋫',
	  nrtrie: '⋭',
	  nsc: '⊁',
	  nsccue: '⋡',
	  nsce: '⪰̸',
	  nscr: '𝓃',
	  nshortmid: '∤',
	  nshortparallel: '∦',
	  nsim: '≁',
	  nsime: '≄',
	  nsimeq: '≄',
	  nsmid: '∤',
	  nspar: '∦',
	  nsqsube: '⋢',
	  nsqsupe: '⋣',
	  nsub: '⊄',
	  nsubE: '⫅̸',
	  nsube: '⊈',
	  nsubset: '⊂⃒',
	  nsubseteq: '⊈',
	  nsubseteqq: '⫅̸',
	  nsucc: '⊁',
	  nsucceq: '⪰̸',
	  nsup: '⊅',
	  nsupE: '⫆̸',
	  nsupe: '⊉',
	  nsupset: '⊃⃒',
	  nsupseteq: '⊉',
	  nsupseteqq: '⫆̸',
	  ntgl: '≹',
	  ntilde: 'ñ',
	  ntlg: '≸',
	  ntriangleleft: '⋪',
	  ntrianglelefteq: '⋬',
	  ntriangleright: '⋫',
	  ntrianglerighteq: '⋭',
	  nu: 'ν',
	  num: '#',
	  numero: '№',
	  numsp: ' ',
	  nvDash: '⊭',
	  nvHarr: '⤄',
	  nvap: '≍⃒',
	  nvdash: '⊬',
	  nvge: '≥⃒',
	  nvgt: '>⃒',
	  nvinfin: '⧞',
	  nvlArr: '⤂',
	  nvle: '≤⃒',
	  nvlt: '<⃒',
	  nvltrie: '⊴⃒',
	  nvrArr: '⤃',
	  nvrtrie: '⊵⃒',
	  nvsim: '∼⃒',
	  nwArr: '⇖',
	  nwarhk: '⤣',
	  nwarr: '↖',
	  nwarrow: '↖',
	  nwnear: '⤧',
	  oS: 'Ⓢ',
	  oacute: 'ó',
	  oast: '⊛',
	  ocir: '⊚',
	  ocirc: 'ô',
	  ocy: 'о',
	  odash: '⊝',
	  odblac: 'ő',
	  odiv: '⨸',
	  odot: '⊙',
	  odsold: '⦼',
	  oelig: 'œ',
	  ofcir: '⦿',
	  ofr: '𝔬',
	  ogon: '˛',
	  ograve: 'ò',
	  ogt: '⧁',
	  ohbar: '⦵',
	  ohm: 'Ω',
	  oint: '∮',
	  olarr: '↺',
	  olcir: '⦾',
	  olcross: '⦻',
	  oline: '‾',
	  olt: '⧀',
	  omacr: 'ō',
	  omega: 'ω',
	  omicron: 'ο',
	  omid: '⦶',
	  ominus: '⊖',
	  oopf: '𝕠',
	  opar: '⦷',
	  operp: '⦹',
	  oplus: '⊕',
	  or: '∨',
	  orarr: '↻',
	  ord: '⩝',
	  order: 'ℴ',
	  orderof: 'ℴ',
	  ordf: 'ª',
	  ordm: 'º',
	  origof: '⊶',
	  oror: '⩖',
	  orslope: '⩗',
	  orv: '⩛',
	  oscr: 'ℴ',
	  oslash: 'ø',
	  osol: '⊘',
	  otilde: 'õ',
	  otimes: '⊗',
	  otimesas: '⨶',
	  ouml: 'ö',
	  ovbar: '⌽',
	  par: '∥',
	  para: '¶',
	  parallel: '∥',
	  parsim: '⫳',
	  parsl: '⫽',
	  part: '∂',
	  pcy: 'п',
	  percnt: '%',
	  period: '.',
	  permil: '‰',
	  perp: '⊥',
	  pertenk: '‱',
	  pfr: '𝔭',
	  phi: 'φ',
	  phiv: 'ϕ',
	  phmmat: 'ℳ',
	  phone: '☎',
	  pi: 'π',
	  pitchfork: '⋔',
	  piv: 'ϖ',
	  planck: 'ℏ',
	  planckh: 'ℎ',
	  plankv: 'ℏ',
	  plus: '+',
	  plusacir: '⨣',
	  plusb: '⊞',
	  pluscir: '⨢',
	  plusdo: '∔',
	  plusdu: '⨥',
	  pluse: '⩲',
	  plusmn: '±',
	  plussim: '⨦',
	  plustwo: '⨧',
	  pm: '±',
	  pointint: '⨕',
	  popf: '𝕡',
	  pound: '£',
	  pr: '≺',
	  prE: '⪳',
	  prap: '⪷',
	  prcue: '≼',
	  pre: '⪯',
	  prec: '≺',
	  precapprox: '⪷',
	  preccurlyeq: '≼',
	  preceq: '⪯',
	  precnapprox: '⪹',
	  precneqq: '⪵',
	  precnsim: '⋨',
	  precsim: '≾',
	  prime: '′',
	  primes: 'ℙ',
	  prnE: '⪵',
	  prnap: '⪹',
	  prnsim: '⋨',
	  prod: '∏',
	  profalar: '⌮',
	  profline: '⌒',
	  profsurf: '⌓',
	  prop: '∝',
	  propto: '∝',
	  prsim: '≾',
	  prurel: '⊰',
	  pscr: '𝓅',
	  psi: 'ψ',
	  puncsp: ' ',
	  qfr: '𝔮',
	  qint: '⨌',
	  qopf: '𝕢',
	  qprime: '⁗',
	  qscr: '𝓆',
	  quaternions: 'ℍ',
	  quatint: '⨖',
	  quest: '?',
	  questeq: '≟',
	  quot: '"',
	  rAarr: '⇛',
	  rArr: '⇒',
	  rAtail: '⤜',
	  rBarr: '⤏',
	  rHar: '⥤',
	  race: '∽̱',
	  racute: 'ŕ',
	  radic: '√',
	  raemptyv: '⦳',
	  rang: '⟩',
	  rangd: '⦒',
	  range: '⦥',
	  rangle: '⟩',
	  raquo: '»',
	  rarr: '→',
	  rarrap: '⥵',
	  rarrb: '⇥',
	  rarrbfs: '⤠',
	  rarrc: '⤳',
	  rarrfs: '⤞',
	  rarrhk: '↪',
	  rarrlp: '↬',
	  rarrpl: '⥅',
	  rarrsim: '⥴',
	  rarrtl: '↣',
	  rarrw: '↝',
	  ratail: '⤚',
	  ratio: '∶',
	  rationals: 'ℚ',
	  rbarr: '⤍',
	  rbbrk: '❳',
	  rbrace: '}',
	  rbrack: ']',
	  rbrke: '⦌',
	  rbrksld: '⦎',
	  rbrkslu: '⦐',
	  rcaron: 'ř',
	  rcedil: 'ŗ',
	  rceil: '⌉',
	  rcub: '}',
	  rcy: 'р',
	  rdca: '⤷',
	  rdldhar: '⥩',
	  rdquo: '”',
	  rdquor: '”',
	  rdsh: '↳',
	  real: 'ℜ',
	  realine: 'ℛ',
	  realpart: 'ℜ',
	  reals: 'ℝ',
	  rect: '▭',
	  reg: '®',
	  rfisht: '⥽',
	  rfloor: '⌋',
	  rfr: '𝔯',
	  rhard: '⇁',
	  rharu: '⇀',
	  rharul: '⥬',
	  rho: 'ρ',
	  rhov: 'ϱ',
	  rightarrow: '→',
	  rightarrowtail: '↣',
	  rightharpoondown: '⇁',
	  rightharpoonup: '⇀',
	  rightleftarrows: '⇄',
	  rightleftharpoons: '⇌',
	  rightrightarrows: '⇉',
	  rightsquigarrow: '↝',
	  rightthreetimes: '⋌',
	  ring: '˚',
	  risingdotseq: '≓',
	  rlarr: '⇄',
	  rlhar: '⇌',
	  rlm: '‏',
	  rmoust: '⎱',
	  rmoustache: '⎱',
	  rnmid: '⫮',
	  roang: '⟭',
	  roarr: '⇾',
	  robrk: '⟧',
	  ropar: '⦆',
	  ropf: '𝕣',
	  roplus: '⨮',
	  rotimes: '⨵',
	  rpar: ')',
	  rpargt: '⦔',
	  rppolint: '⨒',
	  rrarr: '⇉',
	  rsaquo: '›',
	  rscr: '𝓇',
	  rsh: '↱',
	  rsqb: ']',
	  rsquo: '’',
	  rsquor: '’',
	  rthree: '⋌',
	  rtimes: '⋊',
	  rtri: '▹',
	  rtrie: '⊵',
	  rtrif: '▸',
	  rtriltri: '⧎',
	  ruluhar: '⥨',
	  rx: '℞',
	  sacute: 'ś',
	  sbquo: '‚',
	  sc: '≻',
	  scE: '⪴',
	  scap: '⪸',
	  scaron: 'š',
	  sccue: '≽',
	  sce: '⪰',
	  scedil: 'ş',
	  scirc: 'ŝ',
	  scnE: '⪶',
	  scnap: '⪺',
	  scnsim: '⋩',
	  scpolint: '⨓',
	  scsim: '≿',
	  scy: 'с',
	  sdot: '⋅',
	  sdotb: '⊡',
	  sdote: '⩦',
	  seArr: '⇘',
	  searhk: '⤥',
	  searr: '↘',
	  searrow: '↘',
	  sect: '§',
	  semi: ';',
	  seswar: '⤩',
	  setminus: '∖',
	  setmn: '∖',
	  sext: '✶',
	  sfr: '𝔰',
	  sfrown: '⌢',
	  sharp: '♯',
	  shchcy: 'щ',
	  shcy: 'ш',
	  shortmid: '∣',
	  shortparallel: '∥',
	  shy: '­',
	  sigma: 'σ',
	  sigmaf: 'ς',
	  sigmav: 'ς',
	  sim: '∼',
	  simdot: '⩪',
	  sime: '≃',
	  simeq: '≃',
	  simg: '⪞',
	  simgE: '⪠',
	  siml: '⪝',
	  simlE: '⪟',
	  simne: '≆',
	  simplus: '⨤',
	  simrarr: '⥲',
	  slarr: '←',
	  smallsetminus: '∖',
	  smashp: '⨳',
	  smeparsl: '⧤',
	  smid: '∣',
	  smile: '⌣',
	  smt: '⪪',
	  smte: '⪬',
	  smtes: '⪬︀',
	  softcy: 'ь',
	  sol: '/',
	  solb: '⧄',
	  solbar: '⌿',
	  sopf: '𝕤',
	  spades: '♠',
	  spadesuit: '♠',
	  spar: '∥',
	  sqcap: '⊓',
	  sqcaps: '⊓︀',
	  sqcup: '⊔',
	  sqcups: '⊔︀',
	  sqsub: '⊏',
	  sqsube: '⊑',
	  sqsubset: '⊏',
	  sqsubseteq: '⊑',
	  sqsup: '⊐',
	  sqsupe: '⊒',
	  sqsupset: '⊐',
	  sqsupseteq: '⊒',
	  squ: '□',
	  square: '□',
	  squarf: '▪',
	  squf: '▪',
	  srarr: '→',
	  sscr: '𝓈',
	  ssetmn: '∖',
	  ssmile: '⌣',
	  sstarf: '⋆',
	  star: '☆',
	  starf: '★',
	  straightepsilon: 'ϵ',
	  straightphi: 'ϕ',
	  strns: '¯',
	  sub: '⊂',
	  subE: '⫅',
	  subdot: '⪽',
	  sube: '⊆',
	  subedot: '⫃',
	  submult: '⫁',
	  subnE: '⫋',
	  subne: '⊊',
	  subplus: '⪿',
	  subrarr: '⥹',
	  subset: '⊂',
	  subseteq: '⊆',
	  subseteqq: '⫅',
	  subsetneq: '⊊',
	  subsetneqq: '⫋',
	  subsim: '⫇',
	  subsub: '⫕',
	  subsup: '⫓',
	  succ: '≻',
	  succapprox: '⪸',
	  succcurlyeq: '≽',
	  succeq: '⪰',
	  succnapprox: '⪺',
	  succneqq: '⪶',
	  succnsim: '⋩',
	  succsim: '≿',
	  sum: '∑',
	  sung: '♪',
	  sup1: '¹',
	  sup2: '²',
	  sup3: '³',
	  sup: '⊃',
	  supE: '⫆',
	  supdot: '⪾',
	  supdsub: '⫘',
	  supe: '⊇',
	  supedot: '⫄',
	  suphsol: '⟉',
	  suphsub: '⫗',
	  suplarr: '⥻',
	  supmult: '⫂',
	  supnE: '⫌',
	  supne: '⊋',
	  supplus: '⫀',
	  supset: '⊃',
	  supseteq: '⊇',
	  supseteqq: '⫆',
	  supsetneq: '⊋',
	  supsetneqq: '⫌',
	  supsim: '⫈',
	  supsub: '⫔',
	  supsup: '⫖',
	  swArr: '⇙',
	  swarhk: '⤦',
	  swarr: '↙',
	  swarrow: '↙',
	  swnwar: '⤪',
	  szlig: 'ß',
	  target: '⌖',
	  tau: 'τ',
	  tbrk: '⎴',
	  tcaron: 'ť',
	  tcedil: 'ţ',
	  tcy: 'т',
	  tdot: '⃛',
	  telrec: '⌕',
	  tfr: '𝔱',
	  there4: '∴',
	  therefore: '∴',
	  theta: 'θ',
	  thetasym: 'ϑ',
	  thetav: 'ϑ',
	  thickapprox: '≈',
	  thicksim: '∼',
	  thinsp: ' ',
	  thkap: '≈',
	  thksim: '∼',
	  thorn: 'þ',
	  tilde: '˜',
	  times: '×',
	  timesb: '⊠',
	  timesbar: '⨱',
	  timesd: '⨰',
	  tint: '∭',
	  toea: '⤨',
	  top: '⊤',
	  topbot: '⌶',
	  topcir: '⫱',
	  topf: '𝕥',
	  topfork: '⫚',
	  tosa: '⤩',
	  tprime: '‴',
	  trade: '™',
	  triangle: '▵',
	  triangledown: '▿',
	  triangleleft: '◃',
	  trianglelefteq: '⊴',
	  triangleq: '≜',
	  triangleright: '▹',
	  trianglerighteq: '⊵',
	  tridot: '◬',
	  trie: '≜',
	  triminus: '⨺',
	  triplus: '⨹',
	  trisb: '⧍',
	  tritime: '⨻',
	  trpezium: '⏢',
	  tscr: '𝓉',
	  tscy: 'ц',
	  tshcy: 'ћ',
	  tstrok: 'ŧ',
	  twixt: '≬',
	  twoheadleftarrow: '↞',
	  twoheadrightarrow: '↠',
	  uArr: '⇑',
	  uHar: '⥣',
	  uacute: 'ú',
	  uarr: '↑',
	  ubrcy: 'ў',
	  ubreve: 'ŭ',
	  ucirc: 'û',
	  ucy: 'у',
	  udarr: '⇅',
	  udblac: 'ű',
	  udhar: '⥮',
	  ufisht: '⥾',
	  ufr: '𝔲',
	  ugrave: 'ù',
	  uharl: '↿',
	  uharr: '↾',
	  uhblk: '▀',
	  ulcorn: '⌜',
	  ulcorner: '⌜',
	  ulcrop: '⌏',
	  ultri: '◸',
	  umacr: 'ū',
	  uml: '¨',
	  uogon: 'ų',
	  uopf: '𝕦',
	  uparrow: '↑',
	  updownarrow: '↕',
	  upharpoonleft: '↿',
	  upharpoonright: '↾',
	  uplus: '⊎',
	  upsi: 'υ',
	  upsih: 'ϒ',
	  upsilon: 'υ',
	  upuparrows: '⇈',
	  urcorn: '⌝',
	  urcorner: '⌝',
	  urcrop: '⌎',
	  uring: 'ů',
	  urtri: '◹',
	  uscr: '𝓊',
	  utdot: '⋰',
	  utilde: 'ũ',
	  utri: '▵',
	  utrif: '▴',
	  uuarr: '⇈',
	  uuml: 'ü',
	  uwangle: '⦧',
	  vArr: '⇕',
	  vBar: '⫨',
	  vBarv: '⫩',
	  vDash: '⊨',
	  vangrt: '⦜',
	  varepsilon: 'ϵ',
	  varkappa: 'ϰ',
	  varnothing: '∅',
	  varphi: 'ϕ',
	  varpi: 'ϖ',
	  varpropto: '∝',
	  varr: '↕',
	  varrho: 'ϱ',
	  varsigma: 'ς',
	  varsubsetneq: '⊊︀',
	  varsubsetneqq: '⫋︀',
	  varsupsetneq: '⊋︀',
	  varsupsetneqq: '⫌︀',
	  vartheta: 'ϑ',
	  vartriangleleft: '⊲',
	  vartriangleright: '⊳',
	  vcy: 'в',
	  vdash: '⊢',
	  vee: '∨',
	  veebar: '⊻',
	  veeeq: '≚',
	  vellip: '⋮',
	  verbar: '|',
	  vert: '|',
	  vfr: '𝔳',
	  vltri: '⊲',
	  vnsub: '⊂⃒',
	  vnsup: '⊃⃒',
	  vopf: '𝕧',
	  vprop: '∝',
	  vrtri: '⊳',
	  vscr: '𝓋',
	  vsubnE: '⫋︀',
	  vsubne: '⊊︀',
	  vsupnE: '⫌︀',
	  vsupne: '⊋︀',
	  vzigzag: '⦚',
	  wcirc: 'ŵ',
	  wedbar: '⩟',
	  wedge: '∧',
	  wedgeq: '≙',
	  weierp: '℘',
	  wfr: '𝔴',
	  wopf: '𝕨',
	  wp: '℘',
	  wr: '≀',
	  wreath: '≀',
	  wscr: '𝓌',
	  xcap: '⋂',
	  xcirc: '◯',
	  xcup: '⋃',
	  xdtri: '▽',
	  xfr: '𝔵',
	  xhArr: '⟺',
	  xharr: '⟷',
	  xi: 'ξ',
	  xlArr: '⟸',
	  xlarr: '⟵',
	  xmap: '⟼',
	  xnis: '⋻',
	  xodot: '⨀',
	  xopf: '𝕩',
	  xoplus: '⨁',
	  xotime: '⨂',
	  xrArr: '⟹',
	  xrarr: '⟶',
	  xscr: '𝓍',
	  xsqcup: '⨆',
	  xuplus: '⨄',
	  xutri: '△',
	  xvee: '⋁',
	  xwedge: '⋀',
	  yacute: 'ý',
	  yacy: 'я',
	  ycirc: 'ŷ',
	  ycy: 'ы',
	  yen: '¥',
	  yfr: '𝔶',
	  yicy: 'ї',
	  yopf: '𝕪',
	  yscr: '𝓎',
	  yucy: 'ю',
	  yuml: 'ÿ',
	  zacute: 'ź',
	  zcaron: 'ž',
	  zcy: 'з',
	  zdot: 'ż',
	  zeetrf: 'ℨ',
	  zeta: 'ζ',
	  zfr: '𝔷',
	  zhcy: 'ж',
	  zigrarr: '⇝',
	  zopf: '𝕫',
	  zscr: '𝓏',
	  zwj: '‍',
	  zwnj: '‌'
	};

	const own$e = {}.hasOwnProperty;

	/**
	 * Decode a single character reference (without the `&` or `;`).
	 * You probably only need this when you’re building parsers yourself that follow
	 * different rules compared to HTML.
	 * This is optimized to be tiny in browsers.
	 *
	 * @param {string} value
	 *   `notin` (named), `#123` (deci), `#x123` (hexa).
	 * @returns {string|false}
	 *   Decoded reference.
	 */
	function decodeNamedCharacterReference(value) {
	  return own$e.call(characterEntities, value) ? characterEntities[value] : false
	}

	/**
	 * Like `Array#splice`, but smarter for giant arrays.
	 *
	 * `Array#splice` takes all items to be inserted as individual argument which
	 * causes a stack overflow in V8 when trying to insert 100k items for instance.
	 *
	 * Otherwise, this does not return the removed items, and takes `items` as an
	 * array instead of rest parameters.
	 *
	 * @template {unknown} T
	 *   Item type.
	 * @param {Array<T>} list
	 *   List to operate on.
	 * @param {number} start
	 *   Index to remove/insert at (can be negative).
	 * @param {number} remove
	 *   Number of items to remove.
	 * @param {Array<T>} items
	 *   Items to inject into `list`.
	 * @returns {undefined}
	 *   Nothing.
	 */
	function splice(list, start, remove, items) {
	  const end = list.length;
	  let chunkStart = 0;
	  /** @type {Array<unknown>} */
	  let parameters;

	  // Make start between zero and `end` (included).
	  if (start < 0) {
	    start = -start > end ? 0 : end + start;
	  } else {
	    start = start > end ? end : start;
	  }
	  remove = remove > 0 ? remove : 0;

	  // No need to chunk the items if there’s only a couple (10k) items.
	  if (items.length < 10000) {
	    parameters = Array.from(items);
	    parameters.unshift(start, remove);
	    // @ts-expect-error Hush, it’s fine.
	    list.splice(...parameters);
	  } else {
	    // Delete `remove` items starting from `start`
	    if (remove) list.splice(start, remove);

	    // Insert the items in chunks to not cause stack overflows.
	    while (chunkStart < items.length) {
	      parameters = items.slice(chunkStart, chunkStart + 10000);
	      parameters.unshift(start, 0);
	      // @ts-expect-error Hush, it’s fine.
	      list.splice(...parameters);
	      chunkStart += 10000;
	      start += 10000;
	    }
	  }
	}

	/**
	 * Append `items` (an array) at the end of `list` (another array).
	 * When `list` was empty, returns `items` instead.
	 *
	 * This prevents a potentially expensive operation when `list` is empty,
	 * and adds items in batches to prevent V8 from hanging.
	 *
	 * @template {unknown} T
	 *   Item type.
	 * @param {Array<T>} list
	 *   List to operate on.
	 * @param {Array<T>} items
	 *   Items to add to `list`.
	 * @returns {Array<T>}
	 *   Either `list` or `items`.
	 */
	function push(list, items) {
	  if (list.length > 0) {
	    splice(list, list.length, 0, items);
	    return list
	  }
	  return items
	}

	/**
	 * @typedef {import('micromark-util-types').Extension} Extension
	 * @typedef {import('micromark-util-types').Handles} Handles
	 * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension
	 * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension
	 */


	const hasOwnProperty = {}.hasOwnProperty;

	/**
	 * Combine multiple syntax extensions into one.
	 *
	 * @param {Array<Extension>} extensions
	 *   List of syntax extensions.
	 * @returns {NormalizedExtension}
	 *   A single combined extension.
	 */
	function combineExtensions(extensions) {
	  /** @type {NormalizedExtension} */
	  const all = {};
	  let index = -1;

	  while (++index < extensions.length) {
	    syntaxExtension(all, extensions[index]);
	  }

	  return all
	}

	/**
	 * Merge `extension` into `all`.
	 *
	 * @param {NormalizedExtension} all
	 *   Extension to merge into.
	 * @param {Extension} extension
	 *   Extension to merge.
	 * @returns {undefined}
	 */
	function syntaxExtension(all, extension) {
	  /** @type {keyof Extension} */
	  let hook;

	  for (hook in extension) {
	    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined;
	    /** @type {Record<string, unknown>} */
	    const left = maybe || (all[hook] = {});
	    /** @type {Record<string, unknown> | undefined} */
	    const right = extension[hook];
	    /** @type {string} */
	    let code;

	    if (right) {
	      for (code in right) {
	        if (!hasOwnProperty.call(left, code)) left[code] = [];
	        const value = right[code];
	        constructs(
	          // @ts-expect-error Looks like a list.
	          left[code],
	          Array.isArray(value) ? value : value ? [value] : []
	        );
	      }
	    }
	  }
	}

	/**
	 * Merge `list` into `existing` (both lists of constructs).
	 * Mutates `existing`.
	 *
	 * @param {Array<unknown>} existing
	 * @param {Array<unknown>} list
	 * @returns {undefined}
	 */
	function constructs(existing, list) {
	  let index = -1;
	  /** @type {Array<unknown>} */
	  const before = [];

	  while (++index < list.length) {
	(list[index].add === 'after' ? existing : before).push(list[index]);
	  }

	  splice(existing, 0, 0, before);
	}

	/**
	 * Turn the number (in string form as either hexa- or plain decimal) coming from
	 * a numeric character reference into a character.
	 *
	 * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes
	 * non-characters and control characters safe.
	 *
	 * @param {string} value
	 *   Value to decode.
	 * @param {number} base
	 *   Numeric base.
	 * @returns {string}
	 *   Character.
	 */
	function decodeNumericCharacterReference(value, base) {
	  const code = Number.parseInt(value, base);
	  if (
	  // C0 except for HT, LF, FF, CR, space.
	  code < 9 || code === 11 || code > 13 && code < 32 ||
	  // Control character (DEL) of C0, and C1 controls.
	  code > 126 && code < 160 ||
	  // Lone high surrogates and low surrogates.
	  code > 55_295 && code < 57_344 ||
	  // Noncharacters.
	  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */
	  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */
	  // Out of range
	  code > 1_114_111) {
	    return "\uFFFD";
	  }
	  return String.fromCodePoint(code);
	}

	/**
	 * Normalize an identifier (as found in references, definitions).
	 *
	 * Collapses markdown whitespace, trim, and then lower- and uppercase.
	 *
	 * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their
	 * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different
	 * uppercase character (U+0398 (`Θ`)).
	 * So, to get a canonical form, we perform both lower- and uppercase.
	 *
	 * Using uppercase last makes sure keys will never interact with default
	 * prototypal values (such as `constructor`): nothing in the prototype of
	 * `Object` is uppercase.
	 *
	 * @param {string} value
	 *   Identifier to normalize.
	 * @returns {string}
	 *   Normalized identifier.
	 */
	function normalizeIdentifier(value) {
	  return (
	    value
	      // Collapse markdown whitespace.
	      .replace(/[\t\n\r ]+/g, ' ')
	      // Trim.
	      .replace(/^ | $/g, '')
	      // Some characters are considered “uppercase”, but if their lowercase
	      // counterpart is uppercased will result in a different uppercase
	      // character.
	      // Hence, to get that form, we perform both lower- and uppercase.
	      // Upper case makes sure keys will not interact with default prototypal
	      // methods: no method is uppercase.
	      .toLowerCase()
	      .toUpperCase()
	  )
	}

	/**
	 * @typedef {import('micromark-util-types').Code} Code
	 */

	const unicodePunctuationInternal = regexCheck(/\p{P}/u);

	/**
	 * Check whether the character code represents an ASCII alpha (`a` through `z`,
	 * case insensitive).
	 *
	 * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.
	 *
	 * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)
	 * to U+005A (`Z`).
	 *
	 * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)
	 * to U+007A (`z`).
	 *
	 * @param code
	 *   Code.
	 * @returns {boolean}
	 *   Whether it matches.
	 */
	const asciiAlpha = regexCheck(/[A-Za-z]/);

	/**
	 * Check whether the character code represents an ASCII alphanumeric (`a`
	 * through `z`, case insensitive, or `0` through `9`).
	 *
	 * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha
	 * (see `asciiAlpha`).
	 *
	 * @param code
	 *   Code.
	 * @returns {boolean}
	 *   Whether it matches.
	 */
	const asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);

	/**
	 * Check whether the character code represents an ASCII atext.
	 *
	 * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in
	 * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),
	 * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F
	 * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E
	 * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE
	 * (`{`) to U+007E TILDE (`~`).
	 *
	 * See:
	 * **\[RFC5322]**:
	 * [Internet Message Format](https://tools.ietf.org/html/rfc5322).
	 * P. Resnick.
	 * IETF.
	 *
	 * @param code
	 *   Code.
	 * @returns {boolean}
	 *   Whether it matches.
	 */
	const asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);

	/**
	 * Check whether a character code is an ASCII control character.
	 *
	 * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)
	 * to U+001F (US), or U+007F (DEL).
	 *
	 * @param {Code} code
	 *   Code.
	 * @returns {boolean}
	 *   Whether it matches.
	 */
	function asciiControl(code) {
	  return (
	    // Special whitespace codes (which have negative values), C0 and Control
	    // character DEL
	    code !== null && (code < 32 || code === 127)
	  )
	}

	/**
	 * Check whether the character code represents an ASCII digit (`0` through `9`).
	 *
	 * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to
	 * U+0039 (`9`).
	 *
	 * @param code
	 *   Code.
	 * @returns {boolean}
	 *   Whether it matches.
	 */
	const asciiDigit = regexCheck(/\d/);

	/**
	 * Check whether the character code represents an ASCII hex digit (`a` through
	 * `f`, case insensitive, or `0` through `9`).
	 *
	 * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex
	 * digit, or an ASCII lower hex digit.
	 *
	 * An **ASCII upper hex digit** is a character in the inclusive range U+0041
	 * (`A`) to U+0046 (`F`).
	 *
	 * An **ASCII lower hex digit** is a character in the inclusive range U+0061
	 * (`a`) to U+0066 (`f`).
	 *
	 * @param code
	 *   Code.
	 * @returns {boolean}
	 *   Whether it matches.
	 */
	const asciiHexDigit = regexCheck(/[\dA-Fa-f]/);

	/**
	 * Check whether the character code represents ASCII punctuation.
	 *
	 * An **ASCII punctuation** is a character in the inclusive ranges U+0021
	 * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT
	 * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT
	 * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).
	 *
	 * @param code
	 *   Code.
	 * @returns {boolean}
	 *   Whether it matches.
	 */
	const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);

	/**
	 * Check whether a character code is a markdown line ending.
	 *
	 * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN
	 * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).
	 *
	 * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE
	 * RETURN (CR) are replaced by these virtual characters depending on whether
	 * they occurred together.
	 *
	 * @param {Code} code
	 *   Code.
	 * @returns {boolean}
	 *   Whether it matches.
	 */
	function markdownLineEnding(code) {
	  return code !== null && code < -2
	}

	/**
	 * Check whether a character code is a markdown line ending (see
	 * `markdownLineEnding`) or markdown space (see `markdownSpace`).
	 *
	 * @param {Code} code
	 *   Code.
	 * @returns {boolean}
	 *   Whether it matches.
	 */
	function markdownLineEndingOrSpace(code) {
	  return code !== null && (code < 0 || code === 32)
	}

	/**
	 * Check whether a character code is a markdown space.
	 *
	 * A **markdown space** is the concrete character U+0020 SPACE (SP) and the
	 * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).
	 *
	 * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is
	 * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL
	 * SPACE (VS) characters, depending on the column at which the tab occurred.
	 *
	 * @param {Code} code
	 *   Code.
	 * @returns {boolean}
	 *   Whether it matches.
	 */
	function markdownSpace(code) {
	  return code === -2 || code === -1 || code === 32
	}

	// Size note: removing ASCII from the regex and using `asciiPunctuation` here
	// In fact adds to the bundle size.
	/**
	 * Check whether the character code represents Unicode punctuation.
	 *
	 * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,
	 * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`
	 * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`
	 * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII
	 * punctuation (see `asciiPunctuation`).
	 *
	 * See:
	 * **\[UNICODE]**:
	 * [The Unicode Standard](https://www.unicode.org/versions/).
	 * Unicode Consortium.
	 *
	 * @param {Code} code
	 *   Code.
	 * @returns {boolean}
	 *   Whether it matches.
	 */
	function unicodePunctuation(code) {
	  return asciiPunctuation(code) || unicodePunctuationInternal(code)
	}

	/**
	 * Check whether the character code represents Unicode whitespace.
	 *
	 * Note that this does handle micromark specific markdown whitespace characters.
	 * See `markdownLineEndingOrSpace` to check that.
	 *
	 * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,
	 * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),
	 * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\[UNICODE]**).
	 *
	 * See:
	 * **\[UNICODE]**:
	 * [The Unicode Standard](https://www.unicode.org/versions/).
	 * Unicode Consortium.
	 *
	 * @param code
	 *   Code.
	 * @returns {boolean}
	 *   Whether it matches.
	 */
	const unicodeWhitespace = regexCheck(/\s/);

	/**
	 * Create a code check from a regex.
	 *
	 * @param {RegExp} regex
	 * @returns {(code: Code) => boolean}
	 */
	function regexCheck(regex) {
	  return check

	  /**
	   * Check whether a code matches the bound regex.
	   *
	   * @param {Code} code
	   *   Character code.
	   * @returns {boolean}
	   *   Whether the character code matches the bound regex.
	   */
	  function check(code) {
	    return code !== null && code > -1 && regex.test(String.fromCharCode(code))
	  }
	}

	/**
	 * Normalize a URL.
	 *
	 * Encode unsafe characters with percent-encoding, skipping already encoded
	 * sequences.
	 *
	 * @param {string} value
	 *   URI to normalize.
	 * @returns {string}
	 *   Normalized URI.
	 */
	function normalizeUri(value) {
	  /** @type {Array<string>} */
	  const result = [];
	  let index = -1;
	  let start = 0;
	  let skip = 0;
	  while (++index < value.length) {
	    const code = value.charCodeAt(index);
	    /** @type {string} */
	    let replace = '';

	    // A correct percent encoded value.
	    if (
	      code === 37 &&
	      asciiAlphanumeric(value.charCodeAt(index + 1)) &&
	      asciiAlphanumeric(value.charCodeAt(index + 2))
	    ) {
	      skip = 2;
	    }
	    // ASCII.
	    else if (code < 128) {
	      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {
	        replace = String.fromCharCode(code);
	      }
	    }
	    // Astral.
	    else if (code > 55_295 && code < 57_344) {
	      const next = value.charCodeAt(index + 1);

	      // A correct surrogate pair.
	      if (code < 56_320 && next > 56_319 && next < 57_344) {
	        replace = String.fromCharCode(code, next);
	        skip = 1;
	      }
	      // Lone surrogate.
	      else {
	        replace = '\uFFFD';
	      }
	    }
	    // Unicode.
	    else {
	      replace = String.fromCharCode(code);
	    }
	    if (replace) {
	      result.push(value.slice(start, index), encodeURIComponent(replace));
	      start = index + skip + 1;
	      replace = '';
	    }
	    if (skip) {
	      index += skip;
	      skip = 0;
	    }
	  }
	  return result.join('') + value.slice(start)
	}

	/**
	 * @typedef {import('micromark-util-types').Effects} Effects
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').TokenType} TokenType
	 */


	// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.

	/**
	 * Parse spaces and tabs.
	 *
	 * There is no `nok` parameter:
	 *
	 * *   spaces in markdown are often optional, in which case this factory can be
	 *     used and `ok` will be switched to whether spaces were found or not
	 * *   one line ending or space can be detected with `markdownSpace(code)` right
	 *     before using `factorySpace`
	 *
	 * ###### Examples
	 *
	 * Where `␉` represents a tab (plus how much it expands) and `␠` represents a
	 * single space.
	 *
	 * ```markdown
	 * ␉
	 * ␠␠␠␠
	 * ␉␠
	 * ```
	 *
	 * @param {Effects} effects
	 *   Context.
	 * @param {State} ok
	 *   State switched to when successful.
	 * @param {TokenType} type
	 *   Type (`' \t'`).
	 * @param {number | undefined} [max=Infinity]
	 *   Max (exclusive).
	 * @returns {State}
	 *   Start state.
	 */
	function factorySpace(effects, ok, type, max) {
	  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;
	  let size = 0;
	  return start

	  /** @type {State} */
	  function start(code) {
	    if (markdownSpace(code)) {
	      effects.enter(type);
	      return prefix(code)
	    }
	    return ok(code)
	  }

	  /** @type {State} */
	  function prefix(code) {
	    if (markdownSpace(code) && size++ < limit) {
	      effects.consume(code);
	      return prefix
	    }
	    effects.exit(type);
	    return ok(code)
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
	 * @typedef {import('micromark-util-types').Initializer} Initializer
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').Token} Token
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 */

	/** @type {InitialConstruct} */
	const content$1 = {
	  tokenize: initializeContent
	};

	/**
	 * @this {TokenizeContext}
	 * @type {Initializer}
	 */
	function initializeContent(effects) {
	  const contentStart = effects.attempt(
	    this.parser.constructs.contentInitial,
	    afterContentStartConstruct,
	    paragraphInitial
	  );
	  /** @type {Token} */
	  let previous;
	  return contentStart

	  /** @type {State} */
	  function afterContentStartConstruct(code) {
	    if (code === null) {
	      effects.consume(code);
	      return
	    }
	    effects.enter('lineEnding');
	    effects.consume(code);
	    effects.exit('lineEnding');
	    return factorySpace(effects, contentStart, 'linePrefix')
	  }

	  /** @type {State} */
	  function paragraphInitial(code) {
	    effects.enter('paragraph');
	    return lineStart(code)
	  }

	  /** @type {State} */
	  function lineStart(code) {
	    const token = effects.enter('chunkText', {
	      contentType: 'text',
	      previous
	    });
	    if (previous) {
	      previous.next = token;
	    }
	    previous = token;
	    return data(code)
	  }

	  /** @type {State} */
	  function data(code) {
	    if (code === null) {
	      effects.exit('chunkText');
	      effects.exit('paragraph');
	      effects.consume(code);
	      return
	    }
	    if (markdownLineEnding(code)) {
	      effects.consume(code);
	      effects.exit('chunkText');
	      return lineStart
	    }

	    // Data.
	    effects.consume(code);
	    return data
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Construct} Construct
	 * @typedef {import('micromark-util-types').ContainerState} ContainerState
	 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
	 * @typedef {import('micromark-util-types').Initializer} Initializer
	 * @typedef {import('micromark-util-types').Point} Point
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').Token} Token
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */

	/** @type {InitialConstruct} */
	const document$2 = {
	  tokenize: initializeDocument
	};

	/** @type {Construct} */
	const containerConstruct = {
	  tokenize: tokenizeContainer
	};

	/**
	 * @this {TokenizeContext}
	 * @type {Initializer}
	 */
	function initializeDocument(effects) {
	  const self = this;
	  /** @type {Array<StackItem>} */
	  const stack = [];
	  let continued = 0;
	  /** @type {TokenizeContext | undefined} */
	  let childFlow;
	  /** @type {Token | undefined} */
	  let childToken;
	  /** @type {number} */
	  let lineStartOffset;
	  return start

	  /** @type {State} */
	  function start(code) {
	    // First we iterate through the open blocks, starting with the root
	    // document, and descending through last children down to the last open
	    // block.
	    // Each block imposes a condition that the line must satisfy if the block is
	    // to remain open.
	    // For example, a block quote requires a `>` character.
	    // A paragraph requires a non-blank line.
	    // In this phase we may match all or just some of the open blocks.
	    // But we cannot close unmatched blocks yet, because we may have a lazy
	    // continuation line.
	    if (continued < stack.length) {
	      const item = stack[continued];
	      self.containerState = item[1];
	      return effects.attempt(
	        item[0].continuation,
	        documentContinue,
	        checkNewContainers
	      )(code)
	    }

	    // Done.
	    return checkNewContainers(code)
	  }

	  /** @type {State} */
	  function documentContinue(code) {
	    continued++;

	    // Note: this field is called `_closeFlow` but it also closes containers.
	    // Perhaps a good idea to rename it but it’s already used in the wild by
	    // extensions.
	    if (self.containerState._closeFlow) {
	      self.containerState._closeFlow = undefined;
	      if (childFlow) {
	        closeFlow();
	      }

	      // Note: this algorithm for moving events around is similar to the
	      // algorithm when dealing with lazy lines in `writeToChild`.
	      const indexBeforeExits = self.events.length;
	      let indexBeforeFlow = indexBeforeExits;
	      /** @type {Point | undefined} */
	      let point;

	      // Find the flow chunk.
	      while (indexBeforeFlow--) {
	        if (
	          self.events[indexBeforeFlow][0] === 'exit' &&
	          self.events[indexBeforeFlow][1].type === 'chunkFlow'
	        ) {
	          point = self.events[indexBeforeFlow][1].end;
	          break
	        }
	      }
	      exitContainers(continued);

	      // Fix positions.
	      let index = indexBeforeExits;
	      while (index < self.events.length) {
	        self.events[index][1].end = Object.assign({}, point);
	        index++;
	      }

	      // Inject the exits earlier (they’re still also at the end).
	      splice(
	        self.events,
	        indexBeforeFlow + 1,
	        0,
	        self.events.slice(indexBeforeExits)
	      );

	      // Discard the duplicate exits.
	      self.events.length = index;
	      return checkNewContainers(code)
	    }
	    return start(code)
	  }

	  /** @type {State} */
	  function checkNewContainers(code) {
	    // Next, after consuming the continuation markers for existing blocks, we
	    // look for new block starts (e.g. `>` for a block quote).
	    // If we encounter a new block start, we close any blocks unmatched in
	    // step 1 before creating the new block as a child of the last matched
	    // block.
	    if (continued === stack.length) {
	      // No need to `check` whether there’s a container, of `exitContainers`
	      // would be moot.
	      // We can instead immediately `attempt` to parse one.
	      if (!childFlow) {
	        return documentContinued(code)
	      }

	      // If we have concrete content, such as block HTML or fenced code,
	      // we can’t have containers “pierce” into them, so we can immediately
	      // start.
	      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
	        return flowStart(code)
	      }

	      // If we do have flow, it could still be a blank line,
	      // but we’d be interrupting it w/ a new container if there’s a current
	      // construct.
	      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer
	      // needed in micromark-extension-gfm-table@1.0.6).
	      self.interrupt = Boolean(
	        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack
	      );
	    }

	    // Check if there is a new container.
	    self.containerState = {};
	    return effects.check(
	      containerConstruct,
	      thereIsANewContainer,
	      thereIsNoNewContainer
	    )(code)
	  }

	  /** @type {State} */
	  function thereIsANewContainer(code) {
	    if (childFlow) closeFlow();
	    exitContainers(continued);
	    return documentContinued(code)
	  }

	  /** @type {State} */
	  function thereIsNoNewContainer(code) {
	    self.parser.lazy[self.now().line] = continued !== stack.length;
	    lineStartOffset = self.now().offset;
	    return flowStart(code)
	  }

	  /** @type {State} */
	  function documentContinued(code) {
	    // Try new containers.
	    self.containerState = {};
	    return effects.attempt(
	      containerConstruct,
	      containerContinue,
	      flowStart
	    )(code)
	  }

	  /** @type {State} */
	  function containerContinue(code) {
	    continued++;
	    stack.push([self.currentConstruct, self.containerState]);
	    // Try another.
	    return documentContinued(code)
	  }

	  /** @type {State} */
	  function flowStart(code) {
	    if (code === null) {
	      if (childFlow) closeFlow();
	      exitContainers(0);
	      effects.consume(code);
	      return
	    }
	    childFlow = childFlow || self.parser.flow(self.now());
	    effects.enter('chunkFlow', {
	      contentType: 'flow',
	      previous: childToken,
	      _tokenizer: childFlow
	    });
	    return flowContinue(code)
	  }

	  /** @type {State} */
	  function flowContinue(code) {
	    if (code === null) {
	      writeToChild(effects.exit('chunkFlow'), true);
	      exitContainers(0);
	      effects.consume(code);
	      return
	    }
	    if (markdownLineEnding(code)) {
	      effects.consume(code);
	      writeToChild(effects.exit('chunkFlow'));
	      // Get ready for the next line.
	      continued = 0;
	      self.interrupt = undefined;
	      return start
	    }
	    effects.consume(code);
	    return flowContinue
	  }

	  /**
	   * @param {Token} token
	   * @param {boolean | undefined} [eof]
	   * @returns {undefined}
	   */
	  function writeToChild(token, eof) {
	    const stream = self.sliceStream(token);
	    if (eof) stream.push(null);
	    token.previous = childToken;
	    if (childToken) childToken.next = token;
	    childToken = token;
	    childFlow.defineSkip(token.start);
	    childFlow.write(stream);

	    // Alright, so we just added a lazy line:
	    //
	    // ```markdown
	    // > a
	    // b.
	    //
	    // Or:
	    //
	    // > ~~~c
	    // d
	    //
	    // Or:
	    //
	    // > | e |
	    // f
	    // ```
	    //
	    // The construct in the second example (fenced code) does not accept lazy
	    // lines, so it marked itself as done at the end of its first line, and
	    // then the content construct parses `d`.
	    // Most constructs in markdown match on the first line: if the first line
	    // forms a construct, a non-lazy line can’t “unmake” it.
	    //
	    // The construct in the third example is potentially a GFM table, and
	    // those are *weird*.
	    // It *could* be a table, from the first line, if the following line
	    // matches a condition.
	    // In this case, that second line is lazy, which “unmakes” the first line
	    // and turns the whole into one content block.
	    //
	    // We’ve now parsed the non-lazy and the lazy line, and can figure out
	    // whether the lazy line started a new flow block.
	    // If it did, we exit the current containers between the two flow blocks.
	    if (self.parser.lazy[token.start.line]) {
	      let index = childFlow.events.length;
	      while (index--) {
	        if (
	          // The token starts before the line ending…
	          childFlow.events[index][1].start.offset < lineStartOffset &&
	          // …and either is not ended yet…
	          (!childFlow.events[index][1].end ||
	            // …or ends after it.
	            childFlow.events[index][1].end.offset > lineStartOffset)
	        ) {
	          // Exit: there’s still something open, which means it’s a lazy line
	          // part of something.
	          return
	        }
	      }

	      // Note: this algorithm for moving events around is similar to the
	      // algorithm when closing flow in `documentContinue`.
	      const indexBeforeExits = self.events.length;
	      let indexBeforeFlow = indexBeforeExits;
	      /** @type {boolean | undefined} */
	      let seen;
	      /** @type {Point | undefined} */
	      let point;

	      // Find the previous chunk (the one before the lazy line).
	      while (indexBeforeFlow--) {
	        if (
	          self.events[indexBeforeFlow][0] === 'exit' &&
	          self.events[indexBeforeFlow][1].type === 'chunkFlow'
	        ) {
	          if (seen) {
	            point = self.events[indexBeforeFlow][1].end;
	            break
	          }
	          seen = true;
	        }
	      }
	      exitContainers(continued);

	      // Fix positions.
	      index = indexBeforeExits;
	      while (index < self.events.length) {
	        self.events[index][1].end = Object.assign({}, point);
	        index++;
	      }

	      // Inject the exits earlier (they’re still also at the end).
	      splice(
	        self.events,
	        indexBeforeFlow + 1,
	        0,
	        self.events.slice(indexBeforeExits)
	      );

	      // Discard the duplicate exits.
	      self.events.length = index;
	    }
	  }

	  /**
	   * @param {number} size
	   * @returns {undefined}
	   */
	  function exitContainers(size) {
	    let index = stack.length;

	    // Exit open containers.
	    while (index-- > size) {
	      const entry = stack[index];
	      self.containerState = entry[1];
	      entry[0].exit.call(self, effects);
	    }
	    stack.length = size;
	  }
	  function closeFlow() {
	    childFlow.write([null]);
	    childToken = undefined;
	    childFlow = undefined;
	    self.containerState._closeFlow = undefined;
	  }
	}

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeContainer(effects, ok, nok) {
	  // Always populated by defaults.

	  return factorySpace(
	    effects,
	    effects.attempt(this.parser.constructs.document, ok, nok),
	    'linePrefix',
	    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4
	  )
	}

	/**
	 * @typedef {import('micromark-util-types').Code} Code
	 */

	/**
	 * Classify whether a code represents whitespace, punctuation, or something
	 * else.
	 *
	 * Used for attention (emphasis, strong), whose sequences can open or close
	 * based on the class of surrounding characters.
	 *
	 * > 👉 **Note**: eof (`null`) is seen as whitespace.
	 *
	 * @param {Code} code
	 *   Code.
	 * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}
	 *   Group.
	 */
	function classifyCharacter(code) {
	  if (
	    code === null ||
	    markdownLineEndingOrSpace(code) ||
	    unicodeWhitespace(code)
	  ) {
	    return 1
	  }
	  if (unicodePunctuation(code)) {
	    return 2
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Event} Event
	 * @typedef {import('micromark-util-types').Resolver} Resolver
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 */

	/**
	 * Call all `resolveAll`s.
	 *
	 * @param {Array<{resolveAll?: Resolver | undefined}>} constructs
	 *   List of constructs, optionally with `resolveAll`s.
	 * @param {Array<Event>} events
	 *   List of events.
	 * @param {TokenizeContext} context
	 *   Context used by `tokenize`.
	 * @returns {Array<Event>}
	 *   Changed events.
	 */
	function resolveAll(constructs, events, context) {
	  /** @type {Array<Resolver>} */
	  const called = [];
	  let index = -1;

	  while (++index < constructs.length) {
	    const resolve = constructs[index].resolveAll;

	    if (resolve && !called.includes(resolve)) {
	      events = resolve(events, context);
	      called.push(resolve);
	    }
	  }

	  return events
	}

	/**
	 * @typedef {import('micromark-util-types').Code} Code
	 * @typedef {import('micromark-util-types').Construct} Construct
	 * @typedef {import('micromark-util-types').Event} Event
	 * @typedef {import('micromark-util-types').Point} Point
	 * @typedef {import('micromark-util-types').Resolver} Resolver
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').Token} Token
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */

	/** @type {Construct} */
	const attention = {
	  name: 'attention',
	  tokenize: tokenizeAttention,
	  resolveAll: resolveAllAttention
	};

	/**
	 * Take all events and resolve attention to emphasis or strong.
	 *
	 * @type {Resolver}
	 */
	// eslint-disable-next-line complexity
	function resolveAllAttention(events, context) {
	  let index = -1;
	  /** @type {number} */
	  let open;
	  /** @type {Token} */
	  let group;
	  /** @type {Token} */
	  let text;
	  /** @type {Token} */
	  let openingSequence;
	  /** @type {Token} */
	  let closingSequence;
	  /** @type {number} */
	  let use;
	  /** @type {Array<Event>} */
	  let nextEvents;
	  /** @type {number} */
	  let offset;

	  // Walk through all events.
	  //
	  // Note: performance of this is fine on an mb of normal markdown, but it’s
	  // a bottleneck for malicious stuff.
	  while (++index < events.length) {
	    // Find a token that can close.
	    if (
	      events[index][0] === 'enter' &&
	      events[index][1].type === 'attentionSequence' &&
	      events[index][1]._close
	    ) {
	      open = index;

	      // Now walk back to find an opener.
	      while (open--) {
	        // Find a token that can open the closer.
	        if (
	          events[open][0] === 'exit' &&
	          events[open][1].type === 'attentionSequence' &&
	          events[open][1]._open &&
	          // If the markers are the same:
	          context.sliceSerialize(events[open][1]).charCodeAt(0) ===
	            context.sliceSerialize(events[index][1]).charCodeAt(0)
	        ) {
	          // If the opening can close or the closing can open,
	          // and the close size *is not* a multiple of three,
	          // but the sum of the opening and closing size *is* multiple of three,
	          // then don’t match.
	          if (
	            (events[open][1]._close || events[index][1]._open) &&
	            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&
	            !(
	              (events[open][1].end.offset -
	                events[open][1].start.offset +
	                events[index][1].end.offset -
	                events[index][1].start.offset) %
	              3
	            )
	          ) {
	            continue
	          }

	          // Number of markers to use from the sequence.
	          use =
	            events[open][1].end.offset - events[open][1].start.offset > 1 &&
	            events[index][1].end.offset - events[index][1].start.offset > 1
	              ? 2
	              : 1;
	          const start = Object.assign({}, events[open][1].end);
	          const end = Object.assign({}, events[index][1].start);
	          movePoint(start, -use);
	          movePoint(end, use);
	          openingSequence = {
	            type: use > 1 ? 'strongSequence' : 'emphasisSequence',
	            start,
	            end: Object.assign({}, events[open][1].end)
	          };
	          closingSequence = {
	            type: use > 1 ? 'strongSequence' : 'emphasisSequence',
	            start: Object.assign({}, events[index][1].start),
	            end
	          };
	          text = {
	            type: use > 1 ? 'strongText' : 'emphasisText',
	            start: Object.assign({}, events[open][1].end),
	            end: Object.assign({}, events[index][1].start)
	          };
	          group = {
	            type: use > 1 ? 'strong' : 'emphasis',
	            start: Object.assign({}, openingSequence.start),
	            end: Object.assign({}, closingSequence.end)
	          };
	          events[open][1].end = Object.assign({}, openingSequence.start);
	          events[index][1].start = Object.assign({}, closingSequence.end);
	          nextEvents = [];

	          // If there are more markers in the opening, add them before.
	          if (events[open][1].end.offset - events[open][1].start.offset) {
	            nextEvents = push(nextEvents, [
	              ['enter', events[open][1], context],
	              ['exit', events[open][1], context]
	            ]);
	          }

	          // Opening.
	          nextEvents = push(nextEvents, [
	            ['enter', group, context],
	            ['enter', openingSequence, context],
	            ['exit', openingSequence, context],
	            ['enter', text, context]
	          ]);

	          // Always populated by defaults.

	          // Between.
	          nextEvents = push(
	            nextEvents,
	            resolveAll(
	              context.parser.constructs.insideSpan.null,
	              events.slice(open + 1, index),
	              context
	            )
	          );

	          // Closing.
	          nextEvents = push(nextEvents, [
	            ['exit', text, context],
	            ['enter', closingSequence, context],
	            ['exit', closingSequence, context],
	            ['exit', group, context]
	          ]);

	          // If there are more markers in the closing, add them after.
	          if (events[index][1].end.offset - events[index][1].start.offset) {
	            offset = 2;
	            nextEvents = push(nextEvents, [
	              ['enter', events[index][1], context],
	              ['exit', events[index][1], context]
	            ]);
	          } else {
	            offset = 0;
	          }
	          splice(events, open - 1, index - open + 3, nextEvents);
	          index = open + nextEvents.length - offset - 2;
	          break
	        }
	      }
	    }
	  }

	  // Remove remaining sequences.
	  index = -1;
	  while (++index < events.length) {
	    if (events[index][1].type === 'attentionSequence') {
	      events[index][1].type = 'data';
	    }
	  }
	  return events
	}

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeAttention(effects, ok) {
	  const attentionMarkers = this.parser.constructs.attentionMarkers.null;
	  const previous = this.previous;
	  const before = classifyCharacter(previous);

	  /** @type {NonNullable<Code>} */
	  let marker;
	  return start

	  /**
	   * Before a sequence.
	   *
	   * ```markdown
	   * > | **
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    marker = code;
	    effects.enter('attentionSequence');
	    return inside(code)
	  }

	  /**
	   * In a sequence.
	   *
	   * ```markdown
	   * > | **
	   *     ^^
	   * ```
	   *
	   * @type {State}
	   */
	  function inside(code) {
	    if (code === marker) {
	      effects.consume(code);
	      return inside
	    }
	    const token = effects.exit('attentionSequence');

	    // To do: next major: move this to resolver, just like `markdown-rs`.
	    const after = classifyCharacter(code);

	    // Always populated by defaults.

	    const open =
	      !after || (after === 2 && before) || attentionMarkers.includes(code);
	    const close =
	      !before || (before === 2 && after) || attentionMarkers.includes(previous);
	    token._open = Boolean(marker === 42 ? open : open && (before || !close));
	    token._close = Boolean(marker === 42 ? close : close && (after || !open));
	    return ok(code)
	  }
	}

	/**
	 * Move a point a bit.
	 *
	 * Note: `move` only works inside lines! It’s not possible to move past other
	 * chunks (replacement characters, tabs, or line endings).
	 *
	 * @param {Point} point
	 * @param {number} offset
	 * @returns {undefined}
	 */
	function movePoint(point, offset) {
	  point.column += offset;
	  point.offset += offset;
	  point._bufferIndex += offset;
	}

	/**
	 * @typedef {import('micromark-util-types').Construct} Construct
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */

	/** @type {Construct} */
	const autolink = {
	  name: 'autolink',
	  tokenize: tokenizeAutolink
	};

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeAutolink(effects, ok, nok) {
	  let size = 0;
	  return start

	  /**
	   * Start of an autolink.
	   *
	   * ```markdown
	   * > | a<https://example.com>b
	   *      ^
	   * > | a<user@example.com>b
	   *      ^
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    effects.enter('autolink');
	    effects.enter('autolinkMarker');
	    effects.consume(code);
	    effects.exit('autolinkMarker');
	    effects.enter('autolinkProtocol');
	    return open
	  }

	  /**
	   * After `<`, at protocol or atext.
	   *
	   * ```markdown
	   * > | a<https://example.com>b
	   *       ^
	   * > | a<user@example.com>b
	   *       ^
	   * ```
	   *
	   * @type {State}
	   */
	  function open(code) {
	    if (asciiAlpha(code)) {
	      effects.consume(code);
	      return schemeOrEmailAtext
	    }
	    return emailAtext(code)
	  }

	  /**
	   * At second byte of protocol or atext.
	   *
	   * ```markdown
	   * > | a<https://example.com>b
	   *        ^
	   * > | a<user@example.com>b
	   *        ^
	   * ```
	   *
	   * @type {State}
	   */
	  function schemeOrEmailAtext(code) {
	    // ASCII alphanumeric and `+`, `-`, and `.`.
	    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {
	      // Count the previous alphabetical from `open` too.
	      size = 1;
	      return schemeInsideOrEmailAtext(code)
	    }
	    return emailAtext(code)
	  }

	  /**
	   * In ambiguous protocol or atext.
	   *
	   * ```markdown
	   * > | a<https://example.com>b
	   *        ^
	   * > | a<user@example.com>b
	   *        ^
	   * ```
	   *
	   * @type {State}
	   */
	  function schemeInsideOrEmailAtext(code) {
	    if (code === 58) {
	      effects.consume(code);
	      size = 0;
	      return urlInside
	    }

	    // ASCII alphanumeric and `+`, `-`, and `.`.
	    if (
	      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&
	      size++ < 32
	    ) {
	      effects.consume(code);
	      return schemeInsideOrEmailAtext
	    }
	    size = 0;
	    return emailAtext(code)
	  }

	  /**
	   * After protocol, in URL.
	   *
	   * ```markdown
	   * > | a<https://example.com>b
	   *             ^
	   * ```
	   *
	   * @type {State}
	   */
	  function urlInside(code) {
	    if (code === 62) {
	      effects.exit('autolinkProtocol');
	      effects.enter('autolinkMarker');
	      effects.consume(code);
	      effects.exit('autolinkMarker');
	      effects.exit('autolink');
	      return ok
	    }

	    // ASCII control, space, or `<`.
	    if (code === null || code === 32 || code === 60 || asciiControl(code)) {
	      return nok(code)
	    }
	    effects.consume(code);
	    return urlInside
	  }

	  /**
	   * In email atext.
	   *
	   * ```markdown
	   * > | a<user.name@example.com>b
	   *              ^
	   * ```
	   *
	   * @type {State}
	   */
	  function emailAtext(code) {
	    if (code === 64) {
	      effects.consume(code);
	      return emailAtSignOrDot
	    }
	    if (asciiAtext(code)) {
	      effects.consume(code);
	      return emailAtext
	    }
	    return nok(code)
	  }

	  /**
	   * In label, after at-sign or dot.
	   *
	   * ```markdown
	   * > | a<user.name@example.com>b
	   *                 ^       ^
	   * ```
	   *
	   * @type {State}
	   */
	  function emailAtSignOrDot(code) {
	    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)
	  }

	  /**
	   * In label, where `.` and `>` are allowed.
	   *
	   * ```markdown
	   * > | a<user.name@example.com>b
	   *                   ^
	   * ```
	   *
	   * @type {State}
	   */
	  function emailLabel(code) {
	    if (code === 46) {
	      effects.consume(code);
	      size = 0;
	      return emailAtSignOrDot
	    }
	    if (code === 62) {
	      // Exit, then change the token type.
	      effects.exit('autolinkProtocol').type = 'autolinkEmail';
	      effects.enter('autolinkMarker');
	      effects.consume(code);
	      effects.exit('autolinkMarker');
	      effects.exit('autolink');
	      return ok
	    }
	    return emailValue(code)
	  }

	  /**
	   * In label, where `.` and `>` are *not* allowed.
	   *
	   * Though, this is also used in `emailLabel` to parse other values.
	   *
	   * ```markdown
	   * > | a<user.name@ex-ample.com>b
	   *                    ^
	   * ```
	   *
	   * @type {State}
	   */
	  function emailValue(code) {
	    // ASCII alphanumeric or `-`.
	    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {
	      const next = code === 45 ? emailValue : emailLabel;
	      effects.consume(code);
	      return next
	    }
	    return nok(code)
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Construct} Construct
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */

	/** @type {Construct} */
	const blankLine = {
	  tokenize: tokenizeBlankLine,
	  partial: true
	};

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeBlankLine(effects, ok, nok) {
	  return start

	  /**
	   * Start of blank line.
	   *
	   * > 👉 **Note**: `␠` represents a space character.
	   *
	   * ```markdown
	   * > | ␠␠␊
	   *     ^
	   * > | ␊
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    return markdownSpace(code)
	      ? factorySpace(effects, after, 'linePrefix')(code)
	      : after(code)
	  }

	  /**
	   * At eof/eol, after optional whitespace.
	   *
	   * > 👉 **Note**: `␠` represents a space character.
	   *
	   * ```markdown
	   * > | ␠␠␊
	   *       ^
	   * > | ␊
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function after(code) {
	    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Construct} Construct
	 * @typedef {import('micromark-util-types').Exiter} Exiter
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */

	/** @type {Construct} */
	const blockQuote = {
	  name: 'blockQuote',
	  tokenize: tokenizeBlockQuoteStart,
	  continuation: {
	    tokenize: tokenizeBlockQuoteContinuation
	  },
	  exit: exit$1
	};

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeBlockQuoteStart(effects, ok, nok) {
	  const self = this;
	  return start

	  /**
	   * Start of block quote.
	   *
	   * ```markdown
	   * > | > a
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    if (code === 62) {
	      const state = self.containerState;
	      if (!state.open) {
	        effects.enter('blockQuote', {
	          _container: true
	        });
	        state.open = true;
	      }
	      effects.enter('blockQuotePrefix');
	      effects.enter('blockQuoteMarker');
	      effects.consume(code);
	      effects.exit('blockQuoteMarker');
	      return after
	    }
	    return nok(code)
	  }

	  /**
	   * After `>`, before optional whitespace.
	   *
	   * ```markdown
	   * > | > a
	   *      ^
	   * ```
	   *
	   * @type {State}
	   */
	  function after(code) {
	    if (markdownSpace(code)) {
	      effects.enter('blockQuotePrefixWhitespace');
	      effects.consume(code);
	      effects.exit('blockQuotePrefixWhitespace');
	      effects.exit('blockQuotePrefix');
	      return ok
	    }
	    effects.exit('blockQuotePrefix');
	    return ok(code)
	  }
	}

	/**
	 * Start of block quote continuation.
	 *
	 * ```markdown
	 *   | > a
	 * > | > b
	 *     ^
	 * ```
	 *
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeBlockQuoteContinuation(effects, ok, nok) {
	  const self = this;
	  return contStart

	  /**
	   * Start of block quote continuation.
	   *
	   * Also used to parse the first block quote opening.
	   *
	   * ```markdown
	   *   | > a
	   * > | > b
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function contStart(code) {
	    if (markdownSpace(code)) {
	      // Always populated by defaults.

	      return factorySpace(
	        effects,
	        contBefore,
	        'linePrefix',
	        self.parser.constructs.disable.null.includes('codeIndented')
	          ? undefined
	          : 4
	      )(code)
	    }
	    return contBefore(code)
	  }

	  /**
	   * At `>`, after optional whitespace.
	   *
	   * Also used to parse the first block quote opening.
	   *
	   * ```markdown
	   *   | > a
	   * > | > b
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function contBefore(code) {
	    return effects.attempt(blockQuote, ok, nok)(code)
	  }
	}

	/** @type {Exiter} */
	function exit$1(effects) {
	  effects.exit('blockQuote');
	}

	/**
	 * @typedef {import('micromark-util-types').Construct} Construct
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */

	/** @type {Construct} */
	const characterEscape = {
	  name: 'characterEscape',
	  tokenize: tokenizeCharacterEscape
	};

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeCharacterEscape(effects, ok, nok) {
	  return start

	  /**
	   * Start of character escape.
	   *
	   * ```markdown
	   * > | a\*b
	   *      ^
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    effects.enter('characterEscape');
	    effects.enter('escapeMarker');
	    effects.consume(code);
	    effects.exit('escapeMarker');
	    return inside
	  }

	  /**
	   * After `\`, at punctuation.
	   *
	   * ```markdown
	   * > | a\*b
	   *       ^
	   * ```
	   *
	   * @type {State}
	   */
	  function inside(code) {
	    // ASCII punctuation.
	    if (asciiPunctuation(code)) {
	      effects.enter('characterEscapeValue');
	      effects.consume(code);
	      effects.exit('characterEscapeValue');
	      effects.exit('characterEscape');
	      return ok
	    }
	    return nok(code)
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Code} Code
	 * @typedef {import('micromark-util-types').Construct} Construct
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */

	/** @type {Construct} */
	const characterReference = {
	  name: 'characterReference',
	  tokenize: tokenizeCharacterReference
	};

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeCharacterReference(effects, ok, nok) {
	  const self = this;
	  let size = 0;
	  /** @type {number} */
	  let max;
	  /** @type {(code: Code) => boolean} */
	  let test;
	  return start

	  /**
	   * Start of character reference.
	   *
	   * ```markdown
	   * > | a&amp;b
	   *      ^
	   * > | a&#123;b
	   *      ^
	   * > | a&#x9;b
	   *      ^
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    effects.enter('characterReference');
	    effects.enter('characterReferenceMarker');
	    effects.consume(code);
	    effects.exit('characterReferenceMarker');
	    return open
	  }

	  /**
	   * After `&`, at `#` for numeric references or alphanumeric for named
	   * references.
	   *
	   * ```markdown
	   * > | a&amp;b
	   *       ^
	   * > | a&#123;b
	   *       ^
	   * > | a&#x9;b
	   *       ^
	   * ```
	   *
	   * @type {State}
	   */
	  function open(code) {
	    if (code === 35) {
	      effects.enter('characterReferenceMarkerNumeric');
	      effects.consume(code);
	      effects.exit('characterReferenceMarkerNumeric');
	      return numeric
	    }
	    effects.enter('characterReferenceValue');
	    max = 31;
	    test = asciiAlphanumeric;
	    return value(code)
	  }

	  /**
	   * After `#`, at `x` for hexadecimals or digit for decimals.
	   *
	   * ```markdown
	   * > | a&#123;b
	   *        ^
	   * > | a&#x9;b
	   *        ^
	   * ```
	   *
	   * @type {State}
	   */
	  function numeric(code) {
	    if (code === 88 || code === 120) {
	      effects.enter('characterReferenceMarkerHexadecimal');
	      effects.consume(code);
	      effects.exit('characterReferenceMarkerHexadecimal');
	      effects.enter('characterReferenceValue');
	      max = 6;
	      test = asciiHexDigit;
	      return value
	    }
	    effects.enter('characterReferenceValue');
	    max = 7;
	    test = asciiDigit;
	    return value(code)
	  }

	  /**
	   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.
	   *
	   * The character reference kind defines what and how many characters are
	   * allowed.
	   *
	   * ```markdown
	   * > | a&amp;b
	   *       ^^^
	   * > | a&#123;b
	   *        ^^^
	   * > | a&#x9;b
	   *         ^
	   * ```
	   *
	   * @type {State}
	   */
	  function value(code) {
	    if (code === 59 && size) {
	      const token = effects.exit('characterReferenceValue');
	      if (
	        test === asciiAlphanumeric &&
	        !decodeNamedCharacterReference(self.sliceSerialize(token))
	      ) {
	        return nok(code)
	      }

	      // To do: `markdown-rs` uses a different name:
	      // `CharacterReferenceMarkerSemi`.
	      effects.enter('characterReferenceMarker');
	      effects.consume(code);
	      effects.exit('characterReferenceMarker');
	      effects.exit('characterReference');
	      return ok
	    }
	    if (test(code) && size++ < max) {
	      effects.consume(code);
	      return value
	    }
	    return nok(code)
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Code} Code
	 * @typedef {import('micromark-util-types').Construct} Construct
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */

	/** @type {Construct} */
	const nonLazyContinuation = {
	  tokenize: tokenizeNonLazyContinuation,
	  partial: true
	};

	/** @type {Construct} */
	const codeFenced = {
	  name: 'codeFenced',
	  tokenize: tokenizeCodeFenced,
	  concrete: true
	};

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeCodeFenced(effects, ok, nok) {
	  const self = this;
	  /** @type {Construct} */
	  const closeStart = {
	    tokenize: tokenizeCloseStart,
	    partial: true
	  };
	  let initialPrefix = 0;
	  let sizeOpen = 0;
	  /** @type {NonNullable<Code>} */
	  let marker;
	  return start

	  /**
	   * Start of code.
	   *
	   * ```markdown
	   * > | ~~~js
	   *     ^
	   *   | alert(1)
	   *   | ~~~
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    // To do: parse whitespace like `markdown-rs`.
	    return beforeSequenceOpen(code)
	  }

	  /**
	   * In opening fence, after prefix, at sequence.
	   *
	   * ```markdown
	   * > | ~~~js
	   *     ^
	   *   | alert(1)
	   *   | ~~~
	   * ```
	   *
	   * @type {State}
	   */
	  function beforeSequenceOpen(code) {
	    const tail = self.events[self.events.length - 1];
	    initialPrefix =
	      tail && tail[1].type === 'linePrefix'
	        ? tail[2].sliceSerialize(tail[1], true).length
	        : 0;
	    marker = code;
	    effects.enter('codeFenced');
	    effects.enter('codeFencedFence');
	    effects.enter('codeFencedFenceSequence');
	    return sequenceOpen(code)
	  }

	  /**
	   * In opening fence sequence.
	   *
	   * ```markdown
	   * > | ~~~js
	   *      ^
	   *   | alert(1)
	   *   | ~~~
	   * ```
	   *
	   * @type {State}
	   */
	  function sequenceOpen(code) {
	    if (code === marker) {
	      sizeOpen++;
	      effects.consume(code);
	      return sequenceOpen
	    }
	    if (sizeOpen < 3) {
	      return nok(code)
	    }
	    effects.exit('codeFencedFenceSequence');
	    return markdownSpace(code)
	      ? factorySpace(effects, infoBefore, 'whitespace')(code)
	      : infoBefore(code)
	  }

	  /**
	   * In opening fence, after the sequence (and optional whitespace), before info.
	   *
	   * ```markdown
	   * > | ~~~js
	   *        ^
	   *   | alert(1)
	   *   | ~~~
	   * ```
	   *
	   * @type {State}
	   */
	  function infoBefore(code) {
	    if (code === null || markdownLineEnding(code)) {
	      effects.exit('codeFencedFence');
	      return self.interrupt
	        ? ok(code)
	        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)
	    }
	    effects.enter('codeFencedFenceInfo');
	    effects.enter('chunkString', {
	      contentType: 'string'
	    });
	    return info(code)
	  }

	  /**
	   * In info.
	   *
	   * ```markdown
	   * > | ~~~js
	   *        ^
	   *   | alert(1)
	   *   | ~~~
	   * ```
	   *
	   * @type {State}
	   */
	  function info(code) {
	    if (code === null || markdownLineEnding(code)) {
	      effects.exit('chunkString');
	      effects.exit('codeFencedFenceInfo');
	      return infoBefore(code)
	    }
	    if (markdownSpace(code)) {
	      effects.exit('chunkString');
	      effects.exit('codeFencedFenceInfo');
	      return factorySpace(effects, metaBefore, 'whitespace')(code)
	    }
	    if (code === 96 && code === marker) {
	      return nok(code)
	    }
	    effects.consume(code);
	    return info
	  }

	  /**
	   * In opening fence, after info and whitespace, before meta.
	   *
	   * ```markdown
	   * > | ~~~js eval
	   *           ^
	   *   | alert(1)
	   *   | ~~~
	   * ```
	   *
	   * @type {State}
	   */
	  function metaBefore(code) {
	    if (code === null || markdownLineEnding(code)) {
	      return infoBefore(code)
	    }
	    effects.enter('codeFencedFenceMeta');
	    effects.enter('chunkString', {
	      contentType: 'string'
	    });
	    return meta(code)
	  }

	  /**
	   * In meta.
	   *
	   * ```markdown
	   * > | ~~~js eval
	   *           ^
	   *   | alert(1)
	   *   | ~~~
	   * ```
	   *
	   * @type {State}
	   */
	  function meta(code) {
	    if (code === null || markdownLineEnding(code)) {
	      effects.exit('chunkString');
	      effects.exit('codeFencedFenceMeta');
	      return infoBefore(code)
	    }
	    if (code === 96 && code === marker) {
	      return nok(code)
	    }
	    effects.consume(code);
	    return meta
	  }

	  /**
	   * At eol/eof in code, before a non-lazy closing fence or content.
	   *
	   * ```markdown
	   * > | ~~~js
	   *          ^
	   * > | alert(1)
	   *             ^
	   *   | ~~~
	   * ```
	   *
	   * @type {State}
	   */
	  function atNonLazyBreak(code) {
	    return effects.attempt(closeStart, after, contentBefore)(code)
	  }

	  /**
	   * Before code content, not a closing fence, at eol.
	   *
	   * ```markdown
	   *   | ~~~js
	   * > | alert(1)
	   *             ^
	   *   | ~~~
	   * ```
	   *
	   * @type {State}
	   */
	  function contentBefore(code) {
	    effects.enter('lineEnding');
	    effects.consume(code);
	    effects.exit('lineEnding');
	    return contentStart
	  }

	  /**
	   * Before code content, not a closing fence.
	   *
	   * ```markdown
	   *   | ~~~js
	   * > | alert(1)
	   *     ^
	   *   | ~~~
	   * ```
	   *
	   * @type {State}
	   */
	  function contentStart(code) {
	    return initialPrefix > 0 && markdownSpace(code)
	      ? factorySpace(
	          effects,
	          beforeContentChunk,
	          'linePrefix',
	          initialPrefix + 1
	        )(code)
	      : beforeContentChunk(code)
	  }

	  /**
	   * Before code content, after optional prefix.
	   *
	   * ```markdown
	   *   | ~~~js
	   * > | alert(1)
	   *     ^
	   *   | ~~~
	   * ```
	   *
	   * @type {State}
	   */
	  function beforeContentChunk(code) {
	    if (code === null || markdownLineEnding(code)) {
	      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)
	    }
	    effects.enter('codeFlowValue');
	    return contentChunk(code)
	  }

	  /**
	   * In code content.
	   *
	   * ```markdown
	   *   | ~~~js
	   * > | alert(1)
	   *     ^^^^^^^^
	   *   | ~~~
	   * ```
	   *
	   * @type {State}
	   */
	  function contentChunk(code) {
	    if (code === null || markdownLineEnding(code)) {
	      effects.exit('codeFlowValue');
	      return beforeContentChunk(code)
	    }
	    effects.consume(code);
	    return contentChunk
	  }

	  /**
	   * After code.
	   *
	   * ```markdown
	   *   | ~~~js
	   *   | alert(1)
	   * > | ~~~
	   *        ^
	   * ```
	   *
	   * @type {State}
	   */
	  function after(code) {
	    effects.exit('codeFenced');
	    return ok(code)
	  }

	  /**
	   * @this {TokenizeContext}
	   * @type {Tokenizer}
	   */
	  function tokenizeCloseStart(effects, ok, nok) {
	    let size = 0;
	    return startBefore

	    /**
	     *
	     *
	     * @type {State}
	     */
	    function startBefore(code) {
	      effects.enter('lineEnding');
	      effects.consume(code);
	      effects.exit('lineEnding');
	      return start
	    }

	    /**
	     * Before closing fence, at optional whitespace.
	     *
	     * ```markdown
	     *   | ~~~js
	     *   | alert(1)
	     * > | ~~~
	     *     ^
	     * ```
	     *
	     * @type {State}
	     */
	    function start(code) {
	      // Always populated by defaults.

	      // To do: `enter` here or in next state?
	      effects.enter('codeFencedFence');
	      return markdownSpace(code)
	        ? factorySpace(
	            effects,
	            beforeSequenceClose,
	            'linePrefix',
	            self.parser.constructs.disable.null.includes('codeIndented')
	              ? undefined
	              : 4
	          )(code)
	        : beforeSequenceClose(code)
	    }

	    /**
	     * In closing fence, after optional whitespace, at sequence.
	     *
	     * ```markdown
	     *   | ~~~js
	     *   | alert(1)
	     * > | ~~~
	     *     ^
	     * ```
	     *
	     * @type {State}
	     */
	    function beforeSequenceClose(code) {
	      if (code === marker) {
	        effects.enter('codeFencedFenceSequence');
	        return sequenceClose(code)
	      }
	      return nok(code)
	    }

	    /**
	     * In closing fence sequence.
	     *
	     * ```markdown
	     *   | ~~~js
	     *   | alert(1)
	     * > | ~~~
	     *     ^
	     * ```
	     *
	     * @type {State}
	     */
	    function sequenceClose(code) {
	      if (code === marker) {
	        size++;
	        effects.consume(code);
	        return sequenceClose
	      }
	      if (size >= sizeOpen) {
	        effects.exit('codeFencedFenceSequence');
	        return markdownSpace(code)
	          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)
	          : sequenceCloseAfter(code)
	      }
	      return nok(code)
	    }

	    /**
	     * After closing fence sequence, after optional whitespace.
	     *
	     * ```markdown
	     *   | ~~~js
	     *   | alert(1)
	     * > | ~~~
	     *        ^
	     * ```
	     *
	     * @type {State}
	     */
	    function sequenceCloseAfter(code) {
	      if (code === null || markdownLineEnding(code)) {
	        effects.exit('codeFencedFence');
	        return ok(code)
	      }
	      return nok(code)
	    }
	  }
	}

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeNonLazyContinuation(effects, ok, nok) {
	  const self = this;
	  return start

	  /**
	   *
	   *
	   * @type {State}
	   */
	  function start(code) {
	    if (code === null) {
	      return nok(code)
	    }
	    effects.enter('lineEnding');
	    effects.consume(code);
	    effects.exit('lineEnding');
	    return lineStart
	  }

	  /**
	   *
	   *
	   * @type {State}
	   */
	  function lineStart(code) {
	    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Construct} Construct
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */

	/** @type {Construct} */
	const codeIndented = {
	  name: 'codeIndented',
	  tokenize: tokenizeCodeIndented
	};

	/** @type {Construct} */
	const furtherStart = {
	  tokenize: tokenizeFurtherStart,
	  partial: true
	};

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeCodeIndented(effects, ok, nok) {
	  const self = this;
	  return start

	  /**
	   * Start of code (indented).
	   *
	   * > **Parsing note**: it is not needed to check if this first line is a
	   * > filled line (that it has a non-whitespace character), because blank lines
	   * > are parsed already, so we never run into that.
	   *
	   * ```markdown
	   * > |     aaa
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    // To do: manually check if interrupting like `markdown-rs`.

	    effects.enter('codeIndented');
	    // To do: use an improved `space_or_tab` function like `markdown-rs`,
	    // so that we can drop the next state.
	    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)
	  }

	  /**
	   * At start, after 1 or 4 spaces.
	   *
	   * ```markdown
	   * > |     aaa
	   *         ^
	   * ```
	   *
	   * @type {State}
	   */
	  function afterPrefix(code) {
	    const tail = self.events[self.events.length - 1];
	    return tail &&
	      tail[1].type === 'linePrefix' &&
	      tail[2].sliceSerialize(tail[1], true).length >= 4
	      ? atBreak(code)
	      : nok(code)
	  }

	  /**
	   * At a break.
	   *
	   * ```markdown
	   * > |     aaa
	   *         ^  ^
	   * ```
	   *
	   * @type {State}
	   */
	  function atBreak(code) {
	    if (code === null) {
	      return after(code)
	    }
	    if (markdownLineEnding(code)) {
	      return effects.attempt(furtherStart, atBreak, after)(code)
	    }
	    effects.enter('codeFlowValue');
	    return inside(code)
	  }

	  /**
	   * In code content.
	   *
	   * ```markdown
	   * > |     aaa
	   *         ^^^^
	   * ```
	   *
	   * @type {State}
	   */
	  function inside(code) {
	    if (code === null || markdownLineEnding(code)) {
	      effects.exit('codeFlowValue');
	      return atBreak(code)
	    }
	    effects.consume(code);
	    return inside
	  }

	  /** @type {State} */
	  function after(code) {
	    effects.exit('codeIndented');
	    // To do: allow interrupting like `markdown-rs`.
	    // Feel free to interrupt.
	    // tokenizer.interrupt = false
	    return ok(code)
	  }
	}

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeFurtherStart(effects, ok, nok) {
	  const self = this;
	  return furtherStart

	  /**
	   * At eol, trying to parse another indent.
	   *
	   * ```markdown
	   * > |     aaa
	   *            ^
	   *   |     bbb
	   * ```
	   *
	   * @type {State}
	   */
	  function furtherStart(code) {
	    // To do: improve `lazy` / `pierce` handling.
	    // If this is a lazy line, it can’t be code.
	    if (self.parser.lazy[self.now().line]) {
	      return nok(code)
	    }
	    if (markdownLineEnding(code)) {
	      effects.enter('lineEnding');
	      effects.consume(code);
	      effects.exit('lineEnding');
	      return furtherStart
	    }

	    // To do: the code here in `micromark-js` is a bit different from
	    // `markdown-rs` because there it can attempt spaces.
	    // We can’t yet.
	    //
	    // To do: use an improved `space_or_tab` function like `markdown-rs`,
	    // so that we can drop the next state.
	    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)
	  }

	  /**
	   * At start, after 1 or 4 spaces.
	   *
	   * ```markdown
	   * > |     aaa
	   *         ^
	   * ```
	   *
	   * @type {State}
	   */
	  function afterPrefix(code) {
	    const tail = self.events[self.events.length - 1];
	    return tail &&
	      tail[1].type === 'linePrefix' &&
	      tail[2].sliceSerialize(tail[1], true).length >= 4
	      ? ok(code)
	      : markdownLineEnding(code)
	      ? furtherStart(code)
	      : nok(code)
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Construct} Construct
	 * @typedef {import('micromark-util-types').Previous} Previous
	 * @typedef {import('micromark-util-types').Resolver} Resolver
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').Token} Token
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */

	/** @type {Construct} */
	const codeText = {
	  name: 'codeText',
	  tokenize: tokenizeCodeText,
	  resolve: resolveCodeText,
	  previous: previous$1
	};

	// To do: next major: don’t resolve, like `markdown-rs`.
	/** @type {Resolver} */
	function resolveCodeText(events) {
	  let tailExitIndex = events.length - 4;
	  let headEnterIndex = 3;
	  /** @type {number} */
	  let index;
	  /** @type {number | undefined} */
	  let enter;

	  // If we start and end with an EOL or a space.
	  if (
	    (events[headEnterIndex][1].type === 'lineEnding' ||
	      events[headEnterIndex][1].type === 'space') &&
	    (events[tailExitIndex][1].type === 'lineEnding' ||
	      events[tailExitIndex][1].type === 'space')
	  ) {
	    index = headEnterIndex;

	    // And we have data.
	    while (++index < tailExitIndex) {
	      if (events[index][1].type === 'codeTextData') {
	        // Then we have padding.
	        events[headEnterIndex][1].type = 'codeTextPadding';
	        events[tailExitIndex][1].type = 'codeTextPadding';
	        headEnterIndex += 2;
	        tailExitIndex -= 2;
	        break
	      }
	    }
	  }

	  // Merge adjacent spaces and data.
	  index = headEnterIndex - 1;
	  tailExitIndex++;
	  while (++index <= tailExitIndex) {
	    if (enter === undefined) {
	      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {
	        enter = index;
	      }
	    } else if (
	      index === tailExitIndex ||
	      events[index][1].type === 'lineEnding'
	    ) {
	      events[enter][1].type = 'codeTextData';
	      if (index !== enter + 2) {
	        events[enter][1].end = events[index - 1][1].end;
	        events.splice(enter + 2, index - enter - 2);
	        tailExitIndex -= index - enter - 2;
	        index = enter + 2;
	      }
	      enter = undefined;
	    }
	  }
	  return events
	}

	/**
	 * @this {TokenizeContext}
	 * @type {Previous}
	 */
	function previous$1(code) {
	  // If there is a previous code, there will always be a tail.
	  return (
	    code !== 96 ||
	    this.events[this.events.length - 1][1].type === 'characterEscape'
	  )
	}

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeCodeText(effects, ok, nok) {
	  let sizeOpen = 0;
	  /** @type {number} */
	  let size;
	  /** @type {Token} */
	  let token;
	  return start

	  /**
	   * Start of code (text).
	   *
	   * ```markdown
	   * > | `a`
	   *     ^
	   * > | \`a`
	   *      ^
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    effects.enter('codeText');
	    effects.enter('codeTextSequence');
	    return sequenceOpen(code)
	  }

	  /**
	   * In opening sequence.
	   *
	   * ```markdown
	   * > | `a`
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function sequenceOpen(code) {
	    if (code === 96) {
	      effects.consume(code);
	      sizeOpen++;
	      return sequenceOpen
	    }
	    effects.exit('codeTextSequence');
	    return between(code)
	  }

	  /**
	   * Between something and something else.
	   *
	   * ```markdown
	   * > | `a`
	   *      ^^
	   * ```
	   *
	   * @type {State}
	   */
	  function between(code) {
	    // EOF.
	    if (code === null) {
	      return nok(code)
	    }

	    // To do: next major: don’t do spaces in resolve, but when compiling,
	    // like `markdown-rs`.
	    // Tabs don’t work, and virtual spaces don’t make sense.
	    if (code === 32) {
	      effects.enter('space');
	      effects.consume(code);
	      effects.exit('space');
	      return between
	    }

	    // Closing fence? Could also be data.
	    if (code === 96) {
	      token = effects.enter('codeTextSequence');
	      size = 0;
	      return sequenceClose(code)
	    }
	    if (markdownLineEnding(code)) {
	      effects.enter('lineEnding');
	      effects.consume(code);
	      effects.exit('lineEnding');
	      return between
	    }

	    // Data.
	    effects.enter('codeTextData');
	    return data(code)
	  }

	  /**
	   * In data.
	   *
	   * ```markdown
	   * > | `a`
	   *      ^
	   * ```
	   *
	   * @type {State}
	   */
	  function data(code) {
	    if (
	      code === null ||
	      code === 32 ||
	      code === 96 ||
	      markdownLineEnding(code)
	    ) {
	      effects.exit('codeTextData');
	      return between(code)
	    }
	    effects.consume(code);
	    return data
	  }

	  /**
	   * In closing sequence.
	   *
	   * ```markdown
	   * > | `a`
	   *       ^
	   * ```
	   *
	   * @type {State}
	   */
	  function sequenceClose(code) {
	    // More.
	    if (code === 96) {
	      effects.consume(code);
	      size++;
	      return sequenceClose
	    }

	    // Done!
	    if (size === sizeOpen) {
	      effects.exit('codeTextSequence');
	      effects.exit('codeText');
	      return ok(code)
	    }

	    // More or less accents: mark as data.
	    token.type = 'codeTextData';
	    return data(code)
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Chunk} Chunk
	 * @typedef {import('micromark-util-types').Event} Event
	 * @typedef {import('micromark-util-types').Token} Token
	 */

	/**
	 * Tokenize subcontent.
	 *
	 * @param {Array<Event>} events
	 *   List of events.
	 * @returns {boolean}
	 *   Whether subtokens were found.
	 */ // eslint-disable-next-line complexity
	function subtokenize(events) {
	  /** @type {Record<string, number>} */
	  const jumps = {};
	  let index = -1;
	  /** @type {Event} */
	  let event;
	  /** @type {number | undefined} */
	  let lineIndex;
	  /** @type {number} */
	  let otherIndex;
	  /** @type {Event} */
	  let otherEvent;
	  /** @type {Array<Event>} */
	  let parameters;
	  /** @type {Array<Event>} */
	  let subevents;
	  /** @type {boolean | undefined} */
	  let more;
	  while (++index < events.length) {
	    while (index in jumps) {
	      index = jumps[index];
	    }
	    event = events[index];

	    // Add a hook for the GFM tasklist extension, which needs to know if text
	    // is in the first content of a list item.
	    if (
	      index &&
	      event[1].type === 'chunkFlow' &&
	      events[index - 1][1].type === 'listItemPrefix'
	    ) {
	      subevents = event[1]._tokenizer.events;
	      otherIndex = 0;
	      if (
	        otherIndex < subevents.length &&
	        subevents[otherIndex][1].type === 'lineEndingBlank'
	      ) {
	        otherIndex += 2;
	      }
	      if (
	        otherIndex < subevents.length &&
	        subevents[otherIndex][1].type === 'content'
	      ) {
	        while (++otherIndex < subevents.length) {
	          if (subevents[otherIndex][1].type === 'content') {
	            break
	          }
	          if (subevents[otherIndex][1].type === 'chunkText') {
	            subevents[otherIndex][1]._isInFirstContentOfListItem = true;
	            otherIndex++;
	          }
	        }
	      }
	    }

	    // Enter.
	    if (event[0] === 'enter') {
	      if (event[1].contentType) {
	        Object.assign(jumps, subcontent(events, index));
	        index = jumps[index];
	        more = true;
	      }
	    }
	    // Exit.
	    else if (event[1]._container) {
	      otherIndex = index;
	      lineIndex = undefined;
	      while (otherIndex--) {
	        otherEvent = events[otherIndex];
	        if (
	          otherEvent[1].type === 'lineEnding' ||
	          otherEvent[1].type === 'lineEndingBlank'
	        ) {
	          if (otherEvent[0] === 'enter') {
	            if (lineIndex) {
	              events[lineIndex][1].type = 'lineEndingBlank';
	            }
	            otherEvent[1].type = 'lineEnding';
	            lineIndex = otherIndex;
	          }
	        } else {
	          break
	        }
	      }
	      if (lineIndex) {
	        // Fix position.
	        event[1].end = Object.assign({}, events[lineIndex][1].start);

	        // Switch container exit w/ line endings.
	        parameters = events.slice(lineIndex, index);
	        parameters.unshift(event);
	        splice(events, lineIndex, index - lineIndex + 1, parameters);
	      }
	    }
	  }
	  return !more
	}

	/**
	 * Tokenize embedded tokens.
	 *
	 * @param {Array<Event>} events
	 * @param {number} eventIndex
	 * @returns {Record<string, number>}
	 */
	function subcontent(events, eventIndex) {
	  const token = events[eventIndex][1];
	  const context = events[eventIndex][2];
	  let startPosition = eventIndex - 1;
	  /** @type {Array<number>} */
	  const startPositions = [];
	  const tokenizer =
	    token._tokenizer || context.parser[token.contentType](token.start);
	  const childEvents = tokenizer.events;
	  /** @type {Array<[number, number]>} */
	  const jumps = [];
	  /** @type {Record<string, number>} */
	  const gaps = {};
	  /** @type {Array<Chunk>} */
	  let stream;
	  /** @type {Token | undefined} */
	  let previous;
	  let index = -1;
	  /** @type {Token | undefined} */
	  let current = token;
	  let adjust = 0;
	  let start = 0;
	  const breaks = [start];

	  // Loop forward through the linked tokens to pass them in order to the
	  // subtokenizer.
	  while (current) {
	    // Find the position of the event for this token.
	    while (events[++startPosition][1] !== current) {
	      // Empty.
	    }
	    startPositions.push(startPosition);
	    if (!current._tokenizer) {
	      stream = context.sliceStream(current);
	      if (!current.next) {
	        stream.push(null);
	      }
	      if (previous) {
	        tokenizer.defineSkip(current.start);
	      }
	      if (current._isInFirstContentOfListItem) {
	        tokenizer._gfmTasklistFirstContentOfListItem = true;
	      }
	      tokenizer.write(stream);
	      if (current._isInFirstContentOfListItem) {
	        tokenizer._gfmTasklistFirstContentOfListItem = undefined;
	      }
	    }

	    // Unravel the next token.
	    previous = current;
	    current = current.next;
	  }

	  // Now, loop back through all events (and linked tokens), to figure out which
	  // parts belong where.
	  current = token;
	  while (++index < childEvents.length) {
	    if (
	      // Find a void token that includes a break.
	      childEvents[index][0] === 'exit' &&
	      childEvents[index - 1][0] === 'enter' &&
	      childEvents[index][1].type === childEvents[index - 1][1].type &&
	      childEvents[index][1].start.line !== childEvents[index][1].end.line
	    ) {
	      start = index + 1;
	      breaks.push(start);
	      // Help GC.
	      current._tokenizer = undefined;
	      current.previous = undefined;
	      current = current.next;
	    }
	  }

	  // Help GC.
	  tokenizer.events = [];

	  // If there’s one more token (which is the cases for lines that end in an
	  // EOF), that’s perfect: the last point we found starts it.
	  // If there isn’t then make sure any remaining content is added to it.
	  if (current) {
	    // Help GC.
	    current._tokenizer = undefined;
	    current.previous = undefined;
	  } else {
	    breaks.pop();
	  }

	  // Now splice the events from the subtokenizer into the current events,
	  // moving back to front so that splice indices aren’t affected.
	  index = breaks.length;
	  while (index--) {
	    const slice = childEvents.slice(breaks[index], breaks[index + 1]);
	    const start = startPositions.pop();
	    jumps.unshift([start, start + slice.length - 1]);
	    splice(events, start, 2, slice);
	  }
	  index = -1;
	  while (++index < jumps.length) {
	    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];
	    adjust += jumps[index][1] - jumps[index][0] - 1;
	  }
	  return gaps
	}

	/**
	 * @typedef {import('micromark-util-types').Construct} Construct
	 * @typedef {import('micromark-util-types').Resolver} Resolver
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').Token} Token
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */

	/**
	 * No name because it must not be turned off.
	 * @type {Construct}
	 */
	const content = {
	  tokenize: tokenizeContent,
	  resolve: resolveContent
	};

	/** @type {Construct} */
	const continuationConstruct = {
	  tokenize: tokenizeContinuation,
	  partial: true
	};

	/**
	 * Content is transparent: it’s parsed right now. That way, definitions are also
	 * parsed right now: before text in paragraphs (specifically, media) are parsed.
	 *
	 * @type {Resolver}
	 */
	function resolveContent(events) {
	  subtokenize(events);
	  return events
	}

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeContent(effects, ok) {
	  /** @type {Token | undefined} */
	  let previous;
	  return chunkStart

	  /**
	   * Before a content chunk.
	   *
	   * ```markdown
	   * > | abc
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function chunkStart(code) {
	    effects.enter('content');
	    previous = effects.enter('chunkContent', {
	      contentType: 'content'
	    });
	    return chunkInside(code)
	  }

	  /**
	   * In a content chunk.
	   *
	   * ```markdown
	   * > | abc
	   *     ^^^
	   * ```
	   *
	   * @type {State}
	   */
	  function chunkInside(code) {
	    if (code === null) {
	      return contentEnd(code)
	    }

	    // To do: in `markdown-rs`, each line is parsed on its own, and everything
	    // is stitched together resolving.
	    if (markdownLineEnding(code)) {
	      return effects.check(
	        continuationConstruct,
	        contentContinue,
	        contentEnd
	      )(code)
	    }

	    // Data.
	    effects.consume(code);
	    return chunkInside
	  }

	  /**
	   *
	   *
	   * @type {State}
	   */
	  function contentEnd(code) {
	    effects.exit('chunkContent');
	    effects.exit('content');
	    return ok(code)
	  }

	  /**
	   *
	   *
	   * @type {State}
	   */
	  function contentContinue(code) {
	    effects.consume(code);
	    effects.exit('chunkContent');
	    previous.next = effects.enter('chunkContent', {
	      contentType: 'content',
	      previous
	    });
	    previous = previous.next;
	    return chunkInside
	  }
	}

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeContinuation(effects, ok, nok) {
	  const self = this;
	  return startLookahead

	  /**
	   *
	   *
	   * @type {State}
	   */
	  function startLookahead(code) {
	    effects.exit('chunkContent');
	    effects.enter('lineEnding');
	    effects.consume(code);
	    effects.exit('lineEnding');
	    return factorySpace(effects, prefixed, 'linePrefix')
	  }

	  /**
	   *
	   *
	   * @type {State}
	   */
	  function prefixed(code) {
	    if (code === null || markdownLineEnding(code)) {
	      return nok(code)
	    }

	    // Always populated by defaults.

	    const tail = self.events[self.events.length - 1];
	    if (
	      !self.parser.constructs.disable.null.includes('codeIndented') &&
	      tail &&
	      tail[1].type === 'linePrefix' &&
	      tail[2].sliceSerialize(tail[1], true).length >= 4
	    ) {
	      return ok(code)
	    }
	    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Effects} Effects
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').TokenType} TokenType
	 */

	/**
	 * Parse destinations.
	 *
	 * ###### Examples
	 *
	 * ```markdown
	 * <a>
	 * <a\>b>
	 * <a b>
	 * <a)>
	 * a
	 * a\)b
	 * a(b)c
	 * a(b)
	 * ```
	 *
	 * @param {Effects} effects
	 *   Context.
	 * @param {State} ok
	 *   State switched to when successful.
	 * @param {State} nok
	 *   State switched to when unsuccessful.
	 * @param {TokenType} type
	 *   Type for whole (`<a>` or `b`).
	 * @param {TokenType} literalType
	 *   Type when enclosed (`<a>`).
	 * @param {TokenType} literalMarkerType
	 *   Type for enclosing (`<` and `>`).
	 * @param {TokenType} rawType
	 *   Type when not enclosed (`b`).
	 * @param {TokenType} stringType
	 *   Type for the value (`a` or `b`).
	 * @param {number | undefined} [max=Infinity]
	 *   Depth of nested parens (inclusive).
	 * @returns {State}
	 *   Start state.
	 */ // eslint-disable-next-line max-params
	function factoryDestination(
	  effects,
	  ok,
	  nok,
	  type,
	  literalType,
	  literalMarkerType,
	  rawType,
	  stringType,
	  max
	) {
	  const limit = max || Number.POSITIVE_INFINITY;
	  let balance = 0;
	  return start

	  /**
	   * Start of destination.
	   *
	   * ```markdown
	   * > | <aa>
	   *     ^
	   * > | aa
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    if (code === 60) {
	      effects.enter(type);
	      effects.enter(literalType);
	      effects.enter(literalMarkerType);
	      effects.consume(code);
	      effects.exit(literalMarkerType);
	      return enclosedBefore
	    }

	    // ASCII control, space, closing paren.
	    if (code === null || code === 32 || code === 41 || asciiControl(code)) {
	      return nok(code)
	    }
	    effects.enter(type);
	    effects.enter(rawType);
	    effects.enter(stringType);
	    effects.enter('chunkString', {
	      contentType: 'string'
	    });
	    return raw(code)
	  }

	  /**
	   * After `<`, at an enclosed destination.
	   *
	   * ```markdown
	   * > | <aa>
	   *      ^
	   * ```
	   *
	   * @type {State}
	   */
	  function enclosedBefore(code) {
	    if (code === 62) {
	      effects.enter(literalMarkerType);
	      effects.consume(code);
	      effects.exit(literalMarkerType);
	      effects.exit(literalType);
	      effects.exit(type);
	      return ok
	    }
	    effects.enter(stringType);
	    effects.enter('chunkString', {
	      contentType: 'string'
	    });
	    return enclosed(code)
	  }

	  /**
	   * In enclosed destination.
	   *
	   * ```markdown
	   * > | <aa>
	   *      ^
	   * ```
	   *
	   * @type {State}
	   */
	  function enclosed(code) {
	    if (code === 62) {
	      effects.exit('chunkString');
	      effects.exit(stringType);
	      return enclosedBefore(code)
	    }
	    if (code === null || code === 60 || markdownLineEnding(code)) {
	      return nok(code)
	    }
	    effects.consume(code);
	    return code === 92 ? enclosedEscape : enclosed
	  }

	  /**
	   * After `\`, at a special character.
	   *
	   * ```markdown
	   * > | <a\*a>
	   *        ^
	   * ```
	   *
	   * @type {State}
	   */
	  function enclosedEscape(code) {
	    if (code === 60 || code === 62 || code === 92) {
	      effects.consume(code);
	      return enclosed
	    }
	    return enclosed(code)
	  }

	  /**
	   * In raw destination.
	   *
	   * ```markdown
	   * > | aa
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function raw(code) {
	    if (
	      !balance &&
	      (code === null || code === 41 || markdownLineEndingOrSpace(code))
	    ) {
	      effects.exit('chunkString');
	      effects.exit(stringType);
	      effects.exit(rawType);
	      effects.exit(type);
	      return ok(code)
	    }
	    if (balance < limit && code === 40) {
	      effects.consume(code);
	      balance++;
	      return raw
	    }
	    if (code === 41) {
	      effects.consume(code);
	      balance--;
	      return raw
	    }

	    // ASCII control (but *not* `\0`) and space and `(`.
	    // Note: in `markdown-rs`, `\0` exists in codes, in `micromark-js` it
	    // doesn’t.
	    if (code === null || code === 32 || code === 40 || asciiControl(code)) {
	      return nok(code)
	    }
	    effects.consume(code);
	    return code === 92 ? rawEscape : raw
	  }

	  /**
	   * After `\`, at special character.
	   *
	   * ```markdown
	   * > | a\*a
	   *       ^
	   * ```
	   *
	   * @type {State}
	   */
	  function rawEscape(code) {
	    if (code === 40 || code === 41 || code === 92) {
	      effects.consume(code);
	      return raw
	    }
	    return raw(code)
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Effects} Effects
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').TokenType} TokenType
	 */

	/**
	 * Parse labels.
	 *
	 * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.
	 *
	 * ###### Examples
	 *
	 * ```markdown
	 * [a]
	 * [a
	 * b]
	 * [a\]b]
	 * ```
	 *
	 * @this {TokenizeContext}
	 *   Tokenize context.
	 * @param {Effects} effects
	 *   Context.
	 * @param {State} ok
	 *   State switched to when successful.
	 * @param {State} nok
	 *   State switched to when unsuccessful.
	 * @param {TokenType} type
	 *   Type of the whole label (`[a]`).
	 * @param {TokenType} markerType
	 *   Type for the markers (`[` and `]`).
	 * @param {TokenType} stringType
	 *   Type for the identifier (`a`).
	 * @returns {State}
	 *   Start state.
	 */ // eslint-disable-next-line max-params
	function factoryLabel(effects, ok, nok, type, markerType, stringType) {
	  const self = this;
	  let size = 0;
	  /** @type {boolean} */
	  let seen;
	  return start

	  /**
	   * Start of label.
	   *
	   * ```markdown
	   * > | [a]
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    effects.enter(type);
	    effects.enter(markerType);
	    effects.consume(code);
	    effects.exit(markerType);
	    effects.enter(stringType);
	    return atBreak
	  }

	  /**
	   * In label, at something, before something else.
	   *
	   * ```markdown
	   * > | [a]
	   *      ^
	   * ```
	   *
	   * @type {State}
	   */
	  function atBreak(code) {
	    if (
	      size > 999 ||
	      code === null ||
	      code === 91 ||
	      (code === 93 && !seen) ||
	      // To do: remove in the future once we’ve switched from
	      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
	      // which doesn’t need this.
	      // Hidden footnotes hook.
	      /* c8 ignore next 3 */
	      (code === 94 &&
	        !size &&
	        '_hiddenFootnoteSupport' in self.parser.constructs)
	    ) {
	      return nok(code)
	    }
	    if (code === 93) {
	      effects.exit(stringType);
	      effects.enter(markerType);
	      effects.consume(code);
	      effects.exit(markerType);
	      effects.exit(type);
	      return ok
	    }

	    // To do: indent? Link chunks and EOLs together?
	    if (markdownLineEnding(code)) {
	      effects.enter('lineEnding');
	      effects.consume(code);
	      effects.exit('lineEnding');
	      return atBreak
	    }
	    effects.enter('chunkString', {
	      contentType: 'string'
	    });
	    return labelInside(code)
	  }

	  /**
	   * In label, in text.
	   *
	   * ```markdown
	   * > | [a]
	   *      ^
	   * ```
	   *
	   * @type {State}
	   */
	  function labelInside(code) {
	    if (
	      code === null ||
	      code === 91 ||
	      code === 93 ||
	      markdownLineEnding(code) ||
	      size++ > 999
	    ) {
	      effects.exit('chunkString');
	      return atBreak(code)
	    }
	    effects.consume(code);
	    if (!seen) seen = !markdownSpace(code);
	    return code === 92 ? labelEscape : labelInside
	  }

	  /**
	   * After `\`, at a special character.
	   *
	   * ```markdown
	   * > | [a\*a]
	   *        ^
	   * ```
	   *
	   * @type {State}
	   */
	  function labelEscape(code) {
	    if (code === 91 || code === 92 || code === 93) {
	      effects.consume(code);
	      size++;
	      return labelInside
	    }
	    return labelInside(code)
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Code} Code
	 * @typedef {import('micromark-util-types').Effects} Effects
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').TokenType} TokenType
	 */

	/**
	 * Parse titles.
	 *
	 * ###### Examples
	 *
	 * ```markdown
	 * "a"
	 * 'b'
	 * (c)
	 * "a
	 * b"
	 * 'a
	 *     b'
	 * (a\)b)
	 * ```
	 *
	 * @param {Effects} effects
	 *   Context.
	 * @param {State} ok
	 *   State switched to when successful.
	 * @param {State} nok
	 *   State switched to when unsuccessful.
	 * @param {TokenType} type
	 *   Type of the whole title (`"a"`, `'b'`, `(c)`).
	 * @param {TokenType} markerType
	 *   Type for the markers (`"`, `'`, `(`, and `)`).
	 * @param {TokenType} stringType
	 *   Type for the value (`a`).
	 * @returns {State}
	 *   Start state.
	 */ // eslint-disable-next-line max-params
	function factoryTitle(effects, ok, nok, type, markerType, stringType) {
	  /** @type {NonNullable<Code>} */
	  let marker;
	  return start

	  /**
	   * Start of title.
	   *
	   * ```markdown
	   * > | "a"
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    if (code === 34 || code === 39 || code === 40) {
	      effects.enter(type);
	      effects.enter(markerType);
	      effects.consume(code);
	      effects.exit(markerType);
	      marker = code === 40 ? 41 : code;
	      return begin
	    }
	    return nok(code)
	  }

	  /**
	   * After opening marker.
	   *
	   * This is also used at the closing marker.
	   *
	   * ```markdown
	   * > | "a"
	   *      ^
	   * ```
	   *
	   * @type {State}
	   */
	  function begin(code) {
	    if (code === marker) {
	      effects.enter(markerType);
	      effects.consume(code);
	      effects.exit(markerType);
	      effects.exit(type);
	      return ok
	    }
	    effects.enter(stringType);
	    return atBreak(code)
	  }

	  /**
	   * At something, before something else.
	   *
	   * ```markdown
	   * > | "a"
	   *      ^
	   * ```
	   *
	   * @type {State}
	   */
	  function atBreak(code) {
	    if (code === marker) {
	      effects.exit(stringType);
	      return begin(marker)
	    }
	    if (code === null) {
	      return nok(code)
	    }

	    // Note: blank lines can’t exist in content.
	    if (markdownLineEnding(code)) {
	      // To do: use `space_or_tab_eol_with_options`, connect.
	      effects.enter('lineEnding');
	      effects.consume(code);
	      effects.exit('lineEnding');
	      return factorySpace(effects, atBreak, 'linePrefix')
	    }
	    effects.enter('chunkString', {
	      contentType: 'string'
	    });
	    return inside(code)
	  }

	  /**
	   *
	   *
	   * @type {State}
	   */
	  function inside(code) {
	    if (code === marker || code === null || markdownLineEnding(code)) {
	      effects.exit('chunkString');
	      return atBreak(code)
	    }
	    effects.consume(code);
	    return code === 92 ? escape : inside
	  }

	  /**
	   * After `\`, at a special character.
	   *
	   * ```markdown
	   * > | "a\*b"
	   *      ^
	   * ```
	   *
	   * @type {State}
	   */
	  function escape(code) {
	    if (code === marker || code === 92) {
	      effects.consume(code);
	      return inside
	    }
	    return inside(code)
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Effects} Effects
	 * @typedef {import('micromark-util-types').State} State
	 */

	/**
	 * Parse spaces and tabs.
	 *
	 * There is no `nok` parameter:
	 *
	 * *   line endings or spaces in markdown are often optional, in which case this
	 *     factory can be used and `ok` will be switched to whether spaces were found
	 *     or not
	 * *   one line ending or space can be detected with
	 *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`
	 *
	 * @param {Effects} effects
	 *   Context.
	 * @param {State} ok
	 *   State switched to when successful.
	 * @returns {State}
	 *   Start state.
	 */
	function factoryWhitespace(effects, ok) {
	  /** @type {boolean} */
	  let seen;
	  return start

	  /** @type {State} */
	  function start(code) {
	    if (markdownLineEnding(code)) {
	      effects.enter('lineEnding');
	      effects.consume(code);
	      effects.exit('lineEnding');
	      seen = true;
	      return start
	    }
	    if (markdownSpace(code)) {
	      return factorySpace(
	        effects,
	        start,
	        seen ? 'linePrefix' : 'lineSuffix'
	      )(code)
	    }
	    return ok(code)
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Construct} Construct
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */

	/** @type {Construct} */
	const definition$1 = {
	  name: 'definition',
	  tokenize: tokenizeDefinition
	};

	/** @type {Construct} */
	const titleBefore = {
	  tokenize: tokenizeTitleBefore,
	  partial: true
	};

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeDefinition(effects, ok, nok) {
	  const self = this;
	  /** @type {string} */
	  let identifier;
	  return start

	  /**
	   * At start of a definition.
	   *
	   * ```markdown
	   * > | [a]: b "c"
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    // Do not interrupt paragraphs (but do follow definitions).
	    // To do: do `interrupt` the way `markdown-rs` does.
	    // To do: parse whitespace the way `markdown-rs` does.
	    effects.enter('definition');
	    return before(code)
	  }

	  /**
	   * After optional whitespace, at `[`.
	   *
	   * ```markdown
	   * > | [a]: b "c"
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function before(code) {
	    // To do: parse whitespace the way `markdown-rs` does.

	    return factoryLabel.call(
	      self,
	      effects,
	      labelAfter,
	      // Note: we don’t need to reset the way `markdown-rs` does.
	      nok,
	      'definitionLabel',
	      'definitionLabelMarker',
	      'definitionLabelString'
	    )(code)
	  }

	  /**
	   * After label.
	   *
	   * ```markdown
	   * > | [a]: b "c"
	   *        ^
	   * ```
	   *
	   * @type {State}
	   */
	  function labelAfter(code) {
	    identifier = normalizeIdentifier(
	      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)
	    );
	    if (code === 58) {
	      effects.enter('definitionMarker');
	      effects.consume(code);
	      effects.exit('definitionMarker');
	      return markerAfter
	    }
	    return nok(code)
	  }

	  /**
	   * After marker.
	   *
	   * ```markdown
	   * > | [a]: b "c"
	   *         ^
	   * ```
	   *
	   * @type {State}
	   */
	  function markerAfter(code) {
	    // Note: whitespace is optional.
	    return markdownLineEndingOrSpace(code)
	      ? factoryWhitespace(effects, destinationBefore)(code)
	      : destinationBefore(code)
	  }

	  /**
	   * Before destination.
	   *
	   * ```markdown
	   * > | [a]: b "c"
	   *          ^
	   * ```
	   *
	   * @type {State}
	   */
	  function destinationBefore(code) {
	    return factoryDestination(
	      effects,
	      destinationAfter,
	      // Note: we don’t need to reset the way `markdown-rs` does.
	      nok,
	      'definitionDestination',
	      'definitionDestinationLiteral',
	      'definitionDestinationLiteralMarker',
	      'definitionDestinationRaw',
	      'definitionDestinationString'
	    )(code)
	  }

	  /**
	   * After destination.
	   *
	   * ```markdown
	   * > | [a]: b "c"
	   *           ^
	   * ```
	   *
	   * @type {State}
	   */
	  function destinationAfter(code) {
	    return effects.attempt(titleBefore, after, after)(code)
	  }

	  /**
	   * After definition.
	   *
	   * ```markdown
	   * > | [a]: b
	   *           ^
	   * > | [a]: b "c"
	   *               ^
	   * ```
	   *
	   * @type {State}
	   */
	  function after(code) {
	    return markdownSpace(code)
	      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)
	      : afterWhitespace(code)
	  }

	  /**
	   * After definition, after optional whitespace.
	   *
	   * ```markdown
	   * > | [a]: b
	   *           ^
	   * > | [a]: b "c"
	   *               ^
	   * ```
	   *
	   * @type {State}
	   */
	  function afterWhitespace(code) {
	    if (code === null || markdownLineEnding(code)) {
	      effects.exit('definition');

	      // Note: we don’t care about uniqueness.
	      // It’s likely that that doesn’t happen very frequently.
	      // It is more likely that it wastes precious time.
	      self.parser.defined.push(identifier);

	      // To do: `markdown-rs` interrupt.
	      // // You’d be interrupting.
	      // tokenizer.interrupt = true
	      return ok(code)
	    }
	    return nok(code)
	  }
	}

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeTitleBefore(effects, ok, nok) {
	  return titleBefore

	  /**
	   * After destination, at whitespace.
	   *
	   * ```markdown
	   * > | [a]: b
	   *           ^
	   * > | [a]: b "c"
	   *           ^
	   * ```
	   *
	   * @type {State}
	   */
	  function titleBefore(code) {
	    return markdownLineEndingOrSpace(code)
	      ? factoryWhitespace(effects, beforeMarker)(code)
	      : nok(code)
	  }

	  /**
	   * At title.
	   *
	   * ```markdown
	   *   | [a]: b
	   * > | "c"
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function beforeMarker(code) {
	    return factoryTitle(
	      effects,
	      titleAfter,
	      nok,
	      'definitionTitle',
	      'definitionTitleMarker',
	      'definitionTitleString'
	    )(code)
	  }

	  /**
	   * After title.
	   *
	   * ```markdown
	   * > | [a]: b "c"
	   *               ^
	   * ```
	   *
	   * @type {State}
	   */
	  function titleAfter(code) {
	    return markdownSpace(code)
	      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)
	      : titleAfterOptionalWhitespace(code)
	  }

	  /**
	   * After title, after optional whitespace.
	   *
	   * ```markdown
	   * > | [a]: b "c"
	   *               ^
	   * ```
	   *
	   * @type {State}
	   */
	  function titleAfterOptionalWhitespace(code) {
	    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Construct} Construct
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */

	/** @type {Construct} */
	const hardBreakEscape = {
	  name: 'hardBreakEscape',
	  tokenize: tokenizeHardBreakEscape
	};

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeHardBreakEscape(effects, ok, nok) {
	  return start

	  /**
	   * Start of a hard break (escape).
	   *
	   * ```markdown
	   * > | a\
	   *      ^
	   *   | b
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    effects.enter('hardBreakEscape');
	    effects.consume(code);
	    return after
	  }

	  /**
	   * After `\`, at eol.
	   *
	   * ```markdown
	   * > | a\
	   *       ^
	   *   | b
	   * ```
	   *
	   *  @type {State}
	   */
	  function after(code) {
	    if (markdownLineEnding(code)) {
	      effects.exit('hardBreakEscape');
	      return ok(code)
	    }
	    return nok(code)
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Construct} Construct
	 * @typedef {import('micromark-util-types').Resolver} Resolver
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').Token} Token
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */

	/** @type {Construct} */
	const headingAtx = {
	  name: 'headingAtx',
	  tokenize: tokenizeHeadingAtx,
	  resolve: resolveHeadingAtx
	};

	/** @type {Resolver} */
	function resolveHeadingAtx(events, context) {
	  let contentEnd = events.length - 2;
	  let contentStart = 3;
	  /** @type {Token} */
	  let content;
	  /** @type {Token} */
	  let text;

	  // Prefix whitespace, part of the opening.
	  if (events[contentStart][1].type === 'whitespace') {
	    contentStart += 2;
	  }

	  // Suffix whitespace, part of the closing.
	  if (
	    contentEnd - 2 > contentStart &&
	    events[contentEnd][1].type === 'whitespace'
	  ) {
	    contentEnd -= 2;
	  }
	  if (
	    events[contentEnd][1].type === 'atxHeadingSequence' &&
	    (contentStart === contentEnd - 1 ||
	      (contentEnd - 4 > contentStart &&
	        events[contentEnd - 2][1].type === 'whitespace'))
	  ) {
	    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
	  }
	  if (contentEnd > contentStart) {
	    content = {
	      type: 'atxHeadingText',
	      start: events[contentStart][1].start,
	      end: events[contentEnd][1].end
	    };
	    text = {
	      type: 'chunkText',
	      start: events[contentStart][1].start,
	      end: events[contentEnd][1].end,
	      contentType: 'text'
	    };
	    splice(events, contentStart, contentEnd - contentStart + 1, [
	      ['enter', content, context],
	      ['enter', text, context],
	      ['exit', text, context],
	      ['exit', content, context]
	    ]);
	  }
	  return events
	}

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeHeadingAtx(effects, ok, nok) {
	  let size = 0;
	  return start

	  /**
	   * Start of a heading (atx).
	   *
	   * ```markdown
	   * > | ## aa
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    // To do: parse indent like `markdown-rs`.
	    effects.enter('atxHeading');
	    return before(code)
	  }

	  /**
	   * After optional whitespace, at `#`.
	   *
	   * ```markdown
	   * > | ## aa
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function before(code) {
	    effects.enter('atxHeadingSequence');
	    return sequenceOpen(code)
	  }

	  /**
	   * In opening sequence.
	   *
	   * ```markdown
	   * > | ## aa
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function sequenceOpen(code) {
	    if (code === 35 && size++ < 6) {
	      effects.consume(code);
	      return sequenceOpen
	    }

	    // Always at least one `#`.
	    if (code === null || markdownLineEndingOrSpace(code)) {
	      effects.exit('atxHeadingSequence');
	      return atBreak(code)
	    }
	    return nok(code)
	  }

	  /**
	   * After something, before something else.
	   *
	   * ```markdown
	   * > | ## aa
	   *       ^
	   * ```
	   *
	   * @type {State}
	   */
	  function atBreak(code) {
	    if (code === 35) {
	      effects.enter('atxHeadingSequence');
	      return sequenceFurther(code)
	    }
	    if (code === null || markdownLineEnding(code)) {
	      effects.exit('atxHeading');
	      // To do: interrupt like `markdown-rs`.
	      // // Feel free to interrupt.
	      // tokenizer.interrupt = false
	      return ok(code)
	    }
	    if (markdownSpace(code)) {
	      return factorySpace(effects, atBreak, 'whitespace')(code)
	    }

	    // To do: generate `data` tokens, add the `text` token later.
	    // Needs edit map, see: `markdown.rs`.
	    effects.enter('atxHeadingText');
	    return data(code)
	  }

	  /**
	   * In further sequence (after whitespace).
	   *
	   * Could be normal “visible” hashes in the heading or a final sequence.
	   *
	   * ```markdown
	   * > | ## aa ##
	   *           ^
	   * ```
	   *
	   * @type {State}
	   */
	  function sequenceFurther(code) {
	    if (code === 35) {
	      effects.consume(code);
	      return sequenceFurther
	    }
	    effects.exit('atxHeadingSequence');
	    return atBreak(code)
	  }

	  /**
	   * In text.
	   *
	   * ```markdown
	   * > | ## aa
	   *        ^
	   * ```
	   *
	   * @type {State}
	   */
	  function data(code) {
	    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {
	      effects.exit('atxHeadingText');
	      return atBreak(code)
	    }
	    effects.consume(code);
	    return data
	  }
	}

	/**
	 * List of lowercase HTML “block” tag names.
	 *
	 * The list, when parsing HTML (flow), results in more relaxed rules (condition
	 * 6).
	 * Because they are known blocks, the HTML-like syntax doesn’t have to be
	 * strictly parsed.
	 * For tag names not in this list, a more strict algorithm (condition 7) is used
	 * to detect whether the HTML-like syntax is seen as HTML (flow) or not.
	 *
	 * This is copied from:
	 * <https://spec.commonmark.org/0.30/#html-blocks>.
	 *
	 * > 👉 **Note**: `search` was added in `CommonMark@0.31`.
	 */
	const htmlBlockNames = [
	  'address',
	  'article',
	  'aside',
	  'base',
	  'basefont',
	  'blockquote',
	  'body',
	  'caption',
	  'center',
	  'col',
	  'colgroup',
	  'dd',
	  'details',
	  'dialog',
	  'dir',
	  'div',
	  'dl',
	  'dt',
	  'fieldset',
	  'figcaption',
	  'figure',
	  'footer',
	  'form',
	  'frame',
	  'frameset',
	  'h1',
	  'h2',
	  'h3',
	  'h4',
	  'h5',
	  'h6',
	  'head',
	  'header',
	  'hr',
	  'html',
	  'iframe',
	  'legend',
	  'li',
	  'link',
	  'main',
	  'menu',
	  'menuitem',
	  'nav',
	  'noframes',
	  'ol',
	  'optgroup',
	  'option',
	  'p',
	  'param',
	  'search',
	  'section',
	  'summary',
	  'table',
	  'tbody',
	  'td',
	  'tfoot',
	  'th',
	  'thead',
	  'title',
	  'tr',
	  'track',
	  'ul'
	];

	/**
	 * List of lowercase HTML “raw” tag names.
	 *
	 * The list, when parsing HTML (flow), results in HTML that can include lines
	 * without exiting, until a closing tag also in this list is found (condition
	 * 1).
	 *
	 * This module is copied from:
	 * <https://spec.commonmark.org/0.30/#html-blocks>.
	 *
	 * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.
	 */
	const htmlRawNames = ['pre', 'script', 'style', 'textarea'];

	/**
	 * @typedef {import('micromark-util-types').Code} Code
	 * @typedef {import('micromark-util-types').Construct} Construct
	 * @typedef {import('micromark-util-types').Resolver} Resolver
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */


	/** @type {Construct} */
	const htmlFlow = {
	  name: 'htmlFlow',
	  tokenize: tokenizeHtmlFlow,
	  resolveTo: resolveToHtmlFlow,
	  concrete: true
	};

	/** @type {Construct} */
	const blankLineBefore = {
	  tokenize: tokenizeBlankLineBefore,
	  partial: true
	};
	const nonLazyContinuationStart = {
	  tokenize: tokenizeNonLazyContinuationStart,
	  partial: true
	};

	/** @type {Resolver} */
	function resolveToHtmlFlow(events) {
	  let index = events.length;
	  while (index--) {
	    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {
	      break
	    }
	  }
	  if (index > 1 && events[index - 2][1].type === 'linePrefix') {
	    // Add the prefix start to the HTML token.
	    events[index][1].start = events[index - 2][1].start;
	    // Add the prefix start to the HTML line token.
	    events[index + 1][1].start = events[index - 2][1].start;
	    // Remove the line prefix.
	    events.splice(index - 2, 2);
	  }
	  return events
	}

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeHtmlFlow(effects, ok, nok) {
	  const self = this;
	  /** @type {number} */
	  let marker;
	  /** @type {boolean} */
	  let closingTag;
	  /** @type {string} */
	  let buffer;
	  /** @type {number} */
	  let index;
	  /** @type {Code} */
	  let markerB;
	  return start

	  /**
	   * Start of HTML (flow).
	   *
	   * ```markdown
	   * > | <x />
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    // To do: parse indent like `markdown-rs`.
	    return before(code)
	  }

	  /**
	   * At `<`, after optional whitespace.
	   *
	   * ```markdown
	   * > | <x />
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function before(code) {
	    effects.enter('htmlFlow');
	    effects.enter('htmlFlowData');
	    effects.consume(code);
	    return open
	  }

	  /**
	   * After `<`, at tag name or other stuff.
	   *
	   * ```markdown
	   * > | <x />
	   *      ^
	   * > | <!doctype>
	   *      ^
	   * > | <!--xxx-->
	   *      ^
	   * ```
	   *
	   * @type {State}
	   */
	  function open(code) {
	    if (code === 33) {
	      effects.consume(code);
	      return declarationOpen
	    }
	    if (code === 47) {
	      effects.consume(code);
	      closingTag = true;
	      return tagCloseStart
	    }
	    if (code === 63) {
	      effects.consume(code);
	      marker = 3;
	      // To do:
	      // tokenizer.concrete = true
	      // To do: use `markdown-rs` style interrupt.
	      // While we’re in an instruction instead of a declaration, we’re on a `?`
	      // right now, so we do need to search for `>`, similar to declarations.
	      return self.interrupt ? ok : continuationDeclarationInside
	    }

	    // ASCII alphabetical.
	    if (asciiAlpha(code)) {
	      effects.consume(code);
	      // @ts-expect-error: not null.
	      buffer = String.fromCharCode(code);
	      return tagName
	    }
	    return nok(code)
	  }

	  /**
	   * After `<!`, at declaration, comment, or CDATA.
	   *
	   * ```markdown
	   * > | <!doctype>
	   *       ^
	   * > | <!--xxx-->
	   *       ^
	   * > | <![CDATA[>&<]]>
	   *       ^
	   * ```
	   *
	   * @type {State}
	   */
	  function declarationOpen(code) {
	    if (code === 45) {
	      effects.consume(code);
	      marker = 2;
	      return commentOpenInside
	    }
	    if (code === 91) {
	      effects.consume(code);
	      marker = 5;
	      index = 0;
	      return cdataOpenInside
	    }

	    // ASCII alphabetical.
	    if (asciiAlpha(code)) {
	      effects.consume(code);
	      marker = 4;
	      // // Do not form containers.
	      // tokenizer.concrete = true
	      return self.interrupt ? ok : continuationDeclarationInside
	    }
	    return nok(code)
	  }

	  /**
	   * After `<!-`, inside a comment, at another `-`.
	   *
	   * ```markdown
	   * > | <!--xxx-->
	   *        ^
	   * ```
	   *
	   * @type {State}
	   */
	  function commentOpenInside(code) {
	    if (code === 45) {
	      effects.consume(code);
	      // // Do not form containers.
	      // tokenizer.concrete = true
	      return self.interrupt ? ok : continuationDeclarationInside
	    }
	    return nok(code)
	  }

	  /**
	   * After `<![`, inside CDATA, expecting `CDATA[`.
	   *
	   * ```markdown
	   * > | <![CDATA[>&<]]>
	   *        ^^^^^^
	   * ```
	   *
	   * @type {State}
	   */
	  function cdataOpenInside(code) {
	    const value = 'CDATA[';
	    if (code === value.charCodeAt(index++)) {
	      effects.consume(code);
	      if (index === value.length) {
	        // // Do not form containers.
	        // tokenizer.concrete = true
	        return self.interrupt ? ok : continuation
	      }
	      return cdataOpenInside
	    }
	    return nok(code)
	  }

	  /**
	   * After `</`, in closing tag, at tag name.
	   *
	   * ```markdown
	   * > | </x>
	   *       ^
	   * ```
	   *
	   * @type {State}
	   */
	  function tagCloseStart(code) {
	    if (asciiAlpha(code)) {
	      effects.consume(code);
	      // @ts-expect-error: not null.
	      buffer = String.fromCharCode(code);
	      return tagName
	    }
	    return nok(code)
	  }

	  /**
	   * In tag name.
	   *
	   * ```markdown
	   * > | <ab>
	   *      ^^
	   * > | </ab>
	   *       ^^
	   * ```
	   *
	   * @type {State}
	   */
	  function tagName(code) {
	    if (
	      code === null ||
	      code === 47 ||
	      code === 62 ||
	      markdownLineEndingOrSpace(code)
	    ) {
	      const slash = code === 47;
	      const name = buffer.toLowerCase();
	      if (!slash && !closingTag && htmlRawNames.includes(name)) {
	        marker = 1;
	        // // Do not form containers.
	        // tokenizer.concrete = true
	        return self.interrupt ? ok(code) : continuation(code)
	      }
	      if (htmlBlockNames.includes(buffer.toLowerCase())) {
	        marker = 6;
	        if (slash) {
	          effects.consume(code);
	          return basicSelfClosing
	        }

	        // // Do not form containers.
	        // tokenizer.concrete = true
	        return self.interrupt ? ok(code) : continuation(code)
	      }
	      marker = 7;
	      // Do not support complete HTML when interrupting.
	      return self.interrupt && !self.parser.lazy[self.now().line]
	        ? nok(code)
	        : closingTag
	        ? completeClosingTagAfter(code)
	        : completeAttributeNameBefore(code)
	    }

	    // ASCII alphanumerical and `-`.
	    if (code === 45 || asciiAlphanumeric(code)) {
	      effects.consume(code);
	      buffer += String.fromCharCode(code);
	      return tagName
	    }
	    return nok(code)
	  }

	  /**
	   * After closing slash of a basic tag name.
	   *
	   * ```markdown
	   * > | <div/>
	   *          ^
	   * ```
	   *
	   * @type {State}
	   */
	  function basicSelfClosing(code) {
	    if (code === 62) {
	      effects.consume(code);
	      // // Do not form containers.
	      // tokenizer.concrete = true
	      return self.interrupt ? ok : continuation
	    }
	    return nok(code)
	  }

	  /**
	   * After closing slash of a complete tag name.
	   *
	   * ```markdown
	   * > | <x/>
	   *        ^
	   * ```
	   *
	   * @type {State}
	   */
	  function completeClosingTagAfter(code) {
	    if (markdownSpace(code)) {
	      effects.consume(code);
	      return completeClosingTagAfter
	    }
	    return completeEnd(code)
	  }

	  /**
	   * At an attribute name.
	   *
	   * At first, this state is used after a complete tag name, after whitespace,
	   * where it expects optional attributes or the end of the tag.
	   * It is also reused after attributes, when expecting more optional
	   * attributes.
	   *
	   * ```markdown
	   * > | <a />
	   *        ^
	   * > | <a :b>
	   *        ^
	   * > | <a _b>
	   *        ^
	   * > | <a b>
	   *        ^
	   * > | <a >
	   *        ^
	   * ```
	   *
	   * @type {State}
	   */
	  function completeAttributeNameBefore(code) {
	    if (code === 47) {
	      effects.consume(code);
	      return completeEnd
	    }

	    // ASCII alphanumerical and `:` and `_`.
	    if (code === 58 || code === 95 || asciiAlpha(code)) {
	      effects.consume(code);
	      return completeAttributeName
	    }
	    if (markdownSpace(code)) {
	      effects.consume(code);
	      return completeAttributeNameBefore
	    }
	    return completeEnd(code)
	  }

	  /**
	   * In attribute name.
	   *
	   * ```markdown
	   * > | <a :b>
	   *         ^
	   * > | <a _b>
	   *         ^
	   * > | <a b>
	   *         ^
	   * ```
	   *
	   * @type {State}
	   */
	  function completeAttributeName(code) {
	    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.
	    if (
	      code === 45 ||
	      code === 46 ||
	      code === 58 ||
	      code === 95 ||
	      asciiAlphanumeric(code)
	    ) {
	      effects.consume(code);
	      return completeAttributeName
	    }
	    return completeAttributeNameAfter(code)
	  }

	  /**
	   * After attribute name, at an optional initializer, the end of the tag, or
	   * whitespace.
	   *
	   * ```markdown
	   * > | <a b>
	   *         ^
	   * > | <a b=c>
	   *         ^
	   * ```
	   *
	   * @type {State}
	   */
	  function completeAttributeNameAfter(code) {
	    if (code === 61) {
	      effects.consume(code);
	      return completeAttributeValueBefore
	    }
	    if (markdownSpace(code)) {
	      effects.consume(code);
	      return completeAttributeNameAfter
	    }
	    return completeAttributeNameBefore(code)
	  }

	  /**
	   * Before unquoted, double quoted, or single quoted attribute value, allowing
	   * whitespace.
	   *
	   * ```markdown
	   * > | <a b=c>
	   *          ^
	   * > | <a b="c">
	   *          ^
	   * ```
	   *
	   * @type {State}
	   */
	  function completeAttributeValueBefore(code) {
	    if (
	      code === null ||
	      code === 60 ||
	      code === 61 ||
	      code === 62 ||
	      code === 96
	    ) {
	      return nok(code)
	    }
	    if (code === 34 || code === 39) {
	      effects.consume(code);
	      markerB = code;
	      return completeAttributeValueQuoted
	    }
	    if (markdownSpace(code)) {
	      effects.consume(code);
	      return completeAttributeValueBefore
	    }
	    return completeAttributeValueUnquoted(code)
	  }

	  /**
	   * In double or single quoted attribute value.
	   *
	   * ```markdown
	   * > | <a b="c">
	   *           ^
	   * > | <a b='c'>
	   *           ^
	   * ```
	   *
	   * @type {State}
	   */
	  function completeAttributeValueQuoted(code) {
	    if (code === markerB) {
	      effects.consume(code);
	      markerB = null;
	      return completeAttributeValueQuotedAfter
	    }
	    if (code === null || markdownLineEnding(code)) {
	      return nok(code)
	    }
	    effects.consume(code);
	    return completeAttributeValueQuoted
	  }

	  /**
	   * In unquoted attribute value.
	   *
	   * ```markdown
	   * > | <a b=c>
	   *          ^
	   * ```
	   *
	   * @type {State}
	   */
	  function completeAttributeValueUnquoted(code) {
	    if (
	      code === null ||
	      code === 34 ||
	      code === 39 ||
	      code === 47 ||
	      code === 60 ||
	      code === 61 ||
	      code === 62 ||
	      code === 96 ||
	      markdownLineEndingOrSpace(code)
	    ) {
	      return completeAttributeNameAfter(code)
	    }
	    effects.consume(code);
	    return completeAttributeValueUnquoted
	  }

	  /**
	   * After double or single quoted attribute value, before whitespace or the
	   * end of the tag.
	   *
	   * ```markdown
	   * > | <a b="c">
	   *            ^
	   * ```
	   *
	   * @type {State}
	   */
	  function completeAttributeValueQuotedAfter(code) {
	    if (code === 47 || code === 62 || markdownSpace(code)) {
	      return completeAttributeNameBefore(code)
	    }
	    return nok(code)
	  }

	  /**
	   * In certain circumstances of a complete tag where only an `>` is allowed.
	   *
	   * ```markdown
	   * > | <a b="c">
	   *             ^
	   * ```
	   *
	   * @type {State}
	   */
	  function completeEnd(code) {
	    if (code === 62) {
	      effects.consume(code);
	      return completeAfter
	    }
	    return nok(code)
	  }

	  /**
	   * After `>` in a complete tag.
	   *
	   * ```markdown
	   * > | <x>
	   *        ^
	   * ```
	   *
	   * @type {State}
	   */
	  function completeAfter(code) {
	    if (code === null || markdownLineEnding(code)) {
	      // // Do not form containers.
	      // tokenizer.concrete = true
	      return continuation(code)
	    }
	    if (markdownSpace(code)) {
	      effects.consume(code);
	      return completeAfter
	    }
	    return nok(code)
	  }

	  /**
	   * In continuation of any HTML kind.
	   *
	   * ```markdown
	   * > | <!--xxx-->
	   *          ^
	   * ```
	   *
	   * @type {State}
	   */
	  function continuation(code) {
	    if (code === 45 && marker === 2) {
	      effects.consume(code);
	      return continuationCommentInside
	    }
	    if (code === 60 && marker === 1) {
	      effects.consume(code);
	      return continuationRawTagOpen
	    }
	    if (code === 62 && marker === 4) {
	      effects.consume(code);
	      return continuationClose
	    }
	    if (code === 63 && marker === 3) {
	      effects.consume(code);
	      return continuationDeclarationInside
	    }
	    if (code === 93 && marker === 5) {
	      effects.consume(code);
	      return continuationCdataInside
	    }
	    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {
	      effects.exit('htmlFlowData');
	      return effects.check(
	        blankLineBefore,
	        continuationAfter,
	        continuationStart
	      )(code)
	    }
	    if (code === null || markdownLineEnding(code)) {
	      effects.exit('htmlFlowData');
	      return continuationStart(code)
	    }
	    effects.consume(code);
	    return continuation
	  }

	  /**
	   * In continuation, at eol.
	   *
	   * ```markdown
	   * > | <x>
	   *        ^
	   *   | asd
	   * ```
	   *
	   * @type {State}
	   */
	  function continuationStart(code) {
	    return effects.check(
	      nonLazyContinuationStart,
	      continuationStartNonLazy,
	      continuationAfter
	    )(code)
	  }

	  /**
	   * In continuation, at eol, before non-lazy content.
	   *
	   * ```markdown
	   * > | <x>
	   *        ^
	   *   | asd
	   * ```
	   *
	   * @type {State}
	   */
	  function continuationStartNonLazy(code) {
	    effects.enter('lineEnding');
	    effects.consume(code);
	    effects.exit('lineEnding');
	    return continuationBefore
	  }

	  /**
	   * In continuation, before non-lazy content.
	   *
	   * ```markdown
	   *   | <x>
	   * > | asd
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function continuationBefore(code) {
	    if (code === null || markdownLineEnding(code)) {
	      return continuationStart(code)
	    }
	    effects.enter('htmlFlowData');
	    return continuation(code)
	  }

	  /**
	   * In comment continuation, after one `-`, expecting another.
	   *
	   * ```markdown
	   * > | <!--xxx-->
	   *             ^
	   * ```
	   *
	   * @type {State}
	   */
	  function continuationCommentInside(code) {
	    if (code === 45) {
	      effects.consume(code);
	      return continuationDeclarationInside
	    }
	    return continuation(code)
	  }

	  /**
	   * In raw continuation, after `<`, at `/`.
	   *
	   * ```markdown
	   * > | <script>console.log(1)</script>
	   *                            ^
	   * ```
	   *
	   * @type {State}
	   */
	  function continuationRawTagOpen(code) {
	    if (code === 47) {
	      effects.consume(code);
	      buffer = '';
	      return continuationRawEndTag
	    }
	    return continuation(code)
	  }

	  /**
	   * In raw continuation, after `</`, in a raw tag name.
	   *
	   * ```markdown
	   * > | <script>console.log(1)</script>
	   *                             ^^^^^^
	   * ```
	   *
	   * @type {State}
	   */
	  function continuationRawEndTag(code) {
	    if (code === 62) {
	      const name = buffer.toLowerCase();
	      if (htmlRawNames.includes(name)) {
	        effects.consume(code);
	        return continuationClose
	      }
	      return continuation(code)
	    }
	    if (asciiAlpha(code) && buffer.length < 8) {
	      effects.consume(code);
	      // @ts-expect-error: not null.
	      buffer += String.fromCharCode(code);
	      return continuationRawEndTag
	    }
	    return continuation(code)
	  }

	  /**
	   * In cdata continuation, after `]`, expecting `]>`.
	   *
	   * ```markdown
	   * > | <![CDATA[>&<]]>
	   *                  ^
	   * ```
	   *
	   * @type {State}
	   */
	  function continuationCdataInside(code) {
	    if (code === 93) {
	      effects.consume(code);
	      return continuationDeclarationInside
	    }
	    return continuation(code)
	  }

	  /**
	   * In declaration or instruction continuation, at `>`.
	   *
	   * ```markdown
	   * > | <!-->
	   *         ^
	   * > | <?>
	   *       ^
	   * > | <!q>
	   *        ^
	   * > | <!--ab-->
	   *             ^
	   * > | <![CDATA[>&<]]>
	   *                   ^
	   * ```
	   *
	   * @type {State}
	   */
	  function continuationDeclarationInside(code) {
	    if (code === 62) {
	      effects.consume(code);
	      return continuationClose
	    }

	    // More dashes.
	    if (code === 45 && marker === 2) {
	      effects.consume(code);
	      return continuationDeclarationInside
	    }
	    return continuation(code)
	  }

	  /**
	   * In closed continuation: everything we get until the eol/eof is part of it.
	   *
	   * ```markdown
	   * > | <!doctype>
	   *               ^
	   * ```
	   *
	   * @type {State}
	   */
	  function continuationClose(code) {
	    if (code === null || markdownLineEnding(code)) {
	      effects.exit('htmlFlowData');
	      return continuationAfter(code)
	    }
	    effects.consume(code);
	    return continuationClose
	  }

	  /**
	   * Done.
	   *
	   * ```markdown
	   * > | <!doctype>
	   *               ^
	   * ```
	   *
	   * @type {State}
	   */
	  function continuationAfter(code) {
	    effects.exit('htmlFlow');
	    // // Feel free to interrupt.
	    // tokenizer.interrupt = false
	    // // No longer concrete.
	    // tokenizer.concrete = false
	    return ok(code)
	  }
	}

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeNonLazyContinuationStart(effects, ok, nok) {
	  const self = this;
	  return start

	  /**
	   * At eol, before continuation.
	   *
	   * ```markdown
	   * > | * ```js
	   *            ^
	   *   | b
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    if (markdownLineEnding(code)) {
	      effects.enter('lineEnding');
	      effects.consume(code);
	      effects.exit('lineEnding');
	      return after
	    }
	    return nok(code)
	  }

	  /**
	   * A continuation.
	   *
	   * ```markdown
	   *   | * ```js
	   * > | b
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function after(code) {
	    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)
	  }
	}

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeBlankLineBefore(effects, ok, nok) {
	  return start

	  /**
	   * Before eol, expecting blank line.
	   *
	   * ```markdown
	   * > | <div>
	   *          ^
	   *   |
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    effects.enter('lineEnding');
	    effects.consume(code);
	    effects.exit('lineEnding');
	    return effects.attempt(blankLine, ok, nok)
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Code} Code
	 * @typedef {import('micromark-util-types').Construct} Construct
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */

	/** @type {Construct} */
	const htmlText = {
	  name: 'htmlText',
	  tokenize: tokenizeHtmlText
	};

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeHtmlText(effects, ok, nok) {
	  const self = this;
	  /** @type {NonNullable<Code> | undefined} */
	  let marker;
	  /** @type {number} */
	  let index;
	  /** @type {State} */
	  let returnState;
	  return start

	  /**
	   * Start of HTML (text).
	   *
	   * ```markdown
	   * > | a <b> c
	   *       ^
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    effects.enter('htmlText');
	    effects.enter('htmlTextData');
	    effects.consume(code);
	    return open
	  }

	  /**
	   * After `<`, at tag name or other stuff.
	   *
	   * ```markdown
	   * > | a <b> c
	   *        ^
	   * > | a <!doctype> c
	   *        ^
	   * > | a <!--b--> c
	   *        ^
	   * ```
	   *
	   * @type {State}
	   */
	  function open(code) {
	    if (code === 33) {
	      effects.consume(code);
	      return declarationOpen
	    }
	    if (code === 47) {
	      effects.consume(code);
	      return tagCloseStart
	    }
	    if (code === 63) {
	      effects.consume(code);
	      return instruction
	    }

	    // ASCII alphabetical.
	    if (asciiAlpha(code)) {
	      effects.consume(code);
	      return tagOpen
	    }
	    return nok(code)
	  }

	  /**
	   * After `<!`, at declaration, comment, or CDATA.
	   *
	   * ```markdown
	   * > | a <!doctype> c
	   *         ^
	   * > | a <!--b--> c
	   *         ^
	   * > | a <![CDATA[>&<]]> c
	   *         ^
	   * ```
	   *
	   * @type {State}
	   */
	  function declarationOpen(code) {
	    if (code === 45) {
	      effects.consume(code);
	      return commentOpenInside
	    }
	    if (code === 91) {
	      effects.consume(code);
	      index = 0;
	      return cdataOpenInside
	    }
	    if (asciiAlpha(code)) {
	      effects.consume(code);
	      return declaration
	    }
	    return nok(code)
	  }

	  /**
	   * In a comment, after `<!-`, at another `-`.
	   *
	   * ```markdown
	   * > | a <!--b--> c
	   *          ^
	   * ```
	   *
	   * @type {State}
	   */
	  function commentOpenInside(code) {
	    if (code === 45) {
	      effects.consume(code);
	      return commentEnd
	    }
	    return nok(code)
	  }

	  /**
	   * In comment.
	   *
	   * ```markdown
	   * > | a <!--b--> c
	   *           ^
	   * ```
	   *
	   * @type {State}
	   */
	  function comment(code) {
	    if (code === null) {
	      return nok(code)
	    }
	    if (code === 45) {
	      effects.consume(code);
	      return commentClose
	    }
	    if (markdownLineEnding(code)) {
	      returnState = comment;
	      return lineEndingBefore(code)
	    }
	    effects.consume(code);
	    return comment
	  }

	  /**
	   * In comment, after `-`.
	   *
	   * ```markdown
	   * > | a <!--b--> c
	   *             ^
	   * ```
	   *
	   * @type {State}
	   */
	  function commentClose(code) {
	    if (code === 45) {
	      effects.consume(code);
	      return commentEnd
	    }
	    return comment(code)
	  }

	  /**
	   * In comment, after `--`.
	   *
	   * ```markdown
	   * > | a <!--b--> c
	   *              ^
	   * ```
	   *
	   * @type {State}
	   */
	  function commentEnd(code) {
	    return code === 62
	      ? end(code)
	      : code === 45
	      ? commentClose(code)
	      : comment(code)
	  }

	  /**
	   * After `<![`, in CDATA, expecting `CDATA[`.
	   *
	   * ```markdown
	   * > | a <![CDATA[>&<]]> b
	   *          ^^^^^^
	   * ```
	   *
	   * @type {State}
	   */
	  function cdataOpenInside(code) {
	    const value = 'CDATA[';
	    if (code === value.charCodeAt(index++)) {
	      effects.consume(code);
	      return index === value.length ? cdata : cdataOpenInside
	    }
	    return nok(code)
	  }

	  /**
	   * In CDATA.
	   *
	   * ```markdown
	   * > | a <![CDATA[>&<]]> b
	   *                ^^^
	   * ```
	   *
	   * @type {State}
	   */
	  function cdata(code) {
	    if (code === null) {
	      return nok(code)
	    }
	    if (code === 93) {
	      effects.consume(code);
	      return cdataClose
	    }
	    if (markdownLineEnding(code)) {
	      returnState = cdata;
	      return lineEndingBefore(code)
	    }
	    effects.consume(code);
	    return cdata
	  }

	  /**
	   * In CDATA, after `]`, at another `]`.
	   *
	   * ```markdown
	   * > | a <![CDATA[>&<]]> b
	   *                    ^
	   * ```
	   *
	   * @type {State}
	   */
	  function cdataClose(code) {
	    if (code === 93) {
	      effects.consume(code);
	      return cdataEnd
	    }
	    return cdata(code)
	  }

	  /**
	   * In CDATA, after `]]`, at `>`.
	   *
	   * ```markdown
	   * > | a <![CDATA[>&<]]> b
	   *                     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function cdataEnd(code) {
	    if (code === 62) {
	      return end(code)
	    }
	    if (code === 93) {
	      effects.consume(code);
	      return cdataEnd
	    }
	    return cdata(code)
	  }

	  /**
	   * In declaration.
	   *
	   * ```markdown
	   * > | a <!b> c
	   *          ^
	   * ```
	   *
	   * @type {State}
	   */
	  function declaration(code) {
	    if (code === null || code === 62) {
	      return end(code)
	    }
	    if (markdownLineEnding(code)) {
	      returnState = declaration;
	      return lineEndingBefore(code)
	    }
	    effects.consume(code);
	    return declaration
	  }

	  /**
	   * In instruction.
	   *
	   * ```markdown
	   * > | a <?b?> c
	   *         ^
	   * ```
	   *
	   * @type {State}
	   */
	  function instruction(code) {
	    if (code === null) {
	      return nok(code)
	    }
	    if (code === 63) {
	      effects.consume(code);
	      return instructionClose
	    }
	    if (markdownLineEnding(code)) {
	      returnState = instruction;
	      return lineEndingBefore(code)
	    }
	    effects.consume(code);
	    return instruction
	  }

	  /**
	   * In instruction, after `?`, at `>`.
	   *
	   * ```markdown
	   * > | a <?b?> c
	   *           ^
	   * ```
	   *
	   * @type {State}
	   */
	  function instructionClose(code) {
	    return code === 62 ? end(code) : instruction(code)
	  }

	  /**
	   * After `</`, in closing tag, at tag name.
	   *
	   * ```markdown
	   * > | a </b> c
	   *         ^
	   * ```
	   *
	   * @type {State}
	   */
	  function tagCloseStart(code) {
	    // ASCII alphabetical.
	    if (asciiAlpha(code)) {
	      effects.consume(code);
	      return tagClose
	    }
	    return nok(code)
	  }

	  /**
	   * After `</x`, in a tag name.
	   *
	   * ```markdown
	   * > | a </b> c
	   *          ^
	   * ```
	   *
	   * @type {State}
	   */
	  function tagClose(code) {
	    // ASCII alphanumerical and `-`.
	    if (code === 45 || asciiAlphanumeric(code)) {
	      effects.consume(code);
	      return tagClose
	    }
	    return tagCloseBetween(code)
	  }

	  /**
	   * In closing tag, after tag name.
	   *
	   * ```markdown
	   * > | a </b> c
	   *          ^
	   * ```
	   *
	   * @type {State}
	   */
	  function tagCloseBetween(code) {
	    if (markdownLineEnding(code)) {
	      returnState = tagCloseBetween;
	      return lineEndingBefore(code)
	    }
	    if (markdownSpace(code)) {
	      effects.consume(code);
	      return tagCloseBetween
	    }
	    return end(code)
	  }

	  /**
	   * After `<x`, in opening tag name.
	   *
	   * ```markdown
	   * > | a <b> c
	   *         ^
	   * ```
	   *
	   * @type {State}
	   */
	  function tagOpen(code) {
	    // ASCII alphanumerical and `-`.
	    if (code === 45 || asciiAlphanumeric(code)) {
	      effects.consume(code);
	      return tagOpen
	    }
	    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {
	      return tagOpenBetween(code)
	    }
	    return nok(code)
	  }

	  /**
	   * In opening tag, after tag name.
	   *
	   * ```markdown
	   * > | a <b> c
	   *         ^
	   * ```
	   *
	   * @type {State}
	   */
	  function tagOpenBetween(code) {
	    if (code === 47) {
	      effects.consume(code);
	      return end
	    }

	    // ASCII alphabetical and `:` and `_`.
	    if (code === 58 || code === 95 || asciiAlpha(code)) {
	      effects.consume(code);
	      return tagOpenAttributeName
	    }
	    if (markdownLineEnding(code)) {
	      returnState = tagOpenBetween;
	      return lineEndingBefore(code)
	    }
	    if (markdownSpace(code)) {
	      effects.consume(code);
	      return tagOpenBetween
	    }
	    return end(code)
	  }

	  /**
	   * In attribute name.
	   *
	   * ```markdown
	   * > | a <b c> d
	   *          ^
	   * ```
	   *
	   * @type {State}
	   */
	  function tagOpenAttributeName(code) {
	    // ASCII alphabetical and `-`, `.`, `:`, and `_`.
	    if (
	      code === 45 ||
	      code === 46 ||
	      code === 58 ||
	      code === 95 ||
	      asciiAlphanumeric(code)
	    ) {
	      effects.consume(code);
	      return tagOpenAttributeName
	    }
	    return tagOpenAttributeNameAfter(code)
	  }

	  /**
	   * After attribute name, before initializer, the end of the tag, or
	   * whitespace.
	   *
	   * ```markdown
	   * > | a <b c> d
	   *           ^
	   * ```
	   *
	   * @type {State}
	   */
	  function tagOpenAttributeNameAfter(code) {
	    if (code === 61) {
	      effects.consume(code);
	      return tagOpenAttributeValueBefore
	    }
	    if (markdownLineEnding(code)) {
	      returnState = tagOpenAttributeNameAfter;
	      return lineEndingBefore(code)
	    }
	    if (markdownSpace(code)) {
	      effects.consume(code);
	      return tagOpenAttributeNameAfter
	    }
	    return tagOpenBetween(code)
	  }

	  /**
	   * Before unquoted, double quoted, or single quoted attribute value, allowing
	   * whitespace.
	   *
	   * ```markdown
	   * > | a <b c=d> e
	   *            ^
	   * ```
	   *
	   * @type {State}
	   */
	  function tagOpenAttributeValueBefore(code) {
	    if (
	      code === null ||
	      code === 60 ||
	      code === 61 ||
	      code === 62 ||
	      code === 96
	    ) {
	      return nok(code)
	    }
	    if (code === 34 || code === 39) {
	      effects.consume(code);
	      marker = code;
	      return tagOpenAttributeValueQuoted
	    }
	    if (markdownLineEnding(code)) {
	      returnState = tagOpenAttributeValueBefore;
	      return lineEndingBefore(code)
	    }
	    if (markdownSpace(code)) {
	      effects.consume(code);
	      return tagOpenAttributeValueBefore
	    }
	    effects.consume(code);
	    return tagOpenAttributeValueUnquoted
	  }

	  /**
	   * In double or single quoted attribute value.
	   *
	   * ```markdown
	   * > | a <b c="d"> e
	   *             ^
	   * ```
	   *
	   * @type {State}
	   */
	  function tagOpenAttributeValueQuoted(code) {
	    if (code === marker) {
	      effects.consume(code);
	      marker = undefined;
	      return tagOpenAttributeValueQuotedAfter
	    }
	    if (code === null) {
	      return nok(code)
	    }
	    if (markdownLineEnding(code)) {
	      returnState = tagOpenAttributeValueQuoted;
	      return lineEndingBefore(code)
	    }
	    effects.consume(code);
	    return tagOpenAttributeValueQuoted
	  }

	  /**
	   * In unquoted attribute value.
	   *
	   * ```markdown
	   * > | a <b c=d> e
	   *            ^
	   * ```
	   *
	   * @type {State}
	   */
	  function tagOpenAttributeValueUnquoted(code) {
	    if (
	      code === null ||
	      code === 34 ||
	      code === 39 ||
	      code === 60 ||
	      code === 61 ||
	      code === 96
	    ) {
	      return nok(code)
	    }
	    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {
	      return tagOpenBetween(code)
	    }
	    effects.consume(code);
	    return tagOpenAttributeValueUnquoted
	  }

	  /**
	   * After double or single quoted attribute value, before whitespace or the end
	   * of the tag.
	   *
	   * ```markdown
	   * > | a <b c="d"> e
	   *               ^
	   * ```
	   *
	   * @type {State}
	   */
	  function tagOpenAttributeValueQuotedAfter(code) {
	    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {
	      return tagOpenBetween(code)
	    }
	    return nok(code)
	  }

	  /**
	   * In certain circumstances of a tag where only an `>` is allowed.
	   *
	   * ```markdown
	   * > | a <b c="d"> e
	   *               ^
	   * ```
	   *
	   * @type {State}
	   */
	  function end(code) {
	    if (code === 62) {
	      effects.consume(code);
	      effects.exit('htmlTextData');
	      effects.exit('htmlText');
	      return ok
	    }
	    return nok(code)
	  }

	  /**
	   * At eol.
	   *
	   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about
	   * > empty tokens.
	   *
	   * ```markdown
	   * > | a <!--a
	   *            ^
	   *   | b-->
	   * ```
	   *
	   * @type {State}
	   */
	  function lineEndingBefore(code) {
	    effects.exit('htmlTextData');
	    effects.enter('lineEnding');
	    effects.consume(code);
	    effects.exit('lineEnding');
	    return lineEndingAfter
	  }

	  /**
	   * After eol, at optional whitespace.
	   *
	   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about
	   * > empty tokens.
	   *
	   * ```markdown
	   *   | a <!--a
	   * > | b-->
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function lineEndingAfter(code) {
	    // Always populated by defaults.

	    return markdownSpace(code)
	      ? factorySpace(
	          effects,
	          lineEndingAfterPrefix,
	          'linePrefix',
	          self.parser.constructs.disable.null.includes('codeIndented')
	            ? undefined
	            : 4
	        )(code)
	      : lineEndingAfterPrefix(code)
	  }

	  /**
	   * After eol, after optional whitespace.
	   *
	   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about
	   * > empty tokens.
	   *
	   * ```markdown
	   *   | a <!--a
	   * > | b-->
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function lineEndingAfterPrefix(code) {
	    effects.enter('htmlTextData');
	    return returnState(code)
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Construct} Construct
	 * @typedef {import('micromark-util-types').Event} Event
	 * @typedef {import('micromark-util-types').Resolver} Resolver
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').Token} Token
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */

	/** @type {Construct} */
	const labelEnd = {
	  name: 'labelEnd',
	  tokenize: tokenizeLabelEnd,
	  resolveTo: resolveToLabelEnd,
	  resolveAll: resolveAllLabelEnd
	};

	/** @type {Construct} */
	const resourceConstruct = {
	  tokenize: tokenizeResource
	};
	/** @type {Construct} */
	const referenceFullConstruct = {
	  tokenize: tokenizeReferenceFull
	};
	/** @type {Construct} */
	const referenceCollapsedConstruct = {
	  tokenize: tokenizeReferenceCollapsed
	};

	/** @type {Resolver} */
	function resolveAllLabelEnd(events) {
	  let index = -1;
	  while (++index < events.length) {
	    const token = events[index][1];
	    if (
	      token.type === 'labelImage' ||
	      token.type === 'labelLink' ||
	      token.type === 'labelEnd'
	    ) {
	      // Remove the marker.
	      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2);
	      token.type = 'data';
	      index++;
	    }
	  }
	  return events
	}

	/** @type {Resolver} */
	function resolveToLabelEnd(events, context) {
	  let index = events.length;
	  let offset = 0;
	  /** @type {Token} */
	  let token;
	  /** @type {number | undefined} */
	  let open;
	  /** @type {number | undefined} */
	  let close;
	  /** @type {Array<Event>} */
	  let media;

	  // Find an opening.
	  while (index--) {
	    token = events[index][1];
	    if (open) {
	      // If we see another link, or inactive link label, we’ve been here before.
	      if (
	        token.type === 'link' ||
	        (token.type === 'labelLink' && token._inactive)
	      ) {
	        break
	      }

	      // Mark other link openings as inactive, as we can’t have links in
	      // links.
	      if (events[index][0] === 'enter' && token.type === 'labelLink') {
	        token._inactive = true;
	      }
	    } else if (close) {
	      if (
	        events[index][0] === 'enter' &&
	        (token.type === 'labelImage' || token.type === 'labelLink') &&
	        !token._balanced
	      ) {
	        open = index;
	        if (token.type !== 'labelLink') {
	          offset = 2;
	          break
	        }
	      }
	    } else if (token.type === 'labelEnd') {
	      close = index;
	    }
	  }
	  const group = {
	    type: events[open][1].type === 'labelLink' ? 'link' : 'image',
	    start: Object.assign({}, events[open][1].start),
	    end: Object.assign({}, events[events.length - 1][1].end)
	  };
	  const label = {
	    type: 'label',
	    start: Object.assign({}, events[open][1].start),
	    end: Object.assign({}, events[close][1].end)
	  };
	  const text = {
	    type: 'labelText',
	    start: Object.assign({}, events[open + offset + 2][1].end),
	    end: Object.assign({}, events[close - 2][1].start)
	  };
	  media = [
	    ['enter', group, context],
	    ['enter', label, context]
	  ];

	  // Opening marker.
	  media = push(media, events.slice(open + 1, open + offset + 3));

	  // Text open.
	  media = push(media, [['enter', text, context]]);

	  // Always populated by defaults.

	  // Between.
	  media = push(
	    media,
	    resolveAll(
	      context.parser.constructs.insideSpan.null,
	      events.slice(open + offset + 4, close - 3),
	      context
	    )
	  );

	  // Text close, marker close, label close.
	  media = push(media, [
	    ['exit', text, context],
	    events[close - 2],
	    events[close - 1],
	    ['exit', label, context]
	  ]);

	  // Reference, resource, or so.
	  media = push(media, events.slice(close + 1));

	  // Media close.
	  media = push(media, [['exit', group, context]]);
	  splice(events, open, events.length, media);
	  return events
	}

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeLabelEnd(effects, ok, nok) {
	  const self = this;
	  let index = self.events.length;
	  /** @type {Token} */
	  let labelStart;
	  /** @type {boolean} */
	  let defined;

	  // Find an opening.
	  while (index--) {
	    if (
	      (self.events[index][1].type === 'labelImage' ||
	        self.events[index][1].type === 'labelLink') &&
	      !self.events[index][1]._balanced
	    ) {
	      labelStart = self.events[index][1];
	      break
	    }
	  }
	  return start

	  /**
	   * Start of label end.
	   *
	   * ```markdown
	   * > | [a](b) c
	   *       ^
	   * > | [a][b] c
	   *       ^
	   * > | [a][] b
	   *       ^
	   * > | [a] b
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    // If there is not an okay opening.
	    if (!labelStart) {
	      return nok(code)
	    }

	    // If the corresponding label (link) start is marked as inactive,
	    // it means we’d be wrapping a link, like this:
	    //
	    // ```markdown
	    // > | a [b [c](d) e](f) g.
	    //                  ^
	    // ```
	    //
	    // We can’t have that, so it’s just balanced brackets.
	    if (labelStart._inactive) {
	      return labelEndNok(code)
	    }
	    defined = self.parser.defined.includes(
	      normalizeIdentifier(
	        self.sliceSerialize({
	          start: labelStart.end,
	          end: self.now()
	        })
	      )
	    );
	    effects.enter('labelEnd');
	    effects.enter('labelMarker');
	    effects.consume(code);
	    effects.exit('labelMarker');
	    effects.exit('labelEnd');
	    return after
	  }

	  /**
	   * After `]`.
	   *
	   * ```markdown
	   * > | [a](b) c
	   *       ^
	   * > | [a][b] c
	   *       ^
	   * > | [a][] b
	   *       ^
	   * > | [a] b
	   *       ^
	   * ```
	   *
	   * @type {State}
	   */
	  function after(code) {
	    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in
	    // an extension.

	    // Resource (`[asd](fgh)`)?
	    if (code === 40) {
	      return effects.attempt(
	        resourceConstruct,
	        labelEndOk,
	        defined ? labelEndOk : labelEndNok
	      )(code)
	    }

	    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?
	    if (code === 91) {
	      return effects.attempt(
	        referenceFullConstruct,
	        labelEndOk,
	        defined ? referenceNotFull : labelEndNok
	      )(code)
	    }

	    // Shortcut (`[asd]`) reference?
	    return defined ? labelEndOk(code) : labelEndNok(code)
	  }

	  /**
	   * After `]`, at `[`, but not at a full reference.
	   *
	   * > 👉 **Note**: we only get here if the label is defined.
	   *
	   * ```markdown
	   * > | [a][] b
	   *        ^
	   * > | [a] b
	   *        ^
	   * ```
	   *
	   * @type {State}
	   */
	  function referenceNotFull(code) {
	    return effects.attempt(
	      referenceCollapsedConstruct,
	      labelEndOk,
	      labelEndNok
	    )(code)
	  }

	  /**
	   * Done, we found something.
	   *
	   * ```markdown
	   * > | [a](b) c
	   *           ^
	   * > | [a][b] c
	   *           ^
	   * > | [a][] b
	   *          ^
	   * > | [a] b
	   *        ^
	   * ```
	   *
	   * @type {State}
	   */
	  function labelEndOk(code) {
	    // Note: `markdown-rs` does a bunch of stuff here.
	    return ok(code)
	  }

	  /**
	   * Done, it’s nothing.
	   *
	   * There was an okay opening, but we didn’t match anything.
	   *
	   * ```markdown
	   * > | [a](b c
	   *        ^
	   * > | [a][b c
	   *        ^
	   * > | [a] b
	   *        ^
	   * ```
	   *
	   * @type {State}
	   */
	  function labelEndNok(code) {
	    labelStart._balanced = true;
	    return nok(code)
	  }
	}

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeResource(effects, ok, nok) {
	  return resourceStart

	  /**
	   * At a resource.
	   *
	   * ```markdown
	   * > | [a](b) c
	   *        ^
	   * ```
	   *
	   * @type {State}
	   */
	  function resourceStart(code) {
	    effects.enter('resource');
	    effects.enter('resourceMarker');
	    effects.consume(code);
	    effects.exit('resourceMarker');
	    return resourceBefore
	  }

	  /**
	   * In resource, after `(`, at optional whitespace.
	   *
	   * ```markdown
	   * > | [a](b) c
	   *         ^
	   * ```
	   *
	   * @type {State}
	   */
	  function resourceBefore(code) {
	    return markdownLineEndingOrSpace(code)
	      ? factoryWhitespace(effects, resourceOpen)(code)
	      : resourceOpen(code)
	  }

	  /**
	   * In resource, after optional whitespace, at `)` or a destination.
	   *
	   * ```markdown
	   * > | [a](b) c
	   *         ^
	   * ```
	   *
	   * @type {State}
	   */
	  function resourceOpen(code) {
	    if (code === 41) {
	      return resourceEnd(code)
	    }
	    return factoryDestination(
	      effects,
	      resourceDestinationAfter,
	      resourceDestinationMissing,
	      'resourceDestination',
	      'resourceDestinationLiteral',
	      'resourceDestinationLiteralMarker',
	      'resourceDestinationRaw',
	      'resourceDestinationString',
	      32
	    )(code)
	  }

	  /**
	   * In resource, after destination, at optional whitespace.
	   *
	   * ```markdown
	   * > | [a](b) c
	   *          ^
	   * ```
	   *
	   * @type {State}
	   */
	  function resourceDestinationAfter(code) {
	    return markdownLineEndingOrSpace(code)
	      ? factoryWhitespace(effects, resourceBetween)(code)
	      : resourceEnd(code)
	  }

	  /**
	   * At invalid destination.
	   *
	   * ```markdown
	   * > | [a](<<) b
	   *         ^
	   * ```
	   *
	   * @type {State}
	   */
	  function resourceDestinationMissing(code) {
	    return nok(code)
	  }

	  /**
	   * In resource, after destination and whitespace, at `(` or title.
	   *
	   * ```markdown
	   * > | [a](b ) c
	   *           ^
	   * ```
	   *
	   * @type {State}
	   */
	  function resourceBetween(code) {
	    if (code === 34 || code === 39 || code === 40) {
	      return factoryTitle(
	        effects,
	        resourceTitleAfter,
	        nok,
	        'resourceTitle',
	        'resourceTitleMarker',
	        'resourceTitleString'
	      )(code)
	    }
	    return resourceEnd(code)
	  }

	  /**
	   * In resource, after title, at optional whitespace.
	   *
	   * ```markdown
	   * > | [a](b "c") d
	   *              ^
	   * ```
	   *
	   * @type {State}
	   */
	  function resourceTitleAfter(code) {
	    return markdownLineEndingOrSpace(code)
	      ? factoryWhitespace(effects, resourceEnd)(code)
	      : resourceEnd(code)
	  }

	  /**
	   * In resource, at `)`.
	   *
	   * ```markdown
	   * > | [a](b) d
	   *          ^
	   * ```
	   *
	   * @type {State}
	   */
	  function resourceEnd(code) {
	    if (code === 41) {
	      effects.enter('resourceMarker');
	      effects.consume(code);
	      effects.exit('resourceMarker');
	      effects.exit('resource');
	      return ok
	    }
	    return nok(code)
	  }
	}

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeReferenceFull(effects, ok, nok) {
	  const self = this;
	  return referenceFull

	  /**
	   * In a reference (full), at the `[`.
	   *
	   * ```markdown
	   * > | [a][b] d
	   *        ^
	   * ```
	   *
	   * @type {State}
	   */
	  function referenceFull(code) {
	    return factoryLabel.call(
	      self,
	      effects,
	      referenceFullAfter,
	      referenceFullMissing,
	      'reference',
	      'referenceMarker',
	      'referenceString'
	    )(code)
	  }

	  /**
	   * In a reference (full), after `]`.
	   *
	   * ```markdown
	   * > | [a][b] d
	   *          ^
	   * ```
	   *
	   * @type {State}
	   */
	  function referenceFullAfter(code) {
	    return self.parser.defined.includes(
	      normalizeIdentifier(
	        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)
	      )
	    )
	      ? ok(code)
	      : nok(code)
	  }

	  /**
	   * In reference (full) that was missing.
	   *
	   * ```markdown
	   * > | [a][b d
	   *        ^
	   * ```
	   *
	   * @type {State}
	   */
	  function referenceFullMissing(code) {
	    return nok(code)
	  }
	}

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeReferenceCollapsed(effects, ok, nok) {
	  return referenceCollapsedStart

	  /**
	   * In reference (collapsed), at `[`.
	   *
	   * > 👉 **Note**: we only get here if the label is defined.
	   *
	   * ```markdown
	   * > | [a][] d
	   *        ^
	   * ```
	   *
	   * @type {State}
	   */
	  function referenceCollapsedStart(code) {
	    // We only attempt a collapsed label if there’s a `[`.

	    effects.enter('reference');
	    effects.enter('referenceMarker');
	    effects.consume(code);
	    effects.exit('referenceMarker');
	    return referenceCollapsedOpen
	  }

	  /**
	   * In reference (collapsed), at `]`.
	   *
	   * > 👉 **Note**: we only get here if the label is defined.
	   *
	   * ```markdown
	   * > | [a][] d
	   *         ^
	   * ```
	   *
	   *  @type {State}
	   */
	  function referenceCollapsedOpen(code) {
	    if (code === 93) {
	      effects.enter('referenceMarker');
	      effects.consume(code);
	      effects.exit('referenceMarker');
	      effects.exit('reference');
	      return ok
	    }
	    return nok(code)
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Construct} Construct
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */


	/** @type {Construct} */
	const labelStartImage = {
	  name: 'labelStartImage',
	  tokenize: tokenizeLabelStartImage,
	  resolveAll: labelEnd.resolveAll
	};

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeLabelStartImage(effects, ok, nok) {
	  const self = this;
	  return start

	  /**
	   * Start of label (image) start.
	   *
	   * ```markdown
	   * > | a ![b] c
	   *       ^
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    effects.enter('labelImage');
	    effects.enter('labelImageMarker');
	    effects.consume(code);
	    effects.exit('labelImageMarker');
	    return open
	  }

	  /**
	   * After `!`, at `[`.
	   *
	   * ```markdown
	   * > | a ![b] c
	   *        ^
	   * ```
	   *
	   * @type {State}
	   */
	  function open(code) {
	    if (code === 91) {
	      effects.enter('labelMarker');
	      effects.consume(code);
	      effects.exit('labelMarker');
	      effects.exit('labelImage');
	      return after
	    }
	    return nok(code)
	  }

	  /**
	   * After `![`.
	   *
	   * ```markdown
	   * > | a ![b] c
	   *         ^
	   * ```
	   *
	   * This is needed in because, when GFM footnotes are enabled, images never
	   * form when started with a `^`.
	   * Instead, links form:
	   *
	   * ```markdown
	   * ![^a](b)
	   *
	   * ![^a][b]
	   *
	   * [b]: c
	   * ```
	   *
	   * ```html
	   * <p>!<a href=\"b\">^a</a></p>
	   * <p>!<a href=\"c\">^a</a></p>
	   * ```
	   *
	   * @type {State}
	   */
	  function after(code) {
	    // To do: use a new field to do this, this is still needed for
	    // `micromark-extension-gfm-footnote`, but the `label-start-link`
	    // behavior isn’t.
	    // Hidden footnotes hook.
	    /* c8 ignore next 3 */
	    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs
	      ? nok(code)
	      : ok(code)
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Construct} Construct
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */


	/** @type {Construct} */
	const labelStartLink = {
	  name: 'labelStartLink',
	  tokenize: tokenizeLabelStartLink,
	  resolveAll: labelEnd.resolveAll
	};

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeLabelStartLink(effects, ok, nok) {
	  const self = this;
	  return start

	  /**
	   * Start of label (link) start.
	   *
	   * ```markdown
	   * > | a [b] c
	   *       ^
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    effects.enter('labelLink');
	    effects.enter('labelMarker');
	    effects.consume(code);
	    effects.exit('labelMarker');
	    effects.exit('labelLink');
	    return after
	  }

	  /** @type {State} */
	  function after(code) {
	    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,
	    // remove.
	    // Hidden footnotes hook.
	    /* c8 ignore next 3 */
	    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs
	      ? nok(code)
	      : ok(code)
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Construct} Construct
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */

	/** @type {Construct} */
	const lineEnding = {
	  name: 'lineEnding',
	  tokenize: tokenizeLineEnding
	};

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeLineEnding(effects, ok) {
	  return start

	  /** @type {State} */
	  function start(code) {
	    effects.enter('lineEnding');
	    effects.consume(code);
	    effects.exit('lineEnding');
	    return factorySpace(effects, ok, 'linePrefix')
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Code} Code
	 * @typedef {import('micromark-util-types').Construct} Construct
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */

	/** @type {Construct} */
	const thematicBreak$2 = {
	  name: 'thematicBreak',
	  tokenize: tokenizeThematicBreak
	};

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeThematicBreak(effects, ok, nok) {
	  let size = 0;
	  /** @type {NonNullable<Code>} */
	  let marker;
	  return start

	  /**
	   * Start of thematic break.
	   *
	   * ```markdown
	   * > | ***
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    effects.enter('thematicBreak');
	    // To do: parse indent like `markdown-rs`.
	    return before(code)
	  }

	  /**
	   * After optional whitespace, at marker.
	   *
	   * ```markdown
	   * > | ***
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function before(code) {
	    marker = code;
	    return atBreak(code)
	  }

	  /**
	   * After something, before something else.
	   *
	   * ```markdown
	   * > | ***
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function atBreak(code) {
	    if (code === marker) {
	      effects.enter('thematicBreakSequence');
	      return sequence(code)
	    }
	    if (size >= 3 && (code === null || markdownLineEnding(code))) {
	      effects.exit('thematicBreak');
	      return ok(code)
	    }
	    return nok(code)
	  }

	  /**
	   * In sequence.
	   *
	   * ```markdown
	   * > | ***
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function sequence(code) {
	    if (code === marker) {
	      effects.consume(code);
	      size++;
	      return sequence
	    }
	    effects.exit('thematicBreakSequence');
	    return markdownSpace(code)
	      ? factorySpace(effects, atBreak, 'whitespace')(code)
	      : atBreak(code)
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Code} Code
	 * @typedef {import('micromark-util-types').Construct} Construct
	 * @typedef {import('micromark-util-types').ContainerState} ContainerState
	 * @typedef {import('micromark-util-types').Exiter} Exiter
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */


	/** @type {Construct} */
	const list$2 = {
	  name: 'list',
	  tokenize: tokenizeListStart,
	  continuation: {
	    tokenize: tokenizeListContinuation
	  },
	  exit: tokenizeListEnd
	};

	/** @type {Construct} */
	const listItemPrefixWhitespaceConstruct = {
	  tokenize: tokenizeListItemPrefixWhitespace,
	  partial: true
	};

	/** @type {Construct} */
	const indentConstruct = {
	  tokenize: tokenizeIndent$1,
	  partial: true
	};

	// To do: `markdown-rs` parses list items on their own and later stitches them
	// together.

	/**
	 * @type {Tokenizer}
	 * @this {TokenizeContext}
	 */
	function tokenizeListStart(effects, ok, nok) {
	  const self = this;
	  const tail = self.events[self.events.length - 1];
	  let initialSize =
	    tail && tail[1].type === 'linePrefix'
	      ? tail[2].sliceSerialize(tail[1], true).length
	      : 0;
	  let size = 0;
	  return start

	  /** @type {State} */
	  function start(code) {
	    const kind =
	      self.containerState.type ||
	      (code === 42 || code === 43 || code === 45
	        ? 'listUnordered'
	        : 'listOrdered');
	    if (
	      kind === 'listUnordered'
	        ? !self.containerState.marker || code === self.containerState.marker
	        : asciiDigit(code)
	    ) {
	      if (!self.containerState.type) {
	        self.containerState.type = kind;
	        effects.enter(kind, {
	          _container: true
	        });
	      }
	      if (kind === 'listUnordered') {
	        effects.enter('listItemPrefix');
	        return code === 42 || code === 45
	          ? effects.check(thematicBreak$2, nok, atMarker)(code)
	          : atMarker(code)
	      }
	      if (!self.interrupt || code === 49) {
	        effects.enter('listItemPrefix');
	        effects.enter('listItemValue');
	        return inside(code)
	      }
	    }
	    return nok(code)
	  }

	  /** @type {State} */
	  function inside(code) {
	    if (asciiDigit(code) && ++size < 10) {
	      effects.consume(code);
	      return inside
	    }
	    if (
	      (!self.interrupt || size < 2) &&
	      (self.containerState.marker
	        ? code === self.containerState.marker
	        : code === 41 || code === 46)
	    ) {
	      effects.exit('listItemValue');
	      return atMarker(code)
	    }
	    return nok(code)
	  }

	  /**
	   * @type {State}
	   **/
	  function atMarker(code) {
	    effects.enter('listItemMarker');
	    effects.consume(code);
	    effects.exit('listItemMarker');
	    self.containerState.marker = self.containerState.marker || code;
	    return effects.check(
	      blankLine,
	      // Can’t be empty when interrupting.
	      self.interrupt ? nok : onBlank,
	      effects.attempt(
	        listItemPrefixWhitespaceConstruct,
	        endOfPrefix,
	        otherPrefix
	      )
	    )
	  }

	  /** @type {State} */
	  function onBlank(code) {
	    self.containerState.initialBlankLine = true;
	    initialSize++;
	    return endOfPrefix(code)
	  }

	  /** @type {State} */
	  function otherPrefix(code) {
	    if (markdownSpace(code)) {
	      effects.enter('listItemPrefixWhitespace');
	      effects.consume(code);
	      effects.exit('listItemPrefixWhitespace');
	      return endOfPrefix
	    }
	    return nok(code)
	  }

	  /** @type {State} */
	  function endOfPrefix(code) {
	    self.containerState.size =
	      initialSize +
	      self.sliceSerialize(effects.exit('listItemPrefix'), true).length;
	    return ok(code)
	  }
	}

	/**
	 * @type {Tokenizer}
	 * @this {TokenizeContext}
	 */
	function tokenizeListContinuation(effects, ok, nok) {
	  const self = this;
	  self.containerState._closeFlow = undefined;
	  return effects.check(blankLine, onBlank, notBlank)

	  /** @type {State} */
	  function onBlank(code) {
	    self.containerState.furtherBlankLines =
	      self.containerState.furtherBlankLines ||
	      self.containerState.initialBlankLine;

	    // We have a blank line.
	    // Still, try to consume at most the items size.
	    return factorySpace(
	      effects,
	      ok,
	      'listItemIndent',
	      self.containerState.size + 1
	    )(code)
	  }

	  /** @type {State} */
	  function notBlank(code) {
	    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {
	      self.containerState.furtherBlankLines = undefined;
	      self.containerState.initialBlankLine = undefined;
	      return notInCurrentItem(code)
	    }
	    self.containerState.furtherBlankLines = undefined;
	    self.containerState.initialBlankLine = undefined;
	    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)
	  }

	  /** @type {State} */
	  function notInCurrentItem(code) {
	    // While we do continue, we signal that the flow should be closed.
	    self.containerState._closeFlow = true;
	    // As we’re closing flow, we’re no longer interrupting.
	    self.interrupt = undefined;
	    // Always populated by defaults.

	    return factorySpace(
	      effects,
	      effects.attempt(list$2, ok, nok),
	      'linePrefix',
	      self.parser.constructs.disable.null.includes('codeIndented')
	        ? undefined
	        : 4
	    )(code)
	  }
	}

	/**
	 * @type {Tokenizer}
	 * @this {TokenizeContext}
	 */
	function tokenizeIndent$1(effects, ok, nok) {
	  const self = this;
	  return factorySpace(
	    effects,
	    afterPrefix,
	    'listItemIndent',
	    self.containerState.size + 1
	  )

	  /** @type {State} */
	  function afterPrefix(code) {
	    const tail = self.events[self.events.length - 1];
	    return tail &&
	      tail[1].type === 'listItemIndent' &&
	      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size
	      ? ok(code)
	      : nok(code)
	  }
	}

	/**
	 * @type {Exiter}
	 * @this {TokenizeContext}
	 */
	function tokenizeListEnd(effects) {
	  effects.exit(this.containerState.type);
	}

	/**
	 * @type {Tokenizer}
	 * @this {TokenizeContext}
	 */
	function tokenizeListItemPrefixWhitespace(effects, ok, nok) {
	  const self = this;

	  // Always populated by defaults.

	  return factorySpace(
	    effects,
	    afterPrefix,
	    'listItemPrefixWhitespace',
	    self.parser.constructs.disable.null.includes('codeIndented')
	      ? undefined
	      : 4 + 1
	  )

	  /** @type {State} */
	  function afterPrefix(code) {
	    const tail = self.events[self.events.length - 1];
	    return !markdownSpace(code) &&
	      tail &&
	      tail[1].type === 'listItemPrefixWhitespace'
	      ? ok(code)
	      : nok(code)
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Code} Code
	 * @typedef {import('micromark-util-types').Construct} Construct
	 * @typedef {import('micromark-util-types').Resolver} Resolver
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */

	/** @type {Construct} */
	const setextUnderline = {
	  name: 'setextUnderline',
	  tokenize: tokenizeSetextUnderline,
	  resolveTo: resolveToSetextUnderline
	};

	/** @type {Resolver} */
	function resolveToSetextUnderline(events, context) {
	  // To do: resolve like `markdown-rs`.
	  let index = events.length;
	  /** @type {number | undefined} */
	  let content;
	  /** @type {number | undefined} */
	  let text;
	  /** @type {number | undefined} */
	  let definition;

	  // Find the opening of the content.
	  // It’ll always exist: we don’t tokenize if it isn’t there.
	  while (index--) {
	    if (events[index][0] === 'enter') {
	      if (events[index][1].type === 'content') {
	        content = index;
	        break
	      }
	      if (events[index][1].type === 'paragraph') {
	        text = index;
	      }
	    }
	    // Exit
	    else {
	      if (events[index][1].type === 'content') {
	        // Remove the content end (if needed we’ll add it later)
	        events.splice(index, 1);
	      }
	      if (!definition && events[index][1].type === 'definition') {
	        definition = index;
	      }
	    }
	  }
	  const heading = {
	    type: 'setextHeading',
	    start: Object.assign({}, events[text][1].start),
	    end: Object.assign({}, events[events.length - 1][1].end)
	  };

	  // Change the paragraph to setext heading text.
	  events[text][1].type = 'setextHeadingText';

	  // If we have definitions in the content, we’ll keep on having content,
	  // but we need move it.
	  if (definition) {
	    events.splice(text, 0, ['enter', heading, context]);
	    events.splice(definition + 1, 0, ['exit', events[content][1], context]);
	    events[content][1].end = Object.assign({}, events[definition][1].end);
	  } else {
	    events[content][1] = heading;
	  }

	  // Add the heading exit at the end.
	  events.push(['exit', heading, context]);
	  return events
	}

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeSetextUnderline(effects, ok, nok) {
	  const self = this;
	  /** @type {NonNullable<Code>} */
	  let marker;
	  return start

	  /**
	   * At start of heading (setext) underline.
	   *
	   * ```markdown
	   *   | aa
	   * > | ==
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    let index = self.events.length;
	    /** @type {boolean | undefined} */
	    let paragraph;
	    // Find an opening.
	    while (index--) {
	      // Skip enter/exit of line ending, line prefix, and content.
	      // We can now either have a definition or a paragraph.
	      if (
	        self.events[index][1].type !== 'lineEnding' &&
	        self.events[index][1].type !== 'linePrefix' &&
	        self.events[index][1].type !== 'content'
	      ) {
	        paragraph = self.events[index][1].type === 'paragraph';
	        break
	      }
	    }

	    // To do: handle lazy/pierce like `markdown-rs`.
	    // To do: parse indent like `markdown-rs`.
	    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {
	      effects.enter('setextHeadingLine');
	      marker = code;
	      return before(code)
	    }
	    return nok(code)
	  }

	  /**
	   * After optional whitespace, at `-` or `=`.
	   *
	   * ```markdown
	   *   | aa
	   * > | ==
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function before(code) {
	    effects.enter('setextHeadingLineSequence');
	    return inside(code)
	  }

	  /**
	   * In sequence.
	   *
	   * ```markdown
	   *   | aa
	   * > | ==
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function inside(code) {
	    if (code === marker) {
	      effects.consume(code);
	      return inside
	    }
	    effects.exit('setextHeadingLineSequence');
	    return markdownSpace(code)
	      ? factorySpace(effects, after, 'lineSuffix')(code)
	      : after(code)
	  }

	  /**
	   * After sequence, after optional whitespace.
	   *
	   * ```markdown
	   *   | aa
	   * > | ==
	   *       ^
	   * ```
	   *
	   * @type {State}
	   */
	  function after(code) {
	    if (code === null || markdownLineEnding(code)) {
	      effects.exit('setextHeadingLine');
	      return ok(code)
	    }
	    return nok(code)
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
	 * @typedef {import('micromark-util-types').Initializer} Initializer
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 */

	/** @type {InitialConstruct} */
	const flow$2 = {
	  tokenize: initializeFlow
	};

	/**
	 * @this {TokenizeContext}
	 * @type {Initializer}
	 */
	function initializeFlow(effects) {
	  const self = this;
	  const initial = effects.attempt(
	    // Try to parse a blank line.
	    blankLine,
	    atBlankEnding,
	    // Try to parse initial flow (essentially, only code).
	    effects.attempt(
	      this.parser.constructs.flowInitial,
	      afterConstruct,
	      factorySpace(
	        effects,
	        effects.attempt(
	          this.parser.constructs.flow,
	          afterConstruct,
	          effects.attempt(content, afterConstruct)
	        ),
	        'linePrefix'
	      )
	    )
	  );
	  return initial

	  /** @type {State} */
	  function atBlankEnding(code) {
	    if (code === null) {
	      effects.consume(code);
	      return
	    }
	    effects.enter('lineEndingBlank');
	    effects.consume(code);
	    effects.exit('lineEndingBlank');
	    self.currentConstruct = undefined;
	    return initial
	  }

	  /** @type {State} */
	  function afterConstruct(code) {
	    if (code === null) {
	      effects.consume(code);
	      return
	    }
	    effects.enter('lineEnding');
	    effects.consume(code);
	    effects.exit('lineEnding');
	    self.currentConstruct = undefined;
	    return initial
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Code} Code
	 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
	 * @typedef {import('micromark-util-types').Initializer} Initializer
	 * @typedef {import('micromark-util-types').Resolver} Resolver
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 */

	const resolver = {
	  resolveAll: createResolver()
	};
	const string$1 = initializeFactory('string');
	const text$7 = initializeFactory('text');

	/**
	 * @param {'string' | 'text'} field
	 * @returns {InitialConstruct}
	 */
	function initializeFactory(field) {
	  return {
	    tokenize: initializeText,
	    resolveAll: createResolver(
	      field === 'text' ? resolveAllLineSuffixes : undefined
	    )
	  }

	  /**
	   * @this {TokenizeContext}
	   * @type {Initializer}
	   */
	  function initializeText(effects) {
	    const self = this;
	    const constructs = this.parser.constructs[field];
	    const text = effects.attempt(constructs, start, notText);
	    return start

	    /** @type {State} */
	    function start(code) {
	      return atBreak(code) ? text(code) : notText(code)
	    }

	    /** @type {State} */
	    function notText(code) {
	      if (code === null) {
	        effects.consume(code);
	        return
	      }
	      effects.enter('data');
	      effects.consume(code);
	      return data
	    }

	    /** @type {State} */
	    function data(code) {
	      if (atBreak(code)) {
	        effects.exit('data');
	        return text(code)
	      }

	      // Data.
	      effects.consume(code);
	      return data
	    }

	    /**
	     * @param {Code} code
	     * @returns {boolean}
	     */
	    function atBreak(code) {
	      if (code === null) {
	        return true
	      }
	      const list = constructs[code];
	      let index = -1;
	      if (list) {
	        // Always populated by defaults.

	        while (++index < list.length) {
	          const item = list[index];
	          if (!item.previous || item.previous.call(self, self.previous)) {
	            return true
	          }
	        }
	      }
	      return false
	    }
	  }
	}

	/**
	 * @param {Resolver | undefined} [extraResolver]
	 * @returns {Resolver}
	 */
	function createResolver(extraResolver) {
	  return resolveAllText

	  /** @type {Resolver} */
	  function resolveAllText(events, context) {
	    let index = -1;
	    /** @type {number | undefined} */
	    let enter;

	    // A rather boring computation (to merge adjacent `data` events) which
	    // improves mm performance by 29%.
	    while (++index <= events.length) {
	      if (enter === undefined) {
	        if (events[index] && events[index][1].type === 'data') {
	          enter = index;
	          index++;
	        }
	      } else if (!events[index] || events[index][1].type !== 'data') {
	        // Don’t do anything if there is one data token.
	        if (index !== enter + 2) {
	          events[enter][1].end = events[index - 1][1].end;
	          events.splice(enter + 2, index - enter - 2);
	          index = enter + 2;
	        }
	        enter = undefined;
	      }
	    }
	    return extraResolver ? extraResolver(events, context) : events
	  }
	}

	/**
	 * A rather ugly set of instructions which again looks at chunks in the input
	 * stream.
	 * The reason to do this here is that it is *much* faster to parse in reverse.
	 * And that we can’t hook into `null` to split the line suffix before an EOF.
	 * To do: figure out if we can make this into a clean utility, or even in core.
	 * As it will be useful for GFMs literal autolink extension (and maybe even
	 * tables?)
	 *
	 * @type {Resolver}
	 */
	function resolveAllLineSuffixes(events, context) {
	  let eventIndex = 0; // Skip first.

	  while (++eventIndex <= events.length) {
	    if (
	      (eventIndex === events.length ||
	        events[eventIndex][1].type === 'lineEnding') &&
	      events[eventIndex - 1][1].type === 'data'
	    ) {
	      const data = events[eventIndex - 1][1];
	      const chunks = context.sliceStream(data);
	      let index = chunks.length;
	      let bufferIndex = -1;
	      let size = 0;
	      /** @type {boolean | undefined} */
	      let tabs;
	      while (index--) {
	        const chunk = chunks[index];
	        if (typeof chunk === 'string') {
	          bufferIndex = chunk.length;
	          while (chunk.charCodeAt(bufferIndex - 1) === 32) {
	            size++;
	            bufferIndex--;
	          }
	          if (bufferIndex) break
	          bufferIndex = -1;
	        }
	        // Number
	        else if (chunk === -2) {
	          tabs = true;
	          size++;
	        } else if (chunk === -1) ; else {
	          // Replacement character, exit.
	          index++;
	          break
	        }
	      }
	      if (size) {
	        const token = {
	          type:
	            eventIndex === events.length || tabs || size < 2
	              ? 'lineSuffix'
	              : 'hardBreakTrailing',
	          start: {
	            line: data.end.line,
	            column: data.end.column - size,
	            offset: data.end.offset - size,
	            _index: data.start._index + index,
	            _bufferIndex: index
	              ? bufferIndex
	              : data.start._bufferIndex + bufferIndex
	          },
	          end: Object.assign({}, data.end)
	        };
	        data.end = Object.assign({}, token.start);
	        if (data.start.offset === data.end.offset) {
	          Object.assign(data, token);
	        } else {
	          events.splice(
	            eventIndex,
	            0,
	            ['enter', token, context],
	            ['exit', token, context]
	          );
	          eventIndex += 2;
	        }
	      }
	      eventIndex++;
	    }
	  }
	  return events
	}

	/**
	 * @typedef {import('micromark-util-types').Chunk} Chunk
	 * @typedef {import('micromark-util-types').Code} Code
	 * @typedef {import('micromark-util-types').Construct} Construct
	 * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord
	 * @typedef {import('micromark-util-types').Effects} Effects
	 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
	 * @typedef {import('micromark-util-types').ParseContext} ParseContext
	 * @typedef {import('micromark-util-types').Point} Point
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').Token} Token
	 * @typedef {import('micromark-util-types').TokenType} TokenType
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 */

	/**
	 * Create a tokenizer.
	 * Tokenizers deal with one type of data (e.g., containers, flow, text).
	 * The parser is the object dealing with it all.
	 * `initialize` works like other constructs, except that only its `tokenize`
	 * function is used, in which case it doesn’t receive an `ok` or `nok`.
	 * `from` can be given to set the point before the first character, although
	 * when further lines are indented, they must be set with `defineSkip`.
	 *
	 * @param {ParseContext} parser
	 * @param {InitialConstruct} initialize
	 * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]
	 * @returns {TokenizeContext}
	 */
	function createTokenizer(parser, initialize, from) {
	  /** @type {Point} */
	  let point = Object.assign(
	    from
	      ? Object.assign({}, from)
	      : {
	          line: 1,
	          column: 1,
	          offset: 0
	        },
	    {
	      _index: 0,
	      _bufferIndex: -1
	    }
	  );
	  /** @type {Record<string, number>} */
	  const columnStart = {};
	  /** @type {Array<Construct>} */
	  const resolveAllConstructs = [];
	  /** @type {Array<Chunk>} */
	  let chunks = [];
	  /** @type {Array<Token>} */
	  let stack = [];

	  /**
	   * Tools used for tokenizing.
	   *
	   * @type {Effects}
	   */
	  const effects = {
	    consume,
	    enter,
	    exit,
	    attempt: constructFactory(onsuccessfulconstruct),
	    check: constructFactory(onsuccessfulcheck),
	    interrupt: constructFactory(onsuccessfulcheck, {
	      interrupt: true
	    })
	  };

	  /**
	   * State and tools for resolving and serializing.
	   *
	   * @type {TokenizeContext}
	   */
	  const context = {
	    previous: null,
	    code: null,
	    containerState: {},
	    events: [],
	    parser,
	    sliceStream,
	    sliceSerialize,
	    now,
	    defineSkip,
	    write
	  };

	  /**
	   * The state function.
	   *
	   * @type {State | undefined}
	   */
	  let state = initialize.tokenize.call(context, effects);
	  if (initialize.resolveAll) {
	    resolveAllConstructs.push(initialize);
	  }
	  return context

	  /** @type {TokenizeContext['write']} */
	  function write(slice) {
	    chunks = push(chunks, slice);
	    main();

	    // Exit if we’re not done, resolve might change stuff.
	    if (chunks[chunks.length - 1] !== null) {
	      return []
	    }
	    addResult(initialize, 0);

	    // Otherwise, resolve, and exit.
	    context.events = resolveAll(resolveAllConstructs, context.events, context);
	    return context.events
	  }

	  //
	  // Tools.
	  //

	  /** @type {TokenizeContext['sliceSerialize']} */
	  function sliceSerialize(token, expandTabs) {
	    return serializeChunks(sliceStream(token), expandTabs)
	  }

	  /** @type {TokenizeContext['sliceStream']} */
	  function sliceStream(token) {
	    return sliceChunks(chunks, token)
	  }

	  /** @type {TokenizeContext['now']} */
	  function now() {
	    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`
	    const {line, column, offset, _index, _bufferIndex} = point;
	    return {
	      line,
	      column,
	      offset,
	      _index,
	      _bufferIndex
	    }
	  }

	  /** @type {TokenizeContext['defineSkip']} */
	  function defineSkip(value) {
	    columnStart[value.line] = value.column;
	    accountForPotentialSkip();
	  }

	  //
	  // State management.
	  //

	  /**
	   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by
	   * `consume`).
	   * Here is where we walk through the chunks, which either include strings of
	   * several characters, or numerical character codes.
	   * The reason to do this in a loop instead of a call is so the stack can
	   * drain.
	   *
	   * @returns {undefined}
	   */
	  function main() {
	    /** @type {number} */
	    let chunkIndex;
	    while (point._index < chunks.length) {
	      const chunk = chunks[point._index];

	      // If we’re in a buffer chunk, loop through it.
	      if (typeof chunk === 'string') {
	        chunkIndex = point._index;
	        if (point._bufferIndex < 0) {
	          point._bufferIndex = 0;
	        }
	        while (
	          point._index === chunkIndex &&
	          point._bufferIndex < chunk.length
	        ) {
	          go(chunk.charCodeAt(point._bufferIndex));
	        }
	      } else {
	        go(chunk);
	      }
	    }
	  }

	  /**
	   * Deal with one code.
	   *
	   * @param {Code} code
	   * @returns {undefined}
	   */
	  function go(code) {
	    state = state(code);
	  }

	  /** @type {Effects['consume']} */
	  function consume(code) {
	    if (markdownLineEnding(code)) {
	      point.line++;
	      point.column = 1;
	      point.offset += code === -3 ? 2 : 1;
	      accountForPotentialSkip();
	    } else if (code !== -1) {
	      point.column++;
	      point.offset++;
	    }

	    // Not in a string chunk.
	    if (point._bufferIndex < 0) {
	      point._index++;
	    } else {
	      point._bufferIndex++;

	      // At end of string chunk.
	      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference
	      // strings.
	      if (point._bufferIndex === chunks[point._index].length) {
	        point._bufferIndex = -1;
	        point._index++;
	      }
	    }

	    // Expose the previous character.
	    context.previous = code;
	  }

	  /** @type {Effects['enter']} */
	  function enter(type, fields) {
	    /** @type {Token} */
	    // @ts-expect-error Patch instead of assign required fields to help GC.
	    const token = fields || {};
	    token.type = type;
	    token.start = now();
	    context.events.push(['enter', token, context]);
	    stack.push(token);
	    return token
	  }

	  /** @type {Effects['exit']} */
	  function exit(type) {
	    const token = stack.pop();
	    token.end = now();
	    context.events.push(['exit', token, context]);
	    return token
	  }

	  /**
	   * Use results.
	   *
	   * @type {ReturnHandle}
	   */
	  function onsuccessfulconstruct(construct, info) {
	    addResult(construct, info.from);
	  }

	  /**
	   * Discard results.
	   *
	   * @type {ReturnHandle}
	   */
	  function onsuccessfulcheck(_, info) {
	    info.restore();
	  }

	  /**
	   * Factory to attempt/check/interrupt.
	   *
	   * @param {ReturnHandle} onreturn
	   * @param {{interrupt?: boolean | undefined} | undefined} [fields]
	   */
	  function constructFactory(onreturn, fields) {
	    return hook

	    /**
	     * Handle either an object mapping codes to constructs, a list of
	     * constructs, or a single construct.
	     *
	     * @param {Array<Construct> | Construct | ConstructRecord} constructs
	     * @param {State} returnState
	     * @param {State | undefined} [bogusState]
	     * @returns {State}
	     */
	    function hook(constructs, returnState, bogusState) {
	      /** @type {Array<Construct>} */
	      let listOfConstructs;
	      /** @type {number} */
	      let constructIndex;
	      /** @type {Construct} */
	      let currentConstruct;
	      /** @type {Info} */
	      let info;
	      return Array.isArray(constructs) /* c8 ignore next 1 */
	        ? handleListOfConstructs(constructs)
	        : 'tokenize' in constructs
	        ? // @ts-expect-error Looks like a construct.
	          handleListOfConstructs([constructs])
	        : handleMapOfConstructs(constructs)

	      /**
	       * Handle a list of construct.
	       *
	       * @param {ConstructRecord} map
	       * @returns {State}
	       */
	      function handleMapOfConstructs(map) {
	        return start

	        /** @type {State} */
	        function start(code) {
	          const def = code !== null && map[code];
	          const all = code !== null && map.null;
	          const list = [
	            // To do: add more extension tests.
	            /* c8 ignore next 2 */
	            ...(Array.isArray(def) ? def : def ? [def] : []),
	            ...(Array.isArray(all) ? all : all ? [all] : [])
	          ];
	          return handleListOfConstructs(list)(code)
	        }
	      }

	      /**
	       * Handle a list of construct.
	       *
	       * @param {Array<Construct>} list
	       * @returns {State}
	       */
	      function handleListOfConstructs(list) {
	        listOfConstructs = list;
	        constructIndex = 0;
	        if (list.length === 0) {
	          return bogusState
	        }
	        return handleConstruct(list[constructIndex])
	      }

	      /**
	       * Handle a single construct.
	       *
	       * @param {Construct} construct
	       * @returns {State}
	       */
	      function handleConstruct(construct) {
	        return start

	        /** @type {State} */
	        function start(code) {
	          // To do: not needed to store if there is no bogus state, probably?
	          // Currently doesn’t work because `inspect` in document does a check
	          // w/o a bogus, which doesn’t make sense. But it does seem to help perf
	          // by not storing.
	          info = store();
	          currentConstruct = construct;
	          if (!construct.partial) {
	            context.currentConstruct = construct;
	          }

	          // Always populated by defaults.

	          if (
	            construct.name &&
	            context.parser.constructs.disable.null.includes(construct.name)
	          ) {
	            return nok()
	          }
	          return construct.tokenize.call(
	            // If we do have fields, create an object w/ `context` as its
	            // prototype.
	            // This allows a “live binding”, which is needed for `interrupt`.
	            fields ? Object.assign(Object.create(context), fields) : context,
	            effects,
	            ok,
	            nok
	          )(code)
	        }
	      }

	      /** @type {State} */
	      function ok(code) {
	        onreturn(currentConstruct, info);
	        return returnState
	      }

	      /** @type {State} */
	      function nok(code) {
	        info.restore();
	        if (++constructIndex < listOfConstructs.length) {
	          return handleConstruct(listOfConstructs[constructIndex])
	        }
	        return bogusState
	      }
	    }
	  }

	  /**
	   * @param {Construct} construct
	   * @param {number} from
	   * @returns {undefined}
	   */
	  function addResult(construct, from) {
	    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {
	      resolveAllConstructs.push(construct);
	    }
	    if (construct.resolve) {
	      splice(
	        context.events,
	        from,
	        context.events.length - from,
	        construct.resolve(context.events.slice(from), context)
	      );
	    }
	    if (construct.resolveTo) {
	      context.events = construct.resolveTo(context.events, context);
	    }
	  }

	  /**
	   * Store state.
	   *
	   * @returns {Info}
	   */
	  function store() {
	    const startPoint = now();
	    const startPrevious = context.previous;
	    const startCurrentConstruct = context.currentConstruct;
	    const startEventsIndex = context.events.length;
	    const startStack = Array.from(stack);
	    return {
	      restore,
	      from: startEventsIndex
	    }

	    /**
	     * Restore state.
	     *
	     * @returns {undefined}
	     */
	    function restore() {
	      point = startPoint;
	      context.previous = startPrevious;
	      context.currentConstruct = startCurrentConstruct;
	      context.events.length = startEventsIndex;
	      stack = startStack;
	      accountForPotentialSkip();
	    }
	  }

	  /**
	   * Move the current point a bit forward in the line when it’s on a column
	   * skip.
	   *
	   * @returns {undefined}
	   */
	  function accountForPotentialSkip() {
	    if (point.line in columnStart && point.column < 2) {
	      point.column = columnStart[point.line];
	      point.offset += columnStart[point.line] - 1;
	    }
	  }
	}

	/**
	 * Get the chunks from a slice of chunks in the range of a token.
	 *
	 * @param {Array<Chunk>} chunks
	 * @param {Pick<Token, 'end' | 'start'>} token
	 * @returns {Array<Chunk>}
	 */
	function sliceChunks(chunks, token) {
	  const startIndex = token.start._index;
	  const startBufferIndex = token.start._bufferIndex;
	  const endIndex = token.end._index;
	  const endBufferIndex = token.end._bufferIndex;
	  /** @type {Array<Chunk>} */
	  let view;
	  if (startIndex === endIndex) {
	    // @ts-expect-error `_bufferIndex` is used on string chunks.
	    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
	  } else {
	    view = chunks.slice(startIndex, endIndex);
	    if (startBufferIndex > -1) {
	      const head = view[0];
	      if (typeof head === 'string') {
	        view[0] = head.slice(startBufferIndex);
	      } else {
	        view.shift();
	      }
	    }
	    if (endBufferIndex > 0) {
	      // @ts-expect-error `_bufferIndex` is used on string chunks.
	      view.push(chunks[endIndex].slice(0, endBufferIndex));
	    }
	  }
	  return view
	}

	/**
	 * Get the string value of a slice of chunks.
	 *
	 * @param {Array<Chunk>} chunks
	 * @param {boolean | undefined} [expandTabs=false]
	 * @returns {string}
	 */
	function serializeChunks(chunks, expandTabs) {
	  let index = -1;
	  /** @type {Array<string>} */
	  const result = [];
	  /** @type {boolean | undefined} */
	  let atTab;
	  while (++index < chunks.length) {
	    const chunk = chunks[index];
	    /** @type {string} */
	    let value;
	    if (typeof chunk === 'string') {
	      value = chunk;
	    } else
	      switch (chunk) {
	        case -5: {
	          value = '\r';
	          break
	        }
	        case -4: {
	          value = '\n';
	          break
	        }
	        case -3: {
	          value = '\r' + '\n';
	          break
	        }
	        case -2: {
	          value = expandTabs ? ' ' : '\t';
	          break
	        }
	        case -1: {
	          if (!expandTabs && atTab) continue
	          value = ' ';
	          break
	        }
	        default: {
	          // Currently only replacement character.
	          value = String.fromCharCode(chunk);
	        }
	      }
	    atTab = chunk === -2;
	    result.push(value);
	  }
	  return result.join('')
	}

	/**
	 * @typedef {import('micromark-util-types').Extension} Extension
	 */


	/** @satisfies {Extension['document']} */
	const document$1 = {
	  [42]: list$2,
	  [43]: list$2,
	  [45]: list$2,
	  [48]: list$2,
	  [49]: list$2,
	  [50]: list$2,
	  [51]: list$2,
	  [52]: list$2,
	  [53]: list$2,
	  [54]: list$2,
	  [55]: list$2,
	  [56]: list$2,
	  [57]: list$2,
	  [62]: blockQuote
	};

	/** @satisfies {Extension['contentInitial']} */
	const contentInitial = {
	  [91]: definition$1
	};

	/** @satisfies {Extension['flowInitial']} */
	const flowInitial = {
	  [-2]: codeIndented,
	  [-1]: codeIndented,
	  [32]: codeIndented
	};

	/** @satisfies {Extension['flow']} */
	const flow$1 = {
	  [35]: headingAtx,
	  [42]: thematicBreak$2,
	  [45]: [setextUnderline, thematicBreak$2],
	  [60]: htmlFlow,
	  [61]: setextUnderline,
	  [95]: thematicBreak$2,
	  [96]: codeFenced,
	  [126]: codeFenced
	};

	/** @satisfies {Extension['string']} */
	const string = {
	  [38]: characterReference,
	  [92]: characterEscape
	};

	/** @satisfies {Extension['text']} */
	const text$6 = {
	  [-5]: lineEnding,
	  [-4]: lineEnding,
	  [-3]: lineEnding,
	  [33]: labelStartImage,
	  [38]: characterReference,
	  [42]: attention,
	  [60]: [autolink, htmlText],
	  [91]: labelStartLink,
	  [92]: [hardBreakEscape, characterEscape],
	  [93]: labelEnd,
	  [95]: attention,
	  [96]: codeText
	};

	/** @satisfies {Extension['insideSpan']} */
	const insideSpan = {
	  null: [attention, resolver]
	};

	/** @satisfies {Extension['attentionMarkers']} */
	const attentionMarkers = {
	  null: [42, 95]
	};

	/** @satisfies {Extension['disable']} */
	const disable = {
	  null: []
	};

	const defaultConstructs = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
		__proto__: null,
		attentionMarkers,
		contentInitial,
		disable,
		document: document$1,
		flow: flow$1,
		flowInitial,
		insideSpan,
		string,
		text: text$6
	}, Symbol.toStringTag, { value: 'Module' }));

	/**
	 * @typedef {import('micromark-util-types').Create} Create
	 * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension
	 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
	 * @typedef {import('micromark-util-types').ParseContext} ParseContext
	 * @typedef {import('micromark-util-types').ParseOptions} ParseOptions
	 */


	/**
	 * @param {ParseOptions | null | undefined} [options]
	 * @returns {ParseContext}
	 */
	function parse$3(options) {
	  const settings = options || {};
	  const constructs =
	    /** @type {FullNormalizedExtension} */
	    combineExtensions([defaultConstructs, ...(settings.extensions || [])]);

	  /** @type {ParseContext} */
	  const parser = {
	    defined: [],
	    lazy: {},
	    constructs,
	    content: create(content$1),
	    document: create(document$2),
	    flow: create(flow$2),
	    string: create(string$1),
	    text: create(text$7)
	  };
	  return parser

	  /**
	   * @param {InitialConstruct} initial
	   */
	  function create(initial) {
	    return creator
	    /** @type {Create} */
	    function creator(from) {
	      return createTokenizer(parser, initial, from)
	    }
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Event} Event
	 */


	/**
	 * @param {Array<Event>} events
	 * @returns {Array<Event>}
	 */
	function postprocess(events) {
	  while (!subtokenize(events)) {
	    // Empty
	  }
	  return events
	}

	/**
	 * @typedef {import('micromark-util-types').Chunk} Chunk
	 * @typedef {import('micromark-util-types').Code} Code
	 * @typedef {import('micromark-util-types').Encoding} Encoding
	 * @typedef {import('micromark-util-types').Value} Value
	 */

	/**
	 * @callback Preprocessor
	 * @param {Value} value
	 * @param {Encoding | null | undefined} [encoding]
	 * @param {boolean | null | undefined} [end=false]
	 * @returns {Array<Chunk>}
	 */

	const search$3 = /[\0\t\n\r]/g;

	/**
	 * @returns {Preprocessor}
	 */
	function preprocess() {
	  let column = 1;
	  let buffer = '';
	  /** @type {boolean | undefined} */
	  let start = true;
	  /** @type {boolean | undefined} */
	  let atCarriageReturn;
	  return preprocessor

	  /** @type {Preprocessor} */
	  // eslint-disable-next-line complexity
	  function preprocessor(value, encoding, end) {
	    /** @type {Array<Chunk>} */
	    const chunks = [];
	    /** @type {RegExpMatchArray | null} */
	    let match;
	    /** @type {number} */
	    let next;
	    /** @type {number} */
	    let startPosition;
	    /** @type {number} */
	    let endPosition;
	    /** @type {Code} */
	    let code;
	    value =
	      buffer +
	      (typeof value === 'string'
	        ? value.toString()
	        : new TextDecoder(encoding || undefined).decode(value));
	    startPosition = 0;
	    buffer = '';
	    if (start) {
	      // To do: `markdown-rs` actually parses BOMs (byte order mark).
	      if (value.charCodeAt(0) === 65279) {
	        startPosition++;
	      }
	      start = undefined;
	    }
	    while (startPosition < value.length) {
	      search$3.lastIndex = startPosition;
	      match = search$3.exec(value);
	      endPosition =
	        match && match.index !== undefined ? match.index : value.length;
	      code = value.charCodeAt(endPosition);
	      if (!match) {
	        buffer = value.slice(startPosition);
	        break
	      }
	      if (code === 10 && startPosition === endPosition && atCarriageReturn) {
	        chunks.push(-3);
	        atCarriageReturn = undefined;
	      } else {
	        if (atCarriageReturn) {
	          chunks.push(-5);
	          atCarriageReturn = undefined;
	        }
	        if (startPosition < endPosition) {
	          chunks.push(value.slice(startPosition, endPosition));
	          column += endPosition - startPosition;
	        }
	        switch (code) {
	          case 0: {
	            chunks.push(65533);
	            column++;
	            break
	          }
	          case 9: {
	            next = Math.ceil(column / 4) * 4;
	            chunks.push(-2);
	            while (column++ < next) chunks.push(-1);
	            break
	          }
	          case 10: {
	            chunks.push(-4);
	            column = 1;
	            break
	          }
	          default: {
	            atCarriageReturn = true;
	            column = 1;
	          }
	        }
	      }
	      startPosition = endPosition + 1;
	    }
	    if (end) {
	      if (atCarriageReturn) chunks.push(-5);
	      if (buffer) chunks.push(buffer);
	      chunks.push(null);
	    }
	    return chunks
	  }
	}

	const characterEscapeOrReference =
	  /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;

	/**
	 * Decode markdown strings (which occur in places such as fenced code info
	 * strings, destinations, labels, and titles).
	 *
	 * The “string” content type allows character escapes and -references.
	 * This decodes those.
	 *
	 * @param {string} value
	 *   Value to decode.
	 * @returns {string}
	 *   Decoded value.
	 */
	function decodeString(value) {
	  return value.replace(characterEscapeOrReference, decode)
	}

	/**
	 * @param {string} $0
	 * @param {string} $1
	 * @param {string} $2
	 * @returns {string}
	 */
	function decode($0, $1, $2) {
	  if ($1) {
	    // Escape.
	    return $1
	  }

	  // Reference.
	  const head = $2.charCodeAt(0);
	  if (head === 35) {
	    const head = $2.charCodeAt(1);
	    const hex = head === 120 || head === 88;
	    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)
	  }
	  return decodeNamedCharacterReference($2) || $0
	}

	/**
	 * @typedef {import('mdast').Break} Break
	 * @typedef {import('mdast').Blockquote} Blockquote
	 * @typedef {import('mdast').Code} Code
	 * @typedef {import('mdast').Definition} Definition
	 * @typedef {import('mdast').Emphasis} Emphasis
	 * @typedef {import('mdast').Heading} Heading
	 * @typedef {import('mdast').Html} Html
	 * @typedef {import('mdast').Image} Image
	 * @typedef {import('mdast').InlineCode} InlineCode
	 * @typedef {import('mdast').Link} Link
	 * @typedef {import('mdast').List} List
	 * @typedef {import('mdast').ListItem} ListItem
	 * @typedef {import('mdast').Nodes} Nodes
	 * @typedef {import('mdast').Paragraph} Paragraph
	 * @typedef {import('mdast').Parent} Parent
	 * @typedef {import('mdast').PhrasingContent} PhrasingContent
	 * @typedef {import('mdast').ReferenceType} ReferenceType
	 * @typedef {import('mdast').Root} Root
	 * @typedef {import('mdast').Strong} Strong
	 * @typedef {import('mdast').Text} Text
	 * @typedef {import('mdast').ThematicBreak} ThematicBreak
	 *
	 * @typedef {import('micromark-util-types').Encoding} Encoding
	 * @typedef {import('micromark-util-types').Event} Event
	 * @typedef {import('micromark-util-types').ParseOptions} ParseOptions
	 * @typedef {import('micromark-util-types').Token} Token
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Value} Value
	 *
	 * @typedef {import('unist').Point} Point
	 *
	 * @typedef {import('../index.js').CompileData} CompileData
	 */

	const own$d = {}.hasOwnProperty;

	/**
	 * Turn markdown into a syntax tree.
	 *
	 * @overload
	 * @param {Value} value
	 * @param {Encoding | null | undefined} [encoding]
	 * @param {Options | null | undefined} [options]
	 * @returns {Root}
	 *
	 * @overload
	 * @param {Value} value
	 * @param {Options | null | undefined} [options]
	 * @returns {Root}
	 *
	 * @param {Value} value
	 *   Markdown to parse.
	 * @param {Encoding | Options | null | undefined} [encoding]
	 *   Character encoding for when `value` is `Buffer`.
	 * @param {Options | null | undefined} [options]
	 *   Configuration.
	 * @returns {Root}
	 *   mdast tree.
	 */
	function fromMarkdown(value, encoding, options) {
	  if (typeof encoding !== 'string') {
	    options = encoding;
	    encoding = undefined;
	  }
	  return compiler(options)(
	    postprocess(
	      parse$3(options).document().write(preprocess()(value, encoding, true))
	    )
	  )
	}

	/**
	 * Note this compiler only understand complete buffering, not streaming.
	 *
	 * @param {Options | null | undefined} [options]
	 */
	function compiler(options) {
	  /** @type {Config} */
	  const config = {
	    transforms: [],
	    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],
	    enter: {
	      autolink: opener(link),
	      autolinkProtocol: onenterdata,
	      autolinkEmail: onenterdata,
	      atxHeading: opener(heading),
	      blockQuote: opener(blockQuote),
	      characterEscape: onenterdata,
	      characterReference: onenterdata,
	      codeFenced: opener(codeFlow),
	      codeFencedFenceInfo: buffer,
	      codeFencedFenceMeta: buffer,
	      codeIndented: opener(codeFlow, buffer),
	      codeText: opener(codeText, buffer),
	      codeTextData: onenterdata,
	      data: onenterdata,
	      codeFlowValue: onenterdata,
	      definition: opener(definition),
	      definitionDestinationString: buffer,
	      definitionLabelString: buffer,
	      definitionTitleString: buffer,
	      emphasis: opener(emphasis),
	      hardBreakEscape: opener(hardBreak),
	      hardBreakTrailing: opener(hardBreak),
	      htmlFlow: opener(html, buffer),
	      htmlFlowData: onenterdata,
	      htmlText: opener(html, buffer),
	      htmlTextData: onenterdata,
	      image: opener(image),
	      label: buffer,
	      link: opener(link),
	      listItem: opener(listItem),
	      listItemValue: onenterlistitemvalue,
	      listOrdered: opener(list, onenterlistordered),
	      listUnordered: opener(list),
	      paragraph: opener(paragraph),
	      reference: onenterreference,
	      referenceString: buffer,
	      resourceDestinationString: buffer,
	      resourceTitleString: buffer,
	      setextHeading: opener(heading),
	      strong: opener(strong),
	      thematicBreak: opener(thematicBreak)
	    },
	    exit: {
	      atxHeading: closer(),
	      atxHeadingSequence: onexitatxheadingsequence,
	      autolink: closer(),
	      autolinkEmail: onexitautolinkemail,
	      autolinkProtocol: onexitautolinkprotocol,
	      blockQuote: closer(),
	      characterEscapeValue: onexitdata,
	      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
	      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
	      characterReferenceValue: onexitcharacterreferencevalue,
	      codeFenced: closer(onexitcodefenced),
	      codeFencedFence: onexitcodefencedfence,
	      codeFencedFenceInfo: onexitcodefencedfenceinfo,
	      codeFencedFenceMeta: onexitcodefencedfencemeta,
	      codeFlowValue: onexitdata,
	      codeIndented: closer(onexitcodeindented),
	      codeText: closer(onexitcodetext),
	      codeTextData: onexitdata,
	      data: onexitdata,
	      definition: closer(),
	      definitionDestinationString: onexitdefinitiondestinationstring,
	      definitionLabelString: onexitdefinitionlabelstring,
	      definitionTitleString: onexitdefinitiontitlestring,
	      emphasis: closer(),
	      hardBreakEscape: closer(onexithardbreak),
	      hardBreakTrailing: closer(onexithardbreak),
	      htmlFlow: closer(onexithtmlflow),
	      htmlFlowData: onexitdata,
	      htmlText: closer(onexithtmltext),
	      htmlTextData: onexitdata,
	      image: closer(onexitimage),
	      label: onexitlabel,
	      labelText: onexitlabeltext,
	      lineEnding: onexitlineending,
	      link: closer(onexitlink),
	      listItem: closer(),
	      listOrdered: closer(),
	      listUnordered: closer(),
	      paragraph: closer(),
	      referenceString: onexitreferencestring,
	      resourceDestinationString: onexitresourcedestinationstring,
	      resourceTitleString: onexitresourcetitlestring,
	      resource: onexitresource,
	      setextHeading: closer(onexitsetextheading),
	      setextHeadingLineSequence: onexitsetextheadinglinesequence,
	      setextHeadingText: onexitsetextheadingtext,
	      strong: closer(),
	      thematicBreak: closer()
	    }
	  };
	  configure(config, (options || {}).mdastExtensions || []);

	  /** @type {CompileData} */
	  const data = {};
	  return compile

	  /**
	   * Turn micromark events into an mdast tree.
	   *
	   * @param {Array<Event>} events
	   *   Events.
	   * @returns {Root}
	   *   mdast tree.
	   */
	  function compile(events) {
	    /** @type {Root} */
	    let tree = {
	      type: 'root',
	      children: []
	    };
	    /** @type {Omit<CompileContext, 'sliceSerialize'>} */
	    const context = {
	      stack: [tree],
	      tokenStack: [],
	      config,
	      enter,
	      exit,
	      buffer,
	      resume,
	      data
	    };
	    /** @type {Array<number>} */
	    const listStack = [];
	    let index = -1;
	    while (++index < events.length) {
	      // We preprocess lists to add `listItem` tokens, and to infer whether
	      // items the list itself are spread out.
	      if (
	        events[index][1].type === 'listOrdered' ||
	        events[index][1].type === 'listUnordered'
	      ) {
	        if (events[index][0] === 'enter') {
	          listStack.push(index);
	        } else {
	          const tail = listStack.pop();
	          index = prepareList(events, tail, index);
	        }
	      }
	    }
	    index = -1;
	    while (++index < events.length) {
	      const handler = config[events[index][0]];
	      if (own$d.call(handler, events[index][1].type)) {
	        handler[events[index][1].type].call(
	          Object.assign(
	            {
	              sliceSerialize: events[index][2].sliceSerialize
	            },
	            context
	          ),
	          events[index][1]
	        );
	      }
	    }

	    // Handle tokens still being open.
	    if (context.tokenStack.length > 0) {
	      const tail = context.tokenStack[context.tokenStack.length - 1];
	      const handler = tail[1] || defaultOnError;
	      handler.call(context, undefined, tail[0]);
	    }

	    // Figure out `root` position.
	    tree.position = {
	      start: point$1(
	        events.length > 0
	          ? events[0][1].start
	          : {
	              line: 1,
	              column: 1,
	              offset: 0
	            }
	      ),
	      end: point$1(
	        events.length > 0
	          ? events[events.length - 2][1].end
	          : {
	              line: 1,
	              column: 1,
	              offset: 0
	            }
	      )
	    };

	    // Call transforms.
	    index = -1;
	    while (++index < config.transforms.length) {
	      tree = config.transforms[index](tree) || tree;
	    }
	    return tree
	  }

	  /**
	   * @param {Array<Event>} events
	   * @param {number} start
	   * @param {number} length
	   * @returns {number}
	   */
	  function prepareList(events, start, length) {
	    let index = start - 1;
	    let containerBalance = -1;
	    let listSpread = false;
	    /** @type {Token | undefined} */
	    let listItem;
	    /** @type {number | undefined} */
	    let lineIndex;
	    /** @type {number | undefined} */
	    let firstBlankLineIndex;
	    /** @type {boolean | undefined} */
	    let atMarker;
	    while (++index <= length) {
	      const event = events[index];
	      switch (event[1].type) {
	        case 'listUnordered':
	        case 'listOrdered':
	        case 'blockQuote': {
	          if (event[0] === 'enter') {
	            containerBalance++;
	          } else {
	            containerBalance--;
	          }
	          atMarker = undefined;
	          break
	        }
	        case 'lineEndingBlank': {
	          if (event[0] === 'enter') {
	            if (
	              listItem &&
	              !atMarker &&
	              !containerBalance &&
	              !firstBlankLineIndex
	            ) {
	              firstBlankLineIndex = index;
	            }
	            atMarker = undefined;
	          }
	          break
	        }
	        case 'linePrefix':
	        case 'listItemValue':
	        case 'listItemMarker':
	        case 'listItemPrefix':
	        case 'listItemPrefixWhitespace': {
	          // Empty.

	          break
	        }
	        default: {
	          atMarker = undefined;
	        }
	      }
	      if (
	        (!containerBalance &&
	          event[0] === 'enter' &&
	          event[1].type === 'listItemPrefix') ||
	        (containerBalance === -1 &&
	          event[0] === 'exit' &&
	          (event[1].type === 'listUnordered' ||
	            event[1].type === 'listOrdered'))
	      ) {
	        if (listItem) {
	          let tailIndex = index;
	          lineIndex = undefined;
	          while (tailIndex--) {
	            const tailEvent = events[tailIndex];
	            if (
	              tailEvent[1].type === 'lineEnding' ||
	              tailEvent[1].type === 'lineEndingBlank'
	            ) {
	              if (tailEvent[0] === 'exit') continue
	              if (lineIndex) {
	                events[lineIndex][1].type = 'lineEndingBlank';
	                listSpread = true;
	              }
	              tailEvent[1].type = 'lineEnding';
	              lineIndex = tailIndex;
	            } else if (
	              tailEvent[1].type === 'linePrefix' ||
	              tailEvent[1].type === 'blockQuotePrefix' ||
	              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||
	              tailEvent[1].type === 'blockQuoteMarker' ||
	              tailEvent[1].type === 'listItemIndent'
	            ) ; else {
	              break
	            }
	          }
	          if (
	            firstBlankLineIndex &&
	            (!lineIndex || firstBlankLineIndex < lineIndex)
	          ) {
	            listItem._spread = true;
	          }

	          // Fix position.
	          listItem.end = Object.assign(
	            {},
	            lineIndex ? events[lineIndex][1].start : event[1].end
	          );
	          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);
	          index++;
	          length++;
	        }

	        // Create a new list item.
	        if (event[1].type === 'listItemPrefix') {
	          /** @type {Token} */
	          const item = {
	            type: 'listItem',
	            _spread: false,
	            start: Object.assign({}, event[1].start),
	            // @ts-expect-error: we’ll add `end` in a second.
	            end: undefined
	          };
	          listItem = item;
	          events.splice(index, 0, ['enter', item, event[2]]);
	          index++;
	          length++;
	          firstBlankLineIndex = undefined;
	          atMarker = true;
	        }
	      }
	    }
	    events[start][1]._spread = listSpread;
	    return length
	  }

	  /**
	   * Create an opener handle.
	   *
	   * @param {(token: Token) => Nodes} create
	   *   Create a node.
	   * @param {Handle | undefined} [and]
	   *   Optional function to also run.
	   * @returns {Handle}
	   *   Handle.
	   */
	  function opener(create, and) {
	    return open

	    /**
	     * @this {CompileContext}
	     * @param {Token} token
	     * @returns {undefined}
	     */
	    function open(token) {
	      enter.call(this, create(token), token);
	      if (and) and.call(this, token);
	    }
	  }

	  /**
	   * @this {CompileContext}
	   * @returns {undefined}
	   */
	  function buffer() {
	    this.stack.push({
	      type: 'fragment',
	      children: []
	    });
	  }

	  /**
	   * @this {CompileContext}
	   *   Context.
	   * @param {Nodes} node
	   *   Node to enter.
	   * @param {Token} token
	   *   Corresponding token.
	   * @param {OnEnterError | undefined} [errorHandler]
	   *   Handle the case where this token is open, but it is closed by something else.
	   * @returns {undefined}
	   *   Nothing.
	   */
	  function enter(node, token, errorHandler) {
	    const parent = this.stack[this.stack.length - 1];
	    /** @type {Array<Nodes>} */
	    const siblings = parent.children;
	    siblings.push(node);
	    this.stack.push(node);
	    this.tokenStack.push([token, errorHandler]);
	    node.position = {
	      start: point$1(token.start),
	      // @ts-expect-error: `end` will be patched later.
	      end: undefined
	    };
	  }

	  /**
	   * Create a closer handle.
	   *
	   * @param {Handle | undefined} [and]
	   *   Optional function to also run.
	   * @returns {Handle}
	   *   Handle.
	   */
	  function closer(and) {
	    return close

	    /**
	     * @this {CompileContext}
	     * @param {Token} token
	     * @returns {undefined}
	     */
	    function close(token) {
	      if (and) and.call(this, token);
	      exit.call(this, token);
	    }
	  }

	  /**
	   * @this {CompileContext}
	   *   Context.
	   * @param {Token} token
	   *   Corresponding token.
	   * @param {OnExitError | undefined} [onExitError]
	   *   Handle the case where another token is open.
	   * @returns {undefined}
	   *   Nothing.
	   */
	  function exit(token, onExitError) {
	    const node = this.stack.pop();
	    const open = this.tokenStack.pop();
	    if (!open) {
	      throw new Error(
	        'Cannot close `' +
	          token.type +
	          '` (' +
	          stringifyPosition({
	            start: token.start,
	            end: token.end
	          }) +
	          '): it’s not open'
	      )
	    } else if (open[0].type !== token.type) {
	      if (onExitError) {
	        onExitError.call(this, token, open[0]);
	      } else {
	        const handler = open[1] || defaultOnError;
	        handler.call(this, token, open[0]);
	      }
	    }
	    node.position.end = point$1(token.end);
	  }

	  /**
	   * @this {CompileContext}
	   * @returns {string}
	   */
	  function resume() {
	    return toString$3(this.stack.pop())
	  }

	  //
	  // Handlers.
	  //

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */
	  function onenterlistordered() {
	    this.data.expectingFirstListItemValue = true;
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */
	  function onenterlistitemvalue(token) {
	    if (this.data.expectingFirstListItemValue) {
	      const ancestor = this.stack[this.stack.length - 2];
	      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);
	      this.data.expectingFirstListItemValue = undefined;
	    }
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */
	  function onexitcodefencedfenceinfo() {
	    const data = this.resume();
	    const node = this.stack[this.stack.length - 1];
	    node.lang = data;
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */
	  function onexitcodefencedfencemeta() {
	    const data = this.resume();
	    const node = this.stack[this.stack.length - 1];
	    node.meta = data;
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */
	  function onexitcodefencedfence() {
	    // Exit if this is the closing fence.
	    if (this.data.flowCodeInside) return
	    this.buffer();
	    this.data.flowCodeInside = true;
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */
	  function onexitcodefenced() {
	    const data = this.resume();
	    const node = this.stack[this.stack.length - 1];
	    node.value = data.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, '');
	    this.data.flowCodeInside = undefined;
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */
	  function onexitcodeindented() {
	    const data = this.resume();
	    const node = this.stack[this.stack.length - 1];
	    node.value = data.replace(/(\r?\n|\r)$/g, '');
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */
	  function onexitdefinitionlabelstring(token) {
	    const label = this.resume();
	    const node = this.stack[this.stack.length - 1];
	    node.label = label;
	    node.identifier = normalizeIdentifier(
	      this.sliceSerialize(token)
	    ).toLowerCase();
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */
	  function onexitdefinitiontitlestring() {
	    const data = this.resume();
	    const node = this.stack[this.stack.length - 1];
	    node.title = data;
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */
	  function onexitdefinitiondestinationstring() {
	    const data = this.resume();
	    const node = this.stack[this.stack.length - 1];
	    node.url = data;
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */
	  function onexitatxheadingsequence(token) {
	    const node = this.stack[this.stack.length - 1];
	    if (!node.depth) {
	      const depth = this.sliceSerialize(token).length;
	      node.depth = depth;
	    }
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */
	  function onexitsetextheadingtext() {
	    this.data.setextHeadingSlurpLineEnding = true;
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */
	  function onexitsetextheadinglinesequence(token) {
	    const node = this.stack[this.stack.length - 1];
	    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */
	  function onexitsetextheading() {
	    this.data.setextHeadingSlurpLineEnding = undefined;
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */

	  function onenterdata(token) {
	    const node = this.stack[this.stack.length - 1];
	    /** @type {Array<Nodes>} */
	    const siblings = node.children;
	    let tail = siblings[siblings.length - 1];
	    if (!tail || tail.type !== 'text') {
	      // Add a new text node.
	      tail = text();
	      tail.position = {
	        start: point$1(token.start),
	        // @ts-expect-error: we’ll add `end` later.
	        end: undefined
	      };
	      siblings.push(tail);
	    }
	    this.stack.push(tail);
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */

	  function onexitdata(token) {
	    const tail = this.stack.pop();
	    tail.value += this.sliceSerialize(token);
	    tail.position.end = point$1(token.end);
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */

	  function onexitlineending(token) {
	    const context = this.stack[this.stack.length - 1];
	    // If we’re at a hard break, include the line ending in there.
	    if (this.data.atHardBreak) {
	      const tail = context.children[context.children.length - 1];
	      tail.position.end = point$1(token.end);
	      this.data.atHardBreak = undefined;
	      return
	    }
	    if (
	      !this.data.setextHeadingSlurpLineEnding &&
	      config.canContainEols.includes(context.type)
	    ) {
	      onenterdata.call(this, token);
	      onexitdata.call(this, token);
	    }
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */

	  function onexithardbreak() {
	    this.data.atHardBreak = true;
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */

	  function onexithtmlflow() {
	    const data = this.resume();
	    const node = this.stack[this.stack.length - 1];
	    node.value = data;
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */

	  function onexithtmltext() {
	    const data = this.resume();
	    const node = this.stack[this.stack.length - 1];
	    node.value = data;
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */

	  function onexitcodetext() {
	    const data = this.resume();
	    const node = this.stack[this.stack.length - 1];
	    node.value = data;
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */

	  function onexitlink() {
	    const node = this.stack[this.stack.length - 1];
	    // Note: there are also `identifier` and `label` fields on this link node!
	    // These are used / cleaned here.
	    // To do: clean.
	    if (this.data.inReference) {
	      /** @type {ReferenceType} */
	      const referenceType = this.data.referenceType || 'shortcut';
	      node.type += 'Reference';
	      // @ts-expect-error: mutate.
	      node.referenceType = referenceType;
	      // @ts-expect-error: mutate.
	      delete node.url;
	      delete node.title;
	    } else {
	      // @ts-expect-error: mutate.
	      delete node.identifier;
	      // @ts-expect-error: mutate.
	      delete node.label;
	    }
	    this.data.referenceType = undefined;
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */

	  function onexitimage() {
	    const node = this.stack[this.stack.length - 1];
	    // Note: there are also `identifier` and `label` fields on this link node!
	    // These are used / cleaned here.
	    // To do: clean.
	    if (this.data.inReference) {
	      /** @type {ReferenceType} */
	      const referenceType = this.data.referenceType || 'shortcut';
	      node.type += 'Reference';
	      // @ts-expect-error: mutate.
	      node.referenceType = referenceType;
	      // @ts-expect-error: mutate.
	      delete node.url;
	      delete node.title;
	    } else {
	      // @ts-expect-error: mutate.
	      delete node.identifier;
	      // @ts-expect-error: mutate.
	      delete node.label;
	    }
	    this.data.referenceType = undefined;
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */

	  function onexitlabeltext(token) {
	    const string = this.sliceSerialize(token);
	    const ancestor = this.stack[this.stack.length - 2];
	    // @ts-expect-error: stash this on the node, as it might become a reference
	    // later.
	    ancestor.label = decodeString(string);
	    // @ts-expect-error: same as above.
	    ancestor.identifier = normalizeIdentifier(string).toLowerCase();
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */

	  function onexitlabel() {
	    const fragment = this.stack[this.stack.length - 1];
	    const value = this.resume();
	    const node = this.stack[this.stack.length - 1];
	    // Assume a reference.
	    this.data.inReference = true;
	    if (node.type === 'link') {
	      /** @type {Array<PhrasingContent>} */
	      const children = fragment.children;
	      node.children = children;
	    } else {
	      node.alt = value;
	    }
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */

	  function onexitresourcedestinationstring() {
	    const data = this.resume();
	    const node = this.stack[this.stack.length - 1];
	    node.url = data;
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */

	  function onexitresourcetitlestring() {
	    const data = this.resume();
	    const node = this.stack[this.stack.length - 1];
	    node.title = data;
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */

	  function onexitresource() {
	    this.data.inReference = undefined;
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */

	  function onenterreference() {
	    this.data.referenceType = 'collapsed';
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */

	  function onexitreferencestring(token) {
	    const label = this.resume();
	    const node = this.stack[this.stack.length - 1];
	    // @ts-expect-error: stash this on the node, as it might become a reference
	    // later.
	    node.label = label;
	    // @ts-expect-error: same as above.
	    node.identifier = normalizeIdentifier(
	      this.sliceSerialize(token)
	    ).toLowerCase();
	    this.data.referenceType = 'full';
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */

	  function onexitcharacterreferencemarker(token) {
	    this.data.characterReferenceType = token.type;
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */
	  function onexitcharacterreferencevalue(token) {
	    const data = this.sliceSerialize(token);
	    const type = this.data.characterReferenceType;
	    /** @type {string} */
	    let value;
	    if (type) {
	      value = decodeNumericCharacterReference(
	        data,
	        type === 'characterReferenceMarkerNumeric' ? 10 : 16
	      );
	      this.data.characterReferenceType = undefined;
	    } else {
	      const result = decodeNamedCharacterReference(data);
	      value = result;
	    }
	    const tail = this.stack.pop();
	    tail.value += value;
	    tail.position.end = point$1(token.end);
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */
	  function onexitautolinkprotocol(token) {
	    onexitdata.call(this, token);
	    const node = this.stack[this.stack.length - 1];
	    node.url = this.sliceSerialize(token);
	  }

	  /**
	   * @this {CompileContext}
	   * @type {Handle}
	   */
	  function onexitautolinkemail(token) {
	    onexitdata.call(this, token);
	    const node = this.stack[this.stack.length - 1];
	    node.url = 'mailto:' + this.sliceSerialize(token);
	  }

	  //
	  // Creaters.
	  //

	  /** @returns {Blockquote} */
	  function blockQuote() {
	    return {
	      type: 'blockquote',
	      children: []
	    }
	  }

	  /** @returns {Code} */
	  function codeFlow() {
	    return {
	      type: 'code',
	      lang: null,
	      meta: null,
	      value: ''
	    }
	  }

	  /** @returns {InlineCode} */
	  function codeText() {
	    return {
	      type: 'inlineCode',
	      value: ''
	    }
	  }

	  /** @returns {Definition} */
	  function definition() {
	    return {
	      type: 'definition',
	      identifier: '',
	      label: null,
	      title: null,
	      url: ''
	    }
	  }

	  /** @returns {Emphasis} */
	  function emphasis() {
	    return {
	      type: 'emphasis',
	      children: []
	    }
	  }

	  /** @returns {Heading} */
	  function heading() {
	    return {
	      type: 'heading',
	      // @ts-expect-error `depth` will be set later.
	      depth: 0,
	      children: []
	    }
	  }

	  /** @returns {Break} */
	  function hardBreak() {
	    return {
	      type: 'break'
	    }
	  }

	  /** @returns {Html} */
	  function html() {
	    return {
	      type: 'html',
	      value: ''
	    }
	  }

	  /** @returns {Image} */
	  function image() {
	    return {
	      type: 'image',
	      title: null,
	      url: '',
	      alt: null
	    }
	  }

	  /** @returns {Link} */
	  function link() {
	    return {
	      type: 'link',
	      title: null,
	      url: '',
	      children: []
	    }
	  }

	  /**
	   * @param {Token} token
	   * @returns {List}
	   */
	  function list(token) {
	    return {
	      type: 'list',
	      ordered: token.type === 'listOrdered',
	      start: null,
	      spread: token._spread,
	      children: []
	    }
	  }

	  /**
	   * @param {Token} token
	   * @returns {ListItem}
	   */
	  function listItem(token) {
	    return {
	      type: 'listItem',
	      spread: token._spread,
	      checked: null,
	      children: []
	    }
	  }

	  /** @returns {Paragraph} */
	  function paragraph() {
	    return {
	      type: 'paragraph',
	      children: []
	    }
	  }

	  /** @returns {Strong} */
	  function strong() {
	    return {
	      type: 'strong',
	      children: []
	    }
	  }

	  /** @returns {Text} */
	  function text() {
	    return {
	      type: 'text',
	      value: ''
	    }
	  }

	  /** @returns {ThematicBreak} */
	  function thematicBreak() {
	    return {
	      type: 'thematicBreak'
	    }
	  }
	}

	/**
	 * Copy a point-like value.
	 *
	 * @param {Point} d
	 *   Point-like value.
	 * @returns {Point}
	 *   unist point.
	 */
	function point$1(d) {
	  return {
	    line: d.line,
	    column: d.column,
	    offset: d.offset
	  }
	}

	/**
	 * @param {Config} combined
	 * @param {Array<Array<Extension> | Extension>} extensions
	 * @returns {undefined}
	 */
	function configure(combined, extensions) {
	  let index = -1;
	  while (++index < extensions.length) {
	    const value = extensions[index];
	    if (Array.isArray(value)) {
	      configure(combined, value);
	    } else {
	      extension(combined, value);
	    }
	  }
	}

	/**
	 * @param {Config} combined
	 * @param {Extension} extension
	 * @returns {undefined}
	 */
	function extension(combined, extension) {
	  /** @type {keyof Extension} */
	  let key;
	  for (key in extension) {
	    if (own$d.call(extension, key)) {
	      switch (key) {
	        case 'canContainEols': {
	          const right = extension[key];
	          if (right) {
	            combined[key].push(...right);
	          }
	          break
	        }
	        case 'transforms': {
	          const right = extension[key];
	          if (right) {
	            combined[key].push(...right);
	          }
	          break
	        }
	        case 'enter':
	        case 'exit': {
	          const right = extension[key];
	          if (right) {
	            Object.assign(combined[key], right);
	          }
	          break
	        }
	        // No default
	      }
	    }
	  }
	}

	/** @type {OnEnterError} */
	function defaultOnError(left, right) {
	  if (left) {
	    throw new Error(
	      'Cannot close `' +
	        left.type +
	        '` (' +
	        stringifyPosition({
	          start: left.start,
	          end: left.end
	        }) +
	        '): a different token (`' +
	        right.type +
	        '`, ' +
	        stringifyPosition({
	          start: right.start,
	          end: right.end
	        }) +
	        ') is open'
	    )
	  } else {
	    throw new Error(
	      'Cannot close document, a token (`' +
	        right.type +
	        '`, ' +
	        stringifyPosition({
	          start: right.start,
	          end: right.end
	        }) +
	        ') is still open'
	    )
	  }
	}

	/**
	 * @typedef {import('mdast').Root} Root
	 * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions
	 * @typedef {import('unified').Parser<Root>} Parser
	 * @typedef {import('unified').Processor<Root>} Processor
	 */


	/**
	 * Aadd support for parsing from markdown.
	 *
	 * @param {Readonly<Options> | null | undefined} [options]
	 *   Configuration (optional).
	 * @returns {undefined}
	 *   Nothing.
	 */
	function remarkParse(options) {
	  /** @type {Processor} */
	  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.
	  const self = this;

	  self.parser = parser;

	  /**
	   * @type {Parser}
	   */
	  function parser(doc) {
	    return fromMarkdown(doc, {
	      ...self.data('settings'),
	      ...options,
	      // Note: these options are not in the readme.
	      // The goal is for them to be set by plugins on `data` instead of being
	      // passed by users.
	      extensions: self.data('micromarkExtensions') || [],
	      mdastExtensions: self.data('fromMarkdownExtensions') || []
	    })
	  }
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('mdast').Blockquote} Blockquote
	 * @typedef {import('../state.js').State} State
	 */


	/**
	 * Turn an mdast `blockquote` node into hast.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {Blockquote} node
	 *   mdast node.
	 * @returns {Element}
	 *   hast node.
	 */
	function blockquote$1(state, node) {
	  /** @type {Element} */
	  const result = {
	    type: 'element',
	    tagName: 'blockquote',
	    properties: {},
	    children: state.wrap(state.all(node), true)
	  };
	  state.patch(node, result);
	  return state.applyData(node, result)
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').Text} Text
	 * @typedef {import('mdast').Break} Break
	 * @typedef {import('../state.js').State} State
	 */


	/**
	 * Turn an mdast `break` node into hast.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {Break} node
	 *   mdast node.
	 * @returns {Array<Element | Text>}
	 *   hast element content.
	 */
	function hardBreak$1(state, node) {
	  /** @type {Element} */
	  const result = {type: 'element', tagName: 'br', properties: {}, children: []};
	  state.patch(node, result);
	  return [state.applyData(node, result), {type: 'text', value: '\n'}]
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').Properties} Properties
	 * @typedef {import('mdast').Code} Code
	 * @typedef {import('../state.js').State} State
	 */


	/**
	 * Turn an mdast `code` node into hast.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {Code} node
	 *   mdast node.
	 * @returns {Element}
	 *   hast node.
	 */
	function code$3(state, node) {
	  const value = node.value ? node.value + '\n' : '';
	  /** @type {Properties} */
	  const properties = {};

	  if (node.lang) {
	    properties.className = ['language-' + node.lang];
	  }

	  // Create `<code>`.
	  /** @type {Element} */
	  let result = {
	    type: 'element',
	    tagName: 'code',
	    properties,
	    children: [{type: 'text', value}]
	  };

	  if (node.meta) {
	    result.data = {meta: node.meta};
	  }

	  state.patch(node, result);
	  result = state.applyData(node, result);

	  // Create `<pre>`.
	  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]};
	  state.patch(node, result);
	  return result
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('mdast').Delete} Delete
	 * @typedef {import('../state.js').State} State
	 */


	/**
	 * Turn an mdast `delete` node into hast.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {Delete} node
	 *   mdast node.
	 * @returns {Element}
	 *   hast node.
	 */
	function strikethrough$1(state, node) {
	  /** @type {Element} */
	  const result = {
	    type: 'element',
	    tagName: 'del',
	    properties: {},
	    children: state.all(node)
	  };
	  state.patch(node, result);
	  return state.applyData(node, result)
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('mdast').Emphasis} Emphasis
	 * @typedef {import('../state.js').State} State
	 */


	/**
	 * Turn an mdast `emphasis` node into hast.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {Emphasis} node
	 *   mdast node.
	 * @returns {Element}
	 *   hast node.
	 */
	function emphasis$1(state, node) {
	  /** @type {Element} */
	  const result = {
	    type: 'element',
	    tagName: 'em',
	    properties: {},
	    children: state.all(node)
	  };
	  state.patch(node, result);
	  return state.applyData(node, result)
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('mdast').FootnoteReference} FootnoteReference
	 * @typedef {import('../state.js').State} State
	 */


	/**
	 * Turn an mdast `footnoteReference` node into hast.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {FootnoteReference} node
	 *   mdast node.
	 * @returns {Element}
	 *   hast node.
	 */
	function footnoteReference$1(state, node) {
	  const clobberPrefix =
	    typeof state.options.clobberPrefix === 'string'
	      ? state.options.clobberPrefix
	      : 'user-content-';
	  const id = String(node.identifier).toUpperCase();
	  const safeId = normalizeUri(id.toLowerCase());
	  const index = state.footnoteOrder.indexOf(id);
	  /** @type {number} */
	  let counter;

	  let reuseCounter = state.footnoteCounts.get(id);

	  if (reuseCounter === undefined) {
	    reuseCounter = 0;
	    state.footnoteOrder.push(id);
	    counter = state.footnoteOrder.length;
	  } else {
	    counter = index + 1;
	  }

	  reuseCounter += 1;
	  state.footnoteCounts.set(id, reuseCounter);

	  /** @type {Element} */
	  const link = {
	    type: 'element',
	    tagName: 'a',
	    properties: {
	      href: '#' + clobberPrefix + 'fn-' + safeId,
	      id:
	        clobberPrefix +
	        'fnref-' +
	        safeId +
	        (reuseCounter > 1 ? '-' + reuseCounter : ''),
	      dataFootnoteRef: true,
	      ariaDescribedBy: ['footnote-label']
	    },
	    children: [{type: 'text', value: String(counter)}]
	  };
	  state.patch(node, link);

	  /** @type {Element} */
	  const sup = {
	    type: 'element',
	    tagName: 'sup',
	    properties: {},
	    children: [link]
	  };
	  state.patch(node, sup);
	  return state.applyData(node, sup)
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('mdast').Heading} Heading
	 * @typedef {import('../state.js').State} State
	 */


	/**
	 * Turn an mdast `heading` node into hast.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {Heading} node
	 *   mdast node.
	 * @returns {Element}
	 *   hast node.
	 */
	function heading$1(state, node) {
	  /** @type {Element} */
	  const result = {
	    type: 'element',
	    tagName: 'h' + node.depth,
	    properties: {},
	    children: state.all(node)
	  };
	  state.patch(node, result);
	  return state.applyData(node, result)
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('mdast').Html} Html
	 * @typedef {import('../state.js').State} State
	 * @typedef {import('../../index.js').Raw} Raw
	 */


	/**
	 * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise
	 * nothing).
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {Html} node
	 *   mdast node.
	 * @returns {Element | Raw | undefined}
	 *   hast node.
	 */
	function html$3(state, node) {
	  if (state.options.allowDangerousHtml) {
	    /** @type {Raw} */
	    const result = {type: 'raw', value: node.value};
	    state.patch(node, result);
	    return state.applyData(node, result)
	  }

	  return undefined
	}

	/**
	 * @typedef {import('hast').ElementContent} ElementContent
	 *
	 * @typedef {import('mdast').Nodes} Nodes
	 * @typedef {import('mdast').Reference} Reference
	 *
	 * @typedef {import('./state.js').State} State
	 */


	/**
	 * Return the content of a reference without definition as plain text.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {Extract<Nodes, Reference>} node
	 *   Reference node (image, link).
	 * @returns {Array<ElementContent>}
	 *   hast content.
	 */
	function revert(state, node) {
	  const subtype = node.referenceType;
	  let suffix = ']';

	  if (subtype === 'collapsed') {
	    suffix += '[]';
	  } else if (subtype === 'full') {
	    suffix += '[' + (node.label || node.identifier) + ']';
	  }

	  if (node.type === 'imageReference') {
	    return [{type: 'text', value: '![' + node.alt + suffix}]
	  }

	  const contents = state.all(node);
	  const head = contents[0];

	  if (head && head.type === 'text') {
	    head.value = '[' + head.value;
	  } else {
	    contents.unshift({type: 'text', value: '['});
	  }

	  const tail = contents[contents.length - 1];

	  if (tail && tail.type === 'text') {
	    tail.value += suffix;
	  } else {
	    contents.push({type: 'text', value: suffix});
	  }

	  return contents
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').ElementContent} ElementContent
	 * @typedef {import('hast').Properties} Properties
	 * @typedef {import('mdast').ImageReference} ImageReference
	 * @typedef {import('../state.js').State} State
	 */


	/**
	 * Turn an mdast `imageReference` node into hast.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {ImageReference} node
	 *   mdast node.
	 * @returns {Array<ElementContent> | ElementContent}
	 *   hast node.
	 */
	function imageReference$1(state, node) {
	  const id = String(node.identifier).toUpperCase();
	  const def = state.definitionById.get(id);

	  if (!def) {
	    return revert(state, node)
	  }

	  /** @type {Properties} */
	  const properties = {src: normalizeUri(def.url || ''), alt: node.alt};

	  if (def.title !== null && def.title !== undefined) {
	    properties.title = def.title;
	  }

	  /** @type {Element} */
	  const result = {type: 'element', tagName: 'img', properties, children: []};
	  state.patch(node, result);
	  return state.applyData(node, result)
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').Properties} Properties
	 * @typedef {import('mdast').Image} Image
	 * @typedef {import('../state.js').State} State
	 */


	/**
	 * Turn an mdast `image` node into hast.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {Image} node
	 *   mdast node.
	 * @returns {Element}
	 *   hast node.
	 */
	function image$2(state, node) {
	  /** @type {Properties} */
	  const properties = {src: normalizeUri(node.url)};

	  if (node.alt !== null && node.alt !== undefined) {
	    properties.alt = node.alt;
	  }

	  if (node.title !== null && node.title !== undefined) {
	    properties.title = node.title;
	  }

	  /** @type {Element} */
	  const result = {type: 'element', tagName: 'img', properties, children: []};
	  state.patch(node, result);
	  return state.applyData(node, result)
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').Text} Text
	 * @typedef {import('mdast').InlineCode} InlineCode
	 * @typedef {import('../state.js').State} State
	 */


	/**
	 * Turn an mdast `inlineCode` node into hast.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {InlineCode} node
	 *   mdast node.
	 * @returns {Element}
	 *   hast node.
	 */
	function inlineCode$1(state, node) {
	  /** @type {Text} */
	  const text = {type: 'text', value: node.value.replace(/\r?\n|\r/g, ' ')};
	  state.patch(node, text);

	  /** @type {Element} */
	  const result = {
	    type: 'element',
	    tagName: 'code',
	    properties: {},
	    children: [text]
	  };
	  state.patch(node, result);
	  return state.applyData(node, result)
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').ElementContent} ElementContent
	 * @typedef {import('hast').Properties} Properties
	 * @typedef {import('mdast').LinkReference} LinkReference
	 * @typedef {import('../state.js').State} State
	 */


	/**
	 * Turn an mdast `linkReference` node into hast.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {LinkReference} node
	 *   mdast node.
	 * @returns {Array<ElementContent> | ElementContent}
	 *   hast node.
	 */
	function linkReference$1(state, node) {
	  const id = String(node.identifier).toUpperCase();
	  const def = state.definitionById.get(id);

	  if (!def) {
	    return revert(state, node)
	  }

	  /** @type {Properties} */
	  const properties = {href: normalizeUri(def.url || '')};

	  if (def.title !== null && def.title !== undefined) {
	    properties.title = def.title;
	  }

	  /** @type {Element} */
	  const result = {
	    type: 'element',
	    tagName: 'a',
	    properties,
	    children: state.all(node)
	  };
	  state.patch(node, result);
	  return state.applyData(node, result)
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').Properties} Properties
	 * @typedef {import('mdast').Link} Link
	 * @typedef {import('../state.js').State} State
	 */


	/**
	 * Turn an mdast `link` node into hast.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {Link} node
	 *   mdast node.
	 * @returns {Element}
	 *   hast node.
	 */
	function link$2(state, node) {
	  /** @type {Properties} */
	  const properties = {href: normalizeUri(node.url)};

	  if (node.title !== null && node.title !== undefined) {
	    properties.title = node.title;
	  }

	  /** @type {Element} */
	  const result = {
	    type: 'element',
	    tagName: 'a',
	    properties,
	    children: state.all(node)
	  };
	  state.patch(node, result);
	  return state.applyData(node, result)
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').ElementContent} ElementContent
	 * @typedef {import('hast').Properties} Properties
	 * @typedef {import('mdast').ListItem} ListItem
	 * @typedef {import('mdast').Parents} Parents
	 * @typedef {import('../state.js').State} State
	 */


	/**
	 * Turn an mdast `listItem` node into hast.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {ListItem} node
	 *   mdast node.
	 * @param {Parents | undefined} parent
	 *   Parent of `node`.
	 * @returns {Element}
	 *   hast node.
	 */
	function listItem$1(state, node, parent) {
	  const results = state.all(node);
	  const loose = parent ? listLoose(parent) : listItemLoose(node);
	  /** @type {Properties} */
	  const properties = {};
	  /** @type {Array<ElementContent>} */
	  const children = [];

	  if (typeof node.checked === 'boolean') {
	    const head = results[0];
	    /** @type {Element} */
	    let paragraph;

	    if (head && head.type === 'element' && head.tagName === 'p') {
	      paragraph = head;
	    } else {
	      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []};
	      results.unshift(paragraph);
	    }

	    if (paragraph.children.length > 0) {
	      paragraph.children.unshift({type: 'text', value: ' '});
	    }

	    paragraph.children.unshift({
	      type: 'element',
	      tagName: 'input',
	      properties: {type: 'checkbox', checked: node.checked, disabled: true},
	      children: []
	    });

	    // According to github-markdown-css, this class hides bullet.
	    // See: <https://github.com/sindresorhus/github-markdown-css>.
	    properties.className = ['task-list-item'];
	  }

	  let index = -1;

	  while (++index < results.length) {
	    const child = results[index];

	    // Add eols before nodes, except if this is a loose, first paragraph.
	    if (
	      loose ||
	      index !== 0 ||
	      child.type !== 'element' ||
	      child.tagName !== 'p'
	    ) {
	      children.push({type: 'text', value: '\n'});
	    }

	    if (child.type === 'element' && child.tagName === 'p' && !loose) {
	      children.push(...child.children);
	    } else {
	      children.push(child);
	    }
	  }

	  const tail = results[results.length - 1];

	  // Add a final eol.
	  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {
	    children.push({type: 'text', value: '\n'});
	  }

	  /** @type {Element} */
	  const result = {type: 'element', tagName: 'li', properties, children};
	  state.patch(node, result);
	  return state.applyData(node, result)
	}

	/**
	 * @param {Parents} node
	 * @return {Boolean}
	 */
	function listLoose(node) {
	  let loose = false;
	  if (node.type === 'list') {
	    loose = node.spread || false;
	    const children = node.children;
	    let index = -1;

	    while (!loose && ++index < children.length) {
	      loose = listItemLoose(children[index]);
	    }
	  }

	  return loose
	}

	/**
	 * @param {ListItem} node
	 * @return {Boolean}
	 */
	function listItemLoose(node) {
	  const spread = node.spread;

	  return spread === null || spread === undefined
	    ? node.children.length > 1
	    : spread
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').Properties} Properties
	 * @typedef {import('mdast').List} List
	 * @typedef {import('../state.js').State} State
	 */


	/**
	 * Turn an mdast `list` node into hast.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {List} node
	 *   mdast node.
	 * @returns {Element}
	 *   hast node.
	 */
	function list$1(state, node) {
	  /** @type {Properties} */
	  const properties = {};
	  const results = state.all(node);
	  let index = -1;

	  if (typeof node.start === 'number' && node.start !== 1) {
	    properties.start = node.start;
	  }

	  // Like GitHub, add a class for custom styling.
	  while (++index < results.length) {
	    const child = results[index];

	    if (
	      child.type === 'element' &&
	      child.tagName === 'li' &&
	      child.properties &&
	      Array.isArray(child.properties.className) &&
	      child.properties.className.includes('task-list-item')
	    ) {
	      properties.className = ['contains-task-list'];
	      break
	    }
	  }

	  /** @type {Element} */
	  const result = {
	    type: 'element',
	    tagName: node.ordered ? 'ol' : 'ul',
	    properties,
	    children: state.wrap(results, true)
	  };
	  state.patch(node, result);
	  return state.applyData(node, result)
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('mdast').Paragraph} Paragraph
	 * @typedef {import('../state.js').State} State
	 */


	/**
	 * Turn an mdast `paragraph` node into hast.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {Paragraph} node
	 *   mdast node.
	 * @returns {Element}
	 *   hast node.
	 */
	function paragraph$1(state, node) {
	  /** @type {Element} */
	  const result = {
	    type: 'element',
	    tagName: 'p',
	    properties: {},
	    children: state.all(node)
	  };
	  state.patch(node, result);
	  return state.applyData(node, result)
	}

	/**
	 * @typedef {import('hast').Parents} HastParents
	 * @typedef {import('hast').Root} HastRoot
	 * @typedef {import('mdast').Root} MdastRoot
	 * @typedef {import('../state.js').State} State
	 */


	/**
	 * Turn an mdast `root` node into hast.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {MdastRoot} node
	 *   mdast node.
	 * @returns {HastParents}
	 *   hast node.
	 */
	function root$6(state, node) {
	  /** @type {HastRoot} */
	  const result = {type: 'root', children: state.wrap(state.all(node))};
	  state.patch(node, result);
	  return state.applyData(node, result)
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('mdast').Strong} Strong
	 * @typedef {import('../state.js').State} State
	 */


	/**
	 * Turn an mdast `strong` node into hast.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {Strong} node
	 *   mdast node.
	 * @returns {Element}
	 *   hast node.
	 */
	function strong$1(state, node) {
	  /** @type {Element} */
	  const result = {
	    type: 'element',
	    tagName: 'strong',
	    properties: {},
	    children: state.all(node)
	  };
	  state.patch(node, result);
	  return state.applyData(node, result)
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('mdast').Table} Table
	 * @typedef {import('../state.js').State} State
	 */


	/**
	 * Turn an mdast `table` node into hast.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {Table} node
	 *   mdast node.
	 * @returns {Element}
	 *   hast node.
	 */
	function table$1(state, node) {
	  const rows = state.all(node);
	  const firstRow = rows.shift();
	  /** @type {Array<Element>} */
	  const tableContent = [];

	  if (firstRow) {
	    /** @type {Element} */
	    const head = {
	      type: 'element',
	      tagName: 'thead',
	      properties: {},
	      children: state.wrap([firstRow], true)
	    };
	    state.patch(node.children[0], head);
	    tableContent.push(head);
	  }

	  if (rows.length > 0) {
	    /** @type {Element} */
	    const body = {
	      type: 'element',
	      tagName: 'tbody',
	      properties: {},
	      children: state.wrap(rows, true)
	    };

	    const start = pointStart(node.children[1]);
	    const end = pointEnd(node.children[node.children.length - 1]);
	    if (start && end) body.position = {start, end};
	    tableContent.push(body);
	  }

	  /** @type {Element} */
	  const result = {
	    type: 'element',
	    tagName: 'table',
	    properties: {},
	    children: state.wrap(tableContent, true)
	  };
	  state.patch(node, result);
	  return state.applyData(node, result)
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').ElementContent} ElementContent
	 * @typedef {import('hast').Properties} Properties
	 * @typedef {import('mdast').Parents} Parents
	 * @typedef {import('mdast').TableRow} TableRow
	 * @typedef {import('../state.js').State} State
	 */


	/**
	 * Turn an mdast `tableRow` node into hast.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {TableRow} node
	 *   mdast node.
	 * @param {Parents | undefined} parent
	 *   Parent of `node`.
	 * @returns {Element}
	 *   hast node.
	 */
	function tableRow(state, node, parent) {
	  const siblings = parent ? parent.children : undefined;
	  // Generate a body row when without parent.
	  const rowIndex = siblings ? siblings.indexOf(node) : 1;
	  const tagName = rowIndex === 0 ? 'th' : 'td';
	  // To do: option to use `style`?
	  const align = parent && parent.type === 'table' ? parent.align : undefined;
	  const length = align ? align.length : node.children.length;
	  let cellIndex = -1;
	  /** @type {Array<ElementContent>} */
	  const cells = [];

	  while (++cellIndex < length) {
	    // Note: can also be undefined.
	    const cell = node.children[cellIndex];
	    /** @type {Properties} */
	    const properties = {};
	    const alignValue = align ? align[cellIndex] : undefined;

	    if (alignValue) {
	      properties.align = alignValue;
	    }

	    /** @type {Element} */
	    let result = {type: 'element', tagName, properties, children: []};

	    if (cell) {
	      result.children = state.all(cell);
	      state.patch(cell, result);
	      result = state.applyData(cell, result);
	    }

	    cells.push(result);
	  }

	  /** @type {Element} */
	  const result = {
	    type: 'element',
	    tagName: 'tr',
	    properties: {},
	    children: state.wrap(cells, true)
	  };
	  state.patch(node, result);
	  return state.applyData(node, result)
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('mdast').TableCell} TableCell
	 * @typedef {import('../state.js').State} State
	 */


	/**
	 * Turn an mdast `tableCell` node into hast.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {TableCell} node
	 *   mdast node.
	 * @returns {Element}
	 *   hast node.
	 */
	function tableCell(state, node) {
	  // Note: this function is normally not called: see `table-row` for how rows
	  // and their cells are compiled.
	  /** @type {Element} */
	  const result = {
	    type: 'element',
	    tagName: 'td', // Assume body cell.
	    properties: {},
	    children: state.all(node)
	  };
	  state.patch(node, result);
	  return state.applyData(node, result)
	}

	const tab = 9; /* `\t` */
	const space = 32; /* ` ` */

	/**
	 * Remove initial and final spaces and tabs at the line breaks in `value`.
	 * Does not trim initial and final spaces and tabs of the value itself.
	 *
	 * @param {string} value
	 *   Value to trim.
	 * @returns {string}
	 *   Trimmed value.
	 */
	function trimLines(value) {
	  const source = String(value);
	  const search = /\r?\n|\r/g;
	  let match = search.exec(source);
	  let last = 0;
	  /** @type {Array<string>} */
	  const lines = [];

	  while (match) {
	    lines.push(
	      trimLine(source.slice(last, match.index), last > 0, true),
	      match[0]
	    );

	    last = match.index + match[0].length;
	    match = search.exec(source);
	  }

	  lines.push(trimLine(source.slice(last), last > 0, false));

	  return lines.join('')
	}

	/**
	 * @param {string} value
	 *   Line to trim.
	 * @param {boolean} start
	 *   Whether to trim the start of the line.
	 * @param {boolean} end
	 *   Whether to trim the end of the line.
	 * @returns {string}
	 *   Trimmed line.
	 */
	function trimLine(value, start, end) {
	  let startIndex = 0;
	  let endIndex = value.length;

	  if (start) {
	    let code = value.codePointAt(startIndex);

	    while (code === tab || code === space) {
	      startIndex++;
	      code = value.codePointAt(startIndex);
	    }
	  }

	  if (end) {
	    let code = value.codePointAt(endIndex - 1);

	    while (code === tab || code === space) {
	      endIndex--;
	      code = value.codePointAt(endIndex - 1);
	    }
	  }

	  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''
	}

	/**
	 * @typedef {import('hast').Element} HastElement
	 * @typedef {import('hast').Text} HastText
	 * @typedef {import('mdast').Text} MdastText
	 * @typedef {import('../state.js').State} State
	 */


	/**
	 * Turn an mdast `text` node into hast.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {MdastText} node
	 *   mdast node.
	 * @returns {HastElement | HastText}
	 *   hast node.
	 */
	function text$5(state, node) {
	  /** @type {HastText} */
	  const result = {type: 'text', value: trimLines(String(node.value))};
	  state.patch(node, result);
	  return state.applyData(node, result)
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('mdast').ThematicBreak} ThematicBreak
	 * @typedef {import('../state.js').State} State
	 */


	/**
	 * Turn an mdast `thematicBreak` node into hast.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {ThematicBreak} node
	 *   mdast node.
	 * @returns {Element}
	 *   hast node.
	 */
	function thematicBreak$1(state, node) {
	  /** @type {Element} */
	  const result = {
	    type: 'element',
	    tagName: 'hr',
	    properties: {},
	    children: []
	  };
	  state.patch(node, result);
	  return state.applyData(node, result)
	}

	/**
	 * Default handlers for nodes.
	 *
	 * @satisfies {import('../state.js').Handlers}
	 */
	const handlers = {
	  blockquote: blockquote$1,
	  break: hardBreak$1,
	  code: code$3,
	  delete: strikethrough$1,
	  emphasis: emphasis$1,
	  footnoteReference: footnoteReference$1,
	  heading: heading$1,
	  html: html$3,
	  imageReference: imageReference$1,
	  image: image$2,
	  inlineCode: inlineCode$1,
	  linkReference: linkReference$1,
	  link: link$2,
	  listItem: listItem$1,
	  list: list$1,
	  paragraph: paragraph$1,
	  // @ts-expect-error: root is different, but hard to type.
	  root: root$6,
	  strong: strong$1,
	  table: table$1,
	  tableCell,
	  tableRow,
	  text: text$5,
	  thematicBreak: thematicBreak$1,
	  toml: ignore$1,
	  yaml: ignore$1,
	  definition: ignore$1,
	  footnoteDefinition: ignore$1
	};

	// Return nothing for nodes that are ignored.
	function ignore$1() {
	  return undefined
	}

	const VOID       = -1;
	const PRIMITIVE  = 0;
	const ARRAY      = 1;
	const OBJECT     = 2;
	const DATE       = 3;
	const REGEXP     = 4;
	const MAP        = 5;
	const SET        = 6;
	const ERROR      = 7;
	const BIGINT     = 8;
	// export const SYMBOL = 9;

	const env = typeof self === 'object' ? self : globalThis;

	const deserializer = ($, _) => {
	  const as = (out, index) => {
	    $.set(index, out);
	    return out;
	  };

	  const unpair = index => {
	    if ($.has(index))
	      return $.get(index);

	    const [type, value] = _[index];
	    switch (type) {
	      case PRIMITIVE:
	      case VOID:
	        return as(value, index);
	      case ARRAY: {
	        const arr = as([], index);
	        for (const index of value)
	          arr.push(unpair(index));
	        return arr;
	      }
	      case OBJECT: {
	        const object = as({}, index);
	        for (const [key, index] of value)
	          object[unpair(key)] = unpair(index);
	        return object;
	      }
	      case DATE:
	        return as(new Date(value), index);
	      case REGEXP: {
	        const {source, flags} = value;
	        return as(new RegExp(source, flags), index);
	      }
	      case MAP: {
	        const map = as(new Map, index);
	        for (const [key, index] of value)
	          map.set(unpair(key), unpair(index));
	        return map;
	      }
	      case SET: {
	        const set = as(new Set, index);
	        for (const index of value)
	          set.add(unpair(index));
	        return set;
	      }
	      case ERROR: {
	        const {name, message} = value;
	        return as(new env[name](message), index);
	      }
	      case BIGINT:
	        return as(BigInt(value), index);
	      case 'BigInt':
	        return as(Object(BigInt(value)), index);
	    }
	    return as(new env[type](value), index);
	  };

	  return unpair;
	};

	/**
	 * @typedef {Array<string,any>} Record a type representation
	 */

	/**
	 * Returns a deserialized value from a serialized array of Records.
	 * @param {Record[]} serialized a previously serialized value.
	 * @returns {any}
	 */
	const deserialize = serialized => deserializer(new Map, serialized)(0);

	const EMPTY = '';

	const {toString: toString$2} = {};
	const {keys} = Object;

	const typeOf = value => {
	  const type = typeof value;
	  if (type !== 'object' || !value)
	    return [PRIMITIVE, type];

	  const asString = toString$2.call(value).slice(8, -1);
	  switch (asString) {
	    case 'Array':
	      return [ARRAY, EMPTY];
	    case 'Object':
	      return [OBJECT, EMPTY];
	    case 'Date':
	      return [DATE, EMPTY];
	    case 'RegExp':
	      return [REGEXP, EMPTY];
	    case 'Map':
	      return [MAP, EMPTY];
	    case 'Set':
	      return [SET, EMPTY];
	  }

	  if (asString.includes('Array'))
	    return [ARRAY, asString];

	  if (asString.includes('Error'))
	    return [ERROR, asString];

	  return [OBJECT, asString];
	};

	const shouldSkip = ([TYPE, type]) => (
	  TYPE === PRIMITIVE &&
	  (type === 'function' || type === 'symbol')
	);

	const serializer = (strict, json, $, _) => {

	  const as = (out, value) => {
	    const index = _.push(out) - 1;
	    $.set(value, index);
	    return index;
	  };

	  const pair = value => {
	    if ($.has(value))
	      return $.get(value);

	    let [TYPE, type] = typeOf(value);
	    switch (TYPE) {
	      case PRIMITIVE: {
	        let entry = value;
	        switch (type) {
	          case 'bigint':
	            TYPE = BIGINT;
	            entry = value.toString();
	            break;
	          case 'function':
	          case 'symbol':
	            if (strict)
	              throw new TypeError('unable to serialize ' + type);
	            entry = null;
	            break;
	          case 'undefined':
	            return as([VOID], value);
	        }
	        return as([TYPE, entry], value);
	      }
	      case ARRAY: {
	        if (type)
	          return as([type, [...value]], value);
	  
	        const arr = [];
	        const index = as([TYPE, arr], value);
	        for (const entry of value)
	          arr.push(pair(entry));
	        return index;
	      }
	      case OBJECT: {
	        if (type) {
	          switch (type) {
	            case 'BigInt':
	              return as([type, value.toString()], value);
	            case 'Boolean':
	            case 'Number':
	            case 'String':
	              return as([type, value.valueOf()], value);
	          }
	        }

	        if (json && ('toJSON' in value))
	          return pair(value.toJSON());

	        const entries = [];
	        const index = as([TYPE, entries], value);
	        for (const key of keys(value)) {
	          if (strict || !shouldSkip(typeOf(value[key])))
	            entries.push([pair(key), pair(value[key])]);
	        }
	        return index;
	      }
	      case DATE:
	        return as([TYPE, value.toISOString()], value);
	      case REGEXP: {
	        const {source, flags} = value;
	        return as([TYPE, {source, flags}], value);
	      }
	      case MAP: {
	        const entries = [];
	        const index = as([TYPE, entries], value);
	        for (const [key, entry] of value) {
	          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))
	            entries.push([pair(key), pair(entry)]);
	        }
	        return index;
	      }
	      case SET: {
	        const entries = [];
	        const index = as([TYPE, entries], value);
	        for (const entry of value) {
	          if (strict || !shouldSkip(typeOf(entry)))
	            entries.push(pair(entry));
	        }
	        return index;
	      }
	    }

	    const {message} = value;
	    return as([TYPE, {name: type, message}], value);
	  };

	  return pair;
	};

	/**
	 * @typedef {Array<string,any>} Record a type representation
	 */

	/**
	 * Returns an array of serialized Records.
	 * @param {any} value a serializable value.
	 * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,
	 *  if `true`, will not throw errors on incompatible types, and behave more
	 *  like JSON stringify would behave. Symbol and Function will be discarded.
	 * @returns {Record[]}
	 */
	 const serialize$1 = (value, {json, lossy} = {}) => {
	  const _ = [];
	  return serializer(!(json || lossy), !!json, new Map, _)(value), _;
	};

	/**
	 * @typedef {Array<string,any>} Record a type representation
	 */

	/**
	 * Returns an array of serialized Records.
	 * @param {any} any a serializable value.
	 * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with
	 * a transfer option (ignored when polyfilled) and/or non standard fields that
	 * fallback to the polyfill if present.
	 * @returns {Record[]}
	 */
	const structuredClone$1 = typeof structuredClone === "function" ?
	  /* c8 ignore start */
	  (any, options) => (
	    options && ('json' in options || 'lossy' in options) ?
	      deserialize(serialize$1(any, options)) : structuredClone(any)
	  ) :
	  (any, options) => deserialize(serialize$1(any, options));

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').ElementContent} ElementContent
	 *
	 * @typedef {import('./state.js').State} State
	 */


	/**
	 * Generate the default content that GitHub uses on backreferences.
	 *
	 * @param {number} _
	 *   Index of the definition in the order that they are first referenced,
	 *   0-indexed.
	 * @param {number} rereferenceIndex
	 *   Index of calls to the same definition, 0-indexed.
	 * @returns {Array<ElementContent>}
	 *   Content.
	 */
	function defaultFootnoteBackContent(_, rereferenceIndex) {
	  /** @type {Array<ElementContent>} */
	  const result = [{type: 'text', value: '↩'}];

	  if (rereferenceIndex > 1) {
	    result.push({
	      type: 'element',
	      tagName: 'sup',
	      properties: {},
	      children: [{type: 'text', value: String(rereferenceIndex)}]
	    });
	  }

	  return result
	}

	/**
	 * Generate the default label that GitHub uses on backreferences.
	 *
	 * @param {number} referenceIndex
	 *   Index of the definition in the order that they are first referenced,
	 *   0-indexed.
	 * @param {number} rereferenceIndex
	 *   Index of calls to the same definition, 0-indexed.
	 * @returns {string}
	 *   Label.
	 */
	function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {
	  return (
	    'Back to reference ' +
	    (referenceIndex + 1) +
	    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')
	  )
	}

	/**
	 * Generate a hast footer for called footnote definitions.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @returns {Element | undefined}
	 *   `section` element or `undefined`.
	 */
	// eslint-disable-next-line complexity
	function footer(state) {
	  const clobberPrefix =
	    typeof state.options.clobberPrefix === 'string'
	      ? state.options.clobberPrefix
	      : 'user-content-';
	  const footnoteBackContent =
	    state.options.footnoteBackContent || defaultFootnoteBackContent;
	  const footnoteBackLabel =
	    state.options.footnoteBackLabel || defaultFootnoteBackLabel;
	  const footnoteLabel = state.options.footnoteLabel || 'Footnotes';
	  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2';
	  const footnoteLabelProperties = state.options.footnoteLabelProperties || {
	    className: ['sr-only']
	  };
	  /** @type {Array<ElementContent>} */
	  const listItems = [];
	  let referenceIndex = -1;

	  while (++referenceIndex < state.footnoteOrder.length) {
	    const def = state.footnoteById.get(state.footnoteOrder[referenceIndex]);

	    if (!def) {
	      continue
	    }

	    const content = state.all(def);
	    const id = String(def.identifier).toUpperCase();
	    const safeId = normalizeUri(id.toLowerCase());
	    let rereferenceIndex = 0;
	    /** @type {Array<ElementContent>} */
	    const backReferences = [];
	    const counts = state.footnoteCounts.get(id);

	    // eslint-disable-next-line no-unmodified-loop-condition
	    while (counts !== undefined && ++rereferenceIndex <= counts) {
	      if (backReferences.length > 0) {
	        backReferences.push({type: 'text', value: ' '});
	      }

	      let children =
	        typeof footnoteBackContent === 'string'
	          ? footnoteBackContent
	          : footnoteBackContent(referenceIndex, rereferenceIndex);

	      if (typeof children === 'string') {
	        children = {type: 'text', value: children};
	      }

	      backReferences.push({
	        type: 'element',
	        tagName: 'a',
	        properties: {
	          href:
	            '#' +
	            clobberPrefix +
	            'fnref-' +
	            safeId +
	            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),
	          dataFootnoteBackref: '',
	          ariaLabel:
	            typeof footnoteBackLabel === 'string'
	              ? footnoteBackLabel
	              : footnoteBackLabel(referenceIndex, rereferenceIndex),
	          className: ['data-footnote-backref']
	        },
	        children: Array.isArray(children) ? children : [children]
	      });
	    }

	    const tail = content[content.length - 1];

	    if (tail && tail.type === 'element' && tail.tagName === 'p') {
	      const tailTail = tail.children[tail.children.length - 1];
	      if (tailTail && tailTail.type === 'text') {
	        tailTail.value += ' ';
	      } else {
	        tail.children.push({type: 'text', value: ' '});
	      }

	      tail.children.push(...backReferences);
	    } else {
	      content.push(...backReferences);
	    }

	    /** @type {Element} */
	    const listItem = {
	      type: 'element',
	      tagName: 'li',
	      properties: {id: clobberPrefix + 'fn-' + safeId},
	      children: state.wrap(content, true)
	    };

	    state.patch(def, listItem);

	    listItems.push(listItem);
	  }

	  if (listItems.length === 0) {
	    return
	  }

	  return {
	    type: 'element',
	    tagName: 'section',
	    properties: {dataFootnotes: true, className: ['footnotes']},
	    children: [
	      {
	        type: 'element',
	        tagName: footnoteLabelTagName,
	        properties: {
	          ...structuredClone$1(footnoteLabelProperties),
	          id: 'footnote-label'
	        },
	        children: [{type: 'text', value: footnoteLabel}]
	      },
	      {type: 'text', value: '\n'},
	      {
	        type: 'element',
	        tagName: 'ol',
	        properties: {},
	        children: state.wrap(listItems, true)
	      },
	      {type: 'text', value: '\n'}
	    ]
	  }
	}

	/**
	 * @typedef {import('unist').Node} Node
	 * @typedef {import('unist').Parent} Parent
	 */


	/**
	 * Generate an assertion from a test.
	 *
	 * Useful if you’re going to test many nodes, for example when creating a
	 * utility where something else passes a compatible test.
	 *
	 * The created function is a bit faster because it expects valid input only:
	 * a `node`, `index`, and `parent`.
	 *
	 * @param {Test} test
	 *   *   when nullish, checks if `node` is a `Node`.
	 *   *   when `string`, works like passing `(node) => node.type === test`.
	 *   *   when `function` checks if function passed the node is true.
	 *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.
	 *   *   when `array`, checks if any one of the subtests pass.
	 * @returns {Check}
	 *   An assertion.
	 */
	const convert$2 =
	  // Note: overloads in JSDoc can’t yet use different `@template`s.
	  /**
	   * @type {(
	   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &
	   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &
	   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &
	   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &
	   *   ((test?: Test) => Check)
	   * )}
	   */
	  (
	    /**
	     * @param {Test} [test]
	     * @returns {Check}
	     */
	    function (test) {
	      if (test === null || test === undefined) {
	        return ok$2
	      }

	      if (typeof test === 'function') {
	        return castFactory$3(test)
	      }

	      if (typeof test === 'object') {
	        return Array.isArray(test) ? anyFactory$3(test) : propsFactory$2(test)
	      }

	      if (typeof test === 'string') {
	        return typeFactory$2(test)
	      }

	      throw new Error('Expected function, string, or object as test')
	    }
	  );

	/**
	 * @param {Array<Props | TestFunction | string>} tests
	 * @returns {Check}
	 */
	function anyFactory$3(tests) {
	  /** @type {Array<Check>} */
	  const checks = [];
	  let index = -1;

	  while (++index < tests.length) {
	    checks[index] = convert$2(tests[index]);
	  }

	  return castFactory$3(any)

	  /**
	   * @this {unknown}
	   * @type {TestFunction}
	   */
	  function any(...parameters) {
	    let index = -1;

	    while (++index < checks.length) {
	      if (checks[index].apply(this, parameters)) return true
	    }

	    return false
	  }
	}

	/**
	 * Turn an object into a test for a node with a certain fields.
	 *
	 * @param {Props} check
	 * @returns {Check}
	 */
	function propsFactory$2(check) {
	  const checkAsRecord = /** @type {Record<string, unknown>} */ (check);

	  return castFactory$3(all)

	  /**
	   * @param {Node} node
	   * @returns {boolean}
	   */
	  function all(node) {
	    const nodeAsRecord = /** @type {Record<string, unknown>} */ (
	      /** @type {unknown} */ (node)
	    );

	    /** @type {string} */
	    let key;

	    for (key in check) {
	      if (nodeAsRecord[key] !== checkAsRecord[key]) return false
	    }

	    return true
	  }
	}

	/**
	 * Turn a string into a test for a node with a certain type.
	 *
	 * @param {string} check
	 * @returns {Check}
	 */
	function typeFactory$2(check) {
	  return castFactory$3(type)

	  /**
	   * @param {Node} node
	   */
	  function type(node) {
	    return node && node.type === check
	  }
	}

	/**
	 * Turn a custom test into a test for a node that passes that test.
	 *
	 * @param {TestFunction} testFunction
	 * @returns {Check}
	 */
	function castFactory$3(testFunction) {
	  return check

	  /**
	   * @this {unknown}
	   * @type {Check}
	   */
	  function check(value, index, parent) {
	    return Boolean(
	      looksLikeANode(value) &&
	        testFunction.call(
	          this,
	          value,
	          typeof index === 'number' ? index : undefined,
	          parent || undefined
	        )
	    )
	  }
	}

	function ok$2() {
	  return true
	}

	/**
	 * @param {unknown} value
	 * @returns {value is Node}
	 */
	function looksLikeANode(value) {
	  return value !== null && typeof value === 'object' && 'type' in value
	}

	/**
	 * @param {string} d
	 * @returns {string}
	 */
	function color$1(d) {
	  return d
	}

	/**
	 * @typedef {import('unist').Node} UnistNode
	 * @typedef {import('unist').Parent} UnistParent
	 */


	/** @type {Readonly<ActionTuple>} */
	const empty$2 = [];

	/**
	 * Continue traversing as normal.
	 */
	const CONTINUE$1 = true;

	/**
	 * Stop traversing immediately.
	 */
	const EXIT$1 = false;

	/**
	 * Do not traverse this node’s children.
	 */
	const SKIP$1 = 'skip';

	/**
	 * Visit nodes, with ancestral information.
	 *
	 * This algorithm performs *depth-first* *tree traversal* in *preorder*
	 * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).
	 *
	 * You can choose for which nodes `visitor` is called by passing a `test`.
	 * For complex tests, you should test yourself in `visitor`, as it will be
	 * faster and will have improved type information.
	 *
	 * Walking the tree is an intensive task.
	 * Make use of the return values of the visitor when possible.
	 * Instead of walking a tree multiple times, walk it once, use `unist-util-is`
	 * to check if a node matches, and then perform different operations.
	 *
	 * You can change the tree.
	 * See `Visitor` for more info.
	 *
	 * @overload
	 * @param {Tree} tree
	 * @param {Check} check
	 * @param {BuildVisitor<Tree, Check>} visitor
	 * @param {boolean | null | undefined} [reverse]
	 * @returns {undefined}
	 *
	 * @overload
	 * @param {Tree} tree
	 * @param {BuildVisitor<Tree>} visitor
	 * @param {boolean | null | undefined} [reverse]
	 * @returns {undefined}
	 *
	 * @param {UnistNode} tree
	 *   Tree to traverse.
	 * @param {Visitor | Test} test
	 *   `unist-util-is`-compatible test
	 * @param {Visitor | boolean | null | undefined} [visitor]
	 *   Handle each node.
	 * @param {boolean | null | undefined} [reverse]
	 *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).
	 * @returns {undefined}
	 *   Nothing.
	 *
	 * @template {UnistNode} Tree
	 *   Node type.
	 * @template {Test} Check
	 *   `unist-util-is`-compatible test.
	 */
	function visitParents$1(tree, test, visitor, reverse) {
	  /** @type {Test} */
	  let check;

	  if (typeof test === 'function' && typeof visitor !== 'function') {
	    reverse = visitor;
	    // @ts-expect-error no visitor given, so `visitor` is test.
	    visitor = test;
	  } else {
	    // @ts-expect-error visitor given, so `test` isn’t a visitor.
	    check = test;
	  }

	  const is = convert$2(check);
	  const step = reverse ? -1 : 1;

	  factory(tree, undefined, [])();

	  /**
	   * @param {UnistNode} node
	   * @param {number | undefined} index
	   * @param {Array<UnistParent>} parents
	   */
	  function factory(node, index, parents) {
	    const value = /** @type {Record<string, unknown>} */ (
	      node && typeof node === 'object' ? node : {}
	    );

	    if (typeof value.type === 'string') {
	      const name =
	        // `hast`
	        typeof value.tagName === 'string'
	          ? value.tagName
	          : // `xast`
	          typeof value.name === 'string'
	          ? value.name
	          : undefined;

	      Object.defineProperty(visit, 'name', {
	        value:
	          'node (' + color$1(node.type + (name ? '<' + name + '>' : '')) + ')'
	      });
	    }

	    return visit

	    function visit() {
	      /** @type {Readonly<ActionTuple>} */
	      let result = empty$2;
	      /** @type {Readonly<ActionTuple>} */
	      let subresult;
	      /** @type {number} */
	      let offset;
	      /** @type {Array<UnistParent>} */
	      let grandparents;

	      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {
	        // @ts-expect-error: `visitor` is now a visitor.
	        result = toResult$1(visitor(node, parents));

	        if (result[0] === EXIT$1) {
	          return result
	        }
	      }

	      if ('children' in node && node.children) {
	        const nodeAsParent = /** @type {UnistParent} */ (node);

	        if (nodeAsParent.children && result[0] !== SKIP$1) {
	          offset = (reverse ? nodeAsParent.children.length : -1) + step;
	          grandparents = parents.concat(nodeAsParent);

	          while (offset > -1 && offset < nodeAsParent.children.length) {
	            const child = nodeAsParent.children[offset];

	            subresult = factory(child, offset, grandparents)();

	            if (subresult[0] === EXIT$1) {
	              return subresult
	            }

	            offset =
	              typeof subresult[1] === 'number' ? subresult[1] : offset + step;
	          }
	        }
	      }

	      return result
	    }
	  }
	}

	/**
	 * Turn a return value into a clean result.
	 *
	 * @param {VisitorResult} value
	 *   Valid return values from visitors.
	 * @returns {Readonly<ActionTuple>}
	 *   Clean result.
	 */
	function toResult$1(value) {
	  if (Array.isArray(value)) {
	    return value
	  }

	  if (typeof value === 'number') {
	    return [CONTINUE$1, value]
	  }

	  return value === null || value === undefined ? empty$2 : [value]
	}

	/**
	 * @typedef {import('unist').Node} UnistNode
	 * @typedef {import('unist').Parent} UnistParent
	 * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
	 */


	/**
	 * Visit nodes.
	 *
	 * This algorithm performs *depth-first* *tree traversal* in *preorder*
	 * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).
	 *
	 * You can choose for which nodes `visitor` is called by passing a `test`.
	 * For complex tests, you should test yourself in `visitor`, as it will be
	 * faster and will have improved type information.
	 *
	 * Walking the tree is an intensive task.
	 * Make use of the return values of the visitor when possible.
	 * Instead of walking a tree multiple times, walk it once, use `unist-util-is`
	 * to check if a node matches, and then perform different operations.
	 *
	 * You can change the tree.
	 * See `Visitor` for more info.
	 *
	 * @overload
	 * @param {Tree} tree
	 * @param {Check} check
	 * @param {BuildVisitor<Tree, Check>} visitor
	 * @param {boolean | null | undefined} [reverse]
	 * @returns {undefined}
	 *
	 * @overload
	 * @param {Tree} tree
	 * @param {BuildVisitor<Tree>} visitor
	 * @param {boolean | null | undefined} [reverse]
	 * @returns {undefined}
	 *
	 * @param {UnistNode} tree
	 *   Tree to traverse.
	 * @param {Visitor | Test} testOrVisitor
	 *   `unist-util-is`-compatible test (optional, omit to pass a visitor).
	 * @param {Visitor | boolean | null | undefined} [visitorOrReverse]
	 *   Handle each node (when test is omitted, pass `reverse`).
	 * @param {boolean | null | undefined} [maybeReverse=false]
	 *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).
	 * @returns {undefined}
	 *   Nothing.
	 *
	 * @template {UnistNode} Tree
	 *   Node type.
	 * @template {Test} Check
	 *   `unist-util-is`-compatible test.
	 */
	function visit$1(tree, testOrVisitor, visitorOrReverse, maybeReverse) {
	  /** @type {boolean | null | undefined} */
	  let reverse;
	  /** @type {Test} */
	  let test;
	  /** @type {Visitor} */
	  let visitor;

	  if (
	    typeof testOrVisitor === 'function' &&
	    typeof visitorOrReverse !== 'function'
	  ) {
	    test = undefined;
	    visitor = testOrVisitor;
	    reverse = visitorOrReverse;
	  } else {
	    // @ts-expect-error: assume the overload with test was given.
	    test = testOrVisitor;
	    // @ts-expect-error: assume the overload with test was given.
	    visitor = visitorOrReverse;
	    reverse = maybeReverse;
	  }

	  visitParents$1(tree, test, overload, reverse);

	  /**
	   * @param {UnistNode} node
	   * @param {Array<UnistParent>} parents
	   */
	  function overload(node, parents) {
	    const parent = parents[parents.length - 1];
	    const index = parent ? parent.children.indexOf(node) : undefined;
	    return visitor(node, index, parent)
	  }
	}

	/**
	 * @typedef {import('hast').Element} HastElement
	 * @typedef {import('hast').ElementContent} HastElementContent
	 * @typedef {import('hast').Nodes} HastNodes
	 * @typedef {import('hast').Properties} HastProperties
	 * @typedef {import('hast').RootContent} HastRootContent
	 * @typedef {import('hast').Text} HastText
	 *
	 * @typedef {import('mdast').Definition} MdastDefinition
	 * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition
	 * @typedef {import('mdast').Nodes} MdastNodes
	 * @typedef {import('mdast').Parents} MdastParents
	 *
	 * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate
	 * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate
	 */


	const own$c = {}.hasOwnProperty;

	/** @type {Options} */
	const emptyOptions$6 = {};

	/**
	 * Create `state` from an mdast tree.
	 *
	 * @param {MdastNodes} tree
	 *   mdast node to transform.
	 * @param {Options | null | undefined} [options]
	 *   Configuration (optional).
	 * @returns {State}
	 *   `state` function.
	 */
	function createState$1(tree, options) {
	  const settings = options || emptyOptions$6;
	  /** @type {Map<string, MdastDefinition>} */
	  const definitionById = new Map();
	  /** @type {Map<string, MdastFootnoteDefinition>} */
	  const footnoteById = new Map();
	  /** @type {Map<string, number>} */
	  const footnoteCounts = new Map();
	  /** @type {Handlers} */
	  // @ts-expect-error: the root handler returns a root.
	  // Hard to type.
	  const handlers$1 = {...handlers, ...settings.handlers};

	  /** @type {State} */
	  const state = {
	    all,
	    applyData,
	    definitionById,
	    footnoteById,
	    footnoteCounts,
	    footnoteOrder: [],
	    handlers: handlers$1,
	    one,
	    options: settings,
	    patch: patch$2,
	    wrap: wrap$1
	  };

	  visit$1(tree, function (node) {
	    if (node.type === 'definition' || node.type === 'footnoteDefinition') {
	      const map = node.type === 'definition' ? definitionById : footnoteById;
	      const id = String(node.identifier).toUpperCase();

	      // Mimick CM behavior of link definitions.
	      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.
	      if (!map.has(id)) {
	        // @ts-expect-error: node type matches map.
	        map.set(id, node);
	      }
	    }
	  });

	  return state

	  /**
	   * Transform an mdast node into a hast node.
	   *
	   * @param {MdastNodes} node
	   *   mdast node.
	   * @param {MdastParents | undefined} [parent]
	   *   Parent of `node`.
	   * @returns {Array<HastElementContent> | HastElementContent | undefined}
	   *   Resulting hast node.
	   */
	  function one(node, parent) {
	    const type = node.type;
	    const handle = state.handlers[type];

	    if (own$c.call(state.handlers, type) && handle) {
	      return handle(state, node, parent)
	    }

	    if (state.options.passThrough && state.options.passThrough.includes(type)) {
	      if ('children' in node) {
	        const {children, ...shallow} = node;
	        const result = structuredClone$1(shallow);
	        // @ts-expect-error: TS doesn’t understand…
	        result.children = state.all(node);
	        // @ts-expect-error: TS doesn’t understand…
	        return result
	      }

	      // @ts-expect-error: it’s custom.
	      return structuredClone$1(node)
	    }

	    const unknown = state.options.unknownHandler || defaultUnknownHandler;

	    return unknown(state, node, parent)
	  }

	  /**
	   * Transform the children of an mdast node into hast nodes.
	   *
	   * @param {MdastNodes} parent
	   *   mdast node to compile
	   * @returns {Array<HastElementContent>}
	   *   Resulting hast nodes.
	   */
	  function all(parent) {
	    /** @type {Array<HastElementContent>} */
	    const values = [];

	    if ('children' in parent) {
	      const nodes = parent.children;
	      let index = -1;
	      while (++index < nodes.length) {
	        const result = state.one(nodes[index], parent);

	        // To do: see if we van clean this? Can we merge texts?
	        if (result) {
	          if (index && nodes[index - 1].type === 'break') {
	            if (!Array.isArray(result) && result.type === 'text') {
	              result.value = trimMarkdownSpaceStart(result.value);
	            }

	            if (!Array.isArray(result) && result.type === 'element') {
	              const head = result.children[0];

	              if (head && head.type === 'text') {
	                head.value = trimMarkdownSpaceStart(head.value);
	              }
	            }
	          }

	          if (Array.isArray(result)) {
	            values.push(...result);
	          } else {
	            values.push(result);
	          }
	        }
	      }
	    }

	    return values
	  }
	}

	/**
	 * Copy a node’s positional info.
	 *
	 * @param {MdastNodes} from
	 *   mdast node to copy from.
	 * @param {HastNodes} to
	 *   hast node to copy into.
	 * @returns {undefined}
	 *   Nothing.
	 */
	function patch$2(from, to) {
	  if (from.position) to.position = position$2(from);
	}

	/**
	 * Honor the `data` of `from` and maybe generate an element instead of `to`.
	 *
	 * @template {HastNodes} Type
	 *   Node type.
	 * @param {MdastNodes} from
	 *   mdast node to use data from.
	 * @param {Type} to
	 *   hast node to change.
	 * @returns {HastElement | Type}
	 *   Nothing.
	 */
	function applyData(from, to) {
	  /** @type {HastElement | Type} */
	  let result = to;

	  // Handle `data.hName`, `data.hProperties, `data.hChildren`.
	  if (from && from.data) {
	    const hName = from.data.hName;
	    const hChildren = from.data.hChildren;
	    const hProperties = from.data.hProperties;

	    if (typeof hName === 'string') {
	      // Transforming the node resulted in an element with a different name
	      // than wanted:
	      if (result.type === 'element') {
	        result.tagName = hName;
	      }
	      // Transforming the node resulted in a non-element, which happens for
	      // raw, text, and root nodes (unless custom handlers are passed).
	      // The intent of `hName` is to create an element, but likely also to keep
	      // the content around (otherwise: pass `hChildren`).
	      else {
	        /** @type {Array<HastElementContent>} */
	        // @ts-expect-error: assume no doctypes in `root`.
	        const children = 'children' in result ? result.children : [result];
	        result = {type: 'element', tagName: hName, properties: {}, children};
	      }
	    }

	    if (result.type === 'element' && hProperties) {
	      Object.assign(result.properties, structuredClone$1(hProperties));
	    }

	    if (
	      'children' in result &&
	      result.children &&
	      hChildren !== null &&
	      hChildren !== undefined
	    ) {
	      result.children = hChildren;
	    }
	  }

	  return result
	}

	/**
	 * Transform an unknown node.
	 *
	 * @param {State} state
	 *   Info passed around.
	 * @param {MdastNodes} node
	 *   Unknown mdast node.
	 * @returns {HastElement | HastText}
	 *   Resulting hast node.
	 */
	function defaultUnknownHandler(state, node) {
	  const data = node.data || {};
	  /** @type {HastElement | HastText} */
	  const result =
	    'value' in node &&
	    !(own$c.call(data, 'hProperties') || own$c.call(data, 'hChildren'))
	      ? {type: 'text', value: node.value}
	      : {
	          type: 'element',
	          tagName: 'div',
	          properties: {},
	          children: state.all(node)
	        };

	  state.patch(node, result);
	  return state.applyData(node, result)
	}

	/**
	 * Wrap `nodes` with line endings between each node.
	 *
	 * @template {HastRootContent} Type
	 *   Node type.
	 * @param {Array<Type>} nodes
	 *   List of nodes to wrap.
	 * @param {boolean | undefined} [loose=false]
	 *   Whether to add line endings at start and end (default: `false`).
	 * @returns {Array<HastText | Type>}
	 *   Wrapped nodes.
	 */
	function wrap$1(nodes, loose) {
	  /** @type {Array<HastText | Type>} */
	  const result = [];
	  let index = -1;

	  if (loose) {
	    result.push({type: 'text', value: '\n'});
	  }

	  while (++index < nodes.length) {
	    if (index) result.push({type: 'text', value: '\n'});
	    result.push(nodes[index]);
	  }

	  if (loose && nodes.length > 0) {
	    result.push({type: 'text', value: '\n'});
	  }

	  return result
	}

	/**
	 * Trim spaces and tabs at the start of `value`.
	 *
	 * @param {string} value
	 *   Value to trim.
	 * @returns {string}
	 *   Result.
	 */
	function trimMarkdownSpaceStart(value) {
	  let index = 0;
	  let code = value.charCodeAt(index);

	  while (code === 9 || code === 32) {
	    index++;
	    code = value.charCodeAt(index);
	  }

	  return value.slice(index)
	}

	/**
	 * @typedef {import('hast').Nodes} HastNodes
	 * @typedef {import('mdast').Nodes} MdastNodes
	 * @typedef {import('./state.js').Options} Options
	 */


	/**
	 * Transform mdast to hast.
	 *
	 * ##### Notes
	 *
	 * ###### HTML
	 *
	 * Raw HTML is available in mdast as `html` nodes and can be embedded in hast
	 * as semistandard `raw` nodes.
	 * Most utilities ignore `raw` nodes but two notable ones don’t:
	 *
	 * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will
	 *     output the raw HTML.
	 *     This is typically discouraged as noted by the option name but is useful
	 *     if you completely trust authors
	 * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them
	 *     into standard hast nodes (`element`, `text`, etc).
	 *     This is a heavy task as it needs a full HTML parser, but it is the only
	 *     way to support untrusted content
	 *
	 * ###### Footnotes
	 *
	 * Many options supported here relate to footnotes.
	 * Footnotes are not specified by CommonMark, which we follow by default.
	 * They are supported by GitHub, so footnotes can be enabled in markdown with
	 * `mdast-util-gfm`.
	 *
	 * The options `footnoteBackLabel` and `footnoteLabel` define natural language
	 * that explains footnotes, which is hidden for sighted users but shown to
	 * assistive technology.
	 * When your page is not in English, you must define translated values.
	 *
	 * Back references use ARIA attributes, but the section label itself uses a
	 * heading that is hidden with an `sr-only` class.
	 * To show it to sighted users, define different attributes in
	 * `footnoteLabelProperties`.
	 *
	 * ###### Clobbering
	 *
	 * Footnotes introduces a problem, as it links footnote calls to footnote
	 * definitions on the page through `id` attributes generated from user content,
	 * which results in DOM clobbering.
	 *
	 * DOM clobbering is this:
	 *
	 * ```html
	 * <p id=x></p>
	 * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>
	 * ```
	 *
	 * Elements by their ID are made available by browsers on the `window` object,
	 * which is a security risk.
	 * Using a prefix solves this problem.
	 *
	 * More information on how to handle clobbering and the prefix is explained in
	 * Example: headings (DOM clobbering) in `rehype-sanitize`.
	 *
	 * ###### Unknown nodes
	 *
	 * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.
	 * The default behavior for unknown nodes is:
	 *
	 * *   when the node has a `value` (and doesn’t have `data.hName`,
	 *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`
	 *     node
	 * *   otherwise, create a `<div>` element (which could be changed with
	 *     `data.hName`), with its children mapped from mdast to hast as well
	 *
	 * This behavior can be changed by passing an `unknownHandler`.
	 *
	 * @param {MdastNodes} tree
	 *   mdast tree.
	 * @param {Options | null | undefined} [options]
	 *   Configuration (optional).
	 * @returns {HastNodes}
	 *   hast tree.
	 */
	function toHast(tree, options) {
	  const state = createState$1(tree, options);
	  const node = state.one(tree, undefined);
	  const foot = footer(state);
	  /** @type {HastNodes} */
	  const result = Array.isArray(node)
	    ? {type: 'root', children: node}
	    : node || {type: 'root', children: []};

	  if (foot) {
	    result.children.push({type: 'text', value: '\n'}, foot);
	  }

	  return result
	}

	// Include `data` fields in mdast and `raw` nodes in hast.
	/// <reference types="mdast-util-to-hast" />


	/**
	 * Turn markdown into HTML.
	 *
	 * ##### Notes
	 *
	 * ###### Signature
	 *
	 * *   if a processor is given, runs the (rehype) plugins used on it with a
	 *     hast tree, then discards the result (*bridge mode*)
	 * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`
	 *     are rehype plugins (*mutate mode*)
	 *
	 * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.
	 *
	 * ###### HTML
	 *
	 * Raw HTML is available in mdast as `html` nodes and can be embedded in hast
	 * as semistandard `raw` nodes.
	 * Most plugins ignore `raw` nodes but two notable ones don’t:
	 *
	 * *   `rehype-stringify` also has an option `allowDangerousHtml` which will
	 *     output the raw HTML.
	 *     This is typically discouraged as noted by the option name but is useful if
	 *     you completely trust authors
	 * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them
	 *     into standard hast nodes (`element`, `text`, etc).
	 *     This is a heavy task as it needs a full HTML parser, but it is the only way
	 *     to support untrusted content
	 *
	 * ###### Footnotes
	 *
	 * Many options supported here relate to footnotes.
	 * Footnotes are not specified by CommonMark, which we follow by default.
	 * They are supported by GitHub, so footnotes can be enabled in markdown with
	 * `remark-gfm`.
	 *
	 * The options `footnoteBackLabel` and `footnoteLabel` define natural language
	 * that explains footnotes, which is hidden for sighted users but shown to
	 * assistive technology.
	 * When your page is not in English, you must define translated values.
	 *
	 * Back references use ARIA attributes, but the section label itself uses a
	 * heading that is hidden with an `sr-only` class.
	 * To show it to sighted users, define different attributes in
	 * `footnoteLabelProperties`.
	 *
	 * ###### Clobbering
	 *
	 * Footnotes introduces a problem, as it links footnote calls to footnote
	 * definitions on the page through `id` attributes generated from user content,
	 * which results in DOM clobbering.
	 *
	 * DOM clobbering is this:
	 *
	 * ```html
	 * <p id=x></p>
	 * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>
	 * ```
	 *
	 * Elements by their ID are made available by browsers on the `window` object,
	 * which is a security risk.
	 * Using a prefix solves this problem.
	 *
	 * More information on how to handle clobbering and the prefix is explained in
	 * *Example: headings (DOM clobbering)* in `rehype-sanitize`.
	 *
	 * ###### Unknown nodes
	 *
	 * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.
	 * The default behavior for unknown nodes is:
	 *
	 * *   when the node has a `value` (and doesn’t have `data.hName`,
	 *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`
	 *     node
	 * *   otherwise, create a `<div>` element (which could be changed with
	 *     `data.hName`), with its children mapped from mdast to hast as well
	 *
	 * This behavior can be changed by passing an `unknownHandler`.
	 *
	 * @overload
	 * @param {Processor} processor
	 * @param {Readonly<Options> | null | undefined} [options]
	 * @returns {TransformBridge}
	 *
	 * @overload
	 * @param {Readonly<Options> | null | undefined} [options]
	 * @returns {TransformMutate}
	 *
	 * @param {Readonly<Options> | Processor | null | undefined} [destination]
	 *   Processor or configuration (optional).
	 * @param {Readonly<Options> | null | undefined} [options]
	 *   When a processor was given, configuration (optional).
	 * @returns {TransformBridge | TransformMutate}
	 *   Transform.
	 */
	function remarkRehype(destination, options) {
	  if (destination && 'run' in destination) {
	    /**
	     * @type {TransformBridge}
	     */
	    return async function (tree, file) {
	      // Cast because root in -> root out.
	      const hastTree = /** @type {HastRoot} */ (toHast(tree, options));
	      await destination.run(hastTree, file);
	    }
	  }

	  /**
	   * @type {TransformMutate}
	   */
	  return function (tree) {
	    // Cast because root in -> root out.
	    return /** @type {HastRoot} */ (toHast(tree, options || destination))
	  }
	}

	/**
	 * Throw a given error.
	 *
	 * @param {Error|null|undefined} [error]
	 *   Maybe error.
	 * @returns {asserts error is null|undefined}
	 */
	function bail(error) {
	  if (error) {
	    throw error
	  }
	}

	var hasOwn = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var defineProperty = Object.defineProperty;
	var gOPD = Object.getOwnPropertyDescriptor;

	var isArray = function isArray(arr) {
		if (typeof Array.isArray === 'function') {
			return Array.isArray(arr);
		}

		return toStr.call(arr) === '[object Array]';
	};

	var isPlainObject$1 = function isPlainObject(obj) {
		if (!obj || toStr.call(obj) !== '[object Object]') {
			return false;
		}

		var hasOwnConstructor = hasOwn.call(obj, 'constructor');
		var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
		// Not own constructor property must be Object
		if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		var key;
		for (key in obj) { /**/ }

		return typeof key === 'undefined' || hasOwn.call(obj, key);
	};

	// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
	var setProperty = function setProperty(target, options) {
		if (defineProperty && options.name === '__proto__') {
			defineProperty(target, options.name, {
				enumerable: true,
				configurable: true,
				value: options.newValue,
				writable: true
			});
		} else {
			target[options.name] = options.newValue;
		}
	};

	// Return undefined instead of __proto__ if '__proto__' is not an own property
	var getProperty = function getProperty(obj, name) {
		if (name === '__proto__') {
			if (!hasOwn.call(obj, name)) {
				return void 0;
			} else if (gOPD) {
				// In early versions of node, obj['__proto__'] is buggy when obj has
				// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
				return gOPD(obj, name).value;
			}
		}

		return obj[name];
	};

	var extend = function extend() {
		var options, name, src, copy, copyIsArray, clone;
		var target = arguments[0];
		var i = 1;
		var length = arguments.length;
		var deep = false;

		// Handle a deep copy situation
		if (typeof target === 'boolean') {
			deep = target;
			target = arguments[1] || {};
			// skip the boolean and the target
			i = 2;
		}
		if (target == null || (typeof target !== 'object' && typeof target !== 'function')) {
			target = {};
		}

		for (; i < length; ++i) {
			options = arguments[i];
			// Only deal with non-null/undefined values
			if (options != null) {
				// Extend the base object
				for (name in options) {
					src = getProperty(target, name);
					copy = getProperty(options, name);

					// Prevent never-ending loop
					if (target !== copy) {
						// Recurse if we're merging plain objects or arrays
						if (deep && copy && (isPlainObject$1(copy) || (copyIsArray = isArray(copy)))) {
							if (copyIsArray) {
								copyIsArray = false;
								clone = src && isArray(src) ? src : [];
							} else {
								clone = src && isPlainObject$1(src) ? src : {};
							}

							// Never move original objects, clone them
							setProperty(target, { name: name, newValue: extend(deep, clone, copy) });

						// Don't bring in undefined values
						} else if (typeof copy !== 'undefined') {
							setProperty(target, { name: name, newValue: copy });
						}
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	const extend$1 = /*@__PURE__*/getDefaultExportFromCjs(extend);

	function isPlainObject(value) {
		if (typeof value !== 'object' || value === null) {
			return false;
		}

		const prototype = Object.getPrototypeOf(value);
		return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
	}

	/**
	 * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback
	 * @typedef {(...input: Array<any>) => any} Middleware
	 *
	 * @typedef {(...input: Array<any>) => void} Run
	 *   Call all middleware.
	 * @typedef {(fn: Middleware) => Pipeline} Use
	 *   Add `fn` (middleware) to the list.
	 * @typedef {{run: Run, use: Use}} Pipeline
	 *   Middleware.
	 */

	/**
	 * Create new middleware.
	 *
	 * @returns {Pipeline}
	 */
	function trough() {
	  /** @type {Array<Middleware>} */
	  const fns = [];
	  /** @type {Pipeline} */
	  const pipeline = {run, use};

	  return pipeline

	  /** @type {Run} */
	  function run(...values) {
	    let middlewareIndex = -1;
	    /** @type {Callback} */
	    const callback = values.pop();

	    if (typeof callback !== 'function') {
	      throw new TypeError('Expected function as last argument, not ' + callback)
	    }

	    next(null, ...values);

	    /**
	     * Run the next `fn`, or we’re done.
	     *
	     * @param {Error|null|undefined} error
	     * @param {Array<any>} output
	     */
	    function next(error, ...output) {
	      const fn = fns[++middlewareIndex];
	      let index = -1;

	      if (error) {
	        callback(error);
	        return
	      }

	      // Copy non-nullish input into values.
	      while (++index < values.length) {
	        if (output[index] === null || output[index] === undefined) {
	          output[index] = values[index];
	        }
	      }

	      // Save the newly created `output` for the next call.
	      values = output;

	      // Next or done.
	      if (fn) {
	        wrap(fn, next)(...output);
	      } else {
	        callback(null, ...output);
	      }
	    }
	  }

	  /** @type {Use} */
	  function use(middelware) {
	    if (typeof middelware !== 'function') {
	      throw new TypeError(
	        'Expected `middelware` to be a function, not ' + middelware
	      )
	    }

	    fns.push(middelware);
	    return pipeline
	  }
	}

	/**
	 * Wrap `middleware`.
	 * Can be sync or async; return a promise, receive a callback, or return new
	 * values and errors.
	 *
	 * @param {Middleware} middleware
	 * @param {Callback} callback
	 */
	function wrap(middleware, callback) {
	  /** @type {boolean} */
	  let called;

	  return wrapped

	  /**
	   * Call `middleware`.
	   * @this {any}
	   * @param {Array<any>} parameters
	   * @returns {void}
	   */
	  function wrapped(...parameters) {
	    const fnExpectsCallback = middleware.length > parameters.length;
	    /** @type {any} */
	    let result;

	    if (fnExpectsCallback) {
	      parameters.push(done);
	    }

	    try {
	      result = middleware.apply(this, parameters);
	    } catch (error) {
	      const exception = /** @type {Error} */ (error);

	      // Well, this is quite the pickle.
	      // `middleware` received a callback and called it synchronously, but that
	      // threw an error.
	      // The only thing left to do is to throw the thing instead.
	      if (fnExpectsCallback && called) {
	        throw exception
	      }

	      return done(exception)
	    }

	    if (!fnExpectsCallback) {
	      if (result instanceof Promise) {
	        result.then(then, done);
	      } else if (result instanceof Error) {
	        done(result);
	      } else {
	        then(result);
	      }
	    }
	  }

	  /**
	   * Call `callback`, only once.
	   * @type {Callback}
	   */
	  function done(error, ...output) {
	    if (!called) {
	      called = true;
	      callback(error, ...output);
	    }
	  }

	  /**
	   * Call `done` with one value.
	   *
	   * @param {any} [value]
	   */
	  function then(value) {
	    done(null, value);
	  }
	}

	// A derivative work based on:
	// <https://github.com/browserify/path-browserify>.
	// Which is licensed:
	//
	// MIT License
	//
	// Copyright (c) 2013 James Halliday
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy of
	// this software and associated documentation files (the "Software"), to deal in
	// the Software without restriction, including without limitation the rights to
	// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
	// the Software, and to permit persons to whom the Software is furnished to do so,
	// subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in all
	// copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
	// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
	// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
	// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
	// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	// A derivative work based on:
	//
	// Parts of that are extracted from Node’s internal `path` module:
	// <https://github.com/nodejs/node/blob/master/lib/path.js>.
	// Which is licensed:
	//
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	const path$1 = {basename, dirname, extname, join, sep: '/'};

	/* eslint-disable max-depth, complexity */

	/**
	 * Get the basename from a path.
	 *
	 * @param {string} path
	 *   File path.
	 * @param {string | null | undefined} [ext]
	 *   Extension to strip.
	 * @returns {string}
	 *   Stem or basename.
	 */
	function basename(path, ext) {
	  if (ext !== undefined && typeof ext !== 'string') {
	    throw new TypeError('"ext" argument must be a string')
	  }

	  assertPath$1(path);
	  let start = 0;
	  let end = -1;
	  let index = path.length;
	  /** @type {boolean | undefined} */
	  let seenNonSlash;

	  if (ext === undefined || ext.length === 0 || ext.length > path.length) {
	    while (index--) {
	      if (path.codePointAt(index) === 47 /* `/` */) {
	        // If we reached a path separator that was not part of a set of path
	        // separators at the end of the string, stop now.
	        if (seenNonSlash) {
	          start = index + 1;
	          break
	        }
	      } else if (end < 0) {
	        // We saw the first non-path separator, mark this as the end of our
	        // path component.
	        seenNonSlash = true;
	        end = index + 1;
	      }
	    }

	    return end < 0 ? '' : path.slice(start, end)
	  }

	  if (ext === path) {
	    return ''
	  }

	  let firstNonSlashEnd = -1;
	  let extIndex = ext.length - 1;

	  while (index--) {
	    if (path.codePointAt(index) === 47 /* `/` */) {
	      // If we reached a path separator that was not part of a set of path
	      // separators at the end of the string, stop now.
	      if (seenNonSlash) {
	        start = index + 1;
	        break
	      }
	    } else {
	      if (firstNonSlashEnd < 0) {
	        // We saw the first non-path separator, remember this index in case
	        // we need it if the extension ends up not matching.
	        seenNonSlash = true;
	        firstNonSlashEnd = index + 1;
	      }

	      if (extIndex > -1) {
	        // Try to match the explicit extension.
	        if (path.codePointAt(index) === ext.codePointAt(extIndex--)) {
	          if (extIndex < 0) {
	            // We matched the extension, so mark this as the end of our path
	            // component
	            end = index;
	          }
	        } else {
	          // Extension does not match, so our result is the entire path
	          // component
	          extIndex = -1;
	          end = firstNonSlashEnd;
	        }
	      }
	    }
	  }

	  if (start === end) {
	    end = firstNonSlashEnd;
	  } else if (end < 0) {
	    end = path.length;
	  }

	  return path.slice(start, end)
	}

	/**
	 * Get the dirname from a path.
	 *
	 * @param {string} path
	 *   File path.
	 * @returns {string}
	 *   File path.
	 */
	function dirname(path) {
	  assertPath$1(path);

	  if (path.length === 0) {
	    return '.'
	  }

	  let end = -1;
	  let index = path.length;
	  /** @type {boolean | undefined} */
	  let unmatchedSlash;

	  // Prefix `--` is important to not run on `0`.
	  while (--index) {
	    if (path.codePointAt(index) === 47 /* `/` */) {
	      if (unmatchedSlash) {
	        end = index;
	        break
	      }
	    } else if (!unmatchedSlash) {
	      // We saw the first non-path separator
	      unmatchedSlash = true;
	    }
	  }

	  return end < 0
	    ? path.codePointAt(0) === 47 /* `/` */
	      ? '/'
	      : '.'
	    : end === 1 && path.codePointAt(0) === 47 /* `/` */
	    ? '//'
	    : path.slice(0, end)
	}

	/**
	 * Get an extname from a path.
	 *
	 * @param {string} path
	 *   File path.
	 * @returns {string}
	 *   Extname.
	 */
	function extname(path) {
	  assertPath$1(path);

	  let index = path.length;

	  let end = -1;
	  let startPart = 0;
	  let startDot = -1;
	  // Track the state of characters (if any) we see before our first dot and
	  // after any path separator we find.
	  let preDotState = 0;
	  /** @type {boolean | undefined} */
	  let unmatchedSlash;

	  while (index--) {
	    const code = path.codePointAt(index);

	    if (code === 47 /* `/` */) {
	      // If we reached a path separator that was not part of a set of path
	      // separators at the end of the string, stop now.
	      if (unmatchedSlash) {
	        startPart = index + 1;
	        break
	      }

	      continue
	    }

	    if (end < 0) {
	      // We saw the first non-path separator, mark this as the end of our
	      // extension.
	      unmatchedSlash = true;
	      end = index + 1;
	    }

	    if (code === 46 /* `.` */) {
	      // If this is our first dot, mark it as the start of our extension.
	      if (startDot < 0) {
	        startDot = index;
	      } else if (preDotState !== 1) {
	        preDotState = 1;
	      }
	    } else if (startDot > -1) {
	      // We saw a non-dot and non-path separator before our dot, so we should
	      // have a good chance at having a non-empty extension.
	      preDotState = -1;
	    }
	  }

	  if (
	    startDot < 0 ||
	    end < 0 ||
	    // We saw a non-dot character immediately before the dot.
	    preDotState === 0 ||
	    // The (right-most) trimmed path component is exactly `..`.
	    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)
	  ) {
	    return ''
	  }

	  return path.slice(startDot, end)
	}

	/**
	 * Join segments from a path.
	 *
	 * @param {Array<string>} segments
	 *   Path segments.
	 * @returns {string}
	 *   File path.
	 */
	function join(...segments) {
	  let index = -1;
	  /** @type {string | undefined} */
	  let joined;

	  while (++index < segments.length) {
	    assertPath$1(segments[index]);

	    if (segments[index]) {
	      joined =
	        joined === undefined ? segments[index] : joined + '/' + segments[index];
	    }
	  }

	  return joined === undefined ? '.' : normalize(joined)
	}

	/**
	 * Normalize a basic file path.
	 *
	 * @param {string} path
	 *   File path.
	 * @returns {string}
	 *   File path.
	 */
	// Note: `normalize` is not exposed as `path.normalize`, so some code is
	// manually removed from it.
	function normalize(path) {
	  assertPath$1(path);

	  const absolute = path.codePointAt(0) === 47; /* `/` */

	  // Normalize the path according to POSIX rules.
	  let value = normalizeString(path, !absolute);

	  if (value.length === 0 && !absolute) {
	    value = '.';
	  }

	  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {
	    value += '/';
	  }

	  return absolute ? '/' + value : value
	}

	/**
	 * Resolve `.` and `..` elements in a path with directory names.
	 *
	 * @param {string} path
	 *   File path.
	 * @param {boolean} allowAboveRoot
	 *   Whether `..` can move above root.
	 * @returns {string}
	 *   File path.
	 */
	function normalizeString(path, allowAboveRoot) {
	  let result = '';
	  let lastSegmentLength = 0;
	  let lastSlash = -1;
	  let dots = 0;
	  let index = -1;
	  /** @type {number | undefined} */
	  let code;
	  /** @type {number} */
	  let lastSlashIndex;

	  while (++index <= path.length) {
	    if (index < path.length) {
	      code = path.codePointAt(index);
	    } else if (code === 47 /* `/` */) {
	      break
	    } else {
	      code = 47; /* `/` */
	    }

	    if (code === 47 /* `/` */) {
	      if (lastSlash === index - 1 || dots === 1) ; else if (lastSlash !== index - 1 && dots === 2) {
	        if (
	          result.length < 2 ||
	          lastSegmentLength !== 2 ||
	          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||
	          result.codePointAt(result.length - 2) !== 46 /* `.` */
	        ) {
	          if (result.length > 2) {
	            lastSlashIndex = result.lastIndexOf('/');

	            if (lastSlashIndex !== result.length - 1) {
	              if (lastSlashIndex < 0) {
	                result = '';
	                lastSegmentLength = 0;
	              } else {
	                result = result.slice(0, lastSlashIndex);
	                lastSegmentLength = result.length - 1 - result.lastIndexOf('/');
	              }

	              lastSlash = index;
	              dots = 0;
	              continue
	            }
	          } else if (result.length > 0) {
	            result = '';
	            lastSegmentLength = 0;
	            lastSlash = index;
	            dots = 0;
	            continue
	          }
	        }

	        if (allowAboveRoot) {
	          result = result.length > 0 ? result + '/..' : '..';
	          lastSegmentLength = 2;
	        }
	      } else {
	        if (result.length > 0) {
	          result += '/' + path.slice(lastSlash + 1, index);
	        } else {
	          result = path.slice(lastSlash + 1, index);
	        }

	        lastSegmentLength = index - lastSlash - 1;
	      }

	      lastSlash = index;
	      dots = 0;
	    } else if (code === 46 /* `.` */ && dots > -1) {
	      dots++;
	    } else {
	      dots = -1;
	    }
	  }

	  return result
	}

	/**
	 * Make sure `path` is a string.
	 *
	 * @param {string} path
	 *   File path.
	 * @returns {asserts path is string}
	 *   Nothing.
	 */
	function assertPath$1(path) {
	  if (typeof path !== 'string') {
	    throw new TypeError(
	      'Path must be a string. Received ' + JSON.stringify(path)
	    )
	  }
	}

	/* eslint-enable max-depth, complexity */

	// Somewhat based on:
	// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.
	// But I don’t think one tiny line of code can be copyrighted. 😅
	const proc = {cwd};

	function cwd() {
	  return '/'
	}

	/**
	 * Checks if a value has the shape of a WHATWG URL object.
	 *
	 * Using a symbol or instanceof would not be able to recognize URL objects
	 * coming from other implementations (e.g. in Electron), so instead we are
	 * checking some well known properties for a lack of a better test.
	 *
	 * We use `href` and `protocol` as they are the only properties that are
	 * easy to retrieve and calculate due to the lazy nature of the getters.
	 *
	 * We check for auth attribute to distinguish legacy url instance with
	 * WHATWG URL instance.
	 *
	 * @param {unknown} fileUrlOrPath
	 *   File path or URL.
	 * @returns {fileUrlOrPath is URL}
	 *   Whether it’s a URL.
	 */
	// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>
	function isUrl(fileUrlOrPath) {
	  return Boolean(
	    fileUrlOrPath !== null &&
	      typeof fileUrlOrPath === 'object' &&
	      'href' in fileUrlOrPath &&
	      fileUrlOrPath.href &&
	      'protocol' in fileUrlOrPath &&
	      fileUrlOrPath.protocol &&
	      // @ts-expect-error: indexing is fine.
	      fileUrlOrPath.auth === undefined
	  )
	}

	// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>

	/**
	 * @param {URL | string} path
	 *   File URL.
	 * @returns {string}
	 *   File URL.
	 */
	function urlToPath(path) {
	  if (typeof path === 'string') {
	    path = new URL(path);
	  } else if (!isUrl(path)) {
	    /** @type {NodeJS.ErrnoException} */
	    const error = new TypeError(
	      'The "path" argument must be of type string or an instance of URL. Received `' +
	        path +
	        '`'
	    );
	    error.code = 'ERR_INVALID_ARG_TYPE';
	    throw error
	  }

	  if (path.protocol !== 'file:') {
	    /** @type {NodeJS.ErrnoException} */
	    const error = new TypeError('The URL must be of scheme file');
	    error.code = 'ERR_INVALID_URL_SCHEME';
	    throw error
	  }

	  return getPathFromURLPosix(path)
	}

	/**
	 * Get a path from a POSIX URL.
	 *
	 * @param {URL} url
	 *   URL.
	 * @returns {string}
	 *   File path.
	 */
	function getPathFromURLPosix(url) {
	  if (url.hostname !== '') {
	    /** @type {NodeJS.ErrnoException} */
	    const error = new TypeError(
	      'File URL host must be "localhost" or empty on darwin'
	    );
	    error.code = 'ERR_INVALID_FILE_URL_HOST';
	    throw error
	  }

	  const pathname = url.pathname;
	  let index = -1;

	  while (++index < pathname.length) {
	    if (
	      pathname.codePointAt(index) === 37 /* `%` */ &&
	      pathname.codePointAt(index + 1) === 50 /* `2` */
	    ) {
	      const third = pathname.codePointAt(index + 2);
	      if (third === 70 /* `F` */ || third === 102 /* `f` */) {
	        /** @type {NodeJS.ErrnoException} */
	        const error = new TypeError(
	          'File URL path must not include encoded / characters'
	        );
	        error.code = 'ERR_INVALID_FILE_URL_PATH';
	        throw error
	      }
	    }
	  }

	  return decodeURIComponent(pathname)
	}

	/**
	 * @typedef {import('unist').Node} Node
	 * @typedef {import('unist').Point} Point
	 * @typedef {import('unist').Position} Position
	 * @typedef {import('vfile-message').Options} MessageOptions
	 * @typedef {import('../index.js').Data} Data
	 * @typedef {import('../index.js').Value} Value
	 */


	/**
	 * Order of setting (least specific to most), we need this because otherwise
	 * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a
	 * stem can be set.
	 */
	const order = /** @type {const} */ ([
	  'history',
	  'path',
	  'basename',
	  'stem',
	  'extname',
	  'dirname'
	]);

	class VFile {
	  /**
	   * Create a new virtual file.
	   *
	   * `options` is treated as:
	   *
	   * *   `string` or `Uint8Array` — `{value: options}`
	   * *   `URL` — `{path: options}`
	   * *   `VFile` — shallow copies its data over to the new file
	   * *   `object` — all fields are shallow copied over to the new file
	   *
	   * Path related fields are set in the following order (least specific to
	   * most specific): `history`, `path`, `basename`, `stem`, `extname`,
	   * `dirname`.
	   *
	   * You cannot set `dirname` or `extname` without setting either `history`,
	   * `path`, `basename`, or `stem` too.
	   *
	   * @param {Compatible | null | undefined} [value]
	   *   File value.
	   * @returns
	   *   New instance.
	   */
	  constructor(value) {
	    /** @type {Options | VFile} */
	    let options;

	    if (!value) {
	      options = {};
	    } else if (isUrl(value)) {
	      options = {path: value};
	    } else if (typeof value === 'string' || isUint8Array$1(value)) {
	      options = {value};
	    } else {
	      options = value;
	    }

	    /* eslint-disable no-unused-expressions */

	    /**
	     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).
	     *
	     * @type {string}
	     */
	    this.cwd = proc.cwd();

	    /**
	     * Place to store custom info (default: `{}`).
	     *
	     * It’s OK to store custom data directly on the file but moving it to
	     * `data` is recommended.
	     *
	     * @type {Data}
	     */
	    this.data = {};

	    /**
	     * List of file paths the file moved between.
	     *
	     * The first is the original path and the last is the current path.
	     *
	     * @type {Array<string>}
	     */
	    this.history = [];

	    /**
	     * List of messages associated with the file.
	     *
	     * @type {Array<VFileMessage>}
	     */
	    this.messages = [];

	    /**
	     * Raw value.
	     *
	     * @type {Value}
	     */
	    this.value;

	    // The below are non-standard, they are “well-known”.
	    // As in, used in several tools.
	    /**
	     * Source map.
	     *
	     * This type is equivalent to the `RawSourceMap` type from the `source-map`
	     * module.
	     *
	     * @type {Map | null | undefined}
	     */
	    this.map;

	    /**
	     * Custom, non-string, compiled, representation.
	     *
	     * This is used by unified to store non-string results.
	     * One example is when turning markdown into React nodes.
	     *
	     * @type {unknown}
	     */
	    this.result;

	    /**
	     * Whether a file was saved to disk.
	     *
	     * This is used by vfile reporters.
	     *
	     * @type {boolean}
	     */
	    this.stored;
	    /* eslint-enable no-unused-expressions */

	    // Set path related properties in the correct order.
	    let index = -1;

	    while (++index < order.length) {
	      const prop = order[index];

	      // Note: we specifically use `in` instead of `hasOwnProperty` to accept
	      // `vfile`s too.
	      if (
	        prop in options &&
	        options[prop] !== undefined &&
	        options[prop] !== null
	      ) {
	        // @ts-expect-error: TS doesn’t understand basic reality.
	        this[prop] = prop === 'history' ? [...options[prop]] : options[prop];
	      }
	    }

	    /** @type {string} */
	    let prop;

	    // Set non-path related properties.
	    for (prop in options) {
	      // @ts-expect-error: fine to set other things.
	      if (!order.includes(prop)) {
	        // @ts-expect-error: fine to set other things.
	        this[prop] = options[prop];
	      }
	    }
	  }

	  /**
	   * Get the basename (including extname) (example: `'index.min.js'`).
	   *
	   * @returns {string | undefined}
	   *   Basename.
	   */
	  get basename() {
	    return typeof this.path === 'string' ? path$1.basename(this.path) : undefined
	  }

	  /**
	   * Set basename (including extname) (`'index.min.js'`).
	   *
	   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
	   * on windows).
	   * Cannot be nullified (use `file.path = file.dirname` instead).
	   *
	   * @param {string} basename
	   *   Basename.
	   * @returns {undefined}
	   *   Nothing.
	   */
	  set basename(basename) {
	    assertNonEmpty(basename, 'basename');
	    assertPart(basename, 'basename');
	    this.path = path$1.join(this.dirname || '', basename);
	  }

	  /**
	   * Get the parent path (example: `'~'`).
	   *
	   * @returns {string | undefined}
	   *   Dirname.
	   */
	  get dirname() {
	    return typeof this.path === 'string' ? path$1.dirname(this.path) : undefined
	  }

	  /**
	   * Set the parent path (example: `'~'`).
	   *
	   * Cannot be set if there’s no `path` yet.
	   *
	   * @param {string | undefined} dirname
	   *   Dirname.
	   * @returns {undefined}
	   *   Nothing.
	   */
	  set dirname(dirname) {
	    assertPath(this.basename, 'dirname');
	    this.path = path$1.join(dirname || '', this.basename);
	  }

	  /**
	   * Get the extname (including dot) (example: `'.js'`).
	   *
	   * @returns {string | undefined}
	   *   Extname.
	   */
	  get extname() {
	    return typeof this.path === 'string' ? path$1.extname(this.path) : undefined
	  }

	  /**
	   * Set the extname (including dot) (example: `'.js'`).
	   *
	   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
	   * on windows).
	   * Cannot be set if there’s no `path` yet.
	   *
	   * @param {string | undefined} extname
	   *   Extname.
	   * @returns {undefined}
	   *   Nothing.
	   */
	  set extname(extname) {
	    assertPart(extname, 'extname');
	    assertPath(this.dirname, 'extname');

	    if (extname) {
	      if (extname.codePointAt(0) !== 46 /* `.` */) {
	        throw new Error('`extname` must start with `.`')
	      }

	      if (extname.includes('.', 1)) {
	        throw new Error('`extname` cannot contain multiple dots')
	      }
	    }

	    this.path = path$1.join(this.dirname, this.stem + (extname || ''));
	  }

	  /**
	   * Get the full path (example: `'~/index.min.js'`).
	   *
	   * @returns {string}
	   *   Path.
	   */
	  get path() {
	    return this.history[this.history.length - 1]
	  }

	  /**
	   * Set the full path (example: `'~/index.min.js'`).
	   *
	   * Cannot be nullified.
	   * You can set a file URL (a `URL` object with a `file:` protocol) which will
	   * be turned into a path with `url.fileURLToPath`.
	   *
	   * @param {URL | string} path
	   *   Path.
	   * @returns {undefined}
	   *   Nothing.
	   */
	  set path(path) {
	    if (isUrl(path)) {
	      path = urlToPath(path);
	    }

	    assertNonEmpty(path, 'path');

	    if (this.path !== path) {
	      this.history.push(path);
	    }
	  }

	  /**
	   * Get the stem (basename w/o extname) (example: `'index.min'`).
	   *
	   * @returns {string | undefined}
	   *   Stem.
	   */
	  get stem() {
	    return typeof this.path === 'string'
	      ? path$1.basename(this.path, this.extname)
	      : undefined
	  }

	  /**
	   * Set the stem (basename w/o extname) (example: `'index.min'`).
	   *
	   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
	   * on windows).
	   * Cannot be nullified (use `file.path = file.dirname` instead).
	   *
	   * @param {string} stem
	   *   Stem.
	   * @returns {undefined}
	   *   Nothing.
	   */
	  set stem(stem) {
	    assertNonEmpty(stem, 'stem');
	    assertPart(stem, 'stem');
	    this.path = path$1.join(this.dirname || '', stem + (this.extname || ''));
	  }

	  // Normal prototypal methods.
	  /**
	   * Create a fatal message for `reason` associated with the file.
	   *
	   * The `fatal` field of the message is set to `true` (error; file not usable)
	   * and the `file` field is set to the current file path.
	   * The message is added to the `messages` field on `file`.
	   *
	   * > 🪦 **Note**: also has obsolete signatures.
	   *
	   * @overload
	   * @param {string} reason
	   * @param {MessageOptions | null | undefined} [options]
	   * @returns {never}
	   *
	   * @overload
	   * @param {string} reason
	   * @param {Node | NodeLike | null | undefined} parent
	   * @param {string | null | undefined} [origin]
	   * @returns {never}
	   *
	   * @overload
	   * @param {string} reason
	   * @param {Point | Position | null | undefined} place
	   * @param {string | null | undefined} [origin]
	   * @returns {never}
	   *
	   * @overload
	   * @param {string} reason
	   * @param {string | null | undefined} [origin]
	   * @returns {never}
	   *
	   * @overload
	   * @param {Error | VFileMessage} cause
	   * @param {Node | NodeLike | null | undefined} parent
	   * @param {string | null | undefined} [origin]
	   * @returns {never}
	   *
	   * @overload
	   * @param {Error | VFileMessage} cause
	   * @param {Point | Position | null | undefined} place
	   * @param {string | null | undefined} [origin]
	   * @returns {never}
	   *
	   * @overload
	   * @param {Error | VFileMessage} cause
	   * @param {string | null | undefined} [origin]
	   * @returns {never}
	   *
	   * @param {Error | VFileMessage | string} causeOrReason
	   *   Reason for message, should use markdown.
	   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
	   *   Configuration (optional).
	   * @param {string | null | undefined} [origin]
	   *   Place in code where the message originates (example:
	   *   `'my-package:my-rule'` or `'my-rule'`).
	   * @returns {never}
	   *   Never.
	   * @throws {VFileMessage}
	   *   Message.
	   */
	  fail(causeOrReason, optionsOrParentOrPlace, origin) {
	    // @ts-expect-error: the overloads are fine.
	    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);

	    message.fatal = true;

	    throw message
	  }

	  /**
	   * Create an info message for `reason` associated with the file.
	   *
	   * The `fatal` field of the message is set to `undefined` (info; change
	   * likely not needed) and the `file` field is set to the current file path.
	   * The message is added to the `messages` field on `file`.
	   *
	   * > 🪦 **Note**: also has obsolete signatures.
	   *
	   * @overload
	   * @param {string} reason
	   * @param {MessageOptions | null | undefined} [options]
	   * @returns {VFileMessage}
	   *
	   * @overload
	   * @param {string} reason
	   * @param {Node | NodeLike | null | undefined} parent
	   * @param {string | null | undefined} [origin]
	   * @returns {VFileMessage}
	   *
	   * @overload
	   * @param {string} reason
	   * @param {Point | Position | null | undefined} place
	   * @param {string | null | undefined} [origin]
	   * @returns {VFileMessage}
	   *
	   * @overload
	   * @param {string} reason
	   * @param {string | null | undefined} [origin]
	   * @returns {VFileMessage}
	   *
	   * @overload
	   * @param {Error | VFileMessage} cause
	   * @param {Node | NodeLike | null | undefined} parent
	   * @param {string | null | undefined} [origin]
	   * @returns {VFileMessage}
	   *
	   * @overload
	   * @param {Error | VFileMessage} cause
	   * @param {Point | Position | null | undefined} place
	   * @param {string | null | undefined} [origin]
	   * @returns {VFileMessage}
	   *
	   * @overload
	   * @param {Error | VFileMessage} cause
	   * @param {string | null | undefined} [origin]
	   * @returns {VFileMessage}
	   *
	   * @param {Error | VFileMessage | string} causeOrReason
	   *   Reason for message, should use markdown.
	   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
	   *   Configuration (optional).
	   * @param {string | null | undefined} [origin]
	   *   Place in code where the message originates (example:
	   *   `'my-package:my-rule'` or `'my-rule'`).
	   * @returns {VFileMessage}
	   *   Message.
	   */
	  info(causeOrReason, optionsOrParentOrPlace, origin) {
	    // @ts-expect-error: the overloads are fine.
	    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);

	    message.fatal = undefined;

	    return message
	  }

	  /**
	   * Create a message for `reason` associated with the file.
	   *
	   * The `fatal` field of the message is set to `false` (warning; change may be
	   * needed) and the `file` field is set to the current file path.
	   * The message is added to the `messages` field on `file`.
	   *
	   * > 🪦 **Note**: also has obsolete signatures.
	   *
	   * @overload
	   * @param {string} reason
	   * @param {MessageOptions | null | undefined} [options]
	   * @returns {VFileMessage}
	   *
	   * @overload
	   * @param {string} reason
	   * @param {Node | NodeLike | null | undefined} parent
	   * @param {string | null | undefined} [origin]
	   * @returns {VFileMessage}
	   *
	   * @overload
	   * @param {string} reason
	   * @param {Point | Position | null | undefined} place
	   * @param {string | null | undefined} [origin]
	   * @returns {VFileMessage}
	   *
	   * @overload
	   * @param {string} reason
	   * @param {string | null | undefined} [origin]
	   * @returns {VFileMessage}
	   *
	   * @overload
	   * @param {Error | VFileMessage} cause
	   * @param {Node | NodeLike | null | undefined} parent
	   * @param {string | null | undefined} [origin]
	   * @returns {VFileMessage}
	   *
	   * @overload
	   * @param {Error | VFileMessage} cause
	   * @param {Point | Position | null | undefined} place
	   * @param {string | null | undefined} [origin]
	   * @returns {VFileMessage}
	   *
	   * @overload
	   * @param {Error | VFileMessage} cause
	   * @param {string | null | undefined} [origin]
	   * @returns {VFileMessage}
	   *
	   * @param {Error | VFileMessage | string} causeOrReason
	   *   Reason for message, should use markdown.
	   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
	   *   Configuration (optional).
	   * @param {string | null | undefined} [origin]
	   *   Place in code where the message originates (example:
	   *   `'my-package:my-rule'` or `'my-rule'`).
	   * @returns {VFileMessage}
	   *   Message.
	   */
	  message(causeOrReason, optionsOrParentOrPlace, origin) {
	    const message = new VFileMessage(
	      // @ts-expect-error: the overloads are fine.
	      causeOrReason,
	      optionsOrParentOrPlace,
	      origin
	    );

	    if (this.path) {
	      message.name = this.path + ':' + message.name;
	      message.file = this.path;
	    }

	    message.fatal = false;

	    this.messages.push(message);

	    return message
	  }

	  /**
	   * Serialize the file.
	   *
	   * > **Note**: which encodings are supported depends on the engine.
	   * > For info on Node.js, see:
	   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.
	   *
	   * @param {string | null | undefined} [encoding='utf8']
	   *   Character encoding to understand `value` as when it’s a `Uint8Array`
	   *   (default: `'utf-8'`).
	   * @returns {string}
	   *   Serialized file.
	   */
	  toString(encoding) {
	    if (this.value === undefined) {
	      return ''
	    }

	    if (typeof this.value === 'string') {
	      return this.value
	    }

	    const decoder = new TextDecoder(encoding || undefined);
	    return decoder.decode(this.value)
	  }
	}

	/**
	 * Assert that `part` is not a path (as in, does not contain `path.sep`).
	 *
	 * @param {string | null | undefined} part
	 *   File path part.
	 * @param {string} name
	 *   Part name.
	 * @returns {undefined}
	 *   Nothing.
	 */
	function assertPart(part, name) {
	  if (part && part.includes(path$1.sep)) {
	    throw new Error(
	      '`' + name + '` cannot be a path: did not expect `' + path$1.sep + '`'
	    )
	  }
	}

	/**
	 * Assert that `part` is not empty.
	 *
	 * @param {string | undefined} part
	 *   Thing.
	 * @param {string} name
	 *   Part name.
	 * @returns {asserts part is string}
	 *   Nothing.
	 */
	function assertNonEmpty(part, name) {
	  if (!part) {
	    throw new Error('`' + name + '` cannot be empty')
	  }
	}

	/**
	 * Assert `path` exists.
	 *
	 * @param {string | undefined} path
	 *   Path.
	 * @param {string} name
	 *   Dependency name.
	 * @returns {asserts path is string}
	 *   Nothing.
	 */
	function assertPath(path, name) {
	  if (!path) {
	    throw new Error('Setting `' + name + '` requires `path` to be set too')
	  }
	}

	/**
	 * Assert `value` is an `Uint8Array`.
	 *
	 * @param {unknown} value
	 *   thing.
	 * @returns {value is Uint8Array}
	 *   Whether `value` is an `Uint8Array`.
	 */
	function isUint8Array$1(value) {
	  return Boolean(
	    value &&
	      typeof value === 'object' &&
	      'byteLength' in value &&
	      'byteOffset' in value
	  )
	}

	const CallableInstance =
	  /**
	   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}
	   */
	  (
	    /** @type {unknown} */
	    (
	      /**
	       * @this {Function}
	       * @param {string | symbol} property
	       * @returns {(...parameters: Array<unknown>) => unknown}
	       */
	      function (property) {
	        const self = this;
	        const constr = self.constructor;
	        const proto = /** @type {Record<string | symbol, Function>} */ (
	          // Prototypes do exist.
	          // type-coverage:ignore-next-line
	          constr.prototype
	        );
	        const func = proto[property];
	        /** @type {(...parameters: Array<unknown>) => unknown} */
	        const apply = function () {
	          return func.apply(apply, arguments)
	        };

	        Object.setPrototypeOf(apply, proto);

	        const names = Object.getOwnPropertyNames(func);

	        for (const p of names) {
	          const descriptor = Object.getOwnPropertyDescriptor(func, p);
	          if (descriptor) Object.defineProperty(apply, p, descriptor);
	        }

	        return apply
	      }
	    )
	  );

	/**
	 * @typedef {import('trough').Pipeline} Pipeline
	 *
	 * @typedef {import('unist').Node} Node
	 *
	 * @typedef {import('vfile').Compatible} Compatible
	 * @typedef {import('vfile').Value} Value
	 *
	 * @typedef {import('../index.js').CompileResultMap} CompileResultMap
	 * @typedef {import('../index.js').Data} Data
	 * @typedef {import('../index.js').Settings} Settings
	 */


	// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.

	// To do: we could start yielding `never` in TS when a parser is missing and
	// `parse` is called.
	// Currently, we allow directly setting `processor.parser`, which is untyped.

	const own$b = {}.hasOwnProperty;

	/**
	 * @template {Node | undefined} [ParseTree=undefined]
	 *   Output of `parse` (optional).
	 * @template {Node | undefined} [HeadTree=undefined]
	 *   Input for `run` (optional).
	 * @template {Node | undefined} [TailTree=undefined]
	 *   Output for `run` (optional).
	 * @template {Node | undefined} [CompileTree=undefined]
	 *   Input of `stringify` (optional).
	 * @template {CompileResults | undefined} [CompileResult=undefined]
	 *   Output of `stringify` (optional).
	 * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}
	 */
	class Processor extends CallableInstance {
	  /**
	   * Create a processor.
	   */
	  constructor() {
	    // If `Processor()` is called (w/o new), `copy` is called instead.
	    super('copy');

	    /**
	     * Compiler to use (deprecated).
	     *
	     * @deprecated
	     *   Use `compiler` instead.
	     * @type {(
	     *   Compiler<
	     *     CompileTree extends undefined ? Node : CompileTree,
	     *     CompileResult extends undefined ? CompileResults : CompileResult
	     *   > |
	     *   undefined
	     * )}
	     */
	    this.Compiler = undefined;

	    /**
	     * Parser to use (deprecated).
	     *
	     * @deprecated
	     *   Use `parser` instead.
	     * @type {(
	     *   Parser<ParseTree extends undefined ? Node : ParseTree> |
	     *   undefined
	     * )}
	     */
	    this.Parser = undefined;

	    // Note: the following fields are considered private.
	    // However, they are needed for tests, and TSC generates an untyped
	    // `private freezeIndex` field for, which trips `type-coverage` up.
	    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.
	    /**
	     * Internal list of configured plugins.
	     *
	     * @deprecated
	     *   This is a private internal property and should not be used.
	     * @type {Array<PluginTuple<Array<unknown>>>}
	     */
	    this.attachers = [];

	    /**
	     * Compiler to use.
	     *
	     * @type {(
	     *   Compiler<
	     *     CompileTree extends undefined ? Node : CompileTree,
	     *     CompileResult extends undefined ? CompileResults : CompileResult
	     *   > |
	     *   undefined
	     * )}
	     */
	    this.compiler = undefined;

	    /**
	     * Internal state to track where we are while freezing.
	     *
	     * @deprecated
	     *   This is a private internal property and should not be used.
	     * @type {number}
	     */
	    this.freezeIndex = -1;

	    /**
	     * Internal state to track whether we’re frozen.
	     *
	     * @deprecated
	     *   This is a private internal property and should not be used.
	     * @type {boolean | undefined}
	     */
	    this.frozen = undefined;

	    /**
	     * Internal state.
	     *
	     * @deprecated
	     *   This is a private internal property and should not be used.
	     * @type {Data}
	     */
	    this.namespace = {};

	    /**
	     * Parser to use.
	     *
	     * @type {(
	     *   Parser<ParseTree extends undefined ? Node : ParseTree> |
	     *   undefined
	     * )}
	     */
	    this.parser = undefined;

	    /**
	     * Internal list of configured transformers.
	     *
	     * @deprecated
	     *   This is a private internal property and should not be used.
	     * @type {Pipeline}
	     */
	    this.transformers = trough();
	  }

	  /**
	   * Copy a processor.
	   *
	   * @deprecated
	   *   This is a private internal method and should not be used.
	   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
	   *   New *unfrozen* processor ({@link Processor `Processor`}) that is
	   *   configured to work the same as its ancestor.
	   *   When the descendant processor is configured in the future it does not
	   *   affect the ancestral processor.
	   */
	  copy() {
	    // Cast as the type parameters will be the same after attaching.
	    const destination =
	      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (
	        new Processor()
	      );
	    let index = -1;

	    while (++index < this.attachers.length) {
	      const attacher = this.attachers[index];
	      destination.use(...attacher);
	    }

	    destination.data(extend$1(true, {}, this.namespace));

	    return destination
	  }

	  /**
	   * Configure the processor with info available to all plugins.
	   * Information is stored in an object.
	   *
	   * Typically, options can be given to a specific plugin, but sometimes it
	   * makes sense to have information shared with several plugins.
	   * For example, a list of HTML elements that are self-closing, which is
	   * needed during all phases.
	   *
	   * > 👉 **Note**: setting information cannot occur on *frozen* processors.
	   * > Call the processor first to create a new unfrozen processor.
	   *
	   * > 👉 **Note**: to register custom data in TypeScript, augment the
	   * > {@link Data `Data`} interface.
	   *
	   * @example
	   *   This example show how to get and set info:
	   *
	   *   ```js
	   *   import {unified} from 'unified'
	   *
	   *   const processor = unified().data('alpha', 'bravo')
	   *
	   *   processor.data('alpha') // => 'bravo'
	   *
	   *   processor.data() // => {alpha: 'bravo'}
	   *
	   *   processor.data({charlie: 'delta'})
	   *
	   *   processor.data() // => {charlie: 'delta'}
	   *   ```
	   *
	   * @template {keyof Data} Key
	   *
	   * @overload
	   * @returns {Data}
	   *
	   * @overload
	   * @param {Data} dataset
	   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
	   *
	   * @overload
	   * @param {Key} key
	   * @returns {Data[Key]}
	   *
	   * @overload
	   * @param {Key} key
	   * @param {Data[Key]} value
	   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
	   *
	   * @param {Data | Key} [key]
	   *   Key to get or set, or entire dataset to set, or nothing to get the
	   *   entire dataset (optional).
	   * @param {Data[Key]} [value]
	   *   Value to set (optional).
	   * @returns {unknown}
	   *   The current processor when setting, the value at `key` when getting, or
	   *   the entire dataset when getting without key.
	   */
	  data(key, value) {
	    if (typeof key === 'string') {
	      // Set `key`.
	      if (arguments.length === 2) {
	        assertUnfrozen('data', this.frozen);
	        this.namespace[key] = value;
	        return this
	      }

	      // Get `key`.
	      return (own$b.call(this.namespace, key) && this.namespace[key]) || undefined
	    }

	    // Set space.
	    if (key) {
	      assertUnfrozen('data', this.frozen);
	      this.namespace = key;
	      return this
	    }

	    // Get space.
	    return this.namespace
	  }

	  /**
	   * Freeze a processor.
	   *
	   * Frozen processors are meant to be extended and not to be configured
	   * directly.
	   *
	   * When a processor is frozen it cannot be unfrozen.
	   * New processors working the same way can be created by calling the
	   * processor.
	   *
	   * It’s possible to freeze processors explicitly by calling `.freeze()`.
	   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,
	   * `.stringify()`, `.process()`, or `.processSync()` are called.
	   *
	   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
	   *   The current processor.
	   */
	  freeze() {
	    if (this.frozen) {
	      return this
	    }

	    // Cast so that we can type plugins easier.
	    // Plugins are supposed to be usable on different processors, not just on
	    // this exact processor.
	    const self = /** @type {Processor} */ (/** @type {unknown} */ (this));

	    while (++this.freezeIndex < this.attachers.length) {
	      const [attacher, ...options] = this.attachers[this.freezeIndex];

	      if (options[0] === false) {
	        continue
	      }

	      if (options[0] === true) {
	        options[0] = undefined;
	      }

	      const transformer = attacher.call(self, ...options);

	      if (typeof transformer === 'function') {
	        this.transformers.use(transformer);
	      }
	    }

	    this.frozen = true;
	    this.freezeIndex = Number.POSITIVE_INFINITY;

	    return this
	  }

	  /**
	   * Parse text to a syntax tree.
	   *
	   * > 👉 **Note**: `parse` freezes the processor if not already *frozen*.
	   *
	   * > 👉 **Note**: `parse` performs the parse phase, not the run phase or other
	   * > phases.
	   *
	   * @param {Compatible | undefined} [file]
	   *   file to parse (optional); typically `string` or `VFile`; any value
	   *   accepted as `x` in `new VFile(x)`.
	   * @returns {ParseTree extends undefined ? Node : ParseTree}
	   *   Syntax tree representing `file`.
	   */
	  parse(file) {
	    this.freeze();
	    const realFile = vfile(file);
	    const parser = this.parser || this.Parser;
	    assertParser('parse', parser);
	    return parser(String(realFile), realFile)
	  }

	  /**
	   * Process the given file as configured on the processor.
	   *
	   * > 👉 **Note**: `process` freezes the processor if not already *frozen*.
	   *
	   * > 👉 **Note**: `process` performs the parse, run, and stringify phases.
	   *
	   * @overload
	   * @param {Compatible | undefined} file
	   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done
	   * @returns {undefined}
	   *
	   * @overload
	   * @param {Compatible | undefined} [file]
	   * @returns {Promise<VFileWithOutput<CompileResult>>}
	   *
	   * @param {Compatible | undefined} [file]
	   *   File (optional); typically `string` or `VFile`]; any value accepted as
	   *   `x` in `new VFile(x)`.
	   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]
	   *   Callback (optional).
	   * @returns {Promise<VFile> | undefined}
	   *   Nothing if `done` is given.
	   *   Otherwise a promise, rejected with a fatal error or resolved with the
	   *   processed file.
	   *
	   *   The parsed, transformed, and compiled value is available at
	   *   `file.value` (see note).
	   *
	   *   > 👉 **Note**: unified typically compiles by serializing: most
	   *   > compilers return `string` (or `Uint8Array`).
	   *   > Some compilers, such as the one configured with
	   *   > [`rehype-react`][rehype-react], return other values (in this case, a
	   *   > React tree).
	   *   > If you’re using a compiler that doesn’t serialize, expect different
	   *   > result values.
	   *   >
	   *   > To register custom results in TypeScript, add them to
	   *   > {@link CompileResultMap `CompileResultMap`}.
	   *
	   *   [rehype-react]: https://github.com/rehypejs/rehype-react
	   */
	  process(file, done) {
	    const self = this;

	    this.freeze();
	    assertParser('process', this.parser || this.Parser);
	    assertCompiler('process', this.compiler || this.Compiler);

	    return done ? executor(undefined, done) : new Promise(executor)

	    // Note: `void`s needed for TS.
	    /**
	     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve
	     * @param {(error: Error | undefined) => undefined | void} reject
	     * @returns {undefined}
	     */
	    function executor(resolve, reject) {
	      const realFile = vfile(file);
	      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the
	      // input of the first transform).
	      const parseTree =
	        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (
	          /** @type {unknown} */ (self.parse(realFile))
	        );

	      self.run(parseTree, realFile, function (error, tree, file) {
	        if (error || !tree || !file) {
	          return realDone(error)
	        }

	        // Assume `TailTree` (the output of the last transform) matches
	        // `CompileTree` (the input of the compiler).
	        const compileTree =
	          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (
	            /** @type {unknown} */ (tree)
	          );

	        const compileResult = self.stringify(compileTree, file);

	        if (looksLikeAValue(compileResult)) {
	          file.value = compileResult;
	        } else {
	          file.result = compileResult;
	        }

	        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file));
	      });

	      /**
	       * @param {Error | undefined} error
	       * @param {VFileWithOutput<CompileResult> | undefined} [file]
	       * @returns {undefined}
	       */
	      function realDone(error, file) {
	        if (error || !file) {
	          reject(error);
	        } else if (resolve) {
	          resolve(file);
	        } else {
	          done(undefined, file);
	        }
	      }
	    }
	  }

	  /**
	   * Process the given file as configured on the processor.
	   *
	   * An error is thrown if asynchronous transforms are configured.
	   *
	   * > 👉 **Note**: `processSync` freezes the processor if not already *frozen*.
	   *
	   * > 👉 **Note**: `processSync` performs the parse, run, and stringify phases.
	   *
	   * @param {Compatible | undefined} [file]
	   *   File (optional); typically `string` or `VFile`; any value accepted as
	   *   `x` in `new VFile(x)`.
	   * @returns {VFileWithOutput<CompileResult>}
	   *   The processed file.
	   *
	   *   The parsed, transformed, and compiled value is available at
	   *   `file.value` (see note).
	   *
	   *   > 👉 **Note**: unified typically compiles by serializing: most
	   *   > compilers return `string` (or `Uint8Array`).
	   *   > Some compilers, such as the one configured with
	   *   > [`rehype-react`][rehype-react], return other values (in this case, a
	   *   > React tree).
	   *   > If you’re using a compiler that doesn’t serialize, expect different
	   *   > result values.
	   *   >
	   *   > To register custom results in TypeScript, add them to
	   *   > {@link CompileResultMap `CompileResultMap`}.
	   *
	   *   [rehype-react]: https://github.com/rehypejs/rehype-react
	   */
	  processSync(file) {
	    /** @type {boolean} */
	    let complete = false;
	    /** @type {VFileWithOutput<CompileResult> | undefined} */
	    let result;

	    this.freeze();
	    assertParser('processSync', this.parser || this.Parser);
	    assertCompiler('processSync', this.compiler || this.Compiler);

	    this.process(file, realDone);
	    assertDone('processSync', 'process', complete);

	    return result

	    /**
	     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}
	     */
	    function realDone(error, file) {
	      complete = true;
	      bail(error);
	      result = file;
	    }
	  }

	  /**
	   * Run *transformers* on a syntax tree.
	   *
	   * > 👉 **Note**: `run` freezes the processor if not already *frozen*.
	   *
	   * > 👉 **Note**: `run` performs the run phase, not other phases.
	   *
	   * @overload
	   * @param {HeadTree extends undefined ? Node : HeadTree} tree
	   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
	   * @returns {undefined}
	   *
	   * @overload
	   * @param {HeadTree extends undefined ? Node : HeadTree} tree
	   * @param {Compatible | undefined} file
	   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
	   * @returns {undefined}
	   *
	   * @overload
	   * @param {HeadTree extends undefined ? Node : HeadTree} tree
	   * @param {Compatible | undefined} [file]
	   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}
	   *
	   * @param {HeadTree extends undefined ? Node : HeadTree} tree
	   *   Tree to transform and inspect.
	   * @param {(
	   *   RunCallback<TailTree extends undefined ? Node : TailTree> |
	   *   Compatible
	   * )} [file]
	   *   File associated with `node` (optional); any value accepted as `x` in
	   *   `new VFile(x)`.
	   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]
	   *   Callback (optional).
	   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}
	   *   Nothing if `done` is given.
	   *   Otherwise, a promise rejected with a fatal error or resolved with the
	   *   transformed tree.
	   */
	  run(tree, file, done) {
	    assertNode(tree);
	    this.freeze();

	    const transformers = this.transformers;

	    if (!done && typeof file === 'function') {
	      done = file;
	      file = undefined;
	    }

	    return done ? executor(undefined, done) : new Promise(executor)

	    // Note: `void`s needed for TS.
	    /**
	     * @param {(
	     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |
	     *   undefined
	     * )} resolve
	     * @param {(error: Error) => undefined | void} reject
	     * @returns {undefined}
	     */
	    function executor(resolve, reject) {
	      const realFile = vfile(file);
	      transformers.run(tree, realFile, realDone);

	      /**
	       * @param {Error | undefined} error
	       * @param {Node} outputTree
	       * @param {VFile} file
	       * @returns {undefined}
	       */
	      function realDone(error, outputTree, file) {
	        const resultingTree =
	          /** @type {TailTree extends undefined ? Node : TailTree} */ (
	            outputTree || tree
	          );

	        if (error) {
	          reject(error);
	        } else if (resolve) {
	          resolve(resultingTree);
	        } else {
	          done(undefined, resultingTree, file);
	        }
	      }
	    }
	  }

	  /**
	   * Run *transformers* on a syntax tree.
	   *
	   * An error is thrown if asynchronous transforms are configured.
	   *
	   * > 👉 **Note**: `runSync` freezes the processor if not already *frozen*.
	   *
	   * > 👉 **Note**: `runSync` performs the run phase, not other phases.
	   *
	   * @param {HeadTree extends undefined ? Node : HeadTree} tree
	   *   Tree to transform and inspect.
	   * @param {Compatible | undefined} [file]
	   *   File associated with `node` (optional); any value accepted as `x` in
	   *   `new VFile(x)`.
	   * @returns {TailTree extends undefined ? Node : TailTree}
	   *   Transformed tree.
	   */
	  runSync(tree, file) {
	    /** @type {boolean} */
	    let complete = false;
	    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */
	    let result;

	    this.run(tree, file, realDone);

	    assertDone('runSync', 'run', complete);
	    return result

	    /**
	     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}
	     */
	    function realDone(error, tree) {
	      bail(error);
	      result = tree;
	      complete = true;
	    }
	  }

	  /**
	   * Compile a syntax tree.
	   *
	   * > 👉 **Note**: `stringify` freezes the processor if not already *frozen*.
	   *
	   * > 👉 **Note**: `stringify` performs the stringify phase, not the run phase
	   * > or other phases.
	   *
	   * @param {CompileTree extends undefined ? Node : CompileTree} tree
	   *   Tree to compile.
	   * @param {Compatible | undefined} [file]
	   *   File associated with `node` (optional); any value accepted as `x` in
	   *   `new VFile(x)`.
	   * @returns {CompileResult extends undefined ? Value : CompileResult}
	   *   Textual representation of the tree (see note).
	   *
	   *   > 👉 **Note**: unified typically compiles by serializing: most compilers
	   *   > return `string` (or `Uint8Array`).
	   *   > Some compilers, such as the one configured with
	   *   > [`rehype-react`][rehype-react], return other values (in this case, a
	   *   > React tree).
	   *   > If you’re using a compiler that doesn’t serialize, expect different
	   *   > result values.
	   *   >
	   *   > To register custom results in TypeScript, add them to
	   *   > {@link CompileResultMap `CompileResultMap`}.
	   *
	   *   [rehype-react]: https://github.com/rehypejs/rehype-react
	   */
	  stringify(tree, file) {
	    this.freeze();
	    const realFile = vfile(file);
	    const compiler = this.compiler || this.Compiler;
	    assertCompiler('stringify', compiler);
	    assertNode(tree);

	    return compiler(tree, realFile)
	  }

	  /**
	   * Configure the processor to use a plugin, a list of usable values, or a
	   * preset.
	   *
	   * If the processor is already using a plugin, the previous plugin
	   * configuration is changed based on the options that are passed in.
	   * In other words, the plugin is not added a second time.
	   *
	   * > 👉 **Note**: `use` cannot be called on *frozen* processors.
	   * > Call the processor first to create a new unfrozen processor.
	   *
	   * @example
	   *   There are many ways to pass plugins to `.use()`.
	   *   This example gives an overview:
	   *
	   *   ```js
	   *   import {unified} from 'unified'
	   *
	   *   unified()
	   *     // Plugin with options:
	   *     .use(pluginA, {x: true, y: true})
	   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):
	   *     .use(pluginA, {y: false, z: true})
	   *     // Plugins:
	   *     .use([pluginB, pluginC])
	   *     // Two plugins, the second with options:
	   *     .use([pluginD, [pluginE, {}]])
	   *     // Preset with plugins and settings:
	   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})
	   *     // Settings only:
	   *     .use({settings: {position: false}})
	   *   ```
	   *
	   * @template {Array<unknown>} [Parameters=[]]
	   * @template {Node | string | undefined} [Input=undefined]
	   * @template [Output=Input]
	   *
	   * @overload
	   * @param {Preset | null | undefined} [preset]
	   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
	   *
	   * @overload
	   * @param {PluggableList} list
	   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
	   *
	   * @overload
	   * @param {Plugin<Parameters, Input, Output>} plugin
	   * @param {...(Parameters | [boolean])} parameters
	   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}
	   *
	   * @param {PluggableList | Plugin | Preset | null | undefined} value
	   *   Usable value.
	   * @param {...unknown} parameters
	   *   Parameters, when a plugin is given as a usable value.
	   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
	   *   Current processor.
	   */
	  use(value, ...parameters) {
	    const attachers = this.attachers;
	    const namespace = this.namespace;

	    assertUnfrozen('use', this.frozen);

	    if (value === null || value === undefined) ; else if (typeof value === 'function') {
	      addPlugin(value, parameters);
	    } else if (typeof value === 'object') {
	      if (Array.isArray(value)) {
	        addList(value);
	      } else {
	        addPreset(value);
	      }
	    } else {
	      throw new TypeError('Expected usable value, not `' + value + '`')
	    }

	    return this

	    /**
	     * @param {Pluggable} value
	     * @returns {undefined}
	     */
	    function add(value) {
	      if (typeof value === 'function') {
	        addPlugin(value, []);
	      } else if (typeof value === 'object') {
	        if (Array.isArray(value)) {
	          const [plugin, ...parameters] =
	            /** @type {PluginTuple<Array<unknown>>} */ (value);
	          addPlugin(plugin, parameters);
	        } else {
	          addPreset(value);
	        }
	      } else {
	        throw new TypeError('Expected usable value, not `' + value + '`')
	      }
	    }

	    /**
	     * @param {Preset} result
	     * @returns {undefined}
	     */
	    function addPreset(result) {
	      if (!('plugins' in result) && !('settings' in result)) {
	        throw new Error(
	          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'
	        )
	      }

	      addList(result.plugins);

	      if (result.settings) {
	        namespace.settings = extend$1(true, namespace.settings, result.settings);
	      }
	    }

	    /**
	     * @param {PluggableList | null | undefined} plugins
	     * @returns {undefined}
	     */
	    function addList(plugins) {
	      let index = -1;

	      if (plugins === null || plugins === undefined) ; else if (Array.isArray(plugins)) {
	        while (++index < plugins.length) {
	          const thing = plugins[index];
	          add(thing);
	        }
	      } else {
	        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')
	      }
	    }

	    /**
	     * @param {Plugin} plugin
	     * @param {Array<unknown>} parameters
	     * @returns {undefined}
	     */
	    function addPlugin(plugin, parameters) {
	      let index = -1;
	      let entryIndex = -1;

	      while (++index < attachers.length) {
	        if (attachers[index][0] === plugin) {
	          entryIndex = index;
	          break
	        }
	      }

	      if (entryIndex === -1) {
	        attachers.push([plugin, ...parameters]);
	      }
	      // Only set if there was at least a `primary` value, otherwise we’d change
	      // `arguments.length`.
	      else if (parameters.length > 0) {
	        let [primary, ...rest] = parameters;
	        const currentPrimary = attachers[entryIndex][1];
	        if (isPlainObject(currentPrimary) && isPlainObject(primary)) {
	          primary = extend$1(true, currentPrimary, primary);
	        }

	        attachers[entryIndex] = [plugin, primary, ...rest];
	      }
	    }
	  }
	}

	// Note: this returns a *callable* instance.
	// That’s why it’s documented as a function.
	/**
	 * Create a new processor.
	 *
	 * @example
	 *   This example shows how a new processor can be created (from `remark`) and linked
	 *   to **stdin**(4) and **stdout**(4).
	 *
	 *   ```js
	 *   import process from 'node:process'
	 *   import concatStream from 'concat-stream'
	 *   import {remark} from 'remark'
	 *
	 *   process.stdin.pipe(
	 *     concatStream(function (buf) {
	 *       process.stdout.write(String(remark().processSync(buf)))
	 *     })
	 *   )
	 *   ```
	 *
	 * @returns
	 *   New *unfrozen* processor (`processor`).
	 *
	 *   This processor is configured to work the same as its ancestor.
	 *   When the descendant processor is configured in the future it does not
	 *   affect the ancestral processor.
	 */
	const unified = new Processor().freeze();

	/**
	 * Assert a parser is available.
	 *
	 * @param {string} name
	 * @param {unknown} value
	 * @returns {asserts value is Parser}
	 */
	function assertParser(name, value) {
	  if (typeof value !== 'function') {
	    throw new TypeError('Cannot `' + name + '` without `parser`')
	  }
	}

	/**
	 * Assert a compiler is available.
	 *
	 * @param {string} name
	 * @param {unknown} value
	 * @returns {asserts value is Compiler}
	 */
	function assertCompiler(name, value) {
	  if (typeof value !== 'function') {
	    throw new TypeError('Cannot `' + name + '` without `compiler`')
	  }
	}

	/**
	 * Assert the processor is not frozen.
	 *
	 * @param {string} name
	 * @param {unknown} frozen
	 * @returns {asserts frozen is false}
	 */
	function assertUnfrozen(name, frozen) {
	  if (frozen) {
	    throw new Error(
	      'Cannot call `' +
	        name +
	        '` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'
	    )
	  }
	}

	/**
	 * Assert `node` is a unist node.
	 *
	 * @param {unknown} node
	 * @returns {asserts node is Node}
	 */
	function assertNode(node) {
	  // `isPlainObj` unfortunately uses `any` instead of `unknown`.
	  // type-coverage:ignore-next-line
	  if (!isPlainObject(node) || typeof node.type !== 'string') {
	    throw new TypeError('Expected node, got `' + node + '`')
	    // Fine.
	  }
	}

	/**
	 * Assert that `complete` is `true`.
	 *
	 * @param {string} name
	 * @param {string} asyncName
	 * @param {unknown} complete
	 * @returns {asserts complete is true}
	 */
	function assertDone(name, asyncName, complete) {
	  if (!complete) {
	    throw new Error(
	      '`' + name + '` finished async. Use `' + asyncName + '` instead'
	    )
	  }
	}

	/**
	 * @param {Compatible | undefined} [value]
	 * @returns {VFile}
	 */
	function vfile(value) {
	  return looksLikeAVFile(value) ? value : new VFile(value)
	}

	/**
	 * @param {Compatible | undefined} [value]
	 * @returns {value is VFile}
	 */
	function looksLikeAVFile(value) {
	  return Boolean(
	    value &&
	      typeof value === 'object' &&
	      'message' in value &&
	      'messages' in value
	  )
	}

	/**
	 * @param {unknown} [value]
	 * @returns {value is Value}
	 */
	function looksLikeAValue(value) {
	  return typeof value === 'string' || isUint8Array(value)
	}

	/**
	 * Assert `value` is an `Uint8Array`.
	 *
	 * @param {unknown} value
	 *   thing.
	 * @returns {value is Uint8Array}
	 *   Whether `value` is an `Uint8Array`.
	 */
	function isUint8Array(value) {
	  return Boolean(
	    value &&
	      typeof value === 'object' &&
	      'byteLength' in value &&
	      'byteOffset' in value
	  )
	}

	// Register `Raw` in tree:
	/// <reference types="mdast-util-to-hast" />


	const changelog =
	  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md';

	/** @type {PluggableList} */
	const emptyPlugins = [];
	/** @type {Readonly<RemarkRehypeOptions>} */
	const emptyRemarkRehypeOptions = {allowDangerousHtml: true};
	const safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i;

	// Mutable because we `delete` any time it’s used and a message is sent.
	/** @type {ReadonlyArray<Readonly<Deprecation>>} */
	const deprecations = [
	  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},
	  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},
	  {
	    from: 'allowNode',
	    id: 'replace-allownode-allowedtypes-and-disallowedtypes',
	    to: 'allowElement'
	  },
	  {
	    from: 'allowedTypes',
	    id: 'replace-allownode-allowedtypes-and-disallowedtypes',
	    to: 'allowedElements'
	  },
	  {
	    from: 'disallowedTypes',
	    id: 'replace-allownode-allowedtypes-and-disallowedtypes',
	    to: 'disallowedElements'
	  },
	  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},
	  {from: 'includeElementIndex', id: '#remove-includeelementindex'},
	  {
	    from: 'includeNodeIndex',
	    id: 'change-includenodeindex-to-includeelementindex'
	  },
	  {from: 'linkTarget', id: 'remove-linktarget'},
	  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},
	  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},
	  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},
	  {from: 'source', id: 'change-source-to-children', to: 'children'},
	  {from: 'sourcePos', id: '#remove-sourcepos'},
	  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},
	  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}
	];

	/**
	 * Component to render markdown.
	 *
	 * @param {Readonly<Options>} options
	 *   Props.
	 * @returns {JSX.Element}
	 *   React element.
	 */
	function Markdown$1(options) {
	  const allowedElements = options.allowedElements;
	  const allowElement = options.allowElement;
	  const children = options.children || '';
	  const className = options.className;
	  const components = options.components;
	  const disallowedElements = options.disallowedElements;
	  const rehypePlugins = options.rehypePlugins || emptyPlugins;
	  const remarkPlugins = options.remarkPlugins || emptyPlugins;
	  const remarkRehypeOptions = options.remarkRehypeOptions
	    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}
	    : emptyRemarkRehypeOptions;
	  const skipHtml = options.skipHtml;
	  const unwrapDisallowed = options.unwrapDisallowed;
	  const urlTransform = options.urlTransform || defaultUrlTransform$1;

	  const processor = unified()
	    .use(remarkParse)
	    .use(remarkPlugins)
	    .use(remarkRehype, remarkRehypeOptions)
	    .use(rehypePlugins);

	  const file = new VFile();

	  if (typeof children === 'string') {
	    file.value = children;
	  }

	  for (const deprecation of deprecations) {
	    if (Object.hasOwn(options, deprecation.from)) {
	      unreachable(
	        'Unexpected `' +
	          deprecation.from +
	          '` prop, ' +
	          (deprecation.to
	            ? 'use `' + deprecation.to + '` instead'
	            : 'remove it') +
	          ' (see <' +
	          changelog +
	          '#' +
	          deprecation.id +
	          '> for more info)'
	      );
	    }
	  }

	  const mdastTree = processor.parse(file);
	  /** @type {Nodes} */
	  let hastTree = processor.runSync(mdastTree, file);

	  // Wrap in `div` if there’s a class name.
	  if (className) {
	    hastTree = {
	      type: 'element',
	      tagName: 'div',
	      properties: {className},
	      // Assume no doctypes.
	      children: /** @type {Array<ElementContent>} */ (
	        hastTree.type === 'root' ? hastTree.children : [hastTree]
	      )
	    };
	  }

	  visit$1(hastTree, transform);

	  return toJsxRuntime(hastTree, {
	    Fragment: jsxRuntimeExports.Fragment,
	    components,
	    ignoreInvalidStyle: true,
	    jsx: jsxRuntimeExports.jsx,
	    jsxs: jsxRuntimeExports.jsxs,
	    passKeys: true,
	    passNode: true
	  })

	  /** @type {Visitor} */
	  function transform(node, index, parent) {
	    if (node.type === 'raw' && parent && typeof index === 'number') {
	      if (skipHtml) {
	        parent.children.splice(index, 1);
	      } else {
	        parent.children[index] = {type: 'text', value: node.value};
	      }

	      return index
	    }

	    if (node.type === 'element') {
	      /** @type {string} */
	      let key;

	      for (key in urlAttributes) {
	        if (
	          Object.hasOwn(urlAttributes, key) &&
	          Object.hasOwn(node.properties, key)
	        ) {
	          const value = node.properties[key];
	          const test = urlAttributes[key];
	          if (test === null || test.includes(node.tagName)) {
	            node.properties[key] = urlTransform(String(value || ''), key, node);
	          }
	        }
	      }
	    }

	    if (node.type === 'element') {
	      let remove = allowedElements
	        ? !allowedElements.includes(node.tagName)
	        : disallowedElements
	        ? disallowedElements.includes(node.tagName)
	        : false;

	      if (!remove && allowElement && typeof index === 'number') {
	        remove = !allowElement(node, index, parent);
	      }

	      if (remove && parent && typeof index === 'number') {
	        if (unwrapDisallowed && node.children) {
	          parent.children.splice(index, 1, ...node.children);
	        } else {
	          parent.children.splice(index, 1);
	        }

	        return index
	      }
	    }
	  }
	}

	/**
	 * Make a URL safe.
	 *
	 * @satisfies {UrlTransform}
	 * @param {string} value
	 *   URL.
	 * @returns {string}
	 *   Safe URL.
	 */
	function defaultUrlTransform$1(value) {
	  // Same as:
	  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>
	  // But without the `encode` part.
	  const colon = value.indexOf(':');
	  const questionMark = value.indexOf('?');
	  const numberSign = value.indexOf('#');
	  const slash = value.indexOf('/');

	  if (
	    // If there is no protocol, it’s relative.
	    colon < 0 ||
	    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.
	    (slash > -1 && colon > slash) ||
	    (questionMark > -1 && colon > questionMark) ||
	    (numberSign > -1 && colon > numberSign) ||
	    // It is a protocol, it should be allowed.
	    safeProtocol.test(value.slice(0, colon))
	  ) {
	    return value
	  }

	  return ''
	}

	/**
	 * Count how often a character (or substring) is used in a string.
	 *
	 * @param {string} value
	 *   Value to search in.
	 * @param {string} character
	 *   Character (or substring) to look for.
	 * @return {number}
	 *   Number of times `character` occurred in `value`.
	 */
	function ccount(value, character) {
	  const source = String(value);

	  if (typeof character !== 'string') {
	    throw new TypeError('Expected character')
	  }

	  let count = 0;
	  let index = source.indexOf(character);

	  while (index !== -1) {
	    count++;
	    index = source.indexOf(character, index + character.length);
	  }

	  return count
	}

	function escapeStringRegexp(string) {
		if (typeof string !== 'string') {
			throw new TypeError('Expected a string');
		}

		// Escape characters with special meaning either inside or outside character sets.
		// Use a simple backslash escape when it’s always valid, and a `\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.
		return string
			.replace(/[|\\{}()[\]^$+*?.]/g, '\\$&')
			.replace(/-/g, '\\x2d');
	}

	/**
	 * @typedef {import('mdast').Nodes} Nodes
	 * @typedef {import('mdast').Parents} Parents
	 * @typedef {import('mdast').PhrasingContent} PhrasingContent
	 * @typedef {import('mdast').Root} Root
	 * @typedef {import('mdast').Text} Text
	 * @typedef {import('unist-util-visit-parents').Test} Test
	 * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
	 */


	/**
	 * Find patterns in a tree and replace them.
	 *
	 * The algorithm searches the tree in *preorder* for complete values in `Text`
	 * nodes.
	 * Partial matches are not supported.
	 *
	 * @param {Nodes} tree
	 *   Tree to change.
	 * @param {FindAndReplaceList | FindAndReplaceTuple} list
	 *   Patterns to find.
	 * @param {Options | null | undefined} [options]
	 *   Configuration (when `find` is not `Find`).
	 * @returns {undefined}
	 *   Nothing.
	 */
	function findAndReplace(tree, list, options) {
	  const settings = options || {};
	  const ignored = convert$2(settings.ignore || []);
	  const pairs = toPairs(list);
	  let pairIndex = -1;

	  while (++pairIndex < pairs.length) {
	    visitParents$1(tree, 'text', visitor);
	  }

	  /** @type {import('unist-util-visit-parents').BuildVisitor<Root, 'text'>} */
	  function visitor(node, parents) {
	    let index = -1;
	    /** @type {Parents | undefined} */
	    let grandparent;

	    while (++index < parents.length) {
	      const parent = parents[index];
	      /** @type {Array<Nodes> | undefined} */
	      const siblings = grandparent ? grandparent.children : undefined;

	      if (
	        ignored(
	          parent,
	          siblings ? siblings.indexOf(parent) : undefined,
	          grandparent
	        )
	      ) {
	        return
	      }

	      grandparent = parent;
	    }

	    if (grandparent) {
	      return handler(node, parents)
	    }
	  }

	  /**
	   * Handle a text node which is not in an ignored parent.
	   *
	   * @param {Text} node
	   *   Text node.
	   * @param {Array<Parents>} parents
	   *   Parents.
	   * @returns {VisitorResult}
	   *   Result.
	   */
	  function handler(node, parents) {
	    const parent = parents[parents.length - 1];
	    const find = pairs[pairIndex][0];
	    const replace = pairs[pairIndex][1];
	    let start = 0;
	    /** @type {Array<Nodes>} */
	    const siblings = parent.children;
	    const index = siblings.indexOf(node);
	    let change = false;
	    /** @type {Array<PhrasingContent>} */
	    let nodes = [];

	    find.lastIndex = 0;

	    let match = find.exec(node.value);

	    while (match) {
	      const position = match.index;
	      /** @type {RegExpMatchObject} */
	      const matchObject = {
	        index: match.index,
	        input: match.input,
	        stack: [...parents, node]
	      };
	      let value = replace(...match, matchObject);

	      if (typeof value === 'string') {
	        value = value.length > 0 ? {type: 'text', value} : undefined;
	      }

	      // It wasn’t a match after all.
	      if (value === false) {
	        // False acts as if there was no match.
	        // So we need to reset `lastIndex`, which currently being at the end of
	        // the current match, to the beginning.
	        find.lastIndex = position + 1;
	      } else {
	        if (start !== position) {
	          nodes.push({
	            type: 'text',
	            value: node.value.slice(start, position)
	          });
	        }

	        if (Array.isArray(value)) {
	          nodes.push(...value);
	        } else if (value) {
	          nodes.push(value);
	        }

	        start = position + match[0].length;
	        change = true;
	      }

	      if (!find.global) {
	        break
	      }

	      match = find.exec(node.value);
	    }

	    if (change) {
	      if (start < node.value.length) {
	        nodes.push({type: 'text', value: node.value.slice(start)});
	      }

	      parent.children.splice(index, 1, ...nodes);
	    } else {
	      nodes = [node];
	    }

	    return index + nodes.length
	  }
	}

	/**
	 * Turn a tuple or a list of tuples into pairs.
	 *
	 * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList
	 *   Schema.
	 * @returns {Pairs}
	 *   Clean pairs.
	 */
	function toPairs(tupleOrList) {
	  /** @type {Pairs} */
	  const result = [];

	  if (!Array.isArray(tupleOrList)) {
	    throw new TypeError('Expected find and replace tuple or list of tuples')
	  }

	  /** @type {FindAndReplaceList} */
	  // @ts-expect-error: correct.
	  const list =
	    !tupleOrList[0] || Array.isArray(tupleOrList[0])
	      ? tupleOrList
	      : [tupleOrList];

	  let index = -1;

	  while (++index < list.length) {
	    const tuple = list[index];
	    result.push([toExpression(tuple[0]), toFunction(tuple[1])]);
	  }

	  return result
	}

	/**
	 * Turn a find into an expression.
	 *
	 * @param {Find} find
	 *   Find.
	 * @returns {RegExp}
	 *   Expression.
	 */
	function toExpression(find) {
	  return typeof find === 'string' ? new RegExp(escapeStringRegexp(find), 'g') : find
	}

	/**
	 * Turn a replace into a function.
	 *
	 * @param {Replace} replace
	 *   Replace.
	 * @returns {ReplaceFunction}
	 *   Function.
	 */
	function toFunction(replace) {
	  return typeof replace === 'function'
	    ? replace
	    : function () {
	        return replace
	      }
	}

	/**
	 * @typedef {import('mdast').Link} Link
	 * @typedef {import('mdast').PhrasingContent} PhrasingContent
	 *
	 * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
	 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
	 * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
	 * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform
	 *
	 * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName
	 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
	 *
	 * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject
	 * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction
	 */


	/** @type {ConstructName} */
	const inConstruct = 'phrasing';
	/** @type {Array<ConstructName>} */
	const notInConstruct = ['autolink', 'link', 'image', 'label'];

	/**
	 * Create an extension for `mdast-util-from-markdown` to enable GFM autolink
	 * literals in markdown.
	 *
	 * @returns {FromMarkdownExtension}
	 *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.
	 */
	function gfmAutolinkLiteralFromMarkdown() {
	  return {
	    transforms: [transformGfmAutolinkLiterals],
	    enter: {
	      literalAutolink: enterLiteralAutolink,
	      literalAutolinkEmail: enterLiteralAutolinkValue,
	      literalAutolinkHttp: enterLiteralAutolinkValue,
	      literalAutolinkWww: enterLiteralAutolinkValue
	    },
	    exit: {
	      literalAutolink: exitLiteralAutolink,
	      literalAutolinkEmail: exitLiteralAutolinkEmail,
	      literalAutolinkHttp: exitLiteralAutolinkHttp,
	      literalAutolinkWww: exitLiteralAutolinkWww
	    }
	  }
	}

	/**
	 * Create an extension for `mdast-util-to-markdown` to enable GFM autolink
	 * literals in markdown.
	 *
	 * @returns {ToMarkdownExtension}
	 *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.
	 */
	function gfmAutolinkLiteralToMarkdown() {
	  return {
	    unsafe: [
	      {
	        character: '@',
	        before: '[+\\-.\\w]',
	        after: '[\\-.\\w]',
	        inConstruct,
	        notInConstruct
	      },
	      {
	        character: '.',
	        before: '[Ww]',
	        after: '[\\-.\\w]',
	        inConstruct,
	        notInConstruct
	      },
	      {
	        character: ':',
	        before: '[ps]',
	        after: '\\/',
	        inConstruct,
	        notInConstruct
	      }
	    ]
	  }
	}

	/**
	 * @this {CompileContext}
	 * @type {FromMarkdownHandle}
	 */
	function enterLiteralAutolink(token) {
	  this.enter({type: 'link', title: null, url: '', children: []}, token);
	}

	/**
	 * @this {CompileContext}
	 * @type {FromMarkdownHandle}
	 */
	function enterLiteralAutolinkValue(token) {
	  this.config.enter.autolinkProtocol.call(this, token);
	}

	/**
	 * @this {CompileContext}
	 * @type {FromMarkdownHandle}
	 */
	function exitLiteralAutolinkHttp(token) {
	  this.config.exit.autolinkProtocol.call(this, token);
	}

	/**
	 * @this {CompileContext}
	 * @type {FromMarkdownHandle}
	 */
	function exitLiteralAutolinkWww(token) {
	  this.config.exit.data.call(this, token);
	  const node = this.stack[this.stack.length - 1];
	  ok$3(node.type === 'link');
	  node.url = 'http://' + this.sliceSerialize(token);
	}

	/**
	 * @this {CompileContext}
	 * @type {FromMarkdownHandle}
	 */
	function exitLiteralAutolinkEmail(token) {
	  this.config.exit.autolinkEmail.call(this, token);
	}

	/**
	 * @this {CompileContext}
	 * @type {FromMarkdownHandle}
	 */
	function exitLiteralAutolink(token) {
	  this.exit(token);
	}

	/** @type {FromMarkdownTransform} */
	function transformGfmAutolinkLiterals(tree) {
	  findAndReplace(
	    tree,
	    [
	      [/(https?:\/\/|www(?=\.))([-.\w]+)([^ \t\r\n]*)/gi, findUrl],
	      [/([-.\w+]+)@([-\w]+(?:\.[-\w]+)+)/g, findEmail]
	    ],
	    {ignore: ['link', 'linkReference']}
	  );
	}

	/**
	 * @type {ReplaceFunction}
	 * @param {string} _
	 * @param {string} protocol
	 * @param {string} domain
	 * @param {string} path
	 * @param {RegExpMatchObject} match
	 * @returns {Array<PhrasingContent> | Link | false}
	 */
	// eslint-disable-next-line max-params
	function findUrl(_, protocol, domain, path, match) {
	  let prefix = '';

	  // Not an expected previous character.
	  if (!previous(match)) {
	    return false
	  }

	  // Treat `www` as part of the domain.
	  if (/^w/i.test(protocol)) {
	    domain = protocol + domain;
	    protocol = '';
	    prefix = 'http://';
	  }

	  if (!isCorrectDomain(domain)) {
	    return false
	  }

	  const parts = splitUrl(domain + path);

	  if (!parts[0]) return false

	  /** @type {Link} */
	  const result = {
	    type: 'link',
	    title: null,
	    url: prefix + protocol + parts[0],
	    children: [{type: 'text', value: protocol + parts[0]}]
	  };

	  if (parts[1]) {
	    return [result, {type: 'text', value: parts[1]}]
	  }

	  return result
	}

	/**
	 * @type {ReplaceFunction}
	 * @param {string} _
	 * @param {string} atext
	 * @param {string} label
	 * @param {RegExpMatchObject} match
	 * @returns {Link | false}
	 */
	function findEmail(_, atext, label, match) {
	  if (
	    // Not an expected previous character.
	    !previous(match, true) ||
	    // Label ends in not allowed character.
	    /[-\d_]$/.test(label)
	  ) {
	    return false
	  }

	  return {
	    type: 'link',
	    title: null,
	    url: 'mailto:' + atext + '@' + label,
	    children: [{type: 'text', value: atext + '@' + label}]
	  }
	}

	/**
	 * @param {string} domain
	 * @returns {boolean}
	 */
	function isCorrectDomain(domain) {
	  const parts = domain.split('.');

	  if (
	    parts.length < 2 ||
	    (parts[parts.length - 1] &&
	      (/_/.test(parts[parts.length - 1]) ||
	        !/[a-zA-Z\d]/.test(parts[parts.length - 1]))) ||
	    (parts[parts.length - 2] &&
	      (/_/.test(parts[parts.length - 2]) ||
	        !/[a-zA-Z\d]/.test(parts[parts.length - 2])))
	  ) {
	    return false
	  }

	  return true
	}

	/**
	 * @param {string} url
	 * @returns {[string, string | undefined]}
	 */
	function splitUrl(url) {
	  const trailExec = /[!"&'),.:;<>?\]}]+$/.exec(url);

	  if (!trailExec) {
	    return [url, undefined]
	  }

	  url = url.slice(0, trailExec.index);

	  let trail = trailExec[0];
	  let closingParenIndex = trail.indexOf(')');
	  const openingParens = ccount(url, '(');
	  let closingParens = ccount(url, ')');

	  while (closingParenIndex !== -1 && openingParens > closingParens) {
	    url += trail.slice(0, closingParenIndex + 1);
	    trail = trail.slice(closingParenIndex + 1);
	    closingParenIndex = trail.indexOf(')');
	    closingParens++;
	  }

	  return [url, trail]
	}

	/**
	 * @param {RegExpMatchObject} match
	 * @param {boolean | null | undefined} [email=false]
	 * @returns {boolean}
	 */
	function previous(match, email) {
	  const code = match.input.charCodeAt(match.index - 1);

	  return (
	    (match.index === 0 ||
	      unicodeWhitespace(code) ||
	      unicodePunctuation(code)) &&
	    (!email || code !== 47)
	  )
	}

	/**
	 * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition
	 * @typedef {import('mdast').FootnoteReference} FootnoteReference
	 * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
	 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
	 * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
	 * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
	 * @typedef {import('mdast-util-to-markdown').Map} Map
	 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
	 */


	footnoteReference.peek = footnoteReferencePeek;

	/**
	 * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes
	 * in markdown.
	 *
	 * @returns {FromMarkdownExtension}
	 *   Extension for `mdast-util-from-markdown`.
	 */
	function gfmFootnoteFromMarkdown() {
	  return {
	    enter: {
	      gfmFootnoteDefinition: enterFootnoteDefinition,
	      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,
	      gfmFootnoteCall: enterFootnoteCall,
	      gfmFootnoteCallString: enterFootnoteCallString
	    },
	    exit: {
	      gfmFootnoteDefinition: exitFootnoteDefinition,
	      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,
	      gfmFootnoteCall: exitFootnoteCall,
	      gfmFootnoteCallString: exitFootnoteCallString
	    }
	  }
	}

	/**
	 * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes
	 * in markdown.
	 *
	 * @returns {ToMarkdownExtension}
	 *   Extension for `mdast-util-to-markdown`.
	 */
	function gfmFootnoteToMarkdown() {
	  return {
	    // This is on by default already.
	    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],
	    handlers: {footnoteDefinition, footnoteReference}
	  }
	}

	/**
	 * @this {CompileContext}
	 * @type {FromMarkdownHandle}
	 */
	function enterFootnoteDefinition(token) {
	  this.enter(
	    {type: 'footnoteDefinition', identifier: '', label: '', children: []},
	    token
	  );
	}

	/**
	 * @this {CompileContext}
	 * @type {FromMarkdownHandle}
	 */
	function enterFootnoteDefinitionLabelString() {
	  this.buffer();
	}

	/**
	 * @this {CompileContext}
	 * @type {FromMarkdownHandle}
	 */
	function exitFootnoteDefinitionLabelString(token) {
	  const label = this.resume();
	  const node = this.stack[this.stack.length - 1];
	  ok$3(node.type === 'footnoteDefinition');
	  node.label = label;
	  node.identifier = normalizeIdentifier(
	    this.sliceSerialize(token)
	  ).toLowerCase();
	}

	/**
	 * @this {CompileContext}
	 * @type {FromMarkdownHandle}
	 */
	function exitFootnoteDefinition(token) {
	  this.exit(token);
	}

	/**
	 * @this {CompileContext}
	 * @type {FromMarkdownHandle}
	 */
	function enterFootnoteCall(token) {
	  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token);
	}

	/**
	 * @this {CompileContext}
	 * @type {FromMarkdownHandle}
	 */
	function enterFootnoteCallString() {
	  this.buffer();
	}

	/**
	 * @this {CompileContext}
	 * @type {FromMarkdownHandle}
	 */
	function exitFootnoteCallString(token) {
	  const label = this.resume();
	  const node = this.stack[this.stack.length - 1];
	  ok$3(node.type === 'footnoteReference');
	  node.label = label;
	  node.identifier = normalizeIdentifier(
	    this.sliceSerialize(token)
	  ).toLowerCase();
	}

	/**
	 * @this {CompileContext}
	 * @type {FromMarkdownHandle}
	 */
	function exitFootnoteCall(token) {
	  this.exit(token);
	}

	/**
	 * @type {ToMarkdownHandle}
	 * @param {FootnoteReference} node
	 */
	function footnoteReference(node, _, state, info) {
	  const tracker = state.createTracker(info);
	  let value = tracker.move('[^');
	  const exit = state.enter('footnoteReference');
	  const subexit = state.enter('reference');
	  value += tracker.move(
	    state.safe(state.associationId(node), {
	      ...tracker.current(),
	      before: value,
	      after: ']'
	    })
	  );
	  subexit();
	  exit();
	  value += tracker.move(']');
	  return value
	}

	/** @type {ToMarkdownHandle} */
	function footnoteReferencePeek() {
	  return '['
	}

	/**
	 * @type {ToMarkdownHandle}
	 * @param {FootnoteDefinition} node
	 */
	function footnoteDefinition(node, _, state, info) {
	  const tracker = state.createTracker(info);
	  let value = tracker.move('[^');
	  const exit = state.enter('footnoteDefinition');
	  const subexit = state.enter('label');
	  value += tracker.move(
	    state.safe(state.associationId(node), {
	      ...tracker.current(),
	      before: value,
	      after: ']'
	    })
	  );
	  subexit();
	  value += tracker.move(
	    ']:' + (node.children && node.children.length > 0 ? ' ' : '')
	  );
	  tracker.shift(4);
	  value += tracker.move(
	    state.indentLines(state.containerFlow(node, tracker.current()), map$2)
	  );
	  exit();

	  return value
	}

	/** @type {Map} */
	function map$2(line, index, blank) {
	  if (index === 0) {
	    return line
	  }

	  return (blank ? '' : '    ') + line
	}

	/**
	 * @typedef {import('mdast').Delete} Delete
	 *
	 * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
	 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
	 * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
	 *
	 * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName
	 * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
	 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
	 */

	/**
	 * List of constructs that occur in phrasing (paragraphs, headings), but cannot
	 * contain strikethrough.
	 * So they sort of cancel each other out.
	 * Note: could use a better name.
	 *
	 * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>
	 *
	 * @type {Array<ConstructName>}
	 */
	const constructsWithoutStrikethrough = [
	  'autolink',
	  'destinationLiteral',
	  'destinationRaw',
	  'reference',
	  'titleQuote',
	  'titleApostrophe'
	];

	handleDelete.peek = peekDelete;

	/**
	 * Create an extension for `mdast-util-from-markdown` to enable GFM
	 * strikethrough in markdown.
	 *
	 * @returns {FromMarkdownExtension}
	 *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.
	 */
	function gfmStrikethroughFromMarkdown() {
	  return {
	    canContainEols: ['delete'],
	    enter: {strikethrough: enterStrikethrough},
	    exit: {strikethrough: exitStrikethrough}
	  }
	}

	/**
	 * Create an extension for `mdast-util-to-markdown` to enable GFM
	 * strikethrough in markdown.
	 *
	 * @returns {ToMarkdownExtension}
	 *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.
	 */
	function gfmStrikethroughToMarkdown() {
	  return {
	    unsafe: [
	      {
	        character: '~',
	        inConstruct: 'phrasing',
	        notInConstruct: constructsWithoutStrikethrough
	      }
	    ],
	    handlers: {delete: handleDelete}
	  }
	}

	/**
	 * @this {CompileContext}
	 * @type {FromMarkdownHandle}
	 */
	function enterStrikethrough(token) {
	  this.enter({type: 'delete', children: []}, token);
	}

	/**
	 * @this {CompileContext}
	 * @type {FromMarkdownHandle}
	 */
	function exitStrikethrough(token) {
	  this.exit(token);
	}

	/**
	 * @type {ToMarkdownHandle}
	 * @param {Delete} node
	 */
	function handleDelete(node, _, state, info) {
	  const tracker = state.createTracker(info);
	  const exit = state.enter('strikethrough');
	  let value = tracker.move('~~');
	  value += state.containerPhrasing(node, {
	    ...tracker.current(),
	    before: value,
	    after: '~'
	  });
	  value += tracker.move('~~');
	  exit();
	  return value
	}

	/** @type {ToMarkdownHandle} */
	function peekDelete() {
	  return '~'
	}

	/**
	 * @typedef Options
	 *   Configuration (optional).
	 * @property {string|null|ReadonlyArray<string|null|undefined>} [align]
	 *   One style for all columns, or styles for their respective columns.
	 *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).
	 *   Other values are treated as `''`, which doesn’t place the colon in the
	 *   alignment row but does align left.
	 *   *Only the lowercased first character is used, so `Right` is fine.*
	 * @property {boolean} [padding=true]
	 *   Whether to add a space of padding between delimiters and cells.
	 *
	 *   When `true`, there is padding:
	 *
	 *   ```markdown
	 *   | Alpha | B     |
	 *   | ----- | ----- |
	 *   | C     | Delta |
	 *   ```
	 *
	 *   When `false`, there is no padding:
	 *
	 *   ```markdown
	 *   |Alpha|B    |
	 *   |-----|-----|
	 *   |C    |Delta|
	 *   ```
	 * @property {boolean} [delimiterStart=true]
	 *   Whether to begin each row with the delimiter.
	 *
	 *   > 👉 **Note**: please don’t use this: it could create fragile structures
	 *   > that aren’t understandable to some markdown parsers.
	 *
	 *   When `true`, there are starting delimiters:
	 *
	 *   ```markdown
	 *   | Alpha | B     |
	 *   | ----- | ----- |
	 *   | C     | Delta |
	 *   ```
	 *
	 *   When `false`, there are no starting delimiters:
	 *
	 *   ```markdown
	 *   Alpha | B     |
	 *   ----- | ----- |
	 *   C     | Delta |
	 *   ```
	 * @property {boolean} [delimiterEnd=true]
	 *   Whether to end each row with the delimiter.
	 *
	 *   > 👉 **Note**: please don’t use this: it could create fragile structures
	 *   > that aren’t understandable to some markdown parsers.
	 *
	 *   When `true`, there are ending delimiters:
	 *
	 *   ```markdown
	 *   | Alpha | B     |
	 *   | ----- | ----- |
	 *   | C     | Delta |
	 *   ```
	 *
	 *   When `false`, there are no ending delimiters:
	 *
	 *   ```markdown
	 *   | Alpha | B
	 *   | ----- | -----
	 *   | C     | Delta
	 *   ```
	 * @property {boolean} [alignDelimiters=true]
	 *   Whether to align the delimiters.
	 *   By default, they are aligned:
	 *
	 *   ```markdown
	 *   | Alpha | B     |
	 *   | ----- | ----- |
	 *   | C     | Delta |
	 *   ```
	 *
	 *   Pass `false` to make them staggered:
	 *
	 *   ```markdown
	 *   | Alpha | B |
	 *   | - | - |
	 *   | C | Delta |
	 *   ```
	 * @property {(value: string) => number} [stringLength]
	 *   Function to detect the length of table cell content.
	 *   This is used when aligning the delimiters (`|`) between table cells.
	 *   Full-width characters and emoji mess up delimiter alignment when viewing
	 *   the markdown source.
	 *   To fix this, you can pass this function, which receives the cell content
	 *   and returns its “visible” size.
	 *   Note that what is and isn’t visible depends on where the text is displayed.
	 *
	 *   Without such a function, the following:
	 *
	 *   ```js
	 *   markdownTable([
	 *     ['Alpha', 'Bravo'],
	 *     ['中文', 'Charlie'],
	 *     ['👩‍❤️‍👩', 'Delta']
	 *   ])
	 *   ```
	 *
	 *   Yields:
	 *
	 *   ```markdown
	 *   | Alpha | Bravo |
	 *   | - | - |
	 *   | 中文 | Charlie |
	 *   | 👩‍❤️‍👩 | Delta |
	 *   ```
	 *
	 *   With [`string-width`](https://github.com/sindresorhus/string-width):
	 *
	 *   ```js
	 *   import stringWidth from 'string-width'
	 *
	 *   markdownTable(
	 *     [
	 *       ['Alpha', 'Bravo'],
	 *       ['中文', 'Charlie'],
	 *       ['👩‍❤️‍👩', 'Delta']
	 *     ],
	 *     {stringLength: stringWidth}
	 *   )
	 *   ```
	 *
	 *   Yields:
	 *
	 *   ```markdown
	 *   | Alpha | Bravo   |
	 *   | ----- | ------- |
	 *   | 中文  | Charlie |
	 *   | 👩‍❤️‍👩    | Delta   |
	 *   ```
	 */

	/**
	 * @typedef {Options} MarkdownTableOptions
	 * @todo
	 *   Remove next major.
	 */

	/**
	 * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..
	 *
	 * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table
	 *   Table data (matrix of strings).
	 * @param {Options} [options]
	 *   Configuration (optional).
	 * @returns {string}
	 */
	function markdownTable(table, options = {}) {
	  const align = (options.align || []).concat();
	  const stringLength = options.stringLength || defaultStringLength;
	  /** @type {Array<number>} Character codes as symbols for alignment per column. */
	  const alignments = [];
	  /** @type {Array<Array<string>>} Cells per row. */
	  const cellMatrix = [];
	  /** @type {Array<Array<number>>} Sizes of each cell per row. */
	  const sizeMatrix = [];
	  /** @type {Array<number>} */
	  const longestCellByColumn = [];
	  let mostCellsPerRow = 0;
	  let rowIndex = -1;

	  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d
	  // do superfluous work when aligning, so optimize for aligning.
	  while (++rowIndex < table.length) {
	    /** @type {Array<string>} */
	    const row = [];
	    /** @type {Array<number>} */
	    const sizes = [];
	    let columnIndex = -1;

	    if (table[rowIndex].length > mostCellsPerRow) {
	      mostCellsPerRow = table[rowIndex].length;
	    }

	    while (++columnIndex < table[rowIndex].length) {
	      const cell = serialize(table[rowIndex][columnIndex]);

	      if (options.alignDelimiters !== false) {
	        const size = stringLength(cell);
	        sizes[columnIndex] = size;

	        if (
	          longestCellByColumn[columnIndex] === undefined ||
	          size > longestCellByColumn[columnIndex]
	        ) {
	          longestCellByColumn[columnIndex] = size;
	        }
	      }

	      row.push(cell);
	    }

	    cellMatrix[rowIndex] = row;
	    sizeMatrix[rowIndex] = sizes;
	  }

	  // Figure out which alignments to use.
	  let columnIndex = -1;

	  if (typeof align === 'object' && 'length' in align) {
	    while (++columnIndex < mostCellsPerRow) {
	      alignments[columnIndex] = toAlignment(align[columnIndex]);
	    }
	  } else {
	    const code = toAlignment(align);

	    while (++columnIndex < mostCellsPerRow) {
	      alignments[columnIndex] = code;
	    }
	  }

	  // Inject the alignment row.
	  columnIndex = -1;
	  /** @type {Array<string>} */
	  const row = [];
	  /** @type {Array<number>} */
	  const sizes = [];

	  while (++columnIndex < mostCellsPerRow) {
	    const code = alignments[columnIndex];
	    let before = '';
	    let after = '';

	    if (code === 99 /* `c` */) {
	      before = ':';
	      after = ':';
	    } else if (code === 108 /* `l` */) {
	      before = ':';
	    } else if (code === 114 /* `r` */) {
	      after = ':';
	    }

	    // There *must* be at least one hyphen-minus in each alignment cell.
	    let size =
	      options.alignDelimiters === false
	        ? 1
	        : Math.max(
	            1,
	            longestCellByColumn[columnIndex] - before.length - after.length
	          );

	    const cell = before + '-'.repeat(size) + after;

	    if (options.alignDelimiters !== false) {
	      size = before.length + size + after.length;

	      if (size > longestCellByColumn[columnIndex]) {
	        longestCellByColumn[columnIndex] = size;
	      }

	      sizes[columnIndex] = size;
	    }

	    row[columnIndex] = cell;
	  }

	  // Inject the alignment row.
	  cellMatrix.splice(1, 0, row);
	  sizeMatrix.splice(1, 0, sizes);

	  rowIndex = -1;
	  /** @type {Array<string>} */
	  const lines = [];

	  while (++rowIndex < cellMatrix.length) {
	    const row = cellMatrix[rowIndex];
	    const sizes = sizeMatrix[rowIndex];
	    columnIndex = -1;
	    /** @type {Array<string>} */
	    const line = [];

	    while (++columnIndex < mostCellsPerRow) {
	      const cell = row[columnIndex] || '';
	      let before = '';
	      let after = '';

	      if (options.alignDelimiters !== false) {
	        const size =
	          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0);
	        const code = alignments[columnIndex];

	        if (code === 114 /* `r` */) {
	          before = ' '.repeat(size);
	        } else if (code === 99 /* `c` */) {
	          if (size % 2) {
	            before = ' '.repeat(size / 2 + 0.5);
	            after = ' '.repeat(size / 2 - 0.5);
	          } else {
	            before = ' '.repeat(size / 2);
	            after = before;
	          }
	        } else {
	          after = ' '.repeat(size);
	        }
	      }

	      if (options.delimiterStart !== false && !columnIndex) {
	        line.push('|');
	      }

	      if (
	        options.padding !== false &&
	        // Don’t add the opening space if we’re not aligning and the cell is
	        // empty: there will be a closing space.
	        !(options.alignDelimiters === false && cell === '') &&
	        (options.delimiterStart !== false || columnIndex)
	      ) {
	        line.push(' ');
	      }

	      if (options.alignDelimiters !== false) {
	        line.push(before);
	      }

	      line.push(cell);

	      if (options.alignDelimiters !== false) {
	        line.push(after);
	      }

	      if (options.padding !== false) {
	        line.push(' ');
	      }

	      if (
	        options.delimiterEnd !== false ||
	        columnIndex !== mostCellsPerRow - 1
	      ) {
	        line.push('|');
	      }
	    }

	    lines.push(
	      options.delimiterEnd === false
	        ? line.join('').replace(/ +$/, '')
	        : line.join('')
	    );
	  }

	  return lines.join('\n')
	}

	/**
	 * @param {string|null|undefined} [value]
	 * @returns {string}
	 */
	function serialize(value) {
	  return value === null || value === undefined ? '' : String(value)
	}

	/**
	 * @param {string} value
	 * @returns {number}
	 */
	function defaultStringLength(value) {
	  return value.length
	}

	/**
	 * @param {string|null|undefined} value
	 * @returns {number}
	 */
	function toAlignment(value) {
	  const code = typeof value === 'string' ? value.codePointAt(0) : 0;

	  return code === 67 /* `C` */ || code === 99 /* `c` */
	    ? 99 /* `c` */
	    : code === 76 /* `L` */ || code === 108 /* `l` */
	    ? 108 /* `l` */
	    : code === 82 /* `R` */ || code === 114 /* `r` */
	    ? 114 /* `r` */
	    : 0
	}

	/**
	 * @callback Handler
	 *   Handle a value, with a certain ID field set to a certain value.
	 *   The ID field is passed to `zwitch`, and it’s value is this function’s
	 *   place on the `handlers` record.
	 * @param {...any} parameters
	 *   Arbitrary parameters passed to the zwitch.
	 *   The first will be an object with a certain ID field set to a certain value.
	 * @returns {any}
	 *   Anything!
	 */

	/**
	 * @callback UnknownHandler
	 *   Handle values that do have a certain ID field, but it’s set to a value
	 *   that is not listed in the `handlers` record.
	 * @param {unknown} value
	 *   An object with a certain ID field set to an unknown value.
	 * @param {...any} rest
	 *   Arbitrary parameters passed to the zwitch.
	 * @returns {any}
	 *   Anything!
	 */

	/**
	 * @callback InvalidHandler
	 *   Handle values that do not have a certain ID field.
	 * @param {unknown} value
	 *   Any unknown value.
	 * @param {...any} rest
	 *   Arbitrary parameters passed to the zwitch.
	 * @returns {void|null|undefined|never}
	 *   This should crash or return nothing.
	 */

	/**
	 * @template {InvalidHandler} [Invalid=InvalidHandler]
	 * @template {UnknownHandler} [Unknown=UnknownHandler]
	 * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]
	 * @typedef Options
	 *   Configuration (required).
	 * @property {Invalid} [invalid]
	 *   Handler to use for invalid values.
	 * @property {Unknown} [unknown]
	 *   Handler to use for unknown values.
	 * @property {Handlers} [handlers]
	 *   Handlers to use.
	 */

	const own$a = {}.hasOwnProperty;

	/**
	 * Handle values based on a field.
	 *
	 * @template {InvalidHandler} [Invalid=InvalidHandler]
	 * @template {UnknownHandler} [Unknown=UnknownHandler]
	 * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]
	 * @param {string} key
	 *   Field to switch on.
	 * @param {Options<Invalid, Unknown, Handlers>} [options]
	 *   Configuration (required).
	 * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}
	 */
	function zwitch(key, options) {
	  const settings = options || {};

	  /**
	   * Handle one value.
	   *
	   * Based on the bound `key`, a respective handler will be called.
	   * If `value` is not an object, or doesn’t have a `key` property, the special
	   * “invalid” handler will be called.
	   * If `value` has an unknown `key`, the special “unknown” handler will be
	   * called.
	   *
	   * All arguments, and the context object, are passed through to the handler,
	   * and it’s result is returned.
	   *
	   * @this {unknown}
	   *   Any context object.
	   * @param {unknown} [value]
	   *   Any value.
	   * @param {...unknown} parameters
	   *   Arbitrary parameters passed to the zwitch.
	   * @property {Handler} invalid
	   *   Handle for values that do not have a certain ID field.
	   * @property {Handler} unknown
	   *   Handle values that do have a certain ID field, but it’s set to a value
	   *   that is not listed in the `handlers` record.
	   * @property {Handlers} handlers
	   *   Record of handlers.
	   * @returns {unknown}
	   *   Anything.
	   */
	  function one(value, ...parameters) {
	    /** @type {Handler|undefined} */
	    let fn = one.invalid;
	    const handlers = one.handlers;

	    if (value && own$a.call(value, key)) {
	      // @ts-expect-error Indexable.
	      const id = String(value[key]);
	      // @ts-expect-error Indexable.
	      fn = own$a.call(handlers, id) ? handlers[id] : one.unknown;
	    }

	    if (fn) {
	      return fn.call(this, value, ...parameters)
	    }
	  }

	  one.handlers = settings.handlers || {};
	  one.invalid = settings.invalid;
	  one.unknown = settings.unknown;

	  // @ts-expect-error: matches!
	  return one
	}

	/**
	 * @typedef {import('mdast').Blockquote} Blockquote
	 * @typedef {import('mdast').Parents} Parents
	 * @typedef {import('../types.js').Info} Info
	 * @typedef {import('../types.js').Map} Map
	 * @typedef {import('../types.js').State} State
	 */

	/**
	 * @param {Blockquote} node
	 * @param {Parents | undefined} _
	 * @param {State} state
	 * @param {Info} info
	 * @returns {string}
	 */
	function blockquote(node, _, state, info) {
	  const exit = state.enter('blockquote');
	  const tracker = state.createTracker(info);
	  tracker.move('> ');
	  tracker.shift(2);
	  const value = state.indentLines(
	    state.containerFlow(node, tracker.current()),
	    map$1
	  );
	  exit();
	  return value
	}

	/** @type {Map} */
	function map$1(line, _, blank) {
	  return '>' + (blank ? '' : ' ') + line
	}

	/**
	 * @typedef {import('../types.js').ConstructName} ConstructName
	 * @typedef {import('../types.js').Unsafe} Unsafe
	 */

	/**
	 * @param {Array<ConstructName>} stack
	 * @param {Unsafe} pattern
	 * @returns {boolean}
	 */
	function patternInScope(stack, pattern) {
	  return (
	    listInScope(stack, pattern.inConstruct, true) &&
	    !listInScope(stack, pattern.notInConstruct, false)
	  )
	}

	/**
	 * @param {Array<ConstructName>} stack
	 * @param {Unsafe['inConstruct']} list
	 * @param {boolean} none
	 * @returns {boolean}
	 */
	function listInScope(stack, list, none) {
	  if (typeof list === 'string') {
	    list = [list];
	  }

	  if (!list || list.length === 0) {
	    return none
	  }

	  let index = -1;

	  while (++index < list.length) {
	    if (stack.includes(list[index])) {
	      return true
	    }
	  }

	  return false
	}

	/**
	 * @typedef {import('mdast').Break} Break
	 * @typedef {import('mdast').Parents} Parents
	 * @typedef {import('../types.js').Info} Info
	 * @typedef {import('../types.js').State} State
	 */


	/**
	 * @param {Break} _
	 * @param {Parents | undefined} _1
	 * @param {State} state
	 * @param {Info} info
	 * @returns {string}
	 */
	function hardBreak(_, _1, state, info) {
	  let index = -1;

	  while (++index < state.unsafe.length) {
	    // If we can’t put eols in this construct (setext headings, tables), use a
	    // space instead.
	    if (
	      state.unsafe[index].character === '\n' &&
	      patternInScope(state.stack, state.unsafe[index])
	    ) {
	      return /[ \t]/.test(info.before) ? '' : ' '
	    }
	  }

	  return '\\\n'
	}

	/**
	 * Get the count of the longest repeating streak of `substring` in `value`.
	 *
	 * @param {string} value
	 *   Content to search in.
	 * @param {string} substring
	 *   Substring to look for, typically one character.
	 * @returns {number}
	 *   Count of most frequent adjacent `substring`s in `value`.
	 */
	function longestStreak(value, substring) {
	  const source = String(value);
	  let index = source.indexOf(substring);
	  let expected = index;
	  let count = 0;
	  let max = 0;

	  if (typeof substring !== 'string') {
	    throw new TypeError('Expected substring')
	  }

	  while (index !== -1) {
	    if (index === expected) {
	      if (++count > max) {
	        max = count;
	      }
	    } else {
	      count = 1;
	    }

	    expected = index + substring.length;
	    index = source.indexOf(substring, expected);
	  }

	  return max
	}

	/**
	 * @typedef {import('mdast').Code} Code
	 * @typedef {import('../types.js').State} State
	 */

	/**
	 * @param {Code} node
	 * @param {State} state
	 * @returns {boolean}
	 */
	function formatCodeAsIndented(node, state) {
	  return Boolean(
	    state.options.fences === false &&
	      node.value &&
	      // If there’s no info…
	      !node.lang &&
	      // And there’s a non-whitespace character…
	      /[^ \r\n]/.test(node.value) &&
	      // And the value doesn’t start or end in a blank…
	      !/^[\t ]*(?:[\r\n]|$)|(?:^|[\r\n])[\t ]*$/.test(node.value)
	  )
	}

	/**
	 * @typedef {import('../types.js').Options} Options
	 * @typedef {import('../types.js').State} State
	 */

	/**
	 * @param {State} state
	 * @returns {Exclude<Options['fence'], null | undefined>}
	 */
	function checkFence(state) {
	  const marker = state.options.fence || '`';

	  if (marker !== '`' && marker !== '~') {
	    throw new Error(
	      'Cannot serialize code with `' +
	        marker +
	        '` for `options.fence`, expected `` ` `` or `~`'
	    )
	  }

	  return marker
	}

	/**
	 * @typedef {import('mdast').Code} Code
	 * @typedef {import('mdast').Parents} Parents
	 * @typedef {import('../types.js').Info} Info
	 * @typedef {import('../types.js').Map} Map
	 * @typedef {import('../types.js').State} State
	 */


	/**
	 * @param {Code} node
	 * @param {Parents | undefined} _
	 * @param {State} state
	 * @param {Info} info
	 * @returns {string}
	 */
	function code$2(node, _, state, info) {
	  const marker = checkFence(state);
	  const raw = node.value || '';
	  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde';

	  if (formatCodeAsIndented(node, state)) {
	    const exit = state.enter('codeIndented');
	    const value = state.indentLines(raw, map);
	    exit();
	    return value
	  }

	  const tracker = state.createTracker(info);
	  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3));
	  const exit = state.enter('codeFenced');
	  let value = tracker.move(sequence);

	  if (node.lang) {
	    const subexit = state.enter(`codeFencedLang${suffix}`);
	    value += tracker.move(
	      state.safe(node.lang, {
	        before: value,
	        after: ' ',
	        encode: ['`'],
	        ...tracker.current()
	      })
	    );
	    subexit();
	  }

	  if (node.lang && node.meta) {
	    const subexit = state.enter(`codeFencedMeta${suffix}`);
	    value += tracker.move(' ');
	    value += tracker.move(
	      state.safe(node.meta, {
	        before: value,
	        after: '\n',
	        encode: ['`'],
	        ...tracker.current()
	      })
	    );
	    subexit();
	  }

	  value += tracker.move('\n');

	  if (raw) {
	    value += tracker.move(raw + '\n');
	  }

	  value += tracker.move(sequence);
	  exit();
	  return value
	}

	/** @type {Map} */
	function map(line, _, blank) {
	  return (blank ? '' : '    ') + line
	}

	/**
	 * @typedef {import('../types.js').Options} Options
	 * @typedef {import('../types.js').State} State
	 */

	/**
	 * @param {State} state
	 * @returns {Exclude<Options['quote'], null | undefined>}
	 */
	function checkQuote(state) {
	  const marker = state.options.quote || '"';

	  if (marker !== '"' && marker !== "'") {
	    throw new Error(
	      'Cannot serialize title with `' +
	        marker +
	        '` for `options.quote`, expected `"`, or `\'`'
	    )
	  }

	  return marker
	}

	/**
	 * @typedef {import('mdast').Definition} Definition
	 * @typedef {import('mdast').Parents} Parents
	 * @typedef {import('../types.js').Info} Info
	 * @typedef {import('../types.js').State} State
	 */


	/**
	 * @param {Definition} node
	 * @param {Parents | undefined} _
	 * @param {State} state
	 * @param {Info} info
	 * @returns {string}
	 */
	function definition(node, _, state, info) {
	  const quote = checkQuote(state);
	  const suffix = quote === '"' ? 'Quote' : 'Apostrophe';
	  const exit = state.enter('definition');
	  let subexit = state.enter('label');
	  const tracker = state.createTracker(info);
	  let value = tracker.move('[');
	  value += tracker.move(
	    state.safe(state.associationId(node), {
	      before: value,
	      after: ']',
	      ...tracker.current()
	    })
	  );
	  value += tracker.move(']: ');

	  subexit();

	  if (
	    // If there’s no url, or…
	    !node.url ||
	    // If there are control characters or whitespace.
	    /[\0- \u007F]/.test(node.url)
	  ) {
	    subexit = state.enter('destinationLiteral');
	    value += tracker.move('<');
	    value += tracker.move(
	      state.safe(node.url, {before: value, after: '>', ...tracker.current()})
	    );
	    value += tracker.move('>');
	  } else {
	    // No whitespace, raw is prettier.
	    subexit = state.enter('destinationRaw');
	    value += tracker.move(
	      state.safe(node.url, {
	        before: value,
	        after: node.title ? ' ' : '\n',
	        ...tracker.current()
	      })
	    );
	  }

	  subexit();

	  if (node.title) {
	    subexit = state.enter(`title${suffix}`);
	    value += tracker.move(' ' + quote);
	    value += tracker.move(
	      state.safe(node.title, {
	        before: value,
	        after: quote,
	        ...tracker.current()
	      })
	    );
	    value += tracker.move(quote);
	    subexit();
	  }

	  exit();

	  return value
	}

	/**
	 * @typedef {import('../types.js').Options} Options
	 * @typedef {import('../types.js').State} State
	 */

	/**
	 * @param {State} state
	 * @returns {Exclude<Options['emphasis'], null | undefined>}
	 */
	function checkEmphasis(state) {
	  const marker = state.options.emphasis || '*';

	  if (marker !== '*' && marker !== '_') {
	    throw new Error(
	      'Cannot serialize emphasis with `' +
	        marker +
	        '` for `options.emphasis`, expected `*`, or `_`'
	    )
	  }

	  return marker
	}

	/**
	 * @typedef {import('mdast').Emphasis} Emphasis
	 * @typedef {import('mdast').Parents} Parents
	 * @typedef {import('../types.js').Info} Info
	 * @typedef {import('../types.js').State} State
	 */


	emphasis.peek = emphasisPeek;

	// To do: there are cases where emphasis cannot “form” depending on the
	// previous or next character of sequences.
	// There’s no way around that though, except for injecting zero-width stuff.
	// Do we need to safeguard against that?
	/**
	 * @param {Emphasis} node
	 * @param {Parents | undefined} _
	 * @param {State} state
	 * @param {Info} info
	 * @returns {string}
	 */
	function emphasis(node, _, state, info) {
	  const marker = checkEmphasis(state);
	  const exit = state.enter('emphasis');
	  const tracker = state.createTracker(info);
	  let value = tracker.move(marker);
	  value += tracker.move(
	    state.containerPhrasing(node, {
	      before: value,
	      after: marker,
	      ...tracker.current()
	    })
	  );
	  value += tracker.move(marker);
	  exit();
	  return value
	}

	/**
	 * @param {Emphasis} _
	 * @param {Parents | undefined} _1
	 * @param {State} state
	 * @returns {string}
	 */
	function emphasisPeek(_, _1, state) {
	  return state.options.emphasis || '*'
	}

	/**
	 * @typedef {import('mdast').Heading} Heading
	 * @typedef {import('../types.js').State} State
	 */


	/**
	 * @param {Heading} node
	 * @param {State} state
	 * @returns {boolean}
	 */
	function formatHeadingAsSetext(node, state) {
	  let literalWithBreak = false;

	  // Look for literals with a line break.
	  // Note that this also
	  visit$1(node, function (node) {
	    if (
	      ('value' in node && /\r?\n|\r/.test(node.value)) ||
	      node.type === 'break'
	    ) {
	      literalWithBreak = true;
	      return EXIT$1
	    }
	  });

	  return Boolean(
	    (!node.depth || node.depth < 3) &&
	      toString$3(node) &&
	      (state.options.setext || literalWithBreak)
	  )
	}

	/**
	 * @typedef {import('mdast').Heading} Heading
	 * @typedef {import('mdast').Parents} Parents
	 * @typedef {import('../types.js').Info} Info
	 * @typedef {import('../types.js').State} State
	 */


	/**
	 * @param {Heading} node
	 * @param {Parents | undefined} _
	 * @param {State} state
	 * @param {Info} info
	 * @returns {string}
	 */
	function heading(node, _, state, info) {
	  const rank = Math.max(Math.min(6, node.depth || 1), 1);
	  const tracker = state.createTracker(info);

	  if (formatHeadingAsSetext(node, state)) {
	    const exit = state.enter('headingSetext');
	    const subexit = state.enter('phrasing');
	    const value = state.containerPhrasing(node, {
	      ...tracker.current(),
	      before: '\n',
	      after: '\n'
	    });
	    subexit();
	    exit();

	    return (
	      value +
	      '\n' +
	      (rank === 1 ? '=' : '-').repeat(
	        // The whole size…
	        value.length -
	          // Minus the position of the character after the last EOL (or
	          // 0 if there is none)…
	          (Math.max(value.lastIndexOf('\r'), value.lastIndexOf('\n')) + 1)
	      )
	    )
	  }

	  const sequence = '#'.repeat(rank);
	  const exit = state.enter('headingAtx');
	  const subexit = state.enter('phrasing');

	  // Note: for proper tracking, we should reset the output positions when there
	  // is no content returned, because then the space is not output.
	  // Practically, in that case, there is no content, so it doesn’t matter that
	  // we’ve tracked one too many characters.
	  tracker.move(sequence + ' ');

	  let value = state.containerPhrasing(node, {
	    before: '# ',
	    after: '\n',
	    ...tracker.current()
	  });

	  if (/^[\t ]/.test(value)) {
	    // To do: what effect has the character reference on tracking?
	    value =
	      '&#x' +
	      value.charCodeAt(0).toString(16).toUpperCase() +
	      ';' +
	      value.slice(1);
	  }

	  value = value ? sequence + ' ' + value : sequence;

	  if (state.options.closeAtx) {
	    value += ' ' + sequence;
	  }

	  subexit();
	  exit();

	  return value
	}

	/**
	 * @typedef {import('mdast').Html} Html
	 */

	html$2.peek = htmlPeek;

	/**
	 * @param {Html} node
	 * @returns {string}
	 */
	function html$2(node) {
	  return node.value || ''
	}

	/**
	 * @returns {string}
	 */
	function htmlPeek() {
	  return '<'
	}

	/**
	 * @typedef {import('mdast').Image} Image
	 * @typedef {import('mdast').Parents} Parents
	 * @typedef {import('../types.js').Info} Info
	 * @typedef {import('../types.js').State} State
	 */


	image$1.peek = imagePeek;

	/**
	 * @param {Image} node
	 * @param {Parents | undefined} _
	 * @param {State} state
	 * @param {Info} info
	 * @returns {string}
	 */
	function image$1(node, _, state, info) {
	  const quote = checkQuote(state);
	  const suffix = quote === '"' ? 'Quote' : 'Apostrophe';
	  const exit = state.enter('image');
	  let subexit = state.enter('label');
	  const tracker = state.createTracker(info);
	  let value = tracker.move('![');
	  value += tracker.move(
	    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})
	  );
	  value += tracker.move('](');

	  subexit();

	  if (
	    // If there’s no url but there is a title…
	    (!node.url && node.title) ||
	    // If there are control characters or whitespace.
	    /[\0- \u007F]/.test(node.url)
	  ) {
	    subexit = state.enter('destinationLiteral');
	    value += tracker.move('<');
	    value += tracker.move(
	      state.safe(node.url, {before: value, after: '>', ...tracker.current()})
	    );
	    value += tracker.move('>');
	  } else {
	    // No whitespace, raw is prettier.
	    subexit = state.enter('destinationRaw');
	    value += tracker.move(
	      state.safe(node.url, {
	        before: value,
	        after: node.title ? ' ' : ')',
	        ...tracker.current()
	      })
	    );
	  }

	  subexit();

	  if (node.title) {
	    subexit = state.enter(`title${suffix}`);
	    value += tracker.move(' ' + quote);
	    value += tracker.move(
	      state.safe(node.title, {
	        before: value,
	        after: quote,
	        ...tracker.current()
	      })
	    );
	    value += tracker.move(quote);
	    subexit();
	  }

	  value += tracker.move(')');
	  exit();

	  return value
	}

	/**
	 * @returns {string}
	 */
	function imagePeek() {
	  return '!'
	}

	/**
	 * @typedef {import('mdast').ImageReference} ImageReference
	 * @typedef {import('mdast').Parents} Parents
	 * @typedef {import('../types.js').Info} Info
	 * @typedef {import('../types.js').State} State
	 */

	imageReference.peek = imageReferencePeek;

	/**
	 * @param {ImageReference} node
	 * @param {Parents | undefined} _
	 * @param {State} state
	 * @param {Info} info
	 * @returns {string}
	 */
	function imageReference(node, _, state, info) {
	  const type = node.referenceType;
	  const exit = state.enter('imageReference');
	  let subexit = state.enter('label');
	  const tracker = state.createTracker(info);
	  let value = tracker.move('![');
	  const alt = state.safe(node.alt, {
	    before: value,
	    after: ']',
	    ...tracker.current()
	  });
	  value += tracker.move(alt + '][');

	  subexit();
	  // Hide the fact that we’re in phrasing, because escapes don’t work.
	  const stack = state.stack;
	  state.stack = [];
	  subexit = state.enter('reference');
	  // Note: for proper tracking, we should reset the output positions when we end
	  // up making a `shortcut` reference, because then there is no brace output.
	  // Practically, in that case, there is no content, so it doesn’t matter that
	  // we’ve tracked one too many characters.
	  const reference = state.safe(state.associationId(node), {
	    before: value,
	    after: ']',
	    ...tracker.current()
	  });
	  subexit();
	  state.stack = stack;
	  exit();

	  if (type === 'full' || !alt || alt !== reference) {
	    value += tracker.move(reference + ']');
	  } else if (type === 'shortcut') {
	    // Remove the unwanted `[`.
	    value = value.slice(0, -1);
	  } else {
	    value += tracker.move(']');
	  }

	  return value
	}

	/**
	 * @returns {string}
	 */
	function imageReferencePeek() {
	  return '!'
	}

	/**
	 * @typedef {import('mdast').InlineCode} InlineCode
	 * @typedef {import('mdast').Parents} Parents
	 * @typedef {import('../types.js').State} State
	 */

	inlineCode.peek = inlineCodePeek;

	/**
	 * @param {InlineCode} node
	 * @param {Parents | undefined} _
	 * @param {State} state
	 * @returns {string}
	 */
	function inlineCode(node, _, state) {
	  let value = node.value || '';
	  let sequence = '`';
	  let index = -1;

	  // If there is a single grave accent on its own in the code, use a fence of
	  // two.
	  // If there are two in a row, use one.
	  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {
	    sequence += '`';
	  }

	  // If this is not just spaces or eols (tabs don’t count), and either the
	  // first or last character are a space, eol, or tick, then pad with spaces.
	  if (
	    /[^ \r\n]/.test(value) &&
	    ((/^[ \r\n]/.test(value) && /[ \r\n]$/.test(value)) || /^`|`$/.test(value))
	  ) {
	    value = ' ' + value + ' ';
	  }

	  // We have a potential problem: certain characters after eols could result in
	  // blocks being seen.
	  // For example, if someone injected the string `'\n# b'`, then that would
	  // result in an ATX heading.
	  // We can’t escape characters in `inlineCode`, but because eols are
	  // transformed to spaces when going from markdown to HTML anyway, we can swap
	  // them out.
	  while (++index < state.unsafe.length) {
	    const pattern = state.unsafe[index];
	    const expression = state.compilePattern(pattern);
	    /** @type {RegExpExecArray | null} */
	    let match;

	    // Only look for `atBreak`s.
	    // Btw: note that `atBreak` patterns will always start the regex at LF or
	    // CR.
	    if (!pattern.atBreak) continue

	    while ((match = expression.exec(value))) {
	      let position = match.index;

	      // Support CRLF (patterns only look for one of the characters).
	      if (
	        value.charCodeAt(position) === 10 /* `\n` */ &&
	        value.charCodeAt(position - 1) === 13 /* `\r` */
	      ) {
	        position--;
	      }

	      value = value.slice(0, position) + ' ' + value.slice(match.index + 1);
	    }
	  }

	  return sequence + value + sequence
	}

	/**
	 * @returns {string}
	 */
	function inlineCodePeek() {
	  return '`'
	}

	/**
	 * @typedef {import('mdast').Link} Link
	 * @typedef {import('../types.js').State} State
	 */


	/**
	 * @param {Link} node
	 * @param {State} state
	 * @returns {boolean}
	 */
	function formatLinkAsAutolink(node, state) {
	  const raw = toString$3(node);

	  return Boolean(
	    !state.options.resourceLink &&
	      // If there’s a url…
	      node.url &&
	      // And there’s a no title…
	      !node.title &&
	      // And the content of `node` is a single text node…
	      node.children &&
	      node.children.length === 1 &&
	      node.children[0].type === 'text' &&
	      // And if the url is the same as the content…
	      (raw === node.url || 'mailto:' + raw === node.url) &&
	      // And that starts w/ a protocol…
	      /^[a-z][a-z+.-]+:/i.test(node.url) &&
	      // And that doesn’t contain ASCII control codes (character escapes and
	      // references don’t work), space, or angle brackets…
	      !/[\0- <>\u007F]/.test(node.url)
	  )
	}

	/**
	 * @typedef {import('mdast').Link} Link
	 * @typedef {import('mdast').Parents} Parents
	 * @typedef {import('../types.js').Exit} Exit
	 * @typedef {import('../types.js').Info} Info
	 * @typedef {import('../types.js').State} State
	 */


	link$1.peek = linkPeek;

	/**
	 * @param {Link} node
	 * @param {Parents | undefined} _
	 * @param {State} state
	 * @param {Info} info
	 * @returns {string}
	 */
	function link$1(node, _, state, info) {
	  const quote = checkQuote(state);
	  const suffix = quote === '"' ? 'Quote' : 'Apostrophe';
	  const tracker = state.createTracker(info);
	  /** @type {Exit} */
	  let exit;
	  /** @type {Exit} */
	  let subexit;

	  if (formatLinkAsAutolink(node, state)) {
	    // Hide the fact that we’re in phrasing, because escapes don’t work.
	    const stack = state.stack;
	    state.stack = [];
	    exit = state.enter('autolink');
	    let value = tracker.move('<');
	    value += tracker.move(
	      state.containerPhrasing(node, {
	        before: value,
	        after: '>',
	        ...tracker.current()
	      })
	    );
	    value += tracker.move('>');
	    exit();
	    state.stack = stack;
	    return value
	  }

	  exit = state.enter('link');
	  subexit = state.enter('label');
	  let value = tracker.move('[');
	  value += tracker.move(
	    state.containerPhrasing(node, {
	      before: value,
	      after: '](',
	      ...tracker.current()
	    })
	  );
	  value += tracker.move('](');
	  subexit();

	  if (
	    // If there’s no url but there is a title…
	    (!node.url && node.title) ||
	    // If there are control characters or whitespace.
	    /[\0- \u007F]/.test(node.url)
	  ) {
	    subexit = state.enter('destinationLiteral');
	    value += tracker.move('<');
	    value += tracker.move(
	      state.safe(node.url, {before: value, after: '>', ...tracker.current()})
	    );
	    value += tracker.move('>');
	  } else {
	    // No whitespace, raw is prettier.
	    subexit = state.enter('destinationRaw');
	    value += tracker.move(
	      state.safe(node.url, {
	        before: value,
	        after: node.title ? ' ' : ')',
	        ...tracker.current()
	      })
	    );
	  }

	  subexit();

	  if (node.title) {
	    subexit = state.enter(`title${suffix}`);
	    value += tracker.move(' ' + quote);
	    value += tracker.move(
	      state.safe(node.title, {
	        before: value,
	        after: quote,
	        ...tracker.current()
	      })
	    );
	    value += tracker.move(quote);
	    subexit();
	  }

	  value += tracker.move(')');

	  exit();
	  return value
	}

	/**
	 * @param {Link} node
	 * @param {Parents | undefined} _
	 * @param {State} state
	 * @returns {string}
	 */
	function linkPeek(node, _, state) {
	  return formatLinkAsAutolink(node, state) ? '<' : '['
	}

	/**
	 * @typedef {import('mdast').LinkReference} LinkReference
	 * @typedef {import('mdast').Parents} Parents
	 * @typedef {import('../types.js').Info} Info
	 * @typedef {import('../types.js').State} State
	 */

	linkReference.peek = linkReferencePeek;

	/**
	 * @param {LinkReference} node
	 * @param {Parents | undefined} _
	 * @param {State} state
	 * @param {Info} info
	 * @returns {string}
	 */
	function linkReference(node, _, state, info) {
	  const type = node.referenceType;
	  const exit = state.enter('linkReference');
	  let subexit = state.enter('label');
	  const tracker = state.createTracker(info);
	  let value = tracker.move('[');
	  const text = state.containerPhrasing(node, {
	    before: value,
	    after: ']',
	    ...tracker.current()
	  });
	  value += tracker.move(text + '][');

	  subexit();
	  // Hide the fact that we’re in phrasing, because escapes don’t work.
	  const stack = state.stack;
	  state.stack = [];
	  subexit = state.enter('reference');
	  // Note: for proper tracking, we should reset the output positions when we end
	  // up making a `shortcut` reference, because then there is no brace output.
	  // Practically, in that case, there is no content, so it doesn’t matter that
	  // we’ve tracked one too many characters.
	  const reference = state.safe(state.associationId(node), {
	    before: value,
	    after: ']',
	    ...tracker.current()
	  });
	  subexit();
	  state.stack = stack;
	  exit();

	  if (type === 'full' || !text || text !== reference) {
	    value += tracker.move(reference + ']');
	  } else if (type === 'shortcut') {
	    // Remove the unwanted `[`.
	    value = value.slice(0, -1);
	  } else {
	    value += tracker.move(']');
	  }

	  return value
	}

	/**
	 * @returns {string}
	 */
	function linkReferencePeek() {
	  return '['
	}

	/**
	 * @typedef {import('../types.js').Options} Options
	 * @typedef {import('../types.js').State} State
	 */

	/**
	 * @param {State} state
	 * @returns {Exclude<Options['bullet'], null | undefined>}
	 */
	function checkBullet(state) {
	  const marker = state.options.bullet || '*';

	  if (marker !== '*' && marker !== '+' && marker !== '-') {
	    throw new Error(
	      'Cannot serialize items with `' +
	        marker +
	        '` for `options.bullet`, expected `*`, `+`, or `-`'
	    )
	  }

	  return marker
	}

	/**
	 * @typedef {import('../types.js').Options} Options
	 * @typedef {import('../types.js').State} State
	 */


	/**
	 * @param {State} state
	 * @returns {Exclude<Options['bullet'], null | undefined>}
	 */
	function checkBulletOther(state) {
	  const bullet = checkBullet(state);
	  const bulletOther = state.options.bulletOther;

	  if (!bulletOther) {
	    return bullet === '*' ? '-' : '*'
	  }

	  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {
	    throw new Error(
	      'Cannot serialize items with `' +
	        bulletOther +
	        '` for `options.bulletOther`, expected `*`, `+`, or `-`'
	    )
	  }

	  if (bulletOther === bullet) {
	    throw new Error(
	      'Expected `bullet` (`' +
	        bullet +
	        '`) and `bulletOther` (`' +
	        bulletOther +
	        '`) to be different'
	    )
	  }

	  return bulletOther
	}

	/**
	 * @typedef {import('../types.js').Options} Options
	 * @typedef {import('../types.js').State} State
	 */

	/**
	 * @param {State} state
	 * @returns {Exclude<Options['bulletOrdered'], null | undefined>}
	 */
	function checkBulletOrdered(state) {
	  const marker = state.options.bulletOrdered || '.';

	  if (marker !== '.' && marker !== ')') {
	    throw new Error(
	      'Cannot serialize items with `' +
	        marker +
	        '` for `options.bulletOrdered`, expected `.` or `)`'
	    )
	  }

	  return marker
	}

	/**
	 * @typedef {import('../types.js').Options} Options
	 * @typedef {import('../types.js').State} State
	 */

	/**
	 * @param {State} state
	 * @returns {Exclude<Options['rule'], null | undefined>}
	 */
	function checkRule(state) {
	  const marker = state.options.rule || '*';

	  if (marker !== '*' && marker !== '-' && marker !== '_') {
	    throw new Error(
	      'Cannot serialize rules with `' +
	        marker +
	        '` for `options.rule`, expected `*`, `-`, or `_`'
	    )
	  }

	  return marker
	}

	/**
	 * @typedef {import('mdast').List} List
	 * @typedef {import('mdast').Parents} Parents
	 * @typedef {import('../types.js').Info} Info
	 * @typedef {import('../types.js').State} State
	 */


	/**
	 * @param {List} node
	 * @param {Parents | undefined} parent
	 * @param {State} state
	 * @param {Info} info
	 * @returns {string}
	 */
	function list(node, parent, state, info) {
	  const exit = state.enter('list');
	  const bulletCurrent = state.bulletCurrent;
	  /** @type {string} */
	  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state);
	  /** @type {string} */
	  const bulletOther = node.ordered
	    ? bullet === '.'
	      ? ')'
	      : '.'
	    : checkBulletOther(state);
	  let useDifferentMarker =
	    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false;

	  if (!node.ordered) {
	    const firstListItem = node.children ? node.children[0] : undefined;

	    // If there’s an empty first list item directly in two list items,
	    // we have to use a different bullet:
	    //
	    // ```markdown
	    // * - *
	    // ```
	    //
	    // …because otherwise it would become one big thematic break.
	    if (
	      // Bullet could be used as a thematic break marker:
	      (bullet === '*' || bullet === '-') &&
	      // Empty first list item:
	      firstListItem &&
	      (!firstListItem.children || !firstListItem.children[0]) &&
	      // Directly in two other list items:
	      state.stack[state.stack.length - 1] === 'list' &&
	      state.stack[state.stack.length - 2] === 'listItem' &&
	      state.stack[state.stack.length - 3] === 'list' &&
	      state.stack[state.stack.length - 4] === 'listItem' &&
	      // That are each the first child.
	      state.indexStack[state.indexStack.length - 1] === 0 &&
	      state.indexStack[state.indexStack.length - 2] === 0 &&
	      state.indexStack[state.indexStack.length - 3] === 0
	    ) {
	      useDifferentMarker = true;
	    }

	    // If there’s a thematic break at the start of the first list item,
	    // we have to use a different bullet:
	    //
	    // ```markdown
	    // * ---
	    // ```
	    //
	    // …because otherwise it would become one big thematic break.
	    if (checkRule(state) === bullet && firstListItem) {
	      let index = -1;

	      while (++index < node.children.length) {
	        const item = node.children[index];

	        if (
	          item &&
	          item.type === 'listItem' &&
	          item.children &&
	          item.children[0] &&
	          item.children[0].type === 'thematicBreak'
	        ) {
	          useDifferentMarker = true;
	          break
	        }
	      }
	    }
	  }

	  if (useDifferentMarker) {
	    bullet = bulletOther;
	  }

	  state.bulletCurrent = bullet;
	  const value = state.containerFlow(node, info);
	  state.bulletLastUsed = bullet;
	  state.bulletCurrent = bulletCurrent;
	  exit();
	  return value
	}

	/**
	 * @typedef {import('../types.js').Options} Options
	 * @typedef {import('../types.js').State} State
	 */

	/**
	 * @param {State} state
	 * @returns {Exclude<Options['listItemIndent'], null | undefined>}
	 */
	function checkListItemIndent(state) {
	  const style = state.options.listItemIndent || 'one';

	  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {
	    throw new Error(
	      'Cannot serialize items with `' +
	        style +
	        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'
	    )
	  }

	  return style
	}

	/**
	 * @typedef {import('mdast').ListItem} ListItem
	 * @typedef {import('mdast').Parents} Parents
	 * @typedef {import('../types.js').Info} Info
	 * @typedef {import('../types.js').Map} Map
	 * @typedef {import('../types.js').State} State
	 */


	/**
	 * @param {ListItem} node
	 * @param {Parents | undefined} parent
	 * @param {State} state
	 * @param {Info} info
	 * @returns {string}
	 */
	function listItem(node, parent, state, info) {
	  const listItemIndent = checkListItemIndent(state);
	  let bullet = state.bulletCurrent || checkBullet(state);

	  // Add the marker value for ordered lists.
	  if (parent && parent.type === 'list' && parent.ordered) {
	    bullet =
	      (typeof parent.start === 'number' && parent.start > -1
	        ? parent.start
	        : 1) +
	      (state.options.incrementListMarker === false
	        ? 0
	        : parent.children.indexOf(node)) +
	      bullet;
	  }

	  let size = bullet.length + 1;

	  if (
	    listItemIndent === 'tab' ||
	    (listItemIndent === 'mixed' &&
	      ((parent && parent.type === 'list' && parent.spread) || node.spread))
	  ) {
	    size = Math.ceil(size / 4) * 4;
	  }

	  const tracker = state.createTracker(info);
	  tracker.move(bullet + ' '.repeat(size - bullet.length));
	  tracker.shift(size);
	  const exit = state.enter('listItem');
	  const value = state.indentLines(
	    state.containerFlow(node, tracker.current()),
	    map
	  );
	  exit();

	  return value

	  /** @type {Map} */
	  function map(line, index, blank) {
	    if (index) {
	      return (blank ? '' : ' '.repeat(size)) + line
	    }

	    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line
	  }
	}

	/**
	 * @typedef {import('mdast').Paragraph} Paragraph
	 * @typedef {import('mdast').Parents} Parents
	 * @typedef {import('../types.js').Info} Info
	 * @typedef {import('../types.js').State} State
	 */

	/**
	 * @param {Paragraph} node
	 * @param {Parents | undefined} _
	 * @param {State} state
	 * @param {Info} info
	 * @returns {string}
	 */
	function paragraph(node, _, state, info) {
	  const exit = state.enter('paragraph');
	  const subexit = state.enter('phrasing');
	  const value = state.containerPhrasing(node, info);
	  subexit();
	  exit();
	  return value
	}

	/**
	 * @typedef {import('mdast').PhrasingContent} PhrasingContent
	 */


	/**
	 * Check if the given value is *phrasing content*.
	 *
	 * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.
	 *
	 * @param node
	 *   Thing to check, typically `Node`.
	 * @returns
	 *   Whether `value` is phrasing content.
	 */

	const phrasing =
	  /** @type {(node?: unknown) => node is PhrasingContent} */
	  (
	    convert$2([
	      'break',
	      'delete',
	      'emphasis',
	      'footnote',
	      'footnoteReference',
	      'image',
	      'imageReference',
	      'inlineCode',
	      'link',
	      'linkReference',
	      'strong',
	      'text'
	    ])
	  );

	/**
	 * @typedef {import('mdast').Parents} Parents
	 * @typedef {import('mdast').Root} Root
	 * @typedef {import('../types.js').Info} Info
	 * @typedef {import('../types.js').State} State
	 */


	/**
	 * @param {Root} node
	 * @param {Parents | undefined} _
	 * @param {State} state
	 * @param {Info} info
	 * @returns {string}
	 */
	function root$5(node, _, state, info) {
	  // Note: `html` nodes are ambiguous.
	  const hasPhrasing = node.children.some(function (d) {
	    return phrasing(d)
	  });
	  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow;
	  return fn.call(state, node, info)
	}

	/**
	 * @typedef {import('../types.js').Options} Options
	 * @typedef {import('../types.js').State} State
	 */

	/**
	 * @param {State} state
	 * @returns {Exclude<Options['strong'], null | undefined>}
	 */
	function checkStrong(state) {
	  const marker = state.options.strong || '*';

	  if (marker !== '*' && marker !== '_') {
	    throw new Error(
	      'Cannot serialize strong with `' +
	        marker +
	        '` for `options.strong`, expected `*`, or `_`'
	    )
	  }

	  return marker
	}

	/**
	 * @typedef {import('mdast').Parents} Parents
	 * @typedef {import('mdast').Strong} Strong
	 * @typedef {import('../types.js').Info} Info
	 * @typedef {import('../types.js').State} State
	 */


	strong.peek = strongPeek;

	// To do: there are cases where emphasis cannot “form” depending on the
	// previous or next character of sequences.
	// There’s no way around that though, except for injecting zero-width stuff.
	// Do we need to safeguard against that?
	/**
	 * @param {Strong} node
	 * @param {Parents | undefined} _
	 * @param {State} state
	 * @param {Info} info
	 * @returns {string}
	 */
	function strong(node, _, state, info) {
	  const marker = checkStrong(state);
	  const exit = state.enter('strong');
	  const tracker = state.createTracker(info);
	  let value = tracker.move(marker + marker);
	  value += tracker.move(
	    state.containerPhrasing(node, {
	      before: value,
	      after: marker,
	      ...tracker.current()
	    })
	  );
	  value += tracker.move(marker + marker);
	  exit();
	  return value
	}

	/**
	 * @param {Strong} _
	 * @param {Parents | undefined} _1
	 * @param {State} state
	 * @returns {string}
	 */
	function strongPeek(_, _1, state) {
	  return state.options.strong || '*'
	}

	/**
	 * @typedef {import('mdast').Parents} Parents
	 * @typedef {import('mdast').Text} Text
	 * @typedef {import('../types.js').Info} Info
	 * @typedef {import('../types.js').State} State
	 */

	/**
	 * @param {Text} node
	 * @param {Parents | undefined} _
	 * @param {State} state
	 * @param {Info} info
	 * @returns {string}
	 */
	function text$4(node, _, state, info) {
	  return state.safe(node.value, info)
	}

	/**
	 * @typedef {import('../types.js').Options} Options
	 * @typedef {import('../types.js').State} State
	 */

	/**
	 * @param {State} state
	 * @returns {Exclude<Options['ruleRepetition'], null | undefined>}
	 */
	function checkRuleRepetition(state) {
	  const repetition = state.options.ruleRepetition || 3;

	  if (repetition < 3) {
	    throw new Error(
	      'Cannot serialize rules with repetition `' +
	        repetition +
	        '` for `options.ruleRepetition`, expected `3` or more'
	    )
	  }

	  return repetition
	}

	/**
	 * @typedef {import('mdast').Parents} Parents
	 * @typedef {import('mdast').ThematicBreak} ThematicBreak
	 * @typedef {import('../types.js').State} State
	 */


	/**
	 * @param {ThematicBreak} _
	 * @param {Parents | undefined} _1
	 * @param {State} state
	 * @returns {string}
	 */
	function thematicBreak(_, _1, state) {
	  const value = (
	    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')
	  ).repeat(checkRuleRepetition(state));

	  return state.options.ruleSpaces ? value.slice(0, -1) : value
	}

	/**
	 * Default (CommonMark) handlers.
	 */
	const handle$1 = {
	  blockquote,
	  break: hardBreak,
	  code: code$2,
	  definition,
	  emphasis,
	  hardBreak,
	  heading,
	  html: html$2,
	  image: image$1,
	  imageReference,
	  inlineCode,
	  link: link$1,
	  linkReference,
	  list,
	  listItem,
	  paragraph,
	  root: root$5,
	  strong,
	  text: text$4,
	  thematicBreak
	};

	/**
	 * @typedef {import('mdast').InlineCode} InlineCode
	 * @typedef {import('mdast').Table} Table
	 * @typedef {import('mdast').TableCell} TableCell
	 * @typedef {import('mdast').TableRow} TableRow
	 *
	 * @typedef {import('markdown-table').Options} MarkdownTableOptions
	 *
	 * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
	 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
	 * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
	 *
	 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
	 * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
	 * @typedef {import('mdast-util-to-markdown').State} State
	 * @typedef {import('mdast-util-to-markdown').Info} Info
	 */


	/**
	 * Create an extension for `mdast-util-from-markdown` to enable GFM tables in
	 * markdown.
	 *
	 * @returns {FromMarkdownExtension}
	 *   Extension for `mdast-util-from-markdown` to enable GFM tables.
	 */
	function gfmTableFromMarkdown() {
	  return {
	    enter: {
	      table: enterTable,
	      tableData: enterCell,
	      tableHeader: enterCell,
	      tableRow: enterRow
	    },
	    exit: {
	      codeText: exitCodeText,
	      table: exitTable,
	      tableData: exit,
	      tableHeader: exit,
	      tableRow: exit
	    }
	  }
	}

	/**
	 * @this {CompileContext}
	 * @type {FromMarkdownHandle}
	 */
	function enterTable(token) {
	  const align = token._align;
	  this.enter(
	    {
	      type: 'table',
	      align: align.map(function (d) {
	        return d === 'none' ? null : d
	      }),
	      children: []
	    },
	    token
	  );
	  this.data.inTable = true;
	}

	/**
	 * @this {CompileContext}
	 * @type {FromMarkdownHandle}
	 */
	function exitTable(token) {
	  this.exit(token);
	  this.data.inTable = undefined;
	}

	/**
	 * @this {CompileContext}
	 * @type {FromMarkdownHandle}
	 */
	function enterRow(token) {
	  this.enter({type: 'tableRow', children: []}, token);
	}

	/**
	 * @this {CompileContext}
	 * @type {FromMarkdownHandle}
	 */
	function exit(token) {
	  this.exit(token);
	}

	/**
	 * @this {CompileContext}
	 * @type {FromMarkdownHandle}
	 */
	function enterCell(token) {
	  this.enter({type: 'tableCell', children: []}, token);
	}

	// Overwrite the default code text data handler to unescape escaped pipes when
	// they are in tables.
	/**
	 * @this {CompileContext}
	 * @type {FromMarkdownHandle}
	 */
	function exitCodeText(token) {
	  let value = this.resume();

	  if (this.data.inTable) {
	    value = value.replace(/\\([\\|])/g, replace);
	  }

	  const node = this.stack[this.stack.length - 1];
	  ok$3(node.type === 'inlineCode');
	  node.value = value;
	  this.exit(token);
	}

	/**
	 * @param {string} $0
	 * @param {string} $1
	 * @returns {string}
	 */
	function replace($0, $1) {
	  // Pipes work, backslashes don’t (but can’t escape pipes).
	  return $1 === '|' ? $1 : $0
	}

	/**
	 * Create an extension for `mdast-util-to-markdown` to enable GFM tables in
	 * markdown.
	 *
	 * @param {Options | null | undefined} [options]
	 *   Configuration.
	 * @returns {ToMarkdownExtension}
	 *   Extension for `mdast-util-to-markdown` to enable GFM tables.
	 */
	function gfmTableToMarkdown(options) {
	  const settings = options || {};
	  const padding = settings.tableCellPadding;
	  const alignDelimiters = settings.tablePipeAlign;
	  const stringLength = settings.stringLength;
	  const around = padding ? ' ' : '|';

	  return {
	    unsafe: [
	      {character: '\r', inConstruct: 'tableCell'},
	      {character: '\n', inConstruct: 'tableCell'},
	      // A pipe, when followed by a tab or space (padding), or a dash or colon
	      // (unpadded delimiter row), could result in a table.
	      {atBreak: true, character: '|', after: '[\t :-]'},
	      // A pipe in a cell must be encoded.
	      {character: '|', inConstruct: 'tableCell'},
	      // A colon must be followed by a dash, in which case it could start a
	      // delimiter row.
	      {atBreak: true, character: ':', after: '-'},
	      // A delimiter row can also start with a dash, when followed by more
	      // dashes, a colon, or a pipe.
	      // This is a stricter version than the built in check for lists, thematic
	      // breaks, and setex heading underlines though:
	      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>
	      {atBreak: true, character: '-', after: '[:|-]'}
	    ],
	    handlers: {
	      inlineCode: inlineCodeWithTable,
	      table: handleTable,
	      tableCell: handleTableCell,
	      tableRow: handleTableRow
	    }
	  }

	  /**
	   * @type {ToMarkdownHandle}
	   * @param {Table} node
	   */
	  function handleTable(node, _, state, info) {
	    return serializeData(handleTableAsData(node, state, info), node.align)
	  }

	  /**
	   * This function isn’t really used normally, because we handle rows at the
	   * table level.
	   * But, if someone passes in a table row, this ensures we make somewhat sense.
	   *
	   * @type {ToMarkdownHandle}
	   * @param {TableRow} node
	   */
	  function handleTableRow(node, _, state, info) {
	    const row = handleTableRowAsData(node, state, info);
	    const value = serializeData([row]);
	    // `markdown-table` will always add an align row
	    return value.slice(0, value.indexOf('\n'))
	  }

	  /**
	   * @type {ToMarkdownHandle}
	   * @param {TableCell} node
	   */
	  function handleTableCell(node, _, state, info) {
	    const exit = state.enter('tableCell');
	    const subexit = state.enter('phrasing');
	    const value = state.containerPhrasing(node, {
	      ...info,
	      before: around,
	      after: around
	    });
	    subexit();
	    exit();
	    return value
	  }

	  /**
	   * @param {Array<Array<string>>} matrix
	   * @param {Array<string | null | undefined> | null | undefined} [align]
	   */
	  function serializeData(matrix, align) {
	    return markdownTable(matrix, {
	      align,
	      // @ts-expect-error: `markdown-table` types should support `null`.
	      alignDelimiters,
	      // @ts-expect-error: `markdown-table` types should support `null`.
	      padding,
	      // @ts-expect-error: `markdown-table` types should support `null`.
	      stringLength
	    })
	  }

	  /**
	   * @param {Table} node
	   * @param {State} state
	   * @param {Info} info
	   */
	  function handleTableAsData(node, state, info) {
	    const children = node.children;
	    let index = -1;
	    /** @type {Array<Array<string>>} */
	    const result = [];
	    const subexit = state.enter('table');

	    while (++index < children.length) {
	      result[index] = handleTableRowAsData(children[index], state, info);
	    }

	    subexit();

	    return result
	  }

	  /**
	   * @param {TableRow} node
	   * @param {State} state
	   * @param {Info} info
	   */
	  function handleTableRowAsData(node, state, info) {
	    const children = node.children;
	    let index = -1;
	    /** @type {Array<string>} */
	    const result = [];
	    const subexit = state.enter('tableRow');

	    while (++index < children.length) {
	      // Note: the positional info as used here is incorrect.
	      // Making it correct would be impossible due to aligning cells?
	      // And it would need copy/pasting `markdown-table` into this project.
	      result[index] = handleTableCell(children[index], node, state, info);
	    }

	    subexit();

	    return result
	  }

	  /**
	   * @type {ToMarkdownHandle}
	   * @param {InlineCode} node
	   */
	  function inlineCodeWithTable(node, parent, state) {
	    let value = handle$1.inlineCode(node, parent, state);

	    if (state.stack.includes('tableCell')) {
	      value = value.replace(/\|/g, '\\$&');
	    }

	    return value
	  }
	}

	/**
	 * @typedef {import('mdast').ListItem} ListItem
	 * @typedef {import('mdast').Paragraph} Paragraph
	 * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
	 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
	 * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
	 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
	 * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
	 */


	/**
	 * Create an extension for `mdast-util-from-markdown` to enable GFM task
	 * list items in markdown.
	 *
	 * @returns {FromMarkdownExtension}
	 *   Extension for `mdast-util-from-markdown` to enable GFM task list items.
	 */
	function gfmTaskListItemFromMarkdown() {
	  return {
	    exit: {
	      taskListCheckValueChecked: exitCheck,
	      taskListCheckValueUnchecked: exitCheck,
	      paragraph: exitParagraphWithTaskListItem
	    }
	  }
	}

	/**
	 * Create an extension for `mdast-util-to-markdown` to enable GFM task list
	 * items in markdown.
	 *
	 * @returns {ToMarkdownExtension}
	 *   Extension for `mdast-util-to-markdown` to enable GFM task list items.
	 */
	function gfmTaskListItemToMarkdown() {
	  return {
	    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],
	    handlers: {listItem: listItemWithTaskListItem}
	  }
	}

	/**
	 * @this {CompileContext}
	 * @type {FromMarkdownHandle}
	 */
	function exitCheck(token) {
	  // We’re always in a paragraph, in a list item.
	  const node = this.stack[this.stack.length - 2];
	  ok$3(node.type === 'listItem');
	  node.checked = token.type === 'taskListCheckValueChecked';
	}

	/**
	 * @this {CompileContext}
	 * @type {FromMarkdownHandle}
	 */
	function exitParagraphWithTaskListItem(token) {
	  const parent = this.stack[this.stack.length - 2];

	  if (
	    parent &&
	    parent.type === 'listItem' &&
	    typeof parent.checked === 'boolean'
	  ) {
	    const node = this.stack[this.stack.length - 1];
	    ok$3(node.type === 'paragraph');
	    const head = node.children[0];

	    if (head && head.type === 'text') {
	      const siblings = parent.children;
	      let index = -1;
	      /** @type {Paragraph | undefined} */
	      let firstParaghraph;

	      while (++index < siblings.length) {
	        const sibling = siblings[index];
	        if (sibling.type === 'paragraph') {
	          firstParaghraph = sibling;
	          break
	        }
	      }

	      if (firstParaghraph === node) {
	        // Must start with a space or a tab.
	        head.value = head.value.slice(1);

	        if (head.value.length === 0) {
	          node.children.shift();
	        } else if (
	          node.position &&
	          head.position &&
	          typeof head.position.start.offset === 'number'
	        ) {
	          head.position.start.column++;
	          head.position.start.offset++;
	          node.position.start = Object.assign({}, head.position.start);
	        }
	      }
	    }
	  }

	  this.exit(token);
	}

	/**
	 * @type {ToMarkdownHandle}
	 * @param {ListItem} node
	 */
	function listItemWithTaskListItem(node, parent, state, info) {
	  const head = node.children[0];
	  const checkable =
	    typeof node.checked === 'boolean' && head && head.type === 'paragraph';
	  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] ';
	  const tracker = state.createTracker(info);

	  if (checkable) {
	    tracker.move(checkbox);
	  }

	  let value = handle$1.listItem(node, parent, state, {
	    ...info,
	    ...tracker.current()
	  });

	  if (checkable) {
	    value = value.replace(/^(?:[*+-]|\d+\.)([\r\n]| {1,3})/, check);
	  }

	  return value

	  /**
	   * @param {string} $0
	   * @returns {string}
	   */
	  function check($0) {
	    return $0 + checkbox
	  }
	}

	/**
	 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
	 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
	 */


	/**
	 * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink
	 * literals, footnotes, strikethrough, tables, tasklists).
	 *
	 * @returns {Array<FromMarkdownExtension>}
	 *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,
	 *   footnotes, strikethrough, tables, tasklists).
	 */
	function gfmFromMarkdown() {
	  return [
	    gfmAutolinkLiteralFromMarkdown(),
	    gfmFootnoteFromMarkdown(),
	    gfmStrikethroughFromMarkdown(),
	    gfmTableFromMarkdown(),
	    gfmTaskListItemFromMarkdown()
	  ]
	}

	/**
	 * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink
	 * literals, footnotes, strikethrough, tables, tasklists).
	 *
	 * @param {Options | null | undefined} [options]
	 *   Configuration.
	 * @returns {ToMarkdownExtension}
	 *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,
	 *   footnotes, strikethrough, tables, tasklists).
	 */
	function gfmToMarkdown(options) {
	  return {
	    extensions: [
	      gfmAutolinkLiteralToMarkdown(),
	      gfmFootnoteToMarkdown(),
	      gfmStrikethroughToMarkdown(),
	      gfmTableToMarkdown(options),
	      gfmTaskListItemToMarkdown()
	    ]
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Code} Code
	 * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord
	 * @typedef {import('micromark-util-types').Event} Event
	 * @typedef {import('micromark-util-types').Extension} Extension
	 * @typedef {import('micromark-util-types').Previous} Previous
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */

	const wwwPrefix = {
	  tokenize: tokenizeWwwPrefix,
	  partial: true
	};
	const domain = {
	  tokenize: tokenizeDomain,
	  partial: true
	};
	const path = {
	  tokenize: tokenizePath,
	  partial: true
	};
	const trail = {
	  tokenize: tokenizeTrail,
	  partial: true
	};
	const emailDomainDotTrail = {
	  tokenize: tokenizeEmailDomainDotTrail,
	  partial: true
	};
	const wwwAutolink = {
	  tokenize: tokenizeWwwAutolink,
	  previous: previousWww
	};
	const protocolAutolink = {
	  tokenize: tokenizeProtocolAutolink,
	  previous: previousProtocol
	};
	const emailAutolink = {
	  tokenize: tokenizeEmailAutolink,
	  previous: previousEmail
	};

	/** @type {ConstructRecord} */
	const text$3 = {};

	/**
	 * Create an extension for `micromark` to support GitHub autolink literal
	 * syntax.
	 *
	 * @returns {Extension}
	 *   Extension for `micromark` that can be passed in `extensions` to enable GFM
	 *   autolink literal syntax.
	 */
	function gfmAutolinkLiteral() {
	  return {
	    text: text$3
	  }
	}

	/** @type {Code} */
	let code$1 = 48;

	// Add alphanumerics.
	while (code$1 < 123) {
	  text$3[code$1] = emailAutolink;
	  code$1++;
	  if (code$1 === 58) code$1 = 65;
	  else if (code$1 === 91) code$1 = 97;
	}
	text$3[43] = emailAutolink;
	text$3[45] = emailAutolink;
	text$3[46] = emailAutolink;
	text$3[95] = emailAutolink;
	text$3[72] = [emailAutolink, protocolAutolink];
	text$3[104] = [emailAutolink, protocolAutolink];
	text$3[87] = [emailAutolink, wwwAutolink];
	text$3[119] = [emailAutolink, wwwAutolink];

	// To do: perform email autolink literals on events, afterwards.
	// That’s where `markdown-rs` and `cmark-gfm` perform it.
	// It should look for `@`, then for atext backwards, and then for a label
	// forwards.
	// To do: `mailto:`, `xmpp:` protocol as prefix.

	/**
	 * Email autolink literal.
	 *
	 * ```markdown
	 * > | a contact@example.org b
	 *       ^^^^^^^^^^^^^^^^^^^
	 * ```
	 *
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeEmailAutolink(effects, ok, nok) {
	  const self = this;
	  /** @type {boolean | undefined} */
	  let dot;
	  /** @type {boolean} */
	  let data;
	  return start

	  /**
	   * Start of email autolink literal.
	   *
	   * ```markdown
	   * > | a contact@example.org b
	   *       ^
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    if (
	      !gfmAtext(code) ||
	      !previousEmail.call(self, self.previous) ||
	      previousUnbalanced(self.events)
	    ) {
	      return nok(code)
	    }
	    effects.enter('literalAutolink');
	    effects.enter('literalAutolinkEmail');
	    return atext(code)
	  }

	  /**
	   * In email atext.
	   *
	   * ```markdown
	   * > | a contact@example.org b
	   *       ^
	   * ```
	   *
	   * @type {State}
	   */
	  function atext(code) {
	    if (gfmAtext(code)) {
	      effects.consume(code);
	      return atext
	    }
	    if (code === 64) {
	      effects.consume(code);
	      return emailDomain
	    }
	    return nok(code)
	  }

	  /**
	   * In email domain.
	   *
	   * The reference code is a bit overly complex as it handles the `@`, of which
	   * there may be just one.
	   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>
	   *
	   * ```markdown
	   * > | a contact@example.org b
	   *               ^
	   * ```
	   *
	   * @type {State}
	   */
	  function emailDomain(code) {
	    // Dot followed by alphanumerical (not `-` or `_`).
	    if (code === 46) {
	      return effects.check(
	        emailDomainDotTrail,
	        emailDomainAfter,
	        emailDomainDot
	      )(code)
	    }

	    // Alphanumerical, `-`, and `_`.
	    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {
	      data = true;
	      effects.consume(code);
	      return emailDomain
	    }

	    // To do: `/` if xmpp.

	    // Note: normally we’d truncate trailing punctuation from the link.
	    // However, email autolink literals cannot contain any of those markers,
	    // except for `.`, but that can only occur if it isn’t trailing.
	    // So we can ignore truncating!
	    return emailDomainAfter(code)
	  }

	  /**
	   * In email domain, on dot that is not a trail.
	   *
	   * ```markdown
	   * > | a contact@example.org b
	   *                      ^
	   * ```
	   *
	   * @type {State}
	   */
	  function emailDomainDot(code) {
	    effects.consume(code);
	    dot = true;
	    return emailDomain
	  }

	  /**
	   * After email domain.
	   *
	   * ```markdown
	   * > | a contact@example.org b
	   *                          ^
	   * ```
	   *
	   * @type {State}
	   */
	  function emailDomainAfter(code) {
	    // Domain must not be empty, must include a dot, and must end in alphabetical.
	    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.
	    if (data && dot && asciiAlpha(self.previous)) {
	      effects.exit('literalAutolinkEmail');
	      effects.exit('literalAutolink');
	      return ok(code)
	    }
	    return nok(code)
	  }
	}

	/**
	 * `www` autolink literal.
	 *
	 * ```markdown
	 * > | a www.example.org b
	 *       ^^^^^^^^^^^^^^^
	 * ```
	 *
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeWwwAutolink(effects, ok, nok) {
	  const self = this;
	  return wwwStart

	  /**
	   * Start of www autolink literal.
	   *
	   * ```markdown
	   * > | www.example.com/a?b#c
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function wwwStart(code) {
	    if (
	      (code !== 87 && code !== 119) ||
	      !previousWww.call(self, self.previous) ||
	      previousUnbalanced(self.events)
	    ) {
	      return nok(code)
	    }
	    effects.enter('literalAutolink');
	    effects.enter('literalAutolinkWww');
	    // Note: we *check*, so we can discard the `www.` we parsed.
	    // If it worked, we consider it as a part of the domain.
	    return effects.check(
	      wwwPrefix,
	      effects.attempt(domain, effects.attempt(path, wwwAfter), nok),
	      nok
	    )(code)
	  }

	  /**
	   * After a www autolink literal.
	   *
	   * ```markdown
	   * > | www.example.com/a?b#c
	   *                          ^
	   * ```
	   *
	   * @type {State}
	   */
	  function wwwAfter(code) {
	    effects.exit('literalAutolinkWww');
	    effects.exit('literalAutolink');
	    return ok(code)
	  }
	}

	/**
	 * Protocol autolink literal.
	 *
	 * ```markdown
	 * > | a https://example.org b
	 *       ^^^^^^^^^^^^^^^^^^^
	 * ```
	 *
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeProtocolAutolink(effects, ok, nok) {
	  const self = this;
	  let buffer = '';
	  let seen = false;
	  return protocolStart

	  /**
	   * Start of protocol autolink literal.
	   *
	   * ```markdown
	   * > | https://example.com/a?b#c
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function protocolStart(code) {
	    if (
	      (code === 72 || code === 104) &&
	      previousProtocol.call(self, self.previous) &&
	      !previousUnbalanced(self.events)
	    ) {
	      effects.enter('literalAutolink');
	      effects.enter('literalAutolinkHttp');
	      buffer += String.fromCodePoint(code);
	      effects.consume(code);
	      return protocolPrefixInside
	    }
	    return nok(code)
	  }

	  /**
	   * In protocol.
	   *
	   * ```markdown
	   * > | https://example.com/a?b#c
	   *     ^^^^^
	   * ```
	   *
	   * @type {State}
	   */
	  function protocolPrefixInside(code) {
	    // `5` is size of `https`
	    if (asciiAlpha(code) && buffer.length < 5) {
	      // @ts-expect-error: definitely number.
	      buffer += String.fromCodePoint(code);
	      effects.consume(code);
	      return protocolPrefixInside
	    }
	    if (code === 58) {
	      const protocol = buffer.toLowerCase();
	      if (protocol === 'http' || protocol === 'https') {
	        effects.consume(code);
	        return protocolSlashesInside
	      }
	    }
	    return nok(code)
	  }

	  /**
	   * In slashes.
	   *
	   * ```markdown
	   * > | https://example.com/a?b#c
	   *           ^^
	   * ```
	   *
	   * @type {State}
	   */
	  function protocolSlashesInside(code) {
	    if (code === 47) {
	      effects.consume(code);
	      if (seen) {
	        return afterProtocol
	      }
	      seen = true;
	      return protocolSlashesInside
	    }
	    return nok(code)
	  }

	  /**
	   * After protocol, before domain.
	   *
	   * ```markdown
	   * > | https://example.com/a?b#c
	   *             ^
	   * ```
	   *
	   * @type {State}
	   */
	  function afterProtocol(code) {
	    // To do: this is different from `markdown-rs`:
	    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182
	    return code === null ||
	      asciiControl(code) ||
	      markdownLineEndingOrSpace(code) ||
	      unicodeWhitespace(code) ||
	      unicodePunctuation(code)
	      ? nok(code)
	      : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code)
	  }

	  /**
	   * After a protocol autolink literal.
	   *
	   * ```markdown
	   * > | https://example.com/a?b#c
	   *                              ^
	   * ```
	   *
	   * @type {State}
	   */
	  function protocolAfter(code) {
	    effects.exit('literalAutolinkHttp');
	    effects.exit('literalAutolink');
	    return ok(code)
	  }
	}

	/**
	 * `www` prefix.
	 *
	 * ```markdown
	 * > | a www.example.org b
	 *       ^^^^
	 * ```
	 *
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeWwwPrefix(effects, ok, nok) {
	  let size = 0;
	  return wwwPrefixInside

	  /**
	   * In www prefix.
	   *
	   * ```markdown
	   * > | www.example.com
	   *     ^^^^
	   * ```
	   *
	   * @type {State}
	   */
	  function wwwPrefixInside(code) {
	    if ((code === 87 || code === 119) && size < 3) {
	      size++;
	      effects.consume(code);
	      return wwwPrefixInside
	    }
	    if (code === 46 && size === 3) {
	      effects.consume(code);
	      return wwwPrefixAfter
	    }
	    return nok(code)
	  }

	  /**
	   * After www prefix.
	   *
	   * ```markdown
	   * > | www.example.com
	   *         ^
	   * ```
	   *
	   * @type {State}
	   */
	  function wwwPrefixAfter(code) {
	    // If there is *anything*, we can link.
	    return code === null ? nok(code) : ok(code)
	  }
	}

	/**
	 * Domain.
	 *
	 * ```markdown
	 * > | a https://example.org b
	 *               ^^^^^^^^^^^
	 * ```
	 *
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeDomain(effects, ok, nok) {
	  /** @type {boolean | undefined} */
	  let underscoreInLastSegment;
	  /** @type {boolean | undefined} */
	  let underscoreInLastLastSegment;
	  /** @type {boolean | undefined} */
	  let seen;
	  return domainInside

	  /**
	   * In domain.
	   *
	   * ```markdown
	   * > | https://example.com/a
	   *             ^^^^^^^^^^^
	   * ```
	   *
	   * @type {State}
	   */
	  function domainInside(code) {
	    // Check whether this marker, which is a trailing punctuation
	    // marker, optionally followed by more trailing markers, and then
	    // followed by an end.
	    if (code === 46 || code === 95) {
	      return effects.check(trail, domainAfter, domainAtPunctuation)(code)
	    }

	    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can
	    // occur, which sounds like ASCII only, but they also support `www.點看.com`,
	    // so that’s Unicode.
	    // Instead of some new production for Unicode alphanumerics, markdown
	    // already has that for Unicode punctuation and whitespace, so use those.
	    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.
	    if (
	      code === null ||
	      markdownLineEndingOrSpace(code) ||
	      unicodeWhitespace(code) ||
	      (code !== 45 && unicodePunctuation(code))
	    ) {
	      return domainAfter(code)
	    }
	    seen = true;
	    effects.consume(code);
	    return domainInside
	  }

	  /**
	   * In domain, at potential trailing punctuation, that was not trailing.
	   *
	   * ```markdown
	   * > | https://example.com
	   *                    ^
	   * ```
	   *
	   * @type {State}
	   */
	  function domainAtPunctuation(code) {
	    // There is an underscore in the last segment of the domain
	    if (code === 95) {
	      underscoreInLastSegment = true;
	    }
	    // Otherwise, it’s a `.`: save the last segment underscore in the
	    // penultimate segment slot.
	    else {
	      underscoreInLastLastSegment = underscoreInLastSegment;
	      underscoreInLastSegment = undefined;
	    }
	    effects.consume(code);
	    return domainInside
	  }

	  /**
	   * After domain.
	   *
	   * ```markdown
	   * > | https://example.com/a
	   *                        ^
	   * ```
	   *
	   * @type {State} */
	  function domainAfter(code) {
	    // Note: that’s GH says a dot is needed, but it’s not true:
	    // <https://github.com/github/cmark-gfm/issues/279>
	    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {
	      return nok(code)
	    }
	    return ok(code)
	  }
	}

	/**
	 * Path.
	 *
	 * ```markdown
	 * > | a https://example.org/stuff b
	 *                          ^^^^^^
	 * ```
	 *
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizePath(effects, ok) {
	  let sizeOpen = 0;
	  let sizeClose = 0;
	  return pathInside

	  /**
	   * In path.
	   *
	   * ```markdown
	   * > | https://example.com/a
	   *                        ^^
	   * ```
	   *
	   * @type {State}
	   */
	  function pathInside(code) {
	    if (code === 40) {
	      sizeOpen++;
	      effects.consume(code);
	      return pathInside
	    }

	    // To do: `markdown-rs` also needs this.
	    // If this is a paren, and there are less closings than openings,
	    // we don’t check for a trail.
	    if (code === 41 && sizeClose < sizeOpen) {
	      return pathAtPunctuation(code)
	    }

	    // Check whether this trailing punctuation marker is optionally
	    // followed by more trailing markers, and then followed
	    // by an end.
	    if (
	      code === 33 ||
	      code === 34 ||
	      code === 38 ||
	      code === 39 ||
	      code === 41 ||
	      code === 42 ||
	      code === 44 ||
	      code === 46 ||
	      code === 58 ||
	      code === 59 ||
	      code === 60 ||
	      code === 63 ||
	      code === 93 ||
	      code === 95 ||
	      code === 126
	    ) {
	      return effects.check(trail, ok, pathAtPunctuation)(code)
	    }
	    if (
	      code === null ||
	      markdownLineEndingOrSpace(code) ||
	      unicodeWhitespace(code)
	    ) {
	      return ok(code)
	    }
	    effects.consume(code);
	    return pathInside
	  }

	  /**
	   * In path, at potential trailing punctuation, that was not trailing.
	   *
	   * ```markdown
	   * > | https://example.com/a"b
	   *                          ^
	   * ```
	   *
	   * @type {State}
	   */
	  function pathAtPunctuation(code) {
	    // Count closing parens.
	    if (code === 41) {
	      sizeClose++;
	    }
	    effects.consume(code);
	    return pathInside
	  }
	}

	/**
	 * Trail.
	 *
	 * This calls `ok` if this *is* the trail, followed by an end, which means
	 * the entire trail is not part of the link.
	 * It calls `nok` if this *is* part of the link.
	 *
	 * ```markdown
	 * > | https://example.com").
	 *                        ^^^
	 * ```
	 *
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeTrail(effects, ok, nok) {
	  return trail

	  /**
	   * In trail of domain or path.
	   *
	   * ```markdown
	   * > | https://example.com").
	   *                        ^
	   * ```
	   *
	   * @type {State}
	   */
	  function trail(code) {
	    // Regular trailing punctuation.
	    if (
	      code === 33 ||
	      code === 34 ||
	      code === 39 ||
	      code === 41 ||
	      code === 42 ||
	      code === 44 ||
	      code === 46 ||
	      code === 58 ||
	      code === 59 ||
	      code === 63 ||
	      code === 95 ||
	      code === 126
	    ) {
	      effects.consume(code);
	      return trail
	    }

	    // `&` followed by one or more alphabeticals and then a `;`, is
	    // as a whole considered as trailing punctuation.
	    // In all other cases, it is considered as continuation of the URL.
	    if (code === 38) {
	      effects.consume(code);
	      return trailCharRefStart
	    }

	    // Needed because we allow literals after `[`, as we fix:
	    // <https://github.com/github/cmark-gfm/issues/278>.
	    // Check that it is not followed by `(` or `[`.
	    if (code === 93) {
	      effects.consume(code);
	      return trailBracketAfter
	    }
	    if (
	      // `<` is an end.
	      code === 60 ||
	      // So is whitespace.
	      code === null ||
	      markdownLineEndingOrSpace(code) ||
	      unicodeWhitespace(code)
	    ) {
	      return ok(code)
	    }
	    return nok(code)
	  }

	  /**
	   * In trail, after `]`.
	   *
	   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.
	   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.
	   *
	   * ```markdown
	   * > | https://example.com](
	   *                         ^
	   * ```
	   *
	   * @type {State}
	   */
	  function trailBracketAfter(code) {
	    // Whitespace or something that could start a resource or reference is the end.
	    // Switch back to trail otherwise.
	    if (
	      code === null ||
	      code === 40 ||
	      code === 91 ||
	      markdownLineEndingOrSpace(code) ||
	      unicodeWhitespace(code)
	    ) {
	      return ok(code)
	    }
	    return trail(code)
	  }

	  /**
	   * In character-reference like trail, after `&`.
	   *
	   * ```markdown
	   * > | https://example.com&amp;).
	   *                         ^
	   * ```
	   *
	   * @type {State}
	   */
	  function trailCharRefStart(code) {
	    // When non-alpha, it’s not a trail.
	    return asciiAlpha(code) ? trailCharRefInside(code) : nok(code)
	  }

	  /**
	   * In character-reference like trail.
	   *
	   * ```markdown
	   * > | https://example.com&amp;).
	   *                         ^
	   * ```
	   *
	   * @type {State}
	   */
	  function trailCharRefInside(code) {
	    // Switch back to trail if this is well-formed.
	    if (code === 59) {
	      effects.consume(code);
	      return trail
	    }
	    if (asciiAlpha(code)) {
	      effects.consume(code);
	      return trailCharRefInside
	    }

	    // It’s not a trail.
	    return nok(code)
	  }
	}

	/**
	 * Dot in email domain trail.
	 *
	 * This calls `ok` if this *is* the trail, followed by an end, which means
	 * the trail is not part of the link.
	 * It calls `nok` if this *is* part of the link.
	 *
	 * ```markdown
	 * > | contact@example.org.
	 *                        ^
	 * ```
	 *
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeEmailDomainDotTrail(effects, ok, nok) {
	  return start

	  /**
	   * Dot.
	   *
	   * ```markdown
	   * > | contact@example.org.
	   *                    ^   ^
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    // Must be dot.
	    effects.consume(code);
	    return after
	  }

	  /**
	   * After dot.
	   *
	   * ```markdown
	   * > | contact@example.org.
	   *                     ^   ^
	   * ```
	   *
	   * @type {State}
	   */
	  function after(code) {
	    // Not a trail if alphanumeric.
	    return asciiAlphanumeric(code) ? nok(code) : ok(code)
	  }
	}

	/**
	 * See:
	 * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.
	 *
	 * @type {Previous}
	 */
	function previousWww(code) {
	  return (
	    code === null ||
	    code === 40 ||
	    code === 42 ||
	    code === 95 ||
	    code === 91 ||
	    code === 93 ||
	    code === 126 ||
	    markdownLineEndingOrSpace(code)
	  )
	}

	/**
	 * See:
	 * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.
	 *
	 * @type {Previous}
	 */
	function previousProtocol(code) {
	  return !asciiAlpha(code)
	}

	/**
	 * @this {TokenizeContext}
	 * @type {Previous}
	 */
	function previousEmail(code) {
	  // Do not allow a slash “inside” atext.
	  // The reference code is a bit weird, but that’s what it results in.
	  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.
	  // Other than slash, every preceding character is allowed.
	  return !(code === 47 || gfmAtext(code))
	}

	/**
	 * @param {Code} code
	 * @returns {boolean}
	 */
	function gfmAtext(code) {
	  return (
	    code === 43 ||
	    code === 45 ||
	    code === 46 ||
	    code === 95 ||
	    asciiAlphanumeric(code)
	  )
	}

	/**
	 * @param {Array<Event>} events
	 * @returns {boolean}
	 */
	function previousUnbalanced(events) {
	  let index = events.length;
	  let result = false;
	  while (index--) {
	    const token = events[index][1];
	    if (
	      (token.type === 'labelLink' || token.type === 'labelImage') &&
	      !token._balanced
	    ) {
	      result = true;
	      break
	    }

	    // If we’ve seen this token, and it was marked as not having any unbalanced
	    // bracket before it, we can exit.
	    if (token._gfmAutolinkLiteralWalkedInto) {
	      result = false;
	      break
	    }
	  }
	  if (events.length > 0 && !result) {
	    // Mark the last token as “walked into” w/o finding
	    // anything.
	    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;
	  }
	  return result
	}

	/**
	 * @typedef {import('micromark-util-types').Event} Event
	 * @typedef {import('micromark-util-types').Exiter} Exiter
	 * @typedef {import('micromark-util-types').Extension} Extension
	 * @typedef {import('micromark-util-types').Resolver} Resolver
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').Token} Token
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */

	const indent = {
	  tokenize: tokenizeIndent,
	  partial: true
	};

	// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only
	// affects label start (image).
	// That will let us drop `tokenizePotentialGfmFootnote*`.
	// It currently has a `_hiddenFootnoteSupport`, which affects that and more.
	// That can be removed when `micromark-extension-footnote` is archived.

	/**
	 * Create an extension for `micromark` to enable GFM footnote syntax.
	 *
	 * @returns {Extension}
	 *   Extension for `micromark` that can be passed in `extensions` to
	 *   enable GFM footnote syntax.
	 */
	function gfmFootnote() {
	  /** @type {Extension} */
	  return {
	    document: {
	      [91]: {
	        tokenize: tokenizeDefinitionStart,
	        continuation: {
	          tokenize: tokenizeDefinitionContinuation
	        },
	        exit: gfmFootnoteDefinitionEnd
	      }
	    },
	    text: {
	      [91]: {
	        tokenize: tokenizeGfmFootnoteCall
	      },
	      [93]: {
	        add: 'after',
	        tokenize: tokenizePotentialGfmFootnoteCall,
	        resolveTo: resolveToPotentialGfmFootnoteCall
	      }
	    }
	  }
	}

	// To do: remove after micromark update.
	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizePotentialGfmFootnoteCall(effects, ok, nok) {
	  const self = this;
	  let index = self.events.length;
	  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);
	  /** @type {Token} */
	  let labelStart;

	  // Find an opening.
	  while (index--) {
	    const token = self.events[index][1];
	    if (token.type === 'labelImage') {
	      labelStart = token;
	      break
	    }

	    // Exit if we’ve walked far enough.
	    if (
	      token.type === 'gfmFootnoteCall' ||
	      token.type === 'labelLink' ||
	      token.type === 'label' ||
	      token.type === 'image' ||
	      token.type === 'link'
	    ) {
	      break
	    }
	  }
	  return start

	  /**
	   * @type {State}
	   */
	  function start(code) {
	    if (!labelStart || !labelStart._balanced) {
	      return nok(code)
	    }
	    const id = normalizeIdentifier(
	      self.sliceSerialize({
	        start: labelStart.end,
	        end: self.now()
	      })
	    );
	    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {
	      return nok(code)
	    }
	    effects.enter('gfmFootnoteCallLabelMarker');
	    effects.consume(code);
	    effects.exit('gfmFootnoteCallLabelMarker');
	    return ok(code)
	  }
	}

	// To do: remove after micromark update.
	/** @type {Resolver} */
	function resolveToPotentialGfmFootnoteCall(events, context) {
	  let index = events.length;

	  // Find an opening.
	  while (index--) {
	    if (
	      events[index][1].type === 'labelImage' &&
	      events[index][0] === 'enter'
	    ) {
	      events[index][1];
	      break
	    }
	  }
	  // Change the `labelImageMarker` to a `data`.
	  events[index + 1][1].type = 'data';
	  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';

	  // The whole (without `!`):
	  /** @type {Token} */
	  const call = {
	    type: 'gfmFootnoteCall',
	    start: Object.assign({}, events[index + 3][1].start),
	    end: Object.assign({}, events[events.length - 1][1].end)
	  };
	  // The `^` marker
	  /** @type {Token} */
	  const marker = {
	    type: 'gfmFootnoteCallMarker',
	    start: Object.assign({}, events[index + 3][1].end),
	    end: Object.assign({}, events[index + 3][1].end)
	  };
	  // Increment the end 1 character.
	  marker.end.column++;
	  marker.end.offset++;
	  marker.end._bufferIndex++;
	  /** @type {Token} */
	  const string = {
	    type: 'gfmFootnoteCallString',
	    start: Object.assign({}, marker.end),
	    end: Object.assign({}, events[events.length - 1][1].start)
	  };
	  /** @type {Token} */
	  const chunk = {
	    type: 'chunkString',
	    contentType: 'string',
	    start: Object.assign({}, string.start),
	    end: Object.assign({}, string.end)
	  };

	  /** @type {Array<Event>} */
	  const replacement = [
	    // Take the `labelImageMarker` (now `data`, the `!`)
	    events[index + 1],
	    events[index + 2],
	    ['enter', call, context],
	    // The `[`
	    events[index + 3],
	    events[index + 4],
	    // The `^`.
	    ['enter', marker, context],
	    ['exit', marker, context],
	    // Everything in between.
	    ['enter', string, context],
	    ['enter', chunk, context],
	    ['exit', chunk, context],
	    ['exit', string, context],
	    // The ending (`]`, properly parsed and labelled).
	    events[events.length - 2],
	    events[events.length - 1],
	    ['exit', call, context]
	  ];
	  events.splice(index, events.length - index + 1, ...replacement);
	  return events
	}

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeGfmFootnoteCall(effects, ok, nok) {
	  const self = this;
	  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);
	  let size = 0;
	  /** @type {boolean} */
	  let data;

	  // Note: the implementation of `markdown-rs` is different, because it houses
	  // core *and* extensions in one project.
	  // Therefore, it can include footnote logic inside `label-end`.
	  // We can’t do that, but luckily, we can parse footnotes in a simpler way than
	  // needed for labels.
	  return start

	  /**
	   * Start of footnote label.
	   *
	   * ```markdown
	   * > | a [^b] c
	   *       ^
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    effects.enter('gfmFootnoteCall');
	    effects.enter('gfmFootnoteCallLabelMarker');
	    effects.consume(code);
	    effects.exit('gfmFootnoteCallLabelMarker');
	    return callStart
	  }

	  /**
	   * After `[`, at `^`.
	   *
	   * ```markdown
	   * > | a [^b] c
	   *        ^
	   * ```
	   *
	   * @type {State}
	   */
	  function callStart(code) {
	    if (code !== 94) return nok(code)
	    effects.enter('gfmFootnoteCallMarker');
	    effects.consume(code);
	    effects.exit('gfmFootnoteCallMarker');
	    effects.enter('gfmFootnoteCallString');
	    effects.enter('chunkString').contentType = 'string';
	    return callData
	  }

	  /**
	   * In label.
	   *
	   * ```markdown
	   * > | a [^b] c
	   *         ^
	   * ```
	   *
	   * @type {State}
	   */
	  function callData(code) {
	    if (
	      // Too long.
	      size > 999 ||
	      // Closing brace with nothing.
	      (code === 93 && !data) ||
	      // Space or tab is not supported by GFM for some reason.
	      // `\n` and `[` not being supported makes sense.
	      code === null ||
	      code === 91 ||
	      markdownLineEndingOrSpace(code)
	    ) {
	      return nok(code)
	    }
	    if (code === 93) {
	      effects.exit('chunkString');
	      const token = effects.exit('gfmFootnoteCallString');
	      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {
	        return nok(code)
	      }
	      effects.enter('gfmFootnoteCallLabelMarker');
	      effects.consume(code);
	      effects.exit('gfmFootnoteCallLabelMarker');
	      effects.exit('gfmFootnoteCall');
	      return ok
	    }
	    if (!markdownLineEndingOrSpace(code)) {
	      data = true;
	    }
	    size++;
	    effects.consume(code);
	    return code === 92 ? callEscape : callData
	  }

	  /**
	   * On character after escape.
	   *
	   * ```markdown
	   * > | a [^b\c] d
	   *           ^
	   * ```
	   *
	   * @type {State}
	   */
	  function callEscape(code) {
	    if (code === 91 || code === 92 || code === 93) {
	      effects.consume(code);
	      size++;
	      return callData
	    }
	    return callData(code)
	  }
	}

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeDefinitionStart(effects, ok, nok) {
	  const self = this;
	  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);
	  /** @type {string} */
	  let identifier;
	  let size = 0;
	  /** @type {boolean | undefined} */
	  let data;
	  return start

	  /**
	   * Start of GFM footnote definition.
	   *
	   * ```markdown
	   * > | [^a]: b
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function start(code) {
	    effects.enter('gfmFootnoteDefinition')._container = true;
	    effects.enter('gfmFootnoteDefinitionLabel');
	    effects.enter('gfmFootnoteDefinitionLabelMarker');
	    effects.consume(code);
	    effects.exit('gfmFootnoteDefinitionLabelMarker');
	    return labelAtMarker
	  }

	  /**
	   * In label, at caret.
	   *
	   * ```markdown
	   * > | [^a]: b
	   *      ^
	   * ```
	   *
	   * @type {State}
	   */
	  function labelAtMarker(code) {
	    if (code === 94) {
	      effects.enter('gfmFootnoteDefinitionMarker');
	      effects.consume(code);
	      effects.exit('gfmFootnoteDefinitionMarker');
	      effects.enter('gfmFootnoteDefinitionLabelString');
	      effects.enter('chunkString').contentType = 'string';
	      return labelInside
	    }
	    return nok(code)
	  }

	  /**
	   * In label.
	   *
	   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote
	   * > definition labels.
	   *
	   * ```markdown
	   * > | [^a]: b
	   *       ^
	   * ```
	   *
	   * @type {State}
	   */
	  function labelInside(code) {
	    if (
	      // Too long.
	      size > 999 ||
	      // Closing brace with nothing.
	      (code === 93 && !data) ||
	      // Space or tab is not supported by GFM for some reason.
	      // `\n` and `[` not being supported makes sense.
	      code === null ||
	      code === 91 ||
	      markdownLineEndingOrSpace(code)
	    ) {
	      return nok(code)
	    }
	    if (code === 93) {
	      effects.exit('chunkString');
	      const token = effects.exit('gfmFootnoteDefinitionLabelString');
	      identifier = normalizeIdentifier(self.sliceSerialize(token));
	      effects.enter('gfmFootnoteDefinitionLabelMarker');
	      effects.consume(code);
	      effects.exit('gfmFootnoteDefinitionLabelMarker');
	      effects.exit('gfmFootnoteDefinitionLabel');
	      return labelAfter
	    }
	    if (!markdownLineEndingOrSpace(code)) {
	      data = true;
	    }
	    size++;
	    effects.consume(code);
	    return code === 92 ? labelEscape : labelInside
	  }

	  /**
	   * After `\`, at a special character.
	   *
	   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:
	   * > <https://github.com/github/cmark-gfm/issues/240>
	   *
	   * ```markdown
	   * > | [^a\*b]: c
	   *         ^
	   * ```
	   *
	   * @type {State}
	   */
	  function labelEscape(code) {
	    if (code === 91 || code === 92 || code === 93) {
	      effects.consume(code);
	      size++;
	      return labelInside
	    }
	    return labelInside(code)
	  }

	  /**
	   * After definition label.
	   *
	   * ```markdown
	   * > | [^a]: b
	   *         ^
	   * ```
	   *
	   * @type {State}
	   */
	  function labelAfter(code) {
	    if (code === 58) {
	      effects.enter('definitionMarker');
	      effects.consume(code);
	      effects.exit('definitionMarker');
	      if (!defined.includes(identifier)) {
	        defined.push(identifier);
	      }

	      // Any whitespace after the marker is eaten, forming indented code
	      // is not possible.
	      // No space is also fine, just like a block quote marker.
	      return factorySpace(
	        effects,
	        whitespaceAfter,
	        'gfmFootnoteDefinitionWhitespace'
	      )
	    }
	    return nok(code)
	  }

	  /**
	   * After definition prefix.
	   *
	   * ```markdown
	   * > | [^a]: b
	   *           ^
	   * ```
	   *
	   * @type {State}
	   */
	  function whitespaceAfter(code) {
	    // `markdown-rs` has a wrapping token for the prefix that is closed here.
	    return ok(code)
	  }
	}

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeDefinitionContinuation(effects, ok, nok) {
	  /// Start of footnote definition continuation.
	  ///
	  /// ```markdown
	  ///   | [^a]: b
	  /// > |     c
	  ///     ^
	  /// ```
	  //
	  // Either a blank line, which is okay, or an indented thing.
	  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))
	}

	/** @type {Exiter} */
	function gfmFootnoteDefinitionEnd(effects) {
	  effects.exit('gfmFootnoteDefinition');
	}

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeIndent(effects, ok, nok) {
	  const self = this;
	  return factorySpace(
	    effects,
	    afterPrefix,
	    'gfmFootnoteDefinitionIndent',
	    4 + 1
	  )

	  /**
	   * @type {State}
	   */
	  function afterPrefix(code) {
	    const tail = self.events[self.events.length - 1];
	    return tail &&
	      tail[1].type === 'gfmFootnoteDefinitionIndent' &&
	      tail[2].sliceSerialize(tail[1], true).length === 4
	      ? ok(code)
	      : nok(code)
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Event} Event
	 * @typedef {import('micromark-util-types').Extension} Extension
	 * @typedef {import('micromark-util-types').Resolver} Resolver
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').Token} Token
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 *
	 * @typedef Options
	 *   Configuration (optional).
	 * @property {boolean | null | undefined} [singleTilde=true]
	 *   Whether to support strikethrough with a single tilde (default: `true`).
	 *
	 *   Single tildes work on github.com, but are technically prohibited by the
	 *   GFM spec.
	 */

	/**
	 * Create an extension for `micromark` to enable GFM strikethrough syntax.
	 *
	 * @param {Options | null | undefined} [options={}]
	 *   Configuration.
	 * @returns {Extension}
	 *   Extension for `micromark` that can be passed in `extensions`, to
	 *   enable GFM strikethrough syntax.
	 */
	function gfmStrikethrough(options) {
	  const options_ = options || {};
	  let single = options_.singleTilde;
	  const tokenizer = {
	    tokenize: tokenizeStrikethrough,
	    resolveAll: resolveAllStrikethrough
	  };
	  if (single === null || single === undefined) {
	    single = true;
	  }
	  return {
	    text: {
	      [126]: tokenizer
	    },
	    insideSpan: {
	      null: [tokenizer]
	    },
	    attentionMarkers: {
	      null: [126]
	    }
	  }

	  /**
	   * Take events and resolve strikethrough.
	   *
	   * @type {Resolver}
	   */
	  function resolveAllStrikethrough(events, context) {
	    let index = -1;

	    // Walk through all events.
	    while (++index < events.length) {
	      // Find a token that can close.
	      if (
	        events[index][0] === 'enter' &&
	        events[index][1].type === 'strikethroughSequenceTemporary' &&
	        events[index][1]._close
	      ) {
	        let open = index;

	        // Now walk back to find an opener.
	        while (open--) {
	          // Find a token that can open the closer.
	          if (
	            events[open][0] === 'exit' &&
	            events[open][1].type === 'strikethroughSequenceTemporary' &&
	            events[open][1]._open &&
	            // If the sizes are the same:
	            events[index][1].end.offset - events[index][1].start.offset ===
	              events[open][1].end.offset - events[open][1].start.offset
	          ) {
	            events[index][1].type = 'strikethroughSequence';
	            events[open][1].type = 'strikethroughSequence';

	            /** @type {Token} */
	            const strikethrough = {
	              type: 'strikethrough',
	              start: Object.assign({}, events[open][1].start),
	              end: Object.assign({}, events[index][1].end)
	            };

	            /** @type {Token} */
	            const text = {
	              type: 'strikethroughText',
	              start: Object.assign({}, events[open][1].end),
	              end: Object.assign({}, events[index][1].start)
	            };

	            // Opening.
	            /** @type {Array<Event>} */
	            const nextEvents = [
	              ['enter', strikethrough, context],
	              ['enter', events[open][1], context],
	              ['exit', events[open][1], context],
	              ['enter', text, context]
	            ];
	            const insideSpan = context.parser.constructs.insideSpan.null;
	            if (insideSpan) {
	              // Between.
	              splice(
	                nextEvents,
	                nextEvents.length,
	                0,
	                resolveAll(insideSpan, events.slice(open + 1, index), context)
	              );
	            }

	            // Closing.
	            splice(nextEvents, nextEvents.length, 0, [
	              ['exit', text, context],
	              ['enter', events[index][1], context],
	              ['exit', events[index][1], context],
	              ['exit', strikethrough, context]
	            ]);
	            splice(events, open - 1, index - open + 3, nextEvents);
	            index = open + nextEvents.length - 2;
	            break
	          }
	        }
	      }
	    }
	    index = -1;
	    while (++index < events.length) {
	      if (events[index][1].type === 'strikethroughSequenceTemporary') {
	        events[index][1].type = 'data';
	      }
	    }
	    return events
	  }

	  /**
	   * @this {TokenizeContext}
	   * @type {Tokenizer}
	   */
	  function tokenizeStrikethrough(effects, ok, nok) {
	    const previous = this.previous;
	    const events = this.events;
	    let size = 0;
	    return start

	    /** @type {State} */
	    function start(code) {
	      if (
	        previous === 126 &&
	        events[events.length - 1][1].type !== 'characterEscape'
	      ) {
	        return nok(code)
	      }
	      effects.enter('strikethroughSequenceTemporary');
	      return more(code)
	    }

	    /** @type {State} */
	    function more(code) {
	      const before = classifyCharacter(previous);
	      if (code === 126) {
	        // If this is the third marker, exit.
	        if (size > 1) return nok(code)
	        effects.consume(code);
	        size++;
	        return more
	      }
	      if (size < 2 && !single) return nok(code)
	      const token = effects.exit('strikethroughSequenceTemporary');
	      const after = classifyCharacter(code);
	      token._open = !after || (after === 2 && Boolean(before));
	      token._close = !before || (before === 2 && Boolean(after));
	      return ok(code)
	    }
	  }
	}

	/**
	 * @typedef {import('micromark-util-types').Event} Event
	 */

	// Port of `edit_map.rs` from `markdown-rs`.
	// This should move to `markdown-js` later.

	// Deal with several changes in events, batching them together.
	//
	// Preferably, changes should be kept to a minimum.
	// Sometimes, it’s needed to change the list of events, because parsing can be
	// messy, and it helps to expose a cleaner interface of events to the compiler
	// and other users.
	// It can also help to merge many adjacent similar events.
	// And, in other cases, it’s needed to parse subcontent: pass some events
	// through another tokenizer and inject the result.

	/**
	 * @typedef {[number, number, Array<Event>]} Change
	 * @typedef {[number, number, number]} Jump
	 */

	/**
	 * Tracks a bunch of edits.
	 */
	class EditMap {
	  /**
	   * Create a new edit map.
	   */
	  constructor() {
	    /**
	     * Record of changes.
	     *
	     * @type {Array<Change>}
	     */
	    this.map = [];
	  }

	  /**
	   * Create an edit: a remove and/or add at a certain place.
	   *
	   * @param {number} index
	   * @param {number} remove
	   * @param {Array<Event>} add
	   * @returns {undefined}
	   */
	  add(index, remove, add) {
	    addImpl(this, index, remove, add);
	  }

	  // To do: add this when moving to `micromark`.
	  // /**
	  //  * Create an edit: but insert `add` before existing additions.
	  //  *
	  //  * @param {number} index
	  //  * @param {number} remove
	  //  * @param {Array<Event>} add
	  //  * @returns {undefined}
	  //  */
	  // addBefore(index, remove, add) {
	  //   addImpl(this, index, remove, add, true)
	  // }

	  /**
	   * Done, change the events.
	   *
	   * @param {Array<Event>} events
	   * @returns {undefined}
	   */
	  consume(events) {
	    this.map.sort(function (a, b) {
	      return a[0] - b[0]
	    });

	    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */
	    if (this.map.length === 0) {
	      return
	    }

	    // To do: if links are added in events, like they are in `markdown-rs`,
	    // this is needed.
	    // // Calculate jumps: where items in the current list move to.
	    // /** @type {Array<Jump>} */
	    // const jumps = []
	    // let index = 0
	    // let addAcc = 0
	    // let removeAcc = 0
	    // while (index < this.map.length) {
	    //   const [at, remove, add] = this.map[index]
	    //   removeAcc += remove
	    //   addAcc += add.length
	    //   jumps.push([at, removeAcc, addAcc])
	    //   index += 1
	    // }
	    //
	    // . shiftLinks(events, jumps)

	    let index = this.map.length;
	    /** @type {Array<Array<Event>>} */
	    const vecs = [];
	    while (index > 0) {
	      index -= 1;
	      vecs.push(
	        events.slice(this.map[index][0] + this.map[index][1]),
	        this.map[index][2]
	      );

	      // Truncate rest.
	      events.length = this.map[index][0];
	    }
	    vecs.push([...events]);
	    events.length = 0;
	    let slice = vecs.pop();
	    while (slice) {
	      events.push(...slice);
	      slice = vecs.pop();
	    }

	    // Truncate everything.
	    this.map.length = 0;
	  }
	}

	/**
	 * Create an edit.
	 *
	 * @param {EditMap} editMap
	 * @param {number} at
	 * @param {number} remove
	 * @param {Array<Event>} add
	 * @returns {undefined}
	 */
	function addImpl(editMap, at, remove, add) {
	  let index = 0;

	  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */
	  if (remove === 0 && add.length === 0) {
	    return
	  }
	  while (index < editMap.map.length) {
	    if (editMap.map[index][0] === at) {
	      editMap.map[index][1] += remove;

	      // To do: before not used by tables, use when moving to micromark.
	      // if (before) {
	      //   add.push(...editMap.map[index][2])
	      //   editMap.map[index][2] = add
	      // } else {
	      editMap.map[index][2].push(...add);
	      // }

	      return
	    }
	    index += 1;
	  }
	  editMap.map.push([at, remove, add]);
	}

	// /**
	//  * Shift `previous` and `next` links according to `jumps`.
	//  *
	//  * This fixes links in case there are events removed or added between them.
	//  *
	//  * @param {Array<Event>} events
	//  * @param {Array<Jump>} jumps
	//  */
	// function shiftLinks(events, jumps) {
	//   let jumpIndex = 0
	//   let index = 0
	//   let add = 0
	//   let rm = 0

	//   while (index < events.length) {
	//     const rmCurr = rm

	//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {
	//       add = jumps[jumpIndex][2]
	//       rm = jumps[jumpIndex][1]
	//       jumpIndex += 1
	//     }

	//     // Ignore items that will be removed.
	//     if (rm > rmCurr) {
	//       index += rm - rmCurr
	//     } else {
	//       // ?
	//       // if let Some(link) = &events[index].link {
	//       //     if let Some(next) = link.next {
	//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);
	//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {
	//       //             add = jumps[jumpIndex].2;
	//       //             rm = jumps[jumpIndex].1;
	//       //             jumpIndex += 1;
	//       //         }
	//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);
	//       //         index = next;
	//       //         continue;
	//       //     }
	//       // }
	//       index += 1
	//     }
	//   }
	// }

	/**
	 * @typedef {import('micromark-util-types').Event} Event
	 */

	/**
	 * @typedef {'center' | 'left' | 'none' | 'right'} Align
	 */

	/**
	 * Figure out the alignment of a GFM table.
	 *
	 * @param {Readonly<Array<Event>>} events
	 *   List of events.
	 * @param {number} index
	 *   Table enter event.
	 * @returns {Array<Align>}
	 *   List of aligns.
	 */
	function gfmTableAlign(events, index) {
	  let inDelimiterRow = false;
	  /** @type {Array<Align>} */
	  const align = [];
	  while (index < events.length) {
	    const event = events[index];
	    if (inDelimiterRow) {
	      if (event[0] === 'enter') {
	        // Start of alignment value: set a new column.
	        // To do: `markdown-rs` uses `tableDelimiterCellValue`.
	        if (event[1].type === 'tableContent') {
	          align.push(
	            events[index + 1][1].type === 'tableDelimiterMarker'
	              ? 'left'
	              : 'none'
	          );
	        }
	      }
	      // Exits:
	      // End of alignment value: change the column.
	      // To do: `markdown-rs` uses `tableDelimiterCellValue`.
	      else if (event[1].type === 'tableContent') {
	        if (events[index - 1][1].type === 'tableDelimiterMarker') {
	          const alignIndex = align.length - 1;
	          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';
	        }
	      }
	      // Done!
	      else if (event[1].type === 'tableDelimiterRow') {
	        break
	      }
	    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {
	      inDelimiterRow = true;
	    }
	    index += 1;
	  }
	  return align
	}

	/**
	 * @typedef {import('micromark-util-types').Event} Event
	 * @typedef {import('micromark-util-types').Extension} Extension
	 * @typedef {import('micromark-util-types').Point} Point
	 * @typedef {import('micromark-util-types').Resolver} Resolver
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').Token} Token
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */


	/**
	 * Create an HTML extension for `micromark` to support GitHub tables syntax.
	 *
	 * @returns {Extension}
	 *   Extension for `micromark` that can be passed in `extensions` to enable GFM
	 *   table syntax.
	 */
	function gfmTable() {
	  return {
	    flow: {
	      null: {
	        tokenize: tokenizeTable,
	        resolveAll: resolveTable
	      }
	    }
	  }
	}

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeTable(effects, ok, nok) {
	  const self = this;
	  let size = 0;
	  let sizeB = 0;
	  /** @type {boolean | undefined} */
	  let seen;
	  return start

	  /**
	   * Start of a GFM table.
	   *
	   * If there is a valid table row or table head before, then we try to parse
	   * another row.
	   * Otherwise, we try to parse a head.
	   *
	   * ```markdown
	   * > | | a |
	   *     ^
	   *   | | - |
	   * > | | b |
	   *     ^
	   * ```
	   * @type {State}
	   */
	  function start(code) {
	    let index = self.events.length - 1;
	    while (index > -1) {
	      const type = self.events[index][1].type;
	      if (
	        type === 'lineEnding' ||
	        // Note: markdown-rs uses `whitespace` instead of `linePrefix`
	        type === 'linePrefix'
	      )
	        index--;
	      else break
	    }
	    const tail = index > -1 ? self.events[index][1].type : null;
	    const next =
	      tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;

	    // Don’t allow lazy body rows.
	    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {
	      return nok(code)
	    }
	    return next(code)
	  }

	  /**
	   * Before table head row.
	   *
	   * ```markdown
	   * > | | a |
	   *     ^
	   *   | | - |
	   *   | | b |
	   * ```
	   *
	   * @type {State}
	   */
	  function headRowBefore(code) {
	    effects.enter('tableHead');
	    effects.enter('tableRow');
	    return headRowStart(code)
	  }

	  /**
	   * Before table head row, after whitespace.
	   *
	   * ```markdown
	   * > | | a |
	   *     ^
	   *   | | - |
	   *   | | b |
	   * ```
	   *
	   * @type {State}
	   */
	  function headRowStart(code) {
	    if (code === 124) {
	      return headRowBreak(code)
	    }

	    // To do: micromark-js should let us parse our own whitespace in extensions,
	    // like `markdown-rs`:
	    //
	    // ```js
	    // // 4+ spaces.
	    // if (markdownSpace(code)) {
	    //   return nok(code)
	    // }
	    // ```

	    seen = true;
	    // Count the first character, that isn’t a pipe, double.
	    sizeB += 1;
	    return headRowBreak(code)
	  }

	  /**
	   * At break in table head row.
	   *
	   * ```markdown
	   * > | | a |
	   *     ^
	   *       ^
	   *         ^
	   *   | | - |
	   *   | | b |
	   * ```
	   *
	   * @type {State}
	   */
	  function headRowBreak(code) {
	    if (code === null) {
	      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.
	      return nok(code)
	    }
	    if (markdownLineEnding(code)) {
	      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.
	      if (sizeB > 1) {
	        sizeB = 0;
	        // To do: check if this works.
	        // Feel free to interrupt:
	        self.interrupt = true;
	        effects.exit('tableRow');
	        effects.enter('lineEnding');
	        effects.consume(code);
	        effects.exit('lineEnding');
	        return headDelimiterStart
	      }

	      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.
	      return nok(code)
	    }
	    if (markdownSpace(code)) {
	      // To do: check if this is fine.
	      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)
	      // State::Retry(space_or_tab(tokenizer))
	      return factorySpace(effects, headRowBreak, 'whitespace')(code)
	    }
	    sizeB += 1;
	    if (seen) {
	      seen = false;
	      // Header cell count.
	      size += 1;
	    }
	    if (code === 124) {
	      effects.enter('tableCellDivider');
	      effects.consume(code);
	      effects.exit('tableCellDivider');
	      // Whether a delimiter was seen.
	      seen = true;
	      return headRowBreak
	    }

	    // Anything else is cell data.
	    effects.enter('data');
	    return headRowData(code)
	  }

	  /**
	   * In table head row data.
	   *
	   * ```markdown
	   * > | | a |
	   *       ^
	   *   | | - |
	   *   | | b |
	   * ```
	   *
	   * @type {State}
	   */
	  function headRowData(code) {
	    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {
	      effects.exit('data');
	      return headRowBreak(code)
	    }
	    effects.consume(code);
	    return code === 92 ? headRowEscape : headRowData
	  }

	  /**
	   * In table head row escape.
	   *
	   * ```markdown
	   * > | | a\-b |
	   *         ^
	   *   | | ---- |
	   *   | | c    |
	   * ```
	   *
	   * @type {State}
	   */
	  function headRowEscape(code) {
	    if (code === 92 || code === 124) {
	      effects.consume(code);
	      return headRowData
	    }
	    return headRowData(code)
	  }

	  /**
	   * Before delimiter row.
	   *
	   * ```markdown
	   *   | | a |
	   * > | | - |
	   *     ^
	   *   | | b |
	   * ```
	   *
	   * @type {State}
	   */
	  function headDelimiterStart(code) {
	    // Reset `interrupt`.
	    self.interrupt = false;

	    // Note: in `markdown-rs`, we need to handle piercing here too.
	    if (self.parser.lazy[self.now().line]) {
	      return nok(code)
	    }
	    effects.enter('tableDelimiterRow');
	    // Track if we’ve seen a `:` or `|`.
	    seen = false;
	    if (markdownSpace(code)) {
	      return factorySpace(
	        effects,
	        headDelimiterBefore,
	        'linePrefix',
	        self.parser.constructs.disable.null.includes('codeIndented')
	          ? undefined
	          : 4
	      )(code)
	    }
	    return headDelimiterBefore(code)
	  }

	  /**
	   * Before delimiter row, after optional whitespace.
	   *
	   * Reused when a `|` is found later, to parse another cell.
	   *
	   * ```markdown
	   *   | | a |
	   * > | | - |
	   *     ^
	   *   | | b |
	   * ```
	   *
	   * @type {State}
	   */
	  function headDelimiterBefore(code) {
	    if (code === 45 || code === 58) {
	      return headDelimiterValueBefore(code)
	    }
	    if (code === 124) {
	      seen = true;
	      // If we start with a pipe, we open a cell marker.
	      effects.enter('tableCellDivider');
	      effects.consume(code);
	      effects.exit('tableCellDivider');
	      return headDelimiterCellBefore
	    }

	    // More whitespace / empty row not allowed at start.
	    return headDelimiterNok(code)
	  }

	  /**
	   * After `|`, before delimiter cell.
	   *
	   * ```markdown
	   *   | | a |
	   * > | | - |
	   *      ^
	   * ```
	   *
	   * @type {State}
	   */
	  function headDelimiterCellBefore(code) {
	    if (markdownSpace(code)) {
	      return factorySpace(effects, headDelimiterValueBefore, 'whitespace')(code)
	    }
	    return headDelimiterValueBefore(code)
	  }

	  /**
	   * Before delimiter cell value.
	   *
	   * ```markdown
	   *   | | a |
	   * > | | - |
	   *       ^
	   * ```
	   *
	   * @type {State}
	   */
	  function headDelimiterValueBefore(code) {
	    // Align: left.
	    if (code === 58) {
	      sizeB += 1;
	      seen = true;
	      effects.enter('tableDelimiterMarker');
	      effects.consume(code);
	      effects.exit('tableDelimiterMarker');
	      return headDelimiterLeftAlignmentAfter
	    }

	    // Align: none.
	    if (code === 45) {
	      sizeB += 1;
	      // To do: seems weird that this *isn’t* left aligned, but that state is used?
	      return headDelimiterLeftAlignmentAfter(code)
	    }
	    if (code === null || markdownLineEnding(code)) {
	      return headDelimiterCellAfter(code)
	    }
	    return headDelimiterNok(code)
	  }

	  /**
	   * After delimiter cell left alignment marker.
	   *
	   * ```markdown
	   *   | | a  |
	   * > | | :- |
	   *        ^
	   * ```
	   *
	   * @type {State}
	   */
	  function headDelimiterLeftAlignmentAfter(code) {
	    if (code === 45) {
	      effects.enter('tableDelimiterFiller');
	      return headDelimiterFiller(code)
	    }

	    // Anything else is not ok after the left-align colon.
	    return headDelimiterNok(code)
	  }

	  /**
	   * In delimiter cell filler.
	   *
	   * ```markdown
	   *   | | a |
	   * > | | - |
	   *       ^
	   * ```
	   *
	   * @type {State}
	   */
	  function headDelimiterFiller(code) {
	    if (code === 45) {
	      effects.consume(code);
	      return headDelimiterFiller
	    }

	    // Align is `center` if it was `left`, `right` otherwise.
	    if (code === 58) {
	      seen = true;
	      effects.exit('tableDelimiterFiller');
	      effects.enter('tableDelimiterMarker');
	      effects.consume(code);
	      effects.exit('tableDelimiterMarker');
	      return headDelimiterRightAlignmentAfter
	    }
	    effects.exit('tableDelimiterFiller');
	    return headDelimiterRightAlignmentAfter(code)
	  }

	  /**
	   * After delimiter cell right alignment marker.
	   *
	   * ```markdown
	   *   | |  a |
	   * > | | -: |
	   *         ^
	   * ```
	   *
	   * @type {State}
	   */
	  function headDelimiterRightAlignmentAfter(code) {
	    if (markdownSpace(code)) {
	      return factorySpace(effects, headDelimiterCellAfter, 'whitespace')(code)
	    }
	    return headDelimiterCellAfter(code)
	  }

	  /**
	   * After delimiter cell.
	   *
	   * ```markdown
	   *   | |  a |
	   * > | | -: |
	   *          ^
	   * ```
	   *
	   * @type {State}
	   */
	  function headDelimiterCellAfter(code) {
	    if (code === 124) {
	      return headDelimiterBefore(code)
	    }
	    if (code === null || markdownLineEnding(code)) {
	      // Exit when:
	      // * there was no `:` or `|` at all (it’s a thematic break or setext
	      //   underline instead)
	      // * the header cell count is not the delimiter cell count
	      if (!seen || size !== sizeB) {
	        return headDelimiterNok(code)
	      }

	      // Note: in markdown-rs`, a reset is needed here.
	      effects.exit('tableDelimiterRow');
	      effects.exit('tableHead');
	      // To do: in `markdown-rs`, resolvers need to be registered manually.
	      // effects.register_resolver(ResolveName::GfmTable)
	      return ok(code)
	    }
	    return headDelimiterNok(code)
	  }

	  /**
	   * In delimiter row, at a disallowed byte.
	   *
	   * ```markdown
	   *   | | a |
	   * > | | x |
	   *       ^
	   * ```
	   *
	   * @type {State}
	   */
	  function headDelimiterNok(code) {
	    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.
	    return nok(code)
	  }

	  /**
	   * Before table body row.
	   *
	   * ```markdown
	   *   | | a |
	   *   | | - |
	   * > | | b |
	   *     ^
	   * ```
	   *
	   * @type {State}
	   */
	  function bodyRowStart(code) {
	    // Note: in `markdown-rs` we need to manually take care of a prefix,
	    // but in `micromark-js` that is done for us, so if we’re here, we’re
	    // never at whitespace.
	    effects.enter('tableRow');
	    return bodyRowBreak(code)
	  }

	  /**
	   * At break in table body row.
	   *
	   * ```markdown
	   *   | | a |
	   *   | | - |
	   * > | | b |
	   *     ^
	   *       ^
	   *         ^
	   * ```
	   *
	   * @type {State}
	   */
	  function bodyRowBreak(code) {
	    if (code === 124) {
	      effects.enter('tableCellDivider');
	      effects.consume(code);
	      effects.exit('tableCellDivider');
	      return bodyRowBreak
	    }
	    if (code === null || markdownLineEnding(code)) {
	      effects.exit('tableRow');
	      return ok(code)
	    }
	    if (markdownSpace(code)) {
	      return factorySpace(effects, bodyRowBreak, 'whitespace')(code)
	    }

	    // Anything else is cell content.
	    effects.enter('data');
	    return bodyRowData(code)
	  }

	  /**
	   * In table body row data.
	   *
	   * ```markdown
	   *   | | a |
	   *   | | - |
	   * > | | b |
	   *       ^
	   * ```
	   *
	   * @type {State}
	   */
	  function bodyRowData(code) {
	    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {
	      effects.exit('data');
	      return bodyRowBreak(code)
	    }
	    effects.consume(code);
	    return code === 92 ? bodyRowEscape : bodyRowData
	  }

	  /**
	   * In table body row escape.
	   *
	   * ```markdown
	   *   | | a    |
	   *   | | ---- |
	   * > | | b\-c |
	   *         ^
	   * ```
	   *
	   * @type {State}
	   */
	  function bodyRowEscape(code) {
	    if (code === 92 || code === 124) {
	      effects.consume(code);
	      return bodyRowData
	    }
	    return bodyRowData(code)
	  }
	}

	/** @type {Resolver} */

	function resolveTable(events, context) {
	  let index = -1;
	  let inFirstCellAwaitingPipe = true;
	  /** @type {RowKind} */
	  let rowKind = 0;
	  /** @type {Range} */
	  let lastCell = [0, 0, 0, 0];
	  /** @type {Range} */
	  let cell = [0, 0, 0, 0];
	  let afterHeadAwaitingFirstBodyRow = false;
	  let lastTableEnd = 0;
	  /** @type {Token | undefined} */
	  let currentTable;
	  /** @type {Token | undefined} */
	  let currentBody;
	  /** @type {Token | undefined} */
	  let currentCell;
	  const map = new EditMap();
	  while (++index < events.length) {
	    const event = events[index];
	    const token = event[1];
	    if (event[0] === 'enter') {
	      // Start of head.
	      if (token.type === 'tableHead') {
	        afterHeadAwaitingFirstBodyRow = false;

	        // Inject previous (body end and) table end.
	        if (lastTableEnd !== 0) {
	          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);
	          currentBody = undefined;
	          lastTableEnd = 0;
	        }

	        // Inject table start.
	        currentTable = {
	          type: 'table',
	          start: Object.assign({}, token.start),
	          // Note: correct end is set later.
	          end: Object.assign({}, token.end)
	        };
	        map.add(index, 0, [['enter', currentTable, context]]);
	      } else if (
	        token.type === 'tableRow' ||
	        token.type === 'tableDelimiterRow'
	      ) {
	        inFirstCellAwaitingPipe = true;
	        currentCell = undefined;
	        lastCell = [0, 0, 0, 0];
	        cell = [0, index + 1, 0, 0];

	        // Inject table body start.
	        if (afterHeadAwaitingFirstBodyRow) {
	          afterHeadAwaitingFirstBodyRow = false;
	          currentBody = {
	            type: 'tableBody',
	            start: Object.assign({}, token.start),
	            // Note: correct end is set later.
	            end: Object.assign({}, token.end)
	          };
	          map.add(index, 0, [['enter', currentBody, context]]);
	        }
	        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;
	      }
	      // Cell data.
	      else if (
	        rowKind &&
	        (token.type === 'data' ||
	          token.type === 'tableDelimiterMarker' ||
	          token.type === 'tableDelimiterFiller')
	      ) {
	        inFirstCellAwaitingPipe = false;

	        // First value in cell.
	        if (cell[2] === 0) {
	          if (lastCell[1] !== 0) {
	            cell[0] = cell[1];
	            currentCell = flushCell(
	              map,
	              context,
	              lastCell,
	              rowKind,
	              undefined,
	              currentCell
	            );
	            lastCell = [0, 0, 0, 0];
	          }
	          cell[2] = index;
	        }
	      } else if (token.type === 'tableCellDivider') {
	        if (inFirstCellAwaitingPipe) {
	          inFirstCellAwaitingPipe = false;
	        } else {
	          if (lastCell[1] !== 0) {
	            cell[0] = cell[1];
	            currentCell = flushCell(
	              map,
	              context,
	              lastCell,
	              rowKind,
	              undefined,
	              currentCell
	            );
	          }
	          lastCell = cell;
	          cell = [lastCell[1], index, 0, 0];
	        }
	      }
	    }
	    // Exit events.
	    else if (token.type === 'tableHead') {
	      afterHeadAwaitingFirstBodyRow = true;
	      lastTableEnd = index;
	    } else if (
	      token.type === 'tableRow' ||
	      token.type === 'tableDelimiterRow'
	    ) {
	      lastTableEnd = index;
	      if (lastCell[1] !== 0) {
	        cell[0] = cell[1];
	        currentCell = flushCell(
	          map,
	          context,
	          lastCell,
	          rowKind,
	          index,
	          currentCell
	        );
	      } else if (cell[1] !== 0) {
	        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);
	      }
	      rowKind = 0;
	    } else if (
	      rowKind &&
	      (token.type === 'data' ||
	        token.type === 'tableDelimiterMarker' ||
	        token.type === 'tableDelimiterFiller')
	    ) {
	      cell[3] = index;
	    }
	  }
	  if (lastTableEnd !== 0) {
	    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);
	  }
	  map.consume(context.events);

	  // To do: move this into `html`, when events are exposed there.
	  // That’s what `markdown-rs` does.
	  // That needs updates to `mdast-util-gfm-table`.
	  index = -1;
	  while (++index < context.events.length) {
	    const event = context.events[index];
	    if (event[0] === 'enter' && event[1].type === 'table') {
	      event[1]._align = gfmTableAlign(context.events, index);
	    }
	  }
	  return events
	}

	/**
	 * Generate a cell.
	 *
	 * @param {EditMap} map
	 * @param {Readonly<TokenizeContext>} context
	 * @param {Readonly<Range>} range
	 * @param {RowKind} rowKind
	 * @param {number | undefined} rowEnd
	 * @param {Token | undefined} previousCell
	 * @returns {Token | undefined}
	 */
	// eslint-disable-next-line max-params
	function flushCell(map, context, range, rowKind, rowEnd, previousCell) {
	  // `markdown-rs` uses:
	  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'
	  const groupName =
	    rowKind === 1
	      ? 'tableHeader'
	      : rowKind === 2
	      ? 'tableDelimiter'
	      : 'tableData';
	  // `markdown-rs` uses:
	  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'
	  const valueName = 'tableContent';

	  // Insert an exit for the previous cell, if there is one.
	  //
	  // ```markdown
	  // > | | aa | bb | cc |
	  //          ^-- exit
	  //           ^^^^-- this cell
	  // ```
	  if (range[0] !== 0) {
	    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));
	    map.add(range[0], 0, [['exit', previousCell, context]]);
	  }

	  // Insert enter of this cell.
	  //
	  // ```markdown
	  // > | | aa | bb | cc |
	  //           ^-- enter
	  //           ^^^^-- this cell
	  // ```
	  const now = getPoint(context.events, range[1]);
	  previousCell = {
	    type: groupName,
	    start: Object.assign({}, now),
	    // Note: correct end is set later.
	    end: Object.assign({}, now)
	  };
	  map.add(range[1], 0, [['enter', previousCell, context]]);

	  // Insert text start at first data start and end at last data end, and
	  // remove events between.
	  //
	  // ```markdown
	  // > | | aa | bb | cc |
	  //            ^-- enter
	  //             ^-- exit
	  //           ^^^^-- this cell
	  // ```
	  if (range[2] !== 0) {
	    const relatedStart = getPoint(context.events, range[2]);
	    const relatedEnd = getPoint(context.events, range[3]);
	    /** @type {Token} */
	    const valueToken = {
	      type: valueName,
	      start: Object.assign({}, relatedStart),
	      end: Object.assign({}, relatedEnd)
	    };
	    map.add(range[2], 0, [['enter', valueToken, context]]);
	    if (rowKind !== 2) {
	      // Fix positional info on remaining events
	      const start = context.events[range[2]];
	      const end = context.events[range[3]];
	      start[1].end = Object.assign({}, end[1].end);
	      start[1].type = 'chunkText';
	      start[1].contentType = 'text';

	      // Remove if needed.
	      if (range[3] > range[2] + 1) {
	        const a = range[2] + 1;
	        const b = range[3] - range[2] - 1;
	        map.add(a, b, []);
	      }
	    }
	    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);
	  }

	  // Insert an exit for the last cell, if at the row end.
	  //
	  // ```markdown
	  // > | | aa | bb | cc |
	  //                    ^-- exit
	  //               ^^^^^^-- this cell (the last one contains two “between” parts)
	  // ```
	  if (rowEnd !== undefined) {
	    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));
	    map.add(rowEnd, 0, [['exit', previousCell, context]]);
	    previousCell = undefined;
	  }
	  return previousCell
	}

	/**
	 * Generate table end (and table body end).
	 *
	 * @param {Readonly<EditMap>} map
	 * @param {Readonly<TokenizeContext>} context
	 * @param {number} index
	 * @param {Token} table
	 * @param {Token | undefined} tableBody
	 */
	// eslint-disable-next-line max-params
	function flushTableEnd(map, context, index, table, tableBody) {
	  /** @type {Array<Event>} */
	  const exits = [];
	  const related = getPoint(context.events, index);
	  if (tableBody) {
	    tableBody.end = Object.assign({}, related);
	    exits.push(['exit', tableBody, context]);
	  }
	  table.end = Object.assign({}, related);
	  exits.push(['exit', table, context]);
	  map.add(index + 1, 0, exits);
	}

	/**
	 * @param {Readonly<Array<Event>>} events
	 * @param {number} index
	 * @returns {Readonly<Point>}
	 */
	function getPoint(events, index) {
	  const event = events[index];
	  const side = event[0] === 'enter' ? 'start' : 'end';
	  return event[1][side]
	}

	/**
	 * @typedef {import('micromark-util-types').Extension} Extension
	 * @typedef {import('micromark-util-types').State} State
	 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
	 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
	 */

	const tasklistCheck = {
	  tokenize: tokenizeTasklistCheck
	};

	/**
	 * Create an HTML extension for `micromark` to support GFM task list items
	 * syntax.
	 *
	 * @returns {Extension}
	 *   Extension for `micromark` that can be passed in `htmlExtensions` to
	 *   support GFM task list items when serializing to HTML.
	 */
	function gfmTaskListItem() {
	  return {
	    text: {
	      [91]: tasklistCheck
	    }
	  }
	}

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function tokenizeTasklistCheck(effects, ok, nok) {
	  const self = this;
	  return open

	  /**
	   * At start of task list item check.
	   *
	   * ```markdown
	   * > | * [x] y.
	   *       ^
	   * ```
	   *
	   * @type {State}
	   */
	  function open(code) {
	    if (
	      // Exit if there’s stuff before.
	      self.previous !== null ||
	      // Exit if not in the first content that is the first child of a list
	      // item.
	      !self._gfmTasklistFirstContentOfListItem
	    ) {
	      return nok(code)
	    }
	    effects.enter('taskListCheck');
	    effects.enter('taskListCheckMarker');
	    effects.consume(code);
	    effects.exit('taskListCheckMarker');
	    return inside
	  }

	  /**
	   * In task list item check.
	   *
	   * ```markdown
	   * > | * [x] y.
	   *        ^
	   * ```
	   *
	   * @type {State}
	   */
	  function inside(code) {
	    // Currently we match how GH works in files.
	    // To match how GH works in comments, use `markdownSpace` (`[\t ]`) instead
	    // of `markdownLineEndingOrSpace` (`[\t\n\r ]`).
	    if (markdownLineEndingOrSpace(code)) {
	      effects.enter('taskListCheckValueUnchecked');
	      effects.consume(code);
	      effects.exit('taskListCheckValueUnchecked');
	      return close
	    }
	    if (code === 88 || code === 120) {
	      effects.enter('taskListCheckValueChecked');
	      effects.consume(code);
	      effects.exit('taskListCheckValueChecked');
	      return close
	    }
	    return nok(code)
	  }

	  /**
	   * At close of task list item check.
	   *
	   * ```markdown
	   * > | * [x] y.
	   *         ^
	   * ```
	   *
	   * @type {State}
	   */
	  function close(code) {
	    if (code === 93) {
	      effects.enter('taskListCheckMarker');
	      effects.consume(code);
	      effects.exit('taskListCheckMarker');
	      effects.exit('taskListCheck');
	      return after
	    }
	    return nok(code)
	  }

	  /**
	   * @type {State}
	   */
	  function after(code) {
	    // EOL in paragraph means there must be something else after it.
	    if (markdownLineEnding(code)) {
	      return ok(code)
	    }

	    // Space or tab?
	    // Check what comes after.
	    if (markdownSpace(code)) {
	      return effects.check(
	        {
	          tokenize: spaceThenNonSpace
	        },
	        ok,
	        nok
	      )(code)
	    }

	    // EOF, or non-whitespace, both wrong.
	    return nok(code)
	  }
	}

	/**
	 * @this {TokenizeContext}
	 * @type {Tokenizer}
	 */
	function spaceThenNonSpace(effects, ok, nok) {
	  return factorySpace(effects, after, 'whitespace')

	  /**
	   * After whitespace, after task list item check.
	   *
	   * ```markdown
	   * > | * [x] y.
	   *           ^
	   * ```
	   *
	   * @type {State}
	   */
	  function after(code) {
	    // EOF means there was nothing, so bad.
	    // EOL means there’s content after it, so good.
	    // Impossible to have more spaces.
	    // Anything else is good.
	    return code === null ? nok(code) : ok(code)
	  }
	}

	/**
	 * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions
	 * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options
	 * @typedef {import('micromark-util-types').Extension} Extension
	 * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension
	 */


	/**
	 * Create an extension for `micromark` to enable GFM syntax.
	 *
	 * @param {Options | null | undefined} [options]
	 *   Configuration (optional).
	 *
	 *   Passed to `micromark-extens-gfm-strikethrough`.
	 * @returns {Extension}
	 *   Extension for `micromark` that can be passed in `extensions` to enable GFM
	 *   syntax.
	 */
	function gfm(options) {
	  return combineExtensions([
	    gfmAutolinkLiteral(),
	    gfmFootnote(),
	    gfmStrikethrough(options),
	    gfmTable(),
	    gfmTaskListItem()
	  ])
	}

	/// <reference types="remark-parse" />
	/// <reference types="remark-stringify" />


	/** @type {Options} */
	const emptyOptions$5 = {};

	/**
	 * Add support GFM (autolink literals, footnotes, strikethrough, tables,
	 * tasklists).
	 *
	 * @param {Options | null | undefined} [options]
	 *   Configuration (optional).
	 * @returns {undefined}
	 *   Nothing.
	 */
	function remarkGfm(options) {
	  // @ts-expect-error: TS is wrong about `this`.
	  // eslint-disable-next-line unicorn/no-this-assignment
	  const self = /** @type {Processor} */ (this);
	  const settings = options || emptyOptions$5;
	  const data = self.data();

	  const micromarkExtensions =
	    data.micromarkExtensions || (data.micromarkExtensions = []);
	  const fromMarkdownExtensions =
	    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = []);
	  const toMarkdownExtensions =
	    data.toMarkdownExtensions || (data.toMarkdownExtensions = []);

	  micromarkExtensions.push(gfm(settings));
	  fromMarkdownExtensions.push(gfmFromMarkdown());
	  toMarkdownExtensions.push(gfmToMarkdown(settings));
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').Properties} Properties
	 */

	/**
	 * @template {string} SimpleSelector
	 *   Selector type.
	 * @template {string} DefaultTagName
	 *   Default tag name.
	 * @typedef {(
	 *   SimpleSelector extends ''
	 *     ? DefaultTagName
	 *     : SimpleSelector extends `${infer TagName}.${infer Rest}`
	 *     ? ExtractTagName<TagName, DefaultTagName>
	 *     : SimpleSelector extends `${infer TagName}#${infer Rest}`
	 *     ? ExtractTagName<TagName, DefaultTagName>
	 *     : SimpleSelector extends string
	 *     ? SimpleSelector
	 *     : DefaultTagName
	 * )} ExtractTagName
	 *   Extract tag name from a simple selector.
	 */

	const search$2 = /[#.]/g;

	/**
	 * Create a hast element from a simple CSS selector.
	 *
	 * @template {string} Selector
	 *   Type of selector.
	 * @template {string} [DefaultTagName='div']
	 *   Type of default tag name (default: `'div'`).
	 * @param {Selector | null | undefined} [selector]
	 *   Simple CSS selector (optional).
	 *
	 *   Can contain a tag name (`foo`), classes (`.bar`), and an ID (`#baz`).
	 *   Multiple classes are allowed.
	 *   Uses the last ID if multiple IDs are found.
	 * @param {DefaultTagName | null | undefined} [defaultTagName='div']
	 *   Tag name to use if `selector` does not specify one (default: `'div'`).
	 * @returns {Element & {tagName: ExtractTagName<Selector, DefaultTagName>}}
	 *   Built element.
	 */
	function parseSelector$1(selector, defaultTagName) {
	  const value = selector || '';
	  /** @type {Properties} */
	  const props = {};
	  let start = 0;
	  /** @type {string | undefined} */
	  let previous;
	  /** @type {string | undefined} */
	  let tagName;

	  while (start < value.length) {
	    search$2.lastIndex = start;
	    const match = search$2.exec(value);
	    const subvalue = value.slice(start, match ? match.index : value.length);

	    if (subvalue) {
	      if (!previous) {
	        tagName = subvalue;
	      } else if (previous === '#') {
	        props.id = subvalue;
	      } else if (Array.isArray(props.className)) {
	        props.className.push(subvalue);
	      } else {
	        props.className = [subvalue];
	      }

	      start += subvalue.length;
	    }

	    if (match) {
	      previous = match[0];
	      start++;
	    }
	  }

	  return {
	    type: 'element',
	    // @ts-expect-error: tag name is parsed.
	    tagName: tagName || defaultTagName || 'div',
	    properties: props,
	    children: []
	  }
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').Nodes} Nodes
	 * @typedef {import('hast').Root} Root
	 * @typedef {import('hast').RootContent} RootContent
	 *
	 * @typedef {import('property-information').Info} Info
	 * @typedef {import('property-information').Schema} Schema
	 */


	const buttonTypes$1 = new Set(['button', 'menu', 'reset', 'submit']);

	const own$9 = {}.hasOwnProperty;

	/**
	 * @param {Schema} schema
	 *   Schema to use.
	 * @param {string} defaultTagName
	 *   Default tag name.
	 * @param {Array<string> | undefined} [caseSensitive]
	 *   Case-sensitive tag names (default: `undefined`).
	 * @returns
	 *   `h`.
	 */
	function createH(schema, defaultTagName, caseSensitive) {
	  const adjust = caseSensitive && createAdjustMap$1(caseSensitive);

	  /**
	   * Hyperscript compatible DSL for creating virtual hast trees.
	   *
	   * @overload
	   * @param {null | undefined} [selector]
	   * @param {...Child} children
	   * @returns {Root}
	   *
	   * @overload
	   * @param {string} selector
	   * @param {Properties} properties
	   * @param {...Child} children
	   * @returns {Element}
	   *
	   * @overload
	   * @param {string} selector
	   * @param {...Child} children
	   * @returns {Element}
	   *
	   * @param {string | null | undefined} [selector]
	   *   Selector.
	   * @param {Child | Properties | null | undefined} [properties]
	   *   Properties (or first child) (default: `undefined`).
	   * @param {...Child} children
	   *   Children.
	   * @returns {Result}
	   *   Result.
	   */
	  function h(selector, properties, ...children) {
	    let index = -1;
	    /** @type {Result} */
	    let node;

	    if (selector === undefined || selector === null) {
	      node = {type: 'root', children: []};
	      // Properties are not supported for roots.
	      const child = /** @type {Child} */ (properties);
	      children.unshift(child);
	    } else {
	      node = parseSelector$1(selector, defaultTagName);
	      // Normalize the name.
	      node.tagName = node.tagName.toLowerCase();
	      if (adjust && own$9.call(adjust, node.tagName)) {
	        node.tagName = adjust[node.tagName];
	      }

	      // Handle props.
	      if (isProperties$1(properties, node.tagName)) {
	        /** @type {string} */
	        let key;

	        for (key in properties) {
	          if (own$9.call(properties, key)) {
	            addProperty$1(schema, node.properties, key, properties[key]);
	          }
	        }
	      } else {
	        children.unshift(properties);
	      }
	    }

	    // Handle children.
	    while (++index < children.length) {
	      addChild$1(node.children, children[index]);
	    }

	    if (node.type === 'element' && node.tagName === 'template') {
	      node.content = {type: 'root', children: node.children};
	      node.children = [];
	    }

	    return node
	  }

	  return h
	}

	/**
	 * Check if something is properties or a child.
	 *
	 * @param {Child | Properties} value
	 *   Value to check.
	 * @param {string} name
	 *   Tag name.
	 * @returns {value is Properties}
	 *   Whether `value` is a properties object.
	 */
	function isProperties$1(value, name) {
	  if (
	    value === null ||
	    value === undefined ||
	    typeof value !== 'object' ||
	    Array.isArray(value)
	  ) {
	    return false
	  }

	  if (name === 'input' || !value.type || typeof value.type !== 'string') {
	    return true
	  }

	  if ('children' in value && Array.isArray(value.children)) {
	    return false
	  }

	  if (name === 'button') {
	    return buttonTypes$1.has(value.type.toLowerCase())
	  }

	  return !('value' in value)
	}

	/**
	 * @param {Schema} schema
	 *   Schema.
	 * @param {Properties} properties
	 *   Properties object.
	 * @param {string} key
	 *   Property name.
	 * @param {PropertyValue | Style} value
	 *   Property value.
	 * @returns {undefined}
	 *   Nothing.
	 */
	function addProperty$1(schema, properties, key, value) {
	  const info = find(schema, key);
	  let index = -1;
	  /** @type {PropertyValue} */
	  let result;

	  // Ignore nullish and NaN values.
	  if (value === undefined || value === null) return

	  if (typeof value === 'number') {
	    // Ignore NaN.
	    if (Number.isNaN(value)) return

	    result = value;
	  }
	  // Booleans.
	  else if (typeof value === 'boolean') {
	    result = value;
	  }
	  // Handle list values.
	  else if (typeof value === 'string') {
	    if (info.spaceSeparated) {
	      result = parse$4(value);
	    } else if (info.commaSeparated) {
	      result = parse$5(value);
	    } else if (info.commaOrSpaceSeparated) {
	      result = parse$4(parse$5(value).join(' '));
	    } else {
	      result = parsePrimitive$1(info, info.property, value);
	    }
	  } else if (Array.isArray(value)) {
	    result = value.concat();
	  } else {
	    result = info.property === 'style' ? style$1(value) : String(value);
	  }

	  if (Array.isArray(result)) {
	    /** @type {Array<number | string>} */
	    const finalResult = [];

	    while (++index < result.length) {
	      // Assume no booleans in array.
	      const value = /** @type {number | string} */ (
	        parsePrimitive$1(info, info.property, result[index])
	      );
	      finalResult[index] = value;
	    }

	    result = finalResult;
	  }

	  // Class names (which can be added both on the `selector` and here).
	  if (info.property === 'className' && Array.isArray(properties.className)) {
	    // Assume no booleans in `className`.
	    const value = /** @type {number | string} */ (result);
	    result = properties.className.concat(value);
	  }

	  properties[info.property] = result;
	}

	/**
	 * @param {Array<RootContent>} nodes
	 *   Children.
	 * @param {Child} value
	 *   Child.
	 * @returns {undefined}
	 *   Nothing.
	 */
	function addChild$1(nodes, value) {
	  let index = -1;

	  if (value === undefined || value === null) ; else if (typeof value === 'string' || typeof value === 'number') {
	    nodes.push({type: 'text', value: String(value)});
	  } else if (Array.isArray(value)) {
	    while (++index < value.length) {
	      addChild$1(nodes, value[index]);
	    }
	  } else if (typeof value === 'object' && 'type' in value) {
	    if (value.type === 'root') {
	      addChild$1(nodes, value.children);
	    } else {
	      nodes.push(value);
	    }
	  } else {
	    throw new Error('Expected node, nodes, or string, got `' + value + '`')
	  }
	}

	/**
	 * Parse a single primitives.
	 *
	 * @param {Info} info
	 *   Property information.
	 * @param {string} name
	 *   Property name.
	 * @param {PrimitiveValue} value
	 *   Property value.
	 * @returns {PrimitiveValue}
	 *   Property value.
	 */
	function parsePrimitive$1(info, name, value) {
	  if (typeof value === 'string') {
	    if (info.number && value && !Number.isNaN(Number(value))) {
	      return Number(value)
	    }

	    if (
	      (info.boolean || info.overloadedBoolean) &&
	      (value === '' || normalize$1(value) === normalize$1(name))
	    ) {
	      return true
	    }
	  }

	  return value
	}

	/**
	 * Serialize a `style` object as a string.
	 *
	 * @param {Style} value
	 *   Style object.
	 * @returns {string}
	 *   CSS string.
	 */
	function style$1(value) {
	  /** @type {Array<string>} */
	  const result = [];
	  /** @type {string} */
	  let key;

	  for (key in value) {
	    if (own$9.call(value, key)) {
	      result.push([key, value[key]].join(': '));
	    }
	  }

	  return result.join('; ')
	}

	/**
	 * Create a map to adjust casing.
	 *
	 * @param {Array<string>} values
	 *   List of properly cased keys.
	 * @returns {Record<string, string>}
	 *   Map of lowercase keys to uppercase keys.
	 */
	function createAdjustMap$1(values) {
	  /** @type {Record<string, string>} */
	  const result = {};
	  let index = -1;

	  while (++index < values.length) {
	    result[values[index].toLowerCase()] = values[index];
	  }

	  return result
	}

	const svgCaseSensitiveTagNames = [
	  'altGlyph',
	  'altGlyphDef',
	  'altGlyphItem',
	  'animateColor',
	  'animateMotion',
	  'animateTransform',
	  'clipPath',
	  'feBlend',
	  'feColorMatrix',
	  'feComponentTransfer',
	  'feComposite',
	  'feConvolveMatrix',
	  'feDiffuseLighting',
	  'feDisplacementMap',
	  'feDistantLight',
	  'feDropShadow',
	  'feFlood',
	  'feFuncA',
	  'feFuncB',
	  'feFuncG',
	  'feFuncR',
	  'feGaussianBlur',
	  'feImage',
	  'feMerge',
	  'feMergeNode',
	  'feMorphology',
	  'feOffset',
	  'fePointLight',
	  'feSpecularLighting',
	  'feSpotLight',
	  'feTile',
	  'feTurbulence',
	  'foreignObject',
	  'glyphRef',
	  'linearGradient',
	  'radialGradient',
	  'solidColor',
	  'textArea',
	  'textPath'
	];

	/**
	 * @typedef {import('./create-h.js').Child} Child
	 *   Acceptable child value.
	 * @typedef {import('./create-h.js').Properties} Properties
	 *   Acceptable value for element properties.
	 * @typedef {import('./create-h.js').Result} Result
	 *   Result from a `h` (or `s`) call.
	 */


	// Note: this explicit type is needed, otherwise TS creates broken types.
	/** @type {ReturnType<createH>} */
	const h$1 = createH(html$4, 'div');

	// Note: this explicit type is needed, otherwise TS creates broken types.
	/** @type {ReturnType<createH>} */
	const s$1 = createH(svg, 'g', svgCaseSensitiveTagNames);

	/**
	 * @typedef {import('vfile').VFile} VFile
	 * @typedef {import('vfile').Value} Value
	 * @typedef {import('unist').Point} UnistPoint
	 */

	/**
	 *
	 * @typedef PointLike
	 *   unist point, allowed as input.
	 * @property {number | null | undefined} [line]
	 *   Line.
	 * @property {number | null | undefined} [column]
	 *   Column.
	 * @property {number | null | undefined} [offset]
	 *   Offset.
	 *
	 * @callback ToPoint
	 *   Get the line/column based `Point` for `offset` in the bound indices.
	 *
	 *   Returns `undefined` when given out of bounds input.
	 *
	 *   Also implemented in Rust in [`wooorm/markdown-rs`][markdown-rs].
	 *
	 *   [markdown-rs]: https://github.com/wooorm/markdown-rs/blob/main/src/util/location.rs
	 * @param {number | null | undefined} [offset]
	 *   Something that should be an `offset.
	 * @returns {UnistPoint | undefined}
	 *   Point, if `offset` is valid and in-bounds input.
	 *
	 * @callback ToOffset
	 *   Get the `offset` from a line/column based `Point` in the bound indices.
	 * @param {PointLike | null | undefined} [point]
	 *   Something that should be a `point.
	 * @returns {number | undefined}
	 *   Offset (`number`) or `undefined` for invalid or out of bounds input.
	 *
	 * @typedef Location
	 *   Accessors for index.
	 * @property {ToPoint} toPoint
	 *   Get the line/column based `Point` for `offset` in the bound indices.
	 * @property {ToOffset} toOffset
	 *   Get the `offset` from a line/column based `Point` in the bound indices.
	 */

	const search$1 = /\r?\n|\r/g;

	/**
	 * Create an index of the given document to translate between line/column and
	 * offset based positional info.
	 *
	 * Also implemented in Rust in [`wooorm/markdown-rs`][markdown-rs].
	 *
	 * [markdown-rs]: https://github.com/wooorm/markdown-rs/blob/main/src/util/location.rs
	 *
	 * @param {VFile | Value} file
	 *   File to index.
	 * @returns {Location}
	 *   Accessors for index.
	 */
	function location(file) {
	  const value = String(file);
	  /**
	   * List, where each index is a line number (0-based), and each value is the
	   * byte index *after* where the line ends.
	   *
	   * @type {Array<number>}
	   */
	  const indices = [];

	  search$1.lastIndex = 0;

	  while (search$1.test(value)) {
	    indices.push(search$1.lastIndex);
	  }

	  indices.push(value.length + 1);

	  return {toPoint, toOffset}

	  /** @type {ToPoint} */
	  function toPoint(offset) {
	    let index = -1;

	    if (
	      typeof offset === 'number' &&
	      offset > -1 &&
	      offset < indices[indices.length - 1]
	    ) {
	      while (++index < indices.length) {
	        if (indices[index] > offset) {
	          return {
	            line: index + 1,
	            column: offset - (index > 0 ? indices[index - 1] : 0) + 1,
	            offset
	          }
	        }
	      }
	    }
	  }

	  /** @type {ToOffset} */
	  function toOffset(point) {
	    const line = point && point.line;
	    const column = point && point.column;

	    if (
	      typeof line === 'number' &&
	      typeof column === 'number' &&
	      !Number.isNaN(line) &&
	      !Number.isNaN(column) &&
	      line - 1 in indices
	    ) {
	      const offset = (indices[line - 2] || 0) + column - 1 || 0;

	      if (offset > -1 && offset < indices[indices.length - 1]) {
	        return offset
	      }
	    }
	  }
	}

	/**
	 * Map of web namespaces.
	 *
	 * @type {Record<string, string>}
	 */
	const webNamespaces = {
	  html: 'http://www.w3.org/1999/xhtml',
	  mathml: 'http://www.w3.org/1998/Math/MathML',
	  svg: 'http://www.w3.org/2000/svg',
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace',
	  xmlns: 'http://www.w3.org/2000/xmlns/'
	};

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').ElementData} ElementData
	 * @typedef {import('hast').Nodes} Nodes
	 * @typedef {import('hast').Root} Root
	 * @typedef {import('hast').RootContent} RootContent
	 *
	 * @typedef {import('parse5').DefaultTreeAdapterMap} DefaultTreeAdapterMap
	 * @typedef {import('parse5').Token.ElementLocation} P5ElementLocation
	 * @typedef {import('parse5').Token.Location} P5Location
	 *
	 * @typedef {import('property-information').Schema} Schema
	 *
	 * @typedef {import('unist').Point} Point
	 * @typedef {import('unist').Position} Position
	 *
	 * @typedef {import('vfile').VFile} VFile
	 */


	const own$8 = {}.hasOwnProperty;
	/** @type {unknown} */
	// type-coverage:ignore-next-line
	const proto = Object.prototype;

	/**
	 * Transform a `parse5` AST to hast.
	 *
	 * @param {P5Node} tree
	 *   `parse5` tree to transform.
	 * @param {Options | null | undefined} [options]
	 *   Configuration (optional).
	 * @returns {Nodes}
	 *   hast tree.
	 */
	function fromParse5(tree, options) {
	  const settings = options || {};

	  return one$5(
	    {
	      file: settings.file || undefined,
	      location: false,
	      schema: settings.space === 'svg' ? svg : html$4,
	      verbose: settings.verbose || false
	    },
	    tree
	  )
	}

	/**
	 * Transform a node.
	 *
	 * @param {State} state
	 *   Info passed around about the current state.
	 * @param {P5Node} node
	 *   p5 node.
	 * @returns {Nodes}
	 *   hast node.
	 */
	function one$5(state, node) {
	  /** @type {Nodes} */
	  let result;

	  switch (node.nodeName) {
	    case '#comment': {
	      const reference = /** @type {P5Comment} */ (node);
	      result = {type: 'comment', value: reference.data};
	      patch$1(state, reference, result);
	      return result
	    }

	    case '#document':
	    case '#document-fragment': {
	      const reference = /** @type {P5Document | P5DocumentFragment} */ (node);
	      const quirksMode =
	        'mode' in reference
	          ? reference.mode === 'quirks' || reference.mode === 'limited-quirks'
	          : false;

	      result = {
	        type: 'root',
	        children: all$6(state, node.childNodes),
	        data: {quirksMode}
	      };

	      if (state.file && state.location) {
	        const doc = String(state.file);
	        const loc = location(doc);
	        const start = loc.toPoint(0);
	        const end = loc.toPoint(doc.length);
	        result.position = {start, end};
	      }

	      return result
	    }

	    case '#documentType': {
	      const reference = /** @type {P5DocumentType} */ (node);
	      result = {type: 'doctype'};
	      patch$1(state, reference, result);
	      return result
	    }

	    case '#text': {
	      const reference = /** @type {P5Text} */ (node);
	      result = {type: 'text', value: reference.value};
	      patch$1(state, reference, result);
	      return result
	    }

	    // Element.
	    default: {
	      const reference = /** @type {P5Element} */ (node);
	      result = element$4(state, reference);
	      return result
	    }
	  }
	}

	/**
	 * Transform children.
	 *
	 * @param {State} state
	 *   Info passed around about the current state.
	 * @param {Array<P5Node>} nodes
	 *   Nodes.
	 * @returns {Array<RootContent>}
	 *   hast nodes.
	 */
	function all$6(state, nodes) {
	  let index = -1;
	  /** @type {Array<RootContent>} */
	  const results = [];

	  while (++index < nodes.length) {
	    // Assume no roots in `nodes`.
	    const result = /** @type {RootContent} */ (one$5(state, nodes[index]));
	    results.push(result);
	  }

	  return results
	}

	/**
	 * Transform an element.
	 *
	 * @param {State} state
	 *   Info passed around about the current state.
	 * @param {P5Element} node
	 *   `parse5` node to transform.
	 * @returns {Element}
	 *   hast node.
	 */
	function element$4(state, node) {
	  const schema = state.schema;

	  state.schema = node.namespaceURI === webNamespaces.svg ? svg : html$4;

	  // Props.
	  let index = -1;
	  /** @type {Record<string, string>} */
	  const props = {};

	  while (++index < node.attrs.length) {
	    const attribute = node.attrs[index];
	    const name =
	      (attribute.prefix ? attribute.prefix + ':' : '') + attribute.name;
	    if (!own$8.call(proto, name)) {
	      props[name] = attribute.value;
	    }
	  }

	  // Build.
	  const fn = state.schema.space === 'svg' ? s$1 : h$1;
	  const result = fn(node.tagName, props, all$6(state, node.childNodes));
	  patch$1(state, node, result);

	  // Switch content.
	  if (result.tagName === 'template') {
	    const reference = /** @type {P5Template} */ (node);
	    const pos = reference.sourceCodeLocation;
	    const startTag = pos && pos.startTag && position(pos.startTag);
	    const endTag = pos && pos.endTag && position(pos.endTag);

	    // Root in, root out.
	    const content = /** @type {Root} */ (one$5(state, reference.content));

	    if (startTag && endTag && state.file) {
	      content.position = {start: startTag.end, end: endTag.start};
	    }

	    result.content = content;
	  }

	  state.schema = schema;

	  return result
	}

	/**
	 * Patch positional info from `from` onto `to`.
	 *
	 * @param {State} state
	 *   Info passed around about the current state.
	 * @param {P5Node} from
	 *   p5 node.
	 * @param {Nodes} to
	 *   hast node.
	 * @returns {undefined}
	 *   Nothing.
	 */
	function patch$1(state, from, to) {
	  if ('sourceCodeLocation' in from && from.sourceCodeLocation && state.file) {
	    const position = createLocation(state, to, from.sourceCodeLocation);

	    if (position) {
	      state.location = true;
	      to.position = position;
	    }
	  }
	}

	/**
	 * Create clean positional information.
	 *
	 * @param {State} state
	 *   Info passed around about the current state.
	 * @param {Nodes} node
	 *   hast node.
	 * @param {P5ElementLocation} location
	 *   p5 location info.
	 * @returns {Position | undefined}
	 *   Position, or nothing.
	 */
	function createLocation(state, node, location) {
	  const result = position(location);

	  if (node.type === 'element') {
	    const tail = node.children[node.children.length - 1];

	    // Bug for unclosed with children.
	    // See: <https://github.com/inikulin/parse5/issues/109>.
	    if (
	      result &&
	      !location.endTag &&
	      tail &&
	      tail.position &&
	      tail.position.end
	    ) {
	      result.end = Object.assign({}, tail.position.end);
	    }

	    if (state.verbose) {
	      /** @type {Record<string, Position | undefined>} */
	      const props = {};
	      /** @type {string} */
	      let key;

	      if (location.attrs) {
	        for (key in location.attrs) {
	          if (own$8.call(location.attrs, key)) {
	            props[find(state.schema, key).property] = position(
	              location.attrs[key]
	            );
	          }
	        }
	      }

	      ok$3(location.startTag);
	      const opening = position(location.startTag);
	      const closing = location.endTag ? position(location.endTag) : undefined;
	      /** @type {ElementData['position']} */
	      const data = {opening};
	      if (closing) data.closing = closing;
	      data.properties = props;

	      node.data = {position: data};
	    }
	  }

	  return result
	}

	/**
	 * Turn a p5 location into a position.
	 *
	 * @param {P5Location} loc
	 *   Location.
	 * @returns {Position | undefined}
	 *   Position or nothing.
	 */
	function position(loc) {
	  const start = point({
	    line: loc.startLine,
	    column: loc.startCol,
	    offset: loc.startOffset
	  });
	  const end = point({
	    line: loc.endLine,
	    column: loc.endCol,
	    offset: loc.endOffset
	  });

	  // @ts-expect-error: we do use `undefined` for points if one or the other
	  // exists.
	  return start || end ? {start, end} : undefined
	}

	/**
	 * Filter out invalid points.
	 *
	 * @param {Point} point
	 *   Point with potentially `undefined` values.
	 * @returns {Point | undefined}
	 *   Point or nothing.
	 */
	function point(point) {
	  return point.line && point.column ? point : undefined
	}

	/**
	 * @typedef {import('hast').Comment} Comment
	 * @typedef {import('hast').Doctype} Doctype
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').Nodes} Nodes
	 * @typedef {import('hast').Root} Root
	 * @typedef {import('hast').RootContent} RootContent
	 * @typedef {import('hast').Text} Text
	 *
	 * @typedef {import('parse5').DefaultTreeAdapterMap['document']} Parse5Document
	 * @typedef {import('parse5').DefaultTreeAdapterMap['documentFragment']} Parse5Fragment
	 * @typedef {import('parse5').DefaultTreeAdapterMap['element']} Parse5Element
	 * @typedef {import('parse5').DefaultTreeAdapterMap['node']} Parse5Nodes
	 * @typedef {import('parse5').DefaultTreeAdapterMap['documentType']} Parse5Doctype
	 * @typedef {import('parse5').DefaultTreeAdapterMap['commentNode']} Parse5Comment
	 * @typedef {import('parse5').DefaultTreeAdapterMap['textNode']} Parse5Text
	 * @typedef {import('parse5').DefaultTreeAdapterMap['parentNode']} Parse5Parent
	 * @typedef {import('parse5').Token.Attribute} Parse5Attribute
	 *
	 * @typedef {import('property-information').Schema} Schema
	 */


	/** @type {Options} */
	const emptyOptions$4 = {};

	const own$7 = {}.hasOwnProperty;

	const one$4 = zwitch('type', {handlers: {root: root$4, element: element$3, text: text$2, comment: comment$3, doctype: doctype$2}});

	/**
	 * Transform a hast tree to a `parse5` AST.
	 *
	 * @param {Nodes} tree
	 *   Tree to transform.
	 * @param {Options | null | undefined} [options]
	 *   Configuration (optional).
	 * @returns {Parse5Nodes}
	 *   `parse5` node.
	 */
	function toParse5(tree, options) {
	  const settings = options || emptyOptions$4;
	  const space = settings.space;
	  return one$4(tree, space === 'svg' ? svg : html$4)
	}

	/**
	 * @param {Root} node
	 *   Node (hast) to transform.
	 * @param {Schema} schema
	 *   Current schema.
	 * @returns {Parse5Document}
	 *   Parse5 node.
	 */
	function root$4(node, schema) {
	  /** @type {Parse5Document} */
	  const result = {
	    nodeName: '#document',
	    // @ts-expect-error: `parse5` uses enums, which are actually strings.
	    mode: (node.data || {}).quirksMode ? 'quirks' : 'no-quirks',
	    childNodes: []
	  };
	  result.childNodes = all$5(node.children, result, schema);
	  patch(node, result);
	  return result
	}

	/**
	 * @param {Root} node
	 *   Node (hast) to transform.
	 * @param {Schema} schema
	 *   Current schema.
	 * @returns {Parse5Fragment}
	 *   Parse5 node.
	 */
	function fragment(node, schema) {
	  /** @type {Parse5Fragment} */
	  const result = {nodeName: '#document-fragment', childNodes: []};
	  result.childNodes = all$5(node.children, result, schema);
	  patch(node, result);
	  return result
	}

	/**
	 * @param {Doctype} node
	 *   Node (hast) to transform.
	 * @returns {Parse5Doctype}
	 *   Parse5 node.
	 */
	function doctype$2(node) {
	  /** @type {Parse5Doctype} */
	  const result = {
	    nodeName: '#documentType',
	    name: 'html',
	    publicId: '',
	    systemId: '',
	    parentNode: null
	  };

	  patch(node, result);
	  return result
	}

	/**
	 * @param {Text} node
	 *   Node (hast) to transform.
	 * @returns {Parse5Text}
	 *   Parse5 node.
	 */
	function text$2(node) {
	  /** @type {Parse5Text} */
	  const result = {
	    nodeName: '#text',
	    value: node.value,
	    parentNode: null
	  };
	  patch(node, result);
	  return result
	}

	/**
	 * @param {Comment} node
	 *   Node (hast) to transform.
	 * @returns {Parse5Comment}
	 *   Parse5 node.
	 */
	function comment$3(node) {
	  /** @type {Parse5Comment} */
	  const result = {
	    nodeName: '#comment',
	    data: node.value,
	    parentNode: null
	  };

	  patch(node, result);

	  return result
	}

	/**
	 * @param {Element} node
	 *   Node (hast) to transform.
	 * @param {Schema} schema
	 *   Current schema.
	 * @returns {Parse5Element}
	 *   Parse5 node.
	 */
	function element$3(node, schema) {
	  const parentSchema = schema;
	  let currentSchema = parentSchema;

	  if (
	    node.type === 'element' &&
	    node.tagName.toLowerCase() === 'svg' &&
	    parentSchema.space === 'html'
	  ) {
	    currentSchema = svg;
	  }

	  /** @type {Array<Parse5Attribute>} */
	  const attrs = [];
	  /** @type {string} */
	  let prop;

	  if (node.properties) {
	    for (prop in node.properties) {
	      if (prop !== 'children' && own$7.call(node.properties, prop)) {
	        const result = createProperty(
	          currentSchema,
	          prop,
	          node.properties[prop]
	        );

	        if (result) {
	          attrs.push(result);
	        }
	      }
	    }
	  }

	  const space = currentSchema.space;

	  /** @type {Parse5Element} */
	  const result = {
	    nodeName: node.tagName,
	    tagName: node.tagName,
	    attrs,
	    // @ts-expect-error: `parse5` types are wrong.
	    namespaceURI: webNamespaces[space],
	    childNodes: [],
	    parentNode: null
	  };
	  result.childNodes = all$5(node.children, result, currentSchema);
	  patch(node, result);

	  if (node.tagName === 'template' && node.content) {
	    // @ts-expect-error: `parse5` types are wrong.
	    result.content = fragment(node.content, currentSchema);
	  }

	  return result
	}

	/**
	 * Handle a property.
	 *
	 * @param {Schema} schema
	 *   Current schema.
	 * @param {string} prop
	 *   Key.
	 * @param {Array<number | string> | boolean | number | string | null | undefined} value
	 *   hast property value.
	 * @returns {Parse5Attribute | undefined}
	 *   Field for runtime, optional.
	 */
	function createProperty(schema, prop, value) {
	  const info = find(schema, prop);

	  // Ignore nullish and `NaN` values.
	  if (
	    value === false ||
	    value === null ||
	    value === undefined ||
	    (typeof value === 'number' && Number.isNaN(value)) ||
	    (!value && info.boolean)
	  ) {
	    return
	  }

	  if (Array.isArray(value)) {
	    // Accept `array`.
	    // Most props are space-separated.
	    value = info.commaSeparated ? stringify$2(value) : stringify$1(value);
	  }

	  /** @type {Parse5Attribute} */
	  const attribute = {
	    name: info.attribute,
	    value: value === true ? '' : String(value)
	  };

	  if (info.space && info.space !== 'html' && info.space !== 'svg') {
	    const index = attribute.name.indexOf(':');

	    if (index < 0) {
	      attribute.prefix = '';
	    } else {
	      attribute.name = attribute.name.slice(index + 1);
	      attribute.prefix = info.attribute.slice(0, index);
	    }

	    attribute.namespace = webNamespaces[info.space];
	  }

	  return attribute
	}

	/**
	 * Transform all hast nodes.
	 *
	 * @param {Array<RootContent>} children
	 *   List of children.
	 * @param {Parse5Parent} parentNode
	 *   `parse5` parent node.
	 * @param {Schema} schema
	 *   Current schema.
	 * @returns {Array<Parse5Content>}
	 *   Transformed children.
	 */
	function all$5(children, parentNode, schema) {
	  let index = -1;
	  /** @type {Array<Parse5Content>} */
	  const results = [];

	  if (children) {
	    while (++index < children.length) {
	      /** @type {Parse5Content} */
	      const child = one$4(children[index], schema);

	      child.parentNode = parentNode;

	      results.push(child);
	    }
	  }

	  return results
	}

	/**
	 * Add position info from `from` to `to`.
	 *
	 * @param {Nodes} from
	 *   hast node.
	 * @param {Parse5Nodes} to
	 *   `parse5` node.
	 * @returns {undefined}
	 *   Nothing.
	 */
	function patch(from, to) {
	  const position = from.position;

	  if (position && position.start && position.end) {
	    ok$3(typeof position.start.offset === 'number');
	    ok$3(typeof position.end.offset === 'number');

	    to.sourceCodeLocation = {
	      startLine: position.start.line,
	      startCol: position.start.column,
	      startOffset: position.start.offset,
	      endLine: position.end.line,
	      endCol: position.end.column,
	      endOffset: position.end.offset
	    };
	  }
	}

	/**
	 * List of HTML void tag names.
	 *
	 * @type {Array<string>}
	 */
	const htmlVoidElements = [
	  'area',
	  'base',
	  'basefont',
	  'bgsound',
	  'br',
	  'col',
	  'command',
	  'embed',
	  'frame',
	  'hr',
	  'image',
	  'img',
	  'input',
	  'keygen',
	  'link',
	  'meta',
	  'param',
	  'source',
	  'track',
	  'wbr'
	];

	const UNDEFINED_CODE_POINTS = new Set([
	    65534, 65535, 131070, 131071, 196606, 196607, 262142, 262143, 327678, 327679, 393214,
	    393215, 458750, 458751, 524286, 524287, 589822, 589823, 655358, 655359, 720894,
	    720895, 786430, 786431, 851966, 851967, 917502, 917503, 983038, 983039, 1048574,
	    1048575, 1114110, 1114111,
	]);
	const REPLACEMENT_CHARACTER = '\uFFFD';
	var CODE_POINTS;
	(function (CODE_POINTS) {
	    CODE_POINTS[CODE_POINTS["EOF"] = -1] = "EOF";
	    CODE_POINTS[CODE_POINTS["NULL"] = 0] = "NULL";
	    CODE_POINTS[CODE_POINTS["TABULATION"] = 9] = "TABULATION";
	    CODE_POINTS[CODE_POINTS["CARRIAGE_RETURN"] = 13] = "CARRIAGE_RETURN";
	    CODE_POINTS[CODE_POINTS["LINE_FEED"] = 10] = "LINE_FEED";
	    CODE_POINTS[CODE_POINTS["FORM_FEED"] = 12] = "FORM_FEED";
	    CODE_POINTS[CODE_POINTS["SPACE"] = 32] = "SPACE";
	    CODE_POINTS[CODE_POINTS["EXCLAMATION_MARK"] = 33] = "EXCLAMATION_MARK";
	    CODE_POINTS[CODE_POINTS["QUOTATION_MARK"] = 34] = "QUOTATION_MARK";
	    CODE_POINTS[CODE_POINTS["NUMBER_SIGN"] = 35] = "NUMBER_SIGN";
	    CODE_POINTS[CODE_POINTS["AMPERSAND"] = 38] = "AMPERSAND";
	    CODE_POINTS[CODE_POINTS["APOSTROPHE"] = 39] = "APOSTROPHE";
	    CODE_POINTS[CODE_POINTS["HYPHEN_MINUS"] = 45] = "HYPHEN_MINUS";
	    CODE_POINTS[CODE_POINTS["SOLIDUS"] = 47] = "SOLIDUS";
	    CODE_POINTS[CODE_POINTS["DIGIT_0"] = 48] = "DIGIT_0";
	    CODE_POINTS[CODE_POINTS["DIGIT_9"] = 57] = "DIGIT_9";
	    CODE_POINTS[CODE_POINTS["SEMICOLON"] = 59] = "SEMICOLON";
	    CODE_POINTS[CODE_POINTS["LESS_THAN_SIGN"] = 60] = "LESS_THAN_SIGN";
	    CODE_POINTS[CODE_POINTS["EQUALS_SIGN"] = 61] = "EQUALS_SIGN";
	    CODE_POINTS[CODE_POINTS["GREATER_THAN_SIGN"] = 62] = "GREATER_THAN_SIGN";
	    CODE_POINTS[CODE_POINTS["QUESTION_MARK"] = 63] = "QUESTION_MARK";
	    CODE_POINTS[CODE_POINTS["LATIN_CAPITAL_A"] = 65] = "LATIN_CAPITAL_A";
	    CODE_POINTS[CODE_POINTS["LATIN_CAPITAL_F"] = 70] = "LATIN_CAPITAL_F";
	    CODE_POINTS[CODE_POINTS["LATIN_CAPITAL_X"] = 88] = "LATIN_CAPITAL_X";
	    CODE_POINTS[CODE_POINTS["LATIN_CAPITAL_Z"] = 90] = "LATIN_CAPITAL_Z";
	    CODE_POINTS[CODE_POINTS["RIGHT_SQUARE_BRACKET"] = 93] = "RIGHT_SQUARE_BRACKET";
	    CODE_POINTS[CODE_POINTS["GRAVE_ACCENT"] = 96] = "GRAVE_ACCENT";
	    CODE_POINTS[CODE_POINTS["LATIN_SMALL_A"] = 97] = "LATIN_SMALL_A";
	    CODE_POINTS[CODE_POINTS["LATIN_SMALL_F"] = 102] = "LATIN_SMALL_F";
	    CODE_POINTS[CODE_POINTS["LATIN_SMALL_X"] = 120] = "LATIN_SMALL_X";
	    CODE_POINTS[CODE_POINTS["LATIN_SMALL_Z"] = 122] = "LATIN_SMALL_Z";
	    CODE_POINTS[CODE_POINTS["REPLACEMENT_CHARACTER"] = 65533] = "REPLACEMENT_CHARACTER";
	})(CODE_POINTS = CODE_POINTS || (CODE_POINTS = {}));
	const SEQUENCES = {
	    DASH_DASH: '--',
	    CDATA_START: '[CDATA[',
	    DOCTYPE: 'doctype',
	    SCRIPT: 'script',
	    PUBLIC: 'public',
	    SYSTEM: 'system',
	};
	//Surrogates
	function isSurrogate(cp) {
	    return cp >= 55296 && cp <= 57343;
	}
	function isSurrogatePair(cp) {
	    return cp >= 56320 && cp <= 57343;
	}
	function getSurrogatePairCodePoint(cp1, cp2) {
	    return (cp1 - 55296) * 1024 + 9216 + cp2;
	}
	//NOTE: excluding NULL and ASCII whitespace
	function isControlCodePoint(cp) {
	    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||
	        (cp >= 0x7f && cp <= 0x9f));
	}
	function isUndefinedCodePoint(cp) {
	    return (cp >= 64976 && cp <= 65007) || UNDEFINED_CODE_POINTS.has(cp);
	}

	var ERR;
	(function (ERR) {
	    ERR["controlCharacterInInputStream"] = "control-character-in-input-stream";
	    ERR["noncharacterInInputStream"] = "noncharacter-in-input-stream";
	    ERR["surrogateInInputStream"] = "surrogate-in-input-stream";
	    ERR["nonVoidHtmlElementStartTagWithTrailingSolidus"] = "non-void-html-element-start-tag-with-trailing-solidus";
	    ERR["endTagWithAttributes"] = "end-tag-with-attributes";
	    ERR["endTagWithTrailingSolidus"] = "end-tag-with-trailing-solidus";
	    ERR["unexpectedSolidusInTag"] = "unexpected-solidus-in-tag";
	    ERR["unexpectedNullCharacter"] = "unexpected-null-character";
	    ERR["unexpectedQuestionMarkInsteadOfTagName"] = "unexpected-question-mark-instead-of-tag-name";
	    ERR["invalidFirstCharacterOfTagName"] = "invalid-first-character-of-tag-name";
	    ERR["unexpectedEqualsSignBeforeAttributeName"] = "unexpected-equals-sign-before-attribute-name";
	    ERR["missingEndTagName"] = "missing-end-tag-name";
	    ERR["unexpectedCharacterInAttributeName"] = "unexpected-character-in-attribute-name";
	    ERR["unknownNamedCharacterReference"] = "unknown-named-character-reference";
	    ERR["missingSemicolonAfterCharacterReference"] = "missing-semicolon-after-character-reference";
	    ERR["unexpectedCharacterAfterDoctypeSystemIdentifier"] = "unexpected-character-after-doctype-system-identifier";
	    ERR["unexpectedCharacterInUnquotedAttributeValue"] = "unexpected-character-in-unquoted-attribute-value";
	    ERR["eofBeforeTagName"] = "eof-before-tag-name";
	    ERR["eofInTag"] = "eof-in-tag";
	    ERR["missingAttributeValue"] = "missing-attribute-value";
	    ERR["missingWhitespaceBetweenAttributes"] = "missing-whitespace-between-attributes";
	    ERR["missingWhitespaceAfterDoctypePublicKeyword"] = "missing-whitespace-after-doctype-public-keyword";
	    ERR["missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers"] = "missing-whitespace-between-doctype-public-and-system-identifiers";
	    ERR["missingWhitespaceAfterDoctypeSystemKeyword"] = "missing-whitespace-after-doctype-system-keyword";
	    ERR["missingQuoteBeforeDoctypePublicIdentifier"] = "missing-quote-before-doctype-public-identifier";
	    ERR["missingQuoteBeforeDoctypeSystemIdentifier"] = "missing-quote-before-doctype-system-identifier";
	    ERR["missingDoctypePublicIdentifier"] = "missing-doctype-public-identifier";
	    ERR["missingDoctypeSystemIdentifier"] = "missing-doctype-system-identifier";
	    ERR["abruptDoctypePublicIdentifier"] = "abrupt-doctype-public-identifier";
	    ERR["abruptDoctypeSystemIdentifier"] = "abrupt-doctype-system-identifier";
	    ERR["cdataInHtmlContent"] = "cdata-in-html-content";
	    ERR["incorrectlyOpenedComment"] = "incorrectly-opened-comment";
	    ERR["eofInScriptHtmlCommentLikeText"] = "eof-in-script-html-comment-like-text";
	    ERR["eofInDoctype"] = "eof-in-doctype";
	    ERR["nestedComment"] = "nested-comment";
	    ERR["abruptClosingOfEmptyComment"] = "abrupt-closing-of-empty-comment";
	    ERR["eofInComment"] = "eof-in-comment";
	    ERR["incorrectlyClosedComment"] = "incorrectly-closed-comment";
	    ERR["eofInCdata"] = "eof-in-cdata";
	    ERR["absenceOfDigitsInNumericCharacterReference"] = "absence-of-digits-in-numeric-character-reference";
	    ERR["nullCharacterReference"] = "null-character-reference";
	    ERR["surrogateCharacterReference"] = "surrogate-character-reference";
	    ERR["characterReferenceOutsideUnicodeRange"] = "character-reference-outside-unicode-range";
	    ERR["controlCharacterReference"] = "control-character-reference";
	    ERR["noncharacterCharacterReference"] = "noncharacter-character-reference";
	    ERR["missingWhitespaceBeforeDoctypeName"] = "missing-whitespace-before-doctype-name";
	    ERR["missingDoctypeName"] = "missing-doctype-name";
	    ERR["invalidCharacterSequenceAfterDoctypeName"] = "invalid-character-sequence-after-doctype-name";
	    ERR["duplicateAttribute"] = "duplicate-attribute";
	    ERR["nonConformingDoctype"] = "non-conforming-doctype";
	    ERR["missingDoctype"] = "missing-doctype";
	    ERR["misplacedDoctype"] = "misplaced-doctype";
	    ERR["endTagWithoutMatchingOpenElement"] = "end-tag-without-matching-open-element";
	    ERR["closingOfElementWithOpenChildElements"] = "closing-of-element-with-open-child-elements";
	    ERR["disallowedContentInNoscriptInHead"] = "disallowed-content-in-noscript-in-head";
	    ERR["openElementsLeftAfterEof"] = "open-elements-left-after-eof";
	    ERR["abandonedHeadElementChild"] = "abandoned-head-element-child";
	    ERR["misplacedStartTagForHeadElement"] = "misplaced-start-tag-for-head-element";
	    ERR["nestedNoscriptInHead"] = "nested-noscript-in-head";
	    ERR["eofInElementThatCanContainOnlyText"] = "eof-in-element-that-can-contain-only-text";
	})(ERR = ERR || (ERR = {}));

	//Const
	const DEFAULT_BUFFER_WATERLINE = 1 << 16;
	//Preprocessor
	//NOTE: HTML input preprocessing
	//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)
	class Preprocessor {
	    constructor(handler) {
	        this.handler = handler;
	        this.html = '';
	        this.pos = -1;
	        // NOTE: Initial `lastGapPos` is -2, to ensure `col` on initialisation is 0
	        this.lastGapPos = -2;
	        this.gapStack = [];
	        this.skipNextNewLine = false;
	        this.lastChunkWritten = false;
	        this.endOfChunkHit = false;
	        this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;
	        this.isEol = false;
	        this.lineStartPos = 0;
	        this.droppedBufferSize = 0;
	        this.line = 1;
	        //NOTE: avoid reporting errors twice on advance/retreat
	        this.lastErrOffset = -1;
	    }
	    /** The column on the current line. If we just saw a gap (eg. a surrogate pair), return the index before. */
	    get col() {
	        return this.pos - this.lineStartPos + Number(this.lastGapPos !== this.pos);
	    }
	    get offset() {
	        return this.droppedBufferSize + this.pos;
	    }
	    getError(code) {
	        const { line, col, offset } = this;
	        return {
	            code,
	            startLine: line,
	            endLine: line,
	            startCol: col,
	            endCol: col,
	            startOffset: offset,
	            endOffset: offset,
	        };
	    }
	    _err(code) {
	        if (this.handler.onParseError && this.lastErrOffset !== this.offset) {
	            this.lastErrOffset = this.offset;
	            this.handler.onParseError(this.getError(code));
	        }
	    }
	    _addGap() {
	        this.gapStack.push(this.lastGapPos);
	        this.lastGapPos = this.pos;
	    }
	    _processSurrogate(cp) {
	        //NOTE: try to peek a surrogate pair
	        if (this.pos !== this.html.length - 1) {
	            const nextCp = this.html.charCodeAt(this.pos + 1);
	            if (isSurrogatePair(nextCp)) {
	                //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.
	                this.pos++;
	                //NOTE: add a gap that should be avoided during retreat
	                this._addGap();
	                return getSurrogatePairCodePoint(cp, nextCp);
	            }
	        }
	        //NOTE: we are at the end of a chunk, therefore we can't infer the surrogate pair yet.
	        else if (!this.lastChunkWritten) {
	            this.endOfChunkHit = true;
	            return CODE_POINTS.EOF;
	        }
	        //NOTE: isolated surrogate
	        this._err(ERR.surrogateInInputStream);
	        return cp;
	    }
	    willDropParsedChunk() {
	        return this.pos > this.bufferWaterline;
	    }
	    dropParsedChunk() {
	        if (this.willDropParsedChunk()) {
	            this.html = this.html.substring(this.pos);
	            this.lineStartPos -= this.pos;
	            this.droppedBufferSize += this.pos;
	            this.pos = 0;
	            this.lastGapPos = -2;
	            this.gapStack.length = 0;
	        }
	    }
	    write(chunk, isLastChunk) {
	        if (this.html.length > 0) {
	            this.html += chunk;
	        }
	        else {
	            this.html = chunk;
	        }
	        this.endOfChunkHit = false;
	        this.lastChunkWritten = isLastChunk;
	    }
	    insertHtmlAtCurrentPos(chunk) {
	        this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1);
	        this.endOfChunkHit = false;
	    }
	    startsWith(pattern, caseSensitive) {
	        // Check if our buffer has enough characters
	        if (this.pos + pattern.length > this.html.length) {
	            this.endOfChunkHit = !this.lastChunkWritten;
	            return false;
	        }
	        if (caseSensitive) {
	            return this.html.startsWith(pattern, this.pos);
	        }
	        for (let i = 0; i < pattern.length; i++) {
	            const cp = this.html.charCodeAt(this.pos + i) | 0x20;
	            if (cp !== pattern.charCodeAt(i)) {
	                return false;
	            }
	        }
	        return true;
	    }
	    peek(offset) {
	        const pos = this.pos + offset;
	        if (pos >= this.html.length) {
	            this.endOfChunkHit = !this.lastChunkWritten;
	            return CODE_POINTS.EOF;
	        }
	        const code = this.html.charCodeAt(pos);
	        return code === CODE_POINTS.CARRIAGE_RETURN ? CODE_POINTS.LINE_FEED : code;
	    }
	    advance() {
	        this.pos++;
	        //NOTE: LF should be in the last column of the line
	        if (this.isEol) {
	            this.isEol = false;
	            this.line++;
	            this.lineStartPos = this.pos;
	        }
	        if (this.pos >= this.html.length) {
	            this.endOfChunkHit = !this.lastChunkWritten;
	            return CODE_POINTS.EOF;
	        }
	        let cp = this.html.charCodeAt(this.pos);
	        //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters
	        if (cp === CODE_POINTS.CARRIAGE_RETURN) {
	            this.isEol = true;
	            this.skipNextNewLine = true;
	            return CODE_POINTS.LINE_FEED;
	        }
	        //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character
	        //must be ignored.
	        if (cp === CODE_POINTS.LINE_FEED) {
	            this.isEol = true;
	            if (this.skipNextNewLine) {
	                // `line` will be bumped again in the recursive call.
	                this.line--;
	                this.skipNextNewLine = false;
	                this._addGap();
	                return this.advance();
	            }
	        }
	        this.skipNextNewLine = false;
	        if (isSurrogate(cp)) {
	            cp = this._processSurrogate(cp);
	        }
	        //OPTIMIZATION: first check if code point is in the common allowed
	        //range (ASCII alphanumeric, whitespaces, big chunk of BMP)
	        //before going into detailed performance cost validation.
	        const isCommonValidRange = this.handler.onParseError === null ||
	            (cp > 0x1f && cp < 0x7f) ||
	            cp === CODE_POINTS.LINE_FEED ||
	            cp === CODE_POINTS.CARRIAGE_RETURN ||
	            (cp > 0x9f && cp < 64976);
	        if (!isCommonValidRange) {
	            this._checkForProblematicCharacters(cp);
	        }
	        return cp;
	    }
	    _checkForProblematicCharacters(cp) {
	        if (isControlCodePoint(cp)) {
	            this._err(ERR.controlCharacterInInputStream);
	        }
	        else if (isUndefinedCodePoint(cp)) {
	            this._err(ERR.noncharacterInInputStream);
	        }
	    }
	    retreat(count) {
	        this.pos -= count;
	        while (this.pos < this.lastGapPos) {
	            this.lastGapPos = this.gapStack.pop();
	            this.pos--;
	        }
	        this.isEol = false;
	    }
	}

	var TokenType;
	(function (TokenType) {
	    TokenType[TokenType["CHARACTER"] = 0] = "CHARACTER";
	    TokenType[TokenType["NULL_CHARACTER"] = 1] = "NULL_CHARACTER";
	    TokenType[TokenType["WHITESPACE_CHARACTER"] = 2] = "WHITESPACE_CHARACTER";
	    TokenType[TokenType["START_TAG"] = 3] = "START_TAG";
	    TokenType[TokenType["END_TAG"] = 4] = "END_TAG";
	    TokenType[TokenType["COMMENT"] = 5] = "COMMENT";
	    TokenType[TokenType["DOCTYPE"] = 6] = "DOCTYPE";
	    TokenType[TokenType["EOF"] = 7] = "EOF";
	    TokenType[TokenType["HIBERNATION"] = 8] = "HIBERNATION";
	})(TokenType = TokenType || (TokenType = {}));
	function getTokenAttr(token, attrName) {
	    for (let i = token.attrs.length - 1; i >= 0; i--) {
	        if (token.attrs[i].name === attrName) {
	            return token.attrs[i].value;
	        }
	    }
	    return null;
	}

	// Generated using scripts/write-decode-map.ts
	const htmlDecodeTree = new Uint16Array(
	// prettier-ignore
	"\u1d41<\xd5\u0131\u028a\u049d\u057b\u05d0\u0675\u06de\u07a2\u07d6\u080f\u0a4a\u0a91\u0da1\u0e6d\u0f09\u0f26\u10ca\u1228\u12e1\u1415\u149d\u14c3\u14df\u1525\0\0\0\0\0\0\u156b\u16cd\u198d\u1c12\u1ddd\u1f7e\u2060\u21b0\u228d\u23c0\u23fb\u2442\u2824\u2912\u2d08\u2e48\u2fce\u3016\u32ba\u3639\u37ac\u38fe\u3a28\u3a71\u3ae0\u3b2e\u0800EMabcfglmnoprstu\\bfms\x7f\x84\x8b\x90\x95\x98\xa6\xb3\xb9\xc8\xcflig\u803b\xc6\u40c6P\u803b&\u4026cute\u803b\xc1\u40c1reve;\u4102\u0100iyx}rc\u803b\xc2\u40c2;\u4410r;\uc000\ud835\udd04rave\u803b\xc0\u40c0pha;\u4391acr;\u4100d;\u6a53\u0100gp\x9d\xa1on;\u4104f;\uc000\ud835\udd38plyFunction;\u6061ing\u803b\xc5\u40c5\u0100cs\xbe\xc3r;\uc000\ud835\udc9cign;\u6254ilde\u803b\xc3\u40c3ml\u803b\xc4\u40c4\u0400aceforsu\xe5\xfb\xfe\u0117\u011c\u0122\u0127\u012a\u0100cr\xea\xf2kslash;\u6216\u0176\xf6\xf8;\u6ae7ed;\u6306y;\u4411\u0180crt\u0105\u010b\u0114ause;\u6235noullis;\u612ca;\u4392r;\uc000\ud835\udd05pf;\uc000\ud835\udd39eve;\u42d8c\xf2\u0113mpeq;\u624e\u0700HOacdefhilorsu\u014d\u0151\u0156\u0180\u019e\u01a2\u01b5\u01b7\u01ba\u01dc\u0215\u0273\u0278\u027ecy;\u4427PY\u803b\xa9\u40a9\u0180cpy\u015d\u0162\u017aute;\u4106\u0100;i\u0167\u0168\u62d2talDifferentialD;\u6145leys;\u612d\u0200aeio\u0189\u018e\u0194\u0198ron;\u410cdil\u803b\xc7\u40c7rc;\u4108nint;\u6230ot;\u410a\u0100dn\u01a7\u01adilla;\u40b8terDot;\u40b7\xf2\u017fi;\u43a7rcle\u0200DMPT\u01c7\u01cb\u01d1\u01d6ot;\u6299inus;\u6296lus;\u6295imes;\u6297o\u0100cs\u01e2\u01f8kwiseContourIntegral;\u6232eCurly\u0100DQ\u0203\u020foubleQuote;\u601duote;\u6019\u0200lnpu\u021e\u0228\u0247\u0255on\u0100;e\u0225\u0226\u6237;\u6a74\u0180git\u022f\u0236\u023aruent;\u6261nt;\u622fourIntegral;\u622e\u0100fr\u024c\u024e;\u6102oduct;\u6210nterClockwiseContourIntegral;\u6233oss;\u6a2fcr;\uc000\ud835\udc9ep\u0100;C\u0284\u0285\u62d3ap;\u624d\u0580DJSZacefios\u02a0\u02ac\u02b0\u02b4\u02b8\u02cb\u02d7\u02e1\u02e6\u0333\u048d\u0100;o\u0179\u02a5trahd;\u6911cy;\u4402cy;\u4405cy;\u440f\u0180grs\u02bf\u02c4\u02c7ger;\u6021r;\u61a1hv;\u6ae4\u0100ay\u02d0\u02d5ron;\u410e;\u4414l\u0100;t\u02dd\u02de\u6207a;\u4394r;\uc000\ud835\udd07\u0100af\u02eb\u0327\u0100cm\u02f0\u0322ritical\u0200ADGT\u0300\u0306\u0316\u031ccute;\u40b4o\u0174\u030b\u030d;\u42d9bleAcute;\u42ddrave;\u4060ilde;\u42dcond;\u62c4ferentialD;\u6146\u0470\u033d\0\0\0\u0342\u0354\0\u0405f;\uc000\ud835\udd3b\u0180;DE\u0348\u0349\u034d\u40a8ot;\u60dcqual;\u6250ble\u0300CDLRUV\u0363\u0372\u0382\u03cf\u03e2\u03f8ontourIntegra\xec\u0239o\u0274\u0379\0\0\u037b\xbb\u0349nArrow;\u61d3\u0100eo\u0387\u03a4ft\u0180ART\u0390\u0396\u03a1rrow;\u61d0ightArrow;\u61d4e\xe5\u02cang\u0100LR\u03ab\u03c4eft\u0100AR\u03b3\u03b9rrow;\u67f8ightArrow;\u67faightArrow;\u67f9ight\u0100AT\u03d8\u03derrow;\u61d2ee;\u62a8p\u0241\u03e9\0\0\u03efrrow;\u61d1ownArrow;\u61d5erticalBar;\u6225n\u0300ABLRTa\u0412\u042a\u0430\u045e\u047f\u037crrow\u0180;BU\u041d\u041e\u0422\u6193ar;\u6913pArrow;\u61f5reve;\u4311eft\u02d2\u043a\0\u0446\0\u0450ightVector;\u6950eeVector;\u695eector\u0100;B\u0459\u045a\u61bdar;\u6956ight\u01d4\u0467\0\u0471eeVector;\u695fector\u0100;B\u047a\u047b\u61c1ar;\u6957ee\u0100;A\u0486\u0487\u62a4rrow;\u61a7\u0100ct\u0492\u0497r;\uc000\ud835\udc9frok;\u4110\u0800NTacdfglmopqstux\u04bd\u04c0\u04c4\u04cb\u04de\u04e2\u04e7\u04ee\u04f5\u0521\u052f\u0536\u0552\u055d\u0560\u0565G;\u414aH\u803b\xd0\u40d0cute\u803b\xc9\u40c9\u0180aiy\u04d2\u04d7\u04dcron;\u411arc\u803b\xca\u40ca;\u442dot;\u4116r;\uc000\ud835\udd08rave\u803b\xc8\u40c8ement;\u6208\u0100ap\u04fa\u04fecr;\u4112ty\u0253\u0506\0\0\u0512mallSquare;\u65fberySmallSquare;\u65ab\u0100gp\u0526\u052aon;\u4118f;\uc000\ud835\udd3csilon;\u4395u\u0100ai\u053c\u0549l\u0100;T\u0542\u0543\u6a75ilde;\u6242librium;\u61cc\u0100ci\u0557\u055ar;\u6130m;\u6a73a;\u4397ml\u803b\xcb\u40cb\u0100ip\u056a\u056fsts;\u6203onentialE;\u6147\u0280cfios\u0585\u0588\u058d\u05b2\u05ccy;\u4424r;\uc000\ud835\udd09lled\u0253\u0597\0\0\u05a3mallSquare;\u65fcerySmallSquare;\u65aa\u0370\u05ba\0\u05bf\0\0\u05c4f;\uc000\ud835\udd3dAll;\u6200riertrf;\u6131c\xf2\u05cb\u0600JTabcdfgorst\u05e8\u05ec\u05ef\u05fa\u0600\u0612\u0616\u061b\u061d\u0623\u066c\u0672cy;\u4403\u803b>\u403emma\u0100;d\u05f7\u05f8\u4393;\u43dcreve;\u411e\u0180eiy\u0607\u060c\u0610dil;\u4122rc;\u411c;\u4413ot;\u4120r;\uc000\ud835\udd0a;\u62d9pf;\uc000\ud835\udd3eeater\u0300EFGLST\u0635\u0644\u064e\u0656\u065b\u0666qual\u0100;L\u063e\u063f\u6265ess;\u62dbullEqual;\u6267reater;\u6aa2ess;\u6277lantEqual;\u6a7eilde;\u6273cr;\uc000\ud835\udca2;\u626b\u0400Aacfiosu\u0685\u068b\u0696\u069b\u069e\u06aa\u06be\u06caRDcy;\u442a\u0100ct\u0690\u0694ek;\u42c7;\u405eirc;\u4124r;\u610clbertSpace;\u610b\u01f0\u06af\0\u06b2f;\u610dizontalLine;\u6500\u0100ct\u06c3\u06c5\xf2\u06a9rok;\u4126mp\u0144\u06d0\u06d8ownHum\xf0\u012fqual;\u624f\u0700EJOacdfgmnostu\u06fa\u06fe\u0703\u0707\u070e\u071a\u071e\u0721\u0728\u0744\u0778\u078b\u078f\u0795cy;\u4415lig;\u4132cy;\u4401cute\u803b\xcd\u40cd\u0100iy\u0713\u0718rc\u803b\xce\u40ce;\u4418ot;\u4130r;\u6111rave\u803b\xcc\u40cc\u0180;ap\u0720\u072f\u073f\u0100cg\u0734\u0737r;\u412ainaryI;\u6148lie\xf3\u03dd\u01f4\u0749\0\u0762\u0100;e\u074d\u074e\u622c\u0100gr\u0753\u0758ral;\u622bsection;\u62c2isible\u0100CT\u076c\u0772omma;\u6063imes;\u6062\u0180gpt\u077f\u0783\u0788on;\u412ef;\uc000\ud835\udd40a;\u4399cr;\u6110ilde;\u4128\u01eb\u079a\0\u079ecy;\u4406l\u803b\xcf\u40cf\u0280cfosu\u07ac\u07b7\u07bc\u07c2\u07d0\u0100iy\u07b1\u07b5rc;\u4134;\u4419r;\uc000\ud835\udd0dpf;\uc000\ud835\udd41\u01e3\u07c7\0\u07ccr;\uc000\ud835\udca5rcy;\u4408kcy;\u4404\u0380HJacfos\u07e4\u07e8\u07ec\u07f1\u07fd\u0802\u0808cy;\u4425cy;\u440cppa;\u439a\u0100ey\u07f6\u07fbdil;\u4136;\u441ar;\uc000\ud835\udd0epf;\uc000\ud835\udd42cr;\uc000\ud835\udca6\u0580JTaceflmost\u0825\u0829\u082c\u0850\u0863\u09b3\u09b8\u09c7\u09cd\u0a37\u0a47cy;\u4409\u803b<\u403c\u0280cmnpr\u0837\u083c\u0841\u0844\u084dute;\u4139bda;\u439bg;\u67ealacetrf;\u6112r;\u619e\u0180aey\u0857\u085c\u0861ron;\u413ddil;\u413b;\u441b\u0100fs\u0868\u0970t\u0500ACDFRTUVar\u087e\u08a9\u08b1\u08e0\u08e6\u08fc\u092f\u095b\u0390\u096a\u0100nr\u0883\u088fgleBracket;\u67e8row\u0180;BR\u0899\u089a\u089e\u6190ar;\u61e4ightArrow;\u61c6eiling;\u6308o\u01f5\u08b7\0\u08c3bleBracket;\u67e6n\u01d4\u08c8\0\u08d2eeVector;\u6961ector\u0100;B\u08db\u08dc\u61c3ar;\u6959loor;\u630aight\u0100AV\u08ef\u08f5rrow;\u6194ector;\u694e\u0100er\u0901\u0917e\u0180;AV\u0909\u090a\u0910\u62a3rrow;\u61a4ector;\u695aiangle\u0180;BE\u0924\u0925\u0929\u62b2ar;\u69cfqual;\u62b4p\u0180DTV\u0937\u0942\u094cownVector;\u6951eeVector;\u6960ector\u0100;B\u0956\u0957\u61bfar;\u6958ector\u0100;B\u0965\u0966\u61bcar;\u6952ight\xe1\u039cs\u0300EFGLST\u097e\u098b\u0995\u099d\u09a2\u09adqualGreater;\u62daullEqual;\u6266reater;\u6276ess;\u6aa1lantEqual;\u6a7dilde;\u6272r;\uc000\ud835\udd0f\u0100;e\u09bd\u09be\u62d8ftarrow;\u61daidot;\u413f\u0180npw\u09d4\u0a16\u0a1bg\u0200LRlr\u09de\u09f7\u0a02\u0a10eft\u0100AR\u09e6\u09ecrrow;\u67f5ightArrow;\u67f7ightArrow;\u67f6eft\u0100ar\u03b3\u0a0aight\xe1\u03bfight\xe1\u03caf;\uc000\ud835\udd43er\u0100LR\u0a22\u0a2ceftArrow;\u6199ightArrow;\u6198\u0180cht\u0a3e\u0a40\u0a42\xf2\u084c;\u61b0rok;\u4141;\u626a\u0400acefiosu\u0a5a\u0a5d\u0a60\u0a77\u0a7c\u0a85\u0a8b\u0a8ep;\u6905y;\u441c\u0100dl\u0a65\u0a6fiumSpace;\u605flintrf;\u6133r;\uc000\ud835\udd10nusPlus;\u6213pf;\uc000\ud835\udd44c\xf2\u0a76;\u439c\u0480Jacefostu\u0aa3\u0aa7\u0aad\u0ac0\u0b14\u0b19\u0d91\u0d97\u0d9ecy;\u440acute;\u4143\u0180aey\u0ab4\u0ab9\u0aberon;\u4147dil;\u4145;\u441d\u0180gsw\u0ac7\u0af0\u0b0eative\u0180MTV\u0ad3\u0adf\u0ae8ediumSpace;\u600bhi\u0100cn\u0ae6\u0ad8\xeb\u0ad9eryThi\xee\u0ad9ted\u0100GL\u0af8\u0b06reaterGreate\xf2\u0673essLes\xf3\u0a48Line;\u400ar;\uc000\ud835\udd11\u0200Bnpt\u0b22\u0b28\u0b37\u0b3areak;\u6060BreakingSpace;\u40a0f;\u6115\u0680;CDEGHLNPRSTV\u0b55\u0b56\u0b6a\u0b7c\u0ba1\u0beb\u0c04\u0c5e\u0c84\u0ca6\u0cd8\u0d61\u0d85\u6aec\u0100ou\u0b5b\u0b64ngruent;\u6262pCap;\u626doubleVerticalBar;\u6226\u0180lqx\u0b83\u0b8a\u0b9bement;\u6209ual\u0100;T\u0b92\u0b93\u6260ilde;\uc000\u2242\u0338ists;\u6204reater\u0380;EFGLST\u0bb6\u0bb7\u0bbd\u0bc9\u0bd3\u0bd8\u0be5\u626fqual;\u6271ullEqual;\uc000\u2267\u0338reater;\uc000\u226b\u0338ess;\u6279lantEqual;\uc000\u2a7e\u0338ilde;\u6275ump\u0144\u0bf2\u0bfdownHump;\uc000\u224e\u0338qual;\uc000\u224f\u0338e\u0100fs\u0c0a\u0c27tTriangle\u0180;BE\u0c1a\u0c1b\u0c21\u62eaar;\uc000\u29cf\u0338qual;\u62ecs\u0300;EGLST\u0c35\u0c36\u0c3c\u0c44\u0c4b\u0c58\u626equal;\u6270reater;\u6278ess;\uc000\u226a\u0338lantEqual;\uc000\u2a7d\u0338ilde;\u6274ested\u0100GL\u0c68\u0c79reaterGreater;\uc000\u2aa2\u0338essLess;\uc000\u2aa1\u0338recedes\u0180;ES\u0c92\u0c93\u0c9b\u6280qual;\uc000\u2aaf\u0338lantEqual;\u62e0\u0100ei\u0cab\u0cb9verseElement;\u620cghtTriangle\u0180;BE\u0ccb\u0ccc\u0cd2\u62ebar;\uc000\u29d0\u0338qual;\u62ed\u0100qu\u0cdd\u0d0cuareSu\u0100bp\u0ce8\u0cf9set\u0100;E\u0cf0\u0cf3\uc000\u228f\u0338qual;\u62e2erset\u0100;E\u0d03\u0d06\uc000\u2290\u0338qual;\u62e3\u0180bcp\u0d13\u0d24\u0d4eset\u0100;E\u0d1b\u0d1e\uc000\u2282\u20d2qual;\u6288ceeds\u0200;EST\u0d32\u0d33\u0d3b\u0d46\u6281qual;\uc000\u2ab0\u0338lantEqual;\u62e1ilde;\uc000\u227f\u0338erset\u0100;E\u0d58\u0d5b\uc000\u2283\u20d2qual;\u6289ilde\u0200;EFT\u0d6e\u0d6f\u0d75\u0d7f\u6241qual;\u6244ullEqual;\u6247ilde;\u6249erticalBar;\u6224cr;\uc000\ud835\udca9ilde\u803b\xd1\u40d1;\u439d\u0700Eacdfgmoprstuv\u0dbd\u0dc2\u0dc9\u0dd5\u0ddb\u0de0\u0de7\u0dfc\u0e02\u0e20\u0e22\u0e32\u0e3f\u0e44lig;\u4152cute\u803b\xd3\u40d3\u0100iy\u0dce\u0dd3rc\u803b\xd4\u40d4;\u441eblac;\u4150r;\uc000\ud835\udd12rave\u803b\xd2\u40d2\u0180aei\u0dee\u0df2\u0df6cr;\u414cga;\u43a9cron;\u439fpf;\uc000\ud835\udd46enCurly\u0100DQ\u0e0e\u0e1aoubleQuote;\u601cuote;\u6018;\u6a54\u0100cl\u0e27\u0e2cr;\uc000\ud835\udcaaash\u803b\xd8\u40d8i\u016c\u0e37\u0e3cde\u803b\xd5\u40d5es;\u6a37ml\u803b\xd6\u40d6er\u0100BP\u0e4b\u0e60\u0100ar\u0e50\u0e53r;\u603eac\u0100ek\u0e5a\u0e5c;\u63deet;\u63b4arenthesis;\u63dc\u0480acfhilors\u0e7f\u0e87\u0e8a\u0e8f\u0e92\u0e94\u0e9d\u0eb0\u0efcrtialD;\u6202y;\u441fr;\uc000\ud835\udd13i;\u43a6;\u43a0usMinus;\u40b1\u0100ip\u0ea2\u0eadncareplan\xe5\u069df;\u6119\u0200;eio\u0eb9\u0eba\u0ee0\u0ee4\u6abbcedes\u0200;EST\u0ec8\u0ec9\u0ecf\u0eda\u627aqual;\u6aaflantEqual;\u627cilde;\u627eme;\u6033\u0100dp\u0ee9\u0eeeuct;\u620fortion\u0100;a\u0225\u0ef9l;\u621d\u0100ci\u0f01\u0f06r;\uc000\ud835\udcab;\u43a8\u0200Ufos\u0f11\u0f16\u0f1b\u0f1fOT\u803b\"\u4022r;\uc000\ud835\udd14pf;\u611acr;\uc000\ud835\udcac\u0600BEacefhiorsu\u0f3e\u0f43\u0f47\u0f60\u0f73\u0fa7\u0faa\u0fad\u1096\u10a9\u10b4\u10bearr;\u6910G\u803b\xae\u40ae\u0180cnr\u0f4e\u0f53\u0f56ute;\u4154g;\u67ebr\u0100;t\u0f5c\u0f5d\u61a0l;\u6916\u0180aey\u0f67\u0f6c\u0f71ron;\u4158dil;\u4156;\u4420\u0100;v\u0f78\u0f79\u611cerse\u0100EU\u0f82\u0f99\u0100lq\u0f87\u0f8eement;\u620builibrium;\u61cbpEquilibrium;\u696fr\xbb\u0f79o;\u43a1ght\u0400ACDFTUVa\u0fc1\u0feb\u0ff3\u1022\u1028\u105b\u1087\u03d8\u0100nr\u0fc6\u0fd2gleBracket;\u67e9row\u0180;BL\u0fdc\u0fdd\u0fe1\u6192ar;\u61e5eftArrow;\u61c4eiling;\u6309o\u01f5\u0ff9\0\u1005bleBracket;\u67e7n\u01d4\u100a\0\u1014eeVector;\u695dector\u0100;B\u101d\u101e\u61c2ar;\u6955loor;\u630b\u0100er\u102d\u1043e\u0180;AV\u1035\u1036\u103c\u62a2rrow;\u61a6ector;\u695biangle\u0180;BE\u1050\u1051\u1055\u62b3ar;\u69d0qual;\u62b5p\u0180DTV\u1063\u106e\u1078ownVector;\u694feeVector;\u695cector\u0100;B\u1082\u1083\u61bear;\u6954ector\u0100;B\u1091\u1092\u61c0ar;\u6953\u0100pu\u109b\u109ef;\u611dndImplies;\u6970ightarrow;\u61db\u0100ch\u10b9\u10bcr;\u611b;\u61b1leDelayed;\u69f4\u0680HOacfhimoqstu\u10e4\u10f1\u10f7\u10fd\u1119\u111e\u1151\u1156\u1161\u1167\u11b5\u11bb\u11bf\u0100Cc\u10e9\u10eeHcy;\u4429y;\u4428FTcy;\u442ccute;\u415a\u0280;aeiy\u1108\u1109\u110e\u1113\u1117\u6abcron;\u4160dil;\u415erc;\u415c;\u4421r;\uc000\ud835\udd16ort\u0200DLRU\u112a\u1134\u113e\u1149ownArrow\xbb\u041eeftArrow\xbb\u089aightArrow\xbb\u0fddpArrow;\u6191gma;\u43a3allCircle;\u6218pf;\uc000\ud835\udd4a\u0272\u116d\0\0\u1170t;\u621aare\u0200;ISU\u117b\u117c\u1189\u11af\u65a1ntersection;\u6293u\u0100bp\u118f\u119eset\u0100;E\u1197\u1198\u628fqual;\u6291erset\u0100;E\u11a8\u11a9\u6290qual;\u6292nion;\u6294cr;\uc000\ud835\udcaear;\u62c6\u0200bcmp\u11c8\u11db\u1209\u120b\u0100;s\u11cd\u11ce\u62d0et\u0100;E\u11cd\u11d5qual;\u6286\u0100ch\u11e0\u1205eeds\u0200;EST\u11ed\u11ee\u11f4\u11ff\u627bqual;\u6ab0lantEqual;\u627dilde;\u627fTh\xe1\u0f8c;\u6211\u0180;es\u1212\u1213\u1223\u62d1rset\u0100;E\u121c\u121d\u6283qual;\u6287et\xbb\u1213\u0580HRSacfhiors\u123e\u1244\u1249\u1255\u125e\u1271\u1276\u129f\u12c2\u12c8\u12d1ORN\u803b\xde\u40deADE;\u6122\u0100Hc\u124e\u1252cy;\u440by;\u4426\u0100bu\u125a\u125c;\u4009;\u43a4\u0180aey\u1265\u126a\u126fron;\u4164dil;\u4162;\u4422r;\uc000\ud835\udd17\u0100ei\u127b\u1289\u01f2\u1280\0\u1287efore;\u6234a;\u4398\u0100cn\u128e\u1298kSpace;\uc000\u205f\u200aSpace;\u6009lde\u0200;EFT\u12ab\u12ac\u12b2\u12bc\u623cqual;\u6243ullEqual;\u6245ilde;\u6248pf;\uc000\ud835\udd4bipleDot;\u60db\u0100ct\u12d6\u12dbr;\uc000\ud835\udcafrok;\u4166\u0ae1\u12f7\u130e\u131a\u1326\0\u132c\u1331\0\0\0\0\0\u1338\u133d\u1377\u1385\0\u13ff\u1404\u140a\u1410\u0100cr\u12fb\u1301ute\u803b\xda\u40dar\u0100;o\u1307\u1308\u619fcir;\u6949r\u01e3\u1313\0\u1316y;\u440eve;\u416c\u0100iy\u131e\u1323rc\u803b\xdb\u40db;\u4423blac;\u4170r;\uc000\ud835\udd18rave\u803b\xd9\u40d9acr;\u416a\u0100di\u1341\u1369er\u0100BP\u1348\u135d\u0100ar\u134d\u1350r;\u405fac\u0100ek\u1357\u1359;\u63dfet;\u63b5arenthesis;\u63ddon\u0100;P\u1370\u1371\u62c3lus;\u628e\u0100gp\u137b\u137fon;\u4172f;\uc000\ud835\udd4c\u0400ADETadps\u1395\u13ae\u13b8\u13c4\u03e8\u13d2\u13d7\u13f3rrow\u0180;BD\u1150\u13a0\u13a4ar;\u6912ownArrow;\u61c5ownArrow;\u6195quilibrium;\u696eee\u0100;A\u13cb\u13cc\u62a5rrow;\u61a5own\xe1\u03f3er\u0100LR\u13de\u13e8eftArrow;\u6196ightArrow;\u6197i\u0100;l\u13f9\u13fa\u43d2on;\u43a5ing;\u416ecr;\uc000\ud835\udcb0ilde;\u4168ml\u803b\xdc\u40dc\u0480Dbcdefosv\u1427\u142c\u1430\u1433\u143e\u1485\u148a\u1490\u1496ash;\u62abar;\u6aeby;\u4412ash\u0100;l\u143b\u143c\u62a9;\u6ae6\u0100er\u1443\u1445;\u62c1\u0180bty\u144c\u1450\u147aar;\u6016\u0100;i\u144f\u1455cal\u0200BLST\u1461\u1465\u146a\u1474ar;\u6223ine;\u407ceparator;\u6758ilde;\u6240ThinSpace;\u600ar;\uc000\ud835\udd19pf;\uc000\ud835\udd4dcr;\uc000\ud835\udcb1dash;\u62aa\u0280cefos\u14a7\u14ac\u14b1\u14b6\u14bcirc;\u4174dge;\u62c0r;\uc000\ud835\udd1apf;\uc000\ud835\udd4ecr;\uc000\ud835\udcb2\u0200fios\u14cb\u14d0\u14d2\u14d8r;\uc000\ud835\udd1b;\u439epf;\uc000\ud835\udd4fcr;\uc000\ud835\udcb3\u0480AIUacfosu\u14f1\u14f5\u14f9\u14fd\u1504\u150f\u1514\u151a\u1520cy;\u442fcy;\u4407cy;\u442ecute\u803b\xdd\u40dd\u0100iy\u1509\u150drc;\u4176;\u442br;\uc000\ud835\udd1cpf;\uc000\ud835\udd50cr;\uc000\ud835\udcb4ml;\u4178\u0400Hacdefos\u1535\u1539\u153f\u154b\u154f\u155d\u1560\u1564cy;\u4416cute;\u4179\u0100ay\u1544\u1549ron;\u417d;\u4417ot;\u417b\u01f2\u1554\0\u155boWidt\xe8\u0ad9a;\u4396r;\u6128pf;\u6124cr;\uc000\ud835\udcb5\u0be1\u1583\u158a\u1590\0\u15b0\u15b6\u15bf\0\0\0\0\u15c6\u15db\u15eb\u165f\u166d\0\u1695\u169b\u16b2\u16b9\0\u16becute\u803b\xe1\u40e1reve;\u4103\u0300;Ediuy\u159c\u159d\u15a1\u15a3\u15a8\u15ad\u623e;\uc000\u223e\u0333;\u623frc\u803b\xe2\u40e2te\u80bb\xb4\u0306;\u4430lig\u803b\xe6\u40e6\u0100;r\xb2\u15ba;\uc000\ud835\udd1erave\u803b\xe0\u40e0\u0100ep\u15ca\u15d6\u0100fp\u15cf\u15d4sym;\u6135\xe8\u15d3ha;\u43b1\u0100ap\u15dfc\u0100cl\u15e4\u15e7r;\u4101g;\u6a3f\u0264\u15f0\0\0\u160a\u0280;adsv\u15fa\u15fb\u15ff\u1601\u1607\u6227nd;\u6a55;\u6a5clope;\u6a58;\u6a5a\u0380;elmrsz\u1618\u1619\u161b\u161e\u163f\u164f\u1659\u6220;\u69a4e\xbb\u1619sd\u0100;a\u1625\u1626\u6221\u0461\u1630\u1632\u1634\u1636\u1638\u163a\u163c\u163e;\u69a8;\u69a9;\u69aa;\u69ab;\u69ac;\u69ad;\u69ae;\u69aft\u0100;v\u1645\u1646\u621fb\u0100;d\u164c\u164d\u62be;\u699d\u0100pt\u1654\u1657h;\u6222\xbb\xb9arr;\u637c\u0100gp\u1663\u1667on;\u4105f;\uc000\ud835\udd52\u0380;Eaeiop\u12c1\u167b\u167d\u1682\u1684\u1687\u168a;\u6a70cir;\u6a6f;\u624ad;\u624bs;\u4027rox\u0100;e\u12c1\u1692\xf1\u1683ing\u803b\xe5\u40e5\u0180cty\u16a1\u16a6\u16a8r;\uc000\ud835\udcb6;\u402amp\u0100;e\u12c1\u16af\xf1\u0288ilde\u803b\xe3\u40e3ml\u803b\xe4\u40e4\u0100ci\u16c2\u16c8onin\xf4\u0272nt;\u6a11\u0800Nabcdefiklnoprsu\u16ed\u16f1\u1730\u173c\u1743\u1748\u1778\u177d\u17e0\u17e6\u1839\u1850\u170d\u193d\u1948\u1970ot;\u6aed\u0100cr\u16f6\u171ek\u0200ceps\u1700\u1705\u170d\u1713ong;\u624cpsilon;\u43f6rime;\u6035im\u0100;e\u171a\u171b\u623dq;\u62cd\u0176\u1722\u1726ee;\u62bded\u0100;g\u172c\u172d\u6305e\xbb\u172drk\u0100;t\u135c\u1737brk;\u63b6\u0100oy\u1701\u1741;\u4431quo;\u601e\u0280cmprt\u1753\u175b\u1761\u1764\u1768aus\u0100;e\u010a\u0109ptyv;\u69b0s\xe9\u170cno\xf5\u0113\u0180ahw\u176f\u1771\u1773;\u43b2;\u6136een;\u626cr;\uc000\ud835\udd1fg\u0380costuvw\u178d\u179d\u17b3\u17c1\u17d5\u17db\u17de\u0180aiu\u1794\u1796\u179a\xf0\u0760rc;\u65efp\xbb\u1371\u0180dpt\u17a4\u17a8\u17adot;\u6a00lus;\u6a01imes;\u6a02\u0271\u17b9\0\0\u17becup;\u6a06ar;\u6605riangle\u0100du\u17cd\u17d2own;\u65bdp;\u65b3plus;\u6a04e\xe5\u1444\xe5\u14adarow;\u690d\u0180ako\u17ed\u1826\u1835\u0100cn\u17f2\u1823k\u0180lst\u17fa\u05ab\u1802ozenge;\u69ebriangle\u0200;dlr\u1812\u1813\u1818\u181d\u65b4own;\u65beeft;\u65c2ight;\u65b8k;\u6423\u01b1\u182b\0\u1833\u01b2\u182f\0\u1831;\u6592;\u65914;\u6593ck;\u6588\u0100eo\u183e\u184d\u0100;q\u1843\u1846\uc000=\u20e5uiv;\uc000\u2261\u20e5t;\u6310\u0200ptwx\u1859\u185e\u1867\u186cf;\uc000\ud835\udd53\u0100;t\u13cb\u1863om\xbb\u13cctie;\u62c8\u0600DHUVbdhmptuv\u1885\u1896\u18aa\u18bb\u18d7\u18db\u18ec\u18ff\u1905\u190a\u1910\u1921\u0200LRlr\u188e\u1890\u1892\u1894;\u6557;\u6554;\u6556;\u6553\u0280;DUdu\u18a1\u18a2\u18a4\u18a6\u18a8\u6550;\u6566;\u6569;\u6564;\u6567\u0200LRlr\u18b3\u18b5\u18b7\u18b9;\u655d;\u655a;\u655c;\u6559\u0380;HLRhlr\u18ca\u18cb\u18cd\u18cf\u18d1\u18d3\u18d5\u6551;\u656c;\u6563;\u6560;\u656b;\u6562;\u655fox;\u69c9\u0200LRlr\u18e4\u18e6\u18e8\u18ea;\u6555;\u6552;\u6510;\u650c\u0280;DUdu\u06bd\u18f7\u18f9\u18fb\u18fd;\u6565;\u6568;\u652c;\u6534inus;\u629flus;\u629eimes;\u62a0\u0200LRlr\u1919\u191b\u191d\u191f;\u655b;\u6558;\u6518;\u6514\u0380;HLRhlr\u1930\u1931\u1933\u1935\u1937\u1939\u193b\u6502;\u656a;\u6561;\u655e;\u653c;\u6524;\u651c\u0100ev\u0123\u1942bar\u803b\xa6\u40a6\u0200ceio\u1951\u1956\u195a\u1960r;\uc000\ud835\udcb7mi;\u604fm\u0100;e\u171a\u171cl\u0180;bh\u1968\u1969\u196b\u405c;\u69c5sub;\u67c8\u016c\u1974\u197el\u0100;e\u1979\u197a\u6022t\xbb\u197ap\u0180;Ee\u012f\u1985\u1987;\u6aae\u0100;q\u06dc\u06db\u0ce1\u19a7\0\u19e8\u1a11\u1a15\u1a32\0\u1a37\u1a50\0\0\u1ab4\0\0\u1ac1\0\0\u1b21\u1b2e\u1b4d\u1b52\0\u1bfd\0\u1c0c\u0180cpr\u19ad\u19b2\u19ddute;\u4107\u0300;abcds\u19bf\u19c0\u19c4\u19ca\u19d5\u19d9\u6229nd;\u6a44rcup;\u6a49\u0100au\u19cf\u19d2p;\u6a4bp;\u6a47ot;\u6a40;\uc000\u2229\ufe00\u0100eo\u19e2\u19e5t;\u6041\xee\u0693\u0200aeiu\u19f0\u19fb\u1a01\u1a05\u01f0\u19f5\0\u19f8s;\u6a4don;\u410ddil\u803b\xe7\u40e7rc;\u4109ps\u0100;s\u1a0c\u1a0d\u6a4cm;\u6a50ot;\u410b\u0180dmn\u1a1b\u1a20\u1a26il\u80bb\xb8\u01adptyv;\u69b2t\u8100\xa2;e\u1a2d\u1a2e\u40a2r\xe4\u01b2r;\uc000\ud835\udd20\u0180cei\u1a3d\u1a40\u1a4dy;\u4447ck\u0100;m\u1a47\u1a48\u6713ark\xbb\u1a48;\u43c7r\u0380;Ecefms\u1a5f\u1a60\u1a62\u1a6b\u1aa4\u1aaa\u1aae\u65cb;\u69c3\u0180;el\u1a69\u1a6a\u1a6d\u42c6q;\u6257e\u0261\u1a74\0\0\u1a88rrow\u0100lr\u1a7c\u1a81eft;\u61baight;\u61bb\u0280RSacd\u1a92\u1a94\u1a96\u1a9a\u1a9f\xbb\u0f47;\u64c8st;\u629birc;\u629aash;\u629dnint;\u6a10id;\u6aefcir;\u69c2ubs\u0100;u\u1abb\u1abc\u6663it\xbb\u1abc\u02ec\u1ac7\u1ad4\u1afa\0\u1b0aon\u0100;e\u1acd\u1ace\u403a\u0100;q\xc7\xc6\u026d\u1ad9\0\0\u1ae2a\u0100;t\u1ade\u1adf\u402c;\u4040\u0180;fl\u1ae8\u1ae9\u1aeb\u6201\xee\u1160e\u0100mx\u1af1\u1af6ent\xbb\u1ae9e\xf3\u024d\u01e7\u1afe\0\u1b07\u0100;d\u12bb\u1b02ot;\u6a6dn\xf4\u0246\u0180fry\u1b10\u1b14\u1b17;\uc000\ud835\udd54o\xe4\u0254\u8100\xa9;s\u0155\u1b1dr;\u6117\u0100ao\u1b25\u1b29rr;\u61b5ss;\u6717\u0100cu\u1b32\u1b37r;\uc000\ud835\udcb8\u0100bp\u1b3c\u1b44\u0100;e\u1b41\u1b42\u6acf;\u6ad1\u0100;e\u1b49\u1b4a\u6ad0;\u6ad2dot;\u62ef\u0380delprvw\u1b60\u1b6c\u1b77\u1b82\u1bac\u1bd4\u1bf9arr\u0100lr\u1b68\u1b6a;\u6938;\u6935\u0270\u1b72\0\0\u1b75r;\u62dec;\u62dfarr\u0100;p\u1b7f\u1b80\u61b6;\u693d\u0300;bcdos\u1b8f\u1b90\u1b96\u1ba1\u1ba5\u1ba8\u622arcap;\u6a48\u0100au\u1b9b\u1b9ep;\u6a46p;\u6a4aot;\u628dr;\u6a45;\uc000\u222a\ufe00\u0200alrv\u1bb5\u1bbf\u1bde\u1be3rr\u0100;m\u1bbc\u1bbd\u61b7;\u693cy\u0180evw\u1bc7\u1bd4\u1bd8q\u0270\u1bce\0\0\u1bd2re\xe3\u1b73u\xe3\u1b75ee;\u62ceedge;\u62cfen\u803b\xa4\u40a4earrow\u0100lr\u1bee\u1bf3eft\xbb\u1b80ight\xbb\u1bbde\xe4\u1bdd\u0100ci\u1c01\u1c07onin\xf4\u01f7nt;\u6231lcty;\u632d\u0980AHabcdefhijlorstuwz\u1c38\u1c3b\u1c3f\u1c5d\u1c69\u1c75\u1c8a\u1c9e\u1cac\u1cb7\u1cfb\u1cff\u1d0d\u1d7b\u1d91\u1dab\u1dbb\u1dc6\u1dcdr\xf2\u0381ar;\u6965\u0200glrs\u1c48\u1c4d\u1c52\u1c54ger;\u6020eth;\u6138\xf2\u1133h\u0100;v\u1c5a\u1c5b\u6010\xbb\u090a\u016b\u1c61\u1c67arow;\u690fa\xe3\u0315\u0100ay\u1c6e\u1c73ron;\u410f;\u4434\u0180;ao\u0332\u1c7c\u1c84\u0100gr\u02bf\u1c81r;\u61catseq;\u6a77\u0180glm\u1c91\u1c94\u1c98\u803b\xb0\u40b0ta;\u43b4ptyv;\u69b1\u0100ir\u1ca3\u1ca8sht;\u697f;\uc000\ud835\udd21ar\u0100lr\u1cb3\u1cb5\xbb\u08dc\xbb\u101e\u0280aegsv\u1cc2\u0378\u1cd6\u1cdc\u1ce0m\u0180;os\u0326\u1cca\u1cd4nd\u0100;s\u0326\u1cd1uit;\u6666amma;\u43ddin;\u62f2\u0180;io\u1ce7\u1ce8\u1cf8\u40f7de\u8100\xf7;o\u1ce7\u1cf0ntimes;\u62c7n\xf8\u1cf7cy;\u4452c\u026f\u1d06\0\0\u1d0arn;\u631eop;\u630d\u0280lptuw\u1d18\u1d1d\u1d22\u1d49\u1d55lar;\u4024f;\uc000\ud835\udd55\u0280;emps\u030b\u1d2d\u1d37\u1d3d\u1d42q\u0100;d\u0352\u1d33ot;\u6251inus;\u6238lus;\u6214quare;\u62a1blebarwedg\xe5\xfan\u0180adh\u112e\u1d5d\u1d67ownarrow\xf3\u1c83arpoon\u0100lr\u1d72\u1d76ef\xf4\u1cb4igh\xf4\u1cb6\u0162\u1d7f\u1d85karo\xf7\u0f42\u026f\u1d8a\0\0\u1d8ern;\u631fop;\u630c\u0180cot\u1d98\u1da3\u1da6\u0100ry\u1d9d\u1da1;\uc000\ud835\udcb9;\u4455l;\u69f6rok;\u4111\u0100dr\u1db0\u1db4ot;\u62f1i\u0100;f\u1dba\u1816\u65bf\u0100ah\u1dc0\u1dc3r\xf2\u0429a\xf2\u0fa6angle;\u69a6\u0100ci\u1dd2\u1dd5y;\u445fgrarr;\u67ff\u0900Dacdefglmnopqrstux\u1e01\u1e09\u1e19\u1e38\u0578\u1e3c\u1e49\u1e61\u1e7e\u1ea5\u1eaf\u1ebd\u1ee1\u1f2a\u1f37\u1f44\u1f4e\u1f5a\u0100Do\u1e06\u1d34o\xf4\u1c89\u0100cs\u1e0e\u1e14ute\u803b\xe9\u40e9ter;\u6a6e\u0200aioy\u1e22\u1e27\u1e31\u1e36ron;\u411br\u0100;c\u1e2d\u1e2e\u6256\u803b\xea\u40ealon;\u6255;\u444dot;\u4117\u0100Dr\u1e41\u1e45ot;\u6252;\uc000\ud835\udd22\u0180;rs\u1e50\u1e51\u1e57\u6a9aave\u803b\xe8\u40e8\u0100;d\u1e5c\u1e5d\u6a96ot;\u6a98\u0200;ils\u1e6a\u1e6b\u1e72\u1e74\u6a99nters;\u63e7;\u6113\u0100;d\u1e79\u1e7a\u6a95ot;\u6a97\u0180aps\u1e85\u1e89\u1e97cr;\u4113ty\u0180;sv\u1e92\u1e93\u1e95\u6205et\xbb\u1e93p\u01001;\u1e9d\u1ea4\u0133\u1ea1\u1ea3;\u6004;\u6005\u6003\u0100gs\u1eaa\u1eac;\u414bp;\u6002\u0100gp\u1eb4\u1eb8on;\u4119f;\uc000\ud835\udd56\u0180als\u1ec4\u1ece\u1ed2r\u0100;s\u1eca\u1ecb\u62d5l;\u69e3us;\u6a71i\u0180;lv\u1eda\u1edb\u1edf\u43b5on\xbb\u1edb;\u43f5\u0200csuv\u1eea\u1ef3\u1f0b\u1f23\u0100io\u1eef\u1e31rc\xbb\u1e2e\u0269\u1ef9\0\0\u1efb\xed\u0548ant\u0100gl\u1f02\u1f06tr\xbb\u1e5dess\xbb\u1e7a\u0180aei\u1f12\u1f16\u1f1als;\u403dst;\u625fv\u0100;D\u0235\u1f20D;\u6a78parsl;\u69e5\u0100Da\u1f2f\u1f33ot;\u6253rr;\u6971\u0180cdi\u1f3e\u1f41\u1ef8r;\u612fo\xf4\u0352\u0100ah\u1f49\u1f4b;\u43b7\u803b\xf0\u40f0\u0100mr\u1f53\u1f57l\u803b\xeb\u40ebo;\u60ac\u0180cip\u1f61\u1f64\u1f67l;\u4021s\xf4\u056e\u0100eo\u1f6c\u1f74ctatio\xee\u0559nential\xe5\u0579\u09e1\u1f92\0\u1f9e\0\u1fa1\u1fa7\0\0\u1fc6\u1fcc\0\u1fd3\0\u1fe6\u1fea\u2000\0\u2008\u205allingdotse\xf1\u1e44y;\u4444male;\u6640\u0180ilr\u1fad\u1fb3\u1fc1lig;\u8000\ufb03\u0269\u1fb9\0\0\u1fbdg;\u8000\ufb00ig;\u8000\ufb04;\uc000\ud835\udd23lig;\u8000\ufb01lig;\uc000fj\u0180alt\u1fd9\u1fdc\u1fe1t;\u666dig;\u8000\ufb02ns;\u65b1of;\u4192\u01f0\u1fee\0\u1ff3f;\uc000\ud835\udd57\u0100ak\u05bf\u1ff7\u0100;v\u1ffc\u1ffd\u62d4;\u6ad9artint;\u6a0d\u0100ao\u200c\u2055\u0100cs\u2011\u2052\u03b1\u201a\u2030\u2038\u2045\u2048\0\u2050\u03b2\u2022\u2025\u2027\u202a\u202c\0\u202e\u803b\xbd\u40bd;\u6153\u803b\xbc\u40bc;\u6155;\u6159;\u615b\u01b3\u2034\0\u2036;\u6154;\u6156\u02b4\u203e\u2041\0\0\u2043\u803b\xbe\u40be;\u6157;\u615c5;\u6158\u01b6\u204c\0\u204e;\u615a;\u615d8;\u615el;\u6044wn;\u6322cr;\uc000\ud835\udcbb\u0880Eabcdefgijlnorstv\u2082\u2089\u209f\u20a5\u20b0\u20b4\u20f0\u20f5\u20fa\u20ff\u2103\u2112\u2138\u0317\u213e\u2152\u219e\u0100;l\u064d\u2087;\u6a8c\u0180cmp\u2090\u2095\u209dute;\u41f5ma\u0100;d\u209c\u1cda\u43b3;\u6a86reve;\u411f\u0100iy\u20aa\u20aerc;\u411d;\u4433ot;\u4121\u0200;lqs\u063e\u0642\u20bd\u20c9\u0180;qs\u063e\u064c\u20c4lan\xf4\u0665\u0200;cdl\u0665\u20d2\u20d5\u20e5c;\u6aa9ot\u0100;o\u20dc\u20dd\u6a80\u0100;l\u20e2\u20e3\u6a82;\u6a84\u0100;e\u20ea\u20ed\uc000\u22db\ufe00s;\u6a94r;\uc000\ud835\udd24\u0100;g\u0673\u061bmel;\u6137cy;\u4453\u0200;Eaj\u065a\u210c\u210e\u2110;\u6a92;\u6aa5;\u6aa4\u0200Eaes\u211b\u211d\u2129\u2134;\u6269p\u0100;p\u2123\u2124\u6a8arox\xbb\u2124\u0100;q\u212e\u212f\u6a88\u0100;q\u212e\u211bim;\u62e7pf;\uc000\ud835\udd58\u0100ci\u2143\u2146r;\u610am\u0180;el\u066b\u214e\u2150;\u6a8e;\u6a90\u8300>;cdlqr\u05ee\u2160\u216a\u216e\u2173\u2179\u0100ci\u2165\u2167;\u6aa7r;\u6a7aot;\u62d7Par;\u6995uest;\u6a7c\u0280adels\u2184\u216a\u2190\u0656\u219b\u01f0\u2189\0\u218epro\xf8\u209er;\u6978q\u0100lq\u063f\u2196les\xf3\u2088i\xed\u066b\u0100en\u21a3\u21adrtneqq;\uc000\u2269\ufe00\xc5\u21aa\u0500Aabcefkosy\u21c4\u21c7\u21f1\u21f5\u21fa\u2218\u221d\u222f\u2268\u227dr\xf2\u03a0\u0200ilmr\u21d0\u21d4\u21d7\u21dbrs\xf0\u1484f\xbb\u2024il\xf4\u06a9\u0100dr\u21e0\u21e4cy;\u444a\u0180;cw\u08f4\u21eb\u21efir;\u6948;\u61adar;\u610firc;\u4125\u0180alr\u2201\u220e\u2213rts\u0100;u\u2209\u220a\u6665it\xbb\u220alip;\u6026con;\u62b9r;\uc000\ud835\udd25s\u0100ew\u2223\u2229arow;\u6925arow;\u6926\u0280amopr\u223a\u223e\u2243\u225e\u2263rr;\u61fftht;\u623bk\u0100lr\u2249\u2253eftarrow;\u61a9ightarrow;\u61aaf;\uc000\ud835\udd59bar;\u6015\u0180clt\u226f\u2274\u2278r;\uc000\ud835\udcbdas\xe8\u21f4rok;\u4127\u0100bp\u2282\u2287ull;\u6043hen\xbb\u1c5b\u0ae1\u22a3\0\u22aa\0\u22b8\u22c5\u22ce\0\u22d5\u22f3\0\0\u22f8\u2322\u2367\u2362\u237f\0\u2386\u23aa\u23b4cute\u803b\xed\u40ed\u0180;iy\u0771\u22b0\u22b5rc\u803b\xee\u40ee;\u4438\u0100cx\u22bc\u22bfy;\u4435cl\u803b\xa1\u40a1\u0100fr\u039f\u22c9;\uc000\ud835\udd26rave\u803b\xec\u40ec\u0200;ino\u073e\u22dd\u22e9\u22ee\u0100in\u22e2\u22e6nt;\u6a0ct;\u622dfin;\u69dcta;\u6129lig;\u4133\u0180aop\u22fe\u231a\u231d\u0180cgt\u2305\u2308\u2317r;\u412b\u0180elp\u071f\u230f\u2313in\xe5\u078ear\xf4\u0720h;\u4131f;\u62b7ed;\u41b5\u0280;cfot\u04f4\u232c\u2331\u233d\u2341are;\u6105in\u0100;t\u2338\u2339\u621eie;\u69dddo\xf4\u2319\u0280;celp\u0757\u234c\u2350\u235b\u2361al;\u62ba\u0100gr\u2355\u2359er\xf3\u1563\xe3\u234darhk;\u6a17rod;\u6a3c\u0200cgpt\u236f\u2372\u2376\u237by;\u4451on;\u412ff;\uc000\ud835\udd5aa;\u43b9uest\u803b\xbf\u40bf\u0100ci\u238a\u238fr;\uc000\ud835\udcben\u0280;Edsv\u04f4\u239b\u239d\u23a1\u04f3;\u62f9ot;\u62f5\u0100;v\u23a6\u23a7\u62f4;\u62f3\u0100;i\u0777\u23aelde;\u4129\u01eb\u23b8\0\u23bccy;\u4456l\u803b\xef\u40ef\u0300cfmosu\u23cc\u23d7\u23dc\u23e1\u23e7\u23f5\u0100iy\u23d1\u23d5rc;\u4135;\u4439r;\uc000\ud835\udd27ath;\u4237pf;\uc000\ud835\udd5b\u01e3\u23ec\0\u23f1r;\uc000\ud835\udcbfrcy;\u4458kcy;\u4454\u0400acfghjos\u240b\u2416\u2422\u2427\u242d\u2431\u2435\u243bppa\u0100;v\u2413\u2414\u43ba;\u43f0\u0100ey\u241b\u2420dil;\u4137;\u443ar;\uc000\ud835\udd28reen;\u4138cy;\u4445cy;\u445cpf;\uc000\ud835\udd5ccr;\uc000\ud835\udcc0\u0b80ABEHabcdefghjlmnoprstuv\u2470\u2481\u2486\u248d\u2491\u250e\u253d\u255a\u2580\u264e\u265e\u2665\u2679\u267d\u269a\u26b2\u26d8\u275d\u2768\u278b\u27c0\u2801\u2812\u0180art\u2477\u247a\u247cr\xf2\u09c6\xf2\u0395ail;\u691barr;\u690e\u0100;g\u0994\u248b;\u6a8bar;\u6962\u0963\u24a5\0\u24aa\0\u24b1\0\0\0\0\0\u24b5\u24ba\0\u24c6\u24c8\u24cd\0\u24f9ute;\u413amptyv;\u69b4ra\xee\u084cbda;\u43bbg\u0180;dl\u088e\u24c1\u24c3;\u6991\xe5\u088e;\u6a85uo\u803b\xab\u40abr\u0400;bfhlpst\u0899\u24de\u24e6\u24e9\u24eb\u24ee\u24f1\u24f5\u0100;f\u089d\u24e3s;\u691fs;\u691d\xeb\u2252p;\u61abl;\u6939im;\u6973l;\u61a2\u0180;ae\u24ff\u2500\u2504\u6aabil;\u6919\u0100;s\u2509\u250a\u6aad;\uc000\u2aad\ufe00\u0180abr\u2515\u2519\u251drr;\u690crk;\u6772\u0100ak\u2522\u252cc\u0100ek\u2528\u252a;\u407b;\u405b\u0100es\u2531\u2533;\u698bl\u0100du\u2539\u253b;\u698f;\u698d\u0200aeuy\u2546\u254b\u2556\u2558ron;\u413e\u0100di\u2550\u2554il;\u413c\xec\u08b0\xe2\u2529;\u443b\u0200cqrs\u2563\u2566\u256d\u257da;\u6936uo\u0100;r\u0e19\u1746\u0100du\u2572\u2577har;\u6967shar;\u694bh;\u61b2\u0280;fgqs\u258b\u258c\u0989\u25f3\u25ff\u6264t\u0280ahlrt\u2598\u25a4\u25b7\u25c2\u25e8rrow\u0100;t\u0899\u25a1a\xe9\u24f6arpoon\u0100du\u25af\u25b4own\xbb\u045ap\xbb\u0966eftarrows;\u61c7ight\u0180ahs\u25cd\u25d6\u25derrow\u0100;s\u08f4\u08a7arpoon\xf3\u0f98quigarro\xf7\u21f0hreetimes;\u62cb\u0180;qs\u258b\u0993\u25falan\xf4\u09ac\u0280;cdgs\u09ac\u260a\u260d\u261d\u2628c;\u6aa8ot\u0100;o\u2614\u2615\u6a7f\u0100;r\u261a\u261b\u6a81;\u6a83\u0100;e\u2622\u2625\uc000\u22da\ufe00s;\u6a93\u0280adegs\u2633\u2639\u263d\u2649\u264bppro\xf8\u24c6ot;\u62d6q\u0100gq\u2643\u2645\xf4\u0989gt\xf2\u248c\xf4\u099bi\xed\u09b2\u0180ilr\u2655\u08e1\u265asht;\u697c;\uc000\ud835\udd29\u0100;E\u099c\u2663;\u6a91\u0161\u2669\u2676r\u0100du\u25b2\u266e\u0100;l\u0965\u2673;\u696alk;\u6584cy;\u4459\u0280;acht\u0a48\u2688\u268b\u2691\u2696r\xf2\u25c1orne\xf2\u1d08ard;\u696bri;\u65fa\u0100io\u269f\u26a4dot;\u4140ust\u0100;a\u26ac\u26ad\u63b0che\xbb\u26ad\u0200Eaes\u26bb\u26bd\u26c9\u26d4;\u6268p\u0100;p\u26c3\u26c4\u6a89rox\xbb\u26c4\u0100;q\u26ce\u26cf\u6a87\u0100;q\u26ce\u26bbim;\u62e6\u0400abnoptwz\u26e9\u26f4\u26f7\u271a\u272f\u2741\u2747\u2750\u0100nr\u26ee\u26f1g;\u67ecr;\u61fdr\xeb\u08c1g\u0180lmr\u26ff\u270d\u2714eft\u0100ar\u09e6\u2707ight\xe1\u09f2apsto;\u67fcight\xe1\u09fdparrow\u0100lr\u2725\u2729ef\xf4\u24edight;\u61ac\u0180afl\u2736\u2739\u273dr;\u6985;\uc000\ud835\udd5dus;\u6a2dimes;\u6a34\u0161\u274b\u274fst;\u6217\xe1\u134e\u0180;ef\u2757\u2758\u1800\u65cange\xbb\u2758ar\u0100;l\u2764\u2765\u4028t;\u6993\u0280achmt\u2773\u2776\u277c\u2785\u2787r\xf2\u08a8orne\xf2\u1d8car\u0100;d\u0f98\u2783;\u696d;\u600eri;\u62bf\u0300achiqt\u2798\u279d\u0a40\u27a2\u27ae\u27bbquo;\u6039r;\uc000\ud835\udcc1m\u0180;eg\u09b2\u27aa\u27ac;\u6a8d;\u6a8f\u0100bu\u252a\u27b3o\u0100;r\u0e1f\u27b9;\u601arok;\u4142\u8400<;cdhilqr\u082b\u27d2\u2639\u27dc\u27e0\u27e5\u27ea\u27f0\u0100ci\u27d7\u27d9;\u6aa6r;\u6a79re\xe5\u25f2mes;\u62c9arr;\u6976uest;\u6a7b\u0100Pi\u27f5\u27f9ar;\u6996\u0180;ef\u2800\u092d\u181b\u65c3r\u0100du\u2807\u280dshar;\u694ahar;\u6966\u0100en\u2817\u2821rtneqq;\uc000\u2268\ufe00\xc5\u281e\u0700Dacdefhilnopsu\u2840\u2845\u2882\u288e\u2893\u28a0\u28a5\u28a8\u28da\u28e2\u28e4\u0a83\u28f3\u2902Dot;\u623a\u0200clpr\u284e\u2852\u2863\u287dr\u803b\xaf\u40af\u0100et\u2857\u2859;\u6642\u0100;e\u285e\u285f\u6720se\xbb\u285f\u0100;s\u103b\u2868to\u0200;dlu\u103b\u2873\u2877\u287bow\xee\u048cef\xf4\u090f\xf0\u13d1ker;\u65ae\u0100oy\u2887\u288cmma;\u6a29;\u443cash;\u6014asuredangle\xbb\u1626r;\uc000\ud835\udd2ao;\u6127\u0180cdn\u28af\u28b4\u28c9ro\u803b\xb5\u40b5\u0200;acd\u1464\u28bd\u28c0\u28c4s\xf4\u16a7ir;\u6af0ot\u80bb\xb7\u01b5us\u0180;bd\u28d2\u1903\u28d3\u6212\u0100;u\u1d3c\u28d8;\u6a2a\u0163\u28de\u28e1p;\u6adb\xf2\u2212\xf0\u0a81\u0100dp\u28e9\u28eeels;\u62a7f;\uc000\ud835\udd5e\u0100ct\u28f8\u28fdr;\uc000\ud835\udcc2pos\xbb\u159d\u0180;lm\u2909\u290a\u290d\u43bctimap;\u62b8\u0c00GLRVabcdefghijlmoprstuvw\u2942\u2953\u297e\u2989\u2998\u29da\u29e9\u2a15\u2a1a\u2a58\u2a5d\u2a83\u2a95\u2aa4\u2aa8\u2b04\u2b07\u2b44\u2b7f\u2bae\u2c34\u2c67\u2c7c\u2ce9\u0100gt\u2947\u294b;\uc000\u22d9\u0338\u0100;v\u2950\u0bcf\uc000\u226b\u20d2\u0180elt\u295a\u2972\u2976ft\u0100ar\u2961\u2967rrow;\u61cdightarrow;\u61ce;\uc000\u22d8\u0338\u0100;v\u297b\u0c47\uc000\u226a\u20d2ightarrow;\u61cf\u0100Dd\u298e\u2993ash;\u62afash;\u62ae\u0280bcnpt\u29a3\u29a7\u29ac\u29b1\u29ccla\xbb\u02deute;\u4144g;\uc000\u2220\u20d2\u0280;Eiop\u0d84\u29bc\u29c0\u29c5\u29c8;\uc000\u2a70\u0338d;\uc000\u224b\u0338s;\u4149ro\xf8\u0d84ur\u0100;a\u29d3\u29d4\u666el\u0100;s\u29d3\u0b38\u01f3\u29df\0\u29e3p\u80bb\xa0\u0b37mp\u0100;e\u0bf9\u0c00\u0280aeouy\u29f4\u29fe\u2a03\u2a10\u2a13\u01f0\u29f9\0\u29fb;\u6a43on;\u4148dil;\u4146ng\u0100;d\u0d7e\u2a0aot;\uc000\u2a6d\u0338p;\u6a42;\u443dash;\u6013\u0380;Aadqsx\u0b92\u2a29\u2a2d\u2a3b\u2a41\u2a45\u2a50rr;\u61d7r\u0100hr\u2a33\u2a36k;\u6924\u0100;o\u13f2\u13f0ot;\uc000\u2250\u0338ui\xf6\u0b63\u0100ei\u2a4a\u2a4ear;\u6928\xed\u0b98ist\u0100;s\u0ba0\u0b9fr;\uc000\ud835\udd2b\u0200Eest\u0bc5\u2a66\u2a79\u2a7c\u0180;qs\u0bbc\u2a6d\u0be1\u0180;qs\u0bbc\u0bc5\u2a74lan\xf4\u0be2i\xed\u0bea\u0100;r\u0bb6\u2a81\xbb\u0bb7\u0180Aap\u2a8a\u2a8d\u2a91r\xf2\u2971rr;\u61aear;\u6af2\u0180;sv\u0f8d\u2a9c\u0f8c\u0100;d\u2aa1\u2aa2\u62fc;\u62facy;\u445a\u0380AEadest\u2ab7\u2aba\u2abe\u2ac2\u2ac5\u2af6\u2af9r\xf2\u2966;\uc000\u2266\u0338rr;\u619ar;\u6025\u0200;fqs\u0c3b\u2ace\u2ae3\u2aeft\u0100ar\u2ad4\u2ad9rro\xf7\u2ac1ightarro\xf7\u2a90\u0180;qs\u0c3b\u2aba\u2aealan\xf4\u0c55\u0100;s\u0c55\u2af4\xbb\u0c36i\xed\u0c5d\u0100;r\u0c35\u2afei\u0100;e\u0c1a\u0c25i\xe4\u0d90\u0100pt\u2b0c\u2b11f;\uc000\ud835\udd5f\u8180\xac;in\u2b19\u2b1a\u2b36\u40acn\u0200;Edv\u0b89\u2b24\u2b28\u2b2e;\uc000\u22f9\u0338ot;\uc000\u22f5\u0338\u01e1\u0b89\u2b33\u2b35;\u62f7;\u62f6i\u0100;v\u0cb8\u2b3c\u01e1\u0cb8\u2b41\u2b43;\u62fe;\u62fd\u0180aor\u2b4b\u2b63\u2b69r\u0200;ast\u0b7b\u2b55\u2b5a\u2b5flle\xec\u0b7bl;\uc000\u2afd\u20e5;\uc000\u2202\u0338lint;\u6a14\u0180;ce\u0c92\u2b70\u2b73u\xe5\u0ca5\u0100;c\u0c98\u2b78\u0100;e\u0c92\u2b7d\xf1\u0c98\u0200Aait\u2b88\u2b8b\u2b9d\u2ba7r\xf2\u2988rr\u0180;cw\u2b94\u2b95\u2b99\u619b;\uc000\u2933\u0338;\uc000\u219d\u0338ghtarrow\xbb\u2b95ri\u0100;e\u0ccb\u0cd6\u0380chimpqu\u2bbd\u2bcd\u2bd9\u2b04\u0b78\u2be4\u2bef\u0200;cer\u0d32\u2bc6\u0d37\u2bc9u\xe5\u0d45;\uc000\ud835\udcc3ort\u026d\u2b05\0\0\u2bd6ar\xe1\u2b56m\u0100;e\u0d6e\u2bdf\u0100;q\u0d74\u0d73su\u0100bp\u2beb\u2bed\xe5\u0cf8\xe5\u0d0b\u0180bcp\u2bf6\u2c11\u2c19\u0200;Ees\u2bff\u2c00\u0d22\u2c04\u6284;\uc000\u2ac5\u0338et\u0100;e\u0d1b\u2c0bq\u0100;q\u0d23\u2c00c\u0100;e\u0d32\u2c17\xf1\u0d38\u0200;Ees\u2c22\u2c23\u0d5f\u2c27\u6285;\uc000\u2ac6\u0338et\u0100;e\u0d58\u2c2eq\u0100;q\u0d60\u2c23\u0200gilr\u2c3d\u2c3f\u2c45\u2c47\xec\u0bd7lde\u803b\xf1\u40f1\xe7\u0c43iangle\u0100lr\u2c52\u2c5ceft\u0100;e\u0c1a\u2c5a\xf1\u0c26ight\u0100;e\u0ccb\u2c65\xf1\u0cd7\u0100;m\u2c6c\u2c6d\u43bd\u0180;es\u2c74\u2c75\u2c79\u4023ro;\u6116p;\u6007\u0480DHadgilrs\u2c8f\u2c94\u2c99\u2c9e\u2ca3\u2cb0\u2cb6\u2cd3\u2ce3ash;\u62adarr;\u6904p;\uc000\u224d\u20d2ash;\u62ac\u0100et\u2ca8\u2cac;\uc000\u2265\u20d2;\uc000>\u20d2nfin;\u69de\u0180Aet\u2cbd\u2cc1\u2cc5rr;\u6902;\uc000\u2264\u20d2\u0100;r\u2cca\u2ccd\uc000<\u20d2ie;\uc000\u22b4\u20d2\u0100At\u2cd8\u2cdcrr;\u6903rie;\uc000\u22b5\u20d2im;\uc000\u223c\u20d2\u0180Aan\u2cf0\u2cf4\u2d02rr;\u61d6r\u0100hr\u2cfa\u2cfdk;\u6923\u0100;o\u13e7\u13e5ear;\u6927\u1253\u1a95\0\0\0\0\0\0\0\0\0\0\0\0\0\u2d2d\0\u2d38\u2d48\u2d60\u2d65\u2d72\u2d84\u1b07\0\0\u2d8d\u2dab\0\u2dc8\u2dce\0\u2ddc\u2e19\u2e2b\u2e3e\u2e43\u0100cs\u2d31\u1a97ute\u803b\xf3\u40f3\u0100iy\u2d3c\u2d45r\u0100;c\u1a9e\u2d42\u803b\xf4\u40f4;\u443e\u0280abios\u1aa0\u2d52\u2d57\u01c8\u2d5alac;\u4151v;\u6a38old;\u69bclig;\u4153\u0100cr\u2d69\u2d6dir;\u69bf;\uc000\ud835\udd2c\u036f\u2d79\0\0\u2d7c\0\u2d82n;\u42dbave\u803b\xf2\u40f2;\u69c1\u0100bm\u2d88\u0df4ar;\u69b5\u0200acit\u2d95\u2d98\u2da5\u2da8r\xf2\u1a80\u0100ir\u2d9d\u2da0r;\u69beoss;\u69bbn\xe5\u0e52;\u69c0\u0180aei\u2db1\u2db5\u2db9cr;\u414dga;\u43c9\u0180cdn\u2dc0\u2dc5\u01cdron;\u43bf;\u69b6pf;\uc000\ud835\udd60\u0180ael\u2dd4\u2dd7\u01d2r;\u69b7rp;\u69b9\u0380;adiosv\u2dea\u2deb\u2dee\u2e08\u2e0d\u2e10\u2e16\u6228r\xf2\u1a86\u0200;efm\u2df7\u2df8\u2e02\u2e05\u6a5dr\u0100;o\u2dfe\u2dff\u6134f\xbb\u2dff\u803b\xaa\u40aa\u803b\xba\u40bagof;\u62b6r;\u6a56lope;\u6a57;\u6a5b\u0180clo\u2e1f\u2e21\u2e27\xf2\u2e01ash\u803b\xf8\u40f8l;\u6298i\u016c\u2e2f\u2e34de\u803b\xf5\u40f5es\u0100;a\u01db\u2e3as;\u6a36ml\u803b\xf6\u40f6bar;\u633d\u0ae1\u2e5e\0\u2e7d\0\u2e80\u2e9d\0\u2ea2\u2eb9\0\0\u2ecb\u0e9c\0\u2f13\0\0\u2f2b\u2fbc\0\u2fc8r\u0200;ast\u0403\u2e67\u2e72\u0e85\u8100\xb6;l\u2e6d\u2e6e\u40b6le\xec\u0403\u0269\u2e78\0\0\u2e7bm;\u6af3;\u6afdy;\u443fr\u0280cimpt\u2e8b\u2e8f\u2e93\u1865\u2e97nt;\u4025od;\u402eil;\u6030enk;\u6031r;\uc000\ud835\udd2d\u0180imo\u2ea8\u2eb0\u2eb4\u0100;v\u2ead\u2eae\u43c6;\u43d5ma\xf4\u0a76ne;\u660e\u0180;tv\u2ebf\u2ec0\u2ec8\u43c0chfork\xbb\u1ffd;\u43d6\u0100au\u2ecf\u2edfn\u0100ck\u2ed5\u2eddk\u0100;h\u21f4\u2edb;\u610e\xf6\u21f4s\u0480;abcdemst\u2ef3\u2ef4\u1908\u2ef9\u2efd\u2f04\u2f06\u2f0a\u2f0e\u402bcir;\u6a23ir;\u6a22\u0100ou\u1d40\u2f02;\u6a25;\u6a72n\u80bb\xb1\u0e9dim;\u6a26wo;\u6a27\u0180ipu\u2f19\u2f20\u2f25ntint;\u6a15f;\uc000\ud835\udd61nd\u803b\xa3\u40a3\u0500;Eaceinosu\u0ec8\u2f3f\u2f41\u2f44\u2f47\u2f81\u2f89\u2f92\u2f7e\u2fb6;\u6ab3p;\u6ab7u\xe5\u0ed9\u0100;c\u0ece\u2f4c\u0300;acens\u0ec8\u2f59\u2f5f\u2f66\u2f68\u2f7eppro\xf8\u2f43urlye\xf1\u0ed9\xf1\u0ece\u0180aes\u2f6f\u2f76\u2f7approx;\u6ab9qq;\u6ab5im;\u62e8i\xed\u0edfme\u0100;s\u2f88\u0eae\u6032\u0180Eas\u2f78\u2f90\u2f7a\xf0\u2f75\u0180dfp\u0eec\u2f99\u2faf\u0180als\u2fa0\u2fa5\u2faalar;\u632eine;\u6312urf;\u6313\u0100;t\u0efb\u2fb4\xef\u0efbrel;\u62b0\u0100ci\u2fc0\u2fc5r;\uc000\ud835\udcc5;\u43c8ncsp;\u6008\u0300fiopsu\u2fda\u22e2\u2fdf\u2fe5\u2feb\u2ff1r;\uc000\ud835\udd2epf;\uc000\ud835\udd62rime;\u6057cr;\uc000\ud835\udcc6\u0180aeo\u2ff8\u3009\u3013t\u0100ei\u2ffe\u3005rnion\xf3\u06b0nt;\u6a16st\u0100;e\u3010\u3011\u403f\xf1\u1f19\xf4\u0f14\u0a80ABHabcdefhilmnoprstux\u3040\u3051\u3055\u3059\u30e0\u310e\u312b\u3147\u3162\u3172\u318e\u3206\u3215\u3224\u3229\u3258\u326e\u3272\u3290\u32b0\u32b7\u0180art\u3047\u304a\u304cr\xf2\u10b3\xf2\u03ddail;\u691car\xf2\u1c65ar;\u6964\u0380cdenqrt\u3068\u3075\u3078\u307f\u308f\u3094\u30cc\u0100eu\u306d\u3071;\uc000\u223d\u0331te;\u4155i\xe3\u116emptyv;\u69b3g\u0200;del\u0fd1\u3089\u308b\u308d;\u6992;\u69a5\xe5\u0fd1uo\u803b\xbb\u40bbr\u0580;abcfhlpstw\u0fdc\u30ac\u30af\u30b7\u30b9\u30bc\u30be\u30c0\u30c3\u30c7\u30cap;\u6975\u0100;f\u0fe0\u30b4s;\u6920;\u6933s;\u691e\xeb\u225d\xf0\u272el;\u6945im;\u6974l;\u61a3;\u619d\u0100ai\u30d1\u30d5il;\u691ao\u0100;n\u30db\u30dc\u6236al\xf3\u0f1e\u0180abr\u30e7\u30ea\u30eer\xf2\u17e5rk;\u6773\u0100ak\u30f3\u30fdc\u0100ek\u30f9\u30fb;\u407d;\u405d\u0100es\u3102\u3104;\u698cl\u0100du\u310a\u310c;\u698e;\u6990\u0200aeuy\u3117\u311c\u3127\u3129ron;\u4159\u0100di\u3121\u3125il;\u4157\xec\u0ff2\xe2\u30fa;\u4440\u0200clqs\u3134\u3137\u313d\u3144a;\u6937dhar;\u6969uo\u0100;r\u020e\u020dh;\u61b3\u0180acg\u314e\u315f\u0f44l\u0200;ips\u0f78\u3158\u315b\u109cn\xe5\u10bbar\xf4\u0fa9t;\u65ad\u0180ilr\u3169\u1023\u316esht;\u697d;\uc000\ud835\udd2f\u0100ao\u3177\u3186r\u0100du\u317d\u317f\xbb\u047b\u0100;l\u1091\u3184;\u696c\u0100;v\u318b\u318c\u43c1;\u43f1\u0180gns\u3195\u31f9\u31fcht\u0300ahlrst\u31a4\u31b0\u31c2\u31d8\u31e4\u31eerrow\u0100;t\u0fdc\u31ada\xe9\u30c8arpoon\u0100du\u31bb\u31bfow\xee\u317ep\xbb\u1092eft\u0100ah\u31ca\u31d0rrow\xf3\u0feaarpoon\xf3\u0551ightarrows;\u61c9quigarro\xf7\u30cbhreetimes;\u62ccg;\u42daingdotse\xf1\u1f32\u0180ahm\u320d\u3210\u3213r\xf2\u0feaa\xf2\u0551;\u600foust\u0100;a\u321e\u321f\u63b1che\xbb\u321fmid;\u6aee\u0200abpt\u3232\u323d\u3240\u3252\u0100nr\u3237\u323ag;\u67edr;\u61fer\xeb\u1003\u0180afl\u3247\u324a\u324er;\u6986;\uc000\ud835\udd63us;\u6a2eimes;\u6a35\u0100ap\u325d\u3267r\u0100;g\u3263\u3264\u4029t;\u6994olint;\u6a12ar\xf2\u31e3\u0200achq\u327b\u3280\u10bc\u3285quo;\u603ar;\uc000\ud835\udcc7\u0100bu\u30fb\u328ao\u0100;r\u0214\u0213\u0180hir\u3297\u329b\u32a0re\xe5\u31f8mes;\u62cai\u0200;efl\u32aa\u1059\u1821\u32ab\u65b9tri;\u69celuhar;\u6968;\u611e\u0d61\u32d5\u32db\u32df\u332c\u3338\u3371\0\u337a\u33a4\0\0\u33ec\u33f0\0\u3428\u3448\u345a\u34ad\u34b1\u34ca\u34f1\0\u3616\0\0\u3633cute;\u415bqu\xef\u27ba\u0500;Eaceinpsy\u11ed\u32f3\u32f5\u32ff\u3302\u330b\u330f\u331f\u3326\u3329;\u6ab4\u01f0\u32fa\0\u32fc;\u6ab8on;\u4161u\xe5\u11fe\u0100;d\u11f3\u3307il;\u415frc;\u415d\u0180Eas\u3316\u3318\u331b;\u6ab6p;\u6abaim;\u62e9olint;\u6a13i\xed\u1204;\u4441ot\u0180;be\u3334\u1d47\u3335\u62c5;\u6a66\u0380Aacmstx\u3346\u334a\u3357\u335b\u335e\u3363\u336drr;\u61d8r\u0100hr\u3350\u3352\xeb\u2228\u0100;o\u0a36\u0a34t\u803b\xa7\u40a7i;\u403bwar;\u6929m\u0100in\u3369\xf0nu\xf3\xf1t;\u6736r\u0100;o\u3376\u2055\uc000\ud835\udd30\u0200acoy\u3382\u3386\u3391\u33a0rp;\u666f\u0100hy\u338b\u338fcy;\u4449;\u4448rt\u026d\u3399\0\0\u339ci\xe4\u1464ara\xec\u2e6f\u803b\xad\u40ad\u0100gm\u33a8\u33b4ma\u0180;fv\u33b1\u33b2\u33b2\u43c3;\u43c2\u0400;deglnpr\u12ab\u33c5\u33c9\u33ce\u33d6\u33de\u33e1\u33e6ot;\u6a6a\u0100;q\u12b1\u12b0\u0100;E\u33d3\u33d4\u6a9e;\u6aa0\u0100;E\u33db\u33dc\u6a9d;\u6a9fe;\u6246lus;\u6a24arr;\u6972ar\xf2\u113d\u0200aeit\u33f8\u3408\u340f\u3417\u0100ls\u33fd\u3404lsetm\xe9\u336ahp;\u6a33parsl;\u69e4\u0100dl\u1463\u3414e;\u6323\u0100;e\u341c\u341d\u6aaa\u0100;s\u3422\u3423\u6aac;\uc000\u2aac\ufe00\u0180flp\u342e\u3433\u3442tcy;\u444c\u0100;b\u3438\u3439\u402f\u0100;a\u343e\u343f\u69c4r;\u633ff;\uc000\ud835\udd64a\u0100dr\u344d\u0402es\u0100;u\u3454\u3455\u6660it\xbb\u3455\u0180csu\u3460\u3479\u349f\u0100au\u3465\u346fp\u0100;s\u1188\u346b;\uc000\u2293\ufe00p\u0100;s\u11b4\u3475;\uc000\u2294\ufe00u\u0100bp\u347f\u348f\u0180;es\u1197\u119c\u3486et\u0100;e\u1197\u348d\xf1\u119d\u0180;es\u11a8\u11ad\u3496et\u0100;e\u11a8\u349d\xf1\u11ae\u0180;af\u117b\u34a6\u05b0r\u0165\u34ab\u05b1\xbb\u117car\xf2\u1148\u0200cemt\u34b9\u34be\u34c2\u34c5r;\uc000\ud835\udcc8tm\xee\xf1i\xec\u3415ar\xe6\u11be\u0100ar\u34ce\u34d5r\u0100;f\u34d4\u17bf\u6606\u0100an\u34da\u34edight\u0100ep\u34e3\u34eapsilo\xee\u1ee0h\xe9\u2eafs\xbb\u2852\u0280bcmnp\u34fb\u355e\u1209\u358b\u358e\u0480;Edemnprs\u350e\u350f\u3511\u3515\u351e\u3523\u352c\u3531\u3536\u6282;\u6ac5ot;\u6abd\u0100;d\u11da\u351aot;\u6ac3ult;\u6ac1\u0100Ee\u3528\u352a;\u6acb;\u628alus;\u6abfarr;\u6979\u0180eiu\u353d\u3552\u3555t\u0180;en\u350e\u3545\u354bq\u0100;q\u11da\u350feq\u0100;q\u352b\u3528m;\u6ac7\u0100bp\u355a\u355c;\u6ad5;\u6ad3c\u0300;acens\u11ed\u356c\u3572\u3579\u357b\u3326ppro\xf8\u32faurlye\xf1\u11fe\xf1\u11f3\u0180aes\u3582\u3588\u331bppro\xf8\u331aq\xf1\u3317g;\u666a\u0680123;Edehlmnps\u35a9\u35ac\u35af\u121c\u35b2\u35b4\u35c0\u35c9\u35d5\u35da\u35df\u35e8\u35ed\u803b\xb9\u40b9\u803b\xb2\u40b2\u803b\xb3\u40b3;\u6ac6\u0100os\u35b9\u35bct;\u6abeub;\u6ad8\u0100;d\u1222\u35c5ot;\u6ac4s\u0100ou\u35cf\u35d2l;\u67c9b;\u6ad7arr;\u697bult;\u6ac2\u0100Ee\u35e4\u35e6;\u6acc;\u628blus;\u6ac0\u0180eiu\u35f4\u3609\u360ct\u0180;en\u121c\u35fc\u3602q\u0100;q\u1222\u35b2eq\u0100;q\u35e7\u35e4m;\u6ac8\u0100bp\u3611\u3613;\u6ad4;\u6ad6\u0180Aan\u361c\u3620\u362drr;\u61d9r\u0100hr\u3626\u3628\xeb\u222e\u0100;o\u0a2b\u0a29war;\u692alig\u803b\xdf\u40df\u0be1\u3651\u365d\u3660\u12ce\u3673\u3679\0\u367e\u36c2\0\0\0\0\0\u36db\u3703\0\u3709\u376c\0\0\0\u3787\u0272\u3656\0\0\u365bget;\u6316;\u43c4r\xeb\u0e5f\u0180aey\u3666\u366b\u3670ron;\u4165dil;\u4163;\u4442lrec;\u6315r;\uc000\ud835\udd31\u0200eiko\u3686\u369d\u36b5\u36bc\u01f2\u368b\0\u3691e\u01004f\u1284\u1281a\u0180;sv\u3698\u3699\u369b\u43b8ym;\u43d1\u0100cn\u36a2\u36b2k\u0100as\u36a8\u36aeppro\xf8\u12c1im\xbb\u12acs\xf0\u129e\u0100as\u36ba\u36ae\xf0\u12c1rn\u803b\xfe\u40fe\u01ec\u031f\u36c6\u22e7es\u8180\xd7;bd\u36cf\u36d0\u36d8\u40d7\u0100;a\u190f\u36d5r;\u6a31;\u6a30\u0180eps\u36e1\u36e3\u3700\xe1\u2a4d\u0200;bcf\u0486\u36ec\u36f0\u36f4ot;\u6336ir;\u6af1\u0100;o\u36f9\u36fc\uc000\ud835\udd65rk;\u6ada\xe1\u3362rime;\u6034\u0180aip\u370f\u3712\u3764d\xe5\u1248\u0380adempst\u3721\u374d\u3740\u3751\u3757\u375c\u375fngle\u0280;dlqr\u3730\u3731\u3736\u3740\u3742\u65b5own\xbb\u1dbbeft\u0100;e\u2800\u373e\xf1\u092e;\u625cight\u0100;e\u32aa\u374b\xf1\u105aot;\u65ecinus;\u6a3alus;\u6a39b;\u69cdime;\u6a3bezium;\u63e2\u0180cht\u3772\u377d\u3781\u0100ry\u3777\u377b;\uc000\ud835\udcc9;\u4446cy;\u445brok;\u4167\u0100io\u378b\u378ex\xf4\u1777head\u0100lr\u3797\u37a0eftarro\xf7\u084fightarrow\xbb\u0f5d\u0900AHabcdfghlmoprstuw\u37d0\u37d3\u37d7\u37e4\u37f0\u37fc\u380e\u381c\u3823\u3834\u3851\u385d\u386b\u38a9\u38cc\u38d2\u38ea\u38f6r\xf2\u03edar;\u6963\u0100cr\u37dc\u37e2ute\u803b\xfa\u40fa\xf2\u1150r\u01e3\u37ea\0\u37edy;\u445eve;\u416d\u0100iy\u37f5\u37farc\u803b\xfb\u40fb;\u4443\u0180abh\u3803\u3806\u380br\xf2\u13adlac;\u4171a\xf2\u13c3\u0100ir\u3813\u3818sht;\u697e;\uc000\ud835\udd32rave\u803b\xf9\u40f9\u0161\u3827\u3831r\u0100lr\u382c\u382e\xbb\u0957\xbb\u1083lk;\u6580\u0100ct\u3839\u384d\u026f\u383f\0\0\u384arn\u0100;e\u3845\u3846\u631cr\xbb\u3846op;\u630fri;\u65f8\u0100al\u3856\u385acr;\u416b\u80bb\xa8\u0349\u0100gp\u3862\u3866on;\u4173f;\uc000\ud835\udd66\u0300adhlsu\u114b\u3878\u387d\u1372\u3891\u38a0own\xe1\u13b3arpoon\u0100lr\u3888\u388cef\xf4\u382digh\xf4\u382fi\u0180;hl\u3899\u389a\u389c\u43c5\xbb\u13faon\xbb\u389aparrows;\u61c8\u0180cit\u38b0\u38c4\u38c8\u026f\u38b6\0\0\u38c1rn\u0100;e\u38bc\u38bd\u631dr\xbb\u38bdop;\u630eng;\u416fri;\u65f9cr;\uc000\ud835\udcca\u0180dir\u38d9\u38dd\u38e2ot;\u62f0lde;\u4169i\u0100;f\u3730\u38e8\xbb\u1813\u0100am\u38ef\u38f2r\xf2\u38a8l\u803b\xfc\u40fcangle;\u69a7\u0780ABDacdeflnoprsz\u391c\u391f\u3929\u392d\u39b5\u39b8\u39bd\u39df\u39e4\u39e8\u39f3\u39f9\u39fd\u3a01\u3a20r\xf2\u03f7ar\u0100;v\u3926\u3927\u6ae8;\u6ae9as\xe8\u03e1\u0100nr\u3932\u3937grt;\u699c\u0380eknprst\u34e3\u3946\u394b\u3952\u395d\u3964\u3996app\xe1\u2415othin\xe7\u1e96\u0180hir\u34eb\u2ec8\u3959op\xf4\u2fb5\u0100;h\u13b7\u3962\xef\u318d\u0100iu\u3969\u396dgm\xe1\u33b3\u0100bp\u3972\u3984setneq\u0100;q\u397d\u3980\uc000\u228a\ufe00;\uc000\u2acb\ufe00setneq\u0100;q\u398f\u3992\uc000\u228b\ufe00;\uc000\u2acc\ufe00\u0100hr\u399b\u399fet\xe1\u369ciangle\u0100lr\u39aa\u39afeft\xbb\u0925ight\xbb\u1051y;\u4432ash\xbb\u1036\u0180elr\u39c4\u39d2\u39d7\u0180;be\u2dea\u39cb\u39cfar;\u62bbq;\u625alip;\u62ee\u0100bt\u39dc\u1468a\xf2\u1469r;\uc000\ud835\udd33tr\xe9\u39aesu\u0100bp\u39ef\u39f1\xbb\u0d1c\xbb\u0d59pf;\uc000\ud835\udd67ro\xf0\u0efbtr\xe9\u39b4\u0100cu\u3a06\u3a0br;\uc000\ud835\udccb\u0100bp\u3a10\u3a18n\u0100Ee\u3980\u3a16\xbb\u397en\u0100Ee\u3992\u3a1e\xbb\u3990igzag;\u699a\u0380cefoprs\u3a36\u3a3b\u3a56\u3a5b\u3a54\u3a61\u3a6airc;\u4175\u0100di\u3a40\u3a51\u0100bg\u3a45\u3a49ar;\u6a5fe\u0100;q\u15fa\u3a4f;\u6259erp;\u6118r;\uc000\ud835\udd34pf;\uc000\ud835\udd68\u0100;e\u1479\u3a66at\xe8\u1479cr;\uc000\ud835\udccc\u0ae3\u178e\u3a87\0\u3a8b\0\u3a90\u3a9b\0\0\u3a9d\u3aa8\u3aab\u3aaf\0\0\u3ac3\u3ace\0\u3ad8\u17dc\u17dftr\xe9\u17d1r;\uc000\ud835\udd35\u0100Aa\u3a94\u3a97r\xf2\u03c3r\xf2\u09f6;\u43be\u0100Aa\u3aa1\u3aa4r\xf2\u03b8r\xf2\u09eba\xf0\u2713is;\u62fb\u0180dpt\u17a4\u3ab5\u3abe\u0100fl\u3aba\u17a9;\uc000\ud835\udd69im\xe5\u17b2\u0100Aa\u3ac7\u3acar\xf2\u03cer\xf2\u0a01\u0100cq\u3ad2\u17b8r;\uc000\ud835\udccd\u0100pt\u17d6\u3adcr\xe9\u17d4\u0400acefiosu\u3af0\u3afd\u3b08\u3b0c\u3b11\u3b15\u3b1b\u3b21c\u0100uy\u3af6\u3afbte\u803b\xfd\u40fd;\u444f\u0100iy\u3b02\u3b06rc;\u4177;\u444bn\u803b\xa5\u40a5r;\uc000\ud835\udd36cy;\u4457pf;\uc000\ud835\udd6acr;\uc000\ud835\udcce\u0100cm\u3b26\u3b29y;\u444el\u803b\xff\u40ff\u0500acdefhiosw\u3b42\u3b48\u3b54\u3b58\u3b64\u3b69\u3b6d\u3b74\u3b7a\u3b80cute;\u417a\u0100ay\u3b4d\u3b52ron;\u417e;\u4437ot;\u417c\u0100et\u3b5d\u3b61tr\xe6\u155fa;\u43b6r;\uc000\ud835\udd37cy;\u4436grarr;\u61ddpf;\uc000\ud835\udd6bcr;\uc000\ud835\udccf\u0100jn\u3b85\u3b87;\u600dj;\u600c"
	    .split("")
	    .map((c) => c.charCodeAt(0)));

	// Generated using scripts/write-decode-map.ts
	const xmlDecodeTree = new Uint16Array(
	// prettier-ignore
	"\u0200aglq\t\x15\x18\x1b\u026d\x0f\0\0\x12p;\u4026os;\u4027t;\u403et;\u403cuot;\u4022"
	    .split("")
	    .map((c) => c.charCodeAt(0)));

	// Adapted from https://github.com/mathiasbynens/he/blob/36afe179392226cf1b6ccdb16ebbb7a5a844d93a/src/he.js#L106-L134
	var _a;
	const decodeMap = new Map([
	    [0, 65533],
	    // C1 Unicode control character reference replacements
	    [128, 8364],
	    [130, 8218],
	    [131, 402],
	    [132, 8222],
	    [133, 8230],
	    [134, 8224],
	    [135, 8225],
	    [136, 710],
	    [137, 8240],
	    [138, 352],
	    [139, 8249],
	    [140, 338],
	    [142, 381],
	    [145, 8216],
	    [146, 8217],
	    [147, 8220],
	    [148, 8221],
	    [149, 8226],
	    [150, 8211],
	    [151, 8212],
	    [152, 732],
	    [153, 8482],
	    [154, 353],
	    [155, 8250],
	    [156, 339],
	    [158, 382],
	    [159, 376],
	]);
	/**
	 * Polyfill for `String.fromCodePoint`. It is used to create a string from a Unicode code point.
	 */
	const fromCodePoint = 
	// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins
	(_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function (codePoint) {
	    let output = "";
	    if (codePoint > 0xffff) {
	        codePoint -= 0x10000;
	        output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);
	        codePoint = 0xdc00 | (codePoint & 0x3ff);
	    }
	    output += String.fromCharCode(codePoint);
	    return output;
	};
	/**
	 * Replace the given code point with a replacement character if it is a
	 * surrogate or is outside the valid range. Otherwise return the code
	 * point unchanged.
	 */
	function replaceCodePoint(codePoint) {
	    var _a;
	    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {
	        return 0xfffd;
	    }
	    return (_a = decodeMap.get(codePoint)) !== null && _a !== void 0 ? _a : codePoint;
	}

	var CharCodes;
	(function (CharCodes) {
	    CharCodes[CharCodes["NUM"] = 35] = "NUM";
	    CharCodes[CharCodes["SEMI"] = 59] = "SEMI";
	    CharCodes[CharCodes["EQUALS"] = 61] = "EQUALS";
	    CharCodes[CharCodes["ZERO"] = 48] = "ZERO";
	    CharCodes[CharCodes["NINE"] = 57] = "NINE";
	    CharCodes[CharCodes["LOWER_A"] = 97] = "LOWER_A";
	    CharCodes[CharCodes["LOWER_F"] = 102] = "LOWER_F";
	    CharCodes[CharCodes["LOWER_X"] = 120] = "LOWER_X";
	    CharCodes[CharCodes["LOWER_Z"] = 122] = "LOWER_Z";
	    CharCodes[CharCodes["UPPER_A"] = 65] = "UPPER_A";
	    CharCodes[CharCodes["UPPER_F"] = 70] = "UPPER_F";
	    CharCodes[CharCodes["UPPER_Z"] = 90] = "UPPER_Z";
	})(CharCodes || (CharCodes = {}));
	/** Bit that needs to be set to convert an upper case ASCII character to lower case */
	const TO_LOWER_BIT = 0b100000;
	var BinTrieFlags;
	(function (BinTrieFlags) {
	    BinTrieFlags[BinTrieFlags["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
	    BinTrieFlags[BinTrieFlags["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
	    BinTrieFlags[BinTrieFlags["JUMP_TABLE"] = 127] = "JUMP_TABLE";
	})(BinTrieFlags || (BinTrieFlags = {}));
	function isNumber(code) {
	    return code >= CharCodes.ZERO && code <= CharCodes.NINE;
	}
	function isHexadecimalCharacter(code) {
	    return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F) ||
	        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F));
	}
	function isAsciiAlphaNumeric$1(code) {
	    return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z) ||
	        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z) ||
	        isNumber(code));
	}
	/**
	 * Checks if the given character is a valid end character for an entity in an attribute.
	 *
	 * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.
	 * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state
	 */
	function isEntityInAttributeInvalidEnd$1(code) {
	    return code === CharCodes.EQUALS || isAsciiAlphaNumeric$1(code);
	}
	var EntityDecoderState;
	(function (EntityDecoderState) {
	    EntityDecoderState[EntityDecoderState["EntityStart"] = 0] = "EntityStart";
	    EntityDecoderState[EntityDecoderState["NumericStart"] = 1] = "NumericStart";
	    EntityDecoderState[EntityDecoderState["NumericDecimal"] = 2] = "NumericDecimal";
	    EntityDecoderState[EntityDecoderState["NumericHex"] = 3] = "NumericHex";
	    EntityDecoderState[EntityDecoderState["NamedEntity"] = 4] = "NamedEntity";
	})(EntityDecoderState || (EntityDecoderState = {}));
	var DecodingMode;
	(function (DecodingMode) {
	    /** Entities in text nodes that can end with any character. */
	    DecodingMode[DecodingMode["Legacy"] = 0] = "Legacy";
	    /** Only allow entities terminated with a semicolon. */
	    DecodingMode[DecodingMode["Strict"] = 1] = "Strict";
	    /** Entities in attributes have limitations on ending characters. */
	    DecodingMode[DecodingMode["Attribute"] = 2] = "Attribute";
	})(DecodingMode || (DecodingMode = {}));
	/**
	 * Token decoder with support of writing partial entities.
	 */
	class EntityDecoder {
	    constructor(
	    /** The tree used to decode entities. */
	    decodeTree, 
	    /**
	     * The function that is called when a codepoint is decoded.
	     *
	     * For multi-byte named entities, this will be called multiple times,
	     * with the second codepoint, and the same `consumed` value.
	     *
	     * @param codepoint The decoded codepoint.
	     * @param consumed The number of bytes consumed by the decoder.
	     */
	    emitCodePoint, 
	    /** An object that is used to produce errors. */
	    errors) {
	        this.decodeTree = decodeTree;
	        this.emitCodePoint = emitCodePoint;
	        this.errors = errors;
	        /** The current state of the decoder. */
	        this.state = EntityDecoderState.EntityStart;
	        /** Characters that were consumed while parsing an entity. */
	        this.consumed = 1;
	        /**
	         * The result of the entity.
	         *
	         * Either the result index of a numeric entity, or the codepoint of a
	         * numeric entity.
	         */
	        this.result = 0;
	        /** The current index in the decode tree. */
	        this.treeIndex = 0;
	        /** The number of characters that were consumed in excess. */
	        this.excess = 1;
	        /** The mode in which the decoder is operating. */
	        this.decodeMode = DecodingMode.Strict;
	    }
	    /** Resets the instance to make it reusable. */
	    startEntity(decodeMode) {
	        this.decodeMode = decodeMode;
	        this.state = EntityDecoderState.EntityStart;
	        this.result = 0;
	        this.treeIndex = 0;
	        this.excess = 1;
	        this.consumed = 1;
	    }
	    /**
	     * Write an entity to the decoder. This can be called multiple times with partial entities.
	     * If the entity is incomplete, the decoder will return -1.
	     *
	     * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the
	     * entity is incomplete, and resume when the next string is written.
	     *
	     * @param string The string containing the entity (or a continuation of the entity).
	     * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.
	     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
	     */
	    write(str, offset) {
	        switch (this.state) {
	            case EntityDecoderState.EntityStart: {
	                if (str.charCodeAt(offset) === CharCodes.NUM) {
	                    this.state = EntityDecoderState.NumericStart;
	                    this.consumed += 1;
	                    return this.stateNumericStart(str, offset + 1);
	                }
	                this.state = EntityDecoderState.NamedEntity;
	                return this.stateNamedEntity(str, offset);
	            }
	            case EntityDecoderState.NumericStart: {
	                return this.stateNumericStart(str, offset);
	            }
	            case EntityDecoderState.NumericDecimal: {
	                return this.stateNumericDecimal(str, offset);
	            }
	            case EntityDecoderState.NumericHex: {
	                return this.stateNumericHex(str, offset);
	            }
	            case EntityDecoderState.NamedEntity: {
	                return this.stateNamedEntity(str, offset);
	            }
	        }
	    }
	    /**
	     * Switches between the numeric decimal and hexadecimal states.
	     *
	     * Equivalent to the `Numeric character reference state` in the HTML spec.
	     *
	     * @param str The string containing the entity (or a continuation of the entity).
	     * @param offset The current offset.
	     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
	     */
	    stateNumericStart(str, offset) {
	        if (offset >= str.length) {
	            return -1;
	        }
	        if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {
	            this.state = EntityDecoderState.NumericHex;
	            this.consumed += 1;
	            return this.stateNumericHex(str, offset + 1);
	        }
	        this.state = EntityDecoderState.NumericDecimal;
	        return this.stateNumericDecimal(str, offset);
	    }
	    addToNumericResult(str, start, end, base) {
	        if (start !== end) {
	            const digitCount = end - start;
	            this.result =
	                this.result * Math.pow(base, digitCount) +
	                    parseInt(str.substr(start, digitCount), base);
	            this.consumed += digitCount;
	        }
	    }
	    /**
	     * Parses a hexadecimal numeric entity.
	     *
	     * Equivalent to the `Hexademical character reference state` in the HTML spec.
	     *
	     * @param str The string containing the entity (or a continuation of the entity).
	     * @param offset The current offset.
	     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
	     */
	    stateNumericHex(str, offset) {
	        const startIdx = offset;
	        while (offset < str.length) {
	            const char = str.charCodeAt(offset);
	            if (isNumber(char) || isHexadecimalCharacter(char)) {
	                offset += 1;
	            }
	            else {
	                this.addToNumericResult(str, startIdx, offset, 16);
	                return this.emitNumericEntity(char, 3);
	            }
	        }
	        this.addToNumericResult(str, startIdx, offset, 16);
	        return -1;
	    }
	    /**
	     * Parses a decimal numeric entity.
	     *
	     * Equivalent to the `Decimal character reference state` in the HTML spec.
	     *
	     * @param str The string containing the entity (or a continuation of the entity).
	     * @param offset The current offset.
	     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
	     */
	    stateNumericDecimal(str, offset) {
	        const startIdx = offset;
	        while (offset < str.length) {
	            const char = str.charCodeAt(offset);
	            if (isNumber(char)) {
	                offset += 1;
	            }
	            else {
	                this.addToNumericResult(str, startIdx, offset, 10);
	                return this.emitNumericEntity(char, 2);
	            }
	        }
	        this.addToNumericResult(str, startIdx, offset, 10);
	        return -1;
	    }
	    /**
	     * Validate and emit a numeric entity.
	     *
	     * Implements the logic from the `Hexademical character reference start
	     * state` and `Numeric character reference end state` in the HTML spec.
	     *
	     * @param lastCp The last code point of the entity. Used to see if the
	     *               entity was terminated with a semicolon.
	     * @param expectedLength The minimum number of characters that should be
	     *                       consumed. Used to validate that at least one digit
	     *                       was consumed.
	     * @returns The number of characters that were consumed.
	     */
	    emitNumericEntity(lastCp, expectedLength) {
	        var _a;
	        // Ensure we consumed at least one digit.
	        if (this.consumed <= expectedLength) {
	            (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
	            return 0;
	        }
	        // Figure out if this is a legit end of the entity
	        if (lastCp === CharCodes.SEMI) {
	            this.consumed += 1;
	        }
	        else if (this.decodeMode === DecodingMode.Strict) {
	            return 0;
	        }
	        this.emitCodePoint(replaceCodePoint(this.result), this.consumed);
	        if (this.errors) {
	            if (lastCp !== CharCodes.SEMI) {
	                this.errors.missingSemicolonAfterCharacterReference();
	            }
	            this.errors.validateNumericCharacterReference(this.result);
	        }
	        return this.consumed;
	    }
	    /**
	     * Parses a named entity.
	     *
	     * Equivalent to the `Named character reference state` in the HTML spec.
	     *
	     * @param str The string containing the entity (or a continuation of the entity).
	     * @param offset The current offset.
	     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
	     */
	    stateNamedEntity(str, offset) {
	        const { decodeTree } = this;
	        let current = decodeTree[this.treeIndex];
	        // The mask is the number of bytes of the value, including the current byte.
	        let valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
	        for (; offset < str.length; offset++, this.excess++) {
	            const char = str.charCodeAt(offset);
	            this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);
	            if (this.treeIndex < 0) {
	                return this.result === 0 ||
	                    // If we are parsing an attribute
	                    (this.decodeMode === DecodingMode.Attribute &&
	                        // We shouldn't have consumed any characters after the entity,
	                        (valueLength === 0 ||
	                            // And there should be no invalid characters.
	                            isEntityInAttributeInvalidEnd$1(char)))
	                    ? 0
	                    : this.emitNotTerminatedNamedEntity();
	            }
	            current = decodeTree[this.treeIndex];
	            valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
	            // If the branch is a value, store it and continue
	            if (valueLength !== 0) {
	                // If the entity is terminated by a semicolon, we are done.
	                if (char === CharCodes.SEMI) {
	                    return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);
	                }
	                // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.
	                if (this.decodeMode !== DecodingMode.Strict) {
	                    this.result = this.treeIndex;
	                    this.consumed += this.excess;
	                    this.excess = 0;
	                }
	            }
	        }
	        return -1;
	    }
	    /**
	     * Emit a named entity that was not terminated with a semicolon.
	     *
	     * @returns The number of characters consumed.
	     */
	    emitNotTerminatedNamedEntity() {
	        var _a;
	        const { result, decodeTree } = this;
	        const valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;
	        this.emitNamedEntityData(result, valueLength, this.consumed);
	        (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();
	        return this.consumed;
	    }
	    /**
	     * Emit a named entity.
	     *
	     * @param result The index of the entity in the decode tree.
	     * @param valueLength The number of bytes in the entity.
	     * @param consumed The number of characters consumed.
	     *
	     * @returns The number of characters consumed.
	     */
	    emitNamedEntityData(result, valueLength, consumed) {
	        const { decodeTree } = this;
	        this.emitCodePoint(valueLength === 1
	            ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH
	            : decodeTree[result + 1], consumed);
	        if (valueLength === 3) {
	            // For multi-byte values, we need to emit the second byte.
	            this.emitCodePoint(decodeTree[result + 2], consumed);
	        }
	        return consumed;
	    }
	    /**
	     * Signal to the parser that the end of the input was reached.
	     *
	     * Remaining data will be emitted and relevant errors will be produced.
	     *
	     * @returns The number of characters consumed.
	     */
	    end() {
	        var _a;
	        switch (this.state) {
	            case EntityDecoderState.NamedEntity: {
	                // Emit a named entity if we have one.
	                return this.result !== 0 &&
	                    (this.decodeMode !== DecodingMode.Attribute ||
	                        this.result === this.treeIndex)
	                    ? this.emitNotTerminatedNamedEntity()
	                    : 0;
	            }
	            // Otherwise, emit a numeric entity if we have one.
	            case EntityDecoderState.NumericDecimal: {
	                return this.emitNumericEntity(0, 2);
	            }
	            case EntityDecoderState.NumericHex: {
	                return this.emitNumericEntity(0, 3);
	            }
	            case EntityDecoderState.NumericStart: {
	                (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
	                return 0;
	            }
	            case EntityDecoderState.EntityStart: {
	                // Return 0 if we have no entity.
	                return 0;
	            }
	        }
	    }
	}
	/**
	 * Creates a function that decodes entities in a string.
	 *
	 * @param decodeTree The decode tree.
	 * @returns A function that decodes entities in a string.
	 */
	function getDecoder(decodeTree) {
	    let ret = "";
	    const decoder = new EntityDecoder(decodeTree, (str) => (ret += fromCodePoint(str)));
	    return function decodeWithTrie(str, decodeMode) {
	        let lastIndex = 0;
	        let offset = 0;
	        while ((offset = str.indexOf("&", offset)) >= 0) {
	            ret += str.slice(lastIndex, offset);
	            decoder.startEntity(decodeMode);
	            const len = decoder.write(str, 
	            // Skip the "&"
	            offset + 1);
	            if (len < 0) {
	                lastIndex = offset + decoder.end();
	                break;
	            }
	            lastIndex = offset + len;
	            // If `len` is 0, skip the current `&` and continue.
	            offset = len === 0 ? lastIndex + 1 : lastIndex;
	        }
	        const result = ret + str.slice(lastIndex);
	        // Make sure we don't keep a reference to the final string.
	        ret = "";
	        return result;
	    };
	}
	/**
	 * Determines the branch of the current node that is taken given the current
	 * character. This function is used to traverse the trie.
	 *
	 * @param decodeTree The trie.
	 * @param current The current node.
	 * @param nodeIdx The index right after the current node and its value.
	 * @param char The current character.
	 * @returns The index of the next node, or -1 if no branch is taken.
	 */
	function determineBranch(decodeTree, current, nodeIdx, char) {
	    const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;
	    const jumpOffset = current & BinTrieFlags.JUMP_TABLE;
	    // Case 1: Single branch encoded in jump offset
	    if (branchCount === 0) {
	        return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;
	    }
	    // Case 2: Multiple branches encoded in jump table
	    if (jumpOffset) {
	        const value = char - jumpOffset;
	        return value < 0 || value >= branchCount
	            ? -1
	            : decodeTree[nodeIdx + value] - 1;
	    }
	    // Case 3: Multiple branches encoded in dictionary
	    // Binary search for the character.
	    let lo = nodeIdx;
	    let hi = lo + branchCount - 1;
	    while (lo <= hi) {
	        const mid = (lo + hi) >>> 1;
	        const midVal = decodeTree[mid];
	        if (midVal < char) {
	            lo = mid + 1;
	        }
	        else if (midVal > char) {
	            hi = mid - 1;
	        }
	        else {
	            return decodeTree[mid + branchCount];
	        }
	    }
	    return -1;
	}
	getDecoder(htmlDecodeTree);
	getDecoder(xmlDecodeTree);

	/** All valid namespaces in HTML. */
	var NS;
	(function (NS) {
	    NS["HTML"] = "http://www.w3.org/1999/xhtml";
	    NS["MATHML"] = "http://www.w3.org/1998/Math/MathML";
	    NS["SVG"] = "http://www.w3.org/2000/svg";
	    NS["XLINK"] = "http://www.w3.org/1999/xlink";
	    NS["XML"] = "http://www.w3.org/XML/1998/namespace";
	    NS["XMLNS"] = "http://www.w3.org/2000/xmlns/";
	})(NS = NS || (NS = {}));
	var ATTRS;
	(function (ATTRS) {
	    ATTRS["TYPE"] = "type";
	    ATTRS["ACTION"] = "action";
	    ATTRS["ENCODING"] = "encoding";
	    ATTRS["PROMPT"] = "prompt";
	    ATTRS["NAME"] = "name";
	    ATTRS["COLOR"] = "color";
	    ATTRS["FACE"] = "face";
	    ATTRS["SIZE"] = "size";
	})(ATTRS = ATTRS || (ATTRS = {}));
	/**
	 * The mode of the document.
	 *
	 * @see {@link https://dom.spec.whatwg.org/#concept-document-limited-quirks}
	 */
	var DOCUMENT_MODE;
	(function (DOCUMENT_MODE) {
	    DOCUMENT_MODE["NO_QUIRKS"] = "no-quirks";
	    DOCUMENT_MODE["QUIRKS"] = "quirks";
	    DOCUMENT_MODE["LIMITED_QUIRKS"] = "limited-quirks";
	})(DOCUMENT_MODE = DOCUMENT_MODE || (DOCUMENT_MODE = {}));
	var TAG_NAMES;
	(function (TAG_NAMES) {
	    TAG_NAMES["A"] = "a";
	    TAG_NAMES["ADDRESS"] = "address";
	    TAG_NAMES["ANNOTATION_XML"] = "annotation-xml";
	    TAG_NAMES["APPLET"] = "applet";
	    TAG_NAMES["AREA"] = "area";
	    TAG_NAMES["ARTICLE"] = "article";
	    TAG_NAMES["ASIDE"] = "aside";
	    TAG_NAMES["B"] = "b";
	    TAG_NAMES["BASE"] = "base";
	    TAG_NAMES["BASEFONT"] = "basefont";
	    TAG_NAMES["BGSOUND"] = "bgsound";
	    TAG_NAMES["BIG"] = "big";
	    TAG_NAMES["BLOCKQUOTE"] = "blockquote";
	    TAG_NAMES["BODY"] = "body";
	    TAG_NAMES["BR"] = "br";
	    TAG_NAMES["BUTTON"] = "button";
	    TAG_NAMES["CAPTION"] = "caption";
	    TAG_NAMES["CENTER"] = "center";
	    TAG_NAMES["CODE"] = "code";
	    TAG_NAMES["COL"] = "col";
	    TAG_NAMES["COLGROUP"] = "colgroup";
	    TAG_NAMES["DD"] = "dd";
	    TAG_NAMES["DESC"] = "desc";
	    TAG_NAMES["DETAILS"] = "details";
	    TAG_NAMES["DIALOG"] = "dialog";
	    TAG_NAMES["DIR"] = "dir";
	    TAG_NAMES["DIV"] = "div";
	    TAG_NAMES["DL"] = "dl";
	    TAG_NAMES["DT"] = "dt";
	    TAG_NAMES["EM"] = "em";
	    TAG_NAMES["EMBED"] = "embed";
	    TAG_NAMES["FIELDSET"] = "fieldset";
	    TAG_NAMES["FIGCAPTION"] = "figcaption";
	    TAG_NAMES["FIGURE"] = "figure";
	    TAG_NAMES["FONT"] = "font";
	    TAG_NAMES["FOOTER"] = "footer";
	    TAG_NAMES["FOREIGN_OBJECT"] = "foreignObject";
	    TAG_NAMES["FORM"] = "form";
	    TAG_NAMES["FRAME"] = "frame";
	    TAG_NAMES["FRAMESET"] = "frameset";
	    TAG_NAMES["H1"] = "h1";
	    TAG_NAMES["H2"] = "h2";
	    TAG_NAMES["H3"] = "h3";
	    TAG_NAMES["H4"] = "h4";
	    TAG_NAMES["H5"] = "h5";
	    TAG_NAMES["H6"] = "h6";
	    TAG_NAMES["HEAD"] = "head";
	    TAG_NAMES["HEADER"] = "header";
	    TAG_NAMES["HGROUP"] = "hgroup";
	    TAG_NAMES["HR"] = "hr";
	    TAG_NAMES["HTML"] = "html";
	    TAG_NAMES["I"] = "i";
	    TAG_NAMES["IMG"] = "img";
	    TAG_NAMES["IMAGE"] = "image";
	    TAG_NAMES["INPUT"] = "input";
	    TAG_NAMES["IFRAME"] = "iframe";
	    TAG_NAMES["KEYGEN"] = "keygen";
	    TAG_NAMES["LABEL"] = "label";
	    TAG_NAMES["LI"] = "li";
	    TAG_NAMES["LINK"] = "link";
	    TAG_NAMES["LISTING"] = "listing";
	    TAG_NAMES["MAIN"] = "main";
	    TAG_NAMES["MALIGNMARK"] = "malignmark";
	    TAG_NAMES["MARQUEE"] = "marquee";
	    TAG_NAMES["MATH"] = "math";
	    TAG_NAMES["MENU"] = "menu";
	    TAG_NAMES["META"] = "meta";
	    TAG_NAMES["MGLYPH"] = "mglyph";
	    TAG_NAMES["MI"] = "mi";
	    TAG_NAMES["MO"] = "mo";
	    TAG_NAMES["MN"] = "mn";
	    TAG_NAMES["MS"] = "ms";
	    TAG_NAMES["MTEXT"] = "mtext";
	    TAG_NAMES["NAV"] = "nav";
	    TAG_NAMES["NOBR"] = "nobr";
	    TAG_NAMES["NOFRAMES"] = "noframes";
	    TAG_NAMES["NOEMBED"] = "noembed";
	    TAG_NAMES["NOSCRIPT"] = "noscript";
	    TAG_NAMES["OBJECT"] = "object";
	    TAG_NAMES["OL"] = "ol";
	    TAG_NAMES["OPTGROUP"] = "optgroup";
	    TAG_NAMES["OPTION"] = "option";
	    TAG_NAMES["P"] = "p";
	    TAG_NAMES["PARAM"] = "param";
	    TAG_NAMES["PLAINTEXT"] = "plaintext";
	    TAG_NAMES["PRE"] = "pre";
	    TAG_NAMES["RB"] = "rb";
	    TAG_NAMES["RP"] = "rp";
	    TAG_NAMES["RT"] = "rt";
	    TAG_NAMES["RTC"] = "rtc";
	    TAG_NAMES["RUBY"] = "ruby";
	    TAG_NAMES["S"] = "s";
	    TAG_NAMES["SCRIPT"] = "script";
	    TAG_NAMES["SECTION"] = "section";
	    TAG_NAMES["SELECT"] = "select";
	    TAG_NAMES["SOURCE"] = "source";
	    TAG_NAMES["SMALL"] = "small";
	    TAG_NAMES["SPAN"] = "span";
	    TAG_NAMES["STRIKE"] = "strike";
	    TAG_NAMES["STRONG"] = "strong";
	    TAG_NAMES["STYLE"] = "style";
	    TAG_NAMES["SUB"] = "sub";
	    TAG_NAMES["SUMMARY"] = "summary";
	    TAG_NAMES["SUP"] = "sup";
	    TAG_NAMES["TABLE"] = "table";
	    TAG_NAMES["TBODY"] = "tbody";
	    TAG_NAMES["TEMPLATE"] = "template";
	    TAG_NAMES["TEXTAREA"] = "textarea";
	    TAG_NAMES["TFOOT"] = "tfoot";
	    TAG_NAMES["TD"] = "td";
	    TAG_NAMES["TH"] = "th";
	    TAG_NAMES["THEAD"] = "thead";
	    TAG_NAMES["TITLE"] = "title";
	    TAG_NAMES["TR"] = "tr";
	    TAG_NAMES["TRACK"] = "track";
	    TAG_NAMES["TT"] = "tt";
	    TAG_NAMES["U"] = "u";
	    TAG_NAMES["UL"] = "ul";
	    TAG_NAMES["SVG"] = "svg";
	    TAG_NAMES["VAR"] = "var";
	    TAG_NAMES["WBR"] = "wbr";
	    TAG_NAMES["XMP"] = "xmp";
	})(TAG_NAMES = TAG_NAMES || (TAG_NAMES = {}));
	/**
	 * Tag IDs are numeric IDs for known tag names.
	 *
	 * We use tag IDs to improve the performance of tag name comparisons.
	 */
	var TAG_ID;
	(function (TAG_ID) {
	    TAG_ID[TAG_ID["UNKNOWN"] = 0] = "UNKNOWN";
	    TAG_ID[TAG_ID["A"] = 1] = "A";
	    TAG_ID[TAG_ID["ADDRESS"] = 2] = "ADDRESS";
	    TAG_ID[TAG_ID["ANNOTATION_XML"] = 3] = "ANNOTATION_XML";
	    TAG_ID[TAG_ID["APPLET"] = 4] = "APPLET";
	    TAG_ID[TAG_ID["AREA"] = 5] = "AREA";
	    TAG_ID[TAG_ID["ARTICLE"] = 6] = "ARTICLE";
	    TAG_ID[TAG_ID["ASIDE"] = 7] = "ASIDE";
	    TAG_ID[TAG_ID["B"] = 8] = "B";
	    TAG_ID[TAG_ID["BASE"] = 9] = "BASE";
	    TAG_ID[TAG_ID["BASEFONT"] = 10] = "BASEFONT";
	    TAG_ID[TAG_ID["BGSOUND"] = 11] = "BGSOUND";
	    TAG_ID[TAG_ID["BIG"] = 12] = "BIG";
	    TAG_ID[TAG_ID["BLOCKQUOTE"] = 13] = "BLOCKQUOTE";
	    TAG_ID[TAG_ID["BODY"] = 14] = "BODY";
	    TAG_ID[TAG_ID["BR"] = 15] = "BR";
	    TAG_ID[TAG_ID["BUTTON"] = 16] = "BUTTON";
	    TAG_ID[TAG_ID["CAPTION"] = 17] = "CAPTION";
	    TAG_ID[TAG_ID["CENTER"] = 18] = "CENTER";
	    TAG_ID[TAG_ID["CODE"] = 19] = "CODE";
	    TAG_ID[TAG_ID["COL"] = 20] = "COL";
	    TAG_ID[TAG_ID["COLGROUP"] = 21] = "COLGROUP";
	    TAG_ID[TAG_ID["DD"] = 22] = "DD";
	    TAG_ID[TAG_ID["DESC"] = 23] = "DESC";
	    TAG_ID[TAG_ID["DETAILS"] = 24] = "DETAILS";
	    TAG_ID[TAG_ID["DIALOG"] = 25] = "DIALOG";
	    TAG_ID[TAG_ID["DIR"] = 26] = "DIR";
	    TAG_ID[TAG_ID["DIV"] = 27] = "DIV";
	    TAG_ID[TAG_ID["DL"] = 28] = "DL";
	    TAG_ID[TAG_ID["DT"] = 29] = "DT";
	    TAG_ID[TAG_ID["EM"] = 30] = "EM";
	    TAG_ID[TAG_ID["EMBED"] = 31] = "EMBED";
	    TAG_ID[TAG_ID["FIELDSET"] = 32] = "FIELDSET";
	    TAG_ID[TAG_ID["FIGCAPTION"] = 33] = "FIGCAPTION";
	    TAG_ID[TAG_ID["FIGURE"] = 34] = "FIGURE";
	    TAG_ID[TAG_ID["FONT"] = 35] = "FONT";
	    TAG_ID[TAG_ID["FOOTER"] = 36] = "FOOTER";
	    TAG_ID[TAG_ID["FOREIGN_OBJECT"] = 37] = "FOREIGN_OBJECT";
	    TAG_ID[TAG_ID["FORM"] = 38] = "FORM";
	    TAG_ID[TAG_ID["FRAME"] = 39] = "FRAME";
	    TAG_ID[TAG_ID["FRAMESET"] = 40] = "FRAMESET";
	    TAG_ID[TAG_ID["H1"] = 41] = "H1";
	    TAG_ID[TAG_ID["H2"] = 42] = "H2";
	    TAG_ID[TAG_ID["H3"] = 43] = "H3";
	    TAG_ID[TAG_ID["H4"] = 44] = "H4";
	    TAG_ID[TAG_ID["H5"] = 45] = "H5";
	    TAG_ID[TAG_ID["H6"] = 46] = "H6";
	    TAG_ID[TAG_ID["HEAD"] = 47] = "HEAD";
	    TAG_ID[TAG_ID["HEADER"] = 48] = "HEADER";
	    TAG_ID[TAG_ID["HGROUP"] = 49] = "HGROUP";
	    TAG_ID[TAG_ID["HR"] = 50] = "HR";
	    TAG_ID[TAG_ID["HTML"] = 51] = "HTML";
	    TAG_ID[TAG_ID["I"] = 52] = "I";
	    TAG_ID[TAG_ID["IMG"] = 53] = "IMG";
	    TAG_ID[TAG_ID["IMAGE"] = 54] = "IMAGE";
	    TAG_ID[TAG_ID["INPUT"] = 55] = "INPUT";
	    TAG_ID[TAG_ID["IFRAME"] = 56] = "IFRAME";
	    TAG_ID[TAG_ID["KEYGEN"] = 57] = "KEYGEN";
	    TAG_ID[TAG_ID["LABEL"] = 58] = "LABEL";
	    TAG_ID[TAG_ID["LI"] = 59] = "LI";
	    TAG_ID[TAG_ID["LINK"] = 60] = "LINK";
	    TAG_ID[TAG_ID["LISTING"] = 61] = "LISTING";
	    TAG_ID[TAG_ID["MAIN"] = 62] = "MAIN";
	    TAG_ID[TAG_ID["MALIGNMARK"] = 63] = "MALIGNMARK";
	    TAG_ID[TAG_ID["MARQUEE"] = 64] = "MARQUEE";
	    TAG_ID[TAG_ID["MATH"] = 65] = "MATH";
	    TAG_ID[TAG_ID["MENU"] = 66] = "MENU";
	    TAG_ID[TAG_ID["META"] = 67] = "META";
	    TAG_ID[TAG_ID["MGLYPH"] = 68] = "MGLYPH";
	    TAG_ID[TAG_ID["MI"] = 69] = "MI";
	    TAG_ID[TAG_ID["MO"] = 70] = "MO";
	    TAG_ID[TAG_ID["MN"] = 71] = "MN";
	    TAG_ID[TAG_ID["MS"] = 72] = "MS";
	    TAG_ID[TAG_ID["MTEXT"] = 73] = "MTEXT";
	    TAG_ID[TAG_ID["NAV"] = 74] = "NAV";
	    TAG_ID[TAG_ID["NOBR"] = 75] = "NOBR";
	    TAG_ID[TAG_ID["NOFRAMES"] = 76] = "NOFRAMES";
	    TAG_ID[TAG_ID["NOEMBED"] = 77] = "NOEMBED";
	    TAG_ID[TAG_ID["NOSCRIPT"] = 78] = "NOSCRIPT";
	    TAG_ID[TAG_ID["OBJECT"] = 79] = "OBJECT";
	    TAG_ID[TAG_ID["OL"] = 80] = "OL";
	    TAG_ID[TAG_ID["OPTGROUP"] = 81] = "OPTGROUP";
	    TAG_ID[TAG_ID["OPTION"] = 82] = "OPTION";
	    TAG_ID[TAG_ID["P"] = 83] = "P";
	    TAG_ID[TAG_ID["PARAM"] = 84] = "PARAM";
	    TAG_ID[TAG_ID["PLAINTEXT"] = 85] = "PLAINTEXT";
	    TAG_ID[TAG_ID["PRE"] = 86] = "PRE";
	    TAG_ID[TAG_ID["RB"] = 87] = "RB";
	    TAG_ID[TAG_ID["RP"] = 88] = "RP";
	    TAG_ID[TAG_ID["RT"] = 89] = "RT";
	    TAG_ID[TAG_ID["RTC"] = 90] = "RTC";
	    TAG_ID[TAG_ID["RUBY"] = 91] = "RUBY";
	    TAG_ID[TAG_ID["S"] = 92] = "S";
	    TAG_ID[TAG_ID["SCRIPT"] = 93] = "SCRIPT";
	    TAG_ID[TAG_ID["SECTION"] = 94] = "SECTION";
	    TAG_ID[TAG_ID["SELECT"] = 95] = "SELECT";
	    TAG_ID[TAG_ID["SOURCE"] = 96] = "SOURCE";
	    TAG_ID[TAG_ID["SMALL"] = 97] = "SMALL";
	    TAG_ID[TAG_ID["SPAN"] = 98] = "SPAN";
	    TAG_ID[TAG_ID["STRIKE"] = 99] = "STRIKE";
	    TAG_ID[TAG_ID["STRONG"] = 100] = "STRONG";
	    TAG_ID[TAG_ID["STYLE"] = 101] = "STYLE";
	    TAG_ID[TAG_ID["SUB"] = 102] = "SUB";
	    TAG_ID[TAG_ID["SUMMARY"] = 103] = "SUMMARY";
	    TAG_ID[TAG_ID["SUP"] = 104] = "SUP";
	    TAG_ID[TAG_ID["TABLE"] = 105] = "TABLE";
	    TAG_ID[TAG_ID["TBODY"] = 106] = "TBODY";
	    TAG_ID[TAG_ID["TEMPLATE"] = 107] = "TEMPLATE";
	    TAG_ID[TAG_ID["TEXTAREA"] = 108] = "TEXTAREA";
	    TAG_ID[TAG_ID["TFOOT"] = 109] = "TFOOT";
	    TAG_ID[TAG_ID["TD"] = 110] = "TD";
	    TAG_ID[TAG_ID["TH"] = 111] = "TH";
	    TAG_ID[TAG_ID["THEAD"] = 112] = "THEAD";
	    TAG_ID[TAG_ID["TITLE"] = 113] = "TITLE";
	    TAG_ID[TAG_ID["TR"] = 114] = "TR";
	    TAG_ID[TAG_ID["TRACK"] = 115] = "TRACK";
	    TAG_ID[TAG_ID["TT"] = 116] = "TT";
	    TAG_ID[TAG_ID["U"] = 117] = "U";
	    TAG_ID[TAG_ID["UL"] = 118] = "UL";
	    TAG_ID[TAG_ID["SVG"] = 119] = "SVG";
	    TAG_ID[TAG_ID["VAR"] = 120] = "VAR";
	    TAG_ID[TAG_ID["WBR"] = 121] = "WBR";
	    TAG_ID[TAG_ID["XMP"] = 122] = "XMP";
	})(TAG_ID = TAG_ID || (TAG_ID = {}));
	const TAG_NAME_TO_ID = new Map([
	    [TAG_NAMES.A, TAG_ID.A],
	    [TAG_NAMES.ADDRESS, TAG_ID.ADDRESS],
	    [TAG_NAMES.ANNOTATION_XML, TAG_ID.ANNOTATION_XML],
	    [TAG_NAMES.APPLET, TAG_ID.APPLET],
	    [TAG_NAMES.AREA, TAG_ID.AREA],
	    [TAG_NAMES.ARTICLE, TAG_ID.ARTICLE],
	    [TAG_NAMES.ASIDE, TAG_ID.ASIDE],
	    [TAG_NAMES.B, TAG_ID.B],
	    [TAG_NAMES.BASE, TAG_ID.BASE],
	    [TAG_NAMES.BASEFONT, TAG_ID.BASEFONT],
	    [TAG_NAMES.BGSOUND, TAG_ID.BGSOUND],
	    [TAG_NAMES.BIG, TAG_ID.BIG],
	    [TAG_NAMES.BLOCKQUOTE, TAG_ID.BLOCKQUOTE],
	    [TAG_NAMES.BODY, TAG_ID.BODY],
	    [TAG_NAMES.BR, TAG_ID.BR],
	    [TAG_NAMES.BUTTON, TAG_ID.BUTTON],
	    [TAG_NAMES.CAPTION, TAG_ID.CAPTION],
	    [TAG_NAMES.CENTER, TAG_ID.CENTER],
	    [TAG_NAMES.CODE, TAG_ID.CODE],
	    [TAG_NAMES.COL, TAG_ID.COL],
	    [TAG_NAMES.COLGROUP, TAG_ID.COLGROUP],
	    [TAG_NAMES.DD, TAG_ID.DD],
	    [TAG_NAMES.DESC, TAG_ID.DESC],
	    [TAG_NAMES.DETAILS, TAG_ID.DETAILS],
	    [TAG_NAMES.DIALOG, TAG_ID.DIALOG],
	    [TAG_NAMES.DIR, TAG_ID.DIR],
	    [TAG_NAMES.DIV, TAG_ID.DIV],
	    [TAG_NAMES.DL, TAG_ID.DL],
	    [TAG_NAMES.DT, TAG_ID.DT],
	    [TAG_NAMES.EM, TAG_ID.EM],
	    [TAG_NAMES.EMBED, TAG_ID.EMBED],
	    [TAG_NAMES.FIELDSET, TAG_ID.FIELDSET],
	    [TAG_NAMES.FIGCAPTION, TAG_ID.FIGCAPTION],
	    [TAG_NAMES.FIGURE, TAG_ID.FIGURE],
	    [TAG_NAMES.FONT, TAG_ID.FONT],
	    [TAG_NAMES.FOOTER, TAG_ID.FOOTER],
	    [TAG_NAMES.FOREIGN_OBJECT, TAG_ID.FOREIGN_OBJECT],
	    [TAG_NAMES.FORM, TAG_ID.FORM],
	    [TAG_NAMES.FRAME, TAG_ID.FRAME],
	    [TAG_NAMES.FRAMESET, TAG_ID.FRAMESET],
	    [TAG_NAMES.H1, TAG_ID.H1],
	    [TAG_NAMES.H2, TAG_ID.H2],
	    [TAG_NAMES.H3, TAG_ID.H3],
	    [TAG_NAMES.H4, TAG_ID.H4],
	    [TAG_NAMES.H5, TAG_ID.H5],
	    [TAG_NAMES.H6, TAG_ID.H6],
	    [TAG_NAMES.HEAD, TAG_ID.HEAD],
	    [TAG_NAMES.HEADER, TAG_ID.HEADER],
	    [TAG_NAMES.HGROUP, TAG_ID.HGROUP],
	    [TAG_NAMES.HR, TAG_ID.HR],
	    [TAG_NAMES.HTML, TAG_ID.HTML],
	    [TAG_NAMES.I, TAG_ID.I],
	    [TAG_NAMES.IMG, TAG_ID.IMG],
	    [TAG_NAMES.IMAGE, TAG_ID.IMAGE],
	    [TAG_NAMES.INPUT, TAG_ID.INPUT],
	    [TAG_NAMES.IFRAME, TAG_ID.IFRAME],
	    [TAG_NAMES.KEYGEN, TAG_ID.KEYGEN],
	    [TAG_NAMES.LABEL, TAG_ID.LABEL],
	    [TAG_NAMES.LI, TAG_ID.LI],
	    [TAG_NAMES.LINK, TAG_ID.LINK],
	    [TAG_NAMES.LISTING, TAG_ID.LISTING],
	    [TAG_NAMES.MAIN, TAG_ID.MAIN],
	    [TAG_NAMES.MALIGNMARK, TAG_ID.MALIGNMARK],
	    [TAG_NAMES.MARQUEE, TAG_ID.MARQUEE],
	    [TAG_NAMES.MATH, TAG_ID.MATH],
	    [TAG_NAMES.MENU, TAG_ID.MENU],
	    [TAG_NAMES.META, TAG_ID.META],
	    [TAG_NAMES.MGLYPH, TAG_ID.MGLYPH],
	    [TAG_NAMES.MI, TAG_ID.MI],
	    [TAG_NAMES.MO, TAG_ID.MO],
	    [TAG_NAMES.MN, TAG_ID.MN],
	    [TAG_NAMES.MS, TAG_ID.MS],
	    [TAG_NAMES.MTEXT, TAG_ID.MTEXT],
	    [TAG_NAMES.NAV, TAG_ID.NAV],
	    [TAG_NAMES.NOBR, TAG_ID.NOBR],
	    [TAG_NAMES.NOFRAMES, TAG_ID.NOFRAMES],
	    [TAG_NAMES.NOEMBED, TAG_ID.NOEMBED],
	    [TAG_NAMES.NOSCRIPT, TAG_ID.NOSCRIPT],
	    [TAG_NAMES.OBJECT, TAG_ID.OBJECT],
	    [TAG_NAMES.OL, TAG_ID.OL],
	    [TAG_NAMES.OPTGROUP, TAG_ID.OPTGROUP],
	    [TAG_NAMES.OPTION, TAG_ID.OPTION],
	    [TAG_NAMES.P, TAG_ID.P],
	    [TAG_NAMES.PARAM, TAG_ID.PARAM],
	    [TAG_NAMES.PLAINTEXT, TAG_ID.PLAINTEXT],
	    [TAG_NAMES.PRE, TAG_ID.PRE],
	    [TAG_NAMES.RB, TAG_ID.RB],
	    [TAG_NAMES.RP, TAG_ID.RP],
	    [TAG_NAMES.RT, TAG_ID.RT],
	    [TAG_NAMES.RTC, TAG_ID.RTC],
	    [TAG_NAMES.RUBY, TAG_ID.RUBY],
	    [TAG_NAMES.S, TAG_ID.S],
	    [TAG_NAMES.SCRIPT, TAG_ID.SCRIPT],
	    [TAG_NAMES.SECTION, TAG_ID.SECTION],
	    [TAG_NAMES.SELECT, TAG_ID.SELECT],
	    [TAG_NAMES.SOURCE, TAG_ID.SOURCE],
	    [TAG_NAMES.SMALL, TAG_ID.SMALL],
	    [TAG_NAMES.SPAN, TAG_ID.SPAN],
	    [TAG_NAMES.STRIKE, TAG_ID.STRIKE],
	    [TAG_NAMES.STRONG, TAG_ID.STRONG],
	    [TAG_NAMES.STYLE, TAG_ID.STYLE],
	    [TAG_NAMES.SUB, TAG_ID.SUB],
	    [TAG_NAMES.SUMMARY, TAG_ID.SUMMARY],
	    [TAG_NAMES.SUP, TAG_ID.SUP],
	    [TAG_NAMES.TABLE, TAG_ID.TABLE],
	    [TAG_NAMES.TBODY, TAG_ID.TBODY],
	    [TAG_NAMES.TEMPLATE, TAG_ID.TEMPLATE],
	    [TAG_NAMES.TEXTAREA, TAG_ID.TEXTAREA],
	    [TAG_NAMES.TFOOT, TAG_ID.TFOOT],
	    [TAG_NAMES.TD, TAG_ID.TD],
	    [TAG_NAMES.TH, TAG_ID.TH],
	    [TAG_NAMES.THEAD, TAG_ID.THEAD],
	    [TAG_NAMES.TITLE, TAG_ID.TITLE],
	    [TAG_NAMES.TR, TAG_ID.TR],
	    [TAG_NAMES.TRACK, TAG_ID.TRACK],
	    [TAG_NAMES.TT, TAG_ID.TT],
	    [TAG_NAMES.U, TAG_ID.U],
	    [TAG_NAMES.UL, TAG_ID.UL],
	    [TAG_NAMES.SVG, TAG_ID.SVG],
	    [TAG_NAMES.VAR, TAG_ID.VAR],
	    [TAG_NAMES.WBR, TAG_ID.WBR],
	    [TAG_NAMES.XMP, TAG_ID.XMP],
	]);
	function getTagID(tagName) {
	    var _a;
	    return (_a = TAG_NAME_TO_ID.get(tagName)) !== null && _a !== void 0 ? _a : TAG_ID.UNKNOWN;
	}
	const $ = TAG_ID;
	const SPECIAL_ELEMENTS = {
	    [NS.HTML]: new Set([
	        $.ADDRESS,
	        $.APPLET,
	        $.AREA,
	        $.ARTICLE,
	        $.ASIDE,
	        $.BASE,
	        $.BASEFONT,
	        $.BGSOUND,
	        $.BLOCKQUOTE,
	        $.BODY,
	        $.BR,
	        $.BUTTON,
	        $.CAPTION,
	        $.CENTER,
	        $.COL,
	        $.COLGROUP,
	        $.DD,
	        $.DETAILS,
	        $.DIR,
	        $.DIV,
	        $.DL,
	        $.DT,
	        $.EMBED,
	        $.FIELDSET,
	        $.FIGCAPTION,
	        $.FIGURE,
	        $.FOOTER,
	        $.FORM,
	        $.FRAME,
	        $.FRAMESET,
	        $.H1,
	        $.H2,
	        $.H3,
	        $.H4,
	        $.H5,
	        $.H6,
	        $.HEAD,
	        $.HEADER,
	        $.HGROUP,
	        $.HR,
	        $.HTML,
	        $.IFRAME,
	        $.IMG,
	        $.INPUT,
	        $.LI,
	        $.LINK,
	        $.LISTING,
	        $.MAIN,
	        $.MARQUEE,
	        $.MENU,
	        $.META,
	        $.NAV,
	        $.NOEMBED,
	        $.NOFRAMES,
	        $.NOSCRIPT,
	        $.OBJECT,
	        $.OL,
	        $.P,
	        $.PARAM,
	        $.PLAINTEXT,
	        $.PRE,
	        $.SCRIPT,
	        $.SECTION,
	        $.SELECT,
	        $.SOURCE,
	        $.STYLE,
	        $.SUMMARY,
	        $.TABLE,
	        $.TBODY,
	        $.TD,
	        $.TEMPLATE,
	        $.TEXTAREA,
	        $.TFOOT,
	        $.TH,
	        $.THEAD,
	        $.TITLE,
	        $.TR,
	        $.TRACK,
	        $.UL,
	        $.WBR,
	        $.XMP,
	    ]),
	    [NS.MATHML]: new Set([$.MI, $.MO, $.MN, $.MS, $.MTEXT, $.ANNOTATION_XML]),
	    [NS.SVG]: new Set([$.TITLE, $.FOREIGN_OBJECT, $.DESC]),
	    [NS.XLINK]: new Set(),
	    [NS.XML]: new Set(),
	    [NS.XMLNS]: new Set(),
	};
	function isNumberedHeader(tn) {
	    return tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6;
	}
	new Set([
	    TAG_NAMES.STYLE,
	    TAG_NAMES.SCRIPT,
	    TAG_NAMES.XMP,
	    TAG_NAMES.IFRAME,
	    TAG_NAMES.NOEMBED,
	    TAG_NAMES.NOFRAMES,
	    TAG_NAMES.PLAINTEXT,
	]);

	//C1 Unicode control character reference replacements
	const C1_CONTROLS_REFERENCE_REPLACEMENTS = new Map([
	    [0x80, 8364],
	    [0x82, 8218],
	    [0x83, 402],
	    [0x84, 8222],
	    [0x85, 8230],
	    [0x86, 8224],
	    [0x87, 8225],
	    [0x88, 710],
	    [0x89, 8240],
	    [0x8a, 352],
	    [0x8b, 8249],
	    [0x8c, 338],
	    [0x8e, 381],
	    [0x91, 8216],
	    [0x92, 8217],
	    [0x93, 8220],
	    [0x94, 8221],
	    [0x95, 8226],
	    [0x96, 8211],
	    [0x97, 8212],
	    [0x98, 732],
	    [0x99, 8482],
	    [0x9a, 353],
	    [0x9b, 8250],
	    [0x9c, 339],
	    [0x9e, 382],
	    [0x9f, 376],
	]);
	//States
	var State;
	(function (State) {
	    State[State["DATA"] = 0] = "DATA";
	    State[State["RCDATA"] = 1] = "RCDATA";
	    State[State["RAWTEXT"] = 2] = "RAWTEXT";
	    State[State["SCRIPT_DATA"] = 3] = "SCRIPT_DATA";
	    State[State["PLAINTEXT"] = 4] = "PLAINTEXT";
	    State[State["TAG_OPEN"] = 5] = "TAG_OPEN";
	    State[State["END_TAG_OPEN"] = 6] = "END_TAG_OPEN";
	    State[State["TAG_NAME"] = 7] = "TAG_NAME";
	    State[State["RCDATA_LESS_THAN_SIGN"] = 8] = "RCDATA_LESS_THAN_SIGN";
	    State[State["RCDATA_END_TAG_OPEN"] = 9] = "RCDATA_END_TAG_OPEN";
	    State[State["RCDATA_END_TAG_NAME"] = 10] = "RCDATA_END_TAG_NAME";
	    State[State["RAWTEXT_LESS_THAN_SIGN"] = 11] = "RAWTEXT_LESS_THAN_SIGN";
	    State[State["RAWTEXT_END_TAG_OPEN"] = 12] = "RAWTEXT_END_TAG_OPEN";
	    State[State["RAWTEXT_END_TAG_NAME"] = 13] = "RAWTEXT_END_TAG_NAME";
	    State[State["SCRIPT_DATA_LESS_THAN_SIGN"] = 14] = "SCRIPT_DATA_LESS_THAN_SIGN";
	    State[State["SCRIPT_DATA_END_TAG_OPEN"] = 15] = "SCRIPT_DATA_END_TAG_OPEN";
	    State[State["SCRIPT_DATA_END_TAG_NAME"] = 16] = "SCRIPT_DATA_END_TAG_NAME";
	    State[State["SCRIPT_DATA_ESCAPE_START"] = 17] = "SCRIPT_DATA_ESCAPE_START";
	    State[State["SCRIPT_DATA_ESCAPE_START_DASH"] = 18] = "SCRIPT_DATA_ESCAPE_START_DASH";
	    State[State["SCRIPT_DATA_ESCAPED"] = 19] = "SCRIPT_DATA_ESCAPED";
	    State[State["SCRIPT_DATA_ESCAPED_DASH"] = 20] = "SCRIPT_DATA_ESCAPED_DASH";
	    State[State["SCRIPT_DATA_ESCAPED_DASH_DASH"] = 21] = "SCRIPT_DATA_ESCAPED_DASH_DASH";
	    State[State["SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN"] = 22] = "SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN";
	    State[State["SCRIPT_DATA_ESCAPED_END_TAG_OPEN"] = 23] = "SCRIPT_DATA_ESCAPED_END_TAG_OPEN";
	    State[State["SCRIPT_DATA_ESCAPED_END_TAG_NAME"] = 24] = "SCRIPT_DATA_ESCAPED_END_TAG_NAME";
	    State[State["SCRIPT_DATA_DOUBLE_ESCAPE_START"] = 25] = "SCRIPT_DATA_DOUBLE_ESCAPE_START";
	    State[State["SCRIPT_DATA_DOUBLE_ESCAPED"] = 26] = "SCRIPT_DATA_DOUBLE_ESCAPED";
	    State[State["SCRIPT_DATA_DOUBLE_ESCAPED_DASH"] = 27] = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH";
	    State[State["SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH"] = 28] = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH";
	    State[State["SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN"] = 29] = "SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN";
	    State[State["SCRIPT_DATA_DOUBLE_ESCAPE_END"] = 30] = "SCRIPT_DATA_DOUBLE_ESCAPE_END";
	    State[State["BEFORE_ATTRIBUTE_NAME"] = 31] = "BEFORE_ATTRIBUTE_NAME";
	    State[State["ATTRIBUTE_NAME"] = 32] = "ATTRIBUTE_NAME";
	    State[State["AFTER_ATTRIBUTE_NAME"] = 33] = "AFTER_ATTRIBUTE_NAME";
	    State[State["BEFORE_ATTRIBUTE_VALUE"] = 34] = "BEFORE_ATTRIBUTE_VALUE";
	    State[State["ATTRIBUTE_VALUE_DOUBLE_QUOTED"] = 35] = "ATTRIBUTE_VALUE_DOUBLE_QUOTED";
	    State[State["ATTRIBUTE_VALUE_SINGLE_QUOTED"] = 36] = "ATTRIBUTE_VALUE_SINGLE_QUOTED";
	    State[State["ATTRIBUTE_VALUE_UNQUOTED"] = 37] = "ATTRIBUTE_VALUE_UNQUOTED";
	    State[State["AFTER_ATTRIBUTE_VALUE_QUOTED"] = 38] = "AFTER_ATTRIBUTE_VALUE_QUOTED";
	    State[State["SELF_CLOSING_START_TAG"] = 39] = "SELF_CLOSING_START_TAG";
	    State[State["BOGUS_COMMENT"] = 40] = "BOGUS_COMMENT";
	    State[State["MARKUP_DECLARATION_OPEN"] = 41] = "MARKUP_DECLARATION_OPEN";
	    State[State["COMMENT_START"] = 42] = "COMMENT_START";
	    State[State["COMMENT_START_DASH"] = 43] = "COMMENT_START_DASH";
	    State[State["COMMENT"] = 44] = "COMMENT";
	    State[State["COMMENT_LESS_THAN_SIGN"] = 45] = "COMMENT_LESS_THAN_SIGN";
	    State[State["COMMENT_LESS_THAN_SIGN_BANG"] = 46] = "COMMENT_LESS_THAN_SIGN_BANG";
	    State[State["COMMENT_LESS_THAN_SIGN_BANG_DASH"] = 47] = "COMMENT_LESS_THAN_SIGN_BANG_DASH";
	    State[State["COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH"] = 48] = "COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH";
	    State[State["COMMENT_END_DASH"] = 49] = "COMMENT_END_DASH";
	    State[State["COMMENT_END"] = 50] = "COMMENT_END";
	    State[State["COMMENT_END_BANG"] = 51] = "COMMENT_END_BANG";
	    State[State["DOCTYPE"] = 52] = "DOCTYPE";
	    State[State["BEFORE_DOCTYPE_NAME"] = 53] = "BEFORE_DOCTYPE_NAME";
	    State[State["DOCTYPE_NAME"] = 54] = "DOCTYPE_NAME";
	    State[State["AFTER_DOCTYPE_NAME"] = 55] = "AFTER_DOCTYPE_NAME";
	    State[State["AFTER_DOCTYPE_PUBLIC_KEYWORD"] = 56] = "AFTER_DOCTYPE_PUBLIC_KEYWORD";
	    State[State["BEFORE_DOCTYPE_PUBLIC_IDENTIFIER"] = 57] = "BEFORE_DOCTYPE_PUBLIC_IDENTIFIER";
	    State[State["DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED"] = 58] = "DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED";
	    State[State["DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED"] = 59] = "DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED";
	    State[State["AFTER_DOCTYPE_PUBLIC_IDENTIFIER"] = 60] = "AFTER_DOCTYPE_PUBLIC_IDENTIFIER";
	    State[State["BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS"] = 61] = "BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS";
	    State[State["AFTER_DOCTYPE_SYSTEM_KEYWORD"] = 62] = "AFTER_DOCTYPE_SYSTEM_KEYWORD";
	    State[State["BEFORE_DOCTYPE_SYSTEM_IDENTIFIER"] = 63] = "BEFORE_DOCTYPE_SYSTEM_IDENTIFIER";
	    State[State["DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED"] = 64] = "DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED";
	    State[State["DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED"] = 65] = "DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED";
	    State[State["AFTER_DOCTYPE_SYSTEM_IDENTIFIER"] = 66] = "AFTER_DOCTYPE_SYSTEM_IDENTIFIER";
	    State[State["BOGUS_DOCTYPE"] = 67] = "BOGUS_DOCTYPE";
	    State[State["CDATA_SECTION"] = 68] = "CDATA_SECTION";
	    State[State["CDATA_SECTION_BRACKET"] = 69] = "CDATA_SECTION_BRACKET";
	    State[State["CDATA_SECTION_END"] = 70] = "CDATA_SECTION_END";
	    State[State["CHARACTER_REFERENCE"] = 71] = "CHARACTER_REFERENCE";
	    State[State["NAMED_CHARACTER_REFERENCE"] = 72] = "NAMED_CHARACTER_REFERENCE";
	    State[State["AMBIGUOUS_AMPERSAND"] = 73] = "AMBIGUOUS_AMPERSAND";
	    State[State["NUMERIC_CHARACTER_REFERENCE"] = 74] = "NUMERIC_CHARACTER_REFERENCE";
	    State[State["HEXADEMICAL_CHARACTER_REFERENCE_START"] = 75] = "HEXADEMICAL_CHARACTER_REFERENCE_START";
	    State[State["HEXADEMICAL_CHARACTER_REFERENCE"] = 76] = "HEXADEMICAL_CHARACTER_REFERENCE";
	    State[State["DECIMAL_CHARACTER_REFERENCE"] = 77] = "DECIMAL_CHARACTER_REFERENCE";
	    State[State["NUMERIC_CHARACTER_REFERENCE_END"] = 78] = "NUMERIC_CHARACTER_REFERENCE_END";
	})(State || (State = {}));
	//Tokenizer initial states for different modes
	const TokenizerMode = {
	    DATA: State.DATA,
	    RCDATA: State.RCDATA,
	    RAWTEXT: State.RAWTEXT,
	    SCRIPT_DATA: State.SCRIPT_DATA,
	    PLAINTEXT: State.PLAINTEXT,
	    CDATA_SECTION: State.CDATA_SECTION,
	};
	//Utils
	//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline
	//this functions if they will be situated in another module due to context switch.
	//Always perform inlining check before modifying this functions ('node --trace-inlining').
	function isAsciiDigit(cp) {
	    return cp >= CODE_POINTS.DIGIT_0 && cp <= CODE_POINTS.DIGIT_9;
	}
	function isAsciiUpper(cp) {
	    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_Z;
	}
	function isAsciiLower(cp) {
	    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_Z;
	}
	function isAsciiLetter(cp) {
	    return isAsciiLower(cp) || isAsciiUpper(cp);
	}
	function isAsciiAlphaNumeric(cp) {
	    return isAsciiLetter(cp) || isAsciiDigit(cp);
	}
	function isAsciiUpperHexDigit(cp) {
	    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_F;
	}
	function isAsciiLowerHexDigit(cp) {
	    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_F;
	}
	function isAsciiHexDigit(cp) {
	    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);
	}
	function toAsciiLower(cp) {
	    return cp + 32;
	}
	function isWhitespace(cp) {
	    return cp === CODE_POINTS.SPACE || cp === CODE_POINTS.LINE_FEED || cp === CODE_POINTS.TABULATION || cp === CODE_POINTS.FORM_FEED;
	}
	function isEntityInAttributeInvalidEnd(nextCp) {
	    return nextCp === CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);
	}
	function isScriptDataDoubleEscapeSequenceEnd(cp) {
	    return isWhitespace(cp) || cp === CODE_POINTS.SOLIDUS || cp === CODE_POINTS.GREATER_THAN_SIGN;
	}
	//Tokenizer
	class Tokenizer {
	    constructor(options, handler) {
	        this.options = options;
	        this.handler = handler;
	        this.paused = false;
	        /** Ensures that the parsing loop isn't run multiple times at once. */
	        this.inLoop = false;
	        /**
	         * Indicates that the current adjusted node exists, is not an element in the HTML namespace,
	         * and that it is not an integration point for either MathML or HTML.
	         *
	         * @see {@link https://html.spec.whatwg.org/multipage/parsing.html#tree-construction}
	         */
	        this.inForeignNode = false;
	        this.lastStartTagName = '';
	        this.active = false;
	        this.state = State.DATA;
	        this.returnState = State.DATA;
	        this.charRefCode = -1;
	        this.consumedAfterSnapshot = -1;
	        this.currentCharacterToken = null;
	        this.currentToken = null;
	        this.currentAttr = { name: '', value: '' };
	        this.preprocessor = new Preprocessor(handler);
	        this.currentLocation = this.getCurrentLocation(-1);
	    }
	    //Errors
	    _err(code) {
	        var _a, _b;
	        (_b = (_a = this.handler).onParseError) === null || _b === void 0 ? void 0 : _b.call(_a, this.preprocessor.getError(code));
	    }
	    // NOTE: `offset` may never run across line boundaries.
	    getCurrentLocation(offset) {
	        if (!this.options.sourceCodeLocationInfo) {
	            return null;
	        }
	        return {
	            startLine: this.preprocessor.line,
	            startCol: this.preprocessor.col - offset,
	            startOffset: this.preprocessor.offset - offset,
	            endLine: -1,
	            endCol: -1,
	            endOffset: -1,
	        };
	    }
	    _runParsingLoop() {
	        if (this.inLoop)
	            return;
	        this.inLoop = true;
	        while (this.active && !this.paused) {
	            this.consumedAfterSnapshot = 0;
	            const cp = this._consume();
	            if (!this._ensureHibernation()) {
	                this._callState(cp);
	            }
	        }
	        this.inLoop = false;
	    }
	    //API
	    pause() {
	        this.paused = true;
	    }
	    resume(writeCallback) {
	        if (!this.paused) {
	            throw new Error('Parser was already resumed');
	        }
	        this.paused = false;
	        // Necessary for synchronous resume.
	        if (this.inLoop)
	            return;
	        this._runParsingLoop();
	        if (!this.paused) {
	            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();
	        }
	    }
	    write(chunk, isLastChunk, writeCallback) {
	        this.active = true;
	        this.preprocessor.write(chunk, isLastChunk);
	        this._runParsingLoop();
	        if (!this.paused) {
	            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();
	        }
	    }
	    insertHtmlAtCurrentPos(chunk) {
	        this.active = true;
	        this.preprocessor.insertHtmlAtCurrentPos(chunk);
	        this._runParsingLoop();
	    }
	    //Hibernation
	    _ensureHibernation() {
	        if (this.preprocessor.endOfChunkHit) {
	            this._unconsume(this.consumedAfterSnapshot);
	            this.active = false;
	            return true;
	        }
	        return false;
	    }
	    //Consumption
	    _consume() {
	        this.consumedAfterSnapshot++;
	        return this.preprocessor.advance();
	    }
	    _unconsume(count) {
	        this.consumedAfterSnapshot -= count;
	        this.preprocessor.retreat(count);
	    }
	    _reconsumeInState(state, cp) {
	        this.state = state;
	        this._callState(cp);
	    }
	    _advanceBy(count) {
	        this.consumedAfterSnapshot += count;
	        for (let i = 0; i < count; i++) {
	            this.preprocessor.advance();
	        }
	    }
	    _consumeSequenceIfMatch(pattern, caseSensitive) {
	        if (this.preprocessor.startsWith(pattern, caseSensitive)) {
	            // We will already have consumed one character before calling this method.
	            this._advanceBy(pattern.length - 1);
	            return true;
	        }
	        return false;
	    }
	    //Token creation
	    _createStartTagToken() {
	        this.currentToken = {
	            type: TokenType.START_TAG,
	            tagName: '',
	            tagID: TAG_ID.UNKNOWN,
	            selfClosing: false,
	            ackSelfClosing: false,
	            attrs: [],
	            location: this.getCurrentLocation(1),
	        };
	    }
	    _createEndTagToken() {
	        this.currentToken = {
	            type: TokenType.END_TAG,
	            tagName: '',
	            tagID: TAG_ID.UNKNOWN,
	            selfClosing: false,
	            ackSelfClosing: false,
	            attrs: [],
	            location: this.getCurrentLocation(2),
	        };
	    }
	    _createCommentToken(offset) {
	        this.currentToken = {
	            type: TokenType.COMMENT,
	            data: '',
	            location: this.getCurrentLocation(offset),
	        };
	    }
	    _createDoctypeToken(initialName) {
	        this.currentToken = {
	            type: TokenType.DOCTYPE,
	            name: initialName,
	            forceQuirks: false,
	            publicId: null,
	            systemId: null,
	            location: this.currentLocation,
	        };
	    }
	    _createCharacterToken(type, chars) {
	        this.currentCharacterToken = {
	            type,
	            chars,
	            location: this.currentLocation,
	        };
	    }
	    //Tag attributes
	    _createAttr(attrNameFirstCh) {
	        this.currentAttr = {
	            name: attrNameFirstCh,
	            value: '',
	        };
	        this.currentLocation = this.getCurrentLocation(0);
	    }
	    _leaveAttrName() {
	        var _a;
	        var _b;
	        const token = this.currentToken;
	        if (getTokenAttr(token, this.currentAttr.name) === null) {
	            token.attrs.push(this.currentAttr);
	            if (token.location && this.currentLocation) {
	                const attrLocations = ((_a = (_b = token.location).attrs) !== null && _a !== void 0 ? _a : (_b.attrs = Object.create(null)));
	                attrLocations[this.currentAttr.name] = this.currentLocation;
	                // Set end location
	                this._leaveAttrValue();
	            }
	        }
	        else {
	            this._err(ERR.duplicateAttribute);
	        }
	    }
	    _leaveAttrValue() {
	        if (this.currentLocation) {
	            this.currentLocation.endLine = this.preprocessor.line;
	            this.currentLocation.endCol = this.preprocessor.col;
	            this.currentLocation.endOffset = this.preprocessor.offset;
	        }
	    }
	    //Token emission
	    prepareToken(ct) {
	        this._emitCurrentCharacterToken(ct.location);
	        this.currentToken = null;
	        if (ct.location) {
	            ct.location.endLine = this.preprocessor.line;
	            ct.location.endCol = this.preprocessor.col + 1;
	            ct.location.endOffset = this.preprocessor.offset + 1;
	        }
	        this.currentLocation = this.getCurrentLocation(-1);
	    }
	    emitCurrentTagToken() {
	        const ct = this.currentToken;
	        this.prepareToken(ct);
	        ct.tagID = getTagID(ct.tagName);
	        if (ct.type === TokenType.START_TAG) {
	            this.lastStartTagName = ct.tagName;
	            this.handler.onStartTag(ct);
	        }
	        else {
	            if (ct.attrs.length > 0) {
	                this._err(ERR.endTagWithAttributes);
	            }
	            if (ct.selfClosing) {
	                this._err(ERR.endTagWithTrailingSolidus);
	            }
	            this.handler.onEndTag(ct);
	        }
	        this.preprocessor.dropParsedChunk();
	    }
	    emitCurrentComment(ct) {
	        this.prepareToken(ct);
	        this.handler.onComment(ct);
	        this.preprocessor.dropParsedChunk();
	    }
	    emitCurrentDoctype(ct) {
	        this.prepareToken(ct);
	        this.handler.onDoctype(ct);
	        this.preprocessor.dropParsedChunk();
	    }
	    _emitCurrentCharacterToken(nextLocation) {
	        if (this.currentCharacterToken) {
	            //NOTE: if we have a pending character token, make it's end location equal to the
	            //current token's start location.
	            if (nextLocation && this.currentCharacterToken.location) {
	                this.currentCharacterToken.location.endLine = nextLocation.startLine;
	                this.currentCharacterToken.location.endCol = nextLocation.startCol;
	                this.currentCharacterToken.location.endOffset = nextLocation.startOffset;
	            }
	            switch (this.currentCharacterToken.type) {
	                case TokenType.CHARACTER: {
	                    this.handler.onCharacter(this.currentCharacterToken);
	                    break;
	                }
	                case TokenType.NULL_CHARACTER: {
	                    this.handler.onNullCharacter(this.currentCharacterToken);
	                    break;
	                }
	                case TokenType.WHITESPACE_CHARACTER: {
	                    this.handler.onWhitespaceCharacter(this.currentCharacterToken);
	                    break;
	                }
	            }
	            this.currentCharacterToken = null;
	        }
	    }
	    _emitEOFToken() {
	        const location = this.getCurrentLocation(0);
	        if (location) {
	            location.endLine = location.startLine;
	            location.endCol = location.startCol;
	            location.endOffset = location.startOffset;
	        }
	        this._emitCurrentCharacterToken(location);
	        this.handler.onEof({ type: TokenType.EOF, location });
	        this.active = false;
	    }
	    //Characters emission
	    //OPTIMIZATION: specification uses only one type of character tokens (one token per character).
	    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.
	    //If we have a sequence of characters that belong to the same group, the parser can process it
	    //as a single solid character token.
	    //So, there are 3 types of character tokens in parse5:
	    //1)TokenType.NULL_CHARACTER - \u0000-character sequences (e.g. '\u0000\u0000\u0000')
	    //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\n  \r\t   \f')
	    //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')
	    _appendCharToCurrentCharacterToken(type, ch) {
	        if (this.currentCharacterToken) {
	            if (this.currentCharacterToken.type !== type) {
	                this.currentLocation = this.getCurrentLocation(0);
	                this._emitCurrentCharacterToken(this.currentLocation);
	                this.preprocessor.dropParsedChunk();
	            }
	            else {
	                this.currentCharacterToken.chars += ch;
	                return;
	            }
	        }
	        this._createCharacterToken(type, ch);
	    }
	    _emitCodePoint(cp) {
	        const type = isWhitespace(cp)
	            ? TokenType.WHITESPACE_CHARACTER
	            : cp === CODE_POINTS.NULL
	                ? TokenType.NULL_CHARACTER
	                : TokenType.CHARACTER;
	        this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));
	    }
	    //NOTE: used when we emit characters explicitly.
	    //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.
	    _emitChars(ch) {
	        this._appendCharToCurrentCharacterToken(TokenType.CHARACTER, ch);
	    }
	    // Character reference helpers
	    _matchNamedCharacterReference(cp) {
	        let result = null;
	        let excess = 0;
	        let withoutSemicolon = false;
	        for (let i = 0, current = htmlDecodeTree[0]; i >= 0; cp = this._consume()) {
	            i = determineBranch(htmlDecodeTree, current, i + 1, cp);
	            if (i < 0)
	                break;
	            excess += 1;
	            current = htmlDecodeTree[i];
	            const masked = current & BinTrieFlags.VALUE_LENGTH;
	            // If the branch is a value, store it and continue
	            if (masked) {
	                // The mask is the number of bytes of the value, including the current byte.
	                const valueLength = (masked >> 14) - 1;
	                // Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.
	                // See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state
	                if (cp !== CODE_POINTS.SEMICOLON &&
	                    this._isCharacterReferenceInAttribute() &&
	                    isEntityInAttributeInvalidEnd(this.preprocessor.peek(1))) {
	                    //NOTE: we don't flush all consumed code points here, and instead switch back to the original state after
	                    //emitting an ampersand. This is fine, as alphanumeric characters won't be parsed differently in attributes.
	                    result = [CODE_POINTS.AMPERSAND];
	                    // Skip over the value.
	                    i += valueLength;
	                }
	                else {
	                    // If this is a surrogate pair, consume the next two bytes.
	                    result =
	                        valueLength === 0
	                            ? [htmlDecodeTree[i] & ~BinTrieFlags.VALUE_LENGTH]
	                            : valueLength === 1
	                                ? [htmlDecodeTree[++i]]
	                                : [htmlDecodeTree[++i], htmlDecodeTree[++i]];
	                    excess = 0;
	                    withoutSemicolon = cp !== CODE_POINTS.SEMICOLON;
	                }
	                if (valueLength === 0) {
	                    // If the value is zero-length, we're done.
	                    this._consume();
	                    break;
	                }
	            }
	        }
	        this._unconsume(excess);
	        if (withoutSemicolon && !this.preprocessor.endOfChunkHit) {
	            this._err(ERR.missingSemicolonAfterCharacterReference);
	        }
	        // We want to emit the error above on the code point after the entity.
	        // We always consume one code point too many in the loop, and we wait to
	        // unconsume it until after the error is emitted.
	        this._unconsume(1);
	        return result;
	    }
	    _isCharacterReferenceInAttribute() {
	        return (this.returnState === State.ATTRIBUTE_VALUE_DOUBLE_QUOTED ||
	            this.returnState === State.ATTRIBUTE_VALUE_SINGLE_QUOTED ||
	            this.returnState === State.ATTRIBUTE_VALUE_UNQUOTED);
	    }
	    _flushCodePointConsumedAsCharacterReference(cp) {
	        if (this._isCharacterReferenceInAttribute()) {
	            this.currentAttr.value += String.fromCodePoint(cp);
	        }
	        else {
	            this._emitCodePoint(cp);
	        }
	    }
	    // Calling states this way turns out to be much faster than any other approach.
	    _callState(cp) {
	        switch (this.state) {
	            case State.DATA: {
	                this._stateData(cp);
	                break;
	            }
	            case State.RCDATA: {
	                this._stateRcdata(cp);
	                break;
	            }
	            case State.RAWTEXT: {
	                this._stateRawtext(cp);
	                break;
	            }
	            case State.SCRIPT_DATA: {
	                this._stateScriptData(cp);
	                break;
	            }
	            case State.PLAINTEXT: {
	                this._statePlaintext(cp);
	                break;
	            }
	            case State.TAG_OPEN: {
	                this._stateTagOpen(cp);
	                break;
	            }
	            case State.END_TAG_OPEN: {
	                this._stateEndTagOpen(cp);
	                break;
	            }
	            case State.TAG_NAME: {
	                this._stateTagName(cp);
	                break;
	            }
	            case State.RCDATA_LESS_THAN_SIGN: {
	                this._stateRcdataLessThanSign(cp);
	                break;
	            }
	            case State.RCDATA_END_TAG_OPEN: {
	                this._stateRcdataEndTagOpen(cp);
	                break;
	            }
	            case State.RCDATA_END_TAG_NAME: {
	                this._stateRcdataEndTagName(cp);
	                break;
	            }
	            case State.RAWTEXT_LESS_THAN_SIGN: {
	                this._stateRawtextLessThanSign(cp);
	                break;
	            }
	            case State.RAWTEXT_END_TAG_OPEN: {
	                this._stateRawtextEndTagOpen(cp);
	                break;
	            }
	            case State.RAWTEXT_END_TAG_NAME: {
	                this._stateRawtextEndTagName(cp);
	                break;
	            }
	            case State.SCRIPT_DATA_LESS_THAN_SIGN: {
	                this._stateScriptDataLessThanSign(cp);
	                break;
	            }
	            case State.SCRIPT_DATA_END_TAG_OPEN: {
	                this._stateScriptDataEndTagOpen(cp);
	                break;
	            }
	            case State.SCRIPT_DATA_END_TAG_NAME: {
	                this._stateScriptDataEndTagName(cp);
	                break;
	            }
	            case State.SCRIPT_DATA_ESCAPE_START: {
	                this._stateScriptDataEscapeStart(cp);
	                break;
	            }
	            case State.SCRIPT_DATA_ESCAPE_START_DASH: {
	                this._stateScriptDataEscapeStartDash(cp);
	                break;
	            }
	            case State.SCRIPT_DATA_ESCAPED: {
	                this._stateScriptDataEscaped(cp);
	                break;
	            }
	            case State.SCRIPT_DATA_ESCAPED_DASH: {
	                this._stateScriptDataEscapedDash(cp);
	                break;
	            }
	            case State.SCRIPT_DATA_ESCAPED_DASH_DASH: {
	                this._stateScriptDataEscapedDashDash(cp);
	                break;
	            }
	            case State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN: {
	                this._stateScriptDataEscapedLessThanSign(cp);
	                break;
	            }
	            case State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN: {
	                this._stateScriptDataEscapedEndTagOpen(cp);
	                break;
	            }
	            case State.SCRIPT_DATA_ESCAPED_END_TAG_NAME: {
	                this._stateScriptDataEscapedEndTagName(cp);
	                break;
	            }
	            case State.SCRIPT_DATA_DOUBLE_ESCAPE_START: {
	                this._stateScriptDataDoubleEscapeStart(cp);
	                break;
	            }
	            case State.SCRIPT_DATA_DOUBLE_ESCAPED: {
	                this._stateScriptDataDoubleEscaped(cp);
	                break;
	            }
	            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH: {
	                this._stateScriptDataDoubleEscapedDash(cp);
	                break;
	            }
	            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH: {
	                this._stateScriptDataDoubleEscapedDashDash(cp);
	                break;
	            }
	            case State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN: {
	                this._stateScriptDataDoubleEscapedLessThanSign(cp);
	                break;
	            }
	            case State.SCRIPT_DATA_DOUBLE_ESCAPE_END: {
	                this._stateScriptDataDoubleEscapeEnd(cp);
	                break;
	            }
	            case State.BEFORE_ATTRIBUTE_NAME: {
	                this._stateBeforeAttributeName(cp);
	                break;
	            }
	            case State.ATTRIBUTE_NAME: {
	                this._stateAttributeName(cp);
	                break;
	            }
	            case State.AFTER_ATTRIBUTE_NAME: {
	                this._stateAfterAttributeName(cp);
	                break;
	            }
	            case State.BEFORE_ATTRIBUTE_VALUE: {
	                this._stateBeforeAttributeValue(cp);
	                break;
	            }
	            case State.ATTRIBUTE_VALUE_DOUBLE_QUOTED: {
	                this._stateAttributeValueDoubleQuoted(cp);
	                break;
	            }
	            case State.ATTRIBUTE_VALUE_SINGLE_QUOTED: {
	                this._stateAttributeValueSingleQuoted(cp);
	                break;
	            }
	            case State.ATTRIBUTE_VALUE_UNQUOTED: {
	                this._stateAttributeValueUnquoted(cp);
	                break;
	            }
	            case State.AFTER_ATTRIBUTE_VALUE_QUOTED: {
	                this._stateAfterAttributeValueQuoted(cp);
	                break;
	            }
	            case State.SELF_CLOSING_START_TAG: {
	                this._stateSelfClosingStartTag(cp);
	                break;
	            }
	            case State.BOGUS_COMMENT: {
	                this._stateBogusComment(cp);
	                break;
	            }
	            case State.MARKUP_DECLARATION_OPEN: {
	                this._stateMarkupDeclarationOpen(cp);
	                break;
	            }
	            case State.COMMENT_START: {
	                this._stateCommentStart(cp);
	                break;
	            }
	            case State.COMMENT_START_DASH: {
	                this._stateCommentStartDash(cp);
	                break;
	            }
	            case State.COMMENT: {
	                this._stateComment(cp);
	                break;
	            }
	            case State.COMMENT_LESS_THAN_SIGN: {
	                this._stateCommentLessThanSign(cp);
	                break;
	            }
	            case State.COMMENT_LESS_THAN_SIGN_BANG: {
	                this._stateCommentLessThanSignBang(cp);
	                break;
	            }
	            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH: {
	                this._stateCommentLessThanSignBangDash(cp);
	                break;
	            }
	            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH: {
	                this._stateCommentLessThanSignBangDashDash(cp);
	                break;
	            }
	            case State.COMMENT_END_DASH: {
	                this._stateCommentEndDash(cp);
	                break;
	            }
	            case State.COMMENT_END: {
	                this._stateCommentEnd(cp);
	                break;
	            }
	            case State.COMMENT_END_BANG: {
	                this._stateCommentEndBang(cp);
	                break;
	            }
	            case State.DOCTYPE: {
	                this._stateDoctype(cp);
	                break;
	            }
	            case State.BEFORE_DOCTYPE_NAME: {
	                this._stateBeforeDoctypeName(cp);
	                break;
	            }
	            case State.DOCTYPE_NAME: {
	                this._stateDoctypeName(cp);
	                break;
	            }
	            case State.AFTER_DOCTYPE_NAME: {
	                this._stateAfterDoctypeName(cp);
	                break;
	            }
	            case State.AFTER_DOCTYPE_PUBLIC_KEYWORD: {
	                this._stateAfterDoctypePublicKeyword(cp);
	                break;
	            }
	            case State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER: {
	                this._stateBeforeDoctypePublicIdentifier(cp);
	                break;
	            }
	            case State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED: {
	                this._stateDoctypePublicIdentifierDoubleQuoted(cp);
	                break;
	            }
	            case State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED: {
	                this._stateDoctypePublicIdentifierSingleQuoted(cp);
	                break;
	            }
	            case State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER: {
	                this._stateAfterDoctypePublicIdentifier(cp);
	                break;
	            }
	            case State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS: {
	                this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);
	                break;
	            }
	            case State.AFTER_DOCTYPE_SYSTEM_KEYWORD: {
	                this._stateAfterDoctypeSystemKeyword(cp);
	                break;
	            }
	            case State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER: {
	                this._stateBeforeDoctypeSystemIdentifier(cp);
	                break;
	            }
	            case State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED: {
	                this._stateDoctypeSystemIdentifierDoubleQuoted(cp);
	                break;
	            }
	            case State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED: {
	                this._stateDoctypeSystemIdentifierSingleQuoted(cp);
	                break;
	            }
	            case State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER: {
	                this._stateAfterDoctypeSystemIdentifier(cp);
	                break;
	            }
	            case State.BOGUS_DOCTYPE: {
	                this._stateBogusDoctype(cp);
	                break;
	            }
	            case State.CDATA_SECTION: {
	                this._stateCdataSection(cp);
	                break;
	            }
	            case State.CDATA_SECTION_BRACKET: {
	                this._stateCdataSectionBracket(cp);
	                break;
	            }
	            case State.CDATA_SECTION_END: {
	                this._stateCdataSectionEnd(cp);
	                break;
	            }
	            case State.CHARACTER_REFERENCE: {
	                this._stateCharacterReference(cp);
	                break;
	            }
	            case State.NAMED_CHARACTER_REFERENCE: {
	                this._stateNamedCharacterReference(cp);
	                break;
	            }
	            case State.AMBIGUOUS_AMPERSAND: {
	                this._stateAmbiguousAmpersand(cp);
	                break;
	            }
	            case State.NUMERIC_CHARACTER_REFERENCE: {
	                this._stateNumericCharacterReference(cp);
	                break;
	            }
	            case State.HEXADEMICAL_CHARACTER_REFERENCE_START: {
	                this._stateHexademicalCharacterReferenceStart(cp);
	                break;
	            }
	            case State.HEXADEMICAL_CHARACTER_REFERENCE: {
	                this._stateHexademicalCharacterReference(cp);
	                break;
	            }
	            case State.DECIMAL_CHARACTER_REFERENCE: {
	                this._stateDecimalCharacterReference(cp);
	                break;
	            }
	            case State.NUMERIC_CHARACTER_REFERENCE_END: {
	                this._stateNumericCharacterReferenceEnd(cp);
	                break;
	            }
	            default: {
	                throw new Error('Unknown state');
	            }
	        }
	    }
	    // State machine
	    // Data state
	    //------------------------------------------------------------------
	    _stateData(cp) {
	        switch (cp) {
	            case CODE_POINTS.LESS_THAN_SIGN: {
	                this.state = State.TAG_OPEN;
	                break;
	            }
	            case CODE_POINTS.AMPERSAND: {
	                this.returnState = State.DATA;
	                this.state = State.CHARACTER_REFERENCE;
	                break;
	            }
	            case CODE_POINTS.NULL: {
	                this._err(ERR.unexpectedNullCharacter);
	                this._emitCodePoint(cp);
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                this._emitCodePoint(cp);
	            }
	        }
	    }
	    //  RCDATA state
	    //------------------------------------------------------------------
	    _stateRcdata(cp) {
	        switch (cp) {
	            case CODE_POINTS.AMPERSAND: {
	                this.returnState = State.RCDATA;
	                this.state = State.CHARACTER_REFERENCE;
	                break;
	            }
	            case CODE_POINTS.LESS_THAN_SIGN: {
	                this.state = State.RCDATA_LESS_THAN_SIGN;
	                break;
	            }
	            case CODE_POINTS.NULL: {
	                this._err(ERR.unexpectedNullCharacter);
	                this._emitChars(REPLACEMENT_CHARACTER);
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                this._emitCodePoint(cp);
	            }
	        }
	    }
	    // RAWTEXT state
	    //------------------------------------------------------------------
	    _stateRawtext(cp) {
	        switch (cp) {
	            case CODE_POINTS.LESS_THAN_SIGN: {
	                this.state = State.RAWTEXT_LESS_THAN_SIGN;
	                break;
	            }
	            case CODE_POINTS.NULL: {
	                this._err(ERR.unexpectedNullCharacter);
	                this._emitChars(REPLACEMENT_CHARACTER);
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                this._emitCodePoint(cp);
	            }
	        }
	    }
	    // Script data state
	    //------------------------------------------------------------------
	    _stateScriptData(cp) {
	        switch (cp) {
	            case CODE_POINTS.LESS_THAN_SIGN: {
	                this.state = State.SCRIPT_DATA_LESS_THAN_SIGN;
	                break;
	            }
	            case CODE_POINTS.NULL: {
	                this._err(ERR.unexpectedNullCharacter);
	                this._emitChars(REPLACEMENT_CHARACTER);
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                this._emitCodePoint(cp);
	            }
	        }
	    }
	    // PLAINTEXT state
	    //------------------------------------------------------------------
	    _statePlaintext(cp) {
	        switch (cp) {
	            case CODE_POINTS.NULL: {
	                this._err(ERR.unexpectedNullCharacter);
	                this._emitChars(REPLACEMENT_CHARACTER);
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                this._emitCodePoint(cp);
	            }
	        }
	    }
	    // Tag open state
	    //------------------------------------------------------------------
	    _stateTagOpen(cp) {
	        if (isAsciiLetter(cp)) {
	            this._createStartTagToken();
	            this.state = State.TAG_NAME;
	            this._stateTagName(cp);
	        }
	        else
	            switch (cp) {
	                case CODE_POINTS.EXCLAMATION_MARK: {
	                    this.state = State.MARKUP_DECLARATION_OPEN;
	                    break;
	                }
	                case CODE_POINTS.SOLIDUS: {
	                    this.state = State.END_TAG_OPEN;
	                    break;
	                }
	                case CODE_POINTS.QUESTION_MARK: {
	                    this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);
	                    this._createCommentToken(1);
	                    this.state = State.BOGUS_COMMENT;
	                    this._stateBogusComment(cp);
	                    break;
	                }
	                case CODE_POINTS.EOF: {
	                    this._err(ERR.eofBeforeTagName);
	                    this._emitChars('<');
	                    this._emitEOFToken();
	                    break;
	                }
	                default: {
	                    this._err(ERR.invalidFirstCharacterOfTagName);
	                    this._emitChars('<');
	                    this.state = State.DATA;
	                    this._stateData(cp);
	                }
	            }
	    }
	    // End tag open state
	    //------------------------------------------------------------------
	    _stateEndTagOpen(cp) {
	        if (isAsciiLetter(cp)) {
	            this._createEndTagToken();
	            this.state = State.TAG_NAME;
	            this._stateTagName(cp);
	        }
	        else
	            switch (cp) {
	                case CODE_POINTS.GREATER_THAN_SIGN: {
	                    this._err(ERR.missingEndTagName);
	                    this.state = State.DATA;
	                    break;
	                }
	                case CODE_POINTS.EOF: {
	                    this._err(ERR.eofBeforeTagName);
	                    this._emitChars('</');
	                    this._emitEOFToken();
	                    break;
	                }
	                default: {
	                    this._err(ERR.invalidFirstCharacterOfTagName);
	                    this._createCommentToken(2);
	                    this.state = State.BOGUS_COMMENT;
	                    this._stateBogusComment(cp);
	                }
	            }
	    }
	    // Tag name state
	    //------------------------------------------------------------------
	    _stateTagName(cp) {
	        const token = this.currentToken;
	        switch (cp) {
	            case CODE_POINTS.SPACE:
	            case CODE_POINTS.LINE_FEED:
	            case CODE_POINTS.TABULATION:
	            case CODE_POINTS.FORM_FEED: {
	                this.state = State.BEFORE_ATTRIBUTE_NAME;
	                break;
	            }
	            case CODE_POINTS.SOLIDUS: {
	                this.state = State.SELF_CLOSING_START_TAG;
	                break;
	            }
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this.state = State.DATA;
	                this.emitCurrentTagToken();
	                break;
	            }
	            case CODE_POINTS.NULL: {
	                this._err(ERR.unexpectedNullCharacter);
	                token.tagName += REPLACEMENT_CHARACTER;
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInTag);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);
	            }
	        }
	    }
	    // RCDATA less-than sign state
	    //------------------------------------------------------------------
	    _stateRcdataLessThanSign(cp) {
	        if (cp === CODE_POINTS.SOLIDUS) {
	            this.state = State.RCDATA_END_TAG_OPEN;
	        }
	        else {
	            this._emitChars('<');
	            this.state = State.RCDATA;
	            this._stateRcdata(cp);
	        }
	    }
	    // RCDATA end tag open state
	    //------------------------------------------------------------------
	    _stateRcdataEndTagOpen(cp) {
	        if (isAsciiLetter(cp)) {
	            this.state = State.RCDATA_END_TAG_NAME;
	            this._stateRcdataEndTagName(cp);
	        }
	        else {
	            this._emitChars('</');
	            this.state = State.RCDATA;
	            this._stateRcdata(cp);
	        }
	    }
	    handleSpecialEndTag(_cp) {
	        if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {
	            return !this._ensureHibernation();
	        }
	        this._createEndTagToken();
	        const token = this.currentToken;
	        token.tagName = this.lastStartTagName;
	        const cp = this.preprocessor.peek(this.lastStartTagName.length);
	        switch (cp) {
	            case CODE_POINTS.SPACE:
	            case CODE_POINTS.LINE_FEED:
	            case CODE_POINTS.TABULATION:
	            case CODE_POINTS.FORM_FEED: {
	                this._advanceBy(this.lastStartTagName.length);
	                this.state = State.BEFORE_ATTRIBUTE_NAME;
	                return false;
	            }
	            case CODE_POINTS.SOLIDUS: {
	                this._advanceBy(this.lastStartTagName.length);
	                this.state = State.SELF_CLOSING_START_TAG;
	                return false;
	            }
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this._advanceBy(this.lastStartTagName.length);
	                this.emitCurrentTagToken();
	                this.state = State.DATA;
	                return false;
	            }
	            default: {
	                return !this._ensureHibernation();
	            }
	        }
	    }
	    // RCDATA end tag name state
	    //------------------------------------------------------------------
	    _stateRcdataEndTagName(cp) {
	        if (this.handleSpecialEndTag(cp)) {
	            this._emitChars('</');
	            this.state = State.RCDATA;
	            this._stateRcdata(cp);
	        }
	    }
	    // RAWTEXT less-than sign state
	    //------------------------------------------------------------------
	    _stateRawtextLessThanSign(cp) {
	        if (cp === CODE_POINTS.SOLIDUS) {
	            this.state = State.RAWTEXT_END_TAG_OPEN;
	        }
	        else {
	            this._emitChars('<');
	            this.state = State.RAWTEXT;
	            this._stateRawtext(cp);
	        }
	    }
	    // RAWTEXT end tag open state
	    //------------------------------------------------------------------
	    _stateRawtextEndTagOpen(cp) {
	        if (isAsciiLetter(cp)) {
	            this.state = State.RAWTEXT_END_TAG_NAME;
	            this._stateRawtextEndTagName(cp);
	        }
	        else {
	            this._emitChars('</');
	            this.state = State.RAWTEXT;
	            this._stateRawtext(cp);
	        }
	    }
	    // RAWTEXT end tag name state
	    //------------------------------------------------------------------
	    _stateRawtextEndTagName(cp) {
	        if (this.handleSpecialEndTag(cp)) {
	            this._emitChars('</');
	            this.state = State.RAWTEXT;
	            this._stateRawtext(cp);
	        }
	    }
	    // Script data less-than sign state
	    //------------------------------------------------------------------
	    _stateScriptDataLessThanSign(cp) {
	        switch (cp) {
	            case CODE_POINTS.SOLIDUS: {
	                this.state = State.SCRIPT_DATA_END_TAG_OPEN;
	                break;
	            }
	            case CODE_POINTS.EXCLAMATION_MARK: {
	                this.state = State.SCRIPT_DATA_ESCAPE_START;
	                this._emitChars('<!');
	                break;
	            }
	            default: {
	                this._emitChars('<');
	                this.state = State.SCRIPT_DATA;
	                this._stateScriptData(cp);
	            }
	        }
	    }
	    // Script data end tag open state
	    //------------------------------------------------------------------
	    _stateScriptDataEndTagOpen(cp) {
	        if (isAsciiLetter(cp)) {
	            this.state = State.SCRIPT_DATA_END_TAG_NAME;
	            this._stateScriptDataEndTagName(cp);
	        }
	        else {
	            this._emitChars('</');
	            this.state = State.SCRIPT_DATA;
	            this._stateScriptData(cp);
	        }
	    }
	    // Script data end tag name state
	    //------------------------------------------------------------------
	    _stateScriptDataEndTagName(cp) {
	        if (this.handleSpecialEndTag(cp)) {
	            this._emitChars('</');
	            this.state = State.SCRIPT_DATA;
	            this._stateScriptData(cp);
	        }
	    }
	    // Script data escape start state
	    //------------------------------------------------------------------
	    _stateScriptDataEscapeStart(cp) {
	        if (cp === CODE_POINTS.HYPHEN_MINUS) {
	            this.state = State.SCRIPT_DATA_ESCAPE_START_DASH;
	            this._emitChars('-');
	        }
	        else {
	            this.state = State.SCRIPT_DATA;
	            this._stateScriptData(cp);
	        }
	    }
	    // Script data escape start dash state
	    //------------------------------------------------------------------
	    _stateScriptDataEscapeStartDash(cp) {
	        if (cp === CODE_POINTS.HYPHEN_MINUS) {
	            this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;
	            this._emitChars('-');
	        }
	        else {
	            this.state = State.SCRIPT_DATA;
	            this._stateScriptData(cp);
	        }
	    }
	    // Script data escaped state
	    //------------------------------------------------------------------
	    _stateScriptDataEscaped(cp) {
	        switch (cp) {
	            case CODE_POINTS.HYPHEN_MINUS: {
	                this.state = State.SCRIPT_DATA_ESCAPED_DASH;
	                this._emitChars('-');
	                break;
	            }
	            case CODE_POINTS.LESS_THAN_SIGN: {
	                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
	                break;
	            }
	            case CODE_POINTS.NULL: {
	                this._err(ERR.unexpectedNullCharacter);
	                this._emitChars(REPLACEMENT_CHARACTER);
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInScriptHtmlCommentLikeText);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                this._emitCodePoint(cp);
	            }
	        }
	    }
	    // Script data escaped dash state
	    //------------------------------------------------------------------
	    _stateScriptDataEscapedDash(cp) {
	        switch (cp) {
	            case CODE_POINTS.HYPHEN_MINUS: {
	                this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;
	                this._emitChars('-');
	                break;
	            }
	            case CODE_POINTS.LESS_THAN_SIGN: {
	                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
	                break;
	            }
	            case CODE_POINTS.NULL: {
	                this._err(ERR.unexpectedNullCharacter);
	                this.state = State.SCRIPT_DATA_ESCAPED;
	                this._emitChars(REPLACEMENT_CHARACTER);
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInScriptHtmlCommentLikeText);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                this.state = State.SCRIPT_DATA_ESCAPED;
	                this._emitCodePoint(cp);
	            }
	        }
	    }
	    // Script data escaped dash dash state
	    //------------------------------------------------------------------
	    _stateScriptDataEscapedDashDash(cp) {
	        switch (cp) {
	            case CODE_POINTS.HYPHEN_MINUS: {
	                this._emitChars('-');
	                break;
	            }
	            case CODE_POINTS.LESS_THAN_SIGN: {
	                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
	                break;
	            }
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this.state = State.SCRIPT_DATA;
	                this._emitChars('>');
	                break;
	            }
	            case CODE_POINTS.NULL: {
	                this._err(ERR.unexpectedNullCharacter);
	                this.state = State.SCRIPT_DATA_ESCAPED;
	                this._emitChars(REPLACEMENT_CHARACTER);
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInScriptHtmlCommentLikeText);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                this.state = State.SCRIPT_DATA_ESCAPED;
	                this._emitCodePoint(cp);
	            }
	        }
	    }
	    // Script data escaped less-than sign state
	    //------------------------------------------------------------------
	    _stateScriptDataEscapedLessThanSign(cp) {
	        if (cp === CODE_POINTS.SOLIDUS) {
	            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;
	        }
	        else if (isAsciiLetter(cp)) {
	            this._emitChars('<');
	            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_START;
	            this._stateScriptDataDoubleEscapeStart(cp);
	        }
	        else {
	            this._emitChars('<');
	            this.state = State.SCRIPT_DATA_ESCAPED;
	            this._stateScriptDataEscaped(cp);
	        }
	    }
	    // Script data escaped end tag open state
	    //------------------------------------------------------------------
	    _stateScriptDataEscapedEndTagOpen(cp) {
	        if (isAsciiLetter(cp)) {
	            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_NAME;
	            this._stateScriptDataEscapedEndTagName(cp);
	        }
	        else {
	            this._emitChars('</');
	            this.state = State.SCRIPT_DATA_ESCAPED;
	            this._stateScriptDataEscaped(cp);
	        }
	    }
	    // Script data escaped end tag name state
	    //------------------------------------------------------------------
	    _stateScriptDataEscapedEndTagName(cp) {
	        if (this.handleSpecialEndTag(cp)) {
	            this._emitChars('</');
	            this.state = State.SCRIPT_DATA_ESCAPED;
	            this._stateScriptDataEscaped(cp);
	        }
	    }
	    // Script data double escape start state
	    //------------------------------------------------------------------
	    _stateScriptDataDoubleEscapeStart(cp) {
	        if (this.preprocessor.startsWith(SEQUENCES.SCRIPT, false) &&
	            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(SEQUENCES.SCRIPT.length))) {
	            this._emitCodePoint(cp);
	            for (let i = 0; i < SEQUENCES.SCRIPT.length; i++) {
	                this._emitCodePoint(this._consume());
	            }
	            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
	        }
	        else if (!this._ensureHibernation()) {
	            this.state = State.SCRIPT_DATA_ESCAPED;
	            this._stateScriptDataEscaped(cp);
	        }
	    }
	    // Script data double escaped state
	    //------------------------------------------------------------------
	    _stateScriptDataDoubleEscaped(cp) {
	        switch (cp) {
	            case CODE_POINTS.HYPHEN_MINUS: {
	                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;
	                this._emitChars('-');
	                break;
	            }
	            case CODE_POINTS.LESS_THAN_SIGN: {
	                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;
	                this._emitChars('<');
	                break;
	            }
	            case CODE_POINTS.NULL: {
	                this._err(ERR.unexpectedNullCharacter);
	                this._emitChars(REPLACEMENT_CHARACTER);
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInScriptHtmlCommentLikeText);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                this._emitCodePoint(cp);
	            }
	        }
	    }
	    // Script data double escaped dash state
	    //------------------------------------------------------------------
	    _stateScriptDataDoubleEscapedDash(cp) {
	        switch (cp) {
	            case CODE_POINTS.HYPHEN_MINUS: {
	                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;
	                this._emitChars('-');
	                break;
	            }
	            case CODE_POINTS.LESS_THAN_SIGN: {
	                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;
	                this._emitChars('<');
	                break;
	            }
	            case CODE_POINTS.NULL: {
	                this._err(ERR.unexpectedNullCharacter);
	                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
	                this._emitChars(REPLACEMENT_CHARACTER);
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInScriptHtmlCommentLikeText);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
	                this._emitCodePoint(cp);
	            }
	        }
	    }
	    // Script data double escaped dash dash state
	    //------------------------------------------------------------------
	    _stateScriptDataDoubleEscapedDashDash(cp) {
	        switch (cp) {
	            case CODE_POINTS.HYPHEN_MINUS: {
	                this._emitChars('-');
	                break;
	            }
	            case CODE_POINTS.LESS_THAN_SIGN: {
	                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;
	                this._emitChars('<');
	                break;
	            }
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this.state = State.SCRIPT_DATA;
	                this._emitChars('>');
	                break;
	            }
	            case CODE_POINTS.NULL: {
	                this._err(ERR.unexpectedNullCharacter);
	                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
	                this._emitChars(REPLACEMENT_CHARACTER);
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInScriptHtmlCommentLikeText);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
	                this._emitCodePoint(cp);
	            }
	        }
	    }
	    // Script data double escaped less-than sign state
	    //------------------------------------------------------------------
	    _stateScriptDataDoubleEscapedLessThanSign(cp) {
	        if (cp === CODE_POINTS.SOLIDUS) {
	            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_END;
	            this._emitChars('/');
	        }
	        else {
	            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
	            this._stateScriptDataDoubleEscaped(cp);
	        }
	    }
	    // Script data double escape end state
	    //------------------------------------------------------------------
	    _stateScriptDataDoubleEscapeEnd(cp) {
	        if (this.preprocessor.startsWith(SEQUENCES.SCRIPT, false) &&
	            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(SEQUENCES.SCRIPT.length))) {
	            this._emitCodePoint(cp);
	            for (let i = 0; i < SEQUENCES.SCRIPT.length; i++) {
	                this._emitCodePoint(this._consume());
	            }
	            this.state = State.SCRIPT_DATA_ESCAPED;
	        }
	        else if (!this._ensureHibernation()) {
	            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
	            this._stateScriptDataDoubleEscaped(cp);
	        }
	    }
	    // Before attribute name state
	    //------------------------------------------------------------------
	    _stateBeforeAttributeName(cp) {
	        switch (cp) {
	            case CODE_POINTS.SPACE:
	            case CODE_POINTS.LINE_FEED:
	            case CODE_POINTS.TABULATION:
	            case CODE_POINTS.FORM_FEED: {
	                // Ignore whitespace
	                break;
	            }
	            case CODE_POINTS.SOLIDUS:
	            case CODE_POINTS.GREATER_THAN_SIGN:
	            case CODE_POINTS.EOF: {
	                this.state = State.AFTER_ATTRIBUTE_NAME;
	                this._stateAfterAttributeName(cp);
	                break;
	            }
	            case CODE_POINTS.EQUALS_SIGN: {
	                this._err(ERR.unexpectedEqualsSignBeforeAttributeName);
	                this._createAttr('=');
	                this.state = State.ATTRIBUTE_NAME;
	                break;
	            }
	            default: {
	                this._createAttr('');
	                this.state = State.ATTRIBUTE_NAME;
	                this._stateAttributeName(cp);
	            }
	        }
	    }
	    // Attribute name state
	    //------------------------------------------------------------------
	    _stateAttributeName(cp) {
	        switch (cp) {
	            case CODE_POINTS.SPACE:
	            case CODE_POINTS.LINE_FEED:
	            case CODE_POINTS.TABULATION:
	            case CODE_POINTS.FORM_FEED:
	            case CODE_POINTS.SOLIDUS:
	            case CODE_POINTS.GREATER_THAN_SIGN:
	            case CODE_POINTS.EOF: {
	                this._leaveAttrName();
	                this.state = State.AFTER_ATTRIBUTE_NAME;
	                this._stateAfterAttributeName(cp);
	                break;
	            }
	            case CODE_POINTS.EQUALS_SIGN: {
	                this._leaveAttrName();
	                this.state = State.BEFORE_ATTRIBUTE_VALUE;
	                break;
	            }
	            case CODE_POINTS.QUOTATION_MARK:
	            case CODE_POINTS.APOSTROPHE:
	            case CODE_POINTS.LESS_THAN_SIGN: {
	                this._err(ERR.unexpectedCharacterInAttributeName);
	                this.currentAttr.name += String.fromCodePoint(cp);
	                break;
	            }
	            case CODE_POINTS.NULL: {
	                this._err(ERR.unexpectedNullCharacter);
	                this.currentAttr.name += REPLACEMENT_CHARACTER;
	                break;
	            }
	            default: {
	                this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);
	            }
	        }
	    }
	    // After attribute name state
	    //------------------------------------------------------------------
	    _stateAfterAttributeName(cp) {
	        switch (cp) {
	            case CODE_POINTS.SPACE:
	            case CODE_POINTS.LINE_FEED:
	            case CODE_POINTS.TABULATION:
	            case CODE_POINTS.FORM_FEED: {
	                // Ignore whitespace
	                break;
	            }
	            case CODE_POINTS.SOLIDUS: {
	                this.state = State.SELF_CLOSING_START_TAG;
	                break;
	            }
	            case CODE_POINTS.EQUALS_SIGN: {
	                this.state = State.BEFORE_ATTRIBUTE_VALUE;
	                break;
	            }
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this.state = State.DATA;
	                this.emitCurrentTagToken();
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInTag);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                this._createAttr('');
	                this.state = State.ATTRIBUTE_NAME;
	                this._stateAttributeName(cp);
	            }
	        }
	    }
	    // Before attribute value state
	    //------------------------------------------------------------------
	    _stateBeforeAttributeValue(cp) {
	        switch (cp) {
	            case CODE_POINTS.SPACE:
	            case CODE_POINTS.LINE_FEED:
	            case CODE_POINTS.TABULATION:
	            case CODE_POINTS.FORM_FEED: {
	                // Ignore whitespace
	                break;
	            }
	            case CODE_POINTS.QUOTATION_MARK: {
	                this.state = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;
	                break;
	            }
	            case CODE_POINTS.APOSTROPHE: {
	                this.state = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;
	                break;
	            }
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this._err(ERR.missingAttributeValue);
	                this.state = State.DATA;
	                this.emitCurrentTagToken();
	                break;
	            }
	            default: {
	                this.state = State.ATTRIBUTE_VALUE_UNQUOTED;
	                this._stateAttributeValueUnquoted(cp);
	            }
	        }
	    }
	    // Attribute value (double-quoted) state
	    //------------------------------------------------------------------
	    _stateAttributeValueDoubleQuoted(cp) {
	        switch (cp) {
	            case CODE_POINTS.QUOTATION_MARK: {
	                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;
	                break;
	            }
	            case CODE_POINTS.AMPERSAND: {
	                this.returnState = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;
	                this.state = State.CHARACTER_REFERENCE;
	                break;
	            }
	            case CODE_POINTS.NULL: {
	                this._err(ERR.unexpectedNullCharacter);
	                this.currentAttr.value += REPLACEMENT_CHARACTER;
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInTag);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                this.currentAttr.value += String.fromCodePoint(cp);
	            }
	        }
	    }
	    // Attribute value (single-quoted) state
	    //------------------------------------------------------------------
	    _stateAttributeValueSingleQuoted(cp) {
	        switch (cp) {
	            case CODE_POINTS.APOSTROPHE: {
	                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;
	                break;
	            }
	            case CODE_POINTS.AMPERSAND: {
	                this.returnState = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;
	                this.state = State.CHARACTER_REFERENCE;
	                break;
	            }
	            case CODE_POINTS.NULL: {
	                this._err(ERR.unexpectedNullCharacter);
	                this.currentAttr.value += REPLACEMENT_CHARACTER;
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInTag);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                this.currentAttr.value += String.fromCodePoint(cp);
	            }
	        }
	    }
	    // Attribute value (unquoted) state
	    //------------------------------------------------------------------
	    _stateAttributeValueUnquoted(cp) {
	        switch (cp) {
	            case CODE_POINTS.SPACE:
	            case CODE_POINTS.LINE_FEED:
	            case CODE_POINTS.TABULATION:
	            case CODE_POINTS.FORM_FEED: {
	                this._leaveAttrValue();
	                this.state = State.BEFORE_ATTRIBUTE_NAME;
	                break;
	            }
	            case CODE_POINTS.AMPERSAND: {
	                this.returnState = State.ATTRIBUTE_VALUE_UNQUOTED;
	                this.state = State.CHARACTER_REFERENCE;
	                break;
	            }
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this._leaveAttrValue();
	                this.state = State.DATA;
	                this.emitCurrentTagToken();
	                break;
	            }
	            case CODE_POINTS.NULL: {
	                this._err(ERR.unexpectedNullCharacter);
	                this.currentAttr.value += REPLACEMENT_CHARACTER;
	                break;
	            }
	            case CODE_POINTS.QUOTATION_MARK:
	            case CODE_POINTS.APOSTROPHE:
	            case CODE_POINTS.LESS_THAN_SIGN:
	            case CODE_POINTS.EQUALS_SIGN:
	            case CODE_POINTS.GRAVE_ACCENT: {
	                this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);
	                this.currentAttr.value += String.fromCodePoint(cp);
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInTag);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                this.currentAttr.value += String.fromCodePoint(cp);
	            }
	        }
	    }
	    // After attribute value (quoted) state
	    //------------------------------------------------------------------
	    _stateAfterAttributeValueQuoted(cp) {
	        switch (cp) {
	            case CODE_POINTS.SPACE:
	            case CODE_POINTS.LINE_FEED:
	            case CODE_POINTS.TABULATION:
	            case CODE_POINTS.FORM_FEED: {
	                this._leaveAttrValue();
	                this.state = State.BEFORE_ATTRIBUTE_NAME;
	                break;
	            }
	            case CODE_POINTS.SOLIDUS: {
	                this._leaveAttrValue();
	                this.state = State.SELF_CLOSING_START_TAG;
	                break;
	            }
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this._leaveAttrValue();
	                this.state = State.DATA;
	                this.emitCurrentTagToken();
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInTag);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                this._err(ERR.missingWhitespaceBetweenAttributes);
	                this.state = State.BEFORE_ATTRIBUTE_NAME;
	                this._stateBeforeAttributeName(cp);
	            }
	        }
	    }
	    // Self-closing start tag state
	    //------------------------------------------------------------------
	    _stateSelfClosingStartTag(cp) {
	        switch (cp) {
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                const token = this.currentToken;
	                token.selfClosing = true;
	                this.state = State.DATA;
	                this.emitCurrentTagToken();
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInTag);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                this._err(ERR.unexpectedSolidusInTag);
	                this.state = State.BEFORE_ATTRIBUTE_NAME;
	                this._stateBeforeAttributeName(cp);
	            }
	        }
	    }
	    // Bogus comment state
	    //------------------------------------------------------------------
	    _stateBogusComment(cp) {
	        const token = this.currentToken;
	        switch (cp) {
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this.state = State.DATA;
	                this.emitCurrentComment(token);
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this.emitCurrentComment(token);
	                this._emitEOFToken();
	                break;
	            }
	            case CODE_POINTS.NULL: {
	                this._err(ERR.unexpectedNullCharacter);
	                token.data += REPLACEMENT_CHARACTER;
	                break;
	            }
	            default: {
	                token.data += String.fromCodePoint(cp);
	            }
	        }
	    }
	    // Markup declaration open state
	    //------------------------------------------------------------------
	    _stateMarkupDeclarationOpen(cp) {
	        if (this._consumeSequenceIfMatch(SEQUENCES.DASH_DASH, true)) {
	            this._createCommentToken(SEQUENCES.DASH_DASH.length + 1);
	            this.state = State.COMMENT_START;
	        }
	        else if (this._consumeSequenceIfMatch(SEQUENCES.DOCTYPE, false)) {
	            // NOTE: Doctypes tokens are created without fixed offsets. We keep track of the moment a doctype *might* start here.
	            this.currentLocation = this.getCurrentLocation(SEQUENCES.DOCTYPE.length + 1);
	            this.state = State.DOCTYPE;
	        }
	        else if (this._consumeSequenceIfMatch(SEQUENCES.CDATA_START, true)) {
	            if (this.inForeignNode) {
	                this.state = State.CDATA_SECTION;
	            }
	            else {
	                this._err(ERR.cdataInHtmlContent);
	                this._createCommentToken(SEQUENCES.CDATA_START.length + 1);
	                this.currentToken.data = '[CDATA[';
	                this.state = State.BOGUS_COMMENT;
	            }
	        }
	        //NOTE: Sequence lookups can be abrupted by hibernation. In that case, lookup
	        //results are no longer valid and we will need to start over.
	        else if (!this._ensureHibernation()) {
	            this._err(ERR.incorrectlyOpenedComment);
	            this._createCommentToken(2);
	            this.state = State.BOGUS_COMMENT;
	            this._stateBogusComment(cp);
	        }
	    }
	    // Comment start state
	    //------------------------------------------------------------------
	    _stateCommentStart(cp) {
	        switch (cp) {
	            case CODE_POINTS.HYPHEN_MINUS: {
	                this.state = State.COMMENT_START_DASH;
	                break;
	            }
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this._err(ERR.abruptClosingOfEmptyComment);
	                this.state = State.DATA;
	                const token = this.currentToken;
	                this.emitCurrentComment(token);
	                break;
	            }
	            default: {
	                this.state = State.COMMENT;
	                this._stateComment(cp);
	            }
	        }
	    }
	    // Comment start dash state
	    //------------------------------------------------------------------
	    _stateCommentStartDash(cp) {
	        const token = this.currentToken;
	        switch (cp) {
	            case CODE_POINTS.HYPHEN_MINUS: {
	                this.state = State.COMMENT_END;
	                break;
	            }
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this._err(ERR.abruptClosingOfEmptyComment);
	                this.state = State.DATA;
	                this.emitCurrentComment(token);
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInComment);
	                this.emitCurrentComment(token);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                token.data += '-';
	                this.state = State.COMMENT;
	                this._stateComment(cp);
	            }
	        }
	    }
	    // Comment state
	    //------------------------------------------------------------------
	    _stateComment(cp) {
	        const token = this.currentToken;
	        switch (cp) {
	            case CODE_POINTS.HYPHEN_MINUS: {
	                this.state = State.COMMENT_END_DASH;
	                break;
	            }
	            case CODE_POINTS.LESS_THAN_SIGN: {
	                token.data += '<';
	                this.state = State.COMMENT_LESS_THAN_SIGN;
	                break;
	            }
	            case CODE_POINTS.NULL: {
	                this._err(ERR.unexpectedNullCharacter);
	                token.data += REPLACEMENT_CHARACTER;
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInComment);
	                this.emitCurrentComment(token);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                token.data += String.fromCodePoint(cp);
	            }
	        }
	    }
	    // Comment less-than sign state
	    //------------------------------------------------------------------
	    _stateCommentLessThanSign(cp) {
	        const token = this.currentToken;
	        switch (cp) {
	            case CODE_POINTS.EXCLAMATION_MARK: {
	                token.data += '!';
	                this.state = State.COMMENT_LESS_THAN_SIGN_BANG;
	                break;
	            }
	            case CODE_POINTS.LESS_THAN_SIGN: {
	                token.data += '<';
	                break;
	            }
	            default: {
	                this.state = State.COMMENT;
	                this._stateComment(cp);
	            }
	        }
	    }
	    // Comment less-than sign bang state
	    //------------------------------------------------------------------
	    _stateCommentLessThanSignBang(cp) {
	        if (cp === CODE_POINTS.HYPHEN_MINUS) {
	            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH;
	        }
	        else {
	            this.state = State.COMMENT;
	            this._stateComment(cp);
	        }
	    }
	    // Comment less-than sign bang dash state
	    //------------------------------------------------------------------
	    _stateCommentLessThanSignBangDash(cp) {
	        if (cp === CODE_POINTS.HYPHEN_MINUS) {
	            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;
	        }
	        else {
	            this.state = State.COMMENT_END_DASH;
	            this._stateCommentEndDash(cp);
	        }
	    }
	    // Comment less-than sign bang dash dash state
	    //------------------------------------------------------------------
	    _stateCommentLessThanSignBangDashDash(cp) {
	        if (cp !== CODE_POINTS.GREATER_THAN_SIGN && cp !== CODE_POINTS.EOF) {
	            this._err(ERR.nestedComment);
	        }
	        this.state = State.COMMENT_END;
	        this._stateCommentEnd(cp);
	    }
	    // Comment end dash state
	    //------------------------------------------------------------------
	    _stateCommentEndDash(cp) {
	        const token = this.currentToken;
	        switch (cp) {
	            case CODE_POINTS.HYPHEN_MINUS: {
	                this.state = State.COMMENT_END;
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInComment);
	                this.emitCurrentComment(token);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                token.data += '-';
	                this.state = State.COMMENT;
	                this._stateComment(cp);
	            }
	        }
	    }
	    // Comment end state
	    //------------------------------------------------------------------
	    _stateCommentEnd(cp) {
	        const token = this.currentToken;
	        switch (cp) {
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this.state = State.DATA;
	                this.emitCurrentComment(token);
	                break;
	            }
	            case CODE_POINTS.EXCLAMATION_MARK: {
	                this.state = State.COMMENT_END_BANG;
	                break;
	            }
	            case CODE_POINTS.HYPHEN_MINUS: {
	                token.data += '-';
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInComment);
	                this.emitCurrentComment(token);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                token.data += '--';
	                this.state = State.COMMENT;
	                this._stateComment(cp);
	            }
	        }
	    }
	    // Comment end bang state
	    //------------------------------------------------------------------
	    _stateCommentEndBang(cp) {
	        const token = this.currentToken;
	        switch (cp) {
	            case CODE_POINTS.HYPHEN_MINUS: {
	                token.data += '--!';
	                this.state = State.COMMENT_END_DASH;
	                break;
	            }
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this._err(ERR.incorrectlyClosedComment);
	                this.state = State.DATA;
	                this.emitCurrentComment(token);
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInComment);
	                this.emitCurrentComment(token);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                token.data += '--!';
	                this.state = State.COMMENT;
	                this._stateComment(cp);
	            }
	        }
	    }
	    // DOCTYPE state
	    //------------------------------------------------------------------
	    _stateDoctype(cp) {
	        switch (cp) {
	            case CODE_POINTS.SPACE:
	            case CODE_POINTS.LINE_FEED:
	            case CODE_POINTS.TABULATION:
	            case CODE_POINTS.FORM_FEED: {
	                this.state = State.BEFORE_DOCTYPE_NAME;
	                break;
	            }
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this.state = State.BEFORE_DOCTYPE_NAME;
	                this._stateBeforeDoctypeName(cp);
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInDoctype);
	                this._createDoctypeToken(null);
	                const token = this.currentToken;
	                token.forceQuirks = true;
	                this.emitCurrentDoctype(token);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                this._err(ERR.missingWhitespaceBeforeDoctypeName);
	                this.state = State.BEFORE_DOCTYPE_NAME;
	                this._stateBeforeDoctypeName(cp);
	            }
	        }
	    }
	    // Before DOCTYPE name state
	    //------------------------------------------------------------------
	    _stateBeforeDoctypeName(cp) {
	        if (isAsciiUpper(cp)) {
	            this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));
	            this.state = State.DOCTYPE_NAME;
	        }
	        else
	            switch (cp) {
	                case CODE_POINTS.SPACE:
	                case CODE_POINTS.LINE_FEED:
	                case CODE_POINTS.TABULATION:
	                case CODE_POINTS.FORM_FEED: {
	                    // Ignore whitespace
	                    break;
	                }
	                case CODE_POINTS.NULL: {
	                    this._err(ERR.unexpectedNullCharacter);
	                    this._createDoctypeToken(REPLACEMENT_CHARACTER);
	                    this.state = State.DOCTYPE_NAME;
	                    break;
	                }
	                case CODE_POINTS.GREATER_THAN_SIGN: {
	                    this._err(ERR.missingDoctypeName);
	                    this._createDoctypeToken(null);
	                    const token = this.currentToken;
	                    token.forceQuirks = true;
	                    this.emitCurrentDoctype(token);
	                    this.state = State.DATA;
	                    break;
	                }
	                case CODE_POINTS.EOF: {
	                    this._err(ERR.eofInDoctype);
	                    this._createDoctypeToken(null);
	                    const token = this.currentToken;
	                    token.forceQuirks = true;
	                    this.emitCurrentDoctype(token);
	                    this._emitEOFToken();
	                    break;
	                }
	                default: {
	                    this._createDoctypeToken(String.fromCodePoint(cp));
	                    this.state = State.DOCTYPE_NAME;
	                }
	            }
	    }
	    // DOCTYPE name state
	    //------------------------------------------------------------------
	    _stateDoctypeName(cp) {
	        const token = this.currentToken;
	        switch (cp) {
	            case CODE_POINTS.SPACE:
	            case CODE_POINTS.LINE_FEED:
	            case CODE_POINTS.TABULATION:
	            case CODE_POINTS.FORM_FEED: {
	                this.state = State.AFTER_DOCTYPE_NAME;
	                break;
	            }
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this.state = State.DATA;
	                this.emitCurrentDoctype(token);
	                break;
	            }
	            case CODE_POINTS.NULL: {
	                this._err(ERR.unexpectedNullCharacter);
	                token.name += REPLACEMENT_CHARACTER;
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInDoctype);
	                token.forceQuirks = true;
	                this.emitCurrentDoctype(token);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);
	            }
	        }
	    }
	    // After DOCTYPE name state
	    //------------------------------------------------------------------
	    _stateAfterDoctypeName(cp) {
	        const token = this.currentToken;
	        switch (cp) {
	            case CODE_POINTS.SPACE:
	            case CODE_POINTS.LINE_FEED:
	            case CODE_POINTS.TABULATION:
	            case CODE_POINTS.FORM_FEED: {
	                // Ignore whitespace
	                break;
	            }
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this.state = State.DATA;
	                this.emitCurrentDoctype(token);
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInDoctype);
	                token.forceQuirks = true;
	                this.emitCurrentDoctype(token);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                if (this._consumeSequenceIfMatch(SEQUENCES.PUBLIC, false)) {
	                    this.state = State.AFTER_DOCTYPE_PUBLIC_KEYWORD;
	                }
	                else if (this._consumeSequenceIfMatch(SEQUENCES.SYSTEM, false)) {
	                    this.state = State.AFTER_DOCTYPE_SYSTEM_KEYWORD;
	                }
	                //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup
	                //results are no longer valid and we will need to start over.
	                else if (!this._ensureHibernation()) {
	                    this._err(ERR.invalidCharacterSequenceAfterDoctypeName);
	                    token.forceQuirks = true;
	                    this.state = State.BOGUS_DOCTYPE;
	                    this._stateBogusDoctype(cp);
	                }
	            }
	        }
	    }
	    // After DOCTYPE public keyword state
	    //------------------------------------------------------------------
	    _stateAfterDoctypePublicKeyword(cp) {
	        const token = this.currentToken;
	        switch (cp) {
	            case CODE_POINTS.SPACE:
	            case CODE_POINTS.LINE_FEED:
	            case CODE_POINTS.TABULATION:
	            case CODE_POINTS.FORM_FEED: {
	                this.state = State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;
	                break;
	            }
	            case CODE_POINTS.QUOTATION_MARK: {
	                this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);
	                token.publicId = '';
	                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;
	                break;
	            }
	            case CODE_POINTS.APOSTROPHE: {
	                this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);
	                token.publicId = '';
	                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;
	                break;
	            }
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this._err(ERR.missingDoctypePublicIdentifier);
	                token.forceQuirks = true;
	                this.state = State.DATA;
	                this.emitCurrentDoctype(token);
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInDoctype);
	                token.forceQuirks = true;
	                this.emitCurrentDoctype(token);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);
	                token.forceQuirks = true;
	                this.state = State.BOGUS_DOCTYPE;
	                this._stateBogusDoctype(cp);
	            }
	        }
	    }
	    // Before DOCTYPE public identifier state
	    //------------------------------------------------------------------
	    _stateBeforeDoctypePublicIdentifier(cp) {
	        const token = this.currentToken;
	        switch (cp) {
	            case CODE_POINTS.SPACE:
	            case CODE_POINTS.LINE_FEED:
	            case CODE_POINTS.TABULATION:
	            case CODE_POINTS.FORM_FEED: {
	                // Ignore whitespace
	                break;
	            }
	            case CODE_POINTS.QUOTATION_MARK: {
	                token.publicId = '';
	                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;
	                break;
	            }
	            case CODE_POINTS.APOSTROPHE: {
	                token.publicId = '';
	                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;
	                break;
	            }
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this._err(ERR.missingDoctypePublicIdentifier);
	                token.forceQuirks = true;
	                this.state = State.DATA;
	                this.emitCurrentDoctype(token);
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInDoctype);
	                token.forceQuirks = true;
	                this.emitCurrentDoctype(token);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);
	                token.forceQuirks = true;
	                this.state = State.BOGUS_DOCTYPE;
	                this._stateBogusDoctype(cp);
	            }
	        }
	    }
	    // DOCTYPE public identifier (double-quoted) state
	    //------------------------------------------------------------------
	    _stateDoctypePublicIdentifierDoubleQuoted(cp) {
	        const token = this.currentToken;
	        switch (cp) {
	            case CODE_POINTS.QUOTATION_MARK: {
	                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;
	                break;
	            }
	            case CODE_POINTS.NULL: {
	                this._err(ERR.unexpectedNullCharacter);
	                token.publicId += REPLACEMENT_CHARACTER;
	                break;
	            }
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this._err(ERR.abruptDoctypePublicIdentifier);
	                token.forceQuirks = true;
	                this.emitCurrentDoctype(token);
	                this.state = State.DATA;
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInDoctype);
	                token.forceQuirks = true;
	                this.emitCurrentDoctype(token);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                token.publicId += String.fromCodePoint(cp);
	            }
	        }
	    }
	    // DOCTYPE public identifier (single-quoted) state
	    //------------------------------------------------------------------
	    _stateDoctypePublicIdentifierSingleQuoted(cp) {
	        const token = this.currentToken;
	        switch (cp) {
	            case CODE_POINTS.APOSTROPHE: {
	                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;
	                break;
	            }
	            case CODE_POINTS.NULL: {
	                this._err(ERR.unexpectedNullCharacter);
	                token.publicId += REPLACEMENT_CHARACTER;
	                break;
	            }
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this._err(ERR.abruptDoctypePublicIdentifier);
	                token.forceQuirks = true;
	                this.emitCurrentDoctype(token);
	                this.state = State.DATA;
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInDoctype);
	                token.forceQuirks = true;
	                this.emitCurrentDoctype(token);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                token.publicId += String.fromCodePoint(cp);
	            }
	        }
	    }
	    // After DOCTYPE public identifier state
	    //------------------------------------------------------------------
	    _stateAfterDoctypePublicIdentifier(cp) {
	        const token = this.currentToken;
	        switch (cp) {
	            case CODE_POINTS.SPACE:
	            case CODE_POINTS.LINE_FEED:
	            case CODE_POINTS.TABULATION:
	            case CODE_POINTS.FORM_FEED: {
	                this.state = State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;
	                break;
	            }
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this.state = State.DATA;
	                this.emitCurrentDoctype(token);
	                break;
	            }
	            case CODE_POINTS.QUOTATION_MARK: {
	                this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
	                token.systemId = '';
	                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
	                break;
	            }
	            case CODE_POINTS.APOSTROPHE: {
	                this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
	                token.systemId = '';
	                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInDoctype);
	                token.forceQuirks = true;
	                this.emitCurrentDoctype(token);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
	                token.forceQuirks = true;
	                this.state = State.BOGUS_DOCTYPE;
	                this._stateBogusDoctype(cp);
	            }
	        }
	    }
	    // Between DOCTYPE public and system identifiers state
	    //------------------------------------------------------------------
	    _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {
	        const token = this.currentToken;
	        switch (cp) {
	            case CODE_POINTS.SPACE:
	            case CODE_POINTS.LINE_FEED:
	            case CODE_POINTS.TABULATION:
	            case CODE_POINTS.FORM_FEED: {
	                // Ignore whitespace
	                break;
	            }
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this.emitCurrentDoctype(token);
	                this.state = State.DATA;
	                break;
	            }
	            case CODE_POINTS.QUOTATION_MARK: {
	                token.systemId = '';
	                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
	                break;
	            }
	            case CODE_POINTS.APOSTROPHE: {
	                token.systemId = '';
	                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInDoctype);
	                token.forceQuirks = true;
	                this.emitCurrentDoctype(token);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
	                token.forceQuirks = true;
	                this.state = State.BOGUS_DOCTYPE;
	                this._stateBogusDoctype(cp);
	            }
	        }
	    }
	    // After DOCTYPE system keyword state
	    //------------------------------------------------------------------
	    _stateAfterDoctypeSystemKeyword(cp) {
	        const token = this.currentToken;
	        switch (cp) {
	            case CODE_POINTS.SPACE:
	            case CODE_POINTS.LINE_FEED:
	            case CODE_POINTS.TABULATION:
	            case CODE_POINTS.FORM_FEED: {
	                this.state = State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;
	                break;
	            }
	            case CODE_POINTS.QUOTATION_MARK: {
	                this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);
	                token.systemId = '';
	                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
	                break;
	            }
	            case CODE_POINTS.APOSTROPHE: {
	                this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);
	                token.systemId = '';
	                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
	                break;
	            }
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this._err(ERR.missingDoctypeSystemIdentifier);
	                token.forceQuirks = true;
	                this.state = State.DATA;
	                this.emitCurrentDoctype(token);
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInDoctype);
	                token.forceQuirks = true;
	                this.emitCurrentDoctype(token);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
	                token.forceQuirks = true;
	                this.state = State.BOGUS_DOCTYPE;
	                this._stateBogusDoctype(cp);
	            }
	        }
	    }
	    // Before DOCTYPE system identifier state
	    //------------------------------------------------------------------
	    _stateBeforeDoctypeSystemIdentifier(cp) {
	        const token = this.currentToken;
	        switch (cp) {
	            case CODE_POINTS.SPACE:
	            case CODE_POINTS.LINE_FEED:
	            case CODE_POINTS.TABULATION:
	            case CODE_POINTS.FORM_FEED: {
	                // Ignore whitespace
	                break;
	            }
	            case CODE_POINTS.QUOTATION_MARK: {
	                token.systemId = '';
	                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
	                break;
	            }
	            case CODE_POINTS.APOSTROPHE: {
	                token.systemId = '';
	                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
	                break;
	            }
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this._err(ERR.missingDoctypeSystemIdentifier);
	                token.forceQuirks = true;
	                this.state = State.DATA;
	                this.emitCurrentDoctype(token);
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInDoctype);
	                token.forceQuirks = true;
	                this.emitCurrentDoctype(token);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
	                token.forceQuirks = true;
	                this.state = State.BOGUS_DOCTYPE;
	                this._stateBogusDoctype(cp);
	            }
	        }
	    }
	    // DOCTYPE system identifier (double-quoted) state
	    //------------------------------------------------------------------
	    _stateDoctypeSystemIdentifierDoubleQuoted(cp) {
	        const token = this.currentToken;
	        switch (cp) {
	            case CODE_POINTS.QUOTATION_MARK: {
	                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;
	                break;
	            }
	            case CODE_POINTS.NULL: {
	                this._err(ERR.unexpectedNullCharacter);
	                token.systemId += REPLACEMENT_CHARACTER;
	                break;
	            }
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this._err(ERR.abruptDoctypeSystemIdentifier);
	                token.forceQuirks = true;
	                this.emitCurrentDoctype(token);
	                this.state = State.DATA;
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInDoctype);
	                token.forceQuirks = true;
	                this.emitCurrentDoctype(token);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                token.systemId += String.fromCodePoint(cp);
	            }
	        }
	    }
	    // DOCTYPE system identifier (single-quoted) state
	    //------------------------------------------------------------------
	    _stateDoctypeSystemIdentifierSingleQuoted(cp) {
	        const token = this.currentToken;
	        switch (cp) {
	            case CODE_POINTS.APOSTROPHE: {
	                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;
	                break;
	            }
	            case CODE_POINTS.NULL: {
	                this._err(ERR.unexpectedNullCharacter);
	                token.systemId += REPLACEMENT_CHARACTER;
	                break;
	            }
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this._err(ERR.abruptDoctypeSystemIdentifier);
	                token.forceQuirks = true;
	                this.emitCurrentDoctype(token);
	                this.state = State.DATA;
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInDoctype);
	                token.forceQuirks = true;
	                this.emitCurrentDoctype(token);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                token.systemId += String.fromCodePoint(cp);
	            }
	        }
	    }
	    // After DOCTYPE system identifier state
	    //------------------------------------------------------------------
	    _stateAfterDoctypeSystemIdentifier(cp) {
	        const token = this.currentToken;
	        switch (cp) {
	            case CODE_POINTS.SPACE:
	            case CODE_POINTS.LINE_FEED:
	            case CODE_POINTS.TABULATION:
	            case CODE_POINTS.FORM_FEED: {
	                // Ignore whitespace
	                break;
	            }
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this.emitCurrentDoctype(token);
	                this.state = State.DATA;
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInDoctype);
	                token.forceQuirks = true;
	                this.emitCurrentDoctype(token);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);
	                this.state = State.BOGUS_DOCTYPE;
	                this._stateBogusDoctype(cp);
	            }
	        }
	    }
	    // Bogus DOCTYPE state
	    //------------------------------------------------------------------
	    _stateBogusDoctype(cp) {
	        const token = this.currentToken;
	        switch (cp) {
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this.emitCurrentDoctype(token);
	                this.state = State.DATA;
	                break;
	            }
	            case CODE_POINTS.NULL: {
	                this._err(ERR.unexpectedNullCharacter);
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this.emitCurrentDoctype(token);
	                this._emitEOFToken();
	                break;
	            }
	            // Do nothing
	        }
	    }
	    // CDATA section state
	    //------------------------------------------------------------------
	    _stateCdataSection(cp) {
	        switch (cp) {
	            case CODE_POINTS.RIGHT_SQUARE_BRACKET: {
	                this.state = State.CDATA_SECTION_BRACKET;
	                break;
	            }
	            case CODE_POINTS.EOF: {
	                this._err(ERR.eofInCdata);
	                this._emitEOFToken();
	                break;
	            }
	            default: {
	                this._emitCodePoint(cp);
	            }
	        }
	    }
	    // CDATA section bracket state
	    //------------------------------------------------------------------
	    _stateCdataSectionBracket(cp) {
	        if (cp === CODE_POINTS.RIGHT_SQUARE_BRACKET) {
	            this.state = State.CDATA_SECTION_END;
	        }
	        else {
	            this._emitChars(']');
	            this.state = State.CDATA_SECTION;
	            this._stateCdataSection(cp);
	        }
	    }
	    // CDATA section end state
	    //------------------------------------------------------------------
	    _stateCdataSectionEnd(cp) {
	        switch (cp) {
	            case CODE_POINTS.GREATER_THAN_SIGN: {
	                this.state = State.DATA;
	                break;
	            }
	            case CODE_POINTS.RIGHT_SQUARE_BRACKET: {
	                this._emitChars(']');
	                break;
	            }
	            default: {
	                this._emitChars(']]');
	                this.state = State.CDATA_SECTION;
	                this._stateCdataSection(cp);
	            }
	        }
	    }
	    // Character reference state
	    //------------------------------------------------------------------
	    _stateCharacterReference(cp) {
	        if (cp === CODE_POINTS.NUMBER_SIGN) {
	            this.state = State.NUMERIC_CHARACTER_REFERENCE;
	        }
	        else if (isAsciiAlphaNumeric(cp)) {
	            this.state = State.NAMED_CHARACTER_REFERENCE;
	            this._stateNamedCharacterReference(cp);
	        }
	        else {
	            this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
	            this._reconsumeInState(this.returnState, cp);
	        }
	    }
	    // Named character reference state
	    //------------------------------------------------------------------
	    _stateNamedCharacterReference(cp) {
	        const matchResult = this._matchNamedCharacterReference(cp);
	        //NOTE: Matching can be abrupted by hibernation. In that case, match
	        //results are no longer valid and we will need to start over.
	        if (this._ensureHibernation()) ;
	        else if (matchResult) {
	            for (let i = 0; i < matchResult.length; i++) {
	                this._flushCodePointConsumedAsCharacterReference(matchResult[i]);
	            }
	            this.state = this.returnState;
	        }
	        else {
	            this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
	            this.state = State.AMBIGUOUS_AMPERSAND;
	        }
	    }
	    // Ambiguos ampersand state
	    //------------------------------------------------------------------
	    _stateAmbiguousAmpersand(cp) {
	        if (isAsciiAlphaNumeric(cp)) {
	            this._flushCodePointConsumedAsCharacterReference(cp);
	        }
	        else {
	            if (cp === CODE_POINTS.SEMICOLON) {
	                this._err(ERR.unknownNamedCharacterReference);
	            }
	            this._reconsumeInState(this.returnState, cp);
	        }
	    }
	    // Numeric character reference state
	    //------------------------------------------------------------------
	    _stateNumericCharacterReference(cp) {
	        this.charRefCode = 0;
	        if (cp === CODE_POINTS.LATIN_SMALL_X || cp === CODE_POINTS.LATIN_CAPITAL_X) {
	            this.state = State.HEXADEMICAL_CHARACTER_REFERENCE_START;
	        }
	        // Inlined decimal character reference start state
	        else if (isAsciiDigit(cp)) {
	            this.state = State.DECIMAL_CHARACTER_REFERENCE;
	            this._stateDecimalCharacterReference(cp);
	        }
	        else {
	            this._err(ERR.absenceOfDigitsInNumericCharacterReference);
	            this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
	            this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.NUMBER_SIGN);
	            this._reconsumeInState(this.returnState, cp);
	        }
	    }
	    // Hexademical character reference start state
	    //------------------------------------------------------------------
	    _stateHexademicalCharacterReferenceStart(cp) {
	        if (isAsciiHexDigit(cp)) {
	            this.state = State.HEXADEMICAL_CHARACTER_REFERENCE;
	            this._stateHexademicalCharacterReference(cp);
	        }
	        else {
	            this._err(ERR.absenceOfDigitsInNumericCharacterReference);
	            this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
	            this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.NUMBER_SIGN);
	            this._unconsume(2);
	            this.state = this.returnState;
	        }
	    }
	    // Hexademical character reference state
	    //------------------------------------------------------------------
	    _stateHexademicalCharacterReference(cp) {
	        if (isAsciiUpperHexDigit(cp)) {
	            this.charRefCode = this.charRefCode * 16 + cp - 0x37;
	        }
	        else if (isAsciiLowerHexDigit(cp)) {
	            this.charRefCode = this.charRefCode * 16 + cp - 0x57;
	        }
	        else if (isAsciiDigit(cp)) {
	            this.charRefCode = this.charRefCode * 16 + cp - 0x30;
	        }
	        else if (cp === CODE_POINTS.SEMICOLON) {
	            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;
	        }
	        else {
	            this._err(ERR.missingSemicolonAfterCharacterReference);
	            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;
	            this._stateNumericCharacterReferenceEnd(cp);
	        }
	    }
	    // Decimal character reference state
	    //------------------------------------------------------------------
	    _stateDecimalCharacterReference(cp) {
	        if (isAsciiDigit(cp)) {
	            this.charRefCode = this.charRefCode * 10 + cp - 0x30;
	        }
	        else if (cp === CODE_POINTS.SEMICOLON) {
	            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;
	        }
	        else {
	            this._err(ERR.missingSemicolonAfterCharacterReference);
	            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;
	            this._stateNumericCharacterReferenceEnd(cp);
	        }
	    }
	    // Numeric character reference end state
	    //------------------------------------------------------------------
	    _stateNumericCharacterReferenceEnd(cp) {
	        if (this.charRefCode === CODE_POINTS.NULL) {
	            this._err(ERR.nullCharacterReference);
	            this.charRefCode = CODE_POINTS.REPLACEMENT_CHARACTER;
	        }
	        else if (this.charRefCode > 1114111) {
	            this._err(ERR.characterReferenceOutsideUnicodeRange);
	            this.charRefCode = CODE_POINTS.REPLACEMENT_CHARACTER;
	        }
	        else if (isSurrogate(this.charRefCode)) {
	            this._err(ERR.surrogateCharacterReference);
	            this.charRefCode = CODE_POINTS.REPLACEMENT_CHARACTER;
	        }
	        else if (isUndefinedCodePoint(this.charRefCode)) {
	            this._err(ERR.noncharacterCharacterReference);
	        }
	        else if (isControlCodePoint(this.charRefCode) || this.charRefCode === CODE_POINTS.CARRIAGE_RETURN) {
	            this._err(ERR.controlCharacterReference);
	            const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS.get(this.charRefCode);
	            if (replacement !== undefined) {
	                this.charRefCode = replacement;
	            }
	        }
	        this._flushCodePointConsumedAsCharacterReference(this.charRefCode);
	        this._reconsumeInState(this.returnState, cp);
	    }
	}

	//Element utils
	const IMPLICIT_END_TAG_REQUIRED = new Set([TAG_ID.DD, TAG_ID.DT, TAG_ID.LI, TAG_ID.OPTGROUP, TAG_ID.OPTION, TAG_ID.P, TAG_ID.RB, TAG_ID.RP, TAG_ID.RT, TAG_ID.RTC]);
	const IMPLICIT_END_TAG_REQUIRED_THOROUGHLY = new Set([
	    ...IMPLICIT_END_TAG_REQUIRED,
	    TAG_ID.CAPTION,
	    TAG_ID.COLGROUP,
	    TAG_ID.TBODY,
	    TAG_ID.TD,
	    TAG_ID.TFOOT,
	    TAG_ID.TH,
	    TAG_ID.THEAD,
	    TAG_ID.TR,
	]);
	const SCOPING_ELEMENT_NS = new Map([
	    [TAG_ID.APPLET, NS.HTML],
	    [TAG_ID.CAPTION, NS.HTML],
	    [TAG_ID.HTML, NS.HTML],
	    [TAG_ID.MARQUEE, NS.HTML],
	    [TAG_ID.OBJECT, NS.HTML],
	    [TAG_ID.TABLE, NS.HTML],
	    [TAG_ID.TD, NS.HTML],
	    [TAG_ID.TEMPLATE, NS.HTML],
	    [TAG_ID.TH, NS.HTML],
	    [TAG_ID.ANNOTATION_XML, NS.MATHML],
	    [TAG_ID.MI, NS.MATHML],
	    [TAG_ID.MN, NS.MATHML],
	    [TAG_ID.MO, NS.MATHML],
	    [TAG_ID.MS, NS.MATHML],
	    [TAG_ID.MTEXT, NS.MATHML],
	    [TAG_ID.DESC, NS.SVG],
	    [TAG_ID.FOREIGN_OBJECT, NS.SVG],
	    [TAG_ID.TITLE, NS.SVG],
	]);
	const NAMED_HEADERS = [TAG_ID.H1, TAG_ID.H2, TAG_ID.H3, TAG_ID.H4, TAG_ID.H5, TAG_ID.H6];
	const TABLE_ROW_CONTEXT = [TAG_ID.TR, TAG_ID.TEMPLATE, TAG_ID.HTML];
	const TABLE_BODY_CONTEXT = [TAG_ID.TBODY, TAG_ID.TFOOT, TAG_ID.THEAD, TAG_ID.TEMPLATE, TAG_ID.HTML];
	const TABLE_CONTEXT = [TAG_ID.TABLE, TAG_ID.TEMPLATE, TAG_ID.HTML];
	const TABLE_CELLS = [TAG_ID.TD, TAG_ID.TH];
	//Stack of open elements
	class OpenElementStack {
	    get currentTmplContentOrNode() {
	        return this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : this.current;
	    }
	    constructor(document, treeAdapter, handler) {
	        this.treeAdapter = treeAdapter;
	        this.handler = handler;
	        this.items = [];
	        this.tagIDs = [];
	        this.stackTop = -1;
	        this.tmplCount = 0;
	        this.currentTagId = TAG_ID.UNKNOWN;
	        this.current = document;
	    }
	    //Index of element
	    _indexOf(element) {
	        return this.items.lastIndexOf(element, this.stackTop);
	    }
	    //Update current element
	    _isInTemplate() {
	        return this.currentTagId === TAG_ID.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;
	    }
	    _updateCurrentElement() {
	        this.current = this.items[this.stackTop];
	        this.currentTagId = this.tagIDs[this.stackTop];
	    }
	    //Mutations
	    push(element, tagID) {
	        this.stackTop++;
	        this.items[this.stackTop] = element;
	        this.current = element;
	        this.tagIDs[this.stackTop] = tagID;
	        this.currentTagId = tagID;
	        if (this._isInTemplate()) {
	            this.tmplCount++;
	        }
	        this.handler.onItemPush(element, tagID, true);
	    }
	    pop() {
	        const popped = this.current;
	        if (this.tmplCount > 0 && this._isInTemplate()) {
	            this.tmplCount--;
	        }
	        this.stackTop--;
	        this._updateCurrentElement();
	        this.handler.onItemPop(popped, true);
	    }
	    replace(oldElement, newElement) {
	        const idx = this._indexOf(oldElement);
	        this.items[idx] = newElement;
	        if (idx === this.stackTop) {
	            this.current = newElement;
	        }
	    }
	    insertAfter(referenceElement, newElement, newElementID) {
	        const insertionIdx = this._indexOf(referenceElement) + 1;
	        this.items.splice(insertionIdx, 0, newElement);
	        this.tagIDs.splice(insertionIdx, 0, newElementID);
	        this.stackTop++;
	        if (insertionIdx === this.stackTop) {
	            this._updateCurrentElement();
	        }
	        this.handler.onItemPush(this.current, this.currentTagId, insertionIdx === this.stackTop);
	    }
	    popUntilTagNamePopped(tagName) {
	        let targetIdx = this.stackTop + 1;
	        do {
	            targetIdx = this.tagIDs.lastIndexOf(tagName, targetIdx - 1);
	        } while (targetIdx > 0 && this.treeAdapter.getNamespaceURI(this.items[targetIdx]) !== NS.HTML);
	        this.shortenToLength(targetIdx < 0 ? 0 : targetIdx);
	    }
	    shortenToLength(idx) {
	        while (this.stackTop >= idx) {
	            const popped = this.current;
	            if (this.tmplCount > 0 && this._isInTemplate()) {
	                this.tmplCount -= 1;
	            }
	            this.stackTop--;
	            this._updateCurrentElement();
	            this.handler.onItemPop(popped, this.stackTop < idx);
	        }
	    }
	    popUntilElementPopped(element) {
	        const idx = this._indexOf(element);
	        this.shortenToLength(idx < 0 ? 0 : idx);
	    }
	    popUntilPopped(tagNames, targetNS) {
	        const idx = this._indexOfTagNames(tagNames, targetNS);
	        this.shortenToLength(idx < 0 ? 0 : idx);
	    }
	    popUntilNumberedHeaderPopped() {
	        this.popUntilPopped(NAMED_HEADERS, NS.HTML);
	    }
	    popUntilTableCellPopped() {
	        this.popUntilPopped(TABLE_CELLS, NS.HTML);
	    }
	    popAllUpToHtmlElement() {
	        //NOTE: here we assume that the root <html> element is always first in the open element stack, so
	        //we perform this fast stack clean up.
	        this.tmplCount = 0;
	        this.shortenToLength(1);
	    }
	    _indexOfTagNames(tagNames, namespace) {
	        for (let i = this.stackTop; i >= 0; i--) {
	            if (tagNames.includes(this.tagIDs[i]) && this.treeAdapter.getNamespaceURI(this.items[i]) === namespace) {
	                return i;
	            }
	        }
	        return -1;
	    }
	    clearBackTo(tagNames, targetNS) {
	        const idx = this._indexOfTagNames(tagNames, targetNS);
	        this.shortenToLength(idx + 1);
	    }
	    clearBackToTableContext() {
	        this.clearBackTo(TABLE_CONTEXT, NS.HTML);
	    }
	    clearBackToTableBodyContext() {
	        this.clearBackTo(TABLE_BODY_CONTEXT, NS.HTML);
	    }
	    clearBackToTableRowContext() {
	        this.clearBackTo(TABLE_ROW_CONTEXT, NS.HTML);
	    }
	    remove(element) {
	        const idx = this._indexOf(element);
	        if (idx >= 0) {
	            if (idx === this.stackTop) {
	                this.pop();
	            }
	            else {
	                this.items.splice(idx, 1);
	                this.tagIDs.splice(idx, 1);
	                this.stackTop--;
	                this._updateCurrentElement();
	                this.handler.onItemPop(element, false);
	            }
	        }
	    }
	    //Search
	    tryPeekProperlyNestedBodyElement() {
	        //Properly nested <body> element (should be second element in stack).
	        return this.stackTop >= 1 && this.tagIDs[1] === TAG_ID.BODY ? this.items[1] : null;
	    }
	    contains(element) {
	        return this._indexOf(element) > -1;
	    }
	    getCommonAncestor(element) {
	        const elementIdx = this._indexOf(element) - 1;
	        return elementIdx >= 0 ? this.items[elementIdx] : null;
	    }
	    isRootHtmlElementCurrent() {
	        return this.stackTop === 0 && this.tagIDs[0] === TAG_ID.HTML;
	    }
	    //Element in scope
	    hasInScope(tagName) {
	        for (let i = this.stackTop; i >= 0; i--) {
	            const tn = this.tagIDs[i];
	            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
	            if (tn === tagName && ns === NS.HTML) {
	                return true;
	            }
	            if (SCOPING_ELEMENT_NS.get(tn) === ns) {
	                return false;
	            }
	        }
	        return true;
	    }
	    hasNumberedHeaderInScope() {
	        for (let i = this.stackTop; i >= 0; i--) {
	            const tn = this.tagIDs[i];
	            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
	            if (isNumberedHeader(tn) && ns === NS.HTML) {
	                return true;
	            }
	            if (SCOPING_ELEMENT_NS.get(tn) === ns) {
	                return false;
	            }
	        }
	        return true;
	    }
	    hasInListItemScope(tagName) {
	        for (let i = this.stackTop; i >= 0; i--) {
	            const tn = this.tagIDs[i];
	            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
	            if (tn === tagName && ns === NS.HTML) {
	                return true;
	            }
	            if (((tn === TAG_ID.UL || tn === TAG_ID.OL) && ns === NS.HTML) || SCOPING_ELEMENT_NS.get(tn) === ns) {
	                return false;
	            }
	        }
	        return true;
	    }
	    hasInButtonScope(tagName) {
	        for (let i = this.stackTop; i >= 0; i--) {
	            const tn = this.tagIDs[i];
	            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
	            if (tn === tagName && ns === NS.HTML) {
	                return true;
	            }
	            if ((tn === TAG_ID.BUTTON && ns === NS.HTML) || SCOPING_ELEMENT_NS.get(tn) === ns) {
	                return false;
	            }
	        }
	        return true;
	    }
	    hasInTableScope(tagName) {
	        for (let i = this.stackTop; i >= 0; i--) {
	            const tn = this.tagIDs[i];
	            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
	            if (ns !== NS.HTML) {
	                continue;
	            }
	            if (tn === tagName) {
	                return true;
	            }
	            if (tn === TAG_ID.TABLE || tn === TAG_ID.TEMPLATE || tn === TAG_ID.HTML) {
	                return false;
	            }
	        }
	        return true;
	    }
	    hasTableBodyContextInTableScope() {
	        for (let i = this.stackTop; i >= 0; i--) {
	            const tn = this.tagIDs[i];
	            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
	            if (ns !== NS.HTML) {
	                continue;
	            }
	            if (tn === TAG_ID.TBODY || tn === TAG_ID.THEAD || tn === TAG_ID.TFOOT) {
	                return true;
	            }
	            if (tn === TAG_ID.TABLE || tn === TAG_ID.HTML) {
	                return false;
	            }
	        }
	        return true;
	    }
	    hasInSelectScope(tagName) {
	        for (let i = this.stackTop; i >= 0; i--) {
	            const tn = this.tagIDs[i];
	            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
	            if (ns !== NS.HTML) {
	                continue;
	            }
	            if (tn === tagName) {
	                return true;
	            }
	            if (tn !== TAG_ID.OPTION && tn !== TAG_ID.OPTGROUP) {
	                return false;
	            }
	        }
	        return true;
	    }
	    //Implied end tags
	    generateImpliedEndTags() {
	        while (IMPLICIT_END_TAG_REQUIRED.has(this.currentTagId)) {
	            this.pop();
	        }
	    }
	    generateImpliedEndTagsThoroughly() {
	        while (IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {
	            this.pop();
	        }
	    }
	    generateImpliedEndTagsWithExclusion(exclusionId) {
	        while (this.currentTagId !== exclusionId && IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {
	            this.pop();
	        }
	    }
	}

	//Const
	const NOAH_ARK_CAPACITY = 3;
	var EntryType;
	(function (EntryType) {
	    EntryType[EntryType["Marker"] = 0] = "Marker";
	    EntryType[EntryType["Element"] = 1] = "Element";
	})(EntryType = EntryType || (EntryType = {}));
	const MARKER = { type: EntryType.Marker };
	//List of formatting elements
	class FormattingElementList {
	    constructor(treeAdapter) {
	        this.treeAdapter = treeAdapter;
	        this.entries = [];
	        this.bookmark = null;
	    }
	    //Noah Ark's condition
	    //OPTIMIZATION: at first we try to find possible candidates for exclusion using
	    //lightweight heuristics without thorough attributes check.
	    _getNoahArkConditionCandidates(newElement, neAttrs) {
	        const candidates = [];
	        const neAttrsLength = neAttrs.length;
	        const neTagName = this.treeAdapter.getTagName(newElement);
	        const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);
	        for (let i = 0; i < this.entries.length; i++) {
	            const entry = this.entries[i];
	            if (entry.type === EntryType.Marker) {
	                break;
	            }
	            const { element } = entry;
	            if (this.treeAdapter.getTagName(element) === neTagName &&
	                this.treeAdapter.getNamespaceURI(element) === neNamespaceURI) {
	                const elementAttrs = this.treeAdapter.getAttrList(element);
	                if (elementAttrs.length === neAttrsLength) {
	                    candidates.push({ idx: i, attrs: elementAttrs });
	                }
	            }
	        }
	        return candidates;
	    }
	    _ensureNoahArkCondition(newElement) {
	        if (this.entries.length < NOAH_ARK_CAPACITY)
	            return;
	        const neAttrs = this.treeAdapter.getAttrList(newElement);
	        const candidates = this._getNoahArkConditionCandidates(newElement, neAttrs);
	        if (candidates.length < NOAH_ARK_CAPACITY)
	            return;
	        //NOTE: build attrs map for the new element, so we can perform fast lookups
	        const neAttrsMap = new Map(neAttrs.map((neAttr) => [neAttr.name, neAttr.value]));
	        let validCandidates = 0;
	        //NOTE: remove bottommost candidates, until Noah's Ark condition will not be met
	        for (let i = 0; i < candidates.length; i++) {
	            const candidate = candidates[i];
	            // We know that `candidate.attrs.length === neAttrs.length`
	            if (candidate.attrs.every((cAttr) => neAttrsMap.get(cAttr.name) === cAttr.value)) {
	                validCandidates += 1;
	                if (validCandidates >= NOAH_ARK_CAPACITY) {
	                    this.entries.splice(candidate.idx, 1);
	                }
	            }
	        }
	    }
	    //Mutations
	    insertMarker() {
	        this.entries.unshift(MARKER);
	    }
	    pushElement(element, token) {
	        this._ensureNoahArkCondition(element);
	        this.entries.unshift({
	            type: EntryType.Element,
	            element,
	            token,
	        });
	    }
	    insertElementAfterBookmark(element, token) {
	        const bookmarkIdx = this.entries.indexOf(this.bookmark);
	        this.entries.splice(bookmarkIdx, 0, {
	            type: EntryType.Element,
	            element,
	            token,
	        });
	    }
	    removeEntry(entry) {
	        const entryIndex = this.entries.indexOf(entry);
	        if (entryIndex >= 0) {
	            this.entries.splice(entryIndex, 1);
	        }
	    }
	    /**
	     * Clears the list of formatting elements up to the last marker.
	     *
	     * @see https://html.spec.whatwg.org/multipage/parsing.html#clear-the-list-of-active-formatting-elements-up-to-the-last-marker
	     */
	    clearToLastMarker() {
	        const markerIdx = this.entries.indexOf(MARKER);
	        if (markerIdx >= 0) {
	            this.entries.splice(0, markerIdx + 1);
	        }
	        else {
	            this.entries.length = 0;
	        }
	    }
	    //Search
	    getElementEntryInScopeWithTagName(tagName) {
	        const entry = this.entries.find((entry) => entry.type === EntryType.Marker || this.treeAdapter.getTagName(entry.element) === tagName);
	        return entry && entry.type === EntryType.Element ? entry : null;
	    }
	    getElementEntry(element) {
	        return this.entries.find((entry) => entry.type === EntryType.Element && entry.element === element);
	    }
	}

	function createTextNode(value) {
	    return {
	        nodeName: '#text',
	        value,
	        parentNode: null,
	    };
	}
	const defaultTreeAdapter = {
	    //Node construction
	    createDocument() {
	        return {
	            nodeName: '#document',
	            mode: DOCUMENT_MODE.NO_QUIRKS,
	            childNodes: [],
	        };
	    },
	    createDocumentFragment() {
	        return {
	            nodeName: '#document-fragment',
	            childNodes: [],
	        };
	    },
	    createElement(tagName, namespaceURI, attrs) {
	        return {
	            nodeName: tagName,
	            tagName,
	            attrs,
	            namespaceURI,
	            childNodes: [],
	            parentNode: null,
	        };
	    },
	    createCommentNode(data) {
	        return {
	            nodeName: '#comment',
	            data,
	            parentNode: null,
	        };
	    },
	    //Tree mutation
	    appendChild(parentNode, newNode) {
	        parentNode.childNodes.push(newNode);
	        newNode.parentNode = parentNode;
	    },
	    insertBefore(parentNode, newNode, referenceNode) {
	        const insertionIdx = parentNode.childNodes.indexOf(referenceNode);
	        parentNode.childNodes.splice(insertionIdx, 0, newNode);
	        newNode.parentNode = parentNode;
	    },
	    setTemplateContent(templateElement, contentElement) {
	        templateElement.content = contentElement;
	    },
	    getTemplateContent(templateElement) {
	        return templateElement.content;
	    },
	    setDocumentType(document, name, publicId, systemId) {
	        const doctypeNode = document.childNodes.find((node) => node.nodeName === '#documentType');
	        if (doctypeNode) {
	            doctypeNode.name = name;
	            doctypeNode.publicId = publicId;
	            doctypeNode.systemId = systemId;
	        }
	        else {
	            const node = {
	                nodeName: '#documentType',
	                name,
	                publicId,
	                systemId,
	                parentNode: null,
	            };
	            defaultTreeAdapter.appendChild(document, node);
	        }
	    },
	    setDocumentMode(document, mode) {
	        document.mode = mode;
	    },
	    getDocumentMode(document) {
	        return document.mode;
	    },
	    detachNode(node) {
	        if (node.parentNode) {
	            const idx = node.parentNode.childNodes.indexOf(node);
	            node.parentNode.childNodes.splice(idx, 1);
	            node.parentNode = null;
	        }
	    },
	    insertText(parentNode, text) {
	        if (parentNode.childNodes.length > 0) {
	            const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];
	            if (defaultTreeAdapter.isTextNode(prevNode)) {
	                prevNode.value += text;
	                return;
	            }
	        }
	        defaultTreeAdapter.appendChild(parentNode, createTextNode(text));
	    },
	    insertTextBefore(parentNode, text, referenceNode) {
	        const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];
	        if (prevNode && defaultTreeAdapter.isTextNode(prevNode)) {
	            prevNode.value += text;
	        }
	        else {
	            defaultTreeAdapter.insertBefore(parentNode, createTextNode(text), referenceNode);
	        }
	    },
	    adoptAttributes(recipient, attrs) {
	        const recipientAttrsMap = new Set(recipient.attrs.map((attr) => attr.name));
	        for (let j = 0; j < attrs.length; j++) {
	            if (!recipientAttrsMap.has(attrs[j].name)) {
	                recipient.attrs.push(attrs[j]);
	            }
	        }
	    },
	    //Tree traversing
	    getFirstChild(node) {
	        return node.childNodes[0];
	    },
	    getChildNodes(node) {
	        return node.childNodes;
	    },
	    getParentNode(node) {
	        return node.parentNode;
	    },
	    getAttrList(element) {
	        return element.attrs;
	    },
	    //Node data
	    getTagName(element) {
	        return element.tagName;
	    },
	    getNamespaceURI(element) {
	        return element.namespaceURI;
	    },
	    getTextNodeContent(textNode) {
	        return textNode.value;
	    },
	    getCommentNodeContent(commentNode) {
	        return commentNode.data;
	    },
	    getDocumentTypeNodeName(doctypeNode) {
	        return doctypeNode.name;
	    },
	    getDocumentTypeNodePublicId(doctypeNode) {
	        return doctypeNode.publicId;
	    },
	    getDocumentTypeNodeSystemId(doctypeNode) {
	        return doctypeNode.systemId;
	    },
	    //Node types
	    isTextNode(node) {
	        return node.nodeName === '#text';
	    },
	    isCommentNode(node) {
	        return node.nodeName === '#comment';
	    },
	    isDocumentTypeNode(node) {
	        return node.nodeName === '#documentType';
	    },
	    isElementNode(node) {
	        return Object.prototype.hasOwnProperty.call(node, 'tagName');
	    },
	    // Source code location
	    setNodeSourceCodeLocation(node, location) {
	        node.sourceCodeLocation = location;
	    },
	    getNodeSourceCodeLocation(node) {
	        return node.sourceCodeLocation;
	    },
	    updateNodeSourceCodeLocation(node, endLocation) {
	        node.sourceCodeLocation = { ...node.sourceCodeLocation, ...endLocation };
	    },
	};

	//Const
	const VALID_DOCTYPE_NAME = 'html';
	const VALID_SYSTEM_ID = 'about:legacy-compat';
	const QUIRKS_MODE_SYSTEM_ID = 'http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd';
	const QUIRKS_MODE_PUBLIC_ID_PREFIXES = [
	    '+//silmaril//dtd html pro v0r11 19970101//',
	    '-//as//dtd html 3.0 aswedit + extensions//',
	    '-//advasoft ltd//dtd html 3.0 aswedit + extensions//',
	    '-//ietf//dtd html 2.0 level 1//',
	    '-//ietf//dtd html 2.0 level 2//',
	    '-//ietf//dtd html 2.0 strict level 1//',
	    '-//ietf//dtd html 2.0 strict level 2//',
	    '-//ietf//dtd html 2.0 strict//',
	    '-//ietf//dtd html 2.0//',
	    '-//ietf//dtd html 2.1e//',
	    '-//ietf//dtd html 3.0//',
	    '-//ietf//dtd html 3.2 final//',
	    '-//ietf//dtd html 3.2//',
	    '-//ietf//dtd html 3//',
	    '-//ietf//dtd html level 0//',
	    '-//ietf//dtd html level 1//',
	    '-//ietf//dtd html level 2//',
	    '-//ietf//dtd html level 3//',
	    '-//ietf//dtd html strict level 0//',
	    '-//ietf//dtd html strict level 1//',
	    '-//ietf//dtd html strict level 2//',
	    '-//ietf//dtd html strict level 3//',
	    '-//ietf//dtd html strict//',
	    '-//ietf//dtd html//',
	    '-//metrius//dtd metrius presentational//',
	    '-//microsoft//dtd internet explorer 2.0 html strict//',
	    '-//microsoft//dtd internet explorer 2.0 html//',
	    '-//microsoft//dtd internet explorer 2.0 tables//',
	    '-//microsoft//dtd internet explorer 3.0 html strict//',
	    '-//microsoft//dtd internet explorer 3.0 html//',
	    '-//microsoft//dtd internet explorer 3.0 tables//',
	    '-//netscape comm. corp.//dtd html//',
	    '-//netscape comm. corp.//dtd strict html//',
	    "-//o'reilly and associates//dtd html 2.0//",
	    "-//o'reilly and associates//dtd html extended 1.0//",
	    "-//o'reilly and associates//dtd html extended relaxed 1.0//",
	    '-//sq//dtd html 2.0 hotmetal + extensions//',
	    '-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//',
	    '-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//',
	    '-//spyglass//dtd html 2.0 extended//',
	    '-//sun microsystems corp.//dtd hotjava html//',
	    '-//sun microsystems corp.//dtd hotjava strict html//',
	    '-//w3c//dtd html 3 1995-03-24//',
	    '-//w3c//dtd html 3.2 draft//',
	    '-//w3c//dtd html 3.2 final//',
	    '-//w3c//dtd html 3.2//',
	    '-//w3c//dtd html 3.2s draft//',
	    '-//w3c//dtd html 4.0 frameset//',
	    '-//w3c//dtd html 4.0 transitional//',
	    '-//w3c//dtd html experimental 19960712//',
	    '-//w3c//dtd html experimental 970421//',
	    '-//w3c//dtd w3 html//',
	    '-//w3o//dtd w3 html 3.0//',
	    '-//webtechs//dtd mozilla html 2.0//',
	    '-//webtechs//dtd mozilla html//',
	];
	const QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = [
	    ...QUIRKS_MODE_PUBLIC_ID_PREFIXES,
	    '-//w3c//dtd html 4.01 frameset//',
	    '-//w3c//dtd html 4.01 transitional//',
	];
	const QUIRKS_MODE_PUBLIC_IDS = new Set([
	    '-//w3o//dtd w3 html strict 3.0//en//',
	    '-/w3c/dtd html 4.0 transitional/en',
	    'html',
	]);
	const LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = ['-//w3c//dtd xhtml 1.0 frameset//', '-//w3c//dtd xhtml 1.0 transitional//'];
	const LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = [
	    ...LIMITED_QUIRKS_PUBLIC_ID_PREFIXES,
	    '-//w3c//dtd html 4.01 frameset//',
	    '-//w3c//dtd html 4.01 transitional//',
	];
	//Utils
	function hasPrefix(publicId, prefixes) {
	    return prefixes.some((prefix) => publicId.startsWith(prefix));
	}
	//API
	function isConforming(token) {
	    return (token.name === VALID_DOCTYPE_NAME &&
	        token.publicId === null &&
	        (token.systemId === null || token.systemId === VALID_SYSTEM_ID));
	}
	function getDocumentMode(token) {
	    if (token.name !== VALID_DOCTYPE_NAME) {
	        return DOCUMENT_MODE.QUIRKS;
	    }
	    const { systemId } = token;
	    if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) {
	        return DOCUMENT_MODE.QUIRKS;
	    }
	    let { publicId } = token;
	    if (publicId !== null) {
	        publicId = publicId.toLowerCase();
	        if (QUIRKS_MODE_PUBLIC_IDS.has(publicId)) {
	            return DOCUMENT_MODE.QUIRKS;
	        }
	        let prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES : QUIRKS_MODE_PUBLIC_ID_PREFIXES;
	        if (hasPrefix(publicId, prefixes)) {
	            return DOCUMENT_MODE.QUIRKS;
	        }
	        prefixes =
	            systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;
	        if (hasPrefix(publicId, prefixes)) {
	            return DOCUMENT_MODE.LIMITED_QUIRKS;
	        }
	    }
	    return DOCUMENT_MODE.NO_QUIRKS;
	}

	//MIME types
	const MIME_TYPES = {
	    TEXT_HTML: 'text/html',
	    APPLICATION_XML: 'application/xhtml+xml',
	};
	//Attributes
	const DEFINITION_URL_ATTR = 'definitionurl';
	const ADJUSTED_DEFINITION_URL_ATTR = 'definitionURL';
	const SVG_ATTRS_ADJUSTMENT_MAP = new Map([
	    'attributeName',
	    'attributeType',
	    'baseFrequency',
	    'baseProfile',
	    'calcMode',
	    'clipPathUnits',
	    'diffuseConstant',
	    'edgeMode',
	    'filterUnits',
	    'glyphRef',
	    'gradientTransform',
	    'gradientUnits',
	    'kernelMatrix',
	    'kernelUnitLength',
	    'keyPoints',
	    'keySplines',
	    'keyTimes',
	    'lengthAdjust',
	    'limitingConeAngle',
	    'markerHeight',
	    'markerUnits',
	    'markerWidth',
	    'maskContentUnits',
	    'maskUnits',
	    'numOctaves',
	    'pathLength',
	    'patternContentUnits',
	    'patternTransform',
	    'patternUnits',
	    'pointsAtX',
	    'pointsAtY',
	    'pointsAtZ',
	    'preserveAlpha',
	    'preserveAspectRatio',
	    'primitiveUnits',
	    'refX',
	    'refY',
	    'repeatCount',
	    'repeatDur',
	    'requiredExtensions',
	    'requiredFeatures',
	    'specularConstant',
	    'specularExponent',
	    'spreadMethod',
	    'startOffset',
	    'stdDeviation',
	    'stitchTiles',
	    'surfaceScale',
	    'systemLanguage',
	    'tableValues',
	    'targetX',
	    'targetY',
	    'textLength',
	    'viewBox',
	    'viewTarget',
	    'xChannelSelector',
	    'yChannelSelector',
	    'zoomAndPan',
	].map((attr) => [attr.toLowerCase(), attr]));
	const XML_ATTRS_ADJUSTMENT_MAP = new Map([
	    ['xlink:actuate', { prefix: 'xlink', name: 'actuate', namespace: NS.XLINK }],
	    ['xlink:arcrole', { prefix: 'xlink', name: 'arcrole', namespace: NS.XLINK }],
	    ['xlink:href', { prefix: 'xlink', name: 'href', namespace: NS.XLINK }],
	    ['xlink:role', { prefix: 'xlink', name: 'role', namespace: NS.XLINK }],
	    ['xlink:show', { prefix: 'xlink', name: 'show', namespace: NS.XLINK }],
	    ['xlink:title', { prefix: 'xlink', name: 'title', namespace: NS.XLINK }],
	    ['xlink:type', { prefix: 'xlink', name: 'type', namespace: NS.XLINK }],
	    ['xml:base', { prefix: 'xml', name: 'base', namespace: NS.XML }],
	    ['xml:lang', { prefix: 'xml', name: 'lang', namespace: NS.XML }],
	    ['xml:space', { prefix: 'xml', name: 'space', namespace: NS.XML }],
	    ['xmlns', { prefix: '', name: 'xmlns', namespace: NS.XMLNS }],
	    ['xmlns:xlink', { prefix: 'xmlns', name: 'xlink', namespace: NS.XMLNS }],
	]);
	//SVG tag names adjustment map
	const SVG_TAG_NAMES_ADJUSTMENT_MAP = new Map([
	    'altGlyph',
	    'altGlyphDef',
	    'altGlyphItem',
	    'animateColor',
	    'animateMotion',
	    'animateTransform',
	    'clipPath',
	    'feBlend',
	    'feColorMatrix',
	    'feComponentTransfer',
	    'feComposite',
	    'feConvolveMatrix',
	    'feDiffuseLighting',
	    'feDisplacementMap',
	    'feDistantLight',
	    'feFlood',
	    'feFuncA',
	    'feFuncB',
	    'feFuncG',
	    'feFuncR',
	    'feGaussianBlur',
	    'feImage',
	    'feMerge',
	    'feMergeNode',
	    'feMorphology',
	    'feOffset',
	    'fePointLight',
	    'feSpecularLighting',
	    'feSpotLight',
	    'feTile',
	    'feTurbulence',
	    'foreignObject',
	    'glyphRef',
	    'linearGradient',
	    'radialGradient',
	    'textPath',
	].map((tn) => [tn.toLowerCase(), tn]));
	//Tags that causes exit from foreign content
	const EXITS_FOREIGN_CONTENT = new Set([
	    TAG_ID.B,
	    TAG_ID.BIG,
	    TAG_ID.BLOCKQUOTE,
	    TAG_ID.BODY,
	    TAG_ID.BR,
	    TAG_ID.CENTER,
	    TAG_ID.CODE,
	    TAG_ID.DD,
	    TAG_ID.DIV,
	    TAG_ID.DL,
	    TAG_ID.DT,
	    TAG_ID.EM,
	    TAG_ID.EMBED,
	    TAG_ID.H1,
	    TAG_ID.H2,
	    TAG_ID.H3,
	    TAG_ID.H4,
	    TAG_ID.H5,
	    TAG_ID.H6,
	    TAG_ID.HEAD,
	    TAG_ID.HR,
	    TAG_ID.I,
	    TAG_ID.IMG,
	    TAG_ID.LI,
	    TAG_ID.LISTING,
	    TAG_ID.MENU,
	    TAG_ID.META,
	    TAG_ID.NOBR,
	    TAG_ID.OL,
	    TAG_ID.P,
	    TAG_ID.PRE,
	    TAG_ID.RUBY,
	    TAG_ID.S,
	    TAG_ID.SMALL,
	    TAG_ID.SPAN,
	    TAG_ID.STRONG,
	    TAG_ID.STRIKE,
	    TAG_ID.SUB,
	    TAG_ID.SUP,
	    TAG_ID.TABLE,
	    TAG_ID.TT,
	    TAG_ID.U,
	    TAG_ID.UL,
	    TAG_ID.VAR,
	]);
	//Check exit from foreign content
	function causesExit(startTagToken) {
	    const tn = startTagToken.tagID;
	    const isFontWithAttrs = tn === TAG_ID.FONT &&
	        startTagToken.attrs.some(({ name }) => name === ATTRS.COLOR || name === ATTRS.SIZE || name === ATTRS.FACE);
	    return isFontWithAttrs || EXITS_FOREIGN_CONTENT.has(tn);
	}
	//Token adjustments
	function adjustTokenMathMLAttrs(token) {
	    for (let i = 0; i < token.attrs.length; i++) {
	        if (token.attrs[i].name === DEFINITION_URL_ATTR) {
	            token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;
	            break;
	        }
	    }
	}
	function adjustTokenSVGAttrs(token) {
	    for (let i = 0; i < token.attrs.length; i++) {
	        const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);
	        if (adjustedAttrName != null) {
	            token.attrs[i].name = adjustedAttrName;
	        }
	    }
	}
	function adjustTokenXMLAttrs(token) {
	    for (let i = 0; i < token.attrs.length; i++) {
	        const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);
	        if (adjustedAttrEntry) {
	            token.attrs[i].prefix = adjustedAttrEntry.prefix;
	            token.attrs[i].name = adjustedAttrEntry.name;
	            token.attrs[i].namespace = adjustedAttrEntry.namespace;
	        }
	    }
	}
	function adjustTokenSVGTagName(token) {
	    const adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP.get(token.tagName);
	    if (adjustedTagName != null) {
	        token.tagName = adjustedTagName;
	        token.tagID = getTagID(token.tagName);
	    }
	}
	//Integration points
	function isMathMLTextIntegrationPoint(tn, ns) {
	    return ns === NS.MATHML && (tn === TAG_ID.MI || tn === TAG_ID.MO || tn === TAG_ID.MN || tn === TAG_ID.MS || tn === TAG_ID.MTEXT);
	}
	function isHtmlIntegrationPoint(tn, ns, attrs) {
	    if (ns === NS.MATHML && tn === TAG_ID.ANNOTATION_XML) {
	        for (let i = 0; i < attrs.length; i++) {
	            if (attrs[i].name === ATTRS.ENCODING) {
	                const value = attrs[i].value.toLowerCase();
	                return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;
	            }
	        }
	    }
	    return ns === NS.SVG && (tn === TAG_ID.FOREIGN_OBJECT || tn === TAG_ID.DESC || tn === TAG_ID.TITLE);
	}
	function isIntegrationPoint(tn, ns, attrs, foreignNS) {
	    return (((!foreignNS || foreignNS === NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs)) ||
	        ((!foreignNS || foreignNS === NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns)));
	}

	//Misc constants
	const HIDDEN_INPUT_TYPE = 'hidden';
	//Adoption agency loops iteration count
	const AA_OUTER_LOOP_ITER = 8;
	const AA_INNER_LOOP_ITER = 3;
	//Insertion modes
	var InsertionMode;
	(function (InsertionMode) {
	    InsertionMode[InsertionMode["INITIAL"] = 0] = "INITIAL";
	    InsertionMode[InsertionMode["BEFORE_HTML"] = 1] = "BEFORE_HTML";
	    InsertionMode[InsertionMode["BEFORE_HEAD"] = 2] = "BEFORE_HEAD";
	    InsertionMode[InsertionMode["IN_HEAD"] = 3] = "IN_HEAD";
	    InsertionMode[InsertionMode["IN_HEAD_NO_SCRIPT"] = 4] = "IN_HEAD_NO_SCRIPT";
	    InsertionMode[InsertionMode["AFTER_HEAD"] = 5] = "AFTER_HEAD";
	    InsertionMode[InsertionMode["IN_BODY"] = 6] = "IN_BODY";
	    InsertionMode[InsertionMode["TEXT"] = 7] = "TEXT";
	    InsertionMode[InsertionMode["IN_TABLE"] = 8] = "IN_TABLE";
	    InsertionMode[InsertionMode["IN_TABLE_TEXT"] = 9] = "IN_TABLE_TEXT";
	    InsertionMode[InsertionMode["IN_CAPTION"] = 10] = "IN_CAPTION";
	    InsertionMode[InsertionMode["IN_COLUMN_GROUP"] = 11] = "IN_COLUMN_GROUP";
	    InsertionMode[InsertionMode["IN_TABLE_BODY"] = 12] = "IN_TABLE_BODY";
	    InsertionMode[InsertionMode["IN_ROW"] = 13] = "IN_ROW";
	    InsertionMode[InsertionMode["IN_CELL"] = 14] = "IN_CELL";
	    InsertionMode[InsertionMode["IN_SELECT"] = 15] = "IN_SELECT";
	    InsertionMode[InsertionMode["IN_SELECT_IN_TABLE"] = 16] = "IN_SELECT_IN_TABLE";
	    InsertionMode[InsertionMode["IN_TEMPLATE"] = 17] = "IN_TEMPLATE";
	    InsertionMode[InsertionMode["AFTER_BODY"] = 18] = "AFTER_BODY";
	    InsertionMode[InsertionMode["IN_FRAMESET"] = 19] = "IN_FRAMESET";
	    InsertionMode[InsertionMode["AFTER_FRAMESET"] = 20] = "AFTER_FRAMESET";
	    InsertionMode[InsertionMode["AFTER_AFTER_BODY"] = 21] = "AFTER_AFTER_BODY";
	    InsertionMode[InsertionMode["AFTER_AFTER_FRAMESET"] = 22] = "AFTER_AFTER_FRAMESET";
	})(InsertionMode || (InsertionMode = {}));
	const BASE_LOC = {
	    startLine: -1,
	    startCol: -1,
	    startOffset: -1,
	    endLine: -1,
	    endCol: -1,
	    endOffset: -1,
	};
	const TABLE_STRUCTURE_TAGS = new Set([TAG_ID.TABLE, TAG_ID.TBODY, TAG_ID.TFOOT, TAG_ID.THEAD, TAG_ID.TR]);
	const defaultParserOptions = {
	    scriptingEnabled: true,
	    sourceCodeLocationInfo: false,
	    treeAdapter: defaultTreeAdapter,
	    onParseError: null,
	};
	//Parser
	class Parser {
	    constructor(options, document, fragmentContext = null, scriptHandler = null) {
	        this.fragmentContext = fragmentContext;
	        this.scriptHandler = scriptHandler;
	        this.currentToken = null;
	        this.stopped = false;
	        this.insertionMode = InsertionMode.INITIAL;
	        this.originalInsertionMode = InsertionMode.INITIAL;
	        this.headElement = null;
	        this.formElement = null;
	        /** Indicates that the current node is not an element in the HTML namespace */
	        this.currentNotInHTML = false;
	        /**
	         * The template insertion mode stack is maintained from the left.
	         * Ie. the topmost element will always have index 0.
	         */
	        this.tmplInsertionModeStack = [];
	        this.pendingCharacterTokens = [];
	        this.hasNonWhitespacePendingCharacterToken = false;
	        this.framesetOk = true;
	        this.skipNextNewLine = false;
	        this.fosterParentingEnabled = false;
	        this.options = {
	            ...defaultParserOptions,
	            ...options,
	        };
	        this.treeAdapter = this.options.treeAdapter;
	        this.onParseError = this.options.onParseError;
	        // Always enable location info if we report parse errors.
	        if (this.onParseError) {
	            this.options.sourceCodeLocationInfo = true;
	        }
	        this.document = document !== null && document !== void 0 ? document : this.treeAdapter.createDocument();
	        this.tokenizer = new Tokenizer(this.options, this);
	        this.activeFormattingElements = new FormattingElementList(this.treeAdapter);
	        this.fragmentContextID = fragmentContext ? getTagID(this.treeAdapter.getTagName(fragmentContext)) : TAG_ID.UNKNOWN;
	        this._setContextModes(fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : this.document, this.fragmentContextID);
	        this.openElements = new OpenElementStack(this.document, this.treeAdapter, this);
	    }
	    // API
	    static parse(html, options) {
	        const parser = new this(options);
	        parser.tokenizer.write(html, true);
	        return parser.document;
	    }
	    static getFragmentParser(fragmentContext, options) {
	        const opts = {
	            ...defaultParserOptions,
	            ...options,
	        };
	        //NOTE: use a <template> element as the fragment context if no context element was provided,
	        //so we will parse in a "forgiving" manner
	        fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : (fragmentContext = opts.treeAdapter.createElement(TAG_NAMES.TEMPLATE, NS.HTML, []));
	        //NOTE: create a fake element which will be used as the `document` for fragment parsing.
	        //This is important for jsdom, where a new `document` cannot be created. This led to
	        //fragment parsing messing with the main `document`.
	        const documentMock = opts.treeAdapter.createElement('documentmock', NS.HTML, []);
	        const parser = new this(opts, documentMock, fragmentContext);
	        if (parser.fragmentContextID === TAG_ID.TEMPLATE) {
	            parser.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);
	        }
	        parser._initTokenizerForFragmentParsing();
	        parser._insertFakeRootElement();
	        parser._resetInsertionMode();
	        parser._findFormInFragmentContext();
	        return parser;
	    }
	    getFragment() {
	        const rootElement = this.treeAdapter.getFirstChild(this.document);
	        const fragment = this.treeAdapter.createDocumentFragment();
	        this._adoptNodes(rootElement, fragment);
	        return fragment;
	    }
	    //Errors
	    _err(token, code, beforeToken) {
	        var _a;
	        if (!this.onParseError)
	            return;
	        const loc = (_a = token.location) !== null && _a !== void 0 ? _a : BASE_LOC;
	        const err = {
	            code,
	            startLine: loc.startLine,
	            startCol: loc.startCol,
	            startOffset: loc.startOffset,
	            endLine: beforeToken ? loc.startLine : loc.endLine,
	            endCol: beforeToken ? loc.startCol : loc.endCol,
	            endOffset: beforeToken ? loc.startOffset : loc.endOffset,
	        };
	        this.onParseError(err);
	    }
	    //Stack events
	    onItemPush(node, tid, isTop) {
	        var _a, _b;
	        (_b = (_a = this.treeAdapter).onItemPush) === null || _b === void 0 ? void 0 : _b.call(_a, node);
	        if (isTop && this.openElements.stackTop > 0)
	            this._setContextModes(node, tid);
	    }
	    onItemPop(node, isTop) {
	        var _a, _b;
	        if (this.options.sourceCodeLocationInfo) {
	            this._setEndLocation(node, this.currentToken);
	        }
	        (_b = (_a = this.treeAdapter).onItemPop) === null || _b === void 0 ? void 0 : _b.call(_a, node, this.openElements.current);
	        if (isTop) {
	            let current;
	            let currentTagId;
	            if (this.openElements.stackTop === 0 && this.fragmentContext) {
	                current = this.fragmentContext;
	                currentTagId = this.fragmentContextID;
	            }
	            else {
	                ({ current, currentTagId } = this.openElements);
	            }
	            this._setContextModes(current, currentTagId);
	        }
	    }
	    _setContextModes(current, tid) {
	        const isHTML = current === this.document || this.treeAdapter.getNamespaceURI(current) === NS.HTML;
	        this.currentNotInHTML = !isHTML;
	        this.tokenizer.inForeignNode = !isHTML && !this._isIntegrationPoint(tid, current);
	    }
	    _switchToTextParsing(currentToken, nextTokenizerState) {
	        this._insertElement(currentToken, NS.HTML);
	        this.tokenizer.state = nextTokenizerState;
	        this.originalInsertionMode = this.insertionMode;
	        this.insertionMode = InsertionMode.TEXT;
	    }
	    switchToPlaintextParsing() {
	        this.insertionMode = InsertionMode.TEXT;
	        this.originalInsertionMode = InsertionMode.IN_BODY;
	        this.tokenizer.state = TokenizerMode.PLAINTEXT;
	    }
	    //Fragment parsing
	    _getAdjustedCurrentElement() {
	        return this.openElements.stackTop === 0 && this.fragmentContext
	            ? this.fragmentContext
	            : this.openElements.current;
	    }
	    _findFormInFragmentContext() {
	        let node = this.fragmentContext;
	        while (node) {
	            if (this.treeAdapter.getTagName(node) === TAG_NAMES.FORM) {
	                this.formElement = node;
	                break;
	            }
	            node = this.treeAdapter.getParentNode(node);
	        }
	    }
	    _initTokenizerForFragmentParsing() {
	        if (!this.fragmentContext || this.treeAdapter.getNamespaceURI(this.fragmentContext) !== NS.HTML) {
	            return;
	        }
	        switch (this.fragmentContextID) {
	            case TAG_ID.TITLE:
	            case TAG_ID.TEXTAREA: {
	                this.tokenizer.state = TokenizerMode.RCDATA;
	                break;
	            }
	            case TAG_ID.STYLE:
	            case TAG_ID.XMP:
	            case TAG_ID.IFRAME:
	            case TAG_ID.NOEMBED:
	            case TAG_ID.NOFRAMES:
	            case TAG_ID.NOSCRIPT: {
	                this.tokenizer.state = TokenizerMode.RAWTEXT;
	                break;
	            }
	            case TAG_ID.SCRIPT: {
	                this.tokenizer.state = TokenizerMode.SCRIPT_DATA;
	                break;
	            }
	            case TAG_ID.PLAINTEXT: {
	                this.tokenizer.state = TokenizerMode.PLAINTEXT;
	                break;
	            }
	            // Do nothing
	        }
	    }
	    //Tree mutation
	    _setDocumentType(token) {
	        const name = token.name || '';
	        const publicId = token.publicId || '';
	        const systemId = token.systemId || '';
	        this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);
	        if (token.location) {
	            const documentChildren = this.treeAdapter.getChildNodes(this.document);
	            const docTypeNode = documentChildren.find((node) => this.treeAdapter.isDocumentTypeNode(node));
	            if (docTypeNode) {
	                this.treeAdapter.setNodeSourceCodeLocation(docTypeNode, token.location);
	            }
	        }
	    }
	    _attachElementToTree(element, location) {
	        if (this.options.sourceCodeLocationInfo) {
	            const loc = location && {
	                ...location,
	                startTag: location,
	            };
	            this.treeAdapter.setNodeSourceCodeLocation(element, loc);
	        }
	        if (this._shouldFosterParentOnInsertion()) {
	            this._fosterParentElement(element);
	        }
	        else {
	            const parent = this.openElements.currentTmplContentOrNode;
	            this.treeAdapter.appendChild(parent, element);
	        }
	    }
	    _appendElement(token, namespaceURI) {
	        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
	        this._attachElementToTree(element, token.location);
	    }
	    _insertElement(token, namespaceURI) {
	        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
	        this._attachElementToTree(element, token.location);
	        this.openElements.push(element, token.tagID);
	    }
	    _insertFakeElement(tagName, tagID) {
	        const element = this.treeAdapter.createElement(tagName, NS.HTML, []);
	        this._attachElementToTree(element, null);
	        this.openElements.push(element, tagID);
	    }
	    _insertTemplate(token) {
	        const tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs);
	        const content = this.treeAdapter.createDocumentFragment();
	        this.treeAdapter.setTemplateContent(tmpl, content);
	        this._attachElementToTree(tmpl, token.location);
	        this.openElements.push(tmpl, token.tagID);
	        if (this.options.sourceCodeLocationInfo)
	            this.treeAdapter.setNodeSourceCodeLocation(content, null);
	    }
	    _insertFakeRootElement() {
	        const element = this.treeAdapter.createElement(TAG_NAMES.HTML, NS.HTML, []);
	        if (this.options.sourceCodeLocationInfo)
	            this.treeAdapter.setNodeSourceCodeLocation(element, null);
	        this.treeAdapter.appendChild(this.openElements.current, element);
	        this.openElements.push(element, TAG_ID.HTML);
	    }
	    _appendCommentNode(token, parent) {
	        const commentNode = this.treeAdapter.createCommentNode(token.data);
	        this.treeAdapter.appendChild(parent, commentNode);
	        if (this.options.sourceCodeLocationInfo) {
	            this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);
	        }
	    }
	    _insertCharacters(token) {
	        let parent;
	        let beforeElement;
	        if (this._shouldFosterParentOnInsertion()) {
	            ({ parent, beforeElement } = this._findFosterParentingLocation());
	            if (beforeElement) {
	                this.treeAdapter.insertTextBefore(parent, token.chars, beforeElement);
	            }
	            else {
	                this.treeAdapter.insertText(parent, token.chars);
	            }
	        }
	        else {
	            parent = this.openElements.currentTmplContentOrNode;
	            this.treeAdapter.insertText(parent, token.chars);
	        }
	        if (!token.location)
	            return;
	        const siblings = this.treeAdapter.getChildNodes(parent);
	        const textNodeIdx = beforeElement ? siblings.lastIndexOf(beforeElement) : siblings.length;
	        const textNode = siblings[textNodeIdx - 1];
	        //NOTE: if we have a location assigned by another token, then just update the end position
	        const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);
	        if (tnLoc) {
	            const { endLine, endCol, endOffset } = token.location;
	            this.treeAdapter.updateNodeSourceCodeLocation(textNode, { endLine, endCol, endOffset });
	        }
	        else if (this.options.sourceCodeLocationInfo) {
	            this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);
	        }
	    }
	    _adoptNodes(donor, recipient) {
	        for (let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {
	            this.treeAdapter.detachNode(child);
	            this.treeAdapter.appendChild(recipient, child);
	        }
	    }
	    _setEndLocation(element, closingToken) {
	        if (this.treeAdapter.getNodeSourceCodeLocation(element) && closingToken.location) {
	            const ctLoc = closingToken.location;
	            const tn = this.treeAdapter.getTagName(element);
	            const endLoc = 
	            // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing
	            // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.
	            closingToken.type === TokenType.END_TAG && tn === closingToken.tagName
	                ? {
	                    endTag: { ...ctLoc },
	                    endLine: ctLoc.endLine,
	                    endCol: ctLoc.endCol,
	                    endOffset: ctLoc.endOffset,
	                }
	                : {
	                    endLine: ctLoc.startLine,
	                    endCol: ctLoc.startCol,
	                    endOffset: ctLoc.startOffset,
	                };
	            this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);
	        }
	    }
	    //Token processing
	    shouldProcessStartTagTokenInForeignContent(token) {
	        // Check that neither current === document, or ns === NS.HTML
	        if (!this.currentNotInHTML)
	            return false;
	        let current;
	        let currentTagId;
	        if (this.openElements.stackTop === 0 && this.fragmentContext) {
	            current = this.fragmentContext;
	            currentTagId = this.fragmentContextID;
	        }
	        else {
	            ({ current, currentTagId } = this.openElements);
	        }
	        if (token.tagID === TAG_ID.SVG &&
	            this.treeAdapter.getTagName(current) === TAG_NAMES.ANNOTATION_XML &&
	            this.treeAdapter.getNamespaceURI(current) === NS.MATHML) {
	            return false;
	        }
	        return (
	        // Check that `current` is not an integration point for HTML or MathML elements.
	        this.tokenizer.inForeignNode ||
	            // If it _is_ an integration point, then we might have to check that it is not an HTML
	            // integration point.
	            ((token.tagID === TAG_ID.MGLYPH || token.tagID === TAG_ID.MALIGNMARK) &&
	                !this._isIntegrationPoint(currentTagId, current, NS.HTML)));
	    }
	    _processToken(token) {
	        switch (token.type) {
	            case TokenType.CHARACTER: {
	                this.onCharacter(token);
	                break;
	            }
	            case TokenType.NULL_CHARACTER: {
	                this.onNullCharacter(token);
	                break;
	            }
	            case TokenType.COMMENT: {
	                this.onComment(token);
	                break;
	            }
	            case TokenType.DOCTYPE: {
	                this.onDoctype(token);
	                break;
	            }
	            case TokenType.START_TAG: {
	                this._processStartTag(token);
	                break;
	            }
	            case TokenType.END_TAG: {
	                this.onEndTag(token);
	                break;
	            }
	            case TokenType.EOF: {
	                this.onEof(token);
	                break;
	            }
	            case TokenType.WHITESPACE_CHARACTER: {
	                this.onWhitespaceCharacter(token);
	                break;
	            }
	        }
	    }
	    //Integration points
	    _isIntegrationPoint(tid, element, foreignNS) {
	        const ns = this.treeAdapter.getNamespaceURI(element);
	        const attrs = this.treeAdapter.getAttrList(element);
	        return isIntegrationPoint(tid, ns, attrs, foreignNS);
	    }
	    //Active formatting elements reconstruction
	    _reconstructActiveFormattingElements() {
	        const listLength = this.activeFormattingElements.entries.length;
	        if (listLength) {
	            const endIndex = this.activeFormattingElements.entries.findIndex((entry) => entry.type === EntryType.Marker || this.openElements.contains(entry.element));
	            const unopenIdx = endIndex < 0 ? listLength - 1 : endIndex - 1;
	            for (let i = unopenIdx; i >= 0; i--) {
	                const entry = this.activeFormattingElements.entries[i];
	                this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));
	                entry.element = this.openElements.current;
	            }
	        }
	    }
	    //Close elements
	    _closeTableCell() {
	        this.openElements.generateImpliedEndTags();
	        this.openElements.popUntilTableCellPopped();
	        this.activeFormattingElements.clearToLastMarker();
	        this.insertionMode = InsertionMode.IN_ROW;
	    }
	    _closePElement() {
	        this.openElements.generateImpliedEndTagsWithExclusion(TAG_ID.P);
	        this.openElements.popUntilTagNamePopped(TAG_ID.P);
	    }
	    //Insertion modes
	    _resetInsertionMode() {
	        for (let i = this.openElements.stackTop; i >= 0; i--) {
	            //Insertion mode reset map
	            switch (i === 0 && this.fragmentContext ? this.fragmentContextID : this.openElements.tagIDs[i]) {
	                case TAG_ID.TR: {
	                    this.insertionMode = InsertionMode.IN_ROW;
	                    return;
	                }
	                case TAG_ID.TBODY:
	                case TAG_ID.THEAD:
	                case TAG_ID.TFOOT: {
	                    this.insertionMode = InsertionMode.IN_TABLE_BODY;
	                    return;
	                }
	                case TAG_ID.CAPTION: {
	                    this.insertionMode = InsertionMode.IN_CAPTION;
	                    return;
	                }
	                case TAG_ID.COLGROUP: {
	                    this.insertionMode = InsertionMode.IN_COLUMN_GROUP;
	                    return;
	                }
	                case TAG_ID.TABLE: {
	                    this.insertionMode = InsertionMode.IN_TABLE;
	                    return;
	                }
	                case TAG_ID.BODY: {
	                    this.insertionMode = InsertionMode.IN_BODY;
	                    return;
	                }
	                case TAG_ID.FRAMESET: {
	                    this.insertionMode = InsertionMode.IN_FRAMESET;
	                    return;
	                }
	                case TAG_ID.SELECT: {
	                    this._resetInsertionModeForSelect(i);
	                    return;
	                }
	                case TAG_ID.TEMPLATE: {
	                    this.insertionMode = this.tmplInsertionModeStack[0];
	                    return;
	                }
	                case TAG_ID.HTML: {
	                    this.insertionMode = this.headElement ? InsertionMode.AFTER_HEAD : InsertionMode.BEFORE_HEAD;
	                    return;
	                }
	                case TAG_ID.TD:
	                case TAG_ID.TH: {
	                    if (i > 0) {
	                        this.insertionMode = InsertionMode.IN_CELL;
	                        return;
	                    }
	                    break;
	                }
	                case TAG_ID.HEAD: {
	                    if (i > 0) {
	                        this.insertionMode = InsertionMode.IN_HEAD;
	                        return;
	                    }
	                    break;
	                }
	            }
	        }
	        this.insertionMode = InsertionMode.IN_BODY;
	    }
	    _resetInsertionModeForSelect(selectIdx) {
	        if (selectIdx > 0) {
	            for (let i = selectIdx - 1; i > 0; i--) {
	                const tn = this.openElements.tagIDs[i];
	                if (tn === TAG_ID.TEMPLATE) {
	                    break;
	                }
	                else if (tn === TAG_ID.TABLE) {
	                    this.insertionMode = InsertionMode.IN_SELECT_IN_TABLE;
	                    return;
	                }
	            }
	        }
	        this.insertionMode = InsertionMode.IN_SELECT;
	    }
	    //Foster parenting
	    _isElementCausesFosterParenting(tn) {
	        return TABLE_STRUCTURE_TAGS.has(tn);
	    }
	    _shouldFosterParentOnInsertion() {
	        return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.currentTagId);
	    }
	    _findFosterParentingLocation() {
	        for (let i = this.openElements.stackTop; i >= 0; i--) {
	            const openElement = this.openElements.items[i];
	            switch (this.openElements.tagIDs[i]) {
	                case TAG_ID.TEMPLATE: {
	                    if (this.treeAdapter.getNamespaceURI(openElement) === NS.HTML) {
	                        return { parent: this.treeAdapter.getTemplateContent(openElement), beforeElement: null };
	                    }
	                    break;
	                }
	                case TAG_ID.TABLE: {
	                    const parent = this.treeAdapter.getParentNode(openElement);
	                    if (parent) {
	                        return { parent, beforeElement: openElement };
	                    }
	                    return { parent: this.openElements.items[i - 1], beforeElement: null };
	                }
	                // Do nothing
	            }
	        }
	        return { parent: this.openElements.items[0], beforeElement: null };
	    }
	    _fosterParentElement(element) {
	        const location = this._findFosterParentingLocation();
	        if (location.beforeElement) {
	            this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);
	        }
	        else {
	            this.treeAdapter.appendChild(location.parent, element);
	        }
	    }
	    //Special elements
	    _isSpecialElement(element, id) {
	        const ns = this.treeAdapter.getNamespaceURI(element);
	        return SPECIAL_ELEMENTS[ns].has(id);
	    }
	    onCharacter(token) {
	        this.skipNextNewLine = false;
	        if (this.tokenizer.inForeignNode) {
	            characterInForeignContent(this, token);
	            return;
	        }
	        switch (this.insertionMode) {
	            case InsertionMode.INITIAL: {
	                tokenInInitialMode(this, token);
	                break;
	            }
	            case InsertionMode.BEFORE_HTML: {
	                tokenBeforeHtml(this, token);
	                break;
	            }
	            case InsertionMode.BEFORE_HEAD: {
	                tokenBeforeHead(this, token);
	                break;
	            }
	            case InsertionMode.IN_HEAD: {
	                tokenInHead(this, token);
	                break;
	            }
	            case InsertionMode.IN_HEAD_NO_SCRIPT: {
	                tokenInHeadNoScript(this, token);
	                break;
	            }
	            case InsertionMode.AFTER_HEAD: {
	                tokenAfterHead(this, token);
	                break;
	            }
	            case InsertionMode.IN_BODY:
	            case InsertionMode.IN_CAPTION:
	            case InsertionMode.IN_CELL:
	            case InsertionMode.IN_TEMPLATE: {
	                characterInBody(this, token);
	                break;
	            }
	            case InsertionMode.TEXT:
	            case InsertionMode.IN_SELECT:
	            case InsertionMode.IN_SELECT_IN_TABLE: {
	                this._insertCharacters(token);
	                break;
	            }
	            case InsertionMode.IN_TABLE:
	            case InsertionMode.IN_TABLE_BODY:
	            case InsertionMode.IN_ROW: {
	                characterInTable(this, token);
	                break;
	            }
	            case InsertionMode.IN_TABLE_TEXT: {
	                characterInTableText(this, token);
	                break;
	            }
	            case InsertionMode.IN_COLUMN_GROUP: {
	                tokenInColumnGroup(this, token);
	                break;
	            }
	            case InsertionMode.AFTER_BODY: {
	                tokenAfterBody(this, token);
	                break;
	            }
	            case InsertionMode.AFTER_AFTER_BODY: {
	                tokenAfterAfterBody(this, token);
	                break;
	            }
	            // Do nothing
	        }
	    }
	    onNullCharacter(token) {
	        this.skipNextNewLine = false;
	        if (this.tokenizer.inForeignNode) {
	            nullCharacterInForeignContent(this, token);
	            return;
	        }
	        switch (this.insertionMode) {
	            case InsertionMode.INITIAL: {
	                tokenInInitialMode(this, token);
	                break;
	            }
	            case InsertionMode.BEFORE_HTML: {
	                tokenBeforeHtml(this, token);
	                break;
	            }
	            case InsertionMode.BEFORE_HEAD: {
	                tokenBeforeHead(this, token);
	                break;
	            }
	            case InsertionMode.IN_HEAD: {
	                tokenInHead(this, token);
	                break;
	            }
	            case InsertionMode.IN_HEAD_NO_SCRIPT: {
	                tokenInHeadNoScript(this, token);
	                break;
	            }
	            case InsertionMode.AFTER_HEAD: {
	                tokenAfterHead(this, token);
	                break;
	            }
	            case InsertionMode.TEXT: {
	                this._insertCharacters(token);
	                break;
	            }
	            case InsertionMode.IN_TABLE:
	            case InsertionMode.IN_TABLE_BODY:
	            case InsertionMode.IN_ROW: {
	                characterInTable(this, token);
	                break;
	            }
	            case InsertionMode.IN_COLUMN_GROUP: {
	                tokenInColumnGroup(this, token);
	                break;
	            }
	            case InsertionMode.AFTER_BODY: {
	                tokenAfterBody(this, token);
	                break;
	            }
	            case InsertionMode.AFTER_AFTER_BODY: {
	                tokenAfterAfterBody(this, token);
	                break;
	            }
	            // Do nothing
	        }
	    }
	    onComment(token) {
	        this.skipNextNewLine = false;
	        if (this.currentNotInHTML) {
	            appendComment(this, token);
	            return;
	        }
	        switch (this.insertionMode) {
	            case InsertionMode.INITIAL:
	            case InsertionMode.BEFORE_HTML:
	            case InsertionMode.BEFORE_HEAD:
	            case InsertionMode.IN_HEAD:
	            case InsertionMode.IN_HEAD_NO_SCRIPT:
	            case InsertionMode.AFTER_HEAD:
	            case InsertionMode.IN_BODY:
	            case InsertionMode.IN_TABLE:
	            case InsertionMode.IN_CAPTION:
	            case InsertionMode.IN_COLUMN_GROUP:
	            case InsertionMode.IN_TABLE_BODY:
	            case InsertionMode.IN_ROW:
	            case InsertionMode.IN_CELL:
	            case InsertionMode.IN_SELECT:
	            case InsertionMode.IN_SELECT_IN_TABLE:
	            case InsertionMode.IN_TEMPLATE:
	            case InsertionMode.IN_FRAMESET:
	            case InsertionMode.AFTER_FRAMESET: {
	                appendComment(this, token);
	                break;
	            }
	            case InsertionMode.IN_TABLE_TEXT: {
	                tokenInTableText(this, token);
	                break;
	            }
	            case InsertionMode.AFTER_BODY: {
	                appendCommentToRootHtmlElement(this, token);
	                break;
	            }
	            case InsertionMode.AFTER_AFTER_BODY:
	            case InsertionMode.AFTER_AFTER_FRAMESET: {
	                appendCommentToDocument(this, token);
	                break;
	            }
	            // Do nothing
	        }
	    }
	    onDoctype(token) {
	        this.skipNextNewLine = false;
	        switch (this.insertionMode) {
	            case InsertionMode.INITIAL: {
	                doctypeInInitialMode(this, token);
	                break;
	            }
	            case InsertionMode.BEFORE_HEAD:
	            case InsertionMode.IN_HEAD:
	            case InsertionMode.IN_HEAD_NO_SCRIPT:
	            case InsertionMode.AFTER_HEAD: {
	                this._err(token, ERR.misplacedDoctype);
	                break;
	            }
	            case InsertionMode.IN_TABLE_TEXT: {
	                tokenInTableText(this, token);
	                break;
	            }
	            // Do nothing
	        }
	    }
	    onStartTag(token) {
	        this.skipNextNewLine = false;
	        this.currentToken = token;
	        this._processStartTag(token);
	        if (token.selfClosing && !token.ackSelfClosing) {
	            this._err(token, ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);
	        }
	    }
	    /**
	     * Processes a given start tag.
	     *
	     * `onStartTag` checks if a self-closing tag was recognized. When a token
	     * is moved inbetween multiple insertion modes, this check for self-closing
	     * could lead to false positives. To avoid this, `_processStartTag` is used
	     * for nested calls.
	     *
	     * @param token The token to process.
	     */
	    _processStartTag(token) {
	        if (this.shouldProcessStartTagTokenInForeignContent(token)) {
	            startTagInForeignContent(this, token);
	        }
	        else {
	            this._startTagOutsideForeignContent(token);
	        }
	    }
	    _startTagOutsideForeignContent(token) {
	        switch (this.insertionMode) {
	            case InsertionMode.INITIAL: {
	                tokenInInitialMode(this, token);
	                break;
	            }
	            case InsertionMode.BEFORE_HTML: {
	                startTagBeforeHtml(this, token);
	                break;
	            }
	            case InsertionMode.BEFORE_HEAD: {
	                startTagBeforeHead(this, token);
	                break;
	            }
	            case InsertionMode.IN_HEAD: {
	                startTagInHead(this, token);
	                break;
	            }
	            case InsertionMode.IN_HEAD_NO_SCRIPT: {
	                startTagInHeadNoScript(this, token);
	                break;
	            }
	            case InsertionMode.AFTER_HEAD: {
	                startTagAfterHead(this, token);
	                break;
	            }
	            case InsertionMode.IN_BODY: {
	                startTagInBody(this, token);
	                break;
	            }
	            case InsertionMode.IN_TABLE: {
	                startTagInTable(this, token);
	                break;
	            }
	            case InsertionMode.IN_TABLE_TEXT: {
	                tokenInTableText(this, token);
	                break;
	            }
	            case InsertionMode.IN_CAPTION: {
	                startTagInCaption(this, token);
	                break;
	            }
	            case InsertionMode.IN_COLUMN_GROUP: {
	                startTagInColumnGroup(this, token);
	                break;
	            }
	            case InsertionMode.IN_TABLE_BODY: {
	                startTagInTableBody(this, token);
	                break;
	            }
	            case InsertionMode.IN_ROW: {
	                startTagInRow(this, token);
	                break;
	            }
	            case InsertionMode.IN_CELL: {
	                startTagInCell(this, token);
	                break;
	            }
	            case InsertionMode.IN_SELECT: {
	                startTagInSelect(this, token);
	                break;
	            }
	            case InsertionMode.IN_SELECT_IN_TABLE: {
	                startTagInSelectInTable(this, token);
	                break;
	            }
	            case InsertionMode.IN_TEMPLATE: {
	                startTagInTemplate(this, token);
	                break;
	            }
	            case InsertionMode.AFTER_BODY: {
	                startTagAfterBody(this, token);
	                break;
	            }
	            case InsertionMode.IN_FRAMESET: {
	                startTagInFrameset(this, token);
	                break;
	            }
	            case InsertionMode.AFTER_FRAMESET: {
	                startTagAfterFrameset(this, token);
	                break;
	            }
	            case InsertionMode.AFTER_AFTER_BODY: {
	                startTagAfterAfterBody(this, token);
	                break;
	            }
	            case InsertionMode.AFTER_AFTER_FRAMESET: {
	                startTagAfterAfterFrameset(this, token);
	                break;
	            }
	            // Do nothing
	        }
	    }
	    onEndTag(token) {
	        this.skipNextNewLine = false;
	        this.currentToken = token;
	        if (this.currentNotInHTML) {
	            endTagInForeignContent(this, token);
	        }
	        else {
	            this._endTagOutsideForeignContent(token);
	        }
	    }
	    _endTagOutsideForeignContent(token) {
	        switch (this.insertionMode) {
	            case InsertionMode.INITIAL: {
	                tokenInInitialMode(this, token);
	                break;
	            }
	            case InsertionMode.BEFORE_HTML: {
	                endTagBeforeHtml(this, token);
	                break;
	            }
	            case InsertionMode.BEFORE_HEAD: {
	                endTagBeforeHead(this, token);
	                break;
	            }
	            case InsertionMode.IN_HEAD: {
	                endTagInHead(this, token);
	                break;
	            }
	            case InsertionMode.IN_HEAD_NO_SCRIPT: {
	                endTagInHeadNoScript(this, token);
	                break;
	            }
	            case InsertionMode.AFTER_HEAD: {
	                endTagAfterHead(this, token);
	                break;
	            }
	            case InsertionMode.IN_BODY: {
	                endTagInBody(this, token);
	                break;
	            }
	            case InsertionMode.TEXT: {
	                endTagInText(this, token);
	                break;
	            }
	            case InsertionMode.IN_TABLE: {
	                endTagInTable(this, token);
	                break;
	            }
	            case InsertionMode.IN_TABLE_TEXT: {
	                tokenInTableText(this, token);
	                break;
	            }
	            case InsertionMode.IN_CAPTION: {
	                endTagInCaption(this, token);
	                break;
	            }
	            case InsertionMode.IN_COLUMN_GROUP: {
	                endTagInColumnGroup(this, token);
	                break;
	            }
	            case InsertionMode.IN_TABLE_BODY: {
	                endTagInTableBody(this, token);
	                break;
	            }
	            case InsertionMode.IN_ROW: {
	                endTagInRow(this, token);
	                break;
	            }
	            case InsertionMode.IN_CELL: {
	                endTagInCell(this, token);
	                break;
	            }
	            case InsertionMode.IN_SELECT: {
	                endTagInSelect(this, token);
	                break;
	            }
	            case InsertionMode.IN_SELECT_IN_TABLE: {
	                endTagInSelectInTable(this, token);
	                break;
	            }
	            case InsertionMode.IN_TEMPLATE: {
	                endTagInTemplate(this, token);
	                break;
	            }
	            case InsertionMode.AFTER_BODY: {
	                endTagAfterBody(this, token);
	                break;
	            }
	            case InsertionMode.IN_FRAMESET: {
	                endTagInFrameset(this, token);
	                break;
	            }
	            case InsertionMode.AFTER_FRAMESET: {
	                endTagAfterFrameset(this, token);
	                break;
	            }
	            case InsertionMode.AFTER_AFTER_BODY: {
	                tokenAfterAfterBody(this, token);
	                break;
	            }
	            // Do nothing
	        }
	    }
	    onEof(token) {
	        switch (this.insertionMode) {
	            case InsertionMode.INITIAL: {
	                tokenInInitialMode(this, token);
	                break;
	            }
	            case InsertionMode.BEFORE_HTML: {
	                tokenBeforeHtml(this, token);
	                break;
	            }
	            case InsertionMode.BEFORE_HEAD: {
	                tokenBeforeHead(this, token);
	                break;
	            }
	            case InsertionMode.IN_HEAD: {
	                tokenInHead(this, token);
	                break;
	            }
	            case InsertionMode.IN_HEAD_NO_SCRIPT: {
	                tokenInHeadNoScript(this, token);
	                break;
	            }
	            case InsertionMode.AFTER_HEAD: {
	                tokenAfterHead(this, token);
	                break;
	            }
	            case InsertionMode.IN_BODY:
	            case InsertionMode.IN_TABLE:
	            case InsertionMode.IN_CAPTION:
	            case InsertionMode.IN_COLUMN_GROUP:
	            case InsertionMode.IN_TABLE_BODY:
	            case InsertionMode.IN_ROW:
	            case InsertionMode.IN_CELL:
	            case InsertionMode.IN_SELECT:
	            case InsertionMode.IN_SELECT_IN_TABLE: {
	                eofInBody(this, token);
	                break;
	            }
	            case InsertionMode.TEXT: {
	                eofInText(this, token);
	                break;
	            }
	            case InsertionMode.IN_TABLE_TEXT: {
	                tokenInTableText(this, token);
	                break;
	            }
	            case InsertionMode.IN_TEMPLATE: {
	                eofInTemplate(this, token);
	                break;
	            }
	            case InsertionMode.AFTER_BODY:
	            case InsertionMode.IN_FRAMESET:
	            case InsertionMode.AFTER_FRAMESET:
	            case InsertionMode.AFTER_AFTER_BODY:
	            case InsertionMode.AFTER_AFTER_FRAMESET: {
	                stopParsing(this, token);
	                break;
	            }
	            // Do nothing
	        }
	    }
	    onWhitespaceCharacter(token) {
	        if (this.skipNextNewLine) {
	            this.skipNextNewLine = false;
	            if (token.chars.charCodeAt(0) === CODE_POINTS.LINE_FEED) {
	                if (token.chars.length === 1) {
	                    return;
	                }
	                token.chars = token.chars.substr(1);
	            }
	        }
	        if (this.tokenizer.inForeignNode) {
	            this._insertCharacters(token);
	            return;
	        }
	        switch (this.insertionMode) {
	            case InsertionMode.IN_HEAD:
	            case InsertionMode.IN_HEAD_NO_SCRIPT:
	            case InsertionMode.AFTER_HEAD:
	            case InsertionMode.TEXT:
	            case InsertionMode.IN_COLUMN_GROUP:
	            case InsertionMode.IN_SELECT:
	            case InsertionMode.IN_SELECT_IN_TABLE:
	            case InsertionMode.IN_FRAMESET:
	            case InsertionMode.AFTER_FRAMESET: {
	                this._insertCharacters(token);
	                break;
	            }
	            case InsertionMode.IN_BODY:
	            case InsertionMode.IN_CAPTION:
	            case InsertionMode.IN_CELL:
	            case InsertionMode.IN_TEMPLATE:
	            case InsertionMode.AFTER_BODY:
	            case InsertionMode.AFTER_AFTER_BODY:
	            case InsertionMode.AFTER_AFTER_FRAMESET: {
	                whitespaceCharacterInBody(this, token);
	                break;
	            }
	            case InsertionMode.IN_TABLE:
	            case InsertionMode.IN_TABLE_BODY:
	            case InsertionMode.IN_ROW: {
	                characterInTable(this, token);
	                break;
	            }
	            case InsertionMode.IN_TABLE_TEXT: {
	                whitespaceCharacterInTableText(this, token);
	                break;
	            }
	            // Do nothing
	        }
	    }
	}
	//Adoption agency algorithm
	//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoptionAgency)
	//------------------------------------------------------------------
	//Steps 5-8 of the algorithm
	function aaObtainFormattingElementEntry(p, token) {
	    let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);
	    if (formattingElementEntry) {
	        if (!p.openElements.contains(formattingElementEntry.element)) {
	            p.activeFormattingElements.removeEntry(formattingElementEntry);
	            formattingElementEntry = null;
	        }
	        else if (!p.openElements.hasInScope(token.tagID)) {
	            formattingElementEntry = null;
	        }
	    }
	    else {
	        genericEndTagInBody(p, token);
	    }
	    return formattingElementEntry;
	}
	//Steps 9 and 10 of the algorithm
	function aaObtainFurthestBlock(p, formattingElementEntry) {
	    let furthestBlock = null;
	    let idx = p.openElements.stackTop;
	    for (; idx >= 0; idx--) {
	        const element = p.openElements.items[idx];
	        if (element === formattingElementEntry.element) {
	            break;
	        }
	        if (p._isSpecialElement(element, p.openElements.tagIDs[idx])) {
	            furthestBlock = element;
	        }
	    }
	    if (!furthestBlock) {
	        p.openElements.shortenToLength(idx < 0 ? 0 : idx);
	        p.activeFormattingElements.removeEntry(formattingElementEntry);
	    }
	    return furthestBlock;
	}
	//Step 13 of the algorithm
	function aaInnerLoop(p, furthestBlock, formattingElement) {
	    let lastElement = furthestBlock;
	    let nextElement = p.openElements.getCommonAncestor(furthestBlock);
	    for (let i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {
	        //NOTE: store the next element for the next loop iteration (it may be deleted from the stack by step 9.5)
	        nextElement = p.openElements.getCommonAncestor(element);
	        const elementEntry = p.activeFormattingElements.getElementEntry(element);
	        const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;
	        const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;
	        if (shouldRemoveFromOpenElements) {
	            if (counterOverflow) {
	                p.activeFormattingElements.removeEntry(elementEntry);
	            }
	            p.openElements.remove(element);
	        }
	        else {
	            element = aaRecreateElementFromEntry(p, elementEntry);
	            if (lastElement === furthestBlock) {
	                p.activeFormattingElements.bookmark = elementEntry;
	            }
	            p.treeAdapter.detachNode(lastElement);
	            p.treeAdapter.appendChild(element, lastElement);
	            lastElement = element;
	        }
	    }
	    return lastElement;
	}
	//Step 13.7 of the algorithm
	function aaRecreateElementFromEntry(p, elementEntry) {
	    const ns = p.treeAdapter.getNamespaceURI(elementEntry.element);
	    const newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);
	    p.openElements.replace(elementEntry.element, newElement);
	    elementEntry.element = newElement;
	    return newElement;
	}
	//Step 14 of the algorithm
	function aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {
	    const tn = p.treeAdapter.getTagName(commonAncestor);
	    const tid = getTagID(tn);
	    if (p._isElementCausesFosterParenting(tid)) {
	        p._fosterParentElement(lastElement);
	    }
	    else {
	        const ns = p.treeAdapter.getNamespaceURI(commonAncestor);
	        if (tid === TAG_ID.TEMPLATE && ns === NS.HTML) {
	            commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);
	        }
	        p.treeAdapter.appendChild(commonAncestor, lastElement);
	    }
	}
	//Steps 15-19 of the algorithm
	function aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {
	    const ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);
	    const { token } = formattingElementEntry;
	    const newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);
	    p._adoptNodes(furthestBlock, newElement);
	    p.treeAdapter.appendChild(furthestBlock, newElement);
	    p.activeFormattingElements.insertElementAfterBookmark(newElement, token);
	    p.activeFormattingElements.removeEntry(formattingElementEntry);
	    p.openElements.remove(formattingElementEntry.element);
	    p.openElements.insertAfter(furthestBlock, newElement, token.tagID);
	}
	//Algorithm entry point
	function callAdoptionAgency(p, token) {
	    for (let i = 0; i < AA_OUTER_LOOP_ITER; i++) {
	        const formattingElementEntry = aaObtainFormattingElementEntry(p, token);
	        if (!formattingElementEntry) {
	            break;
	        }
	        const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);
	        if (!furthestBlock) {
	            break;
	        }
	        p.activeFormattingElements.bookmark = formattingElementEntry;
	        const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);
	        const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);
	        p.treeAdapter.detachNode(lastElement);
	        if (commonAncestor)
	            aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);
	        aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);
	    }
	}
	//Generic token handlers
	//------------------------------------------------------------------
	function appendComment(p, token) {
	    p._appendCommentNode(token, p.openElements.currentTmplContentOrNode);
	}
	function appendCommentToRootHtmlElement(p, token) {
	    p._appendCommentNode(token, p.openElements.items[0]);
	}
	function appendCommentToDocument(p, token) {
	    p._appendCommentNode(token, p.document);
	}
	function stopParsing(p, token) {
	    p.stopped = true;
	    // NOTE: Set end locations for elements that remain on the open element stack.
	    if (token.location) {
	        // NOTE: If we are not in a fragment, `html` and `body` will stay on the stack.
	        // This is a problem, as we might overwrite their end position here.
	        const target = p.fragmentContext ? 0 : 2;
	        for (let i = p.openElements.stackTop; i >= target; i--) {
	            p._setEndLocation(p.openElements.items[i], token);
	        }
	        // Handle `html` and `body`
	        if (!p.fragmentContext && p.openElements.stackTop >= 0) {
	            const htmlElement = p.openElements.items[0];
	            const htmlLocation = p.treeAdapter.getNodeSourceCodeLocation(htmlElement);
	            if (htmlLocation && !htmlLocation.endTag) {
	                p._setEndLocation(htmlElement, token);
	                if (p.openElements.stackTop >= 1) {
	                    const bodyElement = p.openElements.items[1];
	                    const bodyLocation = p.treeAdapter.getNodeSourceCodeLocation(bodyElement);
	                    if (bodyLocation && !bodyLocation.endTag) {
	                        p._setEndLocation(bodyElement, token);
	                    }
	                }
	            }
	        }
	    }
	}
	// The "initial" insertion mode
	//------------------------------------------------------------------
	function doctypeInInitialMode(p, token) {
	    p._setDocumentType(token);
	    const mode = token.forceQuirks ? DOCUMENT_MODE.QUIRKS : getDocumentMode(token);
	    if (!isConforming(token)) {
	        p._err(token, ERR.nonConformingDoctype);
	    }
	    p.treeAdapter.setDocumentMode(p.document, mode);
	    p.insertionMode = InsertionMode.BEFORE_HTML;
	}
	function tokenInInitialMode(p, token) {
	    p._err(token, ERR.missingDoctype, true);
	    p.treeAdapter.setDocumentMode(p.document, DOCUMENT_MODE.QUIRKS);
	    p.insertionMode = InsertionMode.BEFORE_HTML;
	    p._processToken(token);
	}
	// The "before html" insertion mode
	//------------------------------------------------------------------
	function startTagBeforeHtml(p, token) {
	    if (token.tagID === TAG_ID.HTML) {
	        p._insertElement(token, NS.HTML);
	        p.insertionMode = InsertionMode.BEFORE_HEAD;
	    }
	    else {
	        tokenBeforeHtml(p, token);
	    }
	}
	function endTagBeforeHtml(p, token) {
	    const tn = token.tagID;
	    if (tn === TAG_ID.HTML || tn === TAG_ID.HEAD || tn === TAG_ID.BODY || tn === TAG_ID.BR) {
	        tokenBeforeHtml(p, token);
	    }
	}
	function tokenBeforeHtml(p, token) {
	    p._insertFakeRootElement();
	    p.insertionMode = InsertionMode.BEFORE_HEAD;
	    p._processToken(token);
	}
	// The "before head" insertion mode
	//------------------------------------------------------------------
	function startTagBeforeHead(p, token) {
	    switch (token.tagID) {
	        case TAG_ID.HTML: {
	            startTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.HEAD: {
	            p._insertElement(token, NS.HTML);
	            p.headElement = p.openElements.current;
	            p.insertionMode = InsertionMode.IN_HEAD;
	            break;
	        }
	        default: {
	            tokenBeforeHead(p, token);
	        }
	    }
	}
	function endTagBeforeHead(p, token) {
	    const tn = token.tagID;
	    if (tn === TAG_ID.HEAD || tn === TAG_ID.BODY || tn === TAG_ID.HTML || tn === TAG_ID.BR) {
	        tokenBeforeHead(p, token);
	    }
	    else {
	        p._err(token, ERR.endTagWithoutMatchingOpenElement);
	    }
	}
	function tokenBeforeHead(p, token) {
	    p._insertFakeElement(TAG_NAMES.HEAD, TAG_ID.HEAD);
	    p.headElement = p.openElements.current;
	    p.insertionMode = InsertionMode.IN_HEAD;
	    p._processToken(token);
	}
	// The "in head" insertion mode
	//------------------------------------------------------------------
	function startTagInHead(p, token) {
	    switch (token.tagID) {
	        case TAG_ID.HTML: {
	            startTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.BASE:
	        case TAG_ID.BASEFONT:
	        case TAG_ID.BGSOUND:
	        case TAG_ID.LINK:
	        case TAG_ID.META: {
	            p._appendElement(token, NS.HTML);
	            token.ackSelfClosing = true;
	            break;
	        }
	        case TAG_ID.TITLE: {
	            p._switchToTextParsing(token, TokenizerMode.RCDATA);
	            break;
	        }
	        case TAG_ID.NOSCRIPT: {
	            if (p.options.scriptingEnabled) {
	                p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
	            }
	            else {
	                p._insertElement(token, NS.HTML);
	                p.insertionMode = InsertionMode.IN_HEAD_NO_SCRIPT;
	            }
	            break;
	        }
	        case TAG_ID.NOFRAMES:
	        case TAG_ID.STYLE: {
	            p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
	            break;
	        }
	        case TAG_ID.SCRIPT: {
	            p._switchToTextParsing(token, TokenizerMode.SCRIPT_DATA);
	            break;
	        }
	        case TAG_ID.TEMPLATE: {
	            p._insertTemplate(token);
	            p.activeFormattingElements.insertMarker();
	            p.framesetOk = false;
	            p.insertionMode = InsertionMode.IN_TEMPLATE;
	            p.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);
	            break;
	        }
	        case TAG_ID.HEAD: {
	            p._err(token, ERR.misplacedStartTagForHeadElement);
	            break;
	        }
	        default: {
	            tokenInHead(p, token);
	        }
	    }
	}
	function endTagInHead(p, token) {
	    switch (token.tagID) {
	        case TAG_ID.HEAD: {
	            p.openElements.pop();
	            p.insertionMode = InsertionMode.AFTER_HEAD;
	            break;
	        }
	        case TAG_ID.BODY:
	        case TAG_ID.BR:
	        case TAG_ID.HTML: {
	            tokenInHead(p, token);
	            break;
	        }
	        case TAG_ID.TEMPLATE: {
	            templateEndTagInHead(p, token);
	            break;
	        }
	        default: {
	            p._err(token, ERR.endTagWithoutMatchingOpenElement);
	        }
	    }
	}
	function templateEndTagInHead(p, token) {
	    if (p.openElements.tmplCount > 0) {
	        p.openElements.generateImpliedEndTagsThoroughly();
	        if (p.openElements.currentTagId !== TAG_ID.TEMPLATE) {
	            p._err(token, ERR.closingOfElementWithOpenChildElements);
	        }
	        p.openElements.popUntilTagNamePopped(TAG_ID.TEMPLATE);
	        p.activeFormattingElements.clearToLastMarker();
	        p.tmplInsertionModeStack.shift();
	        p._resetInsertionMode();
	    }
	    else {
	        p._err(token, ERR.endTagWithoutMatchingOpenElement);
	    }
	}
	function tokenInHead(p, token) {
	    p.openElements.pop();
	    p.insertionMode = InsertionMode.AFTER_HEAD;
	    p._processToken(token);
	}
	// The "in head no script" insertion mode
	//------------------------------------------------------------------
	function startTagInHeadNoScript(p, token) {
	    switch (token.tagID) {
	        case TAG_ID.HTML: {
	            startTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.BASEFONT:
	        case TAG_ID.BGSOUND:
	        case TAG_ID.HEAD:
	        case TAG_ID.LINK:
	        case TAG_ID.META:
	        case TAG_ID.NOFRAMES:
	        case TAG_ID.STYLE: {
	            startTagInHead(p, token);
	            break;
	        }
	        case TAG_ID.NOSCRIPT: {
	            p._err(token, ERR.nestedNoscriptInHead);
	            break;
	        }
	        default: {
	            tokenInHeadNoScript(p, token);
	        }
	    }
	}
	function endTagInHeadNoScript(p, token) {
	    switch (token.tagID) {
	        case TAG_ID.NOSCRIPT: {
	            p.openElements.pop();
	            p.insertionMode = InsertionMode.IN_HEAD;
	            break;
	        }
	        case TAG_ID.BR: {
	            tokenInHeadNoScript(p, token);
	            break;
	        }
	        default: {
	            p._err(token, ERR.endTagWithoutMatchingOpenElement);
	        }
	    }
	}
	function tokenInHeadNoScript(p, token) {
	    const errCode = token.type === TokenType.EOF ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;
	    p._err(token, errCode);
	    p.openElements.pop();
	    p.insertionMode = InsertionMode.IN_HEAD;
	    p._processToken(token);
	}
	// The "after head" insertion mode
	//------------------------------------------------------------------
	function startTagAfterHead(p, token) {
	    switch (token.tagID) {
	        case TAG_ID.HTML: {
	            startTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.BODY: {
	            p._insertElement(token, NS.HTML);
	            p.framesetOk = false;
	            p.insertionMode = InsertionMode.IN_BODY;
	            break;
	        }
	        case TAG_ID.FRAMESET: {
	            p._insertElement(token, NS.HTML);
	            p.insertionMode = InsertionMode.IN_FRAMESET;
	            break;
	        }
	        case TAG_ID.BASE:
	        case TAG_ID.BASEFONT:
	        case TAG_ID.BGSOUND:
	        case TAG_ID.LINK:
	        case TAG_ID.META:
	        case TAG_ID.NOFRAMES:
	        case TAG_ID.SCRIPT:
	        case TAG_ID.STYLE:
	        case TAG_ID.TEMPLATE:
	        case TAG_ID.TITLE: {
	            p._err(token, ERR.abandonedHeadElementChild);
	            p.openElements.push(p.headElement, TAG_ID.HEAD);
	            startTagInHead(p, token);
	            p.openElements.remove(p.headElement);
	            break;
	        }
	        case TAG_ID.HEAD: {
	            p._err(token, ERR.misplacedStartTagForHeadElement);
	            break;
	        }
	        default: {
	            tokenAfterHead(p, token);
	        }
	    }
	}
	function endTagAfterHead(p, token) {
	    switch (token.tagID) {
	        case TAG_ID.BODY:
	        case TAG_ID.HTML:
	        case TAG_ID.BR: {
	            tokenAfterHead(p, token);
	            break;
	        }
	        case TAG_ID.TEMPLATE: {
	            templateEndTagInHead(p, token);
	            break;
	        }
	        default: {
	            p._err(token, ERR.endTagWithoutMatchingOpenElement);
	        }
	    }
	}
	function tokenAfterHead(p, token) {
	    p._insertFakeElement(TAG_NAMES.BODY, TAG_ID.BODY);
	    p.insertionMode = InsertionMode.IN_BODY;
	    modeInBody(p, token);
	}
	// The "in body" insertion mode
	//------------------------------------------------------------------
	function modeInBody(p, token) {
	    switch (token.type) {
	        case TokenType.CHARACTER: {
	            characterInBody(p, token);
	            break;
	        }
	        case TokenType.WHITESPACE_CHARACTER: {
	            whitespaceCharacterInBody(p, token);
	            break;
	        }
	        case TokenType.COMMENT: {
	            appendComment(p, token);
	            break;
	        }
	        case TokenType.START_TAG: {
	            startTagInBody(p, token);
	            break;
	        }
	        case TokenType.END_TAG: {
	            endTagInBody(p, token);
	            break;
	        }
	        case TokenType.EOF: {
	            eofInBody(p, token);
	            break;
	        }
	        // Do nothing
	    }
	}
	function whitespaceCharacterInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    p._insertCharacters(token);
	}
	function characterInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    p._insertCharacters(token);
	    p.framesetOk = false;
	}
	function htmlStartTagInBody(p, token) {
	    if (p.openElements.tmplCount === 0) {
	        p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);
	    }
	}
	function bodyStartTagInBody(p, token) {
	    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
	    if (bodyElement && p.openElements.tmplCount === 0) {
	        p.framesetOk = false;
	        p.treeAdapter.adoptAttributes(bodyElement, token.attrs);
	    }
	}
	function framesetStartTagInBody(p, token) {
	    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
	    if (p.framesetOk && bodyElement) {
	        p.treeAdapter.detachNode(bodyElement);
	        p.openElements.popAllUpToHtmlElement();
	        p._insertElement(token, NS.HTML);
	        p.insertionMode = InsertionMode.IN_FRAMESET;
	    }
	}
	function addressStartTagInBody(p, token) {
	    if (p.openElements.hasInButtonScope(TAG_ID.P)) {
	        p._closePElement();
	    }
	    p._insertElement(token, NS.HTML);
	}
	function numberedHeaderStartTagInBody(p, token) {
	    if (p.openElements.hasInButtonScope(TAG_ID.P)) {
	        p._closePElement();
	    }
	    if (isNumberedHeader(p.openElements.currentTagId)) {
	        p.openElements.pop();
	    }
	    p._insertElement(token, NS.HTML);
	}
	function preStartTagInBody(p, token) {
	    if (p.openElements.hasInButtonScope(TAG_ID.P)) {
	        p._closePElement();
	    }
	    p._insertElement(token, NS.HTML);
	    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move
	    //on to the next one. (Newlines at the start of pre blocks are ignored as an authoring convenience.)
	    p.skipNextNewLine = true;
	    p.framesetOk = false;
	}
	function formStartTagInBody(p, token) {
	    const inTemplate = p.openElements.tmplCount > 0;
	    if (!p.formElement || inTemplate) {
	        if (p.openElements.hasInButtonScope(TAG_ID.P)) {
	            p._closePElement();
	        }
	        p._insertElement(token, NS.HTML);
	        if (!inTemplate) {
	            p.formElement = p.openElements.current;
	        }
	    }
	}
	function listItemStartTagInBody(p, token) {
	    p.framesetOk = false;
	    const tn = token.tagID;
	    for (let i = p.openElements.stackTop; i >= 0; i--) {
	        const elementId = p.openElements.tagIDs[i];
	        if ((tn === TAG_ID.LI && elementId === TAG_ID.LI) ||
	            ((tn === TAG_ID.DD || tn === TAG_ID.DT) && (elementId === TAG_ID.DD || elementId === TAG_ID.DT))) {
	            p.openElements.generateImpliedEndTagsWithExclusion(elementId);
	            p.openElements.popUntilTagNamePopped(elementId);
	            break;
	        }
	        if (elementId !== TAG_ID.ADDRESS &&
	            elementId !== TAG_ID.DIV &&
	            elementId !== TAG_ID.P &&
	            p._isSpecialElement(p.openElements.items[i], elementId)) {
	            break;
	        }
	    }
	    if (p.openElements.hasInButtonScope(TAG_ID.P)) {
	        p._closePElement();
	    }
	    p._insertElement(token, NS.HTML);
	}
	function plaintextStartTagInBody(p, token) {
	    if (p.openElements.hasInButtonScope(TAG_ID.P)) {
	        p._closePElement();
	    }
	    p._insertElement(token, NS.HTML);
	    p.tokenizer.state = TokenizerMode.PLAINTEXT;
	}
	function buttonStartTagInBody(p, token) {
	    if (p.openElements.hasInScope(TAG_ID.BUTTON)) {
	        p.openElements.generateImpliedEndTags();
	        p.openElements.popUntilTagNamePopped(TAG_ID.BUTTON);
	    }
	    p._reconstructActiveFormattingElements();
	    p._insertElement(token, NS.HTML);
	    p.framesetOk = false;
	}
	function aStartTagInBody(p, token) {
	    const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(TAG_NAMES.A);
	    if (activeElementEntry) {
	        callAdoptionAgency(p, token);
	        p.openElements.remove(activeElementEntry.element);
	        p.activeFormattingElements.removeEntry(activeElementEntry);
	    }
	    p._reconstructActiveFormattingElements();
	    p._insertElement(token, NS.HTML);
	    p.activeFormattingElements.pushElement(p.openElements.current, token);
	}
	function bStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    p._insertElement(token, NS.HTML);
	    p.activeFormattingElements.pushElement(p.openElements.current, token);
	}
	function nobrStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    if (p.openElements.hasInScope(TAG_ID.NOBR)) {
	        callAdoptionAgency(p, token);
	        p._reconstructActiveFormattingElements();
	    }
	    p._insertElement(token, NS.HTML);
	    p.activeFormattingElements.pushElement(p.openElements.current, token);
	}
	function appletStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    p._insertElement(token, NS.HTML);
	    p.activeFormattingElements.insertMarker();
	    p.framesetOk = false;
	}
	function tableStartTagInBody(p, token) {
	    if (p.treeAdapter.getDocumentMode(p.document) !== DOCUMENT_MODE.QUIRKS && p.openElements.hasInButtonScope(TAG_ID.P)) {
	        p._closePElement();
	    }
	    p._insertElement(token, NS.HTML);
	    p.framesetOk = false;
	    p.insertionMode = InsertionMode.IN_TABLE;
	}
	function areaStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    p._appendElement(token, NS.HTML);
	    p.framesetOk = false;
	    token.ackSelfClosing = true;
	}
	function isHiddenInput(token) {
	    const inputType = getTokenAttr(token, ATTRS.TYPE);
	    return inputType != null && inputType.toLowerCase() === HIDDEN_INPUT_TYPE;
	}
	function inputStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    p._appendElement(token, NS.HTML);
	    if (!isHiddenInput(token)) {
	        p.framesetOk = false;
	    }
	    token.ackSelfClosing = true;
	}
	function paramStartTagInBody(p, token) {
	    p._appendElement(token, NS.HTML);
	    token.ackSelfClosing = true;
	}
	function hrStartTagInBody(p, token) {
	    if (p.openElements.hasInButtonScope(TAG_ID.P)) {
	        p._closePElement();
	    }
	    p._appendElement(token, NS.HTML);
	    p.framesetOk = false;
	    token.ackSelfClosing = true;
	}
	function imageStartTagInBody(p, token) {
	    token.tagName = TAG_NAMES.IMG;
	    token.tagID = TAG_ID.IMG;
	    areaStartTagInBody(p, token);
	}
	function textareaStartTagInBody(p, token) {
	    p._insertElement(token, NS.HTML);
	    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move
	    //on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)
	    p.skipNextNewLine = true;
	    p.tokenizer.state = TokenizerMode.RCDATA;
	    p.originalInsertionMode = p.insertionMode;
	    p.framesetOk = false;
	    p.insertionMode = InsertionMode.TEXT;
	}
	function xmpStartTagInBody(p, token) {
	    if (p.openElements.hasInButtonScope(TAG_ID.P)) {
	        p._closePElement();
	    }
	    p._reconstructActiveFormattingElements();
	    p.framesetOk = false;
	    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
	}
	function iframeStartTagInBody(p, token) {
	    p.framesetOk = false;
	    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
	}
	//NOTE: here we assume that we always act as an user agent with enabled plugins, so we parse
	//<noembed> as rawtext.
	function noembedStartTagInBody(p, token) {
	    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
	}
	function selectStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    p._insertElement(token, NS.HTML);
	    p.framesetOk = false;
	    p.insertionMode =
	        p.insertionMode === InsertionMode.IN_TABLE ||
	            p.insertionMode === InsertionMode.IN_CAPTION ||
	            p.insertionMode === InsertionMode.IN_TABLE_BODY ||
	            p.insertionMode === InsertionMode.IN_ROW ||
	            p.insertionMode === InsertionMode.IN_CELL
	            ? InsertionMode.IN_SELECT_IN_TABLE
	            : InsertionMode.IN_SELECT;
	}
	function optgroupStartTagInBody(p, token) {
	    if (p.openElements.currentTagId === TAG_ID.OPTION) {
	        p.openElements.pop();
	    }
	    p._reconstructActiveFormattingElements();
	    p._insertElement(token, NS.HTML);
	}
	function rbStartTagInBody(p, token) {
	    if (p.openElements.hasInScope(TAG_ID.RUBY)) {
	        p.openElements.generateImpliedEndTags();
	    }
	    p._insertElement(token, NS.HTML);
	}
	function rtStartTagInBody(p, token) {
	    if (p.openElements.hasInScope(TAG_ID.RUBY)) {
	        p.openElements.generateImpliedEndTagsWithExclusion(TAG_ID.RTC);
	    }
	    p._insertElement(token, NS.HTML);
	}
	function mathStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    adjustTokenMathMLAttrs(token);
	    adjustTokenXMLAttrs(token);
	    if (token.selfClosing) {
	        p._appendElement(token, NS.MATHML);
	    }
	    else {
	        p._insertElement(token, NS.MATHML);
	    }
	    token.ackSelfClosing = true;
	}
	function svgStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    adjustTokenSVGAttrs(token);
	    adjustTokenXMLAttrs(token);
	    if (token.selfClosing) {
	        p._appendElement(token, NS.SVG);
	    }
	    else {
	        p._insertElement(token, NS.SVG);
	    }
	    token.ackSelfClosing = true;
	}
	function genericStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    p._insertElement(token, NS.HTML);
	}
	function startTagInBody(p, token) {
	    switch (token.tagID) {
	        case TAG_ID.I:
	        case TAG_ID.S:
	        case TAG_ID.B:
	        case TAG_ID.U:
	        case TAG_ID.EM:
	        case TAG_ID.TT:
	        case TAG_ID.BIG:
	        case TAG_ID.CODE:
	        case TAG_ID.FONT:
	        case TAG_ID.SMALL:
	        case TAG_ID.STRIKE:
	        case TAG_ID.STRONG: {
	            bStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.A: {
	            aStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.H1:
	        case TAG_ID.H2:
	        case TAG_ID.H3:
	        case TAG_ID.H4:
	        case TAG_ID.H5:
	        case TAG_ID.H6: {
	            numberedHeaderStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.P:
	        case TAG_ID.DL:
	        case TAG_ID.OL:
	        case TAG_ID.UL:
	        case TAG_ID.DIV:
	        case TAG_ID.DIR:
	        case TAG_ID.NAV:
	        case TAG_ID.MAIN:
	        case TAG_ID.MENU:
	        case TAG_ID.ASIDE:
	        case TAG_ID.CENTER:
	        case TAG_ID.FIGURE:
	        case TAG_ID.FOOTER:
	        case TAG_ID.HEADER:
	        case TAG_ID.HGROUP:
	        case TAG_ID.DIALOG:
	        case TAG_ID.DETAILS:
	        case TAG_ID.ADDRESS:
	        case TAG_ID.ARTICLE:
	        case TAG_ID.SECTION:
	        case TAG_ID.SUMMARY:
	        case TAG_ID.FIELDSET:
	        case TAG_ID.BLOCKQUOTE:
	        case TAG_ID.FIGCAPTION: {
	            addressStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.LI:
	        case TAG_ID.DD:
	        case TAG_ID.DT: {
	            listItemStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.BR:
	        case TAG_ID.IMG:
	        case TAG_ID.WBR:
	        case TAG_ID.AREA:
	        case TAG_ID.EMBED:
	        case TAG_ID.KEYGEN: {
	            areaStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.HR: {
	            hrStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.RB:
	        case TAG_ID.RTC: {
	            rbStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.RT:
	        case TAG_ID.RP: {
	            rtStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.PRE:
	        case TAG_ID.LISTING: {
	            preStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.XMP: {
	            xmpStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.SVG: {
	            svgStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.HTML: {
	            htmlStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.BASE:
	        case TAG_ID.LINK:
	        case TAG_ID.META:
	        case TAG_ID.STYLE:
	        case TAG_ID.TITLE:
	        case TAG_ID.SCRIPT:
	        case TAG_ID.BGSOUND:
	        case TAG_ID.BASEFONT:
	        case TAG_ID.TEMPLATE: {
	            startTagInHead(p, token);
	            break;
	        }
	        case TAG_ID.BODY: {
	            bodyStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.FORM: {
	            formStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.NOBR: {
	            nobrStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.MATH: {
	            mathStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.TABLE: {
	            tableStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.INPUT: {
	            inputStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.PARAM:
	        case TAG_ID.TRACK:
	        case TAG_ID.SOURCE: {
	            paramStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.IMAGE: {
	            imageStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.BUTTON: {
	            buttonStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.APPLET:
	        case TAG_ID.OBJECT:
	        case TAG_ID.MARQUEE: {
	            appletStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.IFRAME: {
	            iframeStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.SELECT: {
	            selectStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.OPTION:
	        case TAG_ID.OPTGROUP: {
	            optgroupStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.NOEMBED: {
	            noembedStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.FRAMESET: {
	            framesetStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.TEXTAREA: {
	            textareaStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.NOSCRIPT: {
	            if (p.options.scriptingEnabled) {
	                noembedStartTagInBody(p, token);
	            }
	            else {
	                genericStartTagInBody(p, token);
	            }
	            break;
	        }
	        case TAG_ID.PLAINTEXT: {
	            plaintextStartTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.COL:
	        case TAG_ID.TH:
	        case TAG_ID.TD:
	        case TAG_ID.TR:
	        case TAG_ID.HEAD:
	        case TAG_ID.FRAME:
	        case TAG_ID.TBODY:
	        case TAG_ID.TFOOT:
	        case TAG_ID.THEAD:
	        case TAG_ID.CAPTION:
	        case TAG_ID.COLGROUP: {
	            // Ignore token
	            break;
	        }
	        default: {
	            genericStartTagInBody(p, token);
	        }
	    }
	}
	function bodyEndTagInBody(p, token) {
	    if (p.openElements.hasInScope(TAG_ID.BODY)) {
	        p.insertionMode = InsertionMode.AFTER_BODY;
	        //NOTE: <body> is never popped from the stack, so we need to updated
	        //the end location explicitly.
	        if (p.options.sourceCodeLocationInfo) {
	            const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
	            if (bodyElement) {
	                p._setEndLocation(bodyElement, token);
	            }
	        }
	    }
	}
	function htmlEndTagInBody(p, token) {
	    if (p.openElements.hasInScope(TAG_ID.BODY)) {
	        p.insertionMode = InsertionMode.AFTER_BODY;
	        endTagAfterBody(p, token);
	    }
	}
	function addressEndTagInBody(p, token) {
	    const tn = token.tagID;
	    if (p.openElements.hasInScope(tn)) {
	        p.openElements.generateImpliedEndTags();
	        p.openElements.popUntilTagNamePopped(tn);
	    }
	}
	function formEndTagInBody(p) {
	    const inTemplate = p.openElements.tmplCount > 0;
	    const { formElement } = p;
	    if (!inTemplate) {
	        p.formElement = null;
	    }
	    if ((formElement || inTemplate) && p.openElements.hasInScope(TAG_ID.FORM)) {
	        p.openElements.generateImpliedEndTags();
	        if (inTemplate) {
	            p.openElements.popUntilTagNamePopped(TAG_ID.FORM);
	        }
	        else if (formElement) {
	            p.openElements.remove(formElement);
	        }
	    }
	}
	function pEndTagInBody(p) {
	    if (!p.openElements.hasInButtonScope(TAG_ID.P)) {
	        p._insertFakeElement(TAG_NAMES.P, TAG_ID.P);
	    }
	    p._closePElement();
	}
	function liEndTagInBody(p) {
	    if (p.openElements.hasInListItemScope(TAG_ID.LI)) {
	        p.openElements.generateImpliedEndTagsWithExclusion(TAG_ID.LI);
	        p.openElements.popUntilTagNamePopped(TAG_ID.LI);
	    }
	}
	function ddEndTagInBody(p, token) {
	    const tn = token.tagID;
	    if (p.openElements.hasInScope(tn)) {
	        p.openElements.generateImpliedEndTagsWithExclusion(tn);
	        p.openElements.popUntilTagNamePopped(tn);
	    }
	}
	function numberedHeaderEndTagInBody(p) {
	    if (p.openElements.hasNumberedHeaderInScope()) {
	        p.openElements.generateImpliedEndTags();
	        p.openElements.popUntilNumberedHeaderPopped();
	    }
	}
	function appletEndTagInBody(p, token) {
	    const tn = token.tagID;
	    if (p.openElements.hasInScope(tn)) {
	        p.openElements.generateImpliedEndTags();
	        p.openElements.popUntilTagNamePopped(tn);
	        p.activeFormattingElements.clearToLastMarker();
	    }
	}
	function brEndTagInBody(p) {
	    p._reconstructActiveFormattingElements();
	    p._insertFakeElement(TAG_NAMES.BR, TAG_ID.BR);
	    p.openElements.pop();
	    p.framesetOk = false;
	}
	function genericEndTagInBody(p, token) {
	    const tn = token.tagName;
	    const tid = token.tagID;
	    for (let i = p.openElements.stackTop; i > 0; i--) {
	        const element = p.openElements.items[i];
	        const elementId = p.openElements.tagIDs[i];
	        // Compare the tag name here, as the tag might not be a known tag with an ID.
	        if (tid === elementId && (tid !== TAG_ID.UNKNOWN || p.treeAdapter.getTagName(element) === tn)) {
	            p.openElements.generateImpliedEndTagsWithExclusion(tid);
	            if (p.openElements.stackTop >= i)
	                p.openElements.shortenToLength(i);
	            break;
	        }
	        if (p._isSpecialElement(element, elementId)) {
	            break;
	        }
	    }
	}
	function endTagInBody(p, token) {
	    switch (token.tagID) {
	        case TAG_ID.A:
	        case TAG_ID.B:
	        case TAG_ID.I:
	        case TAG_ID.S:
	        case TAG_ID.U:
	        case TAG_ID.EM:
	        case TAG_ID.TT:
	        case TAG_ID.BIG:
	        case TAG_ID.CODE:
	        case TAG_ID.FONT:
	        case TAG_ID.NOBR:
	        case TAG_ID.SMALL:
	        case TAG_ID.STRIKE:
	        case TAG_ID.STRONG: {
	            callAdoptionAgency(p, token);
	            break;
	        }
	        case TAG_ID.P: {
	            pEndTagInBody(p);
	            break;
	        }
	        case TAG_ID.DL:
	        case TAG_ID.UL:
	        case TAG_ID.OL:
	        case TAG_ID.DIR:
	        case TAG_ID.DIV:
	        case TAG_ID.NAV:
	        case TAG_ID.PRE:
	        case TAG_ID.MAIN:
	        case TAG_ID.MENU:
	        case TAG_ID.ASIDE:
	        case TAG_ID.BUTTON:
	        case TAG_ID.CENTER:
	        case TAG_ID.FIGURE:
	        case TAG_ID.FOOTER:
	        case TAG_ID.HEADER:
	        case TAG_ID.HGROUP:
	        case TAG_ID.DIALOG:
	        case TAG_ID.ADDRESS:
	        case TAG_ID.ARTICLE:
	        case TAG_ID.DETAILS:
	        case TAG_ID.SECTION:
	        case TAG_ID.SUMMARY:
	        case TAG_ID.LISTING:
	        case TAG_ID.FIELDSET:
	        case TAG_ID.BLOCKQUOTE:
	        case TAG_ID.FIGCAPTION: {
	            addressEndTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.LI: {
	            liEndTagInBody(p);
	            break;
	        }
	        case TAG_ID.DD:
	        case TAG_ID.DT: {
	            ddEndTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.H1:
	        case TAG_ID.H2:
	        case TAG_ID.H3:
	        case TAG_ID.H4:
	        case TAG_ID.H5:
	        case TAG_ID.H6: {
	            numberedHeaderEndTagInBody(p);
	            break;
	        }
	        case TAG_ID.BR: {
	            brEndTagInBody(p);
	            break;
	        }
	        case TAG_ID.BODY: {
	            bodyEndTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.HTML: {
	            htmlEndTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.FORM: {
	            formEndTagInBody(p);
	            break;
	        }
	        case TAG_ID.APPLET:
	        case TAG_ID.OBJECT:
	        case TAG_ID.MARQUEE: {
	            appletEndTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.TEMPLATE: {
	            templateEndTagInHead(p, token);
	            break;
	        }
	        default: {
	            genericEndTagInBody(p, token);
	        }
	    }
	}
	function eofInBody(p, token) {
	    if (p.tmplInsertionModeStack.length > 0) {
	        eofInTemplate(p, token);
	    }
	    else {
	        stopParsing(p, token);
	    }
	}
	// The "text" insertion mode
	//------------------------------------------------------------------
	function endTagInText(p, token) {
	    var _a;
	    if (token.tagID === TAG_ID.SCRIPT) {
	        (_a = p.scriptHandler) === null || _a === void 0 ? void 0 : _a.call(p, p.openElements.current);
	    }
	    p.openElements.pop();
	    p.insertionMode = p.originalInsertionMode;
	}
	function eofInText(p, token) {
	    p._err(token, ERR.eofInElementThatCanContainOnlyText);
	    p.openElements.pop();
	    p.insertionMode = p.originalInsertionMode;
	    p.onEof(token);
	}
	// The "in table" insertion mode
	//------------------------------------------------------------------
	function characterInTable(p, token) {
	    if (TABLE_STRUCTURE_TAGS.has(p.openElements.currentTagId)) {
	        p.pendingCharacterTokens.length = 0;
	        p.hasNonWhitespacePendingCharacterToken = false;
	        p.originalInsertionMode = p.insertionMode;
	        p.insertionMode = InsertionMode.IN_TABLE_TEXT;
	        switch (token.type) {
	            case TokenType.CHARACTER: {
	                characterInTableText(p, token);
	                break;
	            }
	            case TokenType.WHITESPACE_CHARACTER: {
	                whitespaceCharacterInTableText(p, token);
	                break;
	            }
	            // Ignore null
	        }
	    }
	    else {
	        tokenInTable(p, token);
	    }
	}
	function captionStartTagInTable(p, token) {
	    p.openElements.clearBackToTableContext();
	    p.activeFormattingElements.insertMarker();
	    p._insertElement(token, NS.HTML);
	    p.insertionMode = InsertionMode.IN_CAPTION;
	}
	function colgroupStartTagInTable(p, token) {
	    p.openElements.clearBackToTableContext();
	    p._insertElement(token, NS.HTML);
	    p.insertionMode = InsertionMode.IN_COLUMN_GROUP;
	}
	function colStartTagInTable(p, token) {
	    p.openElements.clearBackToTableContext();
	    p._insertFakeElement(TAG_NAMES.COLGROUP, TAG_ID.COLGROUP);
	    p.insertionMode = InsertionMode.IN_COLUMN_GROUP;
	    startTagInColumnGroup(p, token);
	}
	function tbodyStartTagInTable(p, token) {
	    p.openElements.clearBackToTableContext();
	    p._insertElement(token, NS.HTML);
	    p.insertionMode = InsertionMode.IN_TABLE_BODY;
	}
	function tdStartTagInTable(p, token) {
	    p.openElements.clearBackToTableContext();
	    p._insertFakeElement(TAG_NAMES.TBODY, TAG_ID.TBODY);
	    p.insertionMode = InsertionMode.IN_TABLE_BODY;
	    startTagInTableBody(p, token);
	}
	function tableStartTagInTable(p, token) {
	    if (p.openElements.hasInTableScope(TAG_ID.TABLE)) {
	        p.openElements.popUntilTagNamePopped(TAG_ID.TABLE);
	        p._resetInsertionMode();
	        p._processStartTag(token);
	    }
	}
	function inputStartTagInTable(p, token) {
	    if (isHiddenInput(token)) {
	        p._appendElement(token, NS.HTML);
	    }
	    else {
	        tokenInTable(p, token);
	    }
	    token.ackSelfClosing = true;
	}
	function formStartTagInTable(p, token) {
	    if (!p.formElement && p.openElements.tmplCount === 0) {
	        p._insertElement(token, NS.HTML);
	        p.formElement = p.openElements.current;
	        p.openElements.pop();
	    }
	}
	function startTagInTable(p, token) {
	    switch (token.tagID) {
	        case TAG_ID.TD:
	        case TAG_ID.TH:
	        case TAG_ID.TR: {
	            tdStartTagInTable(p, token);
	            break;
	        }
	        case TAG_ID.STYLE:
	        case TAG_ID.SCRIPT:
	        case TAG_ID.TEMPLATE: {
	            startTagInHead(p, token);
	            break;
	        }
	        case TAG_ID.COL: {
	            colStartTagInTable(p, token);
	            break;
	        }
	        case TAG_ID.FORM: {
	            formStartTagInTable(p, token);
	            break;
	        }
	        case TAG_ID.TABLE: {
	            tableStartTagInTable(p, token);
	            break;
	        }
	        case TAG_ID.TBODY:
	        case TAG_ID.TFOOT:
	        case TAG_ID.THEAD: {
	            tbodyStartTagInTable(p, token);
	            break;
	        }
	        case TAG_ID.INPUT: {
	            inputStartTagInTable(p, token);
	            break;
	        }
	        case TAG_ID.CAPTION: {
	            captionStartTagInTable(p, token);
	            break;
	        }
	        case TAG_ID.COLGROUP: {
	            colgroupStartTagInTable(p, token);
	            break;
	        }
	        default: {
	            tokenInTable(p, token);
	        }
	    }
	}
	function endTagInTable(p, token) {
	    switch (token.tagID) {
	        case TAG_ID.TABLE: {
	            if (p.openElements.hasInTableScope(TAG_ID.TABLE)) {
	                p.openElements.popUntilTagNamePopped(TAG_ID.TABLE);
	                p._resetInsertionMode();
	            }
	            break;
	        }
	        case TAG_ID.TEMPLATE: {
	            templateEndTagInHead(p, token);
	            break;
	        }
	        case TAG_ID.BODY:
	        case TAG_ID.CAPTION:
	        case TAG_ID.COL:
	        case TAG_ID.COLGROUP:
	        case TAG_ID.HTML:
	        case TAG_ID.TBODY:
	        case TAG_ID.TD:
	        case TAG_ID.TFOOT:
	        case TAG_ID.TH:
	        case TAG_ID.THEAD:
	        case TAG_ID.TR: {
	            // Ignore token
	            break;
	        }
	        default: {
	            tokenInTable(p, token);
	        }
	    }
	}
	function tokenInTable(p, token) {
	    const savedFosterParentingState = p.fosterParentingEnabled;
	    p.fosterParentingEnabled = true;
	    // Process token in `In Body` mode
	    modeInBody(p, token);
	    p.fosterParentingEnabled = savedFosterParentingState;
	}
	// The "in table text" insertion mode
	//------------------------------------------------------------------
	function whitespaceCharacterInTableText(p, token) {
	    p.pendingCharacterTokens.push(token);
	}
	function characterInTableText(p, token) {
	    p.pendingCharacterTokens.push(token);
	    p.hasNonWhitespacePendingCharacterToken = true;
	}
	function tokenInTableText(p, token) {
	    let i = 0;
	    if (p.hasNonWhitespacePendingCharacterToken) {
	        for (; i < p.pendingCharacterTokens.length; i++) {
	            tokenInTable(p, p.pendingCharacterTokens[i]);
	        }
	    }
	    else {
	        for (; i < p.pendingCharacterTokens.length; i++) {
	            p._insertCharacters(p.pendingCharacterTokens[i]);
	        }
	    }
	    p.insertionMode = p.originalInsertionMode;
	    p._processToken(token);
	}
	// The "in caption" insertion mode
	//------------------------------------------------------------------
	const TABLE_VOID_ELEMENTS = new Set([TAG_ID.CAPTION, TAG_ID.COL, TAG_ID.COLGROUP, TAG_ID.TBODY, TAG_ID.TD, TAG_ID.TFOOT, TAG_ID.TH, TAG_ID.THEAD, TAG_ID.TR]);
	function startTagInCaption(p, token) {
	    const tn = token.tagID;
	    if (TABLE_VOID_ELEMENTS.has(tn)) {
	        if (p.openElements.hasInTableScope(TAG_ID.CAPTION)) {
	            p.openElements.generateImpliedEndTags();
	            p.openElements.popUntilTagNamePopped(TAG_ID.CAPTION);
	            p.activeFormattingElements.clearToLastMarker();
	            p.insertionMode = InsertionMode.IN_TABLE;
	            startTagInTable(p, token);
	        }
	    }
	    else {
	        startTagInBody(p, token);
	    }
	}
	function endTagInCaption(p, token) {
	    const tn = token.tagID;
	    switch (tn) {
	        case TAG_ID.CAPTION:
	        case TAG_ID.TABLE: {
	            if (p.openElements.hasInTableScope(TAG_ID.CAPTION)) {
	                p.openElements.generateImpliedEndTags();
	                p.openElements.popUntilTagNamePopped(TAG_ID.CAPTION);
	                p.activeFormattingElements.clearToLastMarker();
	                p.insertionMode = InsertionMode.IN_TABLE;
	                if (tn === TAG_ID.TABLE) {
	                    endTagInTable(p, token);
	                }
	            }
	            break;
	        }
	        case TAG_ID.BODY:
	        case TAG_ID.COL:
	        case TAG_ID.COLGROUP:
	        case TAG_ID.HTML:
	        case TAG_ID.TBODY:
	        case TAG_ID.TD:
	        case TAG_ID.TFOOT:
	        case TAG_ID.TH:
	        case TAG_ID.THEAD:
	        case TAG_ID.TR: {
	            // Ignore token
	            break;
	        }
	        default: {
	            endTagInBody(p, token);
	        }
	    }
	}
	// The "in column group" insertion mode
	//------------------------------------------------------------------
	function startTagInColumnGroup(p, token) {
	    switch (token.tagID) {
	        case TAG_ID.HTML: {
	            startTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.COL: {
	            p._appendElement(token, NS.HTML);
	            token.ackSelfClosing = true;
	            break;
	        }
	        case TAG_ID.TEMPLATE: {
	            startTagInHead(p, token);
	            break;
	        }
	        default: {
	            tokenInColumnGroup(p, token);
	        }
	    }
	}
	function endTagInColumnGroup(p, token) {
	    switch (token.tagID) {
	        case TAG_ID.COLGROUP: {
	            if (p.openElements.currentTagId === TAG_ID.COLGROUP) {
	                p.openElements.pop();
	                p.insertionMode = InsertionMode.IN_TABLE;
	            }
	            break;
	        }
	        case TAG_ID.TEMPLATE: {
	            templateEndTagInHead(p, token);
	            break;
	        }
	        case TAG_ID.COL: {
	            // Ignore token
	            break;
	        }
	        default: {
	            tokenInColumnGroup(p, token);
	        }
	    }
	}
	function tokenInColumnGroup(p, token) {
	    if (p.openElements.currentTagId === TAG_ID.COLGROUP) {
	        p.openElements.pop();
	        p.insertionMode = InsertionMode.IN_TABLE;
	        p._processToken(token);
	    }
	}
	// The "in table body" insertion mode
	//------------------------------------------------------------------
	function startTagInTableBody(p, token) {
	    switch (token.tagID) {
	        case TAG_ID.TR: {
	            p.openElements.clearBackToTableBodyContext();
	            p._insertElement(token, NS.HTML);
	            p.insertionMode = InsertionMode.IN_ROW;
	            break;
	        }
	        case TAG_ID.TH:
	        case TAG_ID.TD: {
	            p.openElements.clearBackToTableBodyContext();
	            p._insertFakeElement(TAG_NAMES.TR, TAG_ID.TR);
	            p.insertionMode = InsertionMode.IN_ROW;
	            startTagInRow(p, token);
	            break;
	        }
	        case TAG_ID.CAPTION:
	        case TAG_ID.COL:
	        case TAG_ID.COLGROUP:
	        case TAG_ID.TBODY:
	        case TAG_ID.TFOOT:
	        case TAG_ID.THEAD: {
	            if (p.openElements.hasTableBodyContextInTableScope()) {
	                p.openElements.clearBackToTableBodyContext();
	                p.openElements.pop();
	                p.insertionMode = InsertionMode.IN_TABLE;
	                startTagInTable(p, token);
	            }
	            break;
	        }
	        default: {
	            startTagInTable(p, token);
	        }
	    }
	}
	function endTagInTableBody(p, token) {
	    const tn = token.tagID;
	    switch (token.tagID) {
	        case TAG_ID.TBODY:
	        case TAG_ID.TFOOT:
	        case TAG_ID.THEAD: {
	            if (p.openElements.hasInTableScope(tn)) {
	                p.openElements.clearBackToTableBodyContext();
	                p.openElements.pop();
	                p.insertionMode = InsertionMode.IN_TABLE;
	            }
	            break;
	        }
	        case TAG_ID.TABLE: {
	            if (p.openElements.hasTableBodyContextInTableScope()) {
	                p.openElements.clearBackToTableBodyContext();
	                p.openElements.pop();
	                p.insertionMode = InsertionMode.IN_TABLE;
	                endTagInTable(p, token);
	            }
	            break;
	        }
	        case TAG_ID.BODY:
	        case TAG_ID.CAPTION:
	        case TAG_ID.COL:
	        case TAG_ID.COLGROUP:
	        case TAG_ID.HTML:
	        case TAG_ID.TD:
	        case TAG_ID.TH:
	        case TAG_ID.TR: {
	            // Ignore token
	            break;
	        }
	        default: {
	            endTagInTable(p, token);
	        }
	    }
	}
	// The "in row" insertion mode
	//------------------------------------------------------------------
	function startTagInRow(p, token) {
	    switch (token.tagID) {
	        case TAG_ID.TH:
	        case TAG_ID.TD: {
	            p.openElements.clearBackToTableRowContext();
	            p._insertElement(token, NS.HTML);
	            p.insertionMode = InsertionMode.IN_CELL;
	            p.activeFormattingElements.insertMarker();
	            break;
	        }
	        case TAG_ID.CAPTION:
	        case TAG_ID.COL:
	        case TAG_ID.COLGROUP:
	        case TAG_ID.TBODY:
	        case TAG_ID.TFOOT:
	        case TAG_ID.THEAD:
	        case TAG_ID.TR: {
	            if (p.openElements.hasInTableScope(TAG_ID.TR)) {
	                p.openElements.clearBackToTableRowContext();
	                p.openElements.pop();
	                p.insertionMode = InsertionMode.IN_TABLE_BODY;
	                startTagInTableBody(p, token);
	            }
	            break;
	        }
	        default: {
	            startTagInTable(p, token);
	        }
	    }
	}
	function endTagInRow(p, token) {
	    switch (token.tagID) {
	        case TAG_ID.TR: {
	            if (p.openElements.hasInTableScope(TAG_ID.TR)) {
	                p.openElements.clearBackToTableRowContext();
	                p.openElements.pop();
	                p.insertionMode = InsertionMode.IN_TABLE_BODY;
	            }
	            break;
	        }
	        case TAG_ID.TABLE: {
	            if (p.openElements.hasInTableScope(TAG_ID.TR)) {
	                p.openElements.clearBackToTableRowContext();
	                p.openElements.pop();
	                p.insertionMode = InsertionMode.IN_TABLE_BODY;
	                endTagInTableBody(p, token);
	            }
	            break;
	        }
	        case TAG_ID.TBODY:
	        case TAG_ID.TFOOT:
	        case TAG_ID.THEAD: {
	            if (p.openElements.hasInTableScope(token.tagID) || p.openElements.hasInTableScope(TAG_ID.TR)) {
	                p.openElements.clearBackToTableRowContext();
	                p.openElements.pop();
	                p.insertionMode = InsertionMode.IN_TABLE_BODY;
	                endTagInTableBody(p, token);
	            }
	            break;
	        }
	        case TAG_ID.BODY:
	        case TAG_ID.CAPTION:
	        case TAG_ID.COL:
	        case TAG_ID.COLGROUP:
	        case TAG_ID.HTML:
	        case TAG_ID.TD:
	        case TAG_ID.TH: {
	            // Ignore end tag
	            break;
	        }
	        default: {
	            endTagInTable(p, token);
	        }
	    }
	}
	// The "in cell" insertion mode
	//------------------------------------------------------------------
	function startTagInCell(p, token) {
	    const tn = token.tagID;
	    if (TABLE_VOID_ELEMENTS.has(tn)) {
	        if (p.openElements.hasInTableScope(TAG_ID.TD) || p.openElements.hasInTableScope(TAG_ID.TH)) {
	            p._closeTableCell();
	            startTagInRow(p, token);
	        }
	    }
	    else {
	        startTagInBody(p, token);
	    }
	}
	function endTagInCell(p, token) {
	    const tn = token.tagID;
	    switch (tn) {
	        case TAG_ID.TD:
	        case TAG_ID.TH: {
	            if (p.openElements.hasInTableScope(tn)) {
	                p.openElements.generateImpliedEndTags();
	                p.openElements.popUntilTagNamePopped(tn);
	                p.activeFormattingElements.clearToLastMarker();
	                p.insertionMode = InsertionMode.IN_ROW;
	            }
	            break;
	        }
	        case TAG_ID.TABLE:
	        case TAG_ID.TBODY:
	        case TAG_ID.TFOOT:
	        case TAG_ID.THEAD:
	        case TAG_ID.TR: {
	            if (p.openElements.hasInTableScope(tn)) {
	                p._closeTableCell();
	                endTagInRow(p, token);
	            }
	            break;
	        }
	        case TAG_ID.BODY:
	        case TAG_ID.CAPTION:
	        case TAG_ID.COL:
	        case TAG_ID.COLGROUP:
	        case TAG_ID.HTML: {
	            // Ignore token
	            break;
	        }
	        default: {
	            endTagInBody(p, token);
	        }
	    }
	}
	// The "in select" insertion mode
	//------------------------------------------------------------------
	function startTagInSelect(p, token) {
	    switch (token.tagID) {
	        case TAG_ID.HTML: {
	            startTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.OPTION: {
	            if (p.openElements.currentTagId === TAG_ID.OPTION) {
	                p.openElements.pop();
	            }
	            p._insertElement(token, NS.HTML);
	            break;
	        }
	        case TAG_ID.OPTGROUP: {
	            if (p.openElements.currentTagId === TAG_ID.OPTION) {
	                p.openElements.pop();
	            }
	            if (p.openElements.currentTagId === TAG_ID.OPTGROUP) {
	                p.openElements.pop();
	            }
	            p._insertElement(token, NS.HTML);
	            break;
	        }
	        case TAG_ID.INPUT:
	        case TAG_ID.KEYGEN:
	        case TAG_ID.TEXTAREA:
	        case TAG_ID.SELECT: {
	            if (p.openElements.hasInSelectScope(TAG_ID.SELECT)) {
	                p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
	                p._resetInsertionMode();
	                if (token.tagID !== TAG_ID.SELECT) {
	                    p._processStartTag(token);
	                }
	            }
	            break;
	        }
	        case TAG_ID.SCRIPT:
	        case TAG_ID.TEMPLATE: {
	            startTagInHead(p, token);
	            break;
	        }
	        // Do nothing
	    }
	}
	function endTagInSelect(p, token) {
	    switch (token.tagID) {
	        case TAG_ID.OPTGROUP: {
	            if (p.openElements.stackTop > 0 &&
	                p.openElements.currentTagId === TAG_ID.OPTION &&
	                p.openElements.tagIDs[p.openElements.stackTop - 1] === TAG_ID.OPTGROUP) {
	                p.openElements.pop();
	            }
	            if (p.openElements.currentTagId === TAG_ID.OPTGROUP) {
	                p.openElements.pop();
	            }
	            break;
	        }
	        case TAG_ID.OPTION: {
	            if (p.openElements.currentTagId === TAG_ID.OPTION) {
	                p.openElements.pop();
	            }
	            break;
	        }
	        case TAG_ID.SELECT: {
	            if (p.openElements.hasInSelectScope(TAG_ID.SELECT)) {
	                p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
	                p._resetInsertionMode();
	            }
	            break;
	        }
	        case TAG_ID.TEMPLATE: {
	            templateEndTagInHead(p, token);
	            break;
	        }
	        // Do nothing
	    }
	}
	// The "in select in table" insertion mode
	//------------------------------------------------------------------
	function startTagInSelectInTable(p, token) {
	    const tn = token.tagID;
	    if (tn === TAG_ID.CAPTION ||
	        tn === TAG_ID.TABLE ||
	        tn === TAG_ID.TBODY ||
	        tn === TAG_ID.TFOOT ||
	        tn === TAG_ID.THEAD ||
	        tn === TAG_ID.TR ||
	        tn === TAG_ID.TD ||
	        tn === TAG_ID.TH) {
	        p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
	        p._resetInsertionMode();
	        p._processStartTag(token);
	    }
	    else {
	        startTagInSelect(p, token);
	    }
	}
	function endTagInSelectInTable(p, token) {
	    const tn = token.tagID;
	    if (tn === TAG_ID.CAPTION ||
	        tn === TAG_ID.TABLE ||
	        tn === TAG_ID.TBODY ||
	        tn === TAG_ID.TFOOT ||
	        tn === TAG_ID.THEAD ||
	        tn === TAG_ID.TR ||
	        tn === TAG_ID.TD ||
	        tn === TAG_ID.TH) {
	        if (p.openElements.hasInTableScope(tn)) {
	            p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
	            p._resetInsertionMode();
	            p.onEndTag(token);
	        }
	    }
	    else {
	        endTagInSelect(p, token);
	    }
	}
	// The "in template" insertion mode
	//------------------------------------------------------------------
	function startTagInTemplate(p, token) {
	    switch (token.tagID) {
	        // First, handle tags that can start without a mode change
	        case TAG_ID.BASE:
	        case TAG_ID.BASEFONT:
	        case TAG_ID.BGSOUND:
	        case TAG_ID.LINK:
	        case TAG_ID.META:
	        case TAG_ID.NOFRAMES:
	        case TAG_ID.SCRIPT:
	        case TAG_ID.STYLE:
	        case TAG_ID.TEMPLATE:
	        case TAG_ID.TITLE: {
	            startTagInHead(p, token);
	            break;
	        }
	        // Re-process the token in the appropriate mode
	        case TAG_ID.CAPTION:
	        case TAG_ID.COLGROUP:
	        case TAG_ID.TBODY:
	        case TAG_ID.TFOOT:
	        case TAG_ID.THEAD: {
	            p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE;
	            p.insertionMode = InsertionMode.IN_TABLE;
	            startTagInTable(p, token);
	            break;
	        }
	        case TAG_ID.COL: {
	            p.tmplInsertionModeStack[0] = InsertionMode.IN_COLUMN_GROUP;
	            p.insertionMode = InsertionMode.IN_COLUMN_GROUP;
	            startTagInColumnGroup(p, token);
	            break;
	        }
	        case TAG_ID.TR: {
	            p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE_BODY;
	            p.insertionMode = InsertionMode.IN_TABLE_BODY;
	            startTagInTableBody(p, token);
	            break;
	        }
	        case TAG_ID.TD:
	        case TAG_ID.TH: {
	            p.tmplInsertionModeStack[0] = InsertionMode.IN_ROW;
	            p.insertionMode = InsertionMode.IN_ROW;
	            startTagInRow(p, token);
	            break;
	        }
	        default: {
	            p.tmplInsertionModeStack[0] = InsertionMode.IN_BODY;
	            p.insertionMode = InsertionMode.IN_BODY;
	            startTagInBody(p, token);
	        }
	    }
	}
	function endTagInTemplate(p, token) {
	    if (token.tagID === TAG_ID.TEMPLATE) {
	        templateEndTagInHead(p, token);
	    }
	}
	function eofInTemplate(p, token) {
	    if (p.openElements.tmplCount > 0) {
	        p.openElements.popUntilTagNamePopped(TAG_ID.TEMPLATE);
	        p.activeFormattingElements.clearToLastMarker();
	        p.tmplInsertionModeStack.shift();
	        p._resetInsertionMode();
	        p.onEof(token);
	    }
	    else {
	        stopParsing(p, token);
	    }
	}
	// The "after body" insertion mode
	//------------------------------------------------------------------
	function startTagAfterBody(p, token) {
	    if (token.tagID === TAG_ID.HTML) {
	        startTagInBody(p, token);
	    }
	    else {
	        tokenAfterBody(p, token);
	    }
	}
	function endTagAfterBody(p, token) {
	    var _a;
	    if (token.tagID === TAG_ID.HTML) {
	        if (!p.fragmentContext) {
	            p.insertionMode = InsertionMode.AFTER_AFTER_BODY;
	        }
	        //NOTE: <html> is never popped from the stack, so we need to updated
	        //the end location explicitly.
	        if (p.options.sourceCodeLocationInfo && p.openElements.tagIDs[0] === TAG_ID.HTML) {
	            p._setEndLocation(p.openElements.items[0], token);
	            // Update the body element, if it doesn't have an end tag
	            const bodyElement = p.openElements.items[1];
	            if (bodyElement && !((_a = p.treeAdapter.getNodeSourceCodeLocation(bodyElement)) === null || _a === void 0 ? void 0 : _a.endTag)) {
	                p._setEndLocation(bodyElement, token);
	            }
	        }
	    }
	    else {
	        tokenAfterBody(p, token);
	    }
	}
	function tokenAfterBody(p, token) {
	    p.insertionMode = InsertionMode.IN_BODY;
	    modeInBody(p, token);
	}
	// The "in frameset" insertion mode
	//------------------------------------------------------------------
	function startTagInFrameset(p, token) {
	    switch (token.tagID) {
	        case TAG_ID.HTML: {
	            startTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.FRAMESET: {
	            p._insertElement(token, NS.HTML);
	            break;
	        }
	        case TAG_ID.FRAME: {
	            p._appendElement(token, NS.HTML);
	            token.ackSelfClosing = true;
	            break;
	        }
	        case TAG_ID.NOFRAMES: {
	            startTagInHead(p, token);
	            break;
	        }
	        // Do nothing
	    }
	}
	function endTagInFrameset(p, token) {
	    if (token.tagID === TAG_ID.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {
	        p.openElements.pop();
	        if (!p.fragmentContext && p.openElements.currentTagId !== TAG_ID.FRAMESET) {
	            p.insertionMode = InsertionMode.AFTER_FRAMESET;
	        }
	    }
	}
	// The "after frameset" insertion mode
	//------------------------------------------------------------------
	function startTagAfterFrameset(p, token) {
	    switch (token.tagID) {
	        case TAG_ID.HTML: {
	            startTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.NOFRAMES: {
	            startTagInHead(p, token);
	            break;
	        }
	        // Do nothing
	    }
	}
	function endTagAfterFrameset(p, token) {
	    if (token.tagID === TAG_ID.HTML) {
	        p.insertionMode = InsertionMode.AFTER_AFTER_FRAMESET;
	    }
	}
	// The "after after body" insertion mode
	//------------------------------------------------------------------
	function startTagAfterAfterBody(p, token) {
	    if (token.tagID === TAG_ID.HTML) {
	        startTagInBody(p, token);
	    }
	    else {
	        tokenAfterAfterBody(p, token);
	    }
	}
	function tokenAfterAfterBody(p, token) {
	    p.insertionMode = InsertionMode.IN_BODY;
	    modeInBody(p, token);
	}
	// The "after after frameset" insertion mode
	//------------------------------------------------------------------
	function startTagAfterAfterFrameset(p, token) {
	    switch (token.tagID) {
	        case TAG_ID.HTML: {
	            startTagInBody(p, token);
	            break;
	        }
	        case TAG_ID.NOFRAMES: {
	            startTagInHead(p, token);
	            break;
	        }
	        // Do nothing
	    }
	}
	// The rules for parsing tokens in foreign content
	//------------------------------------------------------------------
	function nullCharacterInForeignContent(p, token) {
	    token.chars = REPLACEMENT_CHARACTER;
	    p._insertCharacters(token);
	}
	function characterInForeignContent(p, token) {
	    p._insertCharacters(token);
	    p.framesetOk = false;
	}
	function popUntilHtmlOrIntegrationPoint(p) {
	    while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML &&
	        !p._isIntegrationPoint(p.openElements.currentTagId, p.openElements.current)) {
	        p.openElements.pop();
	    }
	}
	function startTagInForeignContent(p, token) {
	    if (causesExit(token)) {
	        popUntilHtmlOrIntegrationPoint(p);
	        p._startTagOutsideForeignContent(token);
	    }
	    else {
	        const current = p._getAdjustedCurrentElement();
	        const currentNs = p.treeAdapter.getNamespaceURI(current);
	        if (currentNs === NS.MATHML) {
	            adjustTokenMathMLAttrs(token);
	        }
	        else if (currentNs === NS.SVG) {
	            adjustTokenSVGTagName(token);
	            adjustTokenSVGAttrs(token);
	        }
	        adjustTokenXMLAttrs(token);
	        if (token.selfClosing) {
	            p._appendElement(token, currentNs);
	        }
	        else {
	            p._insertElement(token, currentNs);
	        }
	        token.ackSelfClosing = true;
	    }
	}
	function endTagInForeignContent(p, token) {
	    if (token.tagID === TAG_ID.P || token.tagID === TAG_ID.BR) {
	        popUntilHtmlOrIntegrationPoint(p);
	        p._endTagOutsideForeignContent(token);
	        return;
	    }
	    for (let i = p.openElements.stackTop; i > 0; i--) {
	        const element = p.openElements.items[i];
	        if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {
	            p._endTagOutsideForeignContent(token);
	            break;
	        }
	        const tagName = p.treeAdapter.getTagName(element);
	        if (tagName.toLowerCase() === token.tagName) {
	            //NOTE: update the token tag name for `_setEndLocation`.
	            token.tagName = tagName;
	            p.openElements.shortenToLength(i);
	            break;
	        }
	    }
	}

	// Sets
	new Set([
	    TAG_NAMES.AREA,
	    TAG_NAMES.BASE,
	    TAG_NAMES.BASEFONT,
	    TAG_NAMES.BGSOUND,
	    TAG_NAMES.BR,
	    TAG_NAMES.COL,
	    TAG_NAMES.EMBED,
	    TAG_NAMES.FRAME,
	    TAG_NAMES.HR,
	    TAG_NAMES.IMG,
	    TAG_NAMES.INPUT,
	    TAG_NAMES.KEYGEN,
	    TAG_NAMES.LINK,
	    TAG_NAMES.META,
	    TAG_NAMES.PARAM,
	    TAG_NAMES.SOURCE,
	    TAG_NAMES.TRACK,
	    TAG_NAMES.WBR,
	]);

	// Shorthands
	/**
	 * Parses an HTML string.
	 *
	 * @param html Input HTML string.
	 * @param options Parsing options.
	 * @returns Document
	 *
	 * @example
	 *
	 * ```js
	 * const parse5 = require('parse5');
	 *
	 * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');
	 *
	 * console.log(document.childNodes[1].tagName); //> 'html'
	 *```
	 */
	function parse$2(html, options) {
	    return Parser.parse(html, options);
	}
	function parseFragment(fragmentContext, html, options) {
	    if (typeof fragmentContext === 'string') {
	        options = html;
	        html = fragmentContext;
	        fragmentContext = null;
	    }
	    const parser = Parser.getFragmentParser(fragmentContext, options);
	    parser.tokenizer.write(html, true);
	    return parser.getFragment();
	}

	/**
	 * @typedef {import('hast').Comment} Comment
	 * @typedef {import('hast').Doctype} Doctype
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').Nodes} Nodes
	 * @typedef {import('hast').Root} Root
	 * @typedef {import('hast').RootContent} RootContent
	 * @typedef {import('hast').Text} Text
	 *
	 * @typedef {import('mdast-util-to-hast').Raw} Raw
	 *
	 * @typedef {import('parse5').DefaultTreeAdapterMap} DefaultTreeAdapterMap
	 * @typedef {import('parse5').ParserOptions<DefaultTreeAdapterMap>} ParserOptions
	 * @typedef {import('parse5').Token.CharacterToken} CharacterToken
	 * @typedef {import('parse5').Token.CommentToken} CommentToken
	 * @typedef {import('parse5').Token.DoctypeToken} DoctypeToken
	 * @typedef {import('parse5').Token.Location} Location
	 * @typedef {import('parse5').Token.TagToken} TagToken
	 *
	 * @typedef {import('unist').Point} Point
	 *
	 * @typedef {import('vfile').VFile} VFile
	 */


	// Node types associated with MDX.
	// <https://github.com/mdx-js/mdx/blob/8a56312/packages/mdx/lib/node-types.js>
	const knownMdxNames = new Set([
	  'mdxFlowExpression',
	  'mdxJsxFlowElement',
	  'mdxJsxTextElement',
	  'mdxTextExpression',
	  'mdxjsEsm'
	]);

	/** @type {ParserOptions} */
	const parseOptions = {sourceCodeLocationInfo: true, scriptingEnabled: false};

	/**
	 * Pass a hast tree through an HTML parser, which will fix nesting, and turn
	 * raw nodes into actual nodes.
	 *
	 * @param {Nodes} tree
	 *   Original hast tree to transform.
	 * @param {Options | null | undefined} [options]
	 *   Configuration (optional).
	 * @returns {Nodes}
	 *   Parsed again tree.
	 */
	function raw$1(tree, options) {
	  const document = documentMode(tree);
	  /** @type {(node: Nodes, state: State) => undefined} */
	  const one = zwitch('type', {
	    handlers: {root: root$3, element: element$2, text: text$1, comment: comment$2, doctype: doctype$1, raw: handleRaw},
	    unknown: unknown$1
	  });

	  /** @type {State} */
	  const state = {
	    parser: document
	      ? new Parser(parseOptions)
	      : Parser.getFragmentParser(undefined, parseOptions),
	    handle(node) {
	      one(node, state);
	    },
	    stitches: false,
	    options: options || {}
	  };

	  one(tree, state);
	  resetTokenizer(state, pointStart());

	  const p5 = document ? state.parser.document : state.parser.getFragment();
	  const result = fromParse5(p5, {
	    // To do: support `space`?
	    file: state.options.file
	  });

	  if (state.stitches) {
	    visit$1(result, 'comment', function (node, index, parent) {
	      const stitch = /** @type {Stitch} */ (/** @type {unknown} */ (node));
	      if (stitch.value.stitch && parent && index !== undefined) {
	        /** @type {Array<RootContent>} */
	        const siblings = parent.children;
	        // @ts-expect-error: assume the stitch is allowed.
	        siblings[index] = stitch.value.stitch;
	        return index
	      }
	    });
	  }

	  // Unpack if possible and when not given a `root`.
	  if (
	    result.type === 'root' &&
	    result.children.length === 1 &&
	    result.children[0].type === tree.type
	  ) {
	    return result.children[0]
	  }

	  return result
	}

	/**
	 * Transform all nodes
	 *
	 * @param {Array<RootContent>} nodes
	 *   hast content.
	 * @param {State} state
	 *   Info passed around about the current state.
	 * @returns {undefined}
	 *   Nothing.
	 */
	function all$4(nodes, state) {
	  let index = -1;

	  /* istanbul ignore else - invalid nodes, see rehypejs/rehype-raw#7. */
	  if (nodes) {
	    while (++index < nodes.length) {
	      state.handle(nodes[index]);
	    }
	  }
	}

	/**
	 * Transform a root.
	 *
	 * @param {Root} node
	 *   hast root node.
	 * @param {State} state
	 *   Info passed around about the current state.
	 * @returns {undefined}
	 *   Nothing.
	 */
	function root$3(node, state) {
	  all$4(node.children, state);
	}

	/**
	 * Transform an element.
	 *
	 * @param {Element} node
	 *   hast element node.
	 * @param {State} state
	 *   Info passed around about the current state.
	 * @returns {undefined}
	 *   Nothing.
	 */
	function element$2(node, state) {
	  startTag(node, state);

	  all$4(node.children, state);

	  endTag(node, state);
	}

	/**
	 * Transform a text.
	 *
	 * @param {Text} node
	 *   hast text node.
	 * @param {State} state
	 *   Info passed around about the current state.
	 * @returns {undefined}
	 *   Nothing.
	 */
	function text$1(node, state) {
	  /** @type {CharacterToken} */
	  const token = {
	    type: TokenType.CHARACTER,
	    chars: node.value,
	    location: createParse5Location(node)
	  };

	  resetTokenizer(state, pointStart(node));
	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  state.parser.currentToken = token;
	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  state.parser._processToken(state.parser.currentToken);
	}

	/**
	 * Transform a doctype.
	 *
	 * @param {Doctype} node
	 *   hast doctype node.
	 * @param {State} state
	 *   Info passed around about the current state.
	 * @returns {undefined}
	 *   Nothing.
	 */
	function doctype$1(node, state) {
	  /** @type {DoctypeToken} */
	  const token = {
	    type: TokenType.DOCTYPE,
	    name: 'html',
	    forceQuirks: false,
	    publicId: '',
	    systemId: '',
	    location: createParse5Location(node)
	  };

	  resetTokenizer(state, pointStart(node));
	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  state.parser.currentToken = token;
	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  state.parser._processToken(state.parser.currentToken);
	}

	/**
	 * Transform a stitch.
	 *
	 * @param {Nodes} node
	 *   unknown node.
	 * @param {State} state
	 *   Info passed around about the current state.
	 * @returns {undefined}
	 *   Nothing.
	 */
	function stitch(node, state) {
	  // Mark that there are stitches, so we need to walk the tree and revert them.
	  state.stitches = true;

	  /** @type {Nodes} */
	  const clone = cloneWithoutChildren(node);

	  // Recurse, because to somewhat handle `[<x>]</x>` (where `[]` denotes the
	  // passed through node).
	  if ('children' in node && 'children' in clone) {
	    // Root in root out.
	    const fakeRoot = /** @type {Root} */ (
	      raw$1({type: 'root', children: node.children}, state.options)
	    );
	    clone.children = fakeRoot.children;
	  }

	  // Hack: `value` is supposed to be a string, but as none of the tools
	  // (`parse5` or `hast-util-from-parse5`) looks at it, we can pass nodes
	  // through.
	  comment$2({type: 'comment', value: {stitch: clone}}, state);
	}

	/**
	 * Transform a comment (or stitch).
	 *
	 * @param {Comment | Stitch} node
	 *   hast comment node.
	 * @param {State} state
	 *   Info passed around about the current state.
	 * @returns {undefined}
	 *   Nothing.
	 */
	function comment$2(node, state) {
	  /** @type {string} */
	  // @ts-expect-error: we pass stitches through.
	  const data = node.value;

	  /** @type {CommentToken} */
	  const token = {
	    type: TokenType.COMMENT,
	    data,
	    location: createParse5Location(node)
	  };
	  resetTokenizer(state, pointStart(node));
	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  state.parser.currentToken = token;
	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  state.parser._processToken(state.parser.currentToken);
	}

	/**
	 * Transform a raw node.
	 *
	 * @param {Raw} node
	 *   hast raw node.
	 * @param {State} state
	 *   Info passed around about the current state.
	 * @returns {undefined}
	 *   Nothing.
	 */
	function handleRaw(node, state) {
	  // Reset preprocessor:
	  // See: <https://github.com/inikulin/parse5/blob/6f7ca60/packages/parse5/lib/tokenizer/preprocessor.ts#L18-L31>.
	  state.parser.tokenizer.preprocessor.html = '';
	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  state.parser.tokenizer.preprocessor.pos = -1;
	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  state.parser.tokenizer.preprocessor.lastGapPos = -2;
	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  state.parser.tokenizer.preprocessor.gapStack = [];
	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  state.parser.tokenizer.preprocessor.skipNextNewLine = false;
	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  state.parser.tokenizer.preprocessor.lastChunkWritten = false;
	  state.parser.tokenizer.preprocessor.endOfChunkHit = false;
	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  state.parser.tokenizer.preprocessor.isEol = false;

	  // Now pass `node.value`.
	  setPoint(state, pointStart(node));
	  state.parser.tokenizer.write(node.value, false);
	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  state.parser.tokenizer._runParsingLoop();

	  // Character references hang, so if we ended there, we need to flush
	  // those too.
	  // We reset the preprocessor as if the document ends here.
	  // Then one single call to the relevant state does the trick, parse5
	  // consumes the whole token.

	  // Note: `State` is not exposed by `parse5`, so these numbers are fragile.
	  // See: <https://github.com/inikulin/parse5/blob/46cba43/packages/parse5/lib/tokenizer/index.ts#L58>
	  // Note: a change to `parse5`, which breaks this, was merged but not released.
	  // Investigate when it is.
	  if (
	    state.parser.tokenizer.state === 72 /* NAMED_CHARACTER_REFERENCE */ ||
	    state.parser.tokenizer.state === 78 /* NUMERIC_CHARACTER_REFERENCE_END */
	  ) {
	    // @ts-expect-error: private.
	    // type-coverage:ignore-next-line
	    state.parser.tokenizer.preprocessor.lastChunkWritten = true;
	    /** @type {number} */
	    // @ts-expect-error: private.
	    // type-coverage:ignore-next-line
	    const cp = state.parser.tokenizer._consume();
	    // @ts-expect-error: private.
	    // type-coverage:ignore-next-line
	    state.parser.tokenizer._callState(cp);
	  }
	}

	/**
	 * Crash on an unknown node.
	 *
	 * @param {unknown} node_
	 *   unknown node.
	 * @param {State} state
	 *   Info passed around about the current state.
	 * @returns {undefined}
	 *   Never.
	 */
	function unknown$1(node_, state) {
	  const node = /** @type {Nodes} */ (node_);

	  if (
	    state.options.passThrough &&
	    state.options.passThrough.includes(node.type)
	  ) {
	    stitch(node, state);
	  } else {
	    let extra = '';

	    if (knownMdxNames.has(node.type)) {
	      extra =
	        ". It looks like you are using MDX nodes with `hast-util-raw` (or `rehype-raw`). If you use this because you are using remark or rehype plugins that inject `'html'` nodes, then please raise an issue with that plugin, as its a bad and slow idea. If you use this because you are using markdown syntax, then you have to configure this utility (or plugin) to pass through these nodes (see `passThrough` in docs), but you can also migrate to use the MDX syntax";
	    }

	    throw new Error('Cannot compile `' + node.type + '` node' + extra)
	  }
	}

	/**
	 * Reset the tokenizer of a parser.
	 *
	 * @param {State} state
	 *   Info passed around about the current state.
	 * @param {Point | undefined} point
	 *   Point.
	 * @returns {undefined}
	 *   Nothing.
	 */
	function resetTokenizer(state, point) {
	  setPoint(state, point);

	  // Process final characters if they’re still there after hibernating.
	  /** @type {CharacterToken} */
	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  const token = state.parser.tokenizer.currentCharacterToken;

	  if (token && token.location) {
	    token.location.endLine = state.parser.tokenizer.preprocessor.line;
	    token.location.endCol = state.parser.tokenizer.preprocessor.col + 1;
	    token.location.endOffset = state.parser.tokenizer.preprocessor.offset + 1;
	    // @ts-expect-error: private.
	    // type-coverage:ignore-next-line
	    state.parser.currentToken = token;
	    // @ts-expect-error: private.
	    // type-coverage:ignore-next-line
	    state.parser._processToken(state.parser.currentToken);
	  }

	  // Reset tokenizer:
	  // See: <https://github.com/inikulin/parse5/blob/6f7ca60/packages/parse5/lib/tokenizer/index.ts#L187-L223>.
	  // Especially putting it back in the `data` state is useful: some elements,
	  // like textareas and iframes, change the state.
	  // See GH-7.
	  // But also if broken HTML is in `raw`, and then a correct element is given.
	  // See GH-11.
	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  state.parser.tokenizer.paused = false;
	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  state.parser.tokenizer.inLoop = false;

	  // Note: don’t reset `state`, `inForeignNode`, or `lastStartTagName`, we
	  // manually update those when needed.
	  state.parser.tokenizer.active = false;
	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  state.parser.tokenizer.returnState = TokenizerMode.DATA;
	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  state.parser.tokenizer.charRefCode = -1;
	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  state.parser.tokenizer.consumedAfterSnapshot = -1;
	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  state.parser.tokenizer.currentLocation = null;
	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  state.parser.tokenizer.currentCharacterToken = null;
	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  state.parser.tokenizer.currentToken = null;
	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  state.parser.tokenizer.currentAttr = {name: '', value: ''};
	}

	/**
	 * Set current location.
	 *
	 * @param {State} state
	 *   Info passed around about the current state.
	 * @param {Point | undefined} point
	 *   Point.
	 * @returns {undefined}
	 *   Nothing.
	 */
	function setPoint(state, point) {
	  if (point && point.offset !== undefined) {
	    /** @type {Location} */
	    const location = {
	      startLine: point.line,
	      startCol: point.column,
	      startOffset: point.offset,
	      endLine: -1,
	      endCol: -1,
	      endOffset: -1
	    };

	    // @ts-expect-error: private.
	    // type-coverage:ignore-next-line
	    state.parser.tokenizer.preprocessor.lineStartPos = -point.column + 1; // Looks weird, but ensures we get correct positional info.
	    state.parser.tokenizer.preprocessor.droppedBufferSize = point.offset;
	    state.parser.tokenizer.preprocessor.line = point.line;
	    // @ts-expect-error: private.
	    // type-coverage:ignore-next-line
	    state.parser.tokenizer.currentLocation = location;
	  }
	}

	/**
	 * Emit a start tag.
	 *
	 * @param {Element} node
	 *   Element.
	 * @param {State} state
	 *   Info passed around about the current state.
	 * @returns {undefined}
	 *   Nothing.
	 */
	function startTag(node, state) {
	  // Ignore tags if we’re in plain text.
	  if (state.parser.tokenizer.state === TokenizerMode.PLAINTEXT) return

	  resetTokenizer(state, pointStart(node));

	  const current = state.parser.openElements.current;
	  let ns = 'namespaceURI' in current ? current.namespaceURI : webNamespaces.html;

	  if (ns === webNamespaces.html && node.tagName === 'svg') {
	    ns = webNamespaces.svg;
	  }

	  const result = toParse5(
	    // Shallow clone to not delve into `children`: we only need the attributes.
	    {...node, children: []},
	    {space: ns === webNamespaces.svg ? 'svg' : 'html'}
	  );
	  // Always element.
	  /* c8 ignore next */
	  const attrs = 'attrs' in result ? result.attrs : [];

	  /** @type {TagToken} */
	  const tag = {
	    type: TokenType.START_TAG,
	    tagName: node.tagName,
	    tagID: getTagID(node.tagName),
	    // We always send start and end tags.
	    selfClosing: false,
	    ackSelfClosing: false,
	    attrs,
	    location: createParse5Location(node)
	  };

	  // The HTML parsing algorithm works by doing half of the state management in
	  // the tokenizer and half in the parser.
	  // We can’t use the tokenizer here, as we don’t have strings.
	  // So we act *as if* the tokenizer emits tokens:

	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  state.parser.currentToken = tag;
	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  state.parser._processToken(state.parser.currentToken);

	  // …but then we still need a bunch of work that the tokenizer would normally
	  // do, such as:

	  // Set a tag name, similar to how the tokenizer would do it.
	  state.parser.tokenizer.lastStartTagName = node.tagName;

	  // `inForeignNode` is correctly set by the parser.
	}

	/**
	 * Emit an end tag.
	 *
	 * @param {Element} node
	 *   Element.
	 * @param {State} state
	 *   Info passed around about the current state.
	 * @returns {undefined}
	 *   Nothing.
	 */
	function endTag(node, state) {
	  // Do not emit closing tags for HTML void elements.
	  if (
	    !state.parser.tokenizer.inForeignNode &&
	    htmlVoidElements.includes(node.tagName)
	  ) {
	    return
	  }

	  // Ignore tags if we’re in plain text.
	  if (state.parser.tokenizer.state === TokenizerMode.PLAINTEXT) return

	  resetTokenizer(state, pointEnd(node));

	  /** @type {TagToken} */
	  const tag = {
	    type: TokenType.END_TAG,
	    tagName: node.tagName,
	    tagID: getTagID(node.tagName),
	    selfClosing: false,
	    ackSelfClosing: false,
	    attrs: [],
	    location: createParse5Location(node)
	  };

	  // The HTML parsing algorithm works by doing half of the state management in
	  // the tokenizer and half in the parser.
	  // We can’t use the tokenizer here, as we don’t have strings.
	  // So we act *as if* the tokenizer emits tokens:

	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  state.parser.currentToken = tag;
	  // @ts-expect-error: private.
	  // type-coverage:ignore-next-line
	  state.parser._processToken(state.parser.currentToken);

	  // …but then we still need a bunch of work that the tokenizer would normally
	  // do, such as:

	  // Switch back to the data state after alternative states that don’t accept
	  // tags:
	  if (
	    // Current element is closed.
	    tag.tagName === state.parser.tokenizer.lastStartTagName &&
	    // `<textarea>` and `<title>`
	    (state.parser.tokenizer.state === TokenizerMode.RCDATA ||
	      // `<iframe>`, `<noembed>`, `<style>`, `<xmp>`
	      state.parser.tokenizer.state === TokenizerMode.RAWTEXT ||
	      // `<script>`
	      state.parser.tokenizer.state === TokenizerMode.SCRIPT_DATA)
	  ) {
	    state.parser.tokenizer.state = TokenizerMode.DATA;
	  }
	}

	/**
	 * Check if `node` represents a whole document or a fragment.
	 *
	 * @param {Nodes} node
	 *   hast node.
	 * @returns {boolean}
	 *   Whether this represents a whole document or a fragment.
	 */
	function documentMode(node) {
	  const head = node.type === 'root' ? node.children[0] : node;
	  return Boolean(
	    head &&
	      (head.type === 'doctype' ||
	        (head.type === 'element' && head.tagName === 'html'))
	  )
	}

	/**
	 * Get a `parse5` location from a node.
	 *
	 * @param {Nodes | Stitch} node
	 *   hast node.
	 * @returns {Location}
	 *   `parse5` location.
	 */
	function createParse5Location(node) {
	  const start = pointStart(node) || {
	    line: undefined,
	    column: undefined,
	    offset: undefined
	  };
	  const end = pointEnd(node) || {
	    line: undefined,
	    column: undefined,
	    offset: undefined
	  };

	  /** @type {Record<keyof Location, number | undefined>} */
	  const location = {
	    startLine: start.line,
	    startCol: start.column,
	    startOffset: start.offset,
	    endLine: end.line,
	    endCol: end.column,
	    endOffset: end.offset
	  };

	  // @ts-expect-error: unist point values can be `undefined` in hast, which
	  // `parse5` types don’t want.
	  return location
	}

	/**
	 * @template {Nodes} NodeType
	 *   Node type.
	 * @param {NodeType} node
	 *   Node to clone.
	 * @returns {NodeType}
	 *   Cloned node, without children.
	 */
	function cloneWithoutChildren(node) {
	  return 'children' in node
	    ? structuredClone$1({...node, children: []})
	    : structuredClone$1(node)
	}

	/**
	 * @typedef {import('hast').Root} Root
	 * @typedef {import('hast-util-raw').Options} RawOptions
	 * @typedef {import('vfile').VFile} VFile
	 */


	/**
	 * Parse the tree (and raw nodes) again, keeping positional info okay.
	 *
	 * @param {Options | null | undefined}  [options]
	 *   Configuration (optional).
	 * @returns
	 *   Transform.
	 */
	function rehypeRaw(options) {
	  /**
	   * @param {Root} tree
	   *   Tree.
	   * @param {VFile} file
	   *   File.
	   * @returns {Root}
	   *   New tree.
	   */
	  return function (tree, file) {
	    // Assume root in -> root out.
	    const result = /** @type {Root} */ (raw$1(tree, {...options, file}));
	    return result
	  }
	}

	/**! 
	 * @uiw/copy-to-clipboard v1.0.16 
	 * Copy to clipboard. 
	 * 
	 * Copyright (c) 2023 Kenny Wang 
	 * https://github.com/uiwjs/copy-to-clipboard.git 
	 * 
	 * @website: https://uiwjs.github.io/copy-to-clipboard
	 
	 * Licensed under the MIT license 
	 */

	/**
	 * *** This styling is an extra step which is likely not required. ***
	 * https://github.com/w3c/clipboard-apis/blob/master/explainer.adoc#writing-to-the-clipboard
	 * 
	 * Why is it here? To ensure:
	 * 
	 * 1. the element is able to have focus and selection.
	 * 2. if element was to flash render it has minimal visual impact.
	 * 3. less flakyness with selection and copying which **might** occur if
	 *     the textarea element is not visible.
	 *
	 *   The likelihood is the element won't even render, not even a flash,
	 *   so some of these are just precautions. However in IE the element
	 *   is visible whilst the popup box asking the user for permission for
	 *   the web page to copy to the clipboard.
	 *  
	 *   Place in top-left corner of screen regardless of scroll position.
	 *
	 * @typedef CopyTextToClipboard
	 * @property {(text: string, method?: (isCopy: boolean) => void) => void} void
	 * @returns {void}
	 * 
	 * @param {string} text 
	 * @param {CopyTextToClipboard} cb 
	 */
	function copyTextToClipboard(text, cb) {
	  if (typeof document === "undefined") return;
	  const el = document.createElement('textarea');
	  el.value = text;
	  el.setAttribute('readonly', '');
	  el.style = {
	    position: 'absolute',
	    left: '-9999px',
	  };
	  document.body.appendChild(el);
	  const selected = document.getSelection().rangeCount > 0 ? document.getSelection().getRangeAt(0) : false;
	  el.select();
	  let isCopy = false;
	  try {
	    const successful = document.execCommand('copy');
	    isCopy = !!successful;
	  } catch (err) {
	    isCopy = false;
	  }
	  document.body.removeChild(el);
	  if (selected && document.getSelection) {
	    document.getSelection().removeAllRanges();
	    document.getSelection().addRange(selected);
	  }
	  cb && cb(isCopy);
	}

	function getParentElement(target) {
	  if (!target) return null;
	  var dom = target;
	  if (dom.dataset.code && dom.classList.contains('copied')) {
	    return dom;
	  }
	  if (dom.parentElement) {
	    return getParentElement(dom.parentElement);
	  }
	  return null;
	}
	function useCopied(container) {
	  var handle = event => {
	    var target = getParentElement(event.target);
	    if (!target) return;
	    target.classList.add('active');
	    copyTextToClipboard(target.dataset.code, function () {
	      setTimeout(() => {
	        target.classList.remove('active');
	      }, 2000);
	    });
	  };
	  reactExports.useEffect(() => {
	    var _container$current, _container$current2;
	    (_container$current = container.current) == null || _container$current.removeEventListener('click', handle, false);
	    (_container$current2 = container.current) == null || _container$current2.addEventListener('click', handle, false);
	    return () => {
	      var _container$current3;
	      (_container$current3 = container.current) == null || _container$current3.removeEventListener('click', handle, false);
	    };
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, [container]);
	}

	function styleInject(css, ref) {
	  if ( ref === void 0 ) ref = {};
	  var insertAt = ref.insertAt;

	  if (!css || typeof document === 'undefined') { return; }

	  var head = document.head || document.getElementsByTagName('head')[0];
	  var style = document.createElement('style');
	  style.type = 'text/css';

	  if (insertAt === 'top') {
	    if (head.firstChild) {
	      head.insertBefore(style, head.firstChild);
	    } else {
	      head.appendChild(style);
	    }
	  } else {
	    head.appendChild(style);
	  }

	  if (style.styleSheet) {
	    style.styleSheet.cssText = css;
	  } else {
	    style.appendChild(document.createTextNode(css));
	  }
	}

	var css_248z$5 = "@media (prefers-color-scheme: dark) {\n  .wmde-markdown,\n  .wmde-markdown-var {\n    color-scheme: dark;\n    --color-prettylights-syntax-comment: #8b949e;\n    --color-prettylights-syntax-constant: #79c0ff;\n    --color-prettylights-syntax-entity: #d2a8ff;\n    --color-prettylights-syntax-storage-modifier-import: #c9d1d9;\n    --color-prettylights-syntax-entity-tag: #7ee787;\n    --color-prettylights-syntax-keyword: #ff7b72;\n    --color-prettylights-syntax-string: #a5d6ff;\n    --color-prettylights-syntax-variable: #ffa657;\n    --color-prettylights-syntax-brackethighlighter-unmatched: #f85149;\n    --color-prettylights-syntax-invalid-illegal-text: #f0f6fc;\n    --color-prettylights-syntax-invalid-illegal-bg: #8e1519;\n    --color-prettylights-syntax-carriage-return-text: #f0f6fc;\n    --color-prettylights-syntax-carriage-return-bg: #b62324;\n    --color-prettylights-syntax-string-regexp: #7ee787;\n    --color-prettylights-syntax-markup-list: #f2cc60;\n    --color-prettylights-syntax-markup-heading: #1f6feb;\n    --color-prettylights-syntax-markup-italic: #c9d1d9;\n    --color-prettylights-syntax-markup-bold: #c9d1d9;\n    --color-prettylights-syntax-markup-deleted-text: #ffdcd7;\n    --color-prettylights-syntax-markup-deleted-bg: #67060c;\n    --color-prettylights-syntax-markup-inserted-text: #aff5b4;\n    --color-prettylights-syntax-markup-inserted-bg: #033a16;\n    --color-prettylights-syntax-markup-changed-text: #ffdfb6;\n    --color-prettylights-syntax-markup-changed-bg: #5a1e02;\n    --color-prettylights-syntax-markup-ignored-text: #c9d1d9;\n    --color-prettylights-syntax-markup-ignored-bg: #1158c7;\n    --color-prettylights-syntax-meta-diff-range: #d2a8ff;\n    --color-prettylights-syntax-brackethighlighter-angle: #8b949e;\n    --color-prettylights-syntax-sublimelinter-gutter-mark: #484f58;\n    --color-prettylights-syntax-constant-other-reference-link: #a5d6ff;\n    --color-fg-default: #c9d1d9;\n    --color-fg-muted: #8b949e;\n    --color-fg-subtle: #484f58;\n    --color-canvas-default: #0d1117;\n    --color-canvas-subtle: #161b22;\n    --color-border-default: #30363d;\n    --color-border-muted: #21262d;\n    --color-neutral-muted: rgba(110, 118, 129, 0.4);\n    --color-accent-fg: #58a6ff;\n    --color-accent-emphasis: #1f6feb;\n    --color-attention-subtle: rgba(187, 128, 9, 0.15);\n    --color-danger-fg: #f85149;\n  }\n}\n@media (prefers-color-scheme: light) {\n  .wmde-markdown,\n  .wmde-markdown-var {\n    color-scheme: light;\n    --color-prettylights-syntax-comment: #6e7781;\n    --color-prettylights-syntax-constant: #0550ae;\n    --color-prettylights-syntax-entity: #8250df;\n    --color-prettylights-syntax-storage-modifier-import: #24292f;\n    --color-prettylights-syntax-entity-tag: #116329;\n    --color-prettylights-syntax-keyword: #cf222e;\n    --color-prettylights-syntax-string: #0a3069;\n    --color-prettylights-syntax-variable: #953800;\n    --color-prettylights-syntax-brackethighlighter-unmatched: #82071e;\n    --color-prettylights-syntax-invalid-illegal-text: #f6f8fa;\n    --color-prettylights-syntax-invalid-illegal-bg: #82071e;\n    --color-prettylights-syntax-carriage-return-text: #f6f8fa;\n    --color-prettylights-syntax-carriage-return-bg: #cf222e;\n    --color-prettylights-syntax-string-regexp: #116329;\n    --color-prettylights-syntax-markup-list: #3b2300;\n    --color-prettylights-syntax-markup-heading: #0550ae;\n    --color-prettylights-syntax-markup-italic: #24292f;\n    --color-prettylights-syntax-markup-bold: #24292f;\n    --color-prettylights-syntax-markup-deleted-text: #82071e;\n    --color-prettylights-syntax-markup-deleted-bg: #ffebe9;\n    --color-prettylights-syntax-markup-inserted-text: #116329;\n    --color-prettylights-syntax-markup-inserted-bg: #dafbe1;\n    --color-prettylights-syntax-markup-changed-text: #953800;\n    --color-prettylights-syntax-markup-changed-bg: #ffd8b5;\n    --color-prettylights-syntax-markup-ignored-text: #eaeef2;\n    --color-prettylights-syntax-markup-ignored-bg: #0550ae;\n    --color-prettylights-syntax-meta-diff-range: #8250df;\n    --color-prettylights-syntax-brackethighlighter-angle: #57606a;\n    --color-prettylights-syntax-sublimelinter-gutter-mark: #8c959f;\n    --color-prettylights-syntax-constant-other-reference-link: #0a3069;\n    --color-fg-default: #24292f;\n    --color-fg-muted: #57606a;\n    --color-fg-subtle: #6e7781;\n    --color-canvas-default: #ffffff;\n    --color-canvas-subtle: #f6f8fa;\n    --color-border-default: #d0d7de;\n    --color-border-muted: hsl(210, 18%, 87%);\n    --color-neutral-muted: rgba(175, 184, 193, 0.2);\n    --color-accent-fg: #0969da;\n    --color-accent-emphasis: #0969da;\n    --color-attention-subtle: #fff8c5;\n    --color-danger-fg: #cf222e;\n  }\n}\n[data-color-mode*='dark'] .wmde-markdown,\n[data-color-mode*='dark'] .wmde-markdown-var,\n.wmde-markdown-var[data-color-mode*='dark'],\n.wmde-markdown[data-color-mode*='dark'],\nbody[data-color-mode*='dark'] {\n  color-scheme: dark;\n  --color-prettylights-syntax-comment: #8b949e;\n  --color-prettylights-syntax-constant: #79c0ff;\n  --color-prettylights-syntax-entity: #d2a8ff;\n  --color-prettylights-syntax-storage-modifier-import: #c9d1d9;\n  --color-prettylights-syntax-entity-tag: #7ee787;\n  --color-prettylights-syntax-keyword: #ff7b72;\n  --color-prettylights-syntax-string: #a5d6ff;\n  --color-prettylights-syntax-variable: #ffa657;\n  --color-prettylights-syntax-brackethighlighter-unmatched: #f85149;\n  --color-prettylights-syntax-invalid-illegal-text: #f0f6fc;\n  --color-prettylights-syntax-invalid-illegal-bg: #8e1519;\n  --color-prettylights-syntax-carriage-return-text: #f0f6fc;\n  --color-prettylights-syntax-carriage-return-bg: #b62324;\n  --color-prettylights-syntax-string-regexp: #7ee787;\n  --color-prettylights-syntax-markup-list: #f2cc60;\n  --color-prettylights-syntax-markup-heading: #1f6feb;\n  --color-prettylights-syntax-markup-italic: #c9d1d9;\n  --color-prettylights-syntax-markup-bold: #c9d1d9;\n  --color-prettylights-syntax-markup-deleted-text: #ffdcd7;\n  --color-prettylights-syntax-markup-deleted-bg: #67060c;\n  --color-prettylights-syntax-markup-inserted-text: #aff5b4;\n  --color-prettylights-syntax-markup-inserted-bg: #033a16;\n  --color-prettylights-syntax-markup-changed-text: #ffdfb6;\n  --color-prettylights-syntax-markup-changed-bg: #5a1e02;\n  --color-prettylights-syntax-markup-ignored-text: #c9d1d9;\n  --color-prettylights-syntax-markup-ignored-bg: #1158c7;\n  --color-prettylights-syntax-meta-diff-range: #d2a8ff;\n  --color-prettylights-syntax-brackethighlighter-angle: #8b949e;\n  --color-prettylights-syntax-sublimelinter-gutter-mark: #484f58;\n  --color-prettylights-syntax-constant-other-reference-link: #a5d6ff;\n  --color-fg-default: #c9d1d9;\n  --color-fg-muted: #8b949e;\n  --color-fg-subtle: #484f58;\n  --color-canvas-default: #0d1117;\n  --color-canvas-subtle: #161b22;\n  --color-border-default: #30363d;\n  --color-border-muted: #21262d;\n  --color-neutral-muted: rgba(110, 118, 129, 0.4);\n  --color-accent-fg: #58a6ff;\n  --color-accent-emphasis: #1f6feb;\n  --color-attention-subtle: rgba(187, 128, 9, 0.15);\n  --color-danger-fg: #f85149;\n}\n[data-color-mode*='light'] .wmde-markdown,\n[data-color-mode*='light'] .wmde-markdown-var,\n.wmde-markdown-var[data-color-mode*='light'],\n.wmde-markdown[data-color-mode*='light'],\nbody[data-color-mode*='light'] {\n  color-scheme: light;\n  --color-prettylights-syntax-comment: #6e7781;\n  --color-prettylights-syntax-constant: #0550ae;\n  --color-prettylights-syntax-entity: #8250df;\n  --color-prettylights-syntax-storage-modifier-import: #24292f;\n  --color-prettylights-syntax-entity-tag: #116329;\n  --color-prettylights-syntax-keyword: #cf222e;\n  --color-prettylights-syntax-string: #0a3069;\n  --color-prettylights-syntax-variable: #953800;\n  --color-prettylights-syntax-brackethighlighter-unmatched: #82071e;\n  --color-prettylights-syntax-invalid-illegal-text: #f6f8fa;\n  --color-prettylights-syntax-invalid-illegal-bg: #82071e;\n  --color-prettylights-syntax-carriage-return-text: #f6f8fa;\n  --color-prettylights-syntax-carriage-return-bg: #cf222e;\n  --color-prettylights-syntax-string-regexp: #116329;\n  --color-prettylights-syntax-markup-list: #3b2300;\n  --color-prettylights-syntax-markup-heading: #0550ae;\n  --color-prettylights-syntax-markup-italic: #24292f;\n  --color-prettylights-syntax-markup-bold: #24292f;\n  --color-prettylights-syntax-markup-deleted-text: #82071e;\n  --color-prettylights-syntax-markup-deleted-bg: #ffebe9;\n  --color-prettylights-syntax-markup-inserted-text: #116329;\n  --color-prettylights-syntax-markup-inserted-bg: #dafbe1;\n  --color-prettylights-syntax-markup-changed-text: #953800;\n  --color-prettylights-syntax-markup-changed-bg: #ffd8b5;\n  --color-prettylights-syntax-markup-ignored-text: #eaeef2;\n  --color-prettylights-syntax-markup-ignored-bg: #0550ae;\n  --color-prettylights-syntax-meta-diff-range: #8250df;\n  --color-prettylights-syntax-brackethighlighter-angle: #57606a;\n  --color-prettylights-syntax-sublimelinter-gutter-mark: #8c959f;\n  --color-prettylights-syntax-constant-other-reference-link: #0a3069;\n  --color-fg-default: #24292f;\n  --color-fg-muted: #57606a;\n  --color-fg-subtle: #6e7781;\n  --color-canvas-default: #ffffff;\n  --color-canvas-subtle: #f6f8fa;\n  --color-border-default: #d0d7de;\n  --color-border-muted: hsl(210, 18%, 87%);\n  --color-neutral-muted: rgba(175, 184, 193, 0.2);\n  --color-accent-fg: #0969da;\n  --color-accent-emphasis: #0969da;\n  --color-attention-subtle: #fff8c5;\n  --color-danger-fg: #cf222e;\n}\n.wmde-markdown {\n  -webkit-text-size-adjust: 100%;\n  font-family: -apple-system, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\n  font-size: 16px;\n  line-height: 1.5;\n  word-wrap: break-word;\n  color: var(--color-fg-default);\n  background-color: var(--color-canvas-default);\n}\n.wmde-markdown details,\n.wmde-markdown figcaption,\n.wmde-markdown figure {\n  display: block;\n}\n.wmde-markdown summary {\n  display: list-item;\n}\n.wmde-markdown [hidden] {\n  display: none !important;\n}\n.wmde-markdown a {\n  background-color: transparent;\n  color: var(--color-accent-fg);\n  text-decoration: none;\n}\n.wmde-markdown a:active,\n.wmde-markdown a:hover {\n  outline-width: 0;\n}\n.wmde-markdown abbr[title] {\n  border-bottom: none;\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n.wmde-markdown b,\n.wmde-markdown strong {\n  font-weight: 600;\n}\n.wmde-markdown dfn {\n  font-style: italic;\n}\n.wmde-markdown h1 {\n  margin: 0.67em 0;\n  font-weight: 600;\n  padding-bottom: 0.3em;\n  font-size: 2em;\n  border-bottom: 1px solid var(--color-border-muted);\n}\n.wmde-markdown mark {\n  background-color: var(--color-attention-subtle);\n  color: var(--color-text-primary);\n}\n.wmde-markdown small {\n  font-size: 90%;\n}\n.wmde-markdown sub,\n.wmde-markdown sup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n.wmde-markdown sub {\n  bottom: -0.25em;\n}\n.wmde-markdown sup {\n  top: -0.5em;\n}\n.wmde-markdown img {\n  display: inline-block;\n  border-style: none;\n  max-width: 100%;\n  box-sizing: content-box;\n  background-color: var(--color-canvas-default);\n}\n.wmde-markdown code,\n.wmde-markdown kbd,\n.wmde-markdown pre,\n.wmde-markdown samp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n.wmde-markdown figure {\n  margin: 1em 40px;\n}\n.wmde-markdown hr {\n  box-sizing: content-box;\n  overflow: hidden;\n  background: transparent;\n  border: 0;\n  border-bottom: 1px solid var(--color-border-muted);\n  height: 0.25em;\n  padding: 0;\n  margin: 24px 0;\n  background-color: var(--color-border-default);\n}\n.wmde-markdown input {\n  font: inherit;\n  margin: 0;\n  overflow: visible;\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n.wmde-markdown [type='button'],\n.wmde-markdown [type='reset'],\n.wmde-markdown [type='submit'] {\n  -webkit-appearance: button;\n}\n.wmde-markdown [type='button']::-moz-focus-inner,\n.wmde-markdown [type='reset']::-moz-focus-inner,\n.wmde-markdown [type='submit']::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n.wmde-markdown [type='button']:-moz-focusring,\n.wmde-markdown [type='reset']:-moz-focusring,\n.wmde-markdown [type='submit']:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n.wmde-markdown [type='checkbox'],\n.wmde-markdown [type='radio'] {\n  box-sizing: border-box;\n  padding: 0;\n}\n.wmde-markdown [type='number']::-webkit-inner-spin-button,\n.wmde-markdown [type='number']::-webkit-outer-spin-button {\n  height: auto;\n}\n.wmde-markdown [type='search'] {\n  -webkit-appearance: textfield;\n  outline-offset: -2px;\n}\n.wmde-markdown [type='search']::-webkit-search-cancel-button,\n.wmde-markdown [type='search']::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n.wmde-markdown ::-webkit-input-placeholder {\n  color: inherit;\n  opacity: 0.54;\n}\n.wmde-markdown ::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  font: inherit;\n}\n.wmde-markdown a:hover {\n  text-decoration: underline;\n}\n.wmde-markdown hr::before {\n  display: table;\n  content: '';\n}\n.wmde-markdown hr::after {\n  display: table;\n  clear: both;\n  content: '';\n}\n.wmde-markdown table {\n  border-spacing: 0;\n  border-collapse: collapse;\n  display: block;\n  width: -webkit-max-content;\n  width: max-content;\n  max-width: 100%;\n}\n.wmde-markdown td,\n.wmde-markdown th {\n  padding: 0;\n}\n.wmde-markdown details summary {\n  cursor: pointer;\n}\n.wmde-markdown details:not([open]) > *:not(summary) {\n  display: none !important;\n}\n.wmde-markdown kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font: 11px ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace;\n  line-height: 10px;\n  color: var(--color-fg-default);\n  vertical-align: middle;\n  background-color: var(--color-canvas-subtle);\n  border: solid 1px var(--color-neutral-muted);\n  border-bottom-color: var(--color-neutral-muted);\n  border-radius: 6px;\n  box-shadow: inset 0 -1px 0 var(--color-neutral-muted);\n}\n.wmde-markdown h1,\n.wmde-markdown h2,\n.wmde-markdown h3,\n.wmde-markdown h4,\n.wmde-markdown h5,\n.wmde-markdown h6 {\n  margin-top: 24px;\n  margin-bottom: 16px;\n  font-weight: 600;\n  line-height: 1.25;\n}\n.wmde-markdown td,\n.wmde-markdown th {\n  padding: 0;\n}\n.wmde-markdown details summary {\n  cursor: pointer;\n}\n.wmde-markdown details:not([open]) > *:not(summary) {\n  display: none !important;\n}\n.wmde-markdown kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font: 11px ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace;\n  line-height: 10px;\n  color: var(--color-fg-default);\n  vertical-align: middle;\n  background-color: var(--color-canvas-subtle);\n  border: solid 1px var(--color-neutral-muted);\n  border-bottom-color: var(--color-neutral-muted);\n  border-radius: 6px;\n  box-shadow: inset 0 -1px 0 var(--color-neutral-muted);\n}\n.wmde-markdown h1,\n.wmde-markdown h2,\n.wmde-markdown h3,\n.wmde-markdown h4,\n.wmde-markdown h5,\n.wmde-markdown h6 {\n  margin-top: 24px;\n  margin-bottom: 16px;\n  font-weight: 600;\n  line-height: 1.25;\n}\n.wmde-markdown h2 {\n  font-weight: 600;\n  padding-bottom: 0.3em;\n  font-size: 1.5em;\n  border-bottom: 1px solid var(--color-border-muted);\n}\n.wmde-markdown h3 {\n  font-weight: 600;\n  font-size: 1.25em;\n}\n.wmde-markdown h4 {\n  font-weight: 600;\n  font-size: 1em;\n}\n.wmde-markdown h5 {\n  font-weight: 600;\n  font-size: 0.875em;\n}\n.wmde-markdown h6 {\n  font-weight: 600;\n  font-size: 0.85em;\n  color: var(--color-fg-muted);\n}\n.wmde-markdown p {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\n.wmde-markdown blockquote {\n  margin: 0;\n  padding: 0 1em;\n  color: var(--color-fg-muted);\n  border-left: 0.25em solid var(--color-border-default);\n}\n.wmde-markdown ul,\n.wmde-markdown ol {\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 2em;\n}\n.wmde-markdown ol ol,\n.wmde-markdown ul ol {\n  list-style-type: lower-roman;\n}\n.wmde-markdown ul ul ol,\n.wmde-markdown ul ol ol,\n.wmde-markdown ol ul ol,\n.wmde-markdown ol ol ol {\n  list-style-type: lower-alpha;\n}\n.wmde-markdown dd {\n  margin-left: 0;\n}\n.wmde-markdown tt,\n.wmde-markdown code {\n  font-family: ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace;\n  font-size: 12px;\n}\n.wmde-markdown pre {\n  margin-top: 0;\n  margin-bottom: 0;\n  font-family: ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace;\n  font-size: 12px;\n  word-wrap: normal;\n}\n.wmde-markdown .octicon {\n  display: inline-block;\n  overflow: visible !important;\n  vertical-align: text-bottom;\n  fill: currentColor;\n}\n.wmde-markdown ::placeholder {\n  color: var(--color-fg-subtle);\n  opacity: 1;\n}\n.wmde-markdown input::-webkit-outer-spin-button,\n.wmde-markdown input::-webkit-inner-spin-button {\n  margin: 0;\n  -webkit-appearance: none;\n  appearance: none;\n}\n.wmde-markdown [data-catalyst] {\n  display: block;\n}\n.wmde-markdown::before {\n  display: table;\n  content: '';\n}\n.wmde-markdown::after {\n  display: table;\n  clear: both;\n  content: '';\n}\n.wmde-markdown > *:first-child {\n  margin-top: 0 !important;\n}\n.wmde-markdown > *:last-child {\n  margin-bottom: 0 !important;\n}\n.wmde-markdown a:not([href]) {\n  color: inherit;\n  text-decoration: none;\n}\n.wmde-markdown .absent {\n  color: var(--color-danger-fg);\n}\n.wmde-markdown a.anchor {\n  float: left;\n  padding-right: 4px;\n  margin-left: -20px;\n  line-height: 1;\n}\n.wmde-markdown .anchor:focus {\n  outline: none;\n}\n.wmde-markdown p,\n.wmde-markdown blockquote,\n.wmde-markdown ul,\n.wmde-markdown ol,\n.wmde-markdown dl,\n.wmde-markdown table,\n.wmde-markdown pre,\n.wmde-markdown details {\n  margin-top: 0;\n  margin-bottom: 16px;\n}\n.wmde-markdown blockquote > :first-child {\n  margin-top: 0;\n}\n.wmde-markdown blockquote > :last-child {\n  margin-bottom: 0;\n}\n.wmde-markdown sup > a::before {\n  content: '[';\n}\n.wmde-markdown sup > a::after {\n  content: ']';\n}\n.wmde-markdown h1 .octicon-link,\n.wmde-markdown h2 .octicon-link,\n.wmde-markdown h3 .octicon-link,\n.wmde-markdown h4 .octicon-link,\n.wmde-markdown h5 .octicon-link,\n.wmde-markdown h6 .octicon-link {\n  color: var(--color-fg-default);\n  vertical-align: middle;\n  visibility: hidden;\n}\n.wmde-markdown h1:hover .anchor,\n.wmde-markdown h2:hover .anchor,\n.wmde-markdown h3:hover .anchor,\n.wmde-markdown h4:hover .anchor,\n.wmde-markdown h5:hover .anchor,\n.wmde-markdown h6:hover .anchor {\n  text-decoration: none;\n}\n.wmde-markdown h1:hover .anchor .octicon-link,\n.wmde-markdown h2:hover .anchor .octicon-link,\n.wmde-markdown h3:hover .anchor .octicon-link,\n.wmde-markdown h4:hover .anchor .octicon-link,\n.wmde-markdown h5:hover .anchor .octicon-link,\n.wmde-markdown h6:hover .anchor .octicon-link {\n  visibility: visible;\n}\n.wmde-markdown h1 tt,\n.wmde-markdown h1 code,\n.wmde-markdown h2 tt,\n.wmde-markdown h2 code,\n.wmde-markdown h3 tt,\n.wmde-markdown h3 code,\n.wmde-markdown h4 tt,\n.wmde-markdown h4 code,\n.wmde-markdown h5 tt,\n.wmde-markdown h5 code,\n.wmde-markdown h6 tt,\n.wmde-markdown h6 code {\n  padding: 0 0.2em;\n  font-size: inherit;\n}\n.wmde-markdown ul.no-list,\n.wmde-markdown ol.no-list {\n  padding: 0;\n  list-style-type: none;\n}\n.wmde-markdown ol[type='1'] {\n  list-style-type: decimal;\n}\n.wmde-markdown ol[type='a'] {\n  list-style-type: lower-alpha;\n}\n.wmde-markdown ol[type='i'] {\n  list-style-type: lower-roman;\n}\n.wmde-markdown div > ol:not([type]) {\n  list-style-type: decimal;\n}\n.wmde-markdown ul ul,\n.wmde-markdown ul ol,\n.wmde-markdown ol ol,\n.wmde-markdown ol ul {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n.wmde-markdown li > p {\n  margin-top: 16px;\n}\n.wmde-markdown li + li {\n  margin-top: 0.25em;\n}\n.wmde-markdown dl {\n  padding: 0;\n}\n.wmde-markdown dl dt {\n  padding: 0;\n  margin-top: 16px;\n  font-size: 1em;\n  font-style: italic;\n  font-weight: 600;\n}\n.wmde-markdown dl dd {\n  padding: 0 16px;\n  margin-bottom: 16px;\n}\n.wmde-markdown table th {\n  font-weight: 600;\n}\n.wmde-markdown table th,\n.wmde-markdown table td {\n  padding: 6px 13px;\n  border: 1px solid var(--color-border-default);\n}\n.wmde-markdown table tr {\n  background-color: var(--color-canvas-default);\n  border-top: 1px solid var(--color-border-muted);\n}\n.wmde-markdown table tr:nth-child(2n) {\n  background-color: var(--color-canvas-subtle);\n}\n.wmde-markdown table img {\n  background-color: transparent;\n}\n.wmde-markdown img[align='right'] {\n  padding-left: 20px;\n}\n.wmde-markdown img[align='left'] {\n  padding-right: 20px;\n}\n.wmde-markdown .emoji {\n  max-width: none;\n  vertical-align: text-top;\n  background-color: transparent;\n}\n.wmde-markdown span.frame {\n  display: block;\n  overflow: hidden;\n}\n.wmde-markdown span.frame > span {\n  display: block;\n  float: left;\n  width: auto;\n  padding: 7px;\n  margin: 13px 0 0;\n  overflow: hidden;\n  border: 1px solid var(--color-border-default);\n}\n.wmde-markdown span.frame span img {\n  display: block;\n  float: left;\n}\n.wmde-markdown span.frame span span {\n  display: block;\n  padding: 5px 0 0;\n  clear: both;\n  color: var(--color-fg-default);\n}\n.wmde-markdown span.align-center {\n  display: block;\n  overflow: hidden;\n  clear: both;\n}\n.wmde-markdown span.align-center > span {\n  display: block;\n  margin: 13px auto 0;\n  overflow: hidden;\n  text-align: center;\n}\n.wmde-markdown span.align-center span img {\n  margin: 0 auto;\n  text-align: center;\n}\n.wmde-markdown span.align-right {\n  display: block;\n  overflow: hidden;\n  clear: both;\n}\n.wmde-markdown span.align-right > span {\n  display: block;\n  margin: 13px 0 0;\n  overflow: hidden;\n  text-align: right;\n}\n.wmde-markdown span.align-right span img {\n  margin: 0;\n  text-align: right;\n}\n.wmde-markdown span.float-left {\n  display: block;\n  float: left;\n  margin-right: 13px;\n  overflow: hidden;\n}\n.wmde-markdown span.float-left span {\n  margin: 13px 0 0;\n}\n.wmde-markdown span.float-right {\n  display: block;\n  float: right;\n  margin-left: 13px;\n  overflow: hidden;\n}\n.wmde-markdown span.float-right > span {\n  display: block;\n  margin: 13px auto 0;\n  overflow: hidden;\n  text-align: right;\n}\n.wmde-markdown code,\n.wmde-markdown tt {\n  padding: 0.2em 0.4em;\n  margin: 0;\n  font-size: 85%;\n  background-color: var(--color-neutral-muted);\n  border-radius: 6px;\n}\n.wmde-markdown code br,\n.wmde-markdown tt br {\n  display: none;\n}\n.wmde-markdown del code {\n  text-decoration: inherit;\n}\n.wmde-markdown pre code {\n  font-size: 100%;\n}\n.wmde-markdown pre > code {\n  padding: 0;\n  margin: 0;\n  word-break: normal;\n  white-space: pre;\n  background: transparent;\n  border: 0;\n}\n.wmde-markdown pre {\n  font-size: 85%;\n  line-height: 1.45;\n  background-color: var(--color-canvas-subtle);\n  border-radius: 6px;\n}\n.wmde-markdown pre code,\n.wmde-markdown pre tt {\n  display: inline;\n  max-width: auto;\n  padding: 0;\n  margin: 0;\n  overflow: visible;\n  line-height: inherit;\n  word-wrap: normal;\n  background-color: transparent;\n  border: 0;\n}\n.wmde-markdown pre > code {\n  padding: 16px;\n  overflow: auto;\n  display: block;\n}\n.wmde-markdown .csv-data td,\n.wmde-markdown .csv-data th {\n  padding: 5px;\n  overflow: hidden;\n  font-size: 12px;\n  line-height: 1;\n  text-align: left;\n  white-space: nowrap;\n}\n.wmde-markdown .csv-data .blob-num {\n  padding: 10px 8px 9px;\n  text-align: right;\n  background: var(--color-canvas-default);\n  border: 0;\n}\n.wmde-markdown .csv-data tr {\n  border-top: 0;\n}\n.wmde-markdown .csv-data th {\n  font-weight: 600;\n  background: var(--color-canvas-subtle);\n  border-top: 0;\n}\n.wmde-markdown .footnotes {\n  font-size: 12px;\n  color: var(--color-fg-muted);\n  border-top: 1px solid var(--color-border-default);\n}\n.wmde-markdown .footnotes ol {\n  padding-left: 16px;\n}\n.wmde-markdown .footnotes li {\n  position: relative;\n}\n.wmde-markdown .footnotes li:target::before {\n  position: absolute;\n  top: -8px;\n  right: -8px;\n  bottom: -8px;\n  left: -24px;\n  pointer-events: none;\n  content: '';\n  border: 2px solid var(--color-accent-emphasis);\n  border-radius: 6px;\n}\n.wmde-markdown .footnotes li:target {\n  color: var(--color-fg-default);\n}\n.wmde-markdown .footnotes .data-footnote-backref g-emoji {\n  font-family: monospace;\n}\n.wmde-markdown .task-list-item {\n  list-style-type: none;\n}\n.wmde-markdown .task-list-item label {\n  font-weight: 400;\n}\n.wmde-markdown .task-list-item.enabled label {\n  cursor: pointer;\n}\n.wmde-markdown .task-list-item + .wmde-markdown .task-list-item {\n  margin-top: 3px;\n}\n.wmde-markdown .task-list-item .handle {\n  display: none;\n}\n.wmde-markdown .task-list-item-checkbox,\n.wmde-markdown .contains-task-list input[type='checkbox'] {\n  margin: 0 0.2em 0.25em -1.6em;\n  vertical-align: middle;\n}\n.wmde-markdown .contains-task-list:dir(rtl) .task-list-item-checkbox,\n.wmde-markdown .contains-task-list:dir(rtl) input[type='checkbox'] {\n  margin: 0 -1.6em 0.25em 0.2em;\n}\n.wmde-markdown ::-webkit-calendar-picker-indicator {\n  filter: invert(50%);\n}\n.wmde-markdown pre {\n  position: relative;\n}\n.wmde-markdown pre .copied {\n  visibility: hidden;\n  display: flex;\n  position: absolute;\n  cursor: pointer;\n  color: var(--color-fg-defaul);\n  top: 6px;\n  right: 6px;\n  border-radius: 5px;\n  background: var(--color-border-default);\n  padding: 6px;\n  font-size: 12px;\n  transition: all 0.3s;\n}\n.wmde-markdown pre .copied .octicon-copy {\n  display: block;\n}\n.wmde-markdown pre .copied .octicon-check {\n  display: none;\n}\n.wmde-markdown pre:hover .copied {\n  visibility: visible;\n}\n.wmde-markdown pre:hover .copied:hover {\n  background: var(--color-prettylights-syntax-entity-tag);\n  color: var(--color-canvas-default);\n}\n.wmde-markdown pre:hover .copied:active,\n.wmde-markdown pre .copied.active {\n  background: #2e9b33;\n  color: var(--color-canvas-default);\n}\n.wmde-markdown pre .active .octicon-copy {\n  display: none;\n}\n.wmde-markdown pre .active .octicon-check {\n  display: block;\n}\n.highlight-line {\n  background-color: var(--color-neutral-muted);\n}\n.code-line.line-number::before {\n  display: inline-block;\n  width: 1rem;\n  text-align: right;\n  margin-right: 16px;\n  color: var(--color-fg-subtle);\n  content: attr(line);\n  white-space: nowrap;\n}\n.token.comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n  color: var(--color-prettylights-syntax-comment);\n}\n.token.namespace {\n  opacity: 0.7;\n}\n.token.property,\n.token.tag,\n.token.selector,\n.token.constant,\n.token.symbol,\n.token.deleted {\n  color: var(--color-prettylights-syntax-entity-tag);\n}\n.token.maybe-class-name {\n  color: var(--color-prettylights-syntax-variable);\n}\n.token.property-access,\n.token.operator,\n.token.boolean,\n.token.number,\n.token.selector .token.class,\n.token.attr-name,\n.token.string,\n.token.char,\n.token.builtin {\n  color: var(--color-prettylights-syntax-constant);\n}\n.token.deleted {\n  color: var(--color-prettylights-syntax-markup-deleted-text);\n}\n.code-line .token.deleted {\n  background-color: var(--color-prettylights-syntax-markup-deleted-bg);\n}\n.token.inserted {\n  color: var(--color-prettylights-syntax-markup-inserted-text);\n}\n.code-line .token.inserted {\n  background-color: var(--color-prettylights-syntax-markup-inserted-bg);\n}\n.token.variable {\n  color: var(--color-prettylights-syntax-constant);\n}\n.token.entity,\n.token.url,\n.language-css .token.string,\n.style .token.string {\n  color: var(--color-prettylights-syntax-string);\n}\n.token.color,\n.token.atrule,\n.token.attr-value,\n.token.function,\n.token.class-name {\n  color: var(--color-prettylights-syntax-string);\n}\n.token.rule,\n.token.regex,\n.token.important,\n.token.keyword {\n  color: var(--color-prettylights-syntax-keyword);\n}\n.token.coord {\n  color: var(--color-prettylights-syntax-meta-diff-range);\n}\n.token.important,\n.token.bold {\n  font-weight: bold;\n}\n.token.italic {\n  font-style: italic;\n}\n.token.entity {\n  cursor: help;\n}\n";
	styleInject(css_248z$5);

	var _excluded$3 = ["prefixCls", "className", "source", "style", "disableCopy", "skipHtml", "onScroll", "onMouseOver", "pluginsFilter", "rehypeRewrite", "wrapperElement", "warpperElement", "urlTransform"];
	var defaultUrlTransform = url => url;
	const MarkdownPreview$1 = /*#__PURE__*/React.forwardRef((props, ref) => {
	  var {
	      prefixCls = 'wmde-markdown wmde-markdown-color',
	      className,
	      source,
	      style,
	      disableCopy = false,
	      skipHtml = true,
	      onScroll,
	      onMouseOver,
	      pluginsFilter,
	      wrapperElement = {},
	      warpperElement = {},
	      urlTransform
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$3);
	  var mdp = React.useRef(null);
	  reactExports.useImperativeHandle(ref, () => _extends({}, props, {
	    mdp
	  }), [mdp, props]);
	  var cls = (prefixCls || '') + " " + (className || '');
	  useCopied(mdp);
	  var rehypePlugins = [...(other.rehypePlugins || [])];
	  var customProps = {
	    allowElement: (element, index, parent) => {
	      if (other.allowElement) {
	        return other.allowElement(element, index, parent);
	      }
	      return /^[A-Za-z0-9]+$/.test(element.tagName);
	    }
	  };
	  if (skipHtml) {
	    rehypePlugins.push(rehypeRaw);
	  }
	  var remarkPlugins = [...(other.remarkPlugins || []), remarkGfm];
	  var wrapperProps = _extends({}, warpperElement, wrapperElement);
	  return /*#__PURE__*/jsxRuntimeExports.jsx("div", _extends({
	    ref: mdp,
	    onScroll: onScroll,
	    onMouseOver: onMouseOver
	  }, wrapperProps, {
	    className: cls,
	    style: style,
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(Markdown$1, _extends({}, customProps, other, {
	      skipHtml: skipHtml,
	      urlTransform: urlTransform || defaultUrlTransform,
	      rehypePlugins: pluginsFilter ? pluginsFilter('rehype', rehypePlugins) : rehypePlugins,
	      remarkPlugins: pluginsFilter ? pluginsFilter('remark', remarkPlugins) : remarkPlugins,
	      children: source || ''
	    }))
	  }));
	});

	/**
	 * @typedef {import('unist').Node} Node
	 * @typedef {import('unist').Parent} Parent
	 */


	/**
	 * Generate an assertion from a test.
	 *
	 * Useful if you’re going to test many nodes, for example when creating a
	 * utility where something else passes a compatible test.
	 *
	 * The created function is a bit faster because it expects valid input only:
	 * a `node`, `index`, and `parent`.
	 *
	 * @param test
	 *   *   when nullish, checks if `node` is a `Node`.
	 *   *   when `string`, works like passing `(node) => node.type === test`.
	 *   *   when `function` checks if function passed the node is true.
	 *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.
	 *   *   when `array`, checks if any one of the subtests pass.
	 * @returns
	 *   An assertion.
	 */
	const convert$1 =
	  /**
	   * @type {(
	   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &
	   *   ((test?: Test) => AssertAnything)
	   * )}
	   */
	  (
	    /**
	     * @param {Test} [test]
	     * @returns {AssertAnything}
	     */
	    function (test) {
	      if (test === undefined || test === null) {
	        return ok$1
	      }

	      if (typeof test === 'string') {
	        return typeFactory$1(test)
	      }

	      if (typeof test === 'object') {
	        return Array.isArray(test) ? anyFactory$2(test) : propsFactory$1(test)
	      }

	      if (typeof test === 'function') {
	        return castFactory$2(test)
	      }

	      throw new Error('Expected function, string, or object as test')
	    }
	  );

	/**
	 * @param {Array<string | Props | TestFunctionAnything>} tests
	 * @returns {AssertAnything}
	 */
	function anyFactory$2(tests) {
	  /** @type {Array<AssertAnything>} */
	  const checks = [];
	  let index = -1;

	  while (++index < tests.length) {
	    checks[index] = convert$1(tests[index]);
	  }

	  return castFactory$2(any)

	  /**
	   * @this {unknown}
	   * @param {Array<unknown>} parameters
	   * @returns {boolean}
	   */
	  function any(...parameters) {
	    let index = -1;

	    while (++index < checks.length) {
	      if (checks[index].call(this, ...parameters)) return true
	    }

	    return false
	  }
	}

	/**
	 * Turn an object into a test for a node with a certain fields.
	 *
	 * @param {Props} check
	 * @returns {AssertAnything}
	 */
	function propsFactory$1(check) {
	  return castFactory$2(all)

	  /**
	   * @param {Node} node
	   * @returns {boolean}
	   */
	  function all(node) {
	    /** @type {string} */
	    let key;

	    for (key in check) {
	      // @ts-expect-error: hush, it sure works as an index.
	      if (node[key] !== check[key]) return false
	    }

	    return true
	  }
	}

	/**
	 * Turn a string into a test for a node with a certain type.
	 *
	 * @param {string} check
	 * @returns {AssertAnything}
	 */
	function typeFactory$1(check) {
	  return castFactory$2(type)

	  /**
	   * @param {Node} node
	   */
	  function type(node) {
	    return node && node.type === check
	  }
	}

	/**
	 * Turn a custom test into a test for a node that passes that test.
	 *
	 * @param {TestFunctionAnything} check
	 * @returns {AssertAnything}
	 */
	function castFactory$2(check) {
	  return assertion

	  /**
	   * @this {unknown}
	   * @param {unknown} node
	   * @param {Array<unknown>} parameters
	   * @returns {boolean}
	   */
	  function assertion(node, ...parameters) {
	    return Boolean(
	      node &&
	        typeof node === 'object' &&
	        'type' in node &&
	        // @ts-expect-error: fine.
	        Boolean(check.call(this, node, ...parameters))
	    )
	  }
	}

	function ok$1() {
	  return true
	}

	/**
	 * @param {string} d
	 * @returns {string}
	 */
	function color(d) {
	  return '\u001B[33m' + d + '\u001B[39m'
	}

	/**
	 * @typedef {import('unist').Node} Node
	 * @typedef {import('unist').Parent} Parent
	 * @typedef {import('unist-util-is').Test} Test
	 */


	/**
	 * Continue traversing as normal.
	 */
	const CONTINUE = true;

	/**
	 * Stop traversing immediately.
	 */
	const EXIT = false;

	/**
	 * Do not traverse this node’s children.
	 */
	const SKIP = 'skip';

	/**
	 * Visit nodes, with ancestral information.
	 *
	 * This algorithm performs *depth-first* *tree traversal* in *preorder*
	 * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).
	 *
	 * You can choose for which nodes `visitor` is called by passing a `test`.
	 * For complex tests, you should test yourself in `visitor`, as it will be
	 * faster and will have improved type information.
	 *
	 * Walking the tree is an intensive task.
	 * Make use of the return values of the visitor when possible.
	 * Instead of walking a tree multiple times, walk it once, use `unist-util-is`
	 * to check if a node matches, and then perform different operations.
	 *
	 * You can change the tree.
	 * See `Visitor` for more info.
	 *
	 * @param tree
	 *   Tree to traverse.
	 * @param test
	 *   `unist-util-is`-compatible test
	 * @param visitor
	 *   Handle each node.
	 * @param reverse
	 *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).
	 * @returns
	 *   Nothing.
	 */
	const visitParents =
	  /**
	   * @type {(
	   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
	   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
	   * )}
	   */
	  (
	    /**
	     * @param {Node} tree
	     * @param {Test} test
	     * @param {Visitor<Node>} visitor
	     * @param {boolean | null | undefined} [reverse]
	     * @returns {void}
	     */
	    function (tree, test, visitor, reverse) {
	      if (typeof test === 'function' && typeof visitor !== 'function') {
	        reverse = visitor;
	        // @ts-expect-error no visitor given, so `visitor` is test.
	        visitor = test;
	        test = null;
	      }

	      const is = convert$1(test);
	      const step = reverse ? -1 : 1;

	      factory(tree, undefined, [])();

	      /**
	       * @param {Node} node
	       * @param {number | undefined} index
	       * @param {Array<Parent>} parents
	       */
	      function factory(node, index, parents) {
	        /** @type {Record<string, unknown>} */
	        // @ts-expect-error: hush
	        const value = node && typeof node === 'object' ? node : {};

	        if (typeof value.type === 'string') {
	          const name =
	            // `hast`
	            typeof value.tagName === 'string'
	              ? value.tagName
	              : // `xast`
	              typeof value.name === 'string'
	              ? value.name
	              : undefined;

	          Object.defineProperty(visit, 'name', {
	            value:
	              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'
	          });
	        }

	        return visit

	        function visit() {
	          /** @type {ActionTuple} */
	          let result = [];
	          /** @type {ActionTuple} */
	          let subresult;
	          /** @type {number} */
	          let offset;
	          /** @type {Array<Parent>} */
	          let grandparents;

	          if (!test || is(node, index, parents[parents.length - 1] || null)) {
	            result = toResult(visitor(node, parents));

	            if (result[0] === EXIT) {
	              return result
	            }
	          }

	          // @ts-expect-error looks like a parent.
	          if (node.children && result[0] !== SKIP) {
	            // @ts-expect-error looks like a parent.
	            offset = (reverse ? node.children.length : -1) + step;
	            // @ts-expect-error looks like a parent.
	            grandparents = parents.concat(node);

	            // @ts-expect-error looks like a parent.
	            while (offset > -1 && offset < node.children.length) {
	              // @ts-expect-error looks like a parent.
	              subresult = factory(node.children[offset], offset, grandparents)();

	              if (subresult[0] === EXIT) {
	                return subresult
	              }

	              offset =
	                typeof subresult[1] === 'number' ? subresult[1] : offset + step;
	            }
	          }

	          return result
	        }
	      }
	    }
	  );

	/**
	 * Turn a return value into a clean result.
	 *
	 * @param {VisitorResult} value
	 *   Valid return values from visitors.
	 * @returns {ActionTuple}
	 *   Clean result.
	 */
	function toResult(value) {
	  if (Array.isArray(value)) {
	    return value
	  }

	  if (typeof value === 'number') {
	    return [CONTINUE, value]
	  }

	  return [value]
	}

	/**
	 * @typedef {import('unist').Node} Node
	 * @typedef {import('unist').Parent} Parent
	 * @typedef {import('unist-util-is').Test} Test
	 * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
	 */


	/**
	 * Visit nodes.
	 *
	 * This algorithm performs *depth-first* *tree traversal* in *preorder*
	 * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).
	 *
	 * You can choose for which nodes `visitor` is called by passing a `test`.
	 * For complex tests, you should test yourself in `visitor`, as it will be
	 * faster and will have improved type information.
	 *
	 * Walking the tree is an intensive task.
	 * Make use of the return values of the visitor when possible.
	 * Instead of walking a tree multiple times, walk it once, use `unist-util-is`
	 * to check if a node matches, and then perform different operations.
	 *
	 * You can change the tree.
	 * See `Visitor` for more info.
	 *
	 * @param tree
	 *   Tree to traverse.
	 * @param test
	 *   `unist-util-is`-compatible test
	 * @param visitor
	 *   Handle each node.
	 * @param reverse
	 *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).
	 * @returns
	 *   Nothing.
	 */
	const visit =
	  /**
	   * @type {(
	   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
	   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
	   * )}
	   */
	  (
	    /**
	     * @param {Node} tree
	     * @param {Test} test
	     * @param {Visitor} visitor
	     * @param {boolean | null | undefined} [reverse]
	     * @returns {void}
	     */
	    function (tree, test, visitor, reverse) {
	      if (typeof test === 'function' && typeof visitor !== 'function') {
	        reverse = visitor;
	        visitor = test;
	        test = null;
	      }

	      visitParents(tree, test, overload, reverse);

	      /**
	       * @param {Node} node
	       * @param {Array<Parent>} parents
	       */
	      function overload(node, parents) {
	        const parent = parents[parents.length - 1];
	        return visitor(
	          node,
	          parent ? parent.children.indexOf(node) : null,
	          parent
	        )
	      }
	    }
	  );

	/**
	 * @fileoverview
	 *   Get the plain-text value of a hast node.
	 * @longdescription
	 *   ## Use
	 *
	 *   ```js
	 *   import {h} from 'hastscript'
	 *   import {toString} from 'hast-util-to-string'
	 *
	 *   toString(h('p', 'Alpha'))
	 *   //=> 'Alpha'
	 *   toString(h('div', [h('b', 'Bold'), ' and ', h('i', 'italic'), '.']))
	 *   //=> 'Bold and italic.'
	 *   ```
	 *
	 *   ## API
	 *
	 *   ### `toString(node)`
	 *
	 *   Transform a node to a string.
	 */

	/**
	 * @typedef {import('hast').Root} Root
	 * @typedef {import('hast').Element} Element
	 * @typedef {Root|Root['children'][number]} Node
	 */

	/**
	 * Get the plain-text value of a hast node.
	 *
	 * @param {Node} node
	 * @returns {string}
	 */
	function toString$1(node) {
	  // “The concatenation of data of all the Text node descendants of the context
	  // object, in tree order.”
	  if ('children' in node) {
	    return all$3(node)
	  }

	  // “Context object’s data.”
	  return 'value' in node ? node.value : ''
	}

	/**
	 * @param {Node} node
	 * @returns {string}
	 */
	function one$3(node) {
	  if (node.type === 'text') {
	    return node.value
	  }

	  return 'children' in node ? all$3(node) : ''
	}

	/**
	 * @param {Root|Element} node
	 * @returns {string}
	 */
	function all$3(node) {
	  let index = -1;
	  /** @type {string[]} */
	  const result = [];

	  while (++index < node.children.length) {
	    result[index] = one$3(node.children[index]);
	  }

	  return result.join('')
	}

	/**
	 * @typedef {import('unist').Node} Node
	 * @typedef {import('unist').Parent} Parent
	 */


	/**
	 * Generate an assertion from a test.
	 *
	 * Useful if you’re going to test many nodes, for example when creating a
	 * utility where something else passes a compatible test.
	 *
	 * The created function is a bit faster because it expects valid input only:
	 * a `node`, `index`, and `parent`.
	 *
	 * @param test
	 *   *   when nullish, checks if `node` is a `Node`.
	 *   *   when `string`, works like passing `(node) => node.type === test`.
	 *   *   when `function` checks if function passed the node is true.
	 *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.
	 *   *   when `array`, checks if any one of the subtests pass.
	 * @returns
	 *   An assertion.
	 */
	const convert =
	  /**
	   * @type {(
	   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &
	   *   ((test?: Test) => AssertAnything)
	   * )}
	   */
	  (
	    /**
	     * @param {Test} [test]
	     * @returns {AssertAnything}
	     */
	    function (test) {
	      if (test === undefined || test === null) {
	        return ok
	      }

	      if (typeof test === 'string') {
	        return typeFactory(test)
	      }

	      if (typeof test === 'object') {
	        return Array.isArray(test) ? anyFactory$1(test) : propsFactory(test)
	      }

	      if (typeof test === 'function') {
	        return castFactory$1(test)
	      }

	      throw new Error('Expected function, string, or object as test')
	    }
	  );

	/**
	 * @param {Array<string | Props | TestFunctionAnything>} tests
	 * @returns {AssertAnything}
	 */
	function anyFactory$1(tests) {
	  /** @type {Array<AssertAnything>} */
	  const checks = [];
	  let index = -1;

	  while (++index < tests.length) {
	    checks[index] = convert(tests[index]);
	  }

	  return castFactory$1(any)

	  /**
	   * @this {unknown}
	   * @param {Array<unknown>} parameters
	   * @returns {boolean}
	   */
	  function any(...parameters) {
	    let index = -1;

	    while (++index < checks.length) {
	      if (checks[index].call(this, ...parameters)) return true
	    }

	    return false
	  }
	}

	/**
	 * Turn an object into a test for a node with a certain fields.
	 *
	 * @param {Props} check
	 * @returns {AssertAnything}
	 */
	function propsFactory(check) {
	  return castFactory$1(all)

	  /**
	   * @param {Node} node
	   * @returns {boolean}
	   */
	  function all(node) {
	    /** @type {string} */
	    let key;

	    for (key in check) {
	      // @ts-expect-error: hush, it sure works as an index.
	      if (node[key] !== check[key]) return false
	    }

	    return true
	  }
	}

	/**
	 * Turn a string into a test for a node with a certain type.
	 *
	 * @param {string} check
	 * @returns {AssertAnything}
	 */
	function typeFactory(check) {
	  return castFactory$1(type)

	  /**
	   * @param {Node} node
	   */
	  function type(node) {
	    return node && node.type === check
	  }
	}

	/**
	 * Turn a custom test into a test for a node that passes that test.
	 *
	 * @param {TestFunctionAnything} check
	 * @returns {AssertAnything}
	 */
	function castFactory$1(check) {
	  return assertion

	  /**
	   * @this {unknown}
	   * @param {unknown} node
	   * @param {Array<unknown>} parameters
	   * @returns {boolean}
	   */
	  function assertion(node, ...parameters) {
	    return Boolean(
	      node &&
	        typeof node === 'object' &&
	        'type' in node &&
	        // @ts-expect-error: fine.
	        Boolean(check.call(this, node, ...parameters))
	    )
	  }
	}

	function ok() {
	  return true
	}

	/**
	 * @typedef {import('unist').Node} Node
	 * @typedef {import('unist').Parent} Parent
	 * @typedef {import('unist-util-is').Test} Test
	 *
	 * @typedef Options
	 *   Configuration (optional).
	 * @property {boolean | null | undefined} [cascade=true]
	 *   Whether to drop parent nodes if they had children, but all their children
	 *   were filtered out.
	 */


	const own$6 = {}.hasOwnProperty;

	/**
	 * Create a new `tree` of copies of all nodes that pass `test`.
	 *
	 * The tree is walked in *preorder* (NLR), visiting the node itself, then its
	 * head, etc.
	 *
	 * @param tree
	 *   Tree to filter.
	 * @param options
	 *   Configuration (optional).
	 * @param test
	 *   `unist-util-is` compatible test.
	 * @returns
	 *   New filtered tree.
	 *
	 *   `null` is returned if `tree` itself didn’t pass the test, or is cascaded
	 *   away.
	 */
	const filter =
	  /**
	   * @type {(
	   *  (<Tree extends Node, Check extends Test>(node: Tree, options: Options | null | undefined, test: Check | null | undefined) => import('./complex-types.js').Matches<Tree, Check>) &
	   *  (<Tree extends Node, Check extends Test>(node: Tree, test: Check) => import('./complex-types.js').Matches<Tree, Check>) &
	   *  (<Tree extends Node>(node: Tree, options?: Options | null | undefined) => Tree)
	   * )}
	   */
	  (
	    /**
	     * @param {Node} tree
	     * @param {Options | Test | null | undefined} [options]
	     * @param {Test | null | undefined} [test]
	     * @returns {Node | null}
	     */
	    function (tree, options, test) {
	      const is = convert(test || options);
	      /** @type {boolean | null | undefined} */
	      const cascadeRaw =
	        options && typeof options === 'object' && 'cascade' in options
	          ? /** @type {boolean | null | undefined} */ (options.cascade)
	          : undefined;
	      const cascade =
	        cascadeRaw === undefined || cascadeRaw === null ? true : cascadeRaw;

	      return preorder(tree)

	      /**
	       * @param {Node} node
	       *   Current node.
	       * @param {number | undefined} [index]
	       *   Index of `node` in `parent`.
	       * @param {Parent | undefined} [parent]
	       *   Parent node.
	       * @returns {Node | null}
	       *   Shallow copy of `node`.
	       */
	      function preorder(node, index, parent) {
	        /** @type {Array<Node>} */
	        const children = [];

	        if (!is(node, index, parent)) return null

	        // @ts-expect-error: Looks like a parent.
	        if (node.children) {
	          let childIndex = -1;

	          // @ts-expect-error Looks like a parent.
	          while (++childIndex < node.children.length) {
	            // @ts-expect-error Looks like a parent.
	            const result = preorder(node.children[childIndex], childIndex, node);

	            if (result) {
	              children.push(result);
	            }
	          }

	          // @ts-expect-error Looks like a parent.
	          if (cascade && node.children.length > 0 && children.length === 0)
	            return null
	        }

	        // Create a shallow clone, using the new children.
	        /** @type {typeof node} */
	        // @ts-expect-error all the fields will be copied over.
	        const next = {};
	        /** @type {string} */
	        let key;

	        for (key in node) {
	          if (own$6.call(node, key)) {
	            // @ts-expect-error: Looks like a record.
	            next[key] = key === 'children' ? children : node[key];
	          }
	        }

	        return next
	      }
	    }
	  );

	var parseNumericRange = {exports: {}};

	/**
	 * @param {string} string    The string to parse
	 * @returns {Array<number>}  Returns an energetic array.
	 */

	(function (module, exports) {
		function parsePart(string) {
		  let res = [];
		  let m;

		  for (let str of string.split(",").map((str) => str.trim())) {
		    // just a number
		    if (/^-?\d+$/.test(str)) {
		      res.push(parseInt(str, 10));
		    } else if (
		      (m = str.match(/^(-?\d+)(-|\.\.\.?|\u2025|\u2026|\u22EF)(-?\d+)$/))
		    ) {
		      // 1-5 or 1..5 (equivalent) or 1...5 (doesn't include 5)
		      let [_, lhs, sep, rhs] = m;

		      if (lhs && rhs) {
		        lhs = parseInt(lhs);
		        rhs = parseInt(rhs);
		        const incr = lhs < rhs ? 1 : -1;

		        // Make it inclusive by moving the right 'stop-point' away by one.
		        if (sep === "-" || sep === ".." || sep === "\u2025") rhs += incr;

		        for (let i = lhs; i !== rhs; i += incr) res.push(i);
		      }
		    }
		  }

		  return res;
		}

		exports.default = parsePart;
		module.exports = parsePart; 
	} (parseNumericRange, parseNumericRange.exports));

	var parseNumericRangeExports = parseNumericRange.exports;
	const n = /*@__PURE__*/getDefaultExportFromCjs(parseNumericRangeExports);

	// @ts-nocheck
	clike.displayName = 'clike';
	clike.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function clike(Prism) {
	  Prism.languages.clike = {
	    comment: [
	      {
	        pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
	        lookbehind: true,
	        greedy: true
	      },
	      {
	        pattern: /(^|[^\\:])\/\/.*/,
	        lookbehind: true,
	        greedy: true
	      }
	    ],
	    string: {
	      pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
	      greedy: true
	    },
	    'class-name': {
	      pattern:
	        /(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,
	      lookbehind: true,
	      inside: {
	        punctuation: /[.\\]/
	      }
	    },
	    keyword:
	      /\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,
	    boolean: /\b(?:false|true)\b/,
	    function: /\b\w+(?=\()/,
	    number: /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
	    operator: /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
	    punctuation: /[{}[\];(),.:]/
	  };
	}

	// @ts-nocheck
	c$1.displayName = 'c';
	c$1.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function c$1(Prism) {
	  Prism.register(clike);
	  Prism.languages.c = Prism.languages.extend('clike', {
	    comment: {
	      pattern:
	        /\/\/(?:[^\r\n\\]|\\(?:\r\n?|\n|(?![\r\n])))*|\/\*[\s\S]*?(?:\*\/|$)/,
	      greedy: true
	    },
	    string: {
	      // https://en.cppreference.com/w/c/language/string_literal
	      pattern: /"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,
	      greedy: true
	    },
	    'class-name': {
	      pattern:
	        /(\b(?:enum|struct)\s+(?:__attribute__\s*\(\([\s\S]*?\)\)\s*)?)\w+|\b[a-z]\w*_t\b/,
	      lookbehind: true
	    },
	    keyword:
	      /\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\b/,
	    function: /\b[a-z_]\w*(?=\s*\()/i,
	    number:
	      /(?:\b0x(?:[\da-f]+(?:\.[\da-f]*)?|\.[\da-f]+)(?:p[+-]?\d+)?|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)[ful]{0,4}/i,
	    operator: />>=?|<<=?|->|([-+&|:])\1|[?:~]|[-+*/%&|^!=<>]=?/
	  });
	  Prism.languages.insertBefore('c', 'string', {
	    char: {
	      // https://en.cppreference.com/w/c/language/character_constant
	      pattern: /'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n]){0,32}'/,
	      greedy: true
	    }
	  });
	  Prism.languages.insertBefore('c', 'string', {
	    macro: {
	      // allow for multiline macro definitions
	      // spaces after the # character compile fine with gcc
	      pattern:
	        /(^[\t ]*)#\s*[a-z](?:[^\r\n\\/]|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/|\\(?:\r\n|[\s\S]))*/im,
	      lookbehind: true,
	      greedy: true,
	      alias: 'property',
	      inside: {
	        string: [
	          {
	            // highlight the path of the include statement as a string
	            pattern: /^(#\s*include\s*)<[^>]+>/,
	            lookbehind: true
	          },
	          Prism.languages.c['string']
	        ],
	        char: Prism.languages.c['char'],
	        comment: Prism.languages.c['comment'],
	        'macro-name': [
	          {
	            pattern: /(^#\s*define\s+)\w+\b(?!\()/i,
	            lookbehind: true
	          },
	          {
	            pattern: /(^#\s*define\s+)\w+\b(?=\()/i,
	            lookbehind: true,
	            alias: 'function'
	          }
	        ],
	        // highlight macro directives as keywords
	        directive: {
	          pattern: /^(#\s*)[a-z]+/,
	          lookbehind: true,
	          alias: 'keyword'
	        },
	        'directive-hash': /^#/,
	        punctuation: /##|\\(?=[\r\n])/,
	        expression: {
	          pattern: /\S[\s\S]*/,
	          inside: Prism.languages.c
	        }
	      }
	    }
	  });
	  Prism.languages.insertBefore('c', 'function', {
	    // highlight predefined macros as constants
	    constant:
	      /\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\b/
	  });
	  delete Prism.languages.c['boolean'];
	}

	// @ts-nocheck
	cpp.displayName = 'cpp';
	cpp.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function cpp(Prism) {
	  Prism.register(c$1)
	  ;(function (Prism) {
	    var keyword =
	      /\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\b/;
	    var modName = /\b(?!<keyword>)\w+(?:\s*\.\s*\w+)*\b/.source.replace(
	      /<keyword>/g,
	      function () {
	        return keyword.source
	      }
	    );
	    Prism.languages.cpp = Prism.languages.extend('c', {
	      'class-name': [
	        {
	          pattern: RegExp(
	            /(\b(?:class|concept|enum|struct|typename)\s+)(?!<keyword>)\w+/.source.replace(
	              /<keyword>/g,
	              function () {
	                return keyword.source
	              }
	            )
	          ),
	          lookbehind: true
	        },
	        // This is intended to capture the class name of method implementations like:
	        //   void foo::bar() const {}
	        // However! The `foo` in the above example could also be a namespace, so we only capture the class name if
	        // it starts with an uppercase letter. This approximation should give decent results.
	        /\b[A-Z]\w*(?=\s*::\s*\w+\s*\()/,
	        // This will capture the class name before destructors like:
	        //   Foo::~Foo() {}
	        /\b[A-Z_]\w*(?=\s*::\s*~\w+\s*\()/i,
	        // This also intends to capture the class name of method implementations but here the class has template
	        // parameters, so it can't be a namespace (until C++ adds generic namespaces).
	        /\b\w+(?=\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\s*::\s*\w+\s*\()/
	      ],
	      keyword: keyword,
	      number: {
	        pattern:
	          /(?:\b0b[01']+|\b0x(?:[\da-f']+(?:\.[\da-f']*)?|\.[\da-f']+)(?:p[+-]?[\d']+)?|(?:\b[\d']+(?:\.[\d']*)?|\B\.[\d']+)(?:e[+-]?[\d']+)?)[ful]{0,4}/i,
	        greedy: true
	      },
	      operator:
	        />>=?|<<=?|->|--|\+\+|&&|\|\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\b/,
	      boolean: /\b(?:false|true)\b/
	    });
	    Prism.languages.insertBefore('cpp', 'string', {
	      module: {
	        // https://en.cppreference.com/w/cpp/language/modules
	        pattern: RegExp(
	          /(\b(?:import|module)\s+)/.source +
	            '(?:' +
	            // header-name
	            /"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|<[^<>\r\n]*>/.source +
	            '|' +
	            // module name or partition or both
	            /<mod-name>(?:\s*:\s*<mod-name>)?|:\s*<mod-name>/.source.replace(
	              /<mod-name>/g,
	              function () {
	                return modName
	              }
	            ) +
	            ')'
	        ),
	        lookbehind: true,
	        greedy: true,
	        inside: {
	          string: /^[<"][\s\S]+/,
	          operator: /:/,
	          punctuation: /\./
	        }
	      },
	      'raw-string': {
	        pattern: /R"([^()\\ ]{0,16})\([\s\S]*?\)\1"/,
	        alias: 'string',
	        greedy: true
	      }
	    });
	    Prism.languages.insertBefore('cpp', 'keyword', {
	      'generic-function': {
	        pattern: /\b(?!operator\b)[a-z_]\w*\s*<(?:[^<>]|<[^<>]*>)*>(?=\s*\()/i,
	        inside: {
	          function: /^\w+/,
	          generic: {
	            pattern: /<[\s\S]+/,
	            alias: 'class-name',
	            inside: Prism.languages.cpp
	          }
	        }
	      }
	    });
	    Prism.languages.insertBefore('cpp', 'operator', {
	      'double-colon': {
	        pattern: /::/,
	        alias: 'punctuation'
	      }
	    });
	    Prism.languages.insertBefore('cpp', 'class-name', {
	      // the base clause is an optional list of parent classes
	      // https://en.cppreference.com/w/cpp/language/class
	      'base-clause': {
	        pattern:
	          /(\b(?:class|struct)\s+\w+\s*:\s*)[^;{}"'\s]+(?:\s+[^;{}"'\s]+)*(?=\s*[;{])/,
	        lookbehind: true,
	        greedy: true,
	        inside: Prism.languages.extend('cpp', {})
	      }
	    });
	    Prism.languages.insertBefore(
	      'inside',
	      'double-colon',
	      {
	        // All untokenized words that are not namespaces should be class names
	        'class-name': /\b[a-z_]\w*\b(?!\s*::)/i
	      },
	      Prism.languages.cpp['base-clause']
	    );
	  })(Prism);
	}

	// @ts-nocheck
	arduino.displayName = 'arduino';
	arduino.aliases = ['ino'];

	/** @type {import('../core.js').Syntax} */
	function arduino(Prism) {
	  Prism.register(cpp);
	  Prism.languages.arduino = Prism.languages.extend('cpp', {
	    keyword:
	      /\b(?:String|array|bool|boolean|break|byte|case|catch|continue|default|do|double|else|finally|for|function|goto|if|in|instanceof|int|integer|long|loop|new|null|return|setup|string|switch|throw|try|void|while|word)\b/,
	    constant:
	      /\b(?:ANALOG_MESSAGE|DEFAULT|DIGITAL_MESSAGE|EXTERNAL|FIRMATA_STRING|HIGH|INPUT|INPUT_PULLUP|INTERNAL|INTERNAL1V1|INTERNAL2V56|LED_BUILTIN|LOW|OUTPUT|REPORT_ANALOG|REPORT_DIGITAL|SET_PIN_MODE|SYSEX_START|SYSTEM_RESET)\b/,
	    builtin:
	      /\b(?:Audio|BSSID|Bridge|Client|Console|EEPROM|Esplora|EsploraTFT|Ethernet|EthernetClient|EthernetServer|EthernetUDP|File|FileIO|FileSystem|Firmata|GPRS|GSM|GSMBand|GSMClient|GSMModem|GSMPIN|GSMScanner|GSMServer|GSMVoiceCall|GSM_SMS|HttpClient|IPAddress|IRread|Keyboard|KeyboardController|LiquidCrystal|LiquidCrystal_I2C|Mailbox|Mouse|MouseController|PImage|Process|RSSI|RobotControl|RobotMotor|SD|SPI|SSID|Scheduler|Serial|Server|Servo|SoftwareSerial|Stepper|Stream|TFT|Task|USBHost|WiFi|WiFiClient|WiFiServer|WiFiUDP|Wire|YunClient|YunServer|abs|addParameter|analogRead|analogReadResolution|analogReference|analogWrite|analogWriteResolution|answerCall|attach|attachGPRS|attachInterrupt|attached|autoscroll|available|background|beep|begin|beginPacket|beginSD|beginSMS|beginSpeaker|beginTFT|beginTransmission|beginWrite|bit|bitClear|bitRead|bitSet|bitWrite|blink|blinkVersion|buffer|changePIN|checkPIN|checkPUK|checkReg|circle|cityNameRead|cityNameWrite|clear|clearScreen|click|close|compassRead|config|connect|connected|constrain|cos|countryNameRead|countryNameWrite|createChar|cursor|debugPrint|delay|delayMicroseconds|detach|detachInterrupt|digitalRead|digitalWrite|disconnect|display|displayLogos|drawBMP|drawCompass|encryptionType|end|endPacket|endSMS|endTransmission|endWrite|exists|exitValue|fill|find|findUntil|flush|gatewayIP|get|getAsynchronously|getBand|getButton|getCurrentCarrier|getIMEI|getKey|getModifiers|getOemKey|getPINUsed|getResult|getSignalStrength|getSocket|getVoiceCallStatus|getXChange|getYChange|hangCall|height|highByte|home|image|interrupts|isActionDone|isDirectory|isListening|isPIN|isPressed|isValid|keyPressed|keyReleased|keyboardRead|knobRead|leftToRight|line|lineFollowConfig|listen|listenOnLocalhost|loadImage|localIP|lowByte|macAddress|maintain|map|max|messageAvailable|micros|millis|min|mkdir|motorsStop|motorsWrite|mouseDragged|mouseMoved|mousePressed|mouseReleased|move|noAutoscroll|noBlink|noBuffer|noCursor|noDisplay|noFill|noInterrupts|noListenOnLocalhost|noStroke|noTone|onReceive|onRequest|open|openNextFile|overflow|parseCommand|parseFloat|parseInt|parsePacket|pauseMode|peek|pinMode|playFile|playMelody|point|pointTo|position|pow|prepare|press|print|printFirmwareVersion|printVersion|println|process|processInput|pulseIn|put|random|randomSeed|read|readAccelerometer|readBlue|readButton|readBytes|readBytesUntil|readGreen|readJoystickButton|readJoystickSwitch|readJoystickX|readJoystickY|readLightSensor|readMessage|readMicrophone|readNetworks|readRed|readSlider|readString|readStringUntil|readTemperature|ready|rect|release|releaseAll|remoteIP|remoteNumber|remotePort|remove|requestFrom|retrieveCallingNumber|rewindDirectory|rightToLeft|rmdir|robotNameRead|robotNameWrite|run|runAsynchronously|runShellCommand|runShellCommandAsynchronously|running|scanNetworks|scrollDisplayLeft|scrollDisplayRight|seek|sendAnalog|sendDigitalPortPair|sendDigitalPorts|sendString|sendSysex|serialEvent|setBand|setBitOrder|setClockDivider|setCursor|setDNS|setDataMode|setFirmwareVersion|setMode|setPINUsed|setSpeed|setTextSize|setTimeout|shiftIn|shiftOut|shutdown|sin|size|sqrt|startLoop|step|stop|stroke|subnetMask|switchPIN|tan|tempoWrite|text|tone|transfer|tuneWrite|turn|updateIR|userNameRead|userNameWrite|voiceCall|waitContinue|width|write|writeBlue|writeGreen|writeJSON|writeMessage|writeMicroseconds|writeRGB|writeRed|yield)\b/
	  });
	  Prism.languages.ino = Prism.languages.arduino;
	}

	// @ts-nocheck
	bash.displayName = 'bash';
	bash.aliases = ['sh', 'shell'];

	/** @type {import('../core.js').Syntax} */
	function bash(Prism) {
	(function (Prism) {
	    // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\n' '|'
	    // + LC_ALL, RANDOM, REPLY, SECONDS.
	    // + make sure PS1..4 are here as they are not always set,
	    // - some useless things.
	    var envVars =
	      '\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\b';
	    var commandAfterHeredoc = {
	      pattern: /(^(["']?)\w+\2)[ \t]+\S.*/,
	      lookbehind: true,
	      alias: 'punctuation',
	      // this looks reasonably well in all themes
	      inside: null // see below
	    };

	    var insideString = {
	      bash: commandAfterHeredoc,
	      environment: {
	        pattern: RegExp('\\$' + envVars),
	        alias: 'constant'
	      },
	      variable: [
	        // [0]: Arithmetic Environment
	        {
	          pattern: /\$?\(\([\s\S]+?\)\)/,
	          greedy: true,
	          inside: {
	            // If there is a $ sign at the beginning highlight $(( and )) as variable
	            variable: [
	              {
	                pattern: /(^\$\(\([\s\S]+)\)\)/,
	                lookbehind: true
	              },
	              /^\$\(\(/
	            ],
	            number:
	              /\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/,
	            // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic
	            operator:
	              /--|\+\+|\*\*=?|<<=?|>>=?|&&|\|\||[=!+\-*/%<>^&|]=?|[?~:]/,
	            // If there is no $ sign at the beginning highlight (( and )) as punctuation
	            punctuation: /\(\(?|\)\)?|,|;/
	          }
	        },
	        // [1]: Command Substitution
	        {
	          pattern: /\$\((?:\([^)]+\)|[^()])+\)|`[^`]+`/,
	          greedy: true,
	          inside: {
	            variable: /^\$\(|^`|\)$|`$/
	          }
	        },
	        // [2]: Brace expansion
	        {
	          pattern: /\$\{[^}]+\}/,
	          greedy: true,
	          inside: {
	            operator: /:[-=?+]?|[!\/]|##?|%%?|\^\^?|,,?/,
	            punctuation: /[\[\]]/,
	            environment: {
	              pattern: RegExp('(\\{)' + envVars),
	              lookbehind: true,
	              alias: 'constant'
	            }
	          }
	        },
	        /\$(?:\w+|[#?*!@$])/
	      ],
	      // Escape sequences from echo and printf's manuals, and escaped quotes.
	      entity:
	        /\\(?:[abceEfnrtv\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/
	    };
	    Prism.languages.bash = {
	      shebang: {
	        pattern: /^#!\s*\/.*/,
	        alias: 'important'
	      },
	      comment: {
	        pattern: /(^|[^"{\\$])#.*/,
	        lookbehind: true
	      },
	      'function-name': [
	        // a) function foo {
	        // b) foo() {
	        // c) function foo() {
	        // but not “foo {”
	        {
	          // a) and c)
	          pattern: /(\bfunction\s+)[\w-]+(?=(?:\s*\(?:\s*\))?\s*\{)/,
	          lookbehind: true,
	          alias: 'function'
	        },
	        {
	          // b)
	          pattern: /\b[\w-]+(?=\s*\(\s*\)\s*\{)/,
	          alias: 'function'
	        }
	      ],
	      // Highlight variable names as variables in for and select beginnings.
	      'for-or-select': {
	        pattern: /(\b(?:for|select)\s+)\w+(?=\s+in\s)/,
	        alias: 'variable',
	        lookbehind: true
	      },
	      // Highlight variable names as variables in the left-hand part
	      // of assignments (“=” and “+=”).
	      'assign-left': {
	        pattern: /(^|[\s;|&]|[<>]\()\w+(?:\.\w+)*(?=\+?=)/,
	        inside: {
	          environment: {
	            pattern: RegExp('(^|[\\s;|&]|[<>]\\()' + envVars),
	            lookbehind: true,
	            alias: 'constant'
	          }
	        },
	        alias: 'variable',
	        lookbehind: true
	      },
	      // Highlight parameter names as variables
	      parameter: {
	        pattern: /(^|\s)-{1,2}(?:\w+:[+-]?)?\w+(?:\.\w+)*(?=[=\s]|$)/,
	        alias: 'variable',
	        lookbehind: true
	      },
	      string: [
	        // Support for Here-documents https://en.wikipedia.org/wiki/Here_document
	        {
	          pattern: /((?:^|[^<])<<-?\s*)(\w+)\s[\s\S]*?(?:\r?\n|\r)\2/,
	          lookbehind: true,
	          greedy: true,
	          inside: insideString
	        },
	        // Here-document with quotes around the tag
	        // → No expansion (so no “inside”).
	        {
	          pattern: /((?:^|[^<])<<-?\s*)(["'])(\w+)\2\s[\s\S]*?(?:\r?\n|\r)\3/,
	          lookbehind: true,
	          greedy: true,
	          inside: {
	            bash: commandAfterHeredoc
	          }
	        },
	        // “Normal” string
	        {
	          // https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html
	          pattern:
	            /(^|[^\\](?:\\\\)*)"(?:\\[\s\S]|\$\([^)]+\)|\$(?!\()|`[^`]+`|[^"\\`$])*"/,
	          lookbehind: true,
	          greedy: true,
	          inside: insideString
	        },
	        {
	          // https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html
	          pattern: /(^|[^$\\])'[^']*'/,
	          lookbehind: true,
	          greedy: true
	        },
	        {
	          // https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html
	          pattern: /\$'(?:[^'\\]|\\[\s\S])*'/,
	          greedy: true,
	          inside: {
	            entity: insideString.entity
	          }
	        }
	      ],
	      environment: {
	        pattern: RegExp('\\$?' + envVars),
	        alias: 'constant'
	      },
	      variable: insideString.variable,
	      function: {
	        pattern:
	          /(^|[\s;|&]|[<>]\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cargo|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|java|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|sysctl|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\s;|&])/,
	        lookbehind: true
	      },
	      keyword: {
	        pattern:
	          /(^|[\s;|&]|[<>]\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\s;|&])/,
	        lookbehind: true
	      },
	      // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html
	      builtin: {
	        pattern:
	          /(^|[\s;|&]|[<>]\()(?:\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\s;|&])/,
	        lookbehind: true,
	        // Alias added to make those easier to distinguish from strings.
	        alias: 'class-name'
	      },
	      boolean: {
	        pattern: /(^|[\s;|&]|[<>]\()(?:false|true)(?=$|[)\s;|&])/,
	        lookbehind: true
	      },
	      'file-descriptor': {
	        pattern: /\B&\d\b/,
	        alias: 'important'
	      },
	      operator: {
	        // Lots of redirections here, but not just that.
	        pattern:
	          /\d?<>|>\||\+=|=[=~]?|!=?|<<[<-]?|[&\d]?>>|\d[<>]&?|[<>][&=]?|&[>&]?|\|[&|]?/,
	        inside: {
	          'file-descriptor': {
	            pattern: /^\d/,
	            alias: 'important'
	          }
	        }
	      },
	      punctuation: /\$?\(\(?|\)\)?|\.\.|[{}[\];\\]/,
	      number: {
	        pattern: /(^|\s)(?:[1-9]\d*|0)(?:[.,]\d+)?\b/,
	        lookbehind: true
	      }
	    };
	    commandAfterHeredoc.inside = Prism.languages.bash;

	    /* Patterns in command substitution. */
	    var toBeCopied = [
	      'comment',
	      'function-name',
	      'for-or-select',
	      'assign-left',
	      'parameter',
	      'string',
	      'environment',
	      'function',
	      'keyword',
	      'builtin',
	      'boolean',
	      'file-descriptor',
	      'operator',
	      'punctuation',
	      'number'
	    ];
	    var inside = insideString.variable[1].inside;
	    for (var i = 0; i < toBeCopied.length; i++) {
	      inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];
	    }
	    Prism.languages.sh = Prism.languages.bash;
	    Prism.languages.shell = Prism.languages.bash;
	  })(Prism);
	}

	// @ts-nocheck
	csharp.displayName = 'csharp';
	csharp.aliases = ['cs', 'dotnet'];

	/** @type {import('../core.js').Syntax} */
	function csharp(Prism) {
	  Prism.register(clike)
	  ;(function (Prism) {
	    /**
	     * Replaces all placeholders "<<n>>" of given pattern with the n-th replacement (zero based).
	     *
	     * Note: This is a simple text based replacement. Be careful when using backreferences!
	     *
	     * @param {string} pattern the given pattern.
	     * @param {string[]} replacements a list of replacement which can be inserted into the given pattern.
	     * @returns {string} the pattern with all placeholders replaced with their corresponding replacements.
	     * @example replace(/a<<0>>a/.source, [/b+/.source]) === /a(?:b+)a/.source
	     */
	    function replace(pattern, replacements) {
	      return pattern.replace(/<<(\d+)>>/g, function (m, index) {
	        return '(?:' + replacements[+index] + ')'
	      })
	    }
	    /**
	     * @param {string} pattern
	     * @param {string[]} replacements
	     * @param {string} [flags]
	     * @returns {RegExp}
	     */
	    function re(pattern, replacements, flags) {
	      return RegExp(replace(pattern, replacements), flags || '')
	    }

	    /**
	     * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.
	     *
	     * @param {string} pattern
	     * @param {number} depthLog2
	     * @returns {string}
	     */
	    function nested(pattern, depthLog2) {
	      for (var i = 0; i < depthLog2; i++) {
	        pattern = pattern.replace(/<<self>>/g, function () {
	          return '(?:' + pattern + ')'
	        });
	      }
	      return pattern.replace(/<<self>>/g, '[^\\s\\S]')
	    }

	    // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/
	    var keywordKinds = {
	      // keywords which represent a return or variable type
	      type: 'bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void',
	      // keywords which are used to declare a type
	      typeDeclaration: 'class enum interface record struct',
	      // contextual keywords
	      // ("var" and "dynamic" are missing because they are used like types)
	      contextual:
	        'add alias and ascending async await by descending from(?=\\s*(?:\\w|$)) get global group into init(?=\\s*;) join let nameof not notnull on or orderby partial remove select set unmanaged value when where with(?=\\s*{)',
	      // all other keywords
	      other:
	        'abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield'
	    };

	    // keywords
	    function keywordsToPattern(words) {
	      return '\\b(?:' + words.trim().replace(/ /g, '|') + ')\\b'
	    }
	    var typeDeclarationKeywords = keywordsToPattern(
	      keywordKinds.typeDeclaration
	    );
	    var keywords = RegExp(
	      keywordsToPattern(
	        keywordKinds.type +
	          ' ' +
	          keywordKinds.typeDeclaration +
	          ' ' +
	          keywordKinds.contextual +
	          ' ' +
	          keywordKinds.other
	      )
	    );
	    var nonTypeKeywords = keywordsToPattern(
	      keywordKinds.typeDeclaration +
	        ' ' +
	        keywordKinds.contextual +
	        ' ' +
	        keywordKinds.other
	    );
	    var nonContextualKeywords = keywordsToPattern(
	      keywordKinds.type +
	        ' ' +
	        keywordKinds.typeDeclaration +
	        ' ' +
	        keywordKinds.other
	    );

	    // types
	    var generic = nested(/<(?:[^<>;=+\-*/%&|^]|<<self>>)*>/.source, 2); // the idea behind the other forbidden characters is to prevent false positives. Same for tupleElement.
	    var nestedRound = nested(/\((?:[^()]|<<self>>)*\)/.source, 2);
	    var name = /@?\b[A-Za-z_]\w*\b/.source;
	    var genericName = replace(/<<0>>(?:\s*<<1>>)?/.source, [name, generic]);
	    var identifier = replace(/(?!<<0>>)<<1>>(?:\s*\.\s*<<1>>)*/.source, [
	      nonTypeKeywords,
	      genericName
	    ]);
	    var array = /\[\s*(?:,\s*)*\]/.source;
	    var typeExpressionWithoutTuple = replace(
	      /<<0>>(?:\s*(?:\?\s*)?<<1>>)*(?:\s*\?)?/.source,
	      [identifier, array]
	    );
	    var tupleElement = replace(
	      /[^,()<>[\];=+\-*/%&|^]|<<0>>|<<1>>|<<2>>/.source,
	      [generic, nestedRound, array]
	    );
	    var tuple = replace(/\(<<0>>+(?:,<<0>>+)+\)/.source, [tupleElement]);
	    var typeExpression = replace(
	      /(?:<<0>>|<<1>>)(?:\s*(?:\?\s*)?<<2>>)*(?:\s*\?)?/.source,
	      [tuple, identifier, array]
	    );
	    var typeInside = {
	      keyword: keywords,
	      punctuation: /[<>()?,.:[\]]/
	    };

	    // strings & characters
	    // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#character-literals
	    // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#string-literals
	    var character = /'(?:[^\r\n'\\]|\\.|\\[Uux][\da-fA-F]{1,8})'/.source; // simplified pattern
	    var regularString = /"(?:\\.|[^\\"\r\n])*"/.source;
	    var verbatimString = /@"(?:""|\\[\s\S]|[^\\"])*"(?!")/.source;
	    Prism.languages.csharp = Prism.languages.extend('clike', {
	      string: [
	        {
	          pattern: re(/(^|[^$\\])<<0>>/.source, [verbatimString]),
	          lookbehind: true,
	          greedy: true
	        },
	        {
	          pattern: re(/(^|[^@$\\])<<0>>/.source, [regularString]),
	          lookbehind: true,
	          greedy: true
	        }
	      ],
	      'class-name': [
	        {
	          // Using static
	          // using static System.Math;
	          pattern: re(/(\busing\s+static\s+)<<0>>(?=\s*;)/.source, [
	            identifier
	          ]),
	          lookbehind: true,
	          inside: typeInside
	        },
	        {
	          // Using alias (type)
	          // using Project = PC.MyCompany.Project;
	          pattern: re(/(\busing\s+<<0>>\s*=\s*)<<1>>(?=\s*;)/.source, [
	            name,
	            typeExpression
	          ]),
	          lookbehind: true,
	          inside: typeInside
	        },
	        {
	          // Using alias (alias)
	          // using Project = PC.MyCompany.Project;
	          pattern: re(/(\busing\s+)<<0>>(?=\s*=)/.source, [name]),
	          lookbehind: true
	        },
	        {
	          // Type declarations
	          // class Foo<A, B>
	          // interface Foo<out A, B>
	          pattern: re(/(\b<<0>>\s+)<<1>>/.source, [
	            typeDeclarationKeywords,
	            genericName
	          ]),
	          lookbehind: true,
	          inside: typeInside
	        },
	        {
	          // Single catch exception declaration
	          // catch(Foo)
	          // (things like catch(Foo e) is covered by variable declaration)
	          pattern: re(/(\bcatch\s*\(\s*)<<0>>/.source, [identifier]),
	          lookbehind: true,
	          inside: typeInside
	        },
	        {
	          // Name of the type parameter of generic constraints
	          // where Foo : class
	          pattern: re(/(\bwhere\s+)<<0>>/.source, [name]),
	          lookbehind: true
	        },
	        {
	          // Casts and checks via as and is.
	          // as Foo<A>, is Bar<B>
	          // (things like if(a is Foo b) is covered by variable declaration)
	          pattern: re(/(\b(?:is(?:\s+not)?|as)\s+)<<0>>/.source, [
	            typeExpressionWithoutTuple
	          ]),
	          lookbehind: true,
	          inside: typeInside
	        },
	        {
	          // Variable, field and parameter declaration
	          // (Foo bar, Bar baz, Foo[,,] bay, Foo<Bar, FooBar<Bar>> bax)
	          pattern: re(
	            /\b<<0>>(?=\s+(?!<<1>>|with\s*\{)<<2>>(?:\s*[=,;:{)\]]|\s+(?:in|when)\b))/
	              .source,
	            [typeExpression, nonContextualKeywords, name]
	          ),
	          inside: typeInside
	        }
	      ],
	      keyword: keywords,
	      // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#literals
	      number:
	        /(?:\b0(?:x[\da-f_]*[\da-f]|b[01_]*[01])|(?:\B\.\d+(?:_+\d+)*|\b\d+(?:_+\d+)*(?:\.\d+(?:_+\d+)*)?)(?:e[-+]?\d+(?:_+\d+)*)?)(?:[dflmu]|lu|ul)?\b/i,
	      operator: />>=?|<<=?|[-=]>|([-+&|])\1|~|\?\?=?|[-+*/%&|^!=<>]=?/,
	      punctuation: /\?\.?|::|[{}[\];(),.:]/
	    });
	    Prism.languages.insertBefore('csharp', 'number', {
	      range: {
	        pattern: /\.\./,
	        alias: 'operator'
	      }
	    });
	    Prism.languages.insertBefore('csharp', 'punctuation', {
	      'named-parameter': {
	        pattern: re(/([(,]\s*)<<0>>(?=\s*:)/.source, [name]),
	        lookbehind: true,
	        alias: 'punctuation'
	      }
	    });
	    Prism.languages.insertBefore('csharp', 'class-name', {
	      namespace: {
	        // namespace Foo.Bar {}
	        // using Foo.Bar;
	        pattern: re(
	          /(\b(?:namespace|using)\s+)<<0>>(?:\s*\.\s*<<0>>)*(?=\s*[;{])/.source,
	          [name]
	        ),
	        lookbehind: true,
	        inside: {
	          punctuation: /\./
	        }
	      },
	      'type-expression': {
	        // default(Foo), typeof(Foo<Bar>), sizeof(int)
	        pattern: re(
	          /(\b(?:default|sizeof|typeof)\s*\(\s*(?!\s))(?:[^()\s]|\s(?!\s)|<<0>>)*(?=\s*\))/
	            .source,
	          [nestedRound]
	        ),
	        lookbehind: true,
	        alias: 'class-name',
	        inside: typeInside
	      },
	      'return-type': {
	        // Foo<Bar> ForBar(); Foo IFoo.Bar() => 0
	        // int this[int index] => 0; T IReadOnlyList<T>.this[int index] => this[index];
	        // int Foo => 0; int Foo { get; set } = 0;
	        pattern: re(
	          /<<0>>(?=\s+(?:<<1>>\s*(?:=>|[({]|\.\s*this\s*\[)|this\s*\[))/.source,
	          [typeExpression, identifier]
	        ),
	        inside: typeInside,
	        alias: 'class-name'
	      },
	      'constructor-invocation': {
	        // new List<Foo<Bar[]>> { }
	        pattern: re(/(\bnew\s+)<<0>>(?=\s*[[({])/.source, [typeExpression]),
	        lookbehind: true,
	        inside: typeInside,
	        alias: 'class-name'
	      },
	      /*'explicit-implementation': {
	// int IFoo<Foo>.Bar => 0; void IFoo<Foo<Foo>>.Foo<T>();
	pattern: replace(/\b<<0>>(?=\.<<1>>)/, className, methodOrPropertyDeclaration),
	inside: classNameInside,
	alias: 'class-name'
	},*/
	      'generic-method': {
	        // foo<Bar>()
	        pattern: re(/<<0>>\s*<<1>>(?=\s*\()/.source, [name, generic]),
	        inside: {
	          function: re(/^<<0>>/.source, [name]),
	          generic: {
	            pattern: RegExp(generic),
	            alias: 'class-name',
	            inside: typeInside
	          }
	        }
	      },
	      'type-list': {
	        // The list of types inherited or of generic constraints
	        // class Foo<F> : Bar, IList<FooBar>
	        // where F : Bar, IList<int>
	        pattern: re(
	          /\b((?:<<0>>\s+<<1>>|record\s+<<1>>\s*<<5>>|where\s+<<2>>)\s*:\s*)(?:<<3>>|<<4>>|<<1>>\s*<<5>>|<<6>>)(?:\s*,\s*(?:<<3>>|<<4>>|<<6>>))*(?=\s*(?:where|[{;]|=>|$))/
	            .source,
	          [
	            typeDeclarationKeywords,
	            genericName,
	            name,
	            typeExpression,
	            keywords.source,
	            nestedRound,
	            /\bnew\s*\(\s*\)/.source
	          ]
	        ),
	        lookbehind: true,
	        inside: {
	          'record-arguments': {
	            pattern: re(/(^(?!new\s*\()<<0>>\s*)<<1>>/.source, [
	              genericName,
	              nestedRound
	            ]),
	            lookbehind: true,
	            greedy: true,
	            inside: Prism.languages.csharp
	          },
	          keyword: keywords,
	          'class-name': {
	            pattern: RegExp(typeExpression),
	            greedy: true,
	            inside: typeInside
	          },
	          punctuation: /[,()]/
	        }
	      },
	      preprocessor: {
	        pattern: /(^[\t ]*)#.*/m,
	        lookbehind: true,
	        alias: 'property',
	        inside: {
	          // highlight preprocessor directives as keywords
	          directive: {
	            pattern:
	              /(#)\b(?:define|elif|else|endif|endregion|error|if|line|nullable|pragma|region|undef|warning)\b/,
	            lookbehind: true,
	            alias: 'keyword'
	          }
	        }
	      }
	    });

	    // attributes
	    var regularStringOrCharacter = regularString + '|' + character;
	    var regularStringCharacterOrComment = replace(
	      /\/(?![*/])|\/\/[^\r\n]*[\r\n]|\/\*(?:[^*]|\*(?!\/))*\*\/|<<0>>/.source,
	      [regularStringOrCharacter]
	    );
	    var roundExpression = nested(
	      replace(/[^"'/()]|<<0>>|\(<<self>>*\)/.source, [
	        regularStringCharacterOrComment
	      ]),
	      2
	    );

	    // https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/#attribute-targets
	    var attrTarget =
	      /\b(?:assembly|event|field|method|module|param|property|return|type)\b/
	        .source;
	    var attr = replace(/<<0>>(?:\s*\(<<1>>*\))?/.source, [
	      identifier,
	      roundExpression
	    ]);
	    Prism.languages.insertBefore('csharp', 'class-name', {
	      attribute: {
	        // Attributes
	        // [Foo], [Foo(1), Bar(2, Prop = "foo")], [return: Foo(1), Bar(2)], [assembly: Foo(Bar)]
	        pattern: re(
	          /((?:^|[^\s\w>)?])\s*\[\s*)(?:<<0>>\s*:\s*)?<<1>>(?:\s*,\s*<<1>>)*(?=\s*\])/
	            .source,
	          [attrTarget, attr]
	        ),
	        lookbehind: true,
	        greedy: true,
	        inside: {
	          target: {
	            pattern: re(/^<<0>>(?=\s*:)/.source, [attrTarget]),
	            alias: 'keyword'
	          },
	          'attribute-arguments': {
	            pattern: re(/\(<<0>>*\)/.source, [roundExpression]),
	            inside: Prism.languages.csharp
	          },
	          'class-name': {
	            pattern: RegExp(identifier),
	            inside: {
	              punctuation: /\./
	            }
	          },
	          punctuation: /[:,]/
	        }
	      }
	    });

	    // string interpolation
	    var formatString = /:[^}\r\n]+/.source;
	    // multi line
	    var mInterpolationRound = nested(
	      replace(/[^"'/()]|<<0>>|\(<<self>>*\)/.source, [
	        regularStringCharacterOrComment
	      ]),
	      2
	    );
	    var mInterpolation = replace(/\{(?!\{)(?:(?![}:])<<0>>)*<<1>>?\}/.source, [
	      mInterpolationRound,
	      formatString
	    ]);
	    // single line
	    var sInterpolationRound = nested(
	      replace(
	        /[^"'/()]|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/|<<0>>|\(<<self>>*\)/
	          .source,
	        [regularStringOrCharacter]
	      ),
	      2
	    );
	    var sInterpolation = replace(/\{(?!\{)(?:(?![}:])<<0>>)*<<1>>?\}/.source, [
	      sInterpolationRound,
	      formatString
	    ]);
	    function createInterpolationInside(interpolation, interpolationRound) {
	      return {
	        interpolation: {
	          pattern: re(/((?:^|[^{])(?:\{\{)*)<<0>>/.source, [interpolation]),
	          lookbehind: true,
	          inside: {
	            'format-string': {
	              pattern: re(/(^\{(?:(?![}:])<<0>>)*)<<1>>(?=\}$)/.source, [
	                interpolationRound,
	                formatString
	              ]),
	              lookbehind: true,
	              inside: {
	                punctuation: /^:/
	              }
	            },
	            punctuation: /^\{|\}$/,
	            expression: {
	              pattern: /[\s\S]+/,
	              alias: 'language-csharp',
	              inside: Prism.languages.csharp
	            }
	          }
	        },
	        string: /[\s\S]+/
	      }
	    }
	    Prism.languages.insertBefore('csharp', 'string', {
	      'interpolation-string': [
	        {
	          pattern: re(
	            /(^|[^\\])(?:\$@|@\$)"(?:""|\\[\s\S]|\{\{|<<0>>|[^\\{"])*"/.source,
	            [mInterpolation]
	          ),
	          lookbehind: true,
	          greedy: true,
	          inside: createInterpolationInside(mInterpolation, mInterpolationRound)
	        },
	        {
	          pattern: re(/(^|[^@\\])\$"(?:\\.|\{\{|<<0>>|[^\\"{])*"/.source, [
	            sInterpolation
	          ]),
	          lookbehind: true,
	          greedy: true,
	          inside: createInterpolationInside(sInterpolation, sInterpolationRound)
	        }
	      ],
	      char: {
	        pattern: RegExp(character),
	        greedy: true
	      }
	    });
	    Prism.languages.dotnet = Prism.languages.cs = Prism.languages.csharp;
	  })(Prism);
	}

	// @ts-nocheck
	markup.displayName = 'markup';
	markup.aliases = ['atom', 'html', 'mathml', 'rss', 'ssml', 'svg', 'xml'];

	/** @type {import('../core.js').Syntax} */
	function markup(Prism) {
	  Prism.languages.markup = {
	    comment: {
	      pattern: /<!--(?:(?!<!--)[\s\S])*?-->/,
	      greedy: true
	    },
	    prolog: {
	      pattern: /<\?[\s\S]+?\?>/,
	      greedy: true
	    },
	    doctype: {
	      // https://www.w3.org/TR/xml/#NT-doctypedecl
	      pattern:
	        /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,
	      greedy: true,
	      inside: {
	        'internal-subset': {
	          pattern: /(^[^\[]*\[)[\s\S]+(?=\]>$)/,
	          lookbehind: true,
	          greedy: true,
	          inside: null // see below
	        },

	        string: {
	          pattern: /"[^"]*"|'[^']*'/,
	          greedy: true
	        },
	        punctuation: /^<!|>$|[[\]]/,
	        'doctype-tag': /^DOCTYPE/i,
	        name: /[^\s<>'"]+/
	      }
	    },
	    cdata: {
	      pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
	      greedy: true
	    },
	    tag: {
	      pattern:
	        /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,
	      greedy: true,
	      inside: {
	        tag: {
	          pattern: /^<\/?[^\s>\/]+/,
	          inside: {
	            punctuation: /^<\/?/,
	            namespace: /^[^\s>\/:]+:/
	          }
	        },
	        'special-attr': [],
	        'attr-value': {
	          pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,
	          inside: {
	            punctuation: [
	              {
	                pattern: /^=/,
	                alias: 'attr-equals'
	              },
	              {
	                pattern: /^(\s*)["']|["']$/,
	                lookbehind: true
	              }
	            ]
	          }
	        },
	        punctuation: /\/?>/,
	        'attr-name': {
	          pattern: /[^\s>\/]+/,
	          inside: {
	            namespace: /^[^\s>\/:]+:/
	          }
	        }
	      }
	    },
	    entity: [
	      {
	        pattern: /&[\da-z]{1,8};/i,
	        alias: 'named-entity'
	      },
	      /&#x?[\da-f]{1,8};/i
	    ]
	  };
	  Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =
	    Prism.languages.markup['entity'];
	  Prism.languages.markup['doctype'].inside['internal-subset'].inside =
	    Prism.languages.markup;

	  // Plugin to make entity title show the real entity, idea by Roman Komarov
	  Prism.hooks.add('wrap', function (env) {
	    if (env.type === 'entity') {
	      env.attributes['title'] = env.content.value.replace(/&amp;/, '&');
	    }
	  });
	  Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {
	    /**
	     * Adds an inlined language to markup.
	     *
	     * An example of an inlined language is CSS with `<style>` tags.
	     *
	     * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as
	     * case insensitive.
	     * @param {string} lang The language key.
	     * @example
	     * addInlined('style', 'css');
	     */
	    value: function addInlined(tagName, lang) {
	      var includedCdataInside = {};
	      includedCdataInside['language-' + lang] = {
	        pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
	        lookbehind: true,
	        inside: Prism.languages[lang]
	      };
	      includedCdataInside['cdata'] = /^<!\[CDATA\[|\]\]>$/i;
	      var inside = {
	        'included-cdata': {
	          pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
	          inside: includedCdataInside
	        }
	      };
	      inside['language-' + lang] = {
	        pattern: /[\s\S]+/,
	        inside: Prism.languages[lang]
	      };
	      var def = {};
	      def[tagName] = {
	        pattern: RegExp(
	          /(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(
	            /__/g,
	            function () {
	              return tagName
	            }
	          ),
	          'i'
	        ),
	        lookbehind: true,
	        greedy: true,
	        inside: inside
	      };
	      Prism.languages.insertBefore('markup', 'cdata', def);
	    }
	  });
	  Object.defineProperty(Prism.languages.markup.tag, 'addAttribute', {
	    /**
	     * Adds an pattern to highlight languages embedded in HTML attributes.
	     *
	     * An example of an inlined language is CSS with `style` attributes.
	     *
	     * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as
	     * case insensitive.
	     * @param {string} lang The language key.
	     * @example
	     * addAttribute('style', 'css');
	     */
	    value: function (attrName, lang) {
	      Prism.languages.markup.tag.inside['special-attr'].push({
	        pattern: RegExp(
	          /(^|["'\s])/.source +
	            '(?:' +
	            attrName +
	            ')' +
	            /\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source,
	          'i'
	        ),
	        lookbehind: true,
	        inside: {
	          'attr-name': /^[^\s=]+/,
	          'attr-value': {
	            pattern: /=[\s\S]+/,
	            inside: {
	              value: {
	                pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,
	                lookbehind: true,
	                alias: [lang, 'language-' + lang],
	                inside: Prism.languages[lang]
	              },
	              punctuation: [
	                {
	                  pattern: /^=/,
	                  alias: 'attr-equals'
	                },
	                /"|'/
	              ]
	            }
	          }
	        }
	      });
	    }
	  });
	  Prism.languages.html = Prism.languages.markup;
	  Prism.languages.mathml = Prism.languages.markup;
	  Prism.languages.svg = Prism.languages.markup;
	  Prism.languages.xml = Prism.languages.extend('markup', {});
	  Prism.languages.ssml = Prism.languages.xml;
	  Prism.languages.atom = Prism.languages.xml;
	  Prism.languages.rss = Prism.languages.xml;
	}

	// @ts-nocheck
	css.displayName = 'css';
	css.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function css(Prism) {
	(function (Prism) {
	    var string =
	      /(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;
	    Prism.languages.css = {
	      comment: /\/\*[\s\S]*?\*\//,
	      atrule: {
	        pattern: RegExp(
	          '@[\\w-](?:' +
	            /[^;{\s"']|\s+(?!\s)/.source +
	            '|' +
	            string.source +
	            ')*?' +
	            /(?:;|(?=\s*\{))/.source
	        ),
	        inside: {
	          rule: /^@[\w-]+/,
	          'selector-function-argument': {
	            pattern:
	              /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,
	            lookbehind: true,
	            alias: 'selector'
	          },
	          keyword: {
	            pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/,
	            lookbehind: true
	          }
	          // See rest below
	        }
	      },

	      url: {
	        // https://drafts.csswg.org/css-values-3/#urls
	        pattern: RegExp(
	          '\\burl\\((?:' +
	            string.source +
	            '|' +
	            /(?:[^\\\r\n()"']|\\[\s\S])*/.source +
	            ')\\)',
	          'i'
	        ),
	        greedy: true,
	        inside: {
	          function: /^url/i,
	          punctuation: /^\(|\)$/,
	          string: {
	            pattern: RegExp('^' + string.source + '$'),
	            alias: 'url'
	          }
	        }
	      },
	      selector: {
	        pattern: RegExp(
	          '(^|[{}\\s])[^{}\\s](?:[^{};"\'\\s]|\\s+(?![\\s{])|' +
	            string.source +
	            ')*(?=\\s*\\{)'
	        ),
	        lookbehind: true
	      },
	      string: {
	        pattern: string,
	        greedy: true
	      },
	      property: {
	        pattern:
	          /(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,
	        lookbehind: true
	      },
	      important: /!important\b/i,
	      function: {
	        pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,
	        lookbehind: true
	      },
	      punctuation: /[(){};:,]/
	    };
	    Prism.languages.css['atrule'].inside.rest = Prism.languages.css;
	    var markup = Prism.languages.markup;
	    if (markup) {
	      markup.tag.addInlined('style', 'css');
	      markup.tag.addAttribute('style', 'css');
	    }
	  })(Prism);
	}

	// @ts-nocheck
	diff.displayName = 'diff';
	diff.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function diff(Prism) {
	(function (Prism) {
	    Prism.languages.diff = {
	      coord: [
	        // Match all kinds of coord lines (prefixed by "+++", "---" or "***").
	        /^(?:\*{3}|-{3}|\+{3}).*$/m,
	        // Match "@@ ... @@" coord lines in unified diff.
	        /^@@.*@@$/m,
	        // Match coord lines in normal diff (starts with a number).
	        /^\d.*$/m
	      ]

	      // deleted, inserted, unchanged, diff
	    };

	    /**
	     * A map from the name of a block to its line prefix.
	     *
	     * @type {Object<string, string>}
	     */
	    var PREFIXES = {
	      'deleted-sign': '-',
	      'deleted-arrow': '<',
	      'inserted-sign': '+',
	      'inserted-arrow': '>',
	      unchanged: ' ',
	      diff: '!'
	    };

	    // add a token for each prefix
	    Object.keys(PREFIXES).forEach(function (name) {
	      var prefix = PREFIXES[name];
	      var alias = [];
	      if (!/^\w+$/.test(name)) {
	        // "deleted-sign" -> "deleted"
	        alias.push(/\w+/.exec(name)[0]);
	      }
	      if (name === 'diff') {
	        alias.push('bold');
	      }
	      Prism.languages.diff[name] = {
	        pattern: RegExp(
	          '^(?:[' + prefix + '].*(?:\r\n?|\n|(?![\\s\\S])))+',
	          'm'
	        ),
	        alias: alias,
	        inside: {
	          line: {
	            pattern: /(.)(?=[\s\S]).*(?:\r\n?|\n)?/,
	            lookbehind: true
	          },
	          prefix: {
	            pattern: /[\s\S]/,
	            alias: /\w+/.exec(name)[0]
	          }
	        }
	      };
	    });

	    // make prefixes available to Diff plugin
	    Object.defineProperty(Prism.languages.diff, 'PREFIXES', {
	      value: PREFIXES
	    });
	  })(Prism);
	}

	// @ts-nocheck
	go.displayName = 'go';
	go.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function go(Prism) {
	  Prism.register(clike);
	  Prism.languages.go = Prism.languages.extend('clike', {
	    string: {
	      pattern: /(^|[^\\])"(?:\\.|[^"\\\r\n])*"|`[^`]*`/,
	      lookbehind: true,
	      greedy: true
	    },
	    keyword:
	      /\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\b/,
	    boolean: /\b(?:_|false|iota|nil|true)\b/,
	    number: [
	      // binary and octal integers
	      /\b0(?:b[01_]+|o[0-7_]+)i?\b/i,
	      // hexadecimal integers and floats
	      /\b0x(?:[a-f\d_]+(?:\.[a-f\d_]*)?|\.[a-f\d_]+)(?:p[+-]?\d+(?:_\d+)*)?i?(?!\w)/i,
	      // decimal integers and floats
	      /(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.\d[\d_]*)(?:e[+-]?[\d_]+)?i?(?!\w)/i
	    ],
	    operator:
	      /[*\/%^!=]=?|\+[=+]?|-[=-]?|\|[=|]?|&(?:=|&|\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\.\.\./,
	    builtin:
	      /\b(?:append|bool|byte|cap|close|complex|complex(?:64|128)|copy|delete|error|float(?:32|64)|u?int(?:8|16|32|64)?|imag|len|make|new|panic|print(?:ln)?|real|recover|rune|string|uintptr)\b/
	  });
	  Prism.languages.insertBefore('go', 'string', {
	    char: {
	      pattern: /'(?:\\.|[^'\\\r\n]){0,10}'/,
	      greedy: true
	    }
	  });
	  delete Prism.languages.go['class-name'];
	}

	// @ts-nocheck
	ini.displayName = 'ini';
	ini.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function ini(Prism) {
	  Prism.languages.ini = {
	    /**
	     * The component mimics the behavior of the Win32 API parser.
	     *
	     * @see {@link https://github.com/PrismJS/prism/issues/2775#issuecomment-787477723}
	     */

	    comment: {
	      pattern: /(^[ \f\t\v]*)[#;][^\n\r]*/m,
	      lookbehind: true
	    },
	    section: {
	      pattern: /(^[ \f\t\v]*)\[[^\n\r\]]*\]?/m,
	      lookbehind: true,
	      inside: {
	        'section-name': {
	          pattern: /(^\[[ \f\t\v]*)[^ \f\t\v\]]+(?:[ \f\t\v]+[^ \f\t\v\]]+)*/,
	          lookbehind: true,
	          alias: 'selector'
	        },
	        punctuation: /\[|\]/
	      }
	    },
	    key: {
	      pattern:
	        /(^[ \f\t\v]*)[^ \f\n\r\t\v=]+(?:[ \f\t\v]+[^ \f\n\r\t\v=]+)*(?=[ \f\t\v]*=)/m,
	      lookbehind: true,
	      alias: 'attr-name'
	    },
	    value: {
	      pattern: /(=[ \f\t\v]*)[^ \f\n\r\t\v]+(?:[ \f\t\v]+[^ \f\n\r\t\v]+)*/,
	      lookbehind: true,
	      alias: 'attr-value',
	      inside: {
	        'inner-value': {
	          pattern: /^("|').+(?=\1$)/,
	          lookbehind: true
	        }
	      }
	    },
	    punctuation: /=/
	  };
	}

	// @ts-nocheck
	java.displayName = 'java';
	java.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function java(Prism) {
	  Prism.register(clike)
	  ;(function (Prism) {
	    var keywords =
	      /\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record(?!\s*[(){}[\]<>=%~.:,;?+\-*/&|^])|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\b/;

	    // full package (optional) + parent classes (optional)
	    var classNamePrefix = /(?:[a-z]\w*\s*\.\s*)*(?:[A-Z]\w*\s*\.\s*)*/.source;

	    // based on the java naming conventions
	    var className = {
	      pattern: RegExp(
	        /(^|[^\w.])/.source +
	          classNamePrefix +
	          /[A-Z](?:[\d_A-Z]*[a-z]\w*)?\b/.source
	      ),
	      lookbehind: true,
	      inside: {
	        namespace: {
	          pattern: /^[a-z]\w*(?:\s*\.\s*[a-z]\w*)*(?:\s*\.)?/,
	          inside: {
	            punctuation: /\./
	          }
	        },
	        punctuation: /\./
	      }
	    };
	    Prism.languages.java = Prism.languages.extend('clike', {
	      string: {
	        pattern: /(^|[^\\])"(?:\\.|[^"\\\r\n])*"/,
	        lookbehind: true,
	        greedy: true
	      },
	      'class-name': [
	        className,
	        {
	          // variables, parameters, and constructor references
	          // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)
	          pattern: RegExp(
	            /(^|[^\w.])/.source +
	              classNamePrefix +
	              /[A-Z]\w*(?=\s+\w+\s*[;,=()]|\s*(?:\[[\s,]*\]\s*)?::\s*new\b)/
	                .source
	          ),
	          lookbehind: true,
	          inside: className.inside
	        },
	        {
	          // class names based on keyword
	          // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)
	          pattern: RegExp(
	            /(\b(?:class|enum|extends|implements|instanceof|interface|new|record|throws)\s+)/
	              .source +
	              classNamePrefix +
	              /[A-Z]\w*\b/.source
	          ),
	          lookbehind: true,
	          inside: className.inside
	        }
	      ],
	      keyword: keywords,
	      function: [
	        Prism.languages.clike.function,
	        {
	          pattern: /(::\s*)[a-z_]\w*/,
	          lookbehind: true
	        }
	      ],
	      number:
	        /\b0b[01][01_]*L?\b|\b0x(?:\.[\da-f_p+-]+|[\da-f_]+(?:\.[\da-f_p+-]+)?)\b|(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.\d[\d_]*)(?:e[+-]?\d[\d_]*)?[dfl]?/i,
	      operator: {
	        pattern:
	          /(^|[^.])(?:<<=?|>>>?=?|->|--|\+\+|&&|\|\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,
	        lookbehind: true
	      },
	      constant: /\b[A-Z][A-Z_\d]+\b/
	    });
	    Prism.languages.insertBefore('java', 'string', {
	      'triple-quoted-string': {
	        // http://openjdk.java.net/jeps/355#Description
	        pattern: /"""[ \t]*[\r\n](?:(?:"|"")?(?:\\.|[^"\\]))*"""/,
	        greedy: true,
	        alias: 'string'
	      },
	      char: {
	        pattern: /'(?:\\.|[^'\\\r\n]){1,6}'/,
	        greedy: true
	      }
	    });
	    Prism.languages.insertBefore('java', 'class-name', {
	      annotation: {
	        pattern: /(^|[^.])@\w+(?:\s*\.\s*\w+)*/,
	        lookbehind: true,
	        alias: 'punctuation'
	      },
	      generics: {
	        pattern:
	          /<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&))*>)*>)*>)*>/,
	        inside: {
	          'class-name': className,
	          keyword: keywords,
	          punctuation: /[<>(),.:]/,
	          operator: /[?&|]/
	        }
	      },
	      import: [
	        {
	          pattern: RegExp(
	            /(\bimport\s+)/.source +
	              classNamePrefix +
	              /(?:[A-Z]\w*|\*)(?=\s*;)/.source
	          ),
	          lookbehind: true,
	          inside: {
	            namespace: className.inside.namespace,
	            punctuation: /\./,
	            operator: /\*/,
	            'class-name': /\w+/
	          }
	        },
	        {
	          pattern: RegExp(
	            /(\bimport\s+static\s+)/.source +
	              classNamePrefix +
	              /(?:\w+|\*)(?=\s*;)/.source
	          ),
	          lookbehind: true,
	          alias: 'static',
	          inside: {
	            namespace: className.inside.namespace,
	            static: /\b\w+$/,
	            punctuation: /\./,
	            operator: /\*/,
	            'class-name': /\w+/
	          }
	        }
	      ],
	      namespace: {
	        pattern: RegExp(
	          /(\b(?:exports|import(?:\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\s+)(?!<keyword>)[a-z]\w*(?:\.[a-z]\w*)*\.?/.source.replace(
	            /<keyword>/g,
	            function () {
	              return keywords.source
	            }
	          )
	        ),
	        lookbehind: true,
	        inside: {
	          punctuation: /\./
	        }
	      }
	    });
	  })(Prism);
	}

	// @ts-nocheck
	regex$1.displayName = 'regex';
	regex$1.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function regex$1(Prism) {
	(function (Prism) {
	    var specialEscape = {
	      pattern: /\\[\\(){}[\]^$+*?|.]/,
	      alias: 'escape'
	    };
	    var escape =
	      /\\(?:x[\da-fA-F]{2}|u[\da-fA-F]{4}|u\{[\da-fA-F]+\}|0[0-7]{0,2}|[123][0-7]{2}|c[a-zA-Z]|.)/;
	    var charSet = {
	      pattern: /\.|\\[wsd]|\\p\{[^{}]+\}/i,
	      alias: 'class-name'
	    };
	    var charSetWithoutDot = {
	      pattern: /\\[wsd]|\\p\{[^{}]+\}/i,
	      alias: 'class-name'
	    };
	    var rangeChar = '(?:[^\\\\-]|' + escape.source + ')';
	    var range = RegExp(rangeChar + '-' + rangeChar);

	    // the name of a capturing group
	    var groupName = {
	      pattern: /(<|')[^<>']+(?=[>']$)/,
	      lookbehind: true,
	      alias: 'variable'
	    };
	    Prism.languages.regex = {
	      'char-class': {
	        pattern: /((?:^|[^\\])(?:\\\\)*)\[(?:[^\\\]]|\\[\s\S])*\]/,
	        lookbehind: true,
	        inside: {
	          'char-class-negation': {
	            pattern: /(^\[)\^/,
	            lookbehind: true,
	            alias: 'operator'
	          },
	          'char-class-punctuation': {
	            pattern: /^\[|\]$/,
	            alias: 'punctuation'
	          },
	          range: {
	            pattern: range,
	            inside: {
	              escape: escape,
	              'range-punctuation': {
	                pattern: /-/,
	                alias: 'operator'
	              }
	            }
	          },
	          'special-escape': specialEscape,
	          'char-set': charSetWithoutDot,
	          escape: escape
	        }
	      },
	      'special-escape': specialEscape,
	      'char-set': charSet,
	      backreference: [
	        {
	          // a backreference which is not an octal escape
	          pattern: /\\(?![123][0-7]{2})[1-9]/,
	          alias: 'keyword'
	        },
	        {
	          pattern: /\\k<[^<>']+>/,
	          alias: 'keyword',
	          inside: {
	            'group-name': groupName
	          }
	        }
	      ],
	      anchor: {
	        pattern: /[$^]|\\[ABbGZz]/,
	        alias: 'function'
	      },
	      escape: escape,
	      group: [
	        {
	          // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html
	          // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs

	          // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)
	          pattern:
	            /\((?:\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,
	          alias: 'punctuation',
	          inside: {
	            'group-name': groupName
	          }
	        },
	        {
	          pattern: /\)/,
	          alias: 'punctuation'
	        }
	      ],
	      quantifier: {
	        pattern: /(?:[+*?]|\{\d+(?:,\d*)?\})[?+]?/,
	        alias: 'number'
	      },
	      alternation: {
	        pattern: /\|/,
	        alias: 'keyword'
	      }
	    };
	  })(Prism);
	}

	// @ts-nocheck
	javascript.displayName = 'javascript';
	javascript.aliases = ['js'];

	/** @type {import('../core.js').Syntax} */
	function javascript(Prism) {
	  Prism.register(clike);
	  Prism.languages.javascript = Prism.languages.extend('clike', {
	    'class-name': [
	      Prism.languages.clike['class-name'],
	      {
	        pattern:
	          /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,
	        lookbehind: true
	      }
	    ],
	    keyword: [
	      {
	        pattern: /((?:^|\})\s*)catch\b/,
	        lookbehind: true
	      },
	      {
	        pattern:
	          /(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
	        lookbehind: true
	      }
	    ],
	    // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
	    function:
	      /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
	    number: {
	      pattern: RegExp(
	        /(^|[^\w$])/.source +
	          '(?:' +
	          // constant
	          (/NaN|Infinity/.source +
	            '|' +
	            // binary integer
	            /0[bB][01]+(?:_[01]+)*n?/.source +
	            '|' +
	            // octal integer
	            /0[oO][0-7]+(?:_[0-7]+)*n?/.source +
	            '|' +
	            // hexadecimal integer
	            /0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source +
	            '|' +
	            // decimal bigint
	            /\d+(?:_\d+)*n/.source +
	            '|' +
	            // decimal number (integer or float) but no bigint
	            /(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/
	              .source) +
	          ')' +
	          /(?![\w$])/.source
	      ),
	      lookbehind: true
	    },
	    operator:
	      /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/
	  });
	  Prism.languages.javascript['class-name'][0].pattern =
	    /(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/;
	  Prism.languages.insertBefore('javascript', 'keyword', {
	    regex: {
	      pattern: RegExp(
	        // lookbehind
	        // eslint-disable-next-line regexp/no-dupe-characters-character-class
	        /((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)/.source +
	          // Regex pattern:
	          // There are 2 regex patterns here. The RegExp set notation proposal added support for nested character
	          // classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible
	          // with the only syntax, so we have to define 2 different regex patterns.
	          /\//.source +
	          '(?:' +
	          /(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}/
	            .source +
	          '|' +
	          // `v` flag syntax. This supports 3 levels of nested character classes.
	          /(?:\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.)*\])*\])*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}v[dgimyus]{0,7}/
	            .source +
	          ')' +
	          // lookahead
	          /(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/
	            .source
	      ),
	      lookbehind: true,
	      greedy: true,
	      inside: {
	        'regex-source': {
	          pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
	          lookbehind: true,
	          alias: 'language-regex',
	          inside: Prism.languages.regex
	        },
	        'regex-delimiter': /^\/|\/$/,
	        'regex-flags': /^[a-z]+$/
	      }
	    },
	    // This must be declared before keyword because we use "function" inside the look-forward
	    'function-variable': {
	      pattern:
	        /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
	      alias: 'function'
	    },
	    parameter: [
	      {
	        pattern:
	          /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,
	        lookbehind: true,
	        inside: Prism.languages.javascript
	      },
	      {
	        pattern:
	          /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,
	        lookbehind: true,
	        inside: Prism.languages.javascript
	      },
	      {
	        pattern:
	          /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,
	        lookbehind: true,
	        inside: Prism.languages.javascript
	      },
	      {
	        pattern:
	          /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,
	        lookbehind: true,
	        inside: Prism.languages.javascript
	      }
	    ],
	    constant: /\b[A-Z](?:[A-Z_]|\dx?)*\b/
	  });
	  Prism.languages.insertBefore('javascript', 'string', {
	    hashbang: {
	      pattern: /^#!.*/,
	      greedy: true,
	      alias: 'comment'
	    },
	    'template-string': {
	      pattern:
	        /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,
	      greedy: true,
	      inside: {
	        'template-punctuation': {
	          pattern: /^`|`$/,
	          alias: 'string'
	        },
	        interpolation: {
	          pattern:
	            /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
	          lookbehind: true,
	          inside: {
	            'interpolation-punctuation': {
	              pattern: /^\$\{|\}$/,
	              alias: 'punctuation'
	            },
	            rest: Prism.languages.javascript
	          }
	        },
	        string: /[\s\S]+/
	      }
	    },
	    'string-property': {
	      pattern:
	        /((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,
	      lookbehind: true,
	      greedy: true,
	      alias: 'property'
	    }
	  });
	  Prism.languages.insertBefore('javascript', 'operator', {
	    'literal-property': {
	      pattern:
	        /((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,
	      lookbehind: true,
	      alias: 'property'
	    }
	  });
	  if (Prism.languages.markup) {
	    Prism.languages.markup.tag.addInlined('script', 'javascript');

	    // add attribute support for all DOM events.
	    // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events
	    Prism.languages.markup.tag.addAttribute(
	      /on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/
	        .source,
	      'javascript'
	    );
	  }
	  Prism.languages.js = Prism.languages.javascript;
	}

	// @ts-nocheck
	json.displayName = 'json';
	json.aliases = ['webmanifest'];

	/** @type {import('../core.js').Syntax} */
	function json(Prism) {
	  // https://www.json.org/json-en.html
	  Prism.languages.json = {
	    property: {
	      pattern: /(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?=\s*:)/,
	      lookbehind: true,
	      greedy: true
	    },
	    string: {
	      pattern: /(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?!\s*:)/,
	      lookbehind: true,
	      greedy: true
	    },
	    comment: {
	      pattern: /\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,
	      greedy: true
	    },
	    number: /-?\b\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,
	    punctuation: /[{}[\],]/,
	    operator: /:/,
	    boolean: /\b(?:false|true)\b/,
	    null: {
	      pattern: /\bnull\b/,
	      alias: 'keyword'
	    }
	  };
	  Prism.languages.webmanifest = Prism.languages.json;
	}

	// @ts-nocheck
	kotlin.displayName = 'kotlin';
	kotlin.aliases = ['kt', 'kts'];

	/** @type {import('../core.js').Syntax} */
	function kotlin(Prism) {
	  Prism.register(clike)
	  ;(function (Prism) {
	    Prism.languages.kotlin = Prism.languages.extend('clike', {
	      keyword: {
	        // The lookbehind prevents wrong highlighting of e.g. kotlin.properties.get
	        pattern:
	          /(^|[^.])\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\b/,
	        lookbehind: true
	      },
	      function: [
	        {
	          pattern: /(?:`[^\r\n`]+`|\b\w+)(?=\s*\()/,
	          greedy: true
	        },
	        {
	          pattern: /(\.)(?:`[^\r\n`]+`|\w+)(?=\s*\{)/,
	          lookbehind: true,
	          greedy: true
	        }
	      ],
	      number:
	        /\b(?:0[xX][\da-fA-F]+(?:_[\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\d+(?:_\d+)*(?:\.\d+(?:_\d+)*)?(?:[eE][+-]?\d+(?:_\d+)*)?[fFL]?)\b/,
	      operator:
	        /\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\/*%<>]=?|[?:]:?|\.\.|&&|\|\||\b(?:and|inv|or|shl|shr|ushr|xor)\b/
	    });
	    delete Prism.languages.kotlin['class-name'];
	    var interpolationInside = {
	      'interpolation-punctuation': {
	        pattern: /^\$\{?|\}$/,
	        alias: 'punctuation'
	      },
	      expression: {
	        pattern: /[\s\S]+/,
	        inside: Prism.languages.kotlin
	      }
	    };
	    Prism.languages.insertBefore('kotlin', 'string', {
	      // https://kotlinlang.org/spec/expressions.html#string-interpolation-expressions
	      'string-literal': [
	        {
	          pattern: /"""(?:[^$]|\$(?:(?!\{)|\{[^{}]*\}))*?"""/,
	          alias: 'multiline',
	          inside: {
	            interpolation: {
	              pattern: /\$(?:[a-z_]\w*|\{[^{}]*\})/i,
	              inside: interpolationInside
	            },
	            string: /[\s\S]+/
	          }
	        },
	        {
	          pattern: /"(?:[^"\\\r\n$]|\\.|\$(?:(?!\{)|\{[^{}]*\}))*"/,
	          alias: 'singleline',
	          inside: {
	            interpolation: {
	              pattern: /((?:^|[^\\])(?:\\{2})*)\$(?:[a-z_]\w*|\{[^{}]*\})/i,
	              lookbehind: true,
	              inside: interpolationInside
	            },
	            string: /[\s\S]+/
	          }
	        }
	      ],
	      char: {
	        // https://kotlinlang.org/spec/expressions.html#character-literals
	        pattern: /'(?:[^'\\\r\n]|\\(?:.|u[a-fA-F0-9]{0,4}))'/,
	        greedy: true
	      }
	    });
	    delete Prism.languages.kotlin['string'];
	    Prism.languages.insertBefore('kotlin', 'keyword', {
	      annotation: {
	        pattern: /\B@(?:\w+:)?(?:[A-Z]\w*|\[[^\]]+\])/,
	        alias: 'builtin'
	      }
	    });
	    Prism.languages.insertBefore('kotlin', 'function', {
	      label: {
	        pattern: /\b\w+@|@\w+\b/,
	        alias: 'symbol'
	      }
	    });
	    Prism.languages.kt = Prism.languages.kotlin;
	    Prism.languages.kts = Prism.languages.kotlin;
	  })(Prism);
	}

	// @ts-nocheck
	less.displayName = 'less';
	less.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function less(Prism) {
	  Prism.register(css);
	  /* FIXME :
	:extend() is not handled specifically : its highlighting is buggy.
	Mixin usage must be inside a ruleset to be highlighted.
	At-rules (e.g. import) containing interpolations are buggy.
	Detached rulesets are highlighted as at-rules.
	A comment before a mixin usage prevents the latter to be properly highlighted.
	*/

	  Prism.languages.less = Prism.languages.extend('css', {
	    comment: [
	      /\/\*[\s\S]*?\*\//,
	      {
	        pattern: /(^|[^\\])\/\/.*/,
	        lookbehind: true
	      }
	    ],
	    atrule: {
	      pattern:
	        /@[\w-](?:\((?:[^(){}]|\([^(){}]*\))*\)|[^(){};\s]|\s+(?!\s))*?(?=\s*\{)/,
	      inside: {
	        punctuation: /[:()]/
	      }
	    },
	    // selectors and mixins are considered the same
	    selector: {
	      pattern:
	        /(?:@\{[\w-]+\}|[^{};\s@])(?:@\{[\w-]+\}|\((?:[^(){}]|\([^(){}]*\))*\)|[^(){};@\s]|\s+(?!\s))*?(?=\s*\{)/,
	      inside: {
	        // mixin parameters
	        variable: /@+[\w-]+/
	      }
	    },
	    property: /(?:@\{[\w-]+\}|[\w-])+(?:\+_?)?(?=\s*:)/,
	    operator: /[+\-*\/]/
	  });
	  Prism.languages.insertBefore('less', 'property', {
	    variable: [
	      // Variable declaration (the colon must be consumed!)
	      {
	        pattern: /@[\w-]+\s*:/,
	        inside: {
	          punctuation: /:/
	        }
	      },
	      // Variable usage
	      /@@?[\w-]+/
	    ],
	    'mixin-usage': {
	      pattern: /([{;]\s*)[.#](?!\d)[\w-].*?(?=[(;])/,
	      lookbehind: true,
	      alias: 'function'
	    }
	  });
	}

	// @ts-nocheck
	lua.displayName = 'lua';
	lua.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function lua(Prism) {
	  Prism.languages.lua = {
	    comment: /^#!.+|--(?:\[(=*)\[[\s\S]*?\]\1\]|.*)/m,
	    // \z may be used to skip the following space
	    string: {
	      pattern:
	        /(["'])(?:(?!\1)[^\\\r\n]|\\z(?:\r\n|\s)|\\(?:\r\n|[^z]))*\1|\[(=*)\[[\s\S]*?\]\2\]/,
	      greedy: true
	    },
	    number:
	      /\b0x[a-f\d]+(?:\.[a-f\d]*)?(?:p[+-]?\d+)?\b|\b\d+(?:\.\B|(?:\.\d*)?(?:e[+-]?\d+)?\b)|\B\.\d+(?:e[+-]?\d+)?\b/i,
	    keyword:
	      /\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\b/,
	    function: /(?!\d)\w+(?=\s*(?:[({]))/,
	    operator: [
	      /[-+*%^&|#]|\/\/?|<[<=]?|>[>=]?|[=~]=?/,
	      {
	        // Match ".." but don't break "..."
	        pattern: /(^|[^.])\.\.(?!\.)/,
	        lookbehind: true
	      }
	    ],
	    punctuation: /[\[\](){},;]|\.+|:+/
	  };
	}

	// @ts-nocheck
	makefile.displayName = 'makefile';
	makefile.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function makefile(Prism) {
	  Prism.languages.makefile = {
	    comment: {
	      pattern: /(^|[^\\])#(?:\\(?:\r\n|[\s\S])|[^\\\r\n])*/,
	      lookbehind: true
	    },
	    string: {
	      pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
	      greedy: true
	    },
	    'builtin-target': {
	      pattern: /\.[A-Z][^:#=\s]+(?=\s*:(?!=))/,
	      alias: 'builtin'
	    },
	    target: {
	      pattern: /^(?:[^:=\s]|[ \t]+(?![\s:]))+(?=\s*:(?!=))/m,
	      alias: 'symbol',
	      inside: {
	        variable: /\$+(?:(?!\$)[^(){}:#=\s]+|(?=[({]))/
	      }
	    },
	    variable: /\$+(?:(?!\$)[^(){}:#=\s]+|\([@*%<^+?][DF]\)|(?=[({]))/,
	    // Directives
	    keyword:
	      /-include\b|\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\b/,
	    function: {
	      pattern:
	        /(\()(?:abspath|addsuffix|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:list|s)?)(?=[ \t])/,
	      lookbehind: true
	    },
	    operator: /(?:::|[?:+!])?=|[|@]/,
	    punctuation: /[:;(){}]/
	  };
	}

	// @ts-nocheck
	yaml.displayName = 'yaml';
	yaml.aliases = ['yml'];

	/** @type {import('../core.js').Syntax} */
	function yaml(Prism) {
	(function (Prism) {
	    // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property
	    // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node
	    var anchorOrAlias = /[*&][^\s[\]{},]+/;
	    // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property
	    var tag =
	      /!(?:<[\w\-%#;/?:@&=+$,.!~*'()[\]]+>|(?:[a-zA-Z\d-]*!)?[\w\-%#;/?:@&=+$.~*'()]+)?/;
	    // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)
	    var properties =
	      '(?:' +
	      tag.source +
	      '(?:[ \t]+' +
	      anchorOrAlias.source +
	      ')?|' +
	      anchorOrAlias.source +
	      '(?:[ \t]+' +
	      tag.source +
	      ')?)';
	    // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)
	    // This is a simplified version that doesn't support "#" and multiline keys
	    // All these long scarry character classes are simplified versions of YAML's characters
	    var plainKey =
	      /(?:[^\s\x00-\x08\x0e-\x1f!"#%&'*,\-:>?@[\]`{|}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]|[?:-]<PLAIN>)(?:[ \t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(
	        /<PLAIN>/g,
	        function () {
	          return /[^\s\x00-\x08\x0e-\x1f,[\]{}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]/
	            .source
	        }
	      );
	    var string = /"(?:[^"\\\r\n]|\\.)*"|'(?:[^'\\\r\n]|\\.)*'/.source;

	    /**
	     *
	     * @param {string} value
	     * @param {string} [flags]
	     * @returns {RegExp}
	     */
	    function createValuePattern(value, flags) {
	      flags = (flags || '').replace(/m/g, '') + 'm'; // add m flag
	      var pattern =
	        /([:\-,[{]\s*(?:\s<<prop>>[ \t]+)?)(?:<<value>>)(?=[ \t]*(?:$|,|\]|\}|(?:[\r\n]\s*)?#))/.source
	          .replace(/<<prop>>/g, function () {
	            return properties
	          })
	          .replace(/<<value>>/g, function () {
	            return value
	          });
	      return RegExp(pattern, flags)
	    }
	    Prism.languages.yaml = {
	      scalar: {
	        pattern: RegExp(
	          /([\-:]\s*(?:\s<<prop>>[ \t]+)?[|>])[ \t]*(?:((?:\r?\n|\r)[ \t]+)\S[^\r\n]*(?:\2[^\r\n]+)*)/.source.replace(
	            /<<prop>>/g,
	            function () {
	              return properties
	            }
	          )
	        ),
	        lookbehind: true,
	        alias: 'string'
	      },
	      comment: /#.*/,
	      key: {
	        pattern: RegExp(
	          /((?:^|[:\-,[{\r\n?])[ \t]*(?:<<prop>>[ \t]+)?)<<key>>(?=\s*:\s)/.source
	            .replace(/<<prop>>/g, function () {
	              return properties
	            })
	            .replace(/<<key>>/g, function () {
	              return '(?:' + plainKey + '|' + string + ')'
	            })
	        ),
	        lookbehind: true,
	        greedy: true,
	        alias: 'atrule'
	      },
	      directive: {
	        pattern: /(^[ \t]*)%.+/m,
	        lookbehind: true,
	        alias: 'important'
	      },
	      datetime: {
	        pattern: createValuePattern(
	          /\d{4}-\d\d?-\d\d?(?:[tT]|[ \t]+)\d\d?:\d{2}:\d{2}(?:\.\d*)?(?:[ \t]*(?:Z|[-+]\d\d?(?::\d{2})?))?|\d{4}-\d{2}-\d{2}|\d\d?:\d{2}(?::\d{2}(?:\.\d*)?)?/
	            .source
	        ),
	        lookbehind: true,
	        alias: 'number'
	      },
	      boolean: {
	        pattern: createValuePattern(/false|true/.source, 'i'),
	        lookbehind: true,
	        alias: 'important'
	      },
	      null: {
	        pattern: createValuePattern(/null|~/.source, 'i'),
	        lookbehind: true,
	        alias: 'important'
	      },
	      string: {
	        pattern: createValuePattern(string),
	        lookbehind: true,
	        greedy: true
	      },
	      number: {
	        pattern: createValuePattern(
	          /[+-]?(?:0x[\da-f]+|0o[0-7]+|(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?|\.inf|\.nan)/
	            .source,
	          'i'
	        ),
	        lookbehind: true
	      },
	      tag: tag,
	      important: anchorOrAlias,
	      punctuation: /---|[:[\]{}\-,|>?]|\.\.\./
	    };
	    Prism.languages.yml = Prism.languages.yaml;
	  })(Prism);
	}

	// @ts-nocheck
	markdown.displayName = 'markdown';
	markdown.aliases = ['md'];

	/** @type {import('../core.js').Syntax} */
	function markdown(Prism) {
	  Prism.register(markup)
	  ;(function (Prism) {
	    // Allow only one line break
	    var inner = /(?:\\.|[^\\\n\r]|(?:\n|\r\n?)(?![\r\n]))/.source;

	    /**
	     * This function is intended for the creation of the bold or italic pattern.
	     *
	     * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.
	     *
	     * _Note:_ Keep in mind that this adds a capturing group.
	     *
	     * @param {string} pattern
	     * @returns {RegExp}
	     */
	    function createInline(pattern) {
	      pattern = pattern.replace(/<inner>/g, function () {
	        return inner
	      });
	      return RegExp(/((?:^|[^\\])(?:\\{2})*)/.source + '(?:' + pattern + ')')
	    }
	    var tableCell = /(?:\\.|``(?:[^`\r\n]|`(?!`))+``|`[^`\r\n]+`|[^\\|\r\n`])+/
	      .source;
	    var tableRow =
	      /\|?__(?:\|__)+\|?(?:(?:\n|\r\n?)|(?![\s\S]))/.source.replace(
	        /__/g,
	        function () {
	          return tableCell
	        }
	      );
	    var tableLine =
	      /\|?[ \t]*:?-{3,}:?[ \t]*(?:\|[ \t]*:?-{3,}:?[ \t]*)+\|?(?:\n|\r\n?)/
	        .source;
	    Prism.languages.markdown = Prism.languages.extend('markup', {});
	    Prism.languages.insertBefore('markdown', 'prolog', {
	      'front-matter-block': {
	        pattern: /(^(?:\s*[\r\n])?)---(?!.)[\s\S]*?[\r\n]---(?!.)/,
	        lookbehind: true,
	        greedy: true,
	        inside: {
	          punctuation: /^---|---$/,
	          'front-matter': {
	            pattern: /\S+(?:\s+\S+)*/,
	            alias: ['yaml', 'language-yaml'],
	            inside: Prism.languages.yaml
	          }
	        }
	      },
	      blockquote: {
	        // > ...
	        pattern: /^>(?:[\t ]*>)*/m,
	        alias: 'punctuation'
	      },
	      table: {
	        pattern: RegExp(
	          '^' + tableRow + tableLine + '(?:' + tableRow + ')*',
	          'm'
	        ),
	        inside: {
	          'table-data-rows': {
	            pattern: RegExp(
	              '^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'
	            ),
	            lookbehind: true,
	            inside: {
	              'table-data': {
	                pattern: RegExp(tableCell),
	                inside: Prism.languages.markdown
	              },
	              punctuation: /\|/
	            }
	          },
	          'table-line': {
	            pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),
	            lookbehind: true,
	            inside: {
	              punctuation: /\||:?-{3,}:?/
	            }
	          },
	          'table-header-row': {
	            pattern: RegExp('^' + tableRow + '$'),
	            inside: {
	              'table-header': {
	                pattern: RegExp(tableCell),
	                alias: 'important',
	                inside: Prism.languages.markdown
	              },
	              punctuation: /\|/
	            }
	          }
	        }
	      },
	      code: [
	        {
	          // Prefixed by 4 spaces or 1 tab and preceded by an empty line
	          pattern:
	            /((?:^|\n)[ \t]*\n|(?:^|\r\n?)[ \t]*\r\n?)(?: {4}|\t).+(?:(?:\n|\r\n?)(?: {4}|\t).+)*/,
	          lookbehind: true,
	          alias: 'keyword'
	        },
	        {
	          // ```optional language
	          // code block
	          // ```
	          pattern: /^```[\s\S]*?^```$/m,
	          greedy: true,
	          inside: {
	            'code-block': {
	              pattern: /^(```.*(?:\n|\r\n?))[\s\S]+?(?=(?:\n|\r\n?)^```$)/m,
	              lookbehind: true
	            },
	            'code-language': {
	              pattern: /^(```).+/,
	              lookbehind: true
	            },
	            punctuation: /```/
	          }
	        }
	      ],
	      title: [
	        {
	          // title 1
	          // =======

	          // title 2
	          // -------
	          pattern: /\S.*(?:\n|\r\n?)(?:==+|--+)(?=[ \t]*$)/m,
	          alias: 'important',
	          inside: {
	            punctuation: /==+$|--+$/
	          }
	        },
	        {
	          // # title 1
	          // ###### title 6
	          pattern: /(^\s*)#.+/m,
	          lookbehind: true,
	          alias: 'important',
	          inside: {
	            punctuation: /^#+|#+$/
	          }
	        }
	      ],
	      hr: {
	        // ***
	        // ---
	        // * * *
	        // -----------
	        pattern: /(^\s*)([*-])(?:[\t ]*\2){2,}(?=\s*$)/m,
	        lookbehind: true,
	        alias: 'punctuation'
	      },
	      list: {
	        // * item
	        // + item
	        // - item
	        // 1. item
	        pattern: /(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m,
	        lookbehind: true,
	        alias: 'punctuation'
	      },
	      'url-reference': {
	        // [id]: http://example.com "Optional title"
	        // [id]: http://example.com 'Optional title'
	        // [id]: http://example.com (Optional title)
	        // [id]: <http://example.com> "Optional title"
	        pattern:
	          /!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/,
	        inside: {
	          variable: {
	            pattern: /^(!?\[)[^\]]+/,
	            lookbehind: true
	          },
	          string:
	            /(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/,
	          punctuation: /^[\[\]!:]|[<>]/
	        },
	        alias: 'url'
	      },
	      bold: {
	        // **strong**
	        // __strong__

	        // allow one nested instance of italic text using the same delimiter
	        pattern: createInline(
	          /\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\b|\*\*(?:(?!\*)<inner>|\*(?:(?!\*)<inner>)+\*)+\*\*/
	            .source
	        ),
	        lookbehind: true,
	        greedy: true,
	        inside: {
	          content: {
	            pattern: /(^..)[\s\S]+(?=..$)/,
	            lookbehind: true,
	            inside: {} // see below
	          },

	          punctuation: /\*\*|__/
	        }
	      },
	      italic: {
	        // *em*
	        // _em_

	        // allow one nested instance of bold text using the same delimiter
	        pattern: createInline(
	          /\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\b|\*(?:(?!\*)<inner>|\*\*(?:(?!\*)<inner>)+\*\*)+\*/
	            .source
	        ),
	        lookbehind: true,
	        greedy: true,
	        inside: {
	          content: {
	            pattern: /(^.)[\s\S]+(?=.$)/,
	            lookbehind: true,
	            inside: {} // see below
	          },

	          punctuation: /[*_]/
	        }
	      },
	      strike: {
	        // ~~strike through~~
	        // ~strike~
	        // eslint-disable-next-line regexp/strict
	        pattern: createInline(/(~~?)(?:(?!~)<inner>)+\2/.source),
	        lookbehind: true,
	        greedy: true,
	        inside: {
	          content: {
	            pattern: /(^~~?)[\s\S]+(?=\1$)/,
	            lookbehind: true,
	            inside: {} // see below
	          },

	          punctuation: /~~?/
	        }
	      },
	      'code-snippet': {
	        // `code`
	        // ``code``
	        pattern:
	          /(^|[^\\`])(?:``[^`\r\n]+(?:`[^`\r\n]+)*``(?!`)|`[^`\r\n]+`(?!`))/,
	        lookbehind: true,
	        greedy: true,
	        alias: ['code', 'keyword']
	      },
	      url: {
	        // [example](http://example.com "Optional title")
	        // [example][id]
	        // [example] [id]
	        pattern: createInline(
	          /!?\[(?:(?!\])<inner>)+\](?:\([^\s)]+(?:[\t ]+"(?:\\.|[^"\\])*")?\)|[ \t]?\[(?:(?!\])<inner>)+\])/
	            .source
	        ),
	        lookbehind: true,
	        greedy: true,
	        inside: {
	          operator: /^!/,
	          content: {
	            pattern: /(^\[)[^\]]+(?=\])/,
	            lookbehind: true,
	            inside: {} // see below
	          },

	          variable: {
	            pattern: /(^\][ \t]?\[)[^\]]+(?=\]$)/,
	            lookbehind: true
	          },
	          url: {
	            pattern: /(^\]\()[^\s)]+/,
	            lookbehind: true
	          },
	          string: {
	            pattern: /(^[ \t]+)"(?:\\.|[^"\\])*"(?=\)$)/,
	            lookbehind: true
	          }
	        }
	      }
	    })
	    ;['url', 'bold', 'italic', 'strike'].forEach(function (token) {
	['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (
	        inside
	      ) {
	        if (token !== inside) {
	          Prism.languages.markdown[token].inside.content.inside[inside] =
	            Prism.languages.markdown[inside];
	        }
	      });
	    });
	    Prism.hooks.add('after-tokenize', function (env) {
	      if (env.language !== 'markdown' && env.language !== 'md') {
	        return
	      }
	      function walkTokens(tokens) {
	        if (!tokens || typeof tokens === 'string') {
	          return
	        }
	        for (var i = 0, l = tokens.length; i < l; i++) {
	          var token = tokens[i];
	          if (token.type !== 'code') {
	            walkTokens(token.content);
	            continue
	          }

	          /*
	           * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token
	           * is optional. But the grammar is defined so that there is only one case we have to handle:
	           *
	           * token.content = [
	           *     <span class="punctuation">```</span>,
	           *     <span class="code-language">xxxx</span>,
	           *     '\n', // exactly one new lines (\r or \n or \r\n)
	           *     <span class="code-block">...</span>,
	           *     '\n', // exactly one new lines again
	           *     <span class="punctuation">```</span>
	           * ];
	           */

	          var codeLang = token.content[1];
	          var codeBlock = token.content[3];
	          if (
	            codeLang &&
	            codeBlock &&
	            codeLang.type === 'code-language' &&
	            codeBlock.type === 'code-block' &&
	            typeof codeLang.content === 'string'
	          ) {
	            // this might be a language that Prism does not support

	            // do some replacements to support C++, C#, and F#
	            var lang = codeLang.content
	              .replace(/\b#/g, 'sharp')
	              .replace(/\b\+\+/g, 'pp');
	            // only use the first word
	            lang = (/[a-z][\w-]*/i.exec(lang) || [''])[0].toLowerCase();
	            var alias = 'language-' + lang;

	            // add alias
	            if (!codeBlock.alias) {
	              codeBlock.alias = [alias];
	            } else if (typeof codeBlock.alias === 'string') {
	              codeBlock.alias = [codeBlock.alias, alias];
	            } else {
	              codeBlock.alias.push(alias);
	            }
	          }
	        }
	      }
	      walkTokens(env.tokens);
	    });
	    Prism.hooks.add('wrap', function (env) {
	      if (env.type !== 'code-block') {
	        return
	      }
	      var codeLang = '';
	      for (var i = 0, l = env.classes.length; i < l; i++) {
	        var cls = env.classes[i];
	        var match = /language-(.+)/.exec(cls);
	        if (match) {
	          codeLang = match[1];
	          break
	        }
	      }
	      var grammar = Prism.languages[codeLang];
	      if (!grammar) {
	        if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {
	          var id =
	            'md-' +
	            new Date().valueOf() +
	            '-' +
	            Math.floor(Math.random() * 1e16);
	          env.attributes['id'] = id;
	          Prism.plugins.autoloader.loadLanguages(codeLang, function () {
	            var ele = document.getElementById(id);
	            if (ele) {
	              ele.innerHTML = Prism.highlight(
	                ele.textContent,
	                Prism.languages[codeLang],
	                codeLang
	              );
	            }
	          });
	        }
	      } else {
	        env.content = Prism.highlight(env.content.value, grammar, codeLang);
	      }
	    });
	    RegExp(Prism.languages.markup.tag.pattern.source, 'gi');
	    Prism.languages.md = Prism.languages.markdown;
	  })(Prism);
	}

	// @ts-nocheck
	objectivec.displayName = 'objectivec';
	objectivec.aliases = ['objc'];

	/** @type {import('../core.js').Syntax} */
	function objectivec(Prism) {
	  Prism.register(c$1);
	  Prism.languages.objectivec = Prism.languages.extend('c', {
	    string: {
	      pattern: /@?"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,
	      greedy: true
	    },
	    keyword:
	      /\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\b/,
	    operator: /-[->]?|\+\+?|!=?|<<?=?|>>?=?|==?|&&?|\|\|?|[~^%?*\/@]/
	  });
	  delete Prism.languages.objectivec['class-name'];
	  Prism.languages.objc = Prism.languages.objectivec;
	}

	// @ts-nocheck
	perl.displayName = 'perl';
	perl.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function perl(Prism) {
	(function (Prism) {
	    var brackets =
	      /(?:\((?:[^()\\]|\\[\s\S])*\)|\{(?:[^{}\\]|\\[\s\S])*\}|\[(?:[^[\]\\]|\\[\s\S])*\]|<(?:[^<>\\]|\\[\s\S])*>)/
	        .source;
	    Prism.languages.perl = {
	      comment: [
	        {
	          // POD
	          pattern: /(^\s*)=\w[\s\S]*?=cut.*/m,
	          lookbehind: true,
	          greedy: true
	        },
	        {
	          pattern: /(^|[^\\$])#.*/,
	          lookbehind: true,
	          greedy: true
	        }
	      ],
	      // TODO Could be nice to handle Heredoc too.
	      string: [
	        {
	          pattern: RegExp(
	            /\b(?:q|qq|qw|qx)(?![a-zA-Z0-9])\s*/.source +
	              '(?:' +
	              [
	                // q/.../
	                /([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1/.source,
	                // q a...a
	                // eslint-disable-next-line regexp/strict
	                /([a-zA-Z0-9])(?:(?!\2)[^\\]|\\[\s\S])*\2/.source,
	                // q(...)
	                // q{...}
	                // q[...]
	                // q<...>
	                brackets
	              ].join('|') +
	              ')'
	          ),
	          greedy: true
	        },
	        // "...", `...`
	        {
	          pattern: /("|`)(?:(?!\1)[^\\]|\\[\s\S])*\1/,
	          greedy: true
	        },
	        // '...'
	        // FIXME Multi-line single-quoted strings are not supported as they would break variables containing '
	        {
	          pattern: /'(?:[^'\\\r\n]|\\.)*'/,
	          greedy: true
	        }
	      ],
	      regex: [
	        {
	          pattern: RegExp(
	            /\b(?:m|qr)(?![a-zA-Z0-9])\s*/.source +
	              '(?:' +
	              [
	                // m/.../
	                /([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1/.source,
	                // m a...a
	                // eslint-disable-next-line regexp/strict
	                /([a-zA-Z0-9])(?:(?!\2)[^\\]|\\[\s\S])*\2/.source,
	                // m(...)
	                // m{...}
	                // m[...]
	                // m<...>
	                brackets
	              ].join('|') +
	              ')' +
	              /[msixpodualngc]*/.source
	          ),
	          greedy: true
	        },
	        // The lookbehinds prevent -s from breaking
	        {
	          pattern: RegExp(
	            /(^|[^-])\b(?:s|tr|y)(?![a-zA-Z0-9])\s*/.source +
	              '(?:' +
	              [
	                // s/.../.../
	                // eslint-disable-next-line regexp/strict
	                /([^a-zA-Z0-9\s{(\[<])(?:(?!\2)[^\\]|\\[\s\S])*\2(?:(?!\2)[^\\]|\\[\s\S])*\2/
	                  .source,
	                // s a...a...a
	                // eslint-disable-next-line regexp/strict
	                /([a-zA-Z0-9])(?:(?!\3)[^\\]|\\[\s\S])*\3(?:(?!\3)[^\\]|\\[\s\S])*\3/
	                  .source,
	                // s(...)(...)
	                // s{...}{...}
	                // s[...][...]
	                // s<...><...>
	                // s(...)[...]
	                brackets + /\s*/.source + brackets
	              ].join('|') +
	              ')' +
	              /[msixpodualngcer]*/.source
	          ),
	          lookbehind: true,
	          greedy: true
	        },
	        // /.../
	        // The look-ahead tries to prevent two divisions on
	        // the same line from being highlighted as regex.
	        // This does not support multi-line regex.
	        {
	          pattern:
	            /\/(?:[^\/\\\r\n]|\\.)*\/[msixpodualngc]*(?=\s*(?:$|[\r\n,.;})&|\-+*~<>!?^]|(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|x|xor)\b))/,
	          greedy: true
	        }
	      ],
	      // FIXME Not sure about the handling of ::, ', and #
	      variable: [
	        // ${^POSTMATCH}
	        /[&*$@%]\{\^[A-Z]+\}/,
	        // $^V
	        /[&*$@%]\^[A-Z_]/,
	        // ${...}
	        /[&*$@%]#?(?=\{)/,
	        // $foo
	        /[&*$@%]#?(?:(?:::)*'?(?!\d)[\w$]+(?![\w$]))+(?:::)*/,
	        // $1
	        /[&*$@%]\d+/,
	        // $_, @_, %!
	        // The negative lookahead prevents from breaking the %= operator
	        /(?!%=)[$@%][!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~]/
	      ],
	      filehandle: {
	        // <>, <FOO>, _
	        pattern: /<(?![<=])\S*?>|\b_\b/,
	        alias: 'symbol'
	      },
	      'v-string': {
	        // v1.2, 1.2.3
	        pattern: /v\d+(?:\.\d+)*|\d+(?:\.\d+){2,}/,
	        alias: 'string'
	      },
	      function: {
	        pattern: /(\bsub[ \t]+)\w+/,
	        lookbehind: true
	      },
	      keyword:
	        /\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\b/,
	      number:
	        /\b(?:0x[\dA-Fa-f](?:_?[\dA-Fa-f])*|0b[01](?:_?[01])*|(?:(?:\d(?:_?\d)*)?\.)?\d(?:_?\d)*(?:[Ee][+-]?\d+)?)\b/,
	      operator:
	        /-[rwxoRWXOezsfdlpSbctugkTBMAC]\b|\+[+=]?|-[-=>]?|\*\*?=?|\/\/?=?|=[=~>]?|~[~=]?|\|\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\.(?:=|\.\.?)?|[\\?]|\bx(?:=|\b)|\b(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|xor)\b/,
	      punctuation: /[{}[\];(),:]/
	    };
	  })(Prism);
	}

	// @ts-nocheck
	markupTemplating.displayName = 'markup-templating';
	markupTemplating.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function markupTemplating(Prism) {
	  Prism.register(markup)
	  ;(function (Prism) {
	    /**
	     * Returns the placeholder for the given language id and index.
	     *
	     * @param {string} language
	     * @param {string|number} index
	     * @returns {string}
	     */
	    function getPlaceholder(language, index) {
	      return '___' + language.toUpperCase() + index + '___'
	    }
	    Object.defineProperties((Prism.languages['markup-templating'] = {}), {
	      buildPlaceholders: {
	        /**
	         * Tokenize all inline templating expressions matching `placeholderPattern`.
	         *
	         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns
	         * `true` will be replaced.
	         *
	         * @param {object} env The environment of the `before-tokenize` hook.
	         * @param {string} language The language id.
	         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.
	         * @param {(match: string) => boolean} [replaceFilter]
	         */
	        value: function (env, language, placeholderPattern, replaceFilter) {
	          if (env.language !== language) {
	            return
	          }
	          var tokenStack = (env.tokenStack = []);
	          env.code = env.code.replace(placeholderPattern, function (match) {
	            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {
	              return match
	            }
	            var i = tokenStack.length;
	            var placeholder;

	            // Check for existing strings
	            while (
	              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==
	              -1
	            ) {
	              ++i;
	            }

	            // Create a sparse array
	            tokenStack[i] = match;
	            return placeholder
	          });

	          // Switch the grammar to markup
	          env.grammar = Prism.languages.markup;
	        }
	      },
	      tokenizePlaceholders: {
	        /**
	         * Replace placeholders with proper tokens after tokenizing.
	         *
	         * @param {object} env The environment of the `after-tokenize` hook.
	         * @param {string} language The language id.
	         */
	        value: function (env, language) {
	          if (env.language !== language || !env.tokenStack) {
	            return
	          }

	          // Switch the grammar back
	          env.grammar = Prism.languages[language];
	          var j = 0;
	          var keys = Object.keys(env.tokenStack);
	          function walkTokens(tokens) {
	            for (var i = 0; i < tokens.length; i++) {
	              // all placeholders are replaced already
	              if (j >= keys.length) {
	                break
	              }
	              var token = tokens[i];
	              if (
	                typeof token === 'string' ||
	                (token.content && typeof token.content === 'string')
	              ) {
	                var k = keys[j];
	                var t = env.tokenStack[k];
	                var s = typeof token === 'string' ? token : token.content;
	                var placeholder = getPlaceholder(language, k);
	                var index = s.indexOf(placeholder);
	                if (index > -1) {
	                  ++j;
	                  var before = s.substring(0, index);
	                  var middle = new Prism.Token(
	                    language,
	                    Prism.tokenize(t, env.grammar),
	                    'language-' + language,
	                    t
	                  );
	                  var after = s.substring(index + placeholder.length);
	                  var replacement = [];
	                  if (before) {
	                    replacement.push.apply(replacement, walkTokens([before]));
	                  }
	                  replacement.push(middle);
	                  if (after) {
	                    replacement.push.apply(replacement, walkTokens([after]));
	                  }
	                  if (typeof token === 'string') {
	                    tokens.splice.apply(tokens, [i, 1].concat(replacement));
	                  } else {
	                    token.content = replacement;
	                  }
	                }
	              } else if (
	                token.content /* && typeof token.content !== 'string' */
	              ) {
	                walkTokens(token.content);
	              }
	            }
	            return tokens
	          }
	          walkTokens(env.tokens);
	        }
	      }
	    });
	  })(Prism);
	}

	// @ts-nocheck
	php.displayName = 'php';
	php.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function php(Prism) {
	  Prism.register(markupTemplating)
	  /**
	   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/
	   * Modified by Miles Johnson: http://milesj.me
	   * Rewritten by Tom Pavelec
	   *
	   * Supports PHP 5.3 - 8.0
	   */
	  ;(function (Prism) {
	    var comment = /\/\*[\s\S]*?\*\/|\/\/.*|#(?!\[).*/;
	    var constant = [
	      {
	        pattern: /\b(?:false|true)\b/i,
	        alias: 'boolean'
	      },
	      {
	        pattern: /(::\s*)\b[a-z_]\w*\b(?!\s*\()/i,
	        greedy: true,
	        lookbehind: true
	      },
	      {
	        pattern: /(\b(?:case|const)\s+)\b[a-z_]\w*(?=\s*[;=])/i,
	        greedy: true,
	        lookbehind: true
	      },
	      /\b(?:null)\b/i,
	      /\b[A-Z_][A-Z0-9_]*\b(?!\s*\()/
	    ];
	    var number =
	      /\b0b[01]+(?:_[01]+)*\b|\b0o[0-7]+(?:_[0-7]+)*\b|\b0x[\da-f]+(?:_[\da-f]+)*\b|(?:\b\d+(?:_\d+)*\.?(?:\d+(?:_\d+)*)?|\B\.\d+)(?:e[+-]?\d+)?/i;
	    var operator =
	      /<?=>|\?\?=?|\.{3}|\??->|[!=]=?=?|::|\*\*=?|--|\+\+|&&|\|\||<<|>>|[?~]|[/^|%*&<>.+-]=?/;
	    var punctuation = /[{}\[\](),:;]/;
	    Prism.languages.php = {
	      delimiter: {
	        pattern: /\?>$|^<\?(?:php(?=\s)|=)?/i,
	        alias: 'important'
	      },
	      comment: comment,
	      variable: /\$+(?:\w+\b|(?=\{))/,
	      package: {
	        pattern:
	          /(namespace\s+|use\s+(?:function\s+)?)(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,
	        lookbehind: true,
	        inside: {
	          punctuation: /\\/
	        }
	      },
	      'class-name-definition': {
	        pattern: /(\b(?:class|enum|interface|trait)\s+)\b[a-z_]\w*(?!\\)\b/i,
	        lookbehind: true,
	        alias: 'class-name'
	      },
	      'function-definition': {
	        pattern: /(\bfunction\s+)[a-z_]\w*(?=\s*\()/i,
	        lookbehind: true,
	        alias: 'function'
	      },
	      keyword: [
	        {
	          pattern:
	            /(\(\s*)\b(?:array|bool|boolean|float|int|integer|object|string)\b(?=\s*\))/i,
	          alias: 'type-casting',
	          greedy: true,
	          lookbehind: true
	        },
	        {
	          pattern:
	            /([(,?]\s*)\b(?:array(?!\s*\()|bool|callable|(?:false|null)(?=\s*\|)|float|int|iterable|mixed|object|self|static|string)\b(?=\s*\$)/i,
	          alias: 'type-hint',
	          greedy: true,
	          lookbehind: true
	        },
	        {
	          pattern:
	            /(\)\s*:\s*(?:\?\s*)?)\b(?:array(?!\s*\()|bool|callable|(?:false|null)(?=\s*\|)|float|int|iterable|mixed|never|object|self|static|string|void)\b/i,
	          alias: 'return-type',
	          greedy: true,
	          lookbehind: true
	        },
	        {
	          pattern:
	            /\b(?:array(?!\s*\()|bool|float|int|iterable|mixed|object|string|void)\b/i,
	          alias: 'type-declaration',
	          greedy: true
	        },
	        {
	          pattern: /(\|\s*)(?:false|null)\b|\b(?:false|null)(?=\s*\|)/i,
	          alias: 'type-declaration',
	          greedy: true,
	          lookbehind: true
	        },
	        {
	          pattern: /\b(?:parent|self|static)(?=\s*::)/i,
	          alias: 'static-context',
	          greedy: true
	        },
	        {
	          // yield from
	          pattern: /(\byield\s+)from\b/i,
	          lookbehind: true
	        },
	        // `class` is always a keyword unlike other keywords
	        /\bclass\b/i,
	        {
	          // https://www.php.net/manual/en/reserved.keywords.php
	          //
	          // keywords cannot be preceded by "->"
	          // the complex lookbehind means `(?<!(?:->|::)\s*)`
	          pattern:
	            /((?:^|[^\s>:]|(?:^|[^-])>|(?:^|[^:]):)\s*)\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|never|new|or|parent|print|private|protected|public|readonly|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\b/i,
	          lookbehind: true
	        }
	      ],
	      'argument-name': {
	        pattern: /([(,]\s*)\b[a-z_]\w*(?=\s*:(?!:))/i,
	        lookbehind: true
	      },
	      'class-name': [
	        {
	          pattern:
	            /(\b(?:extends|implements|instanceof|new(?!\s+self|\s+static))\s+|\bcatch\s*\()\b[a-z_]\w*(?!\\)\b/i,
	          greedy: true,
	          lookbehind: true
	        },
	        {
	          pattern: /(\|\s*)\b[a-z_]\w*(?!\\)\b/i,
	          greedy: true,
	          lookbehind: true
	        },
	        {
	          pattern: /\b[a-z_]\w*(?!\\)\b(?=\s*\|)/i,
	          greedy: true
	        },
	        {
	          pattern: /(\|\s*)(?:\\?\b[a-z_]\w*)+\b/i,
	          alias: 'class-name-fully-qualified',
	          greedy: true,
	          lookbehind: true,
	          inside: {
	            punctuation: /\\/
	          }
	        },
	        {
	          pattern: /(?:\\?\b[a-z_]\w*)+\b(?=\s*\|)/i,
	          alias: 'class-name-fully-qualified',
	          greedy: true,
	          inside: {
	            punctuation: /\\/
	          }
	        },
	        {
	          pattern:
	            /(\b(?:extends|implements|instanceof|new(?!\s+self\b|\s+static\b))\s+|\bcatch\s*\()(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,
	          alias: 'class-name-fully-qualified',
	          greedy: true,
	          lookbehind: true,
	          inside: {
	            punctuation: /\\/
	          }
	        },
	        {
	          pattern: /\b[a-z_]\w*(?=\s*\$)/i,
	          alias: 'type-declaration',
	          greedy: true
	        },
	        {
	          pattern: /(?:\\?\b[a-z_]\w*)+(?=\s*\$)/i,
	          alias: ['class-name-fully-qualified', 'type-declaration'],
	          greedy: true,
	          inside: {
	            punctuation: /\\/
	          }
	        },
	        {
	          pattern: /\b[a-z_]\w*(?=\s*::)/i,
	          alias: 'static-context',
	          greedy: true
	        },
	        {
	          pattern: /(?:\\?\b[a-z_]\w*)+(?=\s*::)/i,
	          alias: ['class-name-fully-qualified', 'static-context'],
	          greedy: true,
	          inside: {
	            punctuation: /\\/
	          }
	        },
	        {
	          pattern: /([(,?]\s*)[a-z_]\w*(?=\s*\$)/i,
	          alias: 'type-hint',
	          greedy: true,
	          lookbehind: true
	        },
	        {
	          pattern: /([(,?]\s*)(?:\\?\b[a-z_]\w*)+(?=\s*\$)/i,
	          alias: ['class-name-fully-qualified', 'type-hint'],
	          greedy: true,
	          lookbehind: true,
	          inside: {
	            punctuation: /\\/
	          }
	        },
	        {
	          pattern: /(\)\s*:\s*(?:\?\s*)?)\b[a-z_]\w*(?!\\)\b/i,
	          alias: 'return-type',
	          greedy: true,
	          lookbehind: true
	        },
	        {
	          pattern: /(\)\s*:\s*(?:\?\s*)?)(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,
	          alias: ['class-name-fully-qualified', 'return-type'],
	          greedy: true,
	          lookbehind: true,
	          inside: {
	            punctuation: /\\/
	          }
	        }
	      ],
	      constant: constant,
	      function: {
	        pattern: /(^|[^\\\w])\\?[a-z_](?:[\w\\]*\w)?(?=\s*\()/i,
	        lookbehind: true,
	        inside: {
	          punctuation: /\\/
	        }
	      },
	      property: {
	        pattern: /(->\s*)\w+/,
	        lookbehind: true
	      },
	      number: number,
	      operator: operator,
	      punctuation: punctuation
	    };
	    var string_interpolation = {
	      pattern:
	        /\{\$(?:\{(?:\{[^{}]+\}|[^{}]+)\}|[^{}])+\}|(^|[^\\{])\$+(?:\w+(?:\[[^\r\n\[\]]+\]|->\w+)?)/,
	      lookbehind: true,
	      inside: Prism.languages.php
	    };
	    var string = [
	      {
	        pattern: /<<<'([^']+)'[\r\n](?:.*[\r\n])*?\1;/,
	        alias: 'nowdoc-string',
	        greedy: true,
	        inside: {
	          delimiter: {
	            pattern: /^<<<'[^']+'|[a-z_]\w*;$/i,
	            alias: 'symbol',
	            inside: {
	              punctuation: /^<<<'?|[';]$/
	            }
	          }
	        }
	      },
	      {
	        pattern:
	          /<<<(?:"([^"]+)"[\r\n](?:.*[\r\n])*?\1;|([a-z_]\w*)[\r\n](?:.*[\r\n])*?\2;)/i,
	        alias: 'heredoc-string',
	        greedy: true,
	        inside: {
	          delimiter: {
	            pattern: /^<<<(?:"[^"]+"|[a-z_]\w*)|[a-z_]\w*;$/i,
	            alias: 'symbol',
	            inside: {
	              punctuation: /^<<<"?|[";]$/
	            }
	          },
	          interpolation: string_interpolation
	        }
	      },
	      {
	        pattern: /`(?:\\[\s\S]|[^\\`])*`/,
	        alias: 'backtick-quoted-string',
	        greedy: true
	      },
	      {
	        pattern: /'(?:\\[\s\S]|[^\\'])*'/,
	        alias: 'single-quoted-string',
	        greedy: true
	      },
	      {
	        pattern: /"(?:\\[\s\S]|[^\\"])*"/,
	        alias: 'double-quoted-string',
	        greedy: true,
	        inside: {
	          interpolation: string_interpolation
	        }
	      }
	    ];
	    Prism.languages.insertBefore('php', 'variable', {
	      string: string,
	      attribute: {
	        pattern:
	          /#\[(?:[^"'\/#]|\/(?![*/])|\/\/.*$|#(?!\[).*$|\/\*(?:[^*]|\*(?!\/))*\*\/|"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*')+\](?=\s*[a-z$#])/im,
	        greedy: true,
	        inside: {
	          'attribute-content': {
	            pattern: /^(#\[)[\s\S]+(?=\]$)/,
	            lookbehind: true,
	            // inside can appear subset of php
	            inside: {
	              comment: comment,
	              string: string,
	              'attribute-class-name': [
	                {
	                  pattern: /([^:]|^)\b[a-z_]\w*(?!\\)\b/i,
	                  alias: 'class-name',
	                  greedy: true,
	                  lookbehind: true
	                },
	                {
	                  pattern: /([^:]|^)(?:\\?\b[a-z_]\w*)+/i,
	                  alias: ['class-name', 'class-name-fully-qualified'],
	                  greedy: true,
	                  lookbehind: true,
	                  inside: {
	                    punctuation: /\\/
	                  }
	                }
	              ],
	              constant: constant,
	              number: number,
	              operator: operator,
	              punctuation: punctuation
	            }
	          },
	          delimiter: {
	            pattern: /^#\[|\]$/,
	            alias: 'punctuation'
	          }
	        }
	      }
	    });
	    Prism.hooks.add('before-tokenize', function (env) {
	      if (!/<\?/.test(env.code)) {
	        return
	      }
	      var phpPattern =
	        /<\?(?:[^"'/#]|\/(?![*/])|("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|(?:\/\/|#(?!\[))(?:[^?\n\r]|\?(?!>))*(?=$|\?>|[\r\n])|#\[|\/\*(?:[^*]|\*(?!\/))*(?:\*\/|$))*?(?:\?>|$)/g;
	      Prism.languages['markup-templating'].buildPlaceholders(
	        env,
	        'php',
	        phpPattern
	      );
	    });
	    Prism.hooks.add('after-tokenize', function (env) {
	      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');
	    });
	  })(Prism);
	}

	// @ts-nocheck
	python.displayName = 'python';
	python.aliases = ['py'];

	/** @type {import('../core.js').Syntax} */
	function python(Prism) {
	  Prism.languages.python = {
	    comment: {
	      pattern: /(^|[^\\])#.*/,
	      lookbehind: true,
	      greedy: true
	    },
	    'string-interpolation': {
	      pattern:
	        /(?:f|fr|rf)(?:("""|''')[\s\S]*?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2)/i,
	      greedy: true,
	      inside: {
	        interpolation: {
	          // "{" <expression> <optional "!s", "!r", or "!a"> <optional ":" format specifier> "}"
	          pattern:
	            /((?:^|[^{])(?:\{\{)*)\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}])+\})+\})+\}/,
	          lookbehind: true,
	          inside: {
	            'format-spec': {
	              pattern: /(:)[^:(){}]+(?=\}$)/,
	              lookbehind: true
	            },
	            'conversion-option': {
	              pattern: /![sra](?=[:}]$)/,
	              alias: 'punctuation'
	            },
	            rest: null
	          }
	        },
	        string: /[\s\S]+/
	      }
	    },
	    'triple-quoted-string': {
	      pattern: /(?:[rub]|br|rb)?("""|''')[\s\S]*?\1/i,
	      greedy: true,
	      alias: 'string'
	    },
	    string: {
	      pattern: /(?:[rub]|br|rb)?("|')(?:\\.|(?!\1)[^\\\r\n])*\1/i,
	      greedy: true
	    },
	    function: {
	      pattern: /((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g,
	      lookbehind: true
	    },
	    'class-name': {
	      pattern: /(\bclass\s+)\w+/i,
	      lookbehind: true
	    },
	    decorator: {
	      pattern: /(^[\t ]*)@\w+(?:\.\w+)*/m,
	      lookbehind: true,
	      alias: ['annotation', 'punctuation'],
	      inside: {
	        punctuation: /\./
	      }
	    },
	    keyword:
	      /\b(?:_(?=\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\b/,
	    builtin:
	      /\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b/,
	    boolean: /\b(?:False|None|True)\b/,
	    number:
	      /\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\b|(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)(?:e[+-]?\d+(?:_\d+)*)?j?(?!\w)/i,
	    operator: /[-+%=]=?|!=|:=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,
	    punctuation: /[{}[\];(),.:]/
	  };
	  Prism.languages.python['string-interpolation'].inside[
	    'interpolation'
	  ].inside.rest = Prism.languages.python;
	  Prism.languages.py = Prism.languages.python;
	}

	// @ts-nocheck
	r.displayName = 'r';
	r.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function r(Prism) {
	  Prism.languages.r = {
	    comment: /#.*/,
	    string: {
	      pattern: /(['"])(?:\\.|(?!\1)[^\\\r\n])*\1/,
	      greedy: true
	    },
	    'percent-operator': {
	      // Includes user-defined operators
	      // and %%, %*%, %/%, %in%, %o%, %x%
	      pattern: /%[^%\s]*%/,
	      alias: 'operator'
	    },
	    boolean: /\b(?:FALSE|TRUE)\b/,
	    ellipsis: /\.\.(?:\.|\d+)/,
	    number: [
	      /\b(?:Inf|NaN)\b/,
	      /(?:\b0x[\dA-Fa-f]+(?:\.\d*)?|\b\d+(?:\.\d*)?|\B\.\d+)(?:[EePp][+-]?\d+)?[iL]?/
	    ],
	    keyword:
	      /\b(?:NA|NA_character_|NA_complex_|NA_integer_|NA_real_|NULL|break|else|for|function|if|in|next|repeat|while)\b/,
	    operator: /->?>?|<(?:=|<?-)?|[>=!]=?|::?|&&?|\|\|?|[+*\/^$@~]/,
	    punctuation: /[(){}\[\],;]/
	  };
	}

	// @ts-nocheck
	ruby.displayName = 'ruby';
	ruby.aliases = ['rb'];

	/** @type {import('../core.js').Syntax} */
	function ruby(Prism) {
	  Prism.register(clike)
	  /**
	   * Original by Samuel Flores
	   *
	   * Adds the following new token classes:
	   *     constant, builtin, variable, symbol, regex
	   */
	  ;(function (Prism) {
	    Prism.languages.ruby = Prism.languages.extend('clike', {
	      comment: {
	        pattern: /#.*|^=begin\s[\s\S]*?^=end/m,
	        greedy: true
	      },
	      'class-name': {
	        pattern:
	          /(\b(?:class|module)\s+|\bcatch\s+\()[\w.\\]+|\b[A-Z_]\w*(?=\s*\.\s*new\b)/,
	        lookbehind: true,
	        inside: {
	          punctuation: /[.\\]/
	        }
	      },
	      keyword:
	        /\b(?:BEGIN|END|alias|and|begin|break|case|class|def|define_method|defined|do|each|else|elsif|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|private|protected|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\b/,
	      operator:
	        /\.{2,3}|&\.|===|<?=>|[!=]?~|(?:&&|\|\||<<|>>|\*\*|[+\-*/%<>!^&|=])=?|[?:]/,
	      punctuation: /[(){}[\].,;]/
	    });
	    Prism.languages.insertBefore('ruby', 'operator', {
	      'double-colon': {
	        pattern: /::/,
	        alias: 'punctuation'
	      }
	    });
	    var interpolation = {
	      pattern: /((?:^|[^\\])(?:\\{2})*)#\{(?:[^{}]|\{[^{}]*\})*\}/,
	      lookbehind: true,
	      inside: {
	        content: {
	          pattern: /^(#\{)[\s\S]+(?=\}$)/,
	          lookbehind: true,
	          inside: Prism.languages.ruby
	        },
	        delimiter: {
	          pattern: /^#\{|\}$/,
	          alias: 'punctuation'
	        }
	      }
	    };
	    delete Prism.languages.ruby.function;
	    var percentExpression =
	      '(?:' +
	      [
	        /([^a-zA-Z0-9\s{(\[<=])(?:(?!\1)[^\\]|\\[\s\S])*\1/.source,
	        /\((?:[^()\\]|\\[\s\S]|\((?:[^()\\]|\\[\s\S])*\))*\)/.source,
	        /\{(?:[^{}\\]|\\[\s\S]|\{(?:[^{}\\]|\\[\s\S])*\})*\}/.source,
	        /\[(?:[^\[\]\\]|\\[\s\S]|\[(?:[^\[\]\\]|\\[\s\S])*\])*\]/.source,
	        /<(?:[^<>\\]|\\[\s\S]|<(?:[^<>\\]|\\[\s\S])*>)*>/.source
	      ].join('|') +
	      ')';
	    var symbolName =
	      /(?:"(?:\\.|[^"\\\r\n])*"|(?:\b[a-zA-Z_]\w*|[^\s\0-\x7F]+)[?!]?|\$.)/
	        .source;
	    Prism.languages.insertBefore('ruby', 'keyword', {
	      'regex-literal': [
	        {
	          pattern: RegExp(
	            /%r/.source + percentExpression + /[egimnosux]{0,6}/.source
	          ),
	          greedy: true,
	          inside: {
	            interpolation: interpolation,
	            regex: /[\s\S]+/
	          }
	        },
	        {
	          pattern:
	            /(^|[^/])\/(?!\/)(?:\[[^\r\n\]]+\]|\\.|[^[/\\\r\n])+\/[egimnosux]{0,6}(?=\s*(?:$|[\r\n,.;})#]))/,
	          lookbehind: true,
	          greedy: true,
	          inside: {
	            interpolation: interpolation,
	            regex: /[\s\S]+/
	          }
	        }
	      ],
	      variable: /[@$]+[a-zA-Z_]\w*(?:[?!]|\b)/,
	      symbol: [
	        {
	          pattern: RegExp(/(^|[^:]):/.source + symbolName),
	          lookbehind: true,
	          greedy: true
	        },
	        {
	          pattern: RegExp(
	            /([\r\n{(,][ \t]*)/.source + symbolName + /(?=:(?!:))/.source
	          ),
	          lookbehind: true,
	          greedy: true
	        }
	      ],
	      'method-definition': {
	        pattern: /(\bdef\s+)\w+(?:\s*\.\s*\w+)?/,
	        lookbehind: true,
	        inside: {
	          function: /\b\w+$/,
	          keyword: /^self\b/,
	          'class-name': /^\w+/,
	          punctuation: /\./
	        }
	      }
	    });
	    Prism.languages.insertBefore('ruby', 'string', {
	      'string-literal': [
	        {
	          pattern: RegExp(/%[qQiIwWs]?/.source + percentExpression),
	          greedy: true,
	          inside: {
	            interpolation: interpolation,
	            string: /[\s\S]+/
	          }
	        },
	        {
	          pattern:
	            /("|')(?:#\{[^}]+\}|#(?!\{)|\\(?:\r\n|[\s\S])|(?!\1)[^\\#\r\n])*\1/,
	          greedy: true,
	          inside: {
	            interpolation: interpolation,
	            string: /[\s\S]+/
	          }
	        },
	        {
	          pattern: /<<[-~]?([a-z_]\w*)[\r\n](?:.*[\r\n])*?[\t ]*\1/i,
	          alias: 'heredoc-string',
	          greedy: true,
	          inside: {
	            delimiter: {
	              pattern: /^<<[-~]?[a-z_]\w*|\b[a-z_]\w*$/i,
	              inside: {
	                symbol: /\b\w+/,
	                punctuation: /^<<[-~]?/
	              }
	            },
	            interpolation: interpolation,
	            string: /[\s\S]+/
	          }
	        },
	        {
	          pattern: /<<[-~]?'([a-z_]\w*)'[\r\n](?:.*[\r\n])*?[\t ]*\1/i,
	          alias: 'heredoc-string',
	          greedy: true,
	          inside: {
	            delimiter: {
	              pattern: /^<<[-~]?'[a-z_]\w*'|\b[a-z_]\w*$/i,
	              inside: {
	                symbol: /\b\w+/,
	                punctuation: /^<<[-~]?'|'$/
	              }
	            },
	            string: /[\s\S]+/
	          }
	        }
	      ],
	      'command-literal': [
	        {
	          pattern: RegExp(/%x/.source + percentExpression),
	          greedy: true,
	          inside: {
	            interpolation: interpolation,
	            command: {
	              pattern: /[\s\S]+/,
	              alias: 'string'
	            }
	          }
	        },
	        {
	          pattern: /`(?:#\{[^}]+\}|#(?!\{)|\\(?:\r\n|[\s\S])|[^\\`#\r\n])*`/,
	          greedy: true,
	          inside: {
	            interpolation: interpolation,
	            command: {
	              pattern: /[\s\S]+/,
	              alias: 'string'
	            }
	          }
	        }
	      ]
	    });
	    delete Prism.languages.ruby.string;
	    Prism.languages.insertBefore('ruby', 'number', {
	      builtin:
	        /\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Fixnum|Float|Hash|IO|Integer|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|Stat|String|Struct|Symbol|TMS|Thread|ThreadGroup|Time|TrueClass)\b/,
	      constant: /\b[A-Z][A-Z0-9_]*(?:[?!]|\b)/
	    });
	    Prism.languages.rb = Prism.languages.ruby;
	  })(Prism);
	}

	// @ts-nocheck
	rust.displayName = 'rust';
	rust.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function rust(Prism) {
	(function (Prism) {
	    var multilineComment = /\/\*(?:[^*/]|\*(?!\/)|\/(?!\*)|<self>)*\*\//.source;
	    for (var i = 0; i < 2; i++) {
	      // support 4 levels of nested comments
	      multilineComment = multilineComment.replace(/<self>/g, function () {
	        return multilineComment
	      });
	    }
	    multilineComment = multilineComment.replace(/<self>/g, function () {
	      return /[^\s\S]/.source
	    });
	    Prism.languages.rust = {
	      comment: [
	        {
	          pattern: RegExp(/(^|[^\\])/.source + multilineComment),
	          lookbehind: true,
	          greedy: true
	        },
	        {
	          pattern: /(^|[^\\:])\/\/.*/,
	          lookbehind: true,
	          greedy: true
	        }
	      ],
	      string: {
	        pattern: /b?"(?:\\[\s\S]|[^\\"])*"|b?r(#*)"(?:[^"]|"(?!\1))*"\1/,
	        greedy: true
	      },
	      char: {
	        pattern:
	          /b?'(?:\\(?:x[0-7][\da-fA-F]|u\{(?:[\da-fA-F]_*){1,6}\}|.)|[^\\\r\n\t'])'/,
	        greedy: true
	      },
	      attribute: {
	        pattern: /#!?\[(?:[^\[\]"]|"(?:\\[\s\S]|[^\\"])*")*\]/,
	        greedy: true,
	        alias: 'attr-name',
	        inside: {
	          string: null // see below
	        }
	      },

	      // Closure params should not be confused with bitwise OR |
	      'closure-params': {
	        pattern: /([=(,:]\s*|\bmove\s*)\|[^|]*\||\|[^|]*\|(?=\s*(?:\{|->))/,
	        lookbehind: true,
	        greedy: true,
	        inside: {
	          'closure-punctuation': {
	            pattern: /^\||\|$/,
	            alias: 'punctuation'
	          },
	          rest: null // see below
	        }
	      },

	      'lifetime-annotation': {
	        pattern: /'\w+/,
	        alias: 'symbol'
	      },
	      'fragment-specifier': {
	        pattern: /(\$\w+:)[a-z]+/,
	        lookbehind: true,
	        alias: 'punctuation'
	      },
	      variable: /\$\w+/,
	      'function-definition': {
	        pattern: /(\bfn\s+)\w+/,
	        lookbehind: true,
	        alias: 'function'
	      },
	      'type-definition': {
	        pattern: /(\b(?:enum|struct|trait|type|union)\s+)\w+/,
	        lookbehind: true,
	        alias: 'class-name'
	      },
	      'module-declaration': [
	        {
	          pattern: /(\b(?:crate|mod)\s+)[a-z][a-z_\d]*/,
	          lookbehind: true,
	          alias: 'namespace'
	        },
	        {
	          pattern:
	            /(\b(?:crate|self|super)\s*)::\s*[a-z][a-z_\d]*\b(?:\s*::(?:\s*[a-z][a-z_\d]*\s*::)*)?/,
	          lookbehind: true,
	          alias: 'namespace',
	          inside: {
	            punctuation: /::/
	          }
	        }
	      ],
	      keyword: [
	        // https://github.com/rust-lang/reference/blob/master/src/keywords.md
	        /\b(?:Self|abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\b/,
	        // primitives and str
	        // https://doc.rust-lang.org/stable/rust-by-example/primitives.html
	        /\b(?:bool|char|f(?:32|64)|[ui](?:8|16|32|64|128|size)|str)\b/
	      ],
	      // functions can technically start with an upper-case letter, but this will introduce a lot of false positives
	      // and Rust's naming conventions recommend snake_case anyway.
	      // https://doc.rust-lang.org/1.0.0/style/style/naming/README.html
	      function: /\b[a-z_]\w*(?=\s*(?:::\s*<|\())/,
	      macro: {
	        pattern: /\b\w+!/,
	        alias: 'property'
	      },
	      constant: /\b[A-Z_][A-Z_\d]+\b/,
	      'class-name': /\b[A-Z]\w*\b/,
	      namespace: {
	        pattern: /(?:\b[a-z][a-z_\d]*\s*::\s*)*\b[a-z][a-z_\d]*\s*::(?!\s*<)/,
	        inside: {
	          punctuation: /::/
	        }
	      },
	      // Hex, oct, bin, dec numbers with visual separators and type suffix
	      number:
	        /\b(?:0x[\dA-Fa-f](?:_?[\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\d(?:_?\d)*)?\.)?\d(?:_?\d)*(?:[Ee][+-]?\d+)?)(?:_?(?:f32|f64|[iu](?:8|16|32|64|size)?))?\b/,
	      boolean: /\b(?:false|true)\b/,
	      punctuation: /->|\.\.=|\.{1,3}|::|[{}[\];(),:]/,
	      operator: /[-+*\/%!^]=?|=[=>]?|&[&=]?|\|[|=]?|<<?=?|>>?=?|[@?]/
	    };
	    Prism.languages.rust['closure-params'].inside.rest = Prism.languages.rust;
	    Prism.languages.rust['attribute'].inside['string'] =
	      Prism.languages.rust['string'];
	  })(Prism);
	}

	// @ts-nocheck
	sass.displayName = 'sass';
	sass.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function sass(Prism) {
	  Prism.register(css)
	  ;(function (Prism) {
	    Prism.languages.sass = Prism.languages.extend('css', {
	      // Sass comments don't need to be closed, only indented
	      comment: {
	        pattern: /^([ \t]*)\/[\/*].*(?:(?:\r?\n|\r)\1[ \t].+)*/m,
	        lookbehind: true,
	        greedy: true
	      }
	    });
	    Prism.languages.insertBefore('sass', 'atrule', {
	      // We want to consume the whole line
	      'atrule-line': {
	        // Includes support for = and + shortcuts
	        pattern: /^(?:[ \t]*)[@+=].+/m,
	        greedy: true,
	        inside: {
	          atrule: /(?:@[\w-]+|[+=])/
	        }
	      }
	    });
	    delete Prism.languages.sass.atrule;
	    var variable = /\$[-\w]+|#\{\$[-\w]+\}/;
	    var operator = [
	      /[+*\/%]|[=!]=|<=?|>=?|\b(?:and|not|or)\b/,
	      {
	        pattern: /(\s)-(?=\s)/,
	        lookbehind: true
	      }
	    ];
	    Prism.languages.insertBefore('sass', 'property', {
	      // We want to consume the whole line
	      'variable-line': {
	        pattern: /^[ \t]*\$.+/m,
	        greedy: true,
	        inside: {
	          punctuation: /:/,
	          variable: variable,
	          operator: operator
	        }
	      },
	      // We want to consume the whole line
	      'property-line': {
	        pattern: /^[ \t]*(?:[^:\s]+ *:.*|:[^:\s].*)/m,
	        greedy: true,
	        inside: {
	          property: [
	            /[^:\s]+(?=\s*:)/,
	            {
	              pattern: /(:)[^:\s]+/,
	              lookbehind: true
	            }
	          ],
	          punctuation: /:/,
	          variable: variable,
	          operator: operator,
	          important: Prism.languages.sass.important
	        }
	      }
	    });
	    delete Prism.languages.sass.property;
	    delete Prism.languages.sass.important;

	    // Now that whole lines for other patterns are consumed,
	    // what's left should be selectors
	    Prism.languages.insertBefore('sass', 'punctuation', {
	      selector: {
	        pattern:
	          /^([ \t]*)\S(?:,[^,\r\n]+|[^,\r\n]*)(?:,[^,\r\n]+)*(?:,(?:\r?\n|\r)\1[ \t]+\S(?:,[^,\r\n]+|[^,\r\n]*)(?:,[^,\r\n]+)*)*/m,
	        lookbehind: true,
	        greedy: true
	      }
	    });
	  })(Prism);
	}

	// @ts-nocheck
	scss.displayName = 'scss';
	scss.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function scss(Prism) {
	  Prism.register(css);
	  Prism.languages.scss = Prism.languages.extend('css', {
	    comment: {
	      pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,
	      lookbehind: true
	    },
	    atrule: {
	      pattern: /@[\w-](?:\([^()]+\)|[^()\s]|\s+(?!\s))*?(?=\s+[{;])/,
	      inside: {
	        rule: /@[\w-]+/
	        // See rest below
	      }
	    },

	    // url, compassified
	    url: /(?:[-a-z]+-)?url(?=\()/i,
	    // CSS selector regex is not appropriate for Sass
	    // since there can be lot more things (var, @ directive, nesting..)
	    // a selector must start at the end of a property or after a brace (end of other rules or nesting)
	    // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable
	    // the end of a selector is found when there is no rules in it ( {} or {\s}) or if there is a property (because an interpolated var
	    // can "pass" as a selector- e.g: proper#{$erty})
	    // this one was hard to do, so please be careful if you edit this one :)
	    selector: {
	      // Initial look-ahead is used to prevent matching of blank selectors
	      pattern:
	        /(?=\S)[^@;{}()]?(?:[^@;{}()\s]|\s+(?!\s)|#\{\$[-\w]+\})+(?=\s*\{(?:\}|\s|[^}][^:{}]*[:{][^}]))/,
	      inside: {
	        parent: {
	          pattern: /&/,
	          alias: 'important'
	        },
	        placeholder: /%[-\w]+/,
	        variable: /\$[-\w]+|#\{\$[-\w]+\}/
	      }
	    },
	    property: {
	      pattern: /(?:[-\w]|\$[-\w]|#\{\$[-\w]+\})+(?=\s*:)/,
	      inside: {
	        variable: /\$[-\w]+|#\{\$[-\w]+\}/
	      }
	    }
	  });
	  Prism.languages.insertBefore('scss', 'atrule', {
	    keyword: [
	      /@(?:content|debug|each|else(?: if)?|extend|for|forward|function|if|import|include|mixin|return|use|warn|while)\b/i,
	      {
	        pattern: /( )(?:from|through)(?= )/,
	        lookbehind: true
	      }
	    ]
	  });
	  Prism.languages.insertBefore('scss', 'important', {
	    // var and interpolated vars
	    variable: /\$[-\w]+|#\{\$[-\w]+\}/
	  });
	  Prism.languages.insertBefore('scss', 'function', {
	    'module-modifier': {
	      pattern: /\b(?:as|hide|show|with)\b/i,
	      alias: 'keyword'
	    },
	    placeholder: {
	      pattern: /%[-\w]+/,
	      alias: 'selector'
	    },
	    statement: {
	      pattern: /\B!(?:default|optional)\b/i,
	      alias: 'keyword'
	    },
	    boolean: /\b(?:false|true)\b/,
	    null: {
	      pattern: /\bnull\b/,
	      alias: 'keyword'
	    },
	    operator: {
	      pattern: /(\s)(?:[-+*\/%]|[=!]=|<=?|>=?|and|not|or)(?=\s)/,
	      lookbehind: true
	    }
	  });
	  Prism.languages.scss['atrule'].inside.rest = Prism.languages.scss;
	}

	// @ts-nocheck
	sql.displayName = 'sql';
	sql.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function sql(Prism) {
	  Prism.languages.sql = {
	    comment: {
	      pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:--|\/\/|#).*)/,
	      lookbehind: true
	    },
	    variable: [
	      {
	        pattern: /@(["'`])(?:\\[\s\S]|(?!\1)[^\\])+\1/,
	        greedy: true
	      },
	      /@[\w.$]+/
	    ],
	    string: {
	      pattern: /(^|[^@\\])("|')(?:\\[\s\S]|(?!\2)[^\\]|\2\2)*\2/,
	      greedy: true,
	      lookbehind: true
	    },
	    identifier: {
	      pattern: /(^|[^@\\])`(?:\\[\s\S]|[^`\\]|``)*`/,
	      greedy: true,
	      lookbehind: true,
	      inside: {
	        punctuation: /^`|`$/
	      }
	    },
	    function:
	      /\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\s*\()/i,
	    // Should we highlight user defined functions too?
	    keyword:
	      /\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\b/i,
	    boolean: /\b(?:FALSE|NULL|TRUE)\b/i,
	    number: /\b0x[\da-f]+\b|\b\d+(?:\.\d*)?|\B\.\d+\b/i,
	    operator:
	      /[-+*\/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\b/i,
	    punctuation: /[;[\]()`,.]/
	  };
	}

	// @ts-nocheck
	swift.displayName = 'swift';
	swift.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function swift(Prism) {
	  Prism.languages.swift = {
	    comment: {
	      // Nested comments are supported up to 2 levels
	      pattern:
	        /(^|[^\\:])(?:\/\/.*|\/\*(?:[^/*]|\/(?!\*)|\*(?!\/)|\/\*(?:[^*]|\*(?!\/))*\*\/)*\*\/)/,
	      lookbehind: true,
	      greedy: true
	    },
	    'string-literal': [
	      // https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html
	      {
	        pattern: RegExp(
	          /(^|[^"#])/.source +
	            '(?:' +
	            // single-line string
	            /"(?:\\(?:\((?:[^()]|\([^()]*\))*\)|\r\n|[^(])|[^\\\r\n"])*"/
	              .source +
	            '|' +
	            // multi-line string
	            /"""(?:\\(?:\((?:[^()]|\([^()]*\))*\)|[^(])|[^\\"]|"(?!""))*"""/
	              .source +
	            ')' +
	            /(?!["#])/.source
	        ),
	        lookbehind: true,
	        greedy: true,
	        inside: {
	          interpolation: {
	            pattern: /(\\\()(?:[^()]|\([^()]*\))*(?=\))/,
	            lookbehind: true,
	            inside: null // see below
	          },

	          'interpolation-punctuation': {
	            pattern: /^\)|\\\($/,
	            alias: 'punctuation'
	          },
	          punctuation: /\\(?=[\r\n])/,
	          string: /[\s\S]+/
	        }
	      },
	      {
	        pattern: RegExp(
	          /(^|[^"#])(#+)/.source +
	            '(?:' +
	            // single-line string
	            /"(?:\\(?:#+\((?:[^()]|\([^()]*\))*\)|\r\n|[^#])|[^\\\r\n])*?"/
	              .source +
	            '|' +
	            // multi-line string
	            /"""(?:\\(?:#+\((?:[^()]|\([^()]*\))*\)|[^#])|[^\\])*?"""/.source +
	            ')' +
	            '\\2'
	        ),
	        lookbehind: true,
	        greedy: true,
	        inside: {
	          interpolation: {
	            pattern: /(\\#+\()(?:[^()]|\([^()]*\))*(?=\))/,
	            lookbehind: true,
	            inside: null // see below
	          },

	          'interpolation-punctuation': {
	            pattern: /^\)|\\#+\($/,
	            alias: 'punctuation'
	          },
	          string: /[\s\S]+/
	        }
	      }
	    ],
	    directive: {
	      // directives with conditions
	      pattern: RegExp(
	        /#/.source +
	          '(?:' +
	          (/(?:elseif|if)\b/.source +
	            '(?:[ \t]*' +
	            // This regex is a little complex. It's equivalent to this:
	            //   (?:![ \t]*)?(?:\b\w+\b(?:[ \t]*<round>)?|<round>)(?:[ \t]*(?:&&|\|\|))?
	            // where <round> is a general parentheses expression.
	            /(?:![ \t]*)?(?:\b\w+\b(?:[ \t]*\((?:[^()]|\([^()]*\))*\))?|\((?:[^()]|\([^()]*\))*\))(?:[ \t]*(?:&&|\|\|))?/
	              .source +
	            ')+') +
	          '|' +
	          /(?:else|endif)\b/.source +
	          ')'
	      ),
	      alias: 'property',
	      inside: {
	        'directive-name': /^#\w+/,
	        boolean: /\b(?:false|true)\b/,
	        number: /\b\d+(?:\.\d+)*\b/,
	        operator: /!|&&|\|\||[<>]=?/,
	        punctuation: /[(),]/
	      }
	    },
	    literal: {
	      pattern:
	        /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\b/,
	      alias: 'constant'
	    },
	    'other-directive': {
	      pattern: /#\w+\b/,
	      alias: 'property'
	    },
	    attribute: {
	      pattern: /@\w+/,
	      alias: 'atrule'
	    },
	    'function-definition': {
	      pattern: /(\bfunc\s+)\w+/,
	      lookbehind: true,
	      alias: 'function'
	    },
	    label: {
	      // https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141
	      pattern:
	        /\b(break|continue)\s+\w+|\b[a-zA-Z_]\w*(?=\s*:\s*(?:for|repeat|while)\b)/,
	      lookbehind: true,
	      alias: 'important'
	    },
	    keyword:
	      /\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\b/,
	    boolean: /\b(?:false|true)\b/,
	    nil: {
	      pattern: /\bnil\b/,
	      alias: 'constant'
	    },
	    'short-argument': /\$\d+\b/,
	    omit: {
	      pattern: /\b_\b/,
	      alias: 'keyword'
	    },
	    number:
	      /\b(?:[\d_]+(?:\.[\de_]+)?|0x[a-f0-9_]+(?:\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\b/i,
	    // A class name must start with an upper-case letter and be either 1 letter long or contain a lower-case letter.
	    'class-name': /\b[A-Z](?:[A-Z_\d]*[a-z]\w*)?\b/,
	    function: /\b[a-z_]\w*(?=\s*\()/i,
	    constant: /\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\b/,
	    // Operators are generic in Swift. Developers can even create new operators (e.g. +++).
	    // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html#ID481
	    // This regex only supports ASCII operators.
	    operator: /[-+*/%=!<>&|^~?]+|\.[.\-+*/%=!<>&|^~?]+/,
	    punctuation: /[{}[\]();,.:\\]/
	  };
	  Prism.languages.swift['string-literal'].forEach(function (rule) {
	    rule.inside['interpolation'].inside = Prism.languages.swift;
	  });
	}

	// @ts-nocheck
	typescript.displayName = 'typescript';
	typescript.aliases = ['ts'];

	/** @type {import('../core.js').Syntax} */
	function typescript(Prism) {
	  Prism.register(javascript)
	  ;(function (Prism) {
	    Prism.languages.typescript = Prism.languages.extend('javascript', {
	      'class-name': {
	        pattern:
	          /(\b(?:class|extends|implements|instanceof|interface|new|type)\s+)(?!keyof\b)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?:\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,
	        lookbehind: true,
	        greedy: true,
	        inside: null // see below
	      },

	      builtin:
	        /\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\b/
	    });

	    // The keywords TypeScript adds to JavaScript
	    Prism.languages.typescript.keyword.push(
	      /\b(?:abstract|declare|is|keyof|readonly|require)\b/,
	      // keywords that have to be followed by an identifier
	      /\b(?:asserts|infer|interface|module|namespace|type)\b(?=\s*(?:[{_$a-zA-Z\xA0-\uFFFF]|$))/,
	      // This is for `import type *, {}`
	      /\btype\b(?=\s*(?:[\{*]|$))/
	    );

	    // doesn't work with TS because TS is too complex
	    delete Prism.languages.typescript['parameter'];
	    delete Prism.languages.typescript['literal-property'];

	    // a version of typescript specifically for highlighting types
	    var typeInside = Prism.languages.extend('typescript', {});
	    delete typeInside['class-name'];
	    Prism.languages.typescript['class-name'].inside = typeInside;
	    Prism.languages.insertBefore('typescript', 'function', {
	      decorator: {
	        pattern: /@[$\w\xA0-\uFFFF]+/,
	        inside: {
	          at: {
	            pattern: /^@/,
	            alias: 'operator'
	          },
	          function: /^[\s\S]+/
	        }
	      },
	      'generic-function': {
	        // e.g. foo<T extends "bar" | "baz">( ...
	        pattern:
	          /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\s*\()/,
	        greedy: true,
	        inside: {
	          function: /^#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/,
	          generic: {
	            pattern: /<[\s\S]+/,
	            // everything after the first <
	            alias: 'class-name',
	            inside: typeInside
	          }
	        }
	      }
	    });
	    Prism.languages.ts = Prism.languages.typescript;
	  })(Prism);
	}

	// @ts-nocheck
	basic.displayName = 'basic';
	basic.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function basic(Prism) {
	  Prism.languages.basic = {
	    comment: {
	      pattern: /(?:!|REM\b).+/i,
	      inside: {
	        keyword: /^REM/i
	      }
	    },
	    string: {
	      pattern: /"(?:""|[!#$%&'()*,\/:;<=>?^\w +\-.])*"/,
	      greedy: true
	    },
	    number: /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:E[+-]?\d+)?/i,
	    keyword:
	      /\b(?:AS|BEEP|BLOAD|BSAVE|CALL(?: ABSOLUTE)?|CASE|CHAIN|CHDIR|CLEAR|CLOSE|CLS|COM|COMMON|CONST|DATA|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DIM|DO|DOUBLE|ELSE|ELSEIF|END|ENVIRON|ERASE|ERROR|EXIT|FIELD|FILES|FOR|FUNCTION|GET|GOSUB|GOTO|IF|INPUT|INTEGER|IOCTL|KEY|KILL|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|MKDIR|NAME|NEXT|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPTION BASE|OUT|POKE|PUT|READ|REDIM|REM|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SELECT CASE|SHARED|SHELL|SINGLE|SLEEP|STATIC|STEP|STOP|STRING|SUB|SWAP|SYSTEM|THEN|TIMER|TO|TROFF|TRON|TYPE|UNLOCK|UNTIL|USING|VIEW PRINT|WAIT|WEND|WHILE|WRITE)(?:\$|\b)/i,
	    function:
	      /\b(?:ABS|ACCESS|ACOS|ANGLE|AREA|ARITHMETIC|ARRAY|ASIN|ASK|AT|ATN|BASE|BEGIN|BREAK|CAUSE|CEIL|CHR|CLIP|COLLATE|COLOR|CON|COS|COSH|COT|CSC|DATE|DATUM|DEBUG|DECIMAL|DEF|DEG|DEGREES|DELETE|DET|DEVICE|DISPLAY|DOT|ELAPSED|EPS|ERASABLE|EXLINE|EXP|EXTERNAL|EXTYPE|FILETYPE|FIXED|FP|GO|GRAPH|HANDLER|IDN|IMAGE|IN|INT|INTERNAL|IP|IS|KEYED|LBOUND|LCASE|LEFT|LEN|LENGTH|LET|LINE|LINES|LOG|LOG10|LOG2|LTRIM|MARGIN|MAT|MAX|MAXNUM|MID|MIN|MISSING|MOD|NATIVE|NUL|NUMERIC|OF|OPTION|ORD|ORGANIZATION|OUTIN|OUTPUT|PI|POINT|POINTER|POINTS|POS|PRINT|PROGRAM|PROMPT|RAD|RADIANS|RANDOMIZE|RECORD|RECSIZE|RECTYPE|RELATIVE|REMAINDER|REPEAT|REST|RETRY|REWRITE|RIGHT|RND|ROUND|RTRIM|SAME|SEC|SELECT|SEQUENTIAL|SET|SETTER|SGN|SIN|SINH|SIZE|SKIP|SQR|STANDARD|STATUS|STR|STREAM|STYLE|TAB|TAN|TANH|TEMPLATE|TEXT|THERE|TIME|TIMEOUT|TRACE|TRANSFORM|TRUNCATE|UBOUND|UCASE|USE|VAL|VARIABLE|VIEWPORT|WHEN|WINDOW|WITH|ZER|ZONEWIDTH)(?:\$|\b)/i,
	    operator: /<[=>]?|>=?|[+\-*\/^=&]|\b(?:AND|EQV|IMP|NOT|OR|XOR)\b/i,
	    punctuation: /[,;:()]/
	  };
	}

	// @ts-nocheck
	vbnet.displayName = 'vbnet';
	vbnet.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function vbnet(Prism) {
	  Prism.register(basic);
	  Prism.languages.vbnet = Prism.languages.extend('basic', {
	    comment: [
	      {
	        pattern: /(?:!|REM\b).+/i,
	        inside: {
	          keyword: /^REM/i
	        }
	      },
	      {
	        pattern: /(^|[^\\:])'.*/,
	        lookbehind: true,
	        greedy: true
	      }
	    ],
	    string: {
	      pattern: /(^|[^"])"(?:""|[^"])*"(?!")/,
	      lookbehind: true,
	      greedy: true
	    },
	    keyword:
	      /(?:\b(?:ADDHANDLER|ADDRESSOF|ALIAS|AND|ANDALSO|AS|BEEP|BLOAD|BOOLEAN|BSAVE|BYREF|BYTE|BYVAL|CALL(?: ABSOLUTE)?|CASE|CATCH|CBOOL|CBYTE|CCHAR|CDATE|CDBL|CDEC|CHAIN|CHAR|CHDIR|CINT|CLASS|CLEAR|CLNG|CLOSE|CLS|COBJ|COM|COMMON|CONST|CONTINUE|CSBYTE|CSHORT|CSNG|CSTR|CTYPE|CUINT|CULNG|CUSHORT|DATA|DATE|DECIMAL|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DEFAULT|DELEGATE|DIM|DIRECTCAST|DO|DOUBLE|ELSE|ELSEIF|END|ENUM|ENVIRON|ERASE|ERROR|EVENT|EXIT|FALSE|FIELD|FILES|FINALLY|FOR(?: EACH)?|FRIEND|FUNCTION|GET|GETTYPE|GETXMLNAMESPACE|GLOBAL|GOSUB|GOTO|HANDLES|IF|IMPLEMENTS|IMPORTS|IN|INHERITS|INPUT|INTEGER|INTERFACE|IOCTL|IS|ISNOT|KEY|KILL|LET|LIB|LIKE|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|ME|MKDIR|MOD|MODULE|MUSTINHERIT|MUSTOVERRIDE|MYBASE|MYCLASS|NAME|NAMESPACE|NARROWING|NEW|NEXT|NOT|NOTHING|NOTINHERITABLE|NOTOVERRIDABLE|OBJECT|OF|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPERATOR|OPTION(?: BASE)?|OPTIONAL|OR|ORELSE|OUT|OVERLOADS|OVERRIDABLE|OVERRIDES|PARAMARRAY|PARTIAL|POKE|PRIVATE|PROPERTY|PROTECTED|PUBLIC|PUT|RAISEEVENT|READ|READONLY|REDIM|REM|REMOVEHANDLER|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SBYTE|SELECT(?: CASE)?|SET|SHADOWS|SHARED|SHELL|SHORT|SINGLE|SLEEP|STATIC|STEP|STOP|STRING|STRUCTURE|SUB|SWAP|SYNCLOCK|SYSTEM|THEN|THROW|TIMER|TO|TROFF|TRON|TRUE|TRY|TRYCAST|TYPE|TYPEOF|UINTEGER|ULONG|UNLOCK|UNTIL|USHORT|USING|VIEW PRINT|WAIT|WEND|WHEN|WHILE|WIDENING|WITH|WITHEVENTS|WRITE|WRITEONLY|XOR)|\B(?:#CONST|#ELSE|#ELSEIF|#END|#IF))(?:\$|\b)/i,
	    punctuation: /[,;:(){}]/
	  });
	}

	/**
	 * @typedef {import('hast').Properties} Properties
	 * @typedef {import('hast').Element} Element
	 */

	const search = /[#.]/g;

	/**
	 * Create a hast element from a simple CSS selector.
	 *
	 * @template {string} Selector
	 *   Type of selector.
	 * @template {string} [DefaultTagName='div']
	 *   Type of default tag name.
	 * @param {Selector | null | undefined} [selector]
	 *   Simple CSS selector.
	 *
	 *   Can contain a tag name (`foo`), classes (`.bar`), and an ID (`#baz`).
	 *   Multiple classes are allowed.
	 *   Uses the last ID if multiple IDs are found.
	 * @param {DefaultTagName | null | undefined} [defaultTagName='div']
	 *   Tag name to use if `selector` does not specify one (default: `'div'`).
	 * @returns {Element & {tagName: import('./extract.js').ExtractTagName<Selector, DefaultTagName>}}
	 *   Built element.
	 */
	function parseSelector(selector, defaultTagName) {
	  const value = selector || '';
	  /** @type {Properties} */
	  const props = {};
	  let start = 0;
	  /** @type {string | undefined} */
	  let previous;
	  /** @type {string | undefined} */
	  let tagName;

	  while (start < value.length) {
	    search.lastIndex = start;
	    const match = search.exec(value);
	    const subvalue = value.slice(start, match ? match.index : value.length);

	    if (subvalue) {
	      if (!previous) {
	        tagName = subvalue;
	      } else if (previous === '#') {
	        props.id = subvalue;
	      } else if (Array.isArray(props.className)) {
	        props.className.push(subvalue);
	      } else {
	        props.className = [subvalue];
	      }

	      start += subvalue.length;
	    }

	    if (match) {
	      previous = match[0];
	      start++;
	    }
	  }

	  return {
	    type: 'element',
	    // @ts-expect-error: fine.
	    tagName: tagName || defaultTagName || 'div',
	    properties: props,
	    children: []
	  }
	}

	/**
	 * @typedef {import('hast').Root} Root
	 * @typedef {import('hast').Content} Content
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').Properties} Properties
	 * @typedef {import('property-information').Info} Info
	 * @typedef {import('property-information').Schema} Schema
	 */


	const buttonTypes = new Set(['menu', 'submit', 'reset', 'button']);

	const own$5 = {}.hasOwnProperty;

	/**
	 * @param {Schema} schema
	 * @param {string} defaultTagName
	 * @param {Array<string>} [caseSensitive]
	 */
	function core$1(schema, defaultTagName, caseSensitive) {
	  const adjust = caseSensitive && createAdjustMap(caseSensitive);

	  const h =
	    /**
	     * @type {{
	     *   (): Root
	     *   (selector: null | undefined, ...children: Array<HChild>): Root
	     *   (selector: string, properties?: HProperties, ...children: Array<HChild>): Element
	     *   (selector: string, ...children: Array<HChild>): Element
	     * }}
	     */
	    (
	      /**
	       * Hyperscript compatible DSL for creating virtual hast trees.
	       *
	       * @param {string | null} [selector]
	       * @param {HProperties | HChild} [properties]
	       * @param {Array<HChild>} children
	       * @returns {HResult}
	       */
	      function (selector, properties, ...children) {
	        let index = -1;
	        /** @type {HResult} */
	        let node;

	        if (selector === undefined || selector === null) {
	          node = {type: 'root', children: []};
	          // @ts-expect-error Properties are not supported for roots.
	          children.unshift(properties);
	        } else {
	          node = parseSelector(selector, defaultTagName);
	          // Normalize the name.
	          node.tagName = node.tagName.toLowerCase();
	          if (adjust && own$5.call(adjust, node.tagName)) {
	            node.tagName = adjust[node.tagName];
	          }

	          // Handle props.
	          if (isProperties(properties, node.tagName)) {
	            /** @type {string} */
	            let key;

	            for (key in properties) {
	              if (own$5.call(properties, key)) {
	                // @ts-expect-error `node.properties` is set.
	                addProperty(schema, node.properties, key, properties[key]);
	              }
	            }
	          } else {
	            children.unshift(properties);
	          }
	        }

	        // Handle children.
	        while (++index < children.length) {
	          addChild(node.children, children[index]);
	        }

	        if (node.type === 'element' && node.tagName === 'template') {
	          node.content = {type: 'root', children: node.children};
	          node.children = [];
	        }

	        return node
	      }
	    );

	  return h
	}

	/**
	 * @param {HProperties | HChild} value
	 * @param {string} name
	 * @returns {value is HProperties}
	 */
	function isProperties(value, name) {
	  if (
	    value === null ||
	    value === undefined ||
	    typeof value !== 'object' ||
	    Array.isArray(value)
	  ) {
	    return false
	  }

	  if (name === 'input' || !value.type || typeof value.type !== 'string') {
	    return true
	  }

	  if ('children' in value && Array.isArray(value.children)) {
	    return false
	  }

	  if (name === 'button') {
	    return buttonTypes.has(value.type.toLowerCase())
	  }

	  return !('value' in value)
	}

	/**
	 * @param {Schema} schema
	 * @param {Properties} properties
	 * @param {string} key
	 * @param {HStyle | HPropertyValue} value
	 * @returns {void}
	 */
	function addProperty(schema, properties, key, value) {
	  const info = find(schema, key);
	  let index = -1;
	  /** @type {HPropertyValue} */
	  let result;

	  // Ignore nullish and NaN values.
	  if (value === undefined || value === null) return

	  if (typeof value === 'number') {
	    // Ignore NaN.
	    if (Number.isNaN(value)) return

	    result = value;
	  }
	  // Booleans.
	  else if (typeof value === 'boolean') {
	    result = value;
	  }
	  // Handle list values.
	  else if (typeof value === 'string') {
	    if (info.spaceSeparated) {
	      result = parse$4(value);
	    } else if (info.commaSeparated) {
	      result = parse$5(value);
	    } else if (info.commaOrSpaceSeparated) {
	      result = parse$4(parse$5(value).join(' '));
	    } else {
	      result = parsePrimitive(info, info.property, value);
	    }
	  } else if (Array.isArray(value)) {
	    result = value.concat();
	  } else {
	    result = info.property === 'style' ? style(value) : String(value);
	  }

	  if (Array.isArray(result)) {
	    /** @type {Array<string | number>} */
	    const finalResult = [];

	    while (++index < result.length) {
	      // @ts-expect-error Assume no booleans in array.
	      finalResult[index] = parsePrimitive(info, info.property, result[index]);
	    }

	    result = finalResult;
	  }

	  // Class names (which can be added both on the `selector` and here).
	  if (info.property === 'className' && Array.isArray(properties.className)) {
	    // @ts-expect-error Assume no booleans in `className`.
	    result = properties.className.concat(result);
	  }

	  properties[info.property] = result;
	}

	/**
	 * @param {Array<Content>} nodes
	 * @param {HChild} value
	 * @returns {void}
	 */
	function addChild(nodes, value) {
	  let index = -1;

	  if (value === undefined || value === null) ; else if (typeof value === 'string' || typeof value === 'number') {
	    nodes.push({type: 'text', value: String(value)});
	  } else if (Array.isArray(value)) {
	    while (++index < value.length) {
	      addChild(nodes, value[index]);
	    }
	  } else if (typeof value === 'object' && 'type' in value) {
	    if (value.type === 'root') {
	      addChild(nodes, value.children);
	    } else {
	      nodes.push(value);
	    }
	  } else {
	    throw new Error('Expected node, nodes, or string, got `' + value + '`')
	  }
	}

	/**
	 * Parse a single primitives.
	 *
	 * @param {Info} info
	 * @param {string} name
	 * @param {HPrimitiveValue} value
	 * @returns {HPrimitiveValue}
	 */
	function parsePrimitive(info, name, value) {
	  if (typeof value === 'string') {
	    if (info.number && value && !Number.isNaN(Number(value))) {
	      return Number(value)
	    }

	    if (
	      (info.boolean || info.overloadedBoolean) &&
	      (value === '' || normalize$1(value) === normalize$1(name))
	    ) {
	      return true
	    }
	  }

	  return value
	}

	/**
	 * Serialize a `style` object as a string.
	 *
	 * @param {HStyle} value
	 *   Style object.
	 * @returns {string}
	 *   CSS string.
	 */
	function style(value) {
	  /** @type {Array<string>} */
	  const result = [];
	  /** @type {string} */
	  let key;

	  for (key in value) {
	    if (own$5.call(value, key)) {
	      result.push([key, value[key]].join(': '));
	    }
	  }

	  return result.join('; ')
	}

	/**
	 * Create a map to adjust casing.
	 *
	 * @param {Array<string>} values
	 *   List of properly cased keys.
	 * @returns {Record<string, string>}
	 *   Map of lowercase keys to uppercase keys.
	 */
	function createAdjustMap(values) {
	  /** @type {Record<string, string>} */
	  const result = {};
	  let index = -1;

	  while (++index < values.length) {
	    result[values[index].toLowerCase()] = values[index];
	  }

	  return result
	}

	/**
	 * @typedef {import('./core.js').HChild} Child
	 *   Acceptable child value.
	 * @typedef {import('./core.js').HProperties} Properties
	 *   Acceptable value for element properties.
	 * @typedef {import('./core.js').HResult} Result
	 *   Result from a `h` (or `s`) call.
	 *
	 * @typedef {import('./jsx-classic.js').Element} h.JSX.Element
	 * @typedef {import('./jsx-classic.js').IntrinsicAttributes} h.JSX.IntrinsicAttributes
	 * @typedef {import('./jsx-classic.js').IntrinsicElements} h.JSX.IntrinsicElements
	 * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} h.JSX.ElementChildrenAttribute
	 */


	const h = core$1(html$4, 'div');

	/**
	 * List of legacy HTML named character references that don’t need a trailing semicolon.
	 *
	 * @type {Array<string>}
	 */
	const characterEntitiesLegacy = [
	  'AElig',
	  'AMP',
	  'Aacute',
	  'Acirc',
	  'Agrave',
	  'Aring',
	  'Atilde',
	  'Auml',
	  'COPY',
	  'Ccedil',
	  'ETH',
	  'Eacute',
	  'Ecirc',
	  'Egrave',
	  'Euml',
	  'GT',
	  'Iacute',
	  'Icirc',
	  'Igrave',
	  'Iuml',
	  'LT',
	  'Ntilde',
	  'Oacute',
	  'Ocirc',
	  'Ograve',
	  'Oslash',
	  'Otilde',
	  'Ouml',
	  'QUOT',
	  'REG',
	  'THORN',
	  'Uacute',
	  'Ucirc',
	  'Ugrave',
	  'Uuml',
	  'Yacute',
	  'aacute',
	  'acirc',
	  'acute',
	  'aelig',
	  'agrave',
	  'amp',
	  'aring',
	  'atilde',
	  'auml',
	  'brvbar',
	  'ccedil',
	  'cedil',
	  'cent',
	  'copy',
	  'curren',
	  'deg',
	  'divide',
	  'eacute',
	  'ecirc',
	  'egrave',
	  'eth',
	  'euml',
	  'frac12',
	  'frac14',
	  'frac34',
	  'gt',
	  'iacute',
	  'icirc',
	  'iexcl',
	  'igrave',
	  'iquest',
	  'iuml',
	  'laquo',
	  'lt',
	  'macr',
	  'micro',
	  'middot',
	  'nbsp',
	  'not',
	  'ntilde',
	  'oacute',
	  'ocirc',
	  'ograve',
	  'ordf',
	  'ordm',
	  'oslash',
	  'otilde',
	  'ouml',
	  'para',
	  'plusmn',
	  'pound',
	  'quot',
	  'raquo',
	  'reg',
	  'sect',
	  'shy',
	  'sup1',
	  'sup2',
	  'sup3',
	  'szlig',
	  'thorn',
	  'times',
	  'uacute',
	  'ucirc',
	  'ugrave',
	  'uml',
	  'uuml',
	  'yacute',
	  'yen',
	  'yuml'
	];

	/**
	 * Map of invalid numeric character references to their replacements, according to HTML.
	 *
	 * @type {Record<number, string>}
	 */
	const characterReferenceInvalid = {
	  0: '�',
	  128: '€',
	  130: '‚',
	  131: 'ƒ',
	  132: '„',
	  133: '…',
	  134: '†',
	  135: '‡',
	  136: 'ˆ',
	  137: '‰',
	  138: 'Š',
	  139: '‹',
	  140: 'Œ',
	  142: 'Ž',
	  145: '‘',
	  146: '’',
	  147: '“',
	  148: '”',
	  149: '•',
	  150: '–',
	  151: '—',
	  152: '˜',
	  153: '™',
	  154: 'š',
	  155: '›',
	  156: 'œ',
	  158: 'ž',
	  159: 'Ÿ'
	};

	/**
	 * Check if the given character code, or the character code at the first
	 * character, is decimal.
	 *
	 * @param {string|number} character
	 * @returns {boolean} Whether `character` is a decimal
	 */
	function isDecimal(character) {
	  const code =
	    typeof character === 'string' ? character.charCodeAt(0) : character;

	  return code >= 48 && code <= 57 /* 0-9 */
	}

	/**
	 * Check if the given character code, or the character code at the first
	 * character, is hexadecimal.
	 *
	 * @param {string|number} character
	 * @returns {boolean} Whether `character` is hexadecimal
	 */
	function isHexadecimal(character) {
	  const code =
	    typeof character === 'string' ? character.charCodeAt(0) : character;

	  return (
	    (code >= 97 /* a */ && code <= 102) /* z */ ||
	    (code >= 65 /* A */ && code <= 70) /* Z */ ||
	    (code >= 48 /* A */ && code <= 57) /* Z */
	  )
	}

	/**
	 * Check if the given character code, or the character code at the first
	 * character, is alphabetical.
	 *
	 * @param {string|number} character
	 * @returns {boolean} Whether `character` is alphabetical.
	 */
	function isAlphabetical(character) {
	  const code =
	    typeof character === 'string' ? character.charCodeAt(0) : character;

	  return (
	    (code >= 97 && code <= 122) /* a-z */ ||
	    (code >= 65 && code <= 90) /* A-Z */
	  )
	}

	/**
	 * Check if the given character code, or the character code at the first
	 * character, is alphanumerical.
	 *
	 * @param {string|number} character
	 * @returns {boolean} Whether `character` is alphanumerical.
	 */
	function isAlphanumerical(character) {
	  return isAlphabetical(character) || isDecimal(character)
	}

	/**
	 * @typedef {import('unist').Point} Point
	 * @typedef {import('unist').Position} Position
	 */


	const fromCharCode = String.fromCharCode;

	// Warning messages.
	const messages = [
	  '',
	  /* 1: Non terminated (named) */
	  'Named character references must be terminated by a semicolon',
	  /* 2: Non terminated (numeric) */
	  'Numeric character references must be terminated by a semicolon',
	  /* 3: Empty (named) */
	  'Named character references cannot be empty',
	  /* 4: Empty (numeric) */
	  'Numeric character references cannot be empty',
	  /* 5: Unknown (named) */
	  'Named character references must be known',
	  /* 6: Disallowed (numeric) */
	  'Numeric character references cannot be disallowed',
	  /* 7: Prohibited (numeric) */
	  'Numeric character references cannot be outside the permissible Unicode range'
	];

	/**
	 * Parse HTML character references.
	 *
	 * @param {string} value
	 * @param {import('../index.js').Options} [options={}]
	 */
	function parseEntities(value, options = {}) {
	  const additional =
	    typeof options.additional === 'string'
	      ? options.additional.charCodeAt(0)
	      : options.additional;
	  /** @type {Array<string>} */
	  const result = [];
	  let index = 0;
	  let lines = -1;
	  let queue = '';
	  /** @type {Point|undefined} */
	  let point;
	  /** @type {Array<number>|undefined} */
	  let indent;

	  if (options.position) {
	    if ('start' in options.position || 'indent' in options.position) {
	      // @ts-expect-error: points don’t have indent.
	      indent = options.position.indent;
	      // @ts-expect-error: points don’t have indent.
	      point = options.position.start;
	    } else {
	      point = options.position;
	    }
	  }

	  let line = (point ? point.line : 0) || 1;
	  let column = (point ? point.column : 0) || 1;

	  // Cache the current point.
	  let previous = now();
	  /** @type {number|undefined} */
	  let character;

	  // Ensure the algorithm walks over the first character (inclusive).
	  index--;

	  while (++index <= value.length) {
	    // If the previous character was a newline.
	    if (character === 10 /* `\n` */) {
	      column = (indent ? indent[lines] : 0) || 1;
	    }

	    character = value.charCodeAt(index);

	    if (character === 38 /* `&` */) {
	      const following = value.charCodeAt(index + 1);

	      // The behavior depends on the identity of the next character.
	      if (
	        following === 9 /* `\t` */ ||
	        following === 10 /* `\n` */ ||
	        following === 12 /* `\f` */ ||
	        following === 32 /* ` ` */ ||
	        following === 38 /* `&` */ ||
	        following === 60 /* `<` */ ||
	        Number.isNaN(following) ||
	        (additional && following === additional)
	      ) {
	        // Not a character reference.
	        // No characters are consumed, and nothing is returned.
	        // This is not an error, either.
	        queue += fromCharCode(character);
	        column++;
	        continue
	      }

	      const start = index + 1;
	      let begin = start;
	      let end = start;
	      /** @type {string} */
	      let type;

	      if (following === 35 /* `#` */) {
	        // Numerical reference.
	        end = ++begin;

	        // The behavior further depends on the next character.
	        const following = value.charCodeAt(end);

	        if (following === 88 /* `X` */ || following === 120 /* `x` */) {
	          // ASCII hexadecimal digits.
	          type = 'hexadecimal';
	          end = ++begin;
	        } else {
	          // ASCII decimal digits.
	          type = 'decimal';
	        }
	      } else {
	        // Named reference.
	        type = 'named';
	      }

	      let characterReferenceCharacters = '';
	      let characterReference = '';
	      let characters = '';
	      // Each type of character reference accepts different characters.
	      // This test is used to detect whether a reference has ended (as the semicolon
	      // is not strictly needed).
	      const test =
	        type === 'named'
	          ? isAlphanumerical
	          : type === 'decimal'
	          ? isDecimal
	          : isHexadecimal;

	      end--;

	      while (++end <= value.length) {
	        const following = value.charCodeAt(end);

	        if (!test(following)) {
	          break
	        }

	        characters += fromCharCode(following);

	        // Check if we can match a legacy named reference.
	        // If so, we cache that as the last viable named reference.
	        // This ensures we do not need to walk backwards later.
	        if (type === 'named' && characterEntitiesLegacy.includes(characters)) {
	          characterReferenceCharacters = characters;
	          // @ts-expect-error: always able to decode.
	          characterReference = decodeNamedCharacterReference(characters);
	        }
	      }

	      let terminated = value.charCodeAt(end) === 59; /* `;` */

	      if (terminated) {
	        end++;

	        const namedReference =
	          type === 'named' ? decodeNamedCharacterReference(characters) : false;

	        if (namedReference) {
	          characterReferenceCharacters = characters;
	          characterReference = namedReference;
	        }
	      }

	      let diff = 1 + end - start;
	      let reference = '';

	      if (!terminated && options.nonTerminated === false) ; else if (!characters) {
	        // An empty (possible) reference is valid, unless it’s numeric (thus an
	        // ampersand followed by an octothorp).
	        if (type !== 'named') {
	          warning(4 /* Empty (numeric) */, diff);
	        }
	      } else if (type === 'named') {
	        // An ampersand followed by anything unknown, and not terminated, is
	        // invalid.
	        if (terminated && !characterReference) {
	          warning(5 /* Unknown (named) */, 1);
	        } else {
	          // If there’s something after an named reference which is not known,
	          // cap the reference.
	          if (characterReferenceCharacters !== characters) {
	            end = begin + characterReferenceCharacters.length;
	            diff = 1 + end - begin;
	            terminated = false;
	          }

	          // If the reference is not terminated, warn.
	          if (!terminated) {
	            const reason = characterReferenceCharacters
	              ? 1 /* Non terminated (named) */
	              : 3; /* Empty (named) */

	            if (options.attribute) {
	              const following = value.charCodeAt(end);

	              if (following === 61 /* `=` */) {
	                warning(reason, diff);
	                characterReference = '';
	              } else if (isAlphanumerical(following)) {
	                characterReference = '';
	              } else {
	                warning(reason, diff);
	              }
	            } else {
	              warning(reason, diff);
	            }
	          }
	        }

	        reference = characterReference;
	      } else {
	        if (!terminated) {
	          // All nonterminated numeric references are not rendered, and emit a
	          // warning.
	          warning(2 /* Non terminated (numeric) */, diff);
	        }

	        // When terminated and numerical, parse as either hexadecimal or
	        // decimal.
	        let referenceCode = Number.parseInt(
	          characters,
	          type === 'hexadecimal' ? 16 : 10
	        );

	        // Emit a warning when the parsed number is prohibited, and replace with
	        // replacement character.
	        if (prohibited(referenceCode)) {
	          warning(7 /* Prohibited (numeric) */, diff);
	          reference = fromCharCode(65533 /* `�` */);
	        } else if (referenceCode in characterReferenceInvalid) {
	          // Emit a warning when the parsed number is disallowed, and replace by
	          // an alternative.
	          warning(6 /* Disallowed (numeric) */, diff);
	          reference = characterReferenceInvalid[referenceCode];
	        } else {
	          // Parse the number.
	          let output = '';

	          // Emit a warning when the parsed number should not be used.
	          if (disallowed(referenceCode)) {
	            warning(6 /* Disallowed (numeric) */, diff);
	          }

	          // Serialize the number.
	          if (referenceCode > 0xffff) {
	            referenceCode -= 0x10000;
	            output += fromCharCode((referenceCode >>> (10 & 0x3ff)) | 0xd800);
	            referenceCode = 0xdc00 | (referenceCode & 0x3ff);
	          }

	          reference = output + fromCharCode(referenceCode);
	        }
	      }

	      // Found it!
	      // First eat the queued characters as normal text, then eat a reference.
	      if (reference) {
	        flush();

	        previous = now();
	        index = end - 1;
	        column += end - start + 1;
	        result.push(reference);
	        const next = now();
	        next.offset++;

	        if (options.reference) {
	          options.reference.call(
	            options.referenceContext,
	            reference,
	            {start: previous, end: next},
	            value.slice(start - 1, end)
	          );
	        }

	        previous = next;
	      } else {
	        // If we could not find a reference, queue the checked characters (as
	        // normal characters), and move the pointer to their end.
	        // This is possible because we can be certain neither newlines nor
	        // ampersands are included.
	        characters = value.slice(start - 1, end);
	        queue += characters;
	        column += characters.length;
	        index = end - 1;
	      }
	    } else {
	      // Handle anything other than an ampersand, including newlines and EOF.
	      if (character === 10 /* `\n` */) {
	        line++;
	        lines++;
	        column = 0;
	      }

	      if (Number.isNaN(character)) {
	        flush();
	      } else {
	        queue += fromCharCode(character);
	        column++;
	      }
	    }
	  }

	  // Return the reduced nodes.
	  return result.join('')

	  // Get current position.
	  function now() {
	    return {
	      line,
	      column,
	      offset: index + ((point ? point.offset : 0) || 0)
	    }
	  }

	  /**
	   * Handle the warning.
	   *
	   * @param {1|2|3|4|5|6|7} code
	   * @param {number} offset
	   */
	  function warning(code, offset) {
	    /** @type {ReturnType<now>} */
	    let position;

	    if (options.warning) {
	      position = now();
	      position.column += offset;
	      position.offset += offset;

	      options.warning.call(
	        options.warningContext,
	        messages[code],
	        position,
	        code
	      );
	    }
	  }

	  /**
	   * Flush `queue` (normal text).
	   * Macro invoked before each reference and at the end of `value`.
	   * Does nothing when `queue` is empty.
	   */
	  function flush() {
	    if (queue) {
	      result.push(queue);

	      if (options.text) {
	        options.text.call(options.textContext, queue, {
	          start: previous,
	          end: now()
	        });
	      }

	      queue = '';
	    }
	  }
	}

	/**
	 * Check if `character` is outside the permissible unicode range.
	 *
	 * @param {number} code
	 * @returns {boolean}
	 */
	function prohibited(code) {
	  return (code >= 0xd800 && code <= 0xdfff) || code > 0x10ffff
	}

	/**
	 * Check if `character` is disallowed.
	 *
	 * @param {number} code
	 * @returns {boolean}
	 */
	function disallowed(code) {
	  return (
	    (code >= 0x0001 && code <= 0x0008) ||
	    code === 0x000b ||
	    (code >= 0x000d && code <= 0x001f) ||
	    (code >= 0x007f && code <= 0x009f) ||
	    (code >= 0xfdd0 && code <= 0xfdef) ||
	    (code & 0xffff) === 0xffff ||
	    (code & 0xffff) === 0xfffe
	  )
	}

	// @ts-nocheck

	var uniqueId = 0;

	// The grammar object for plaintext
	var plainTextGrammar = {};

	var _ = {
	  /**
	   * A namespace for utility methods.
	   *
	   * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may
	   * change or disappear at any time.
	   *
	   * @namespace
	   * @memberof Prism
	   */
	  util: {
	    /**
	     * Returns the name of the type of the given value.
	     *
	     * @param {any} o
	     * @returns {string}
	     * @example
	     * type(null)      === 'Null'
	     * type(undefined) === 'Undefined'
	     * type(123)       === 'Number'
	     * type('foo')     === 'String'
	     * type(true)      === 'Boolean'
	     * type([1, 2])    === 'Array'
	     * type({})        === 'Object'
	     * type(String)    === 'Function'
	     * type(/abc+/)    === 'RegExp'
	     */
	    type: function (o) {
	      return Object.prototype.toString.call(o).slice(8, -1)
	    },

	    /**
	     * Returns a unique number for the given object. Later calls will still return the same number.
	     *
	     * @param {Object} obj
	     * @returns {number}
	     */
	    objId: function (obj) {
	      if (!obj['__id']) {
	        Object.defineProperty(obj, '__id', {value: ++uniqueId});
	      }
	      return obj['__id']
	    },

	    /**
	     * Creates a deep clone of the given object.
	     *
	     * The main intended use of this function is to clone language definitions.
	     *
	     * @param {T} o
	     * @param {Record<number, any>} [visited]
	     * @returns {T}
	     * @template T
	     */
	    clone: function deepClone(o, visited) {
	      visited = visited || {};

	      var clone;
	      var id;
	      switch (_.util.type(o)) {
	        case 'Object':
	          id = _.util.objId(o);
	          if (visited[id]) {
	            return visited[id]
	          }
	          clone = /** @type {Record<string, any>} */ ({});
	          visited[id] = clone;

	          for (var key in o) {
	            if (o.hasOwnProperty(key)) {
	              clone[key] = deepClone(o[key], visited);
	            }
	          }

	          return /** @type {any} */ (clone)

	        case 'Array':
	          id = _.util.objId(o);
	          if (visited[id]) {
	            return visited[id]
	          }
	          clone = [];
	          visited[id] = clone;

	          o.forEach(function (v, i) {
	            clone[i] = deepClone(v, visited);
	          });

	          return /** @type {any} */ (clone)

	        default:
	          return o
	      }
	    }
	  },

	  /**
	   * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.
	   *
	   * @namespace
	   * @memberof Prism
	   * @public
	   */
	  languages: {
	    /**
	     * The grammar for plain, unformatted text.
	     */
	    plain: plainTextGrammar,
	    plaintext: plainTextGrammar,
	    text: plainTextGrammar,
	    txt: plainTextGrammar,

	    /**
	     * Creates a deep copy of the language with the given id and appends the given tokens.
	     *
	     * If a token in `redef` also appears in the copied language, then the existing token in the copied language
	     * will be overwritten at its original position.
	     *
	     * ## Best practices
	     *
	     * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)
	     * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to
	     * understand the language definition because, normally, the order of tokens matters in Prism grammars.
	     *
	     * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.
	     * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.
	     *
	     * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.
	     * @param {Grammar} redef The new tokens to append.
	     * @returns {Grammar} The new language created.
	     * @public
	     * @example
	     * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {
	     *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token
	     *     // at its original position
	     *     'comment': { ... },
	     *     // CSS doesn't have a 'color' token, so this token will be appended
	     *     'color': /\b(?:red|green|blue)\b/
	     * });
	     */
	    extend: function (id, redef) {
	      var lang = _.util.clone(_.languages[id]);

	      for (var key in redef) {
	        lang[key] = redef[key];
	      }

	      return lang
	    },

	    /**
	     * Inserts tokens _before_ another token in a language definition or any other grammar.
	     *
	     * ## Usage
	     *
	     * This helper method makes it easy to modify existing languages. For example, the CSS language definition
	     * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded
	     * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the
	     * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do
	     * this:
	     *
	     * ```js
	     * Prism.languages.markup.style = {
	     *     // token
	     * };
	     * ```
	     *
	     * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens
	     * before existing tokens. For the CSS example above, you would use it like this:
	     *
	     * ```js
	     * Prism.languages.insertBefore('markup', 'cdata', {
	     *     'style': {
	     *         // token
	     *     }
	     * });
	     * ```
	     *
	     * ## Special cases
	     *
	     * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar
	     * will be ignored.
	     *
	     * This behavior can be used to insert tokens after `before`:
	     *
	     * ```js
	     * Prism.languages.insertBefore('markup', 'comment', {
	     *     'comment': Prism.languages.markup.comment,
	     *     // tokens after 'comment'
	     * });
	     * ```
	     *
	     * ## Limitations
	     *
	     * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object
	     * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave
	     * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily
	     * deleting properties which is necessary to insert at arbitrary positions.
	     *
	     * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.
	     * Instead, it will create a new object and replace all references to the target object with the new one. This
	     * can be done without temporarily deleting properties, so the iteration order is well-defined.
	     *
	     * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if
	     * you hold the target object in a variable, then the value of the variable will not change.
	     *
	     * ```js
	     * var oldMarkup = Prism.languages.markup;
	     * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });
	     *
	     * assert(oldMarkup !== Prism.languages.markup);
	     * assert(newMarkup === Prism.languages.markup);
	     * ```
	     *
	     * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the
	     * object to be modified.
	     * @param {string} before The key to insert before.
	     * @param {Grammar} insert An object containing the key-value pairs to be inserted.
	     * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the
	     * object to be modified.
	     *
	     * Defaults to `Prism.languages`.
	     * @returns {Grammar} The new grammar object.
	     * @public
	     */
	    insertBefore: function (inside, before, insert, root) {
	      root = root || /** @type {any} */ (_.languages);
	      var grammar = root[inside];
	      /** @type {Grammar} */
	      var ret = {};

	      for (var token in grammar) {
	        if (grammar.hasOwnProperty(token)) {
	          if (token == before) {
	            for (var newToken in insert) {
	              if (insert.hasOwnProperty(newToken)) {
	                ret[newToken] = insert[newToken];
	              }
	            }
	          }

	          // Do not insert token which also occur in insert. See #1525
	          if (!insert.hasOwnProperty(token)) {
	            ret[token] = grammar[token];
	          }
	        }
	      }

	      var old = root[inside];
	      root[inside] = ret;

	      // Update references in other language definitions
	      _.languages.DFS(_.languages, function (key, value) {
	        if (value === old && key != inside) {
	          this[key] = ret;
	        }
	      });

	      return ret
	    },

	    // Traverse a language definition with Depth First Search
	    DFS: function DFS(o, callback, type, visited) {
	      visited = visited || {};

	      var objId = _.util.objId;

	      for (var i in o) {
	        if (o.hasOwnProperty(i)) {
	          callback.call(o, i, o[i], type || i);

	          var property = o[i];
	          var propertyType = _.util.type(property);

	          if (propertyType === 'Object' && !visited[objId(property)]) {
	            visited[objId(property)] = true;
	            DFS(property, callback, null, visited);
	          } else if (propertyType === 'Array' && !visited[objId(property)]) {
	            visited[objId(property)] = true;
	            DFS(property, callback, i, visited);
	          }
	        }
	      }
	    }
	  },

	  plugins: {},

	  /**
	   * Low-level function, only use if you know what you’re doing. It accepts a string of text as input
	   * and the language definitions to use, and returns a string with the HTML produced.
	   *
	   * The following hooks will be run:
	   * 1. `before-tokenize`
	   * 2. `after-tokenize`
	   * 3. `wrap`: On each {@link Token}.
	   *
	   * @param {string} text A string with the code to be highlighted.
	   * @param {Grammar} grammar An object containing the tokens to use.
	   *
	   * Usually a language definition like `Prism.languages.markup`.
	   * @param {string} language The name of the language definition passed to `grammar`.
	   * @returns {string} The highlighted HTML.
	   * @memberof Prism
	   * @public
	   * @example
	   * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');
	   */
	  highlight: function (text, grammar, language) {
	    var env = {
	      code: text,
	      grammar: grammar,
	      language: language
	    };
	    _.hooks.run('before-tokenize', env);
	    if (!env.grammar) {
	      throw new Error('The language "' + env.language + '" has no grammar.')
	    }
	    env.tokens = _.tokenize(env.code, env.grammar);
	    _.hooks.run('after-tokenize', env);
	    return Token.stringify(_.util.encode(env.tokens), env.language)
	  },

	  /**
	   * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input
	   * and the language definitions to use, and returns an array with the tokenized code.
	   *
	   * When the language definition includes nested tokens, the function is called recursively on each of these tokens.
	   *
	   * This method could be useful in other contexts as well, as a very crude parser.
	   *
	   * @param {string} text A string with the code to be highlighted.
	   * @param {Grammar} grammar An object containing the tokens to use.
	   *
	   * Usually a language definition like `Prism.languages.markup`.
	   * @returns {TokenStream} An array of strings and tokens, a token stream.
	   * @memberof Prism
	   * @public
	   * @example
	   * let code = `var foo = 0;`;
	   * let tokens = Prism.tokenize(code, Prism.languages.javascript);
	   * tokens.forEach(token => {
	   *     if (token instanceof Prism.Token && token.type === 'number') {
	   *         console.log(`Found numeric literal: ${token.content}`);
	   *     }
	   * });
	   */
	  tokenize: function (text, grammar) {
	    var rest = grammar.rest;
	    if (rest) {
	      for (var token in rest) {
	        grammar[token] = rest[token];
	      }

	      delete grammar.rest;
	    }

	    var tokenList = new LinkedList();
	    addAfter(tokenList, tokenList.head, text);

	    matchGrammar(text, tokenList, grammar, tokenList.head, 0);

	    return toArray(tokenList)
	  },

	  /**
	   * @namespace
	   * @memberof Prism
	   * @public
	   */
	  hooks: {
	    all: {},

	    /**
	     * Adds the given callback to the list of callbacks for the given hook.
	     *
	     * The callback will be invoked when the hook it is registered for is run.
	     * Hooks are usually directly run by a highlight function but you can also run hooks yourself.
	     *
	     * One callback function can be registered to multiple hooks and the same hook multiple times.
	     *
	     * @param {string} name The name of the hook.
	     * @param {HookCallback} callback The callback function which is given environment variables.
	     * @public
	     */
	    add: function (name, callback) {
	      var hooks = _.hooks.all;

	      hooks[name] = hooks[name] || [];

	      hooks[name].push(callback);
	    },

	    /**
	     * Runs a hook invoking all registered callbacks with the given environment variables.
	     *
	     * Callbacks will be invoked synchronously and in the order in which they were registered.
	     *
	     * @param {string} name The name of the hook.
	     * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.
	     * @public
	     */
	    run: function (name, env) {
	      var callbacks = _.hooks.all[name];

	      if (!callbacks || !callbacks.length) {
	        return
	      }

	      for (var i = 0, callback; (callback = callbacks[i++]); ) {
	        callback(env);
	      }
	    }
	  },

	  Token: Token
	};

	// Typescript note:
	// The following can be used to import the Token type in JSDoc:
	//
	//   @typedef {InstanceType<import("./prism-core")["Token"]>} Token

	/**
	 * Creates a new token.
	 *
	 * @param {string} type See {@link Token#type type}
	 * @param {string | TokenStream} content See {@link Token#content content}
	 * @param {string|string[]} [alias] The alias(es) of the token.
	 * @param {string} [matchedStr=""] A copy of the full string this token was created from.
	 * @class
	 * @global
	 * @public
	 */
	function Token(type, content, alias, matchedStr) {
	  /**
	   * The type of the token.
	   *
	   * This is usually the key of a pattern in a {@link Grammar}.
	   *
	   * @type {string}
	   * @see GrammarToken
	   * @public
	   */
	  this.type = type;
	  /**
	   * The strings or tokens contained by this token.
	   *
	   * This will be a token stream if the pattern matched also defined an `inside` grammar.
	   *
	   * @type {string | TokenStream}
	   * @public
	   */
	  this.content = content;
	  /**
	   * The alias(es) of the token.
	   *
	   * @type {string|string[]}
	   * @see GrammarToken
	   * @public
	   */
	  this.alias = alias;
	  // Copy of the full string this token was created from
	  this.length = (matchedStr || '').length | 0;
	}

	/**
	 * A token stream is an array of strings and {@link Token Token} objects.
	 *
	 * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process
	 * them.
	 *
	 * 1. No adjacent strings.
	 * 2. No empty strings.
	 *
	 *    The only exception here is the token stream that only contains the empty string and nothing else.
	 *
	 * @typedef {Array<string | Token>} TokenStream
	 * @global
	 * @public
	 */

	/**
	 * @param {RegExp} pattern
	 * @param {number} pos
	 * @param {string} text
	 * @param {boolean} lookbehind
	 * @returns {RegExpExecArray | null}
	 */
	function matchPattern(pattern, pos, text, lookbehind) {
	  pattern.lastIndex = pos;
	  var match = pattern.exec(text);
	  if (match && lookbehind && match[1]) {
	    // change the match to remove the text matched by the Prism lookbehind group
	    var lookbehindLength = match[1].length;
	    match.index += lookbehindLength;
	    match[0] = match[0].slice(lookbehindLength);
	  }
	  return match
	}

	/**
	 * @param {string} text
	 * @param {LinkedList<string | Token>} tokenList
	 * @param {any} grammar
	 * @param {LinkedListNode<string | Token>} startNode
	 * @param {number} startPos
	 * @param {RematchOptions} [rematch]
	 * @returns {void}
	 * @private
	 *
	 * @typedef RematchOptions
	 * @property {string} cause
	 * @property {number} reach
	 */
	function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {
	  for (var token in grammar) {
	    if (!grammar.hasOwnProperty(token) || !grammar[token]) {
	      continue
	    }

	    var patterns = grammar[token];
	    patterns = Array.isArray(patterns) ? patterns : [patterns];

	    for (var j = 0; j < patterns.length; ++j) {
	      if (rematch && rematch.cause == token + ',' + j) {
	        return
	      }

	      var patternObj = patterns[j];
	      var inside = patternObj.inside;
	      var lookbehind = !!patternObj.lookbehind;
	      var greedy = !!patternObj.greedy;
	      var alias = patternObj.alias;

	      if (greedy && !patternObj.pattern.global) {
	        // Without the global flag, lastIndex won't work
	        var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];
	        patternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');
	      }

	      /** @type {RegExp} */
	      var pattern = patternObj.pattern || patternObj;

	      for (
	        // iterate the token list and keep track of the current token/string position
	        var currentNode = startNode.next, pos = startPos;
	        currentNode !== tokenList.tail;
	        pos += currentNode.value.length, currentNode = currentNode.next
	      ) {
	        if (rematch && pos >= rematch.reach) {
	          break
	        }

	        var str = currentNode.value;

	        if (tokenList.length > text.length) {
	          // Something went terribly wrong, ABORT, ABORT!
	          return
	        }

	        if (str instanceof Token) {
	          continue
	        }

	        var removeCount = 1; // this is the to parameter of removeBetween
	        var match;

	        if (greedy) {
	          match = matchPattern(pattern, pos, text, lookbehind);
	          if (!match || match.index >= text.length) {
	            break
	          }

	          var from = match.index;
	          var to = match.index + match[0].length;
	          var p = pos;

	          // find the node that contains the match
	          p += currentNode.value.length;
	          while (from >= p) {
	            currentNode = currentNode.next;
	            p += currentNode.value.length;
	          }
	          // adjust pos (and p)
	          p -= currentNode.value.length;
	          pos = p;

	          // the current node is a Token, then the match starts inside another Token, which is invalid
	          if (currentNode.value instanceof Token) {
	            continue
	          }

	          // find the last node which is affected by this match
	          for (
	            var k = currentNode;
	            k !== tokenList.tail && (p < to || typeof k.value === 'string');
	            k = k.next
	          ) {
	            removeCount++;
	            p += k.value.length;
	          }
	          removeCount--;

	          // replace with the new match
	          str = text.slice(pos, p);
	          match.index -= pos;
	        } else {
	          match = matchPattern(pattern, 0, str, lookbehind);
	          if (!match) {
	            continue
	          }
	        }

	        // eslint-disable-next-line no-redeclare
	        var from = match.index;
	        var matchStr = match[0];
	        var before = str.slice(0, from);
	        var after = str.slice(from + matchStr.length);

	        var reach = pos + str.length;
	        if (rematch && reach > rematch.reach) {
	          rematch.reach = reach;
	        }

	        var removeFrom = currentNode.prev;

	        if (before) {
	          removeFrom = addAfter(tokenList, removeFrom, before);
	          pos += before.length;
	        }

	        removeRange(tokenList, removeFrom, removeCount);

	        var wrapped = new Token(
	          token,
	          inside ? _.tokenize(matchStr, inside) : matchStr,
	          alias,
	          matchStr
	        );
	        currentNode = addAfter(tokenList, removeFrom, wrapped);

	        if (after) {
	          addAfter(tokenList, currentNode, after);
	        }

	        if (removeCount > 1) {
	          // at least one Token object was removed, so we have to do some rematching
	          // this can only happen if the current pattern is greedy

	          /** @type {RematchOptions} */
	          var nestedRematch = {
	            cause: token + ',' + j,
	            reach: reach
	          };
	          matchGrammar(
	            text,
	            tokenList,
	            grammar,
	            currentNode.prev,
	            pos,
	            nestedRematch
	          );

	          // the reach might have been extended because of the rematching
	          if (rematch && nestedRematch.reach > rematch.reach) {
	            rematch.reach = nestedRematch.reach;
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * @typedef LinkedListNode
	 * @property {T} value
	 * @property {LinkedListNode<T> | null} prev The previous node.
	 * @property {LinkedListNode<T> | null} next The next node.
	 * @template T
	 * @private
	 */

	/**
	 * @template T
	 * @private
	 */
	function LinkedList() {
	  /** @type {LinkedListNode<T>} */
	  var head = {value: null, prev: null, next: null};
	  /** @type {LinkedListNode<T>} */
	  var tail = {value: null, prev: head, next: null};
	  head.next = tail;

	  /** @type {LinkedListNode<T>} */
	  this.head = head;
	  /** @type {LinkedListNode<T>} */
	  this.tail = tail;
	  this.length = 0;
	}

	/**
	 * Adds a new node with the given value to the list.
	 *
	 * @param {LinkedList<T>} list
	 * @param {LinkedListNode<T>} node
	 * @param {T} value
	 * @returns {LinkedListNode<T>} The added node.
	 * @template T
	 */
	function addAfter(list, node, value) {
	  // assumes that node != list.tail && values.length >= 0
	  var next = node.next;

	  var newNode = {value: value, prev: node, next: next};
	  node.next = newNode;
	  next.prev = newNode;
	  list.length++;

	  return newNode
	}
	/**
	 * Removes `count` nodes after the given node. The given node will not be removed.
	 *
	 * @param {LinkedList<T>} list
	 * @param {LinkedListNode<T>} node
	 * @param {number} count
	 * @template T
	 */
	function removeRange(list, node, count) {
	  var next = node.next;
	  for (var i = 0; i < count && next !== list.tail; i++) {
	    next = next.next;
	  }
	  node.next = next;
	  next.prev = node;
	  list.length -= i;
	}
	/**
	 * @param {LinkedList<T>} list
	 * @returns {T[]}
	 * @template T
	 */
	function toArray(list) {
	  var array = [];
	  var node = list.head.next;
	  while (node !== list.tail) {
	    array.push(node.value);
	    node = node.next;
	  }
	  return array
	}

	const Prism = _;

	// some additional documentation/types

	/**
	 * The expansion of a simple `RegExp` literal to support additional properties.
	 *
	 * @typedef GrammarToken
	 * @property {RegExp} pattern The regular expression of the token.
	 * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)
	 * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.
	 * @property {boolean} [greedy=false] Whether the token is greedy.
	 * @property {string|string[]} [alias] An optional alias or list of aliases.
	 * @property {Grammar} [inside] The nested grammar of this token.
	 *
	 * The `inside` grammar will be used to tokenize the text value of each token of this kind.
	 *
	 * This can be used to make nested and even recursive language definitions.
	 *
	 * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into
	 * each another.
	 * @global
	 * @public
	 */

	/**
	 * @typedef Grammar
	 * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}
	 * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.
	 * @global
	 * @public
	 */

	/**
	 * A function which will invoked after an element was successfully highlighted.
	 *
	 * @callback HighlightCallback
	 * @param {Element} element The element successfully highlighted.
	 * @returns {void}
	 * @global
	 * @public
	 */

	/**
	 * @callback HookCallback
	 * @param {Object<string, any>} env The environment variables of the hook.
	 * @returns {void}
	 * @global
	 * @public
	 */

	/**
	 * @typedef _Token A hidden Prism token
	 * @property {string} type
	 * @property {string} content
	 * @property {string} alias
	 * @property {number} length
	 *
	 * @typedef _Env A hidden Prism environment
	 * @property {string} type
	 * @property {string} tag
	 * @property {Text|RefractorElement|Array<Text|RefractorElement>} content
	 * @property {Array<string>} classes
	 * @property {Record<string, string>} attributes
	 * @property {string} language
	 *
	 * @typedef {import('hast').Root} Root
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').Text} Text
	 * @typedef {Omit<Element, 'children'> & {children: Array<RefractorElement|Text>}} RefractorElement
	 * @typedef {Omit<Root, 'children'> & {children: Array<RefractorElement|Text>}} RefractorRoot
	 *
	 * @typedef {import('prismjs').Languages} Languages
	 * @typedef {import('prismjs').Grammar} Grammar Whatever this is, Prism handles it.
	 * @typedef {((prism: unknown) => void) & {displayName: string, aliases?: Array<string>}} Syntax A refractor syntax function
	 *
	 * @typedef Refractor Virtual syntax highlighting
	 * @property {highlight} highlight
	 * @property {alias} alias
	 * @property {register} register
	 * @property {registered} registered
	 * @property {listLanguages} listLanguages
	 * @property {Languages} languages
	 */


	const own$4 = {}.hasOwnProperty;

	// Inherit.
	function Refractor() {}

	Refractor.prototype = Prism;

	/** @type {Refractor} */
	// @ts-expect-error: TS is wrong.
	const refractor = new Refractor();

	// Create.
	refractor.highlight = highlight;
	refractor.register = register;
	refractor.alias = alias;
	refractor.registered = registered;
	refractor.listLanguages = listLanguages;

	// @ts-expect-error Overwrite Prism.
	refractor.util.encode = encode;
	// @ts-expect-error Overwrite Prism.
	refractor.Token.stringify = stringify;

	/**
	 * Highlight `value` (code) as `language` (programming language).
	 *
	 * @param {string} value
	 *   Code to highlight.
	 * @param {string|Grammar} language
	 *   Programming language name, alias, or grammar.
	 * @returns {RefractorRoot}
	 *   Node representing highlighted code.
	 */
	function highlight(value, language) {
	  if (typeof value !== 'string') {
	    throw new TypeError('Expected `string` for `value`, got `' + value + '`')
	  }

	  /** @type {Grammar} */
	  let grammar;
	  /** @type {string|undefined} */
	  let name;

	  // `name` is a grammar object.
	  // This was called internally by Prism.js before 1.28.0.
	  /* c8 ignore next 2 */
	  if (language && typeof language === 'object') {
	    grammar = language;
	  } else {
	    name = language;

	    if (typeof name !== 'string') {
	      throw new TypeError('Expected `string` for `name`, got `' + name + '`')
	    }

	    if (own$4.call(refractor.languages, name)) {
	      grammar = refractor.languages[name];
	    } else {
	      throw new Error('Unknown language: `' + name + '` is not registered')
	    }
	  }

	  return {
	    type: 'root',
	    // @ts-expect-error: we hacked Prism to accept and return the things we want.
	    children: Prism.highlight.call(refractor, value, grammar, name)
	  }
	}

	/**
	 * Register a syntax.
	 *
	 * @param {Syntax} syntax
	 *   Language function made for refractor, as in, the files in
	 *   `refractor/lang/*.js`.
	 * @returns {void}
	 */
	function register(syntax) {
	  if (typeof syntax !== 'function' || !syntax.displayName) {
	    throw new Error('Expected `function` for `syntax`, got `' + syntax + '`')
	  }

	  // Do not duplicate registrations.
	  if (!own$4.call(refractor.languages, syntax.displayName)) {
	    syntax(refractor);
	  }
	}

	/**
	 * Register aliases for already registered languages.
	 *
	 * @param {Record<string, string|Array<string>>|string} language
	 * @param {string|Array<string>} [alias]
	 * @returns {void}
	 */
	function alias(language, alias) {
	  const languages = refractor.languages;
	  /** @type {Record<string, string|Array<string>>} */
	  let map = {};

	  if (typeof language === 'string') {
	    if (alias) {
	      map[language] = alias;
	    }
	  } else {
	    map = language;
	  }

	  /** @type {string} */
	  let key;

	  for (key in map) {
	    if (own$4.call(map, key)) {
	      const value = map[key];
	      const list = typeof value === 'string' ? [value] : value;
	      let index = -1;

	      while (++index < list.length) {
	        languages[list[index]] = languages[key];
	      }
	    }
	  }
	}

	/**
	 * Check whether an `alias` or `language` is registered.
	 *
	 * @param {string} aliasOrLanguage
	 * @returns {boolean}
	 */
	function registered(aliasOrLanguage) {
	  if (typeof aliasOrLanguage !== 'string') {
	    throw new TypeError(
	      'Expected `string` for `aliasOrLanguage`, got `' + aliasOrLanguage + '`'
	    )
	  }

	  return own$4.call(refractor.languages, aliasOrLanguage)
	}

	/**
	 * List all registered languages (names and aliases).
	 *
	 * @returns {Array<string>}
	 */
	function listLanguages() {
	  const languages = refractor.languages;
	  /** @type {Array<string>} */
	  const list = [];
	  /** @type {string} */
	  let language;

	  for (language in languages) {
	    if (
	      own$4.call(languages, language) &&
	      typeof languages[language] === 'object'
	    ) {
	      list.push(language);
	    }
	  }

	  return list
	}

	/**
	 * @param {string|_Token|Array<string|_Token>} value
	 * @param {string} language
	 * @returns {Text|RefractorElement|Array<Text|RefractorElement>}
	 */
	function stringify(value, language) {
	  if (typeof value === 'string') {
	    return {type: 'text', value}
	  }

	  if (Array.isArray(value)) {
	    /** @type {Array<Text|RefractorElement>} */
	    const result = [];
	    let index = -1;

	    while (++index < value.length) {
	      if (
	        value[index] !== '' &&
	        value[index] !== null &&
	        value[index] !== undefined
	      ) {
	        // @ts-expect-error Assume no sub-arrays.
	        result.push(stringify(value[index], language));
	      }
	    }

	    return result
	  }

	  /** @type {_Env} */
	  const env = {
	    type: value.type,
	    content: stringify(value.content, language),
	    tag: 'span',
	    classes: ['token', value.type],
	    attributes: {},
	    language
	  };

	  if (value.alias) {
	    env.classes.push(
	      ...(typeof value.alias === 'string' ? [value.alias] : value.alias)
	    );
	  }

	  // @ts-expect-error Prism.
	  refractor.hooks.run('wrap', env);

	  // @ts-expect-error Hush, it’s fine.
	  return h(
	    env.tag + '.' + env.classes.join('.'),
	    attributes(env.attributes),
	    env.content
	  )
	}

	/**
	 * @template {unknown} T
	 * @param {T} tokens
	 * @returns {T}
	 */
	function encode(tokens) {
	  return tokens
	}

	/**
	 * @param {Record<string, string>} attrs
	 * @returns {Record<string, string>}
	 */
	function attributes(attrs) {
	  /** @type {string} */
	  let key;

	  for (key in attrs) {
	    if (own$4.call(attrs, key)) {
	      attrs[key] = parseEntities(attrs[key]);
	    }
	  }

	  return attrs
	}

	/**
	 * @typedef {import('./core.js').RefractorRoot} RefractorRoot
	 * @typedef {import('./core.js').RefractorElement} RefractorElement
	 * @typedef {import('./core.js').Text} Text
	 * @typedef {import('./core.js').Grammar} Grammar
	 * @typedef {import('./core.js').Syntax} Syntax
	 */

	refractor.register(clike);
	refractor.register(c$1);
	refractor.register(cpp);
	refractor.register(arduino);
	refractor.register(bash);
	refractor.register(csharp);
	refractor.register(markup);
	refractor.register(css);
	refractor.register(diff);
	refractor.register(go);
	refractor.register(ini);
	refractor.register(java);
	refractor.register(regex$1);
	refractor.register(javascript);
	refractor.register(json);
	refractor.register(kotlin);
	refractor.register(less);
	refractor.register(lua);
	refractor.register(makefile);
	refractor.register(yaml);
	refractor.register(markdown);
	refractor.register(objectivec);
	refractor.register(perl);
	refractor.register(markupTemplating);
	refractor.register(php);
	refractor.register(python);
	refractor.register(r);
	refractor.register(ruby);
	refractor.register(rust);
	refractor.register(sass);
	refractor.register(scss);
	refractor.register(sql);
	refractor.register(swift);
	refractor.register(typescript);
	refractor.register(basic);
	refractor.register(vbnet);

	// @ts-nocheck
	abap.displayName = 'abap';
	abap.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function abap(Prism) {
	  Prism.languages.abap = {
	    comment: /^\*.*/m,
	    string: /(`|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
	    'string-template': {
	      pattern: /([|}])(?:\\.|[^\\|{\r\n])*(?=[|{])/,
	      lookbehind: true,
	      alias: 'string'
	    },
	    /* End Of Line comments should not interfere with strings when the
	quote character occurs within them. We assume a string being highlighted
	inside an EOL comment is more acceptable than the opposite.
	*/
	    'eol-comment': {
	      pattern: /(^|\s)".*/m,
	      lookbehind: true,
	      alias: 'comment'
	    },
	    keyword: {
	      pattern:
	        /(\s|\.|^)(?:\*-INPUT|\?TO|ABAP-SOURCE|ABBREVIATED|ABS|ABSTRACT|ACCEPT|ACCEPTING|ACCESSPOLICY|ACCORDING|ACOS|ACTIVATION|ACTUAL|ADD|ADD-CORRESPONDING|ADJACENT|AFTER|ALIAS|ALIASES|ALIGN|ALL|ALLOCATE|ALPHA|ANALYSIS|ANALYZER|AND|ANY|APPEND|APPENDAGE|APPENDING|APPLICATION|ARCHIVE|AREA|ARITHMETIC|AS|ASCENDING|ASIN|ASPECT|ASSERT|ASSIGN|ASSIGNED|ASSIGNING|ASSOCIATION|ASYNCHRONOUS|AT|ATAN|ATTRIBUTES|AUTHORITY|AUTHORITY-CHECK|AVG|BACK|BACKGROUND|BACKUP|BACKWARD|BADI|BASE|BEFORE|BEGIN|BETWEEN|BIG|BINARY|BINDING|BIT|BIT-AND|BIT-NOT|BIT-OR|BIT-XOR|BLACK|BLANK|BLANKS|BLOB|BLOCK|BLOCKS|BLUE|BOUND|BOUNDARIES|BOUNDS|BOXED|BREAK-POINT|BT|BUFFER|BY|BYPASSING|BYTE|BYTE-CA|BYTE-CN|BYTE-CO|BYTE-CS|BYTE-NA|BYTE-NS|BYTE-ORDER|C|CA|CALL|CALLING|CASE|CAST|CASTING|CATCH|CEIL|CENTER|CENTERED|CHAIN|CHAIN-INPUT|CHAIN-REQUEST|CHANGE|CHANGING|CHANNELS|CHAR-TO-HEX|CHARACTER|CHARLEN|CHECK|CHECKBOX|CIRCULAR|CI_|CLASS|CLASS-CODING|CLASS-DATA|CLASS-EVENTS|CLASS-METHODS|CLASS-POOL|CLEANUP|CLEAR|CLIENT|CLOB|CLOCK|CLOSE|CN|CNT|CO|COALESCE|CODE|CODING|COLLECT|COLOR|COLUMN|COLUMNS|COL_BACKGROUND|COL_GROUP|COL_HEADING|COL_KEY|COL_NEGATIVE|COL_NORMAL|COL_POSITIVE|COL_TOTAL|COMMENT|COMMENTS|COMMIT|COMMON|COMMUNICATION|COMPARING|COMPONENT|COMPONENTS|COMPRESSION|COMPUTE|CONCAT|CONCATENATE|COND|CONDENSE|CONDITION|CONNECT|CONNECTION|CONSTANTS|CONTEXT|CONTEXTS|CONTINUE|CONTROL|CONTROLS|CONV|CONVERSION|CONVERT|COPIES|COPY|CORRESPONDING|COS|COSH|COUNT|COUNTRY|COVER|CP|CPI|CREATE|CREATING|CRITICAL|CS|CURRENCY|CURRENCY_CONVERSION|CURRENT|CURSOR|CURSOR-SELECTION|CUSTOMER|CUSTOMER-FUNCTION|DANGEROUS|DATA|DATABASE|DATAINFO|DATASET|DATE|DAYLIGHT|DBMAXLEN|DD\/MM\/YY|DD\/MM\/YYYY|DDMMYY|DEALLOCATE|DECIMALS|DECIMAL_SHIFT|DECLARATIONS|DEEP|DEFAULT|DEFERRED|DEFINE|DEFINING|DEFINITION|DELETE|DELETING|DEMAND|DEPARTMENT|DESCENDING|DESCRIBE|DESTINATION|DETAIL|DIALOG|DIRECTORY|DISCONNECT|DISPLAY|DISPLAY-MODE|DISTANCE|DISTINCT|DIV|DIVIDE|DIVIDE-CORRESPONDING|DIVISION|DO|DUMMY|DUPLICATE|DUPLICATES|DURATION|DURING|DYNAMIC|DYNPRO|E|EACH|EDIT|EDITOR-CALL|ELSE|ELSEIF|EMPTY|ENABLED|ENABLING|ENCODING|END|END-ENHANCEMENT-SECTION|END-LINES|END-OF-DEFINITION|END-OF-FILE|END-OF-PAGE|END-OF-SELECTION|ENDAT|ENDCASE|ENDCATCH|ENDCHAIN|ENDCLASS|ENDDO|ENDENHANCEMENT|ENDEXEC|ENDFOR|ENDFORM|ENDFUNCTION|ENDIAN|ENDIF|ENDING|ENDINTERFACE|ENDLOOP|ENDMETHOD|ENDMODULE|ENDON|ENDPROVIDE|ENDSELECT|ENDTRY|ENDWHILE|ENGINEERING|ENHANCEMENT|ENHANCEMENT-POINT|ENHANCEMENT-SECTION|ENHANCEMENTS|ENTRIES|ENTRY|ENVIRONMENT|EQ|EQUAL|EQUIV|ERRORMESSAGE|ERRORS|ESCAPE|ESCAPING|EVENT|EVENTS|EXACT|EXCEPT|EXCEPTION|EXCEPTION-TABLE|EXCEPTIONS|EXCLUDE|EXCLUDING|EXEC|EXECUTE|EXISTS|EXIT|EXIT-COMMAND|EXP|EXPAND|EXPANDING|EXPIRATION|EXPLICIT|EXPONENT|EXPORT|EXPORTING|EXTEND|EXTENDED|EXTENSION|EXTRACT|FAIL|FETCH|FIELD|FIELD-GROUPS|FIELD-SYMBOL|FIELD-SYMBOLS|FIELDS|FILE|FILTER|FILTER-TABLE|FILTERS|FINAL|FIND|FIRST|FIRST-LINE|FIXED-POINT|FKEQ|FKGE|FLOOR|FLUSH|FONT|FOR|FORM|FORMAT|FORWARD|FOUND|FRAC|FRAME|FRAMES|FREE|FRIENDS|FROM|FUNCTION|FUNCTION-POOL|FUNCTIONALITY|FURTHER|GAPS|GE|GENERATE|GET|GIVING|GKEQ|GKGE|GLOBAL|GRANT|GREATER|GREEN|GROUP|GROUPS|GT|HANDLE|HANDLER|HARMLESS|HASHED|HAVING|HDB|HEAD-LINES|HEADER|HEADERS|HEADING|HELP-ID|HELP-REQUEST|HIDE|HIGH|HINT|HOLD|HOTSPOT|I|ICON|ID|IDENTIFICATION|IDENTIFIER|IDS|IF|IGNORE|IGNORING|IMMEDIATELY|IMPLEMENTATION|IMPLEMENTATIONS|IMPLEMENTED|IMPLICIT|IMPORT|IMPORTING|IN|INACTIVE|INCL|INCLUDE|INCLUDES|INCLUDING|INCREMENT|INDEX|INDEX-LINE|INFOTYPES|INHERITING|INIT|INITIAL|INITIALIZATION|INNER|INOUT|INPUT|INSERT|INSTANCES|INTENSIFIED|INTERFACE|INTERFACE-POOL|INTERFACES|INTERNAL|INTERVALS|INTO|INVERSE|INVERTED-DATE|IS|ISO|ITERATOR|ITNO|JOB|JOIN|KEEP|KEEPING|KERNEL|KEY|KEYS|KEYWORDS|KIND|LANGUAGE|LAST|LATE|LAYOUT|LE|LEADING|LEAVE|LEFT|LEFT-JUSTIFIED|LEFTPLUS|LEFTSPACE|LEGACY|LENGTH|LESS|LET|LEVEL|LEVELS|LIKE|LINE|LINE-COUNT|LINE-SELECTION|LINE-SIZE|LINEFEED|LINES|LIST|LIST-PROCESSING|LISTBOX|LITTLE|LLANG|LOAD|LOAD-OF-PROGRAM|LOB|LOCAL|LOCALE|LOCATOR|LOG|LOG-POINT|LOG10|LOGFILE|LOGICAL|LONG|LOOP|LOW|LOWER|LPAD|LPI|LT|M|MAIL|MAIN|MAJOR-ID|MAPPING|MARGIN|MARK|MASK|MATCH|MATCHCODE|MAX|MAXIMUM|MEDIUM|MEMBERS|MEMORY|MESH|MESSAGE|MESSAGE-ID|MESSAGES|MESSAGING|METHOD|METHODS|MIN|MINIMUM|MINOR-ID|MM\/DD\/YY|MM\/DD\/YYYY|MMDDYY|MOD|MODE|MODIF|MODIFIER|MODIFY|MODULE|MOVE|MOVE-CORRESPONDING|MULTIPLY|MULTIPLY-CORRESPONDING|NA|NAME|NAMETAB|NATIVE|NB|NE|NESTED|NESTING|NEW|NEW-LINE|NEW-PAGE|NEW-SECTION|NEXT|NO|NO-DISPLAY|NO-EXTENSION|NO-GAP|NO-GAPS|NO-GROUPING|NO-HEADING|NO-SCROLLING|NO-SIGN|NO-TITLE|NO-TOPOFPAGE|NO-ZERO|NODE|NODES|NON-UNICODE|NON-UNIQUE|NOT|NP|NS|NULL|NUMBER|NUMOFCHAR|O|OBJECT|OBJECTS|OBLIGATORY|OCCURRENCE|OCCURRENCES|OCCURS|OF|OFF|OFFSET|OLE|ON|ONLY|OPEN|OPTION|OPTIONAL|OPTIONS|OR|ORDER|OTHER|OTHERS|OUT|OUTER|OUTPUT|OUTPUT-LENGTH|OVERFLOW|OVERLAY|PACK|PACKAGE|PAD|PADDING|PAGE|PAGES|PARAMETER|PARAMETER-TABLE|PARAMETERS|PART|PARTIALLY|PATTERN|PERCENTAGE|PERFORM|PERFORMING|PERSON|PF|PF-STATUS|PINK|PLACES|POOL|POSITION|POS_HIGH|POS_LOW|PRAGMAS|PRECOMPILED|PREFERRED|PRESERVING|PRIMARY|PRINT|PRINT-CONTROL|PRIORITY|PRIVATE|PROCEDURE|PROCESS|PROGRAM|PROPERTY|PROTECTED|PROVIDE|PUBLIC|PUSHBUTTON|PUT|QUEUE-ONLY|QUICKINFO|RADIOBUTTON|RAISE|RAISING|RANGE|RANGES|RAW|READ|READ-ONLY|READER|RECEIVE|RECEIVED|RECEIVER|RECEIVING|RED|REDEFINITION|REDUCE|REDUCED|REF|REFERENCE|REFRESH|REGEX|REJECT|REMOTE|RENAMING|REPLACE|REPLACEMENT|REPLACING|REPORT|REQUEST|REQUESTED|RESERVE|RESET|RESOLUTION|RESPECTING|RESPONSIBLE|RESULT|RESULTS|RESUMABLE|RESUME|RETRY|RETURN|RETURNCODE|RETURNING|RIGHT|RIGHT-JUSTIFIED|RIGHTPLUS|RIGHTSPACE|RISK|RMC_COMMUNICATION_FAILURE|RMC_INVALID_STATUS|RMC_SYSTEM_FAILURE|ROLE|ROLLBACK|ROUND|ROWS|RTTI|RUN|SAP|SAP-SPOOL|SAVING|SCALE_PRESERVING|SCALE_PRESERVING_SCIENTIFIC|SCAN|SCIENTIFIC|SCIENTIFIC_WITH_LEADING_ZERO|SCREEN|SCROLL|SCROLL-BOUNDARY|SCROLLING|SEARCH|SECONDARY|SECONDS|SECTION|SELECT|SELECT-OPTIONS|SELECTION|SELECTION-SCREEN|SELECTION-SET|SELECTION-SETS|SELECTION-TABLE|SELECTIONS|SELECTOR|SEND|SEPARATE|SEPARATED|SET|SHARED|SHIFT|SHORT|SHORTDUMP-ID|SIGN|SIGN_AS_POSTFIX|SIMPLE|SIN|SINGLE|SINH|SIZE|SKIP|SKIPPING|SMART|SOME|SORT|SORTABLE|SORTED|SOURCE|SPACE|SPECIFIED|SPLIT|SPOOL|SPOTS|SQL|SQLSCRIPT|SQRT|STABLE|STAMP|STANDARD|START-OF-SELECTION|STARTING|STATE|STATEMENT|STATEMENTS|STATIC|STATICS|STATUSINFO|STEP-LOOP|STOP|STRLEN|STRUCTURE|STRUCTURES|STYLE|SUBKEY|SUBMATCHES|SUBMIT|SUBROUTINE|SUBSCREEN|SUBSTRING|SUBTRACT|SUBTRACT-CORRESPONDING|SUFFIX|SUM|SUMMARY|SUMMING|SUPPLIED|SUPPLY|SUPPRESS|SWITCH|SWITCHSTATES|SYMBOL|SYNCPOINTS|SYNTAX|SYNTAX-CHECK|SYNTAX-TRACE|SYSTEM-CALL|SYSTEM-EXCEPTIONS|SYSTEM-EXIT|TAB|TABBED|TABLE|TABLES|TABLEVIEW|TABSTRIP|TAN|TANH|TARGET|TASK|TASKS|TEST|TESTING|TEXT|TEXTPOOL|THEN|THROW|TIME|TIMES|TIMESTAMP|TIMEZONE|TITLE|TITLE-LINES|TITLEBAR|TO|TOKENIZATION|TOKENS|TOP-LINES|TOP-OF-PAGE|TRACE-FILE|TRACE-TABLE|TRAILING|TRANSACTION|TRANSFER|TRANSFORMATION|TRANSLATE|TRANSPORTING|TRMAC|TRUNC|TRUNCATE|TRUNCATION|TRY|TYPE|TYPE-POOL|TYPE-POOLS|TYPES|ULINE|UNASSIGN|UNDER|UNICODE|UNION|UNIQUE|UNIT|UNIT_CONVERSION|UNIX|UNPACK|UNTIL|UNWIND|UP|UPDATE|UPPER|USER|USER-COMMAND|USING|UTF-8|VALID|VALUE|VALUE-REQUEST|VALUES|VARY|VARYING|VERIFICATION-MESSAGE|VERSION|VIA|VIEW|VISIBLE|WAIT|WARNING|WHEN|WHENEVER|WHERE|WHILE|WIDTH|WINDOW|WINDOWS|WITH|WITH-HEADING|WITH-TITLE|WITHOUT|WORD|WORK|WRITE|WRITER|X|XML|XOR|XSD|XSTRLEN|YELLOW|YES|YYMMDD|Z|ZERO|ZONE)(?![\w-])/i,
	      lookbehind: true
	    },
	    /* Numbers can be only integers. Decimal or Hex appear only as strings */
	    number: /\b\d+\b/,
	    /* Operators must always be surrounded by whitespace, they cannot be put
	adjacent to operands.
	*/
	    operator: {
	      pattern: /(\s)(?:\*\*?|<[=>]?|>=?|\?=|[-+\/=])(?=\s)/,
	      lookbehind: true
	    },
	    'string-operator': {
	      pattern: /(\s)&&?(?=\s)/,
	      lookbehind: true,
	      /* The official editor highlights */
	      alias: 'keyword'
	    },
	    'token-operator': [
	      {
	        /* Special operators used to access structure components, class methods/attributes, etc. */
	        pattern: /(\w)(?:->?|=>|[~|{}])(?=\w)/,
	        lookbehind: true,
	        alias: 'punctuation'
	      },
	      {
	        /* Special tokens used do delimit string templates */
	        pattern: /[|{}]/,
	        alias: 'punctuation'
	      }
	    ],
	    punctuation: /[,.:()]/
	  };
	}

	// @ts-nocheck
	abnf.displayName = 'abnf';
	abnf.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function abnf(Prism) {
	(function (Prism) {
	    var coreRules =
	      '(?:ALPHA|BIT|CHAR|CR|CRLF|CTL|DIGIT|DQUOTE|HEXDIG|HTAB|LF|LWSP|OCTET|SP|VCHAR|WSP)';
	    Prism.languages.abnf = {
	      comment: /;.*/,
	      string: {
	        pattern: /(?:%[is])?"[^"\n\r]*"/,
	        greedy: true,
	        inside: {
	          punctuation: /^%[is]/
	        }
	      },
	      range: {
	        pattern: /%(?:b[01]+-[01]+|d\d+-\d+|x[A-F\d]+-[A-F\d]+)/i,
	        alias: 'number'
	      },
	      terminal: {
	        pattern:
	          /%(?:b[01]+(?:\.[01]+)*|d\d+(?:\.\d+)*|x[A-F\d]+(?:\.[A-F\d]+)*)/i,
	        alias: 'number'
	      },
	      repetition: {
	        pattern: /(^|[^\w-])(?:\d*\*\d*|\d+)/,
	        lookbehind: true,
	        alias: 'operator'
	      },
	      definition: {
	        pattern: /(^[ \t]*)(?:[a-z][\w-]*|<[^<>\r\n]*>)(?=\s*=)/m,
	        lookbehind: true,
	        alias: 'keyword',
	        inside: {
	          punctuation: /<|>/
	        }
	      },
	      'core-rule': {
	        pattern: RegExp(
	          '(?:(^|[^<\\w-])' + coreRules + '|<' + coreRules + '>)(?![\\w-])',
	          'i'
	        ),
	        lookbehind: true,
	        alias: ['rule', 'constant'],
	        inside: {
	          punctuation: /<|>/
	        }
	      },
	      rule: {
	        pattern: /(^|[^<\w-])[a-z][\w-]*|<[^<>\r\n]*>/i,
	        lookbehind: true,
	        inside: {
	          punctuation: /<|>/
	        }
	      },
	      operator: /=\/?|\//,
	      punctuation: /[()\[\]]/
	    };
	  })(Prism);
	}

	// @ts-nocheck
	actionscript.displayName = 'actionscript';
	actionscript.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function actionscript(Prism) {
	  Prism.register(javascript);
	  Prism.languages.actionscript = Prism.languages.extend('javascript', {
	    keyword:
	      /\b(?:as|break|case|catch|class|const|default|delete|do|dynamic|each|else|extends|final|finally|for|function|get|if|implements|import|in|include|instanceof|interface|internal|is|namespace|native|new|null|override|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|use|var|void|while|with)\b/,
	    operator: /\+\+|--|(?:[+\-*\/%^]|&&?|\|\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/
	  });
	  Prism.languages.actionscript['class-name'].alias = 'function';

	  // doesn't work with AS because AS is too complex
	  delete Prism.languages.actionscript['parameter'];
	  delete Prism.languages.actionscript['literal-property'];
	  if (Prism.languages.markup) {
	    Prism.languages.insertBefore('actionscript', 'string', {
	      xml: {
	        pattern:
	          /(^|[^.])<\/?\w+(?:\s+[^\s>\/=]+=("|')(?:\\[\s\S]|(?!\2)[^\\])*\2)*\s*\/?>/,
	        lookbehind: true,
	        inside: Prism.languages.markup
	      }
	    });
	  }
	}

	// @ts-nocheck
	ada.displayName = 'ada';
	ada.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function ada(Prism) {
	  Prism.languages.ada = {
	    comment: /--.*/,
	    string: /"(?:""|[^"\r\f\n])*"/,
	    number: [
	      {
	        pattern:
	          /\b\d(?:_?\d)*#[\dA-F](?:_?[\dA-F])*(?:\.[\dA-F](?:_?[\dA-F])*)?#(?:E[+-]?\d(?:_?\d)*)?/i
	      },
	      {
	        pattern: /\b\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:E[+-]?\d(?:_?\d)*)?\b/i
	      }
	    ],
	    attribute: {
	      pattern: /\b'\w+/,
	      alias: 'attr-name'
	    },
	    keyword:
	      /\b(?:abort|abs|abstract|accept|access|aliased|all|and|array|at|begin|body|case|constant|declare|delay|delta|digits|do|else|elsif|end|entry|exception|exit|for|function|generic|goto|if|in|interface|is|limited|loop|mod|new|not|null|of|or|others|out|overriding|package|pragma|private|procedure|protected|raise|range|record|rem|renames|requeue|return|reverse|select|separate|some|subtype|synchronized|tagged|task|terminate|then|type|until|use|when|while|with|xor)\b/i,
	    boolean: /\b(?:false|true)\b/i,
	    operator: /<[=>]?|>=?|=>?|:=|\/=?|\*\*?|[&+-]/,
	    punctuation: /\.\.?|[,;():]/,
	    char: /'.'/,
	    variable: /\b[a-z](?:\w)*\b/i
	  };
	}

	// @ts-nocheck
	agda.displayName = 'agda';
	agda.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function agda(Prism) {
	(function (Prism) {
	    Prism.languages.agda = {
	      comment: /\{-[\s\S]*?(?:-\}|$)|--.*/,
	      string: {
	        pattern: /"(?:\\(?:\r\n|[\s\S])|[^\\\r\n"])*"/,
	        greedy: true
	      },
	      punctuation: /[(){}⦃⦄.;@]/,
	      'class-name': {
	        pattern: /((?:data|record) +)\S+/,
	        lookbehind: true
	      },
	      function: {
	        pattern: /(^[ \t]*)(?!\s)[^:\r\n]+(?=:)/m,
	        lookbehind: true
	      },
	      operator: {
	        pattern: /(^\s*|\s)(?:[=|:∀→λ\\?_]|->)(?=\s)/,
	        lookbehind: true
	      },
	      keyword:
	        /\b(?:Set|abstract|constructor|data|eta-equality|field|forall|hiding|import|in|inductive|infix|infixl|infixr|instance|let|macro|module|mutual|no-eta-equality|open|overlap|pattern|postulate|primitive|private|public|quote|quoteContext|quoteGoal|quoteTerm|record|renaming|rewrite|syntax|tactic|unquote|unquoteDecl|unquoteDef|using|variable|where|with)\b/
	    };
	  })(Prism);
	}

	// @ts-nocheck
	al.displayName = 'al';
	al.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function al(Prism) {
	  // based on https://github.com/microsoft/AL/blob/master/grammar/alsyntax.tmlanguage

	  Prism.languages.al = {
	    comment: /\/\/.*|\/\*[\s\S]*?\*\//,
	    string: {
	      pattern: /'(?:''|[^'\r\n])*'(?!')|"(?:""|[^"\r\n])*"(?!")/,
	      greedy: true
	    },
	    function: {
	      pattern:
	        /(\b(?:event|procedure|trigger)\s+|(?:^|[^.])\.\s*)[a-z_]\w*(?=\s*\()/i,
	      lookbehind: true
	    },
	    keyword: [
	      // keywords
	      /\b(?:array|asserterror|begin|break|case|do|downto|else|end|event|exit|for|foreach|function|if|implements|in|indataset|interface|internal|local|of|procedure|program|protected|repeat|runonclient|securityfiltering|suppressdispose|temporary|then|to|trigger|until|var|while|with|withevents)\b/i,
	      // objects and metadata that are used like keywords
	      /\b(?:action|actions|addafter|addbefore|addfirst|addlast|area|assembly|chartpart|codeunit|column|controladdin|cuegroup|customizes|dataitem|dataset|dotnet|elements|enum|enumextension|extends|field|fieldattribute|fieldelement|fieldgroup|fieldgroups|fields|filter|fixed|grid|group|key|keys|label|labels|layout|modify|moveafter|movebefore|movefirst|movelast|page|pagecustomization|pageextension|part|profile|query|repeater|report|requestpage|schema|separator|systempart|table|tableelement|tableextension|textattribute|textelement|type|usercontrol|value|xmlport)\b/i
	    ],
	    number:
	      /\b(?:0x[\da-f]+|(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?)(?:F|LL?|U(?:LL?)?)?\b/i,
	    boolean: /\b(?:false|true)\b/i,
	    variable: /\b(?:Curr(?:FieldNo|Page|Report)|x?Rec|RequestOptionsPage)\b/,
	    'class-name':
	      /\b(?:automation|biginteger|bigtext|blob|boolean|byte|char|clienttype|code|completiontriggererrorlevel|connectiontype|database|dataclassification|datascope|date|dateformula|datetime|decimal|defaultlayout|dialog|dictionary|dotnetassembly|dotnettypedeclaration|duration|errorinfo|errortype|executioncontext|executionmode|fieldclass|fieldref|fieldtype|file|filterpagebuilder|guid|httpclient|httpcontent|httpheaders|httprequestmessage|httpresponsemessage|instream|integer|joker|jsonarray|jsonobject|jsontoken|jsonvalue|keyref|list|moduledependencyinfo|moduleinfo|none|notification|notificationscope|objecttype|option|outstream|pageresult|record|recordid|recordref|reportformat|securityfilter|sessionsettings|tableconnectiontype|tablefilter|testaction|testfield|testfilterfield|testpage|testpermissions|testrequestpage|text|textbuilder|textconst|textencoding|time|transactionmodel|transactiontype|variant|verbosity|version|view|views|webserviceactioncontext|webserviceactionresultcode|xmlattribute|xmlattributecollection|xmlcdata|xmlcomment|xmldeclaration|xmldocument|xmldocumenttype|xmlelement|xmlnamespacemanager|xmlnametable|xmlnode|xmlnodelist|xmlprocessinginstruction|xmlreadoptions|xmltext|xmlwriteoptions)\b/i,
	    operator: /\.\.|:[=:]|[-+*/]=?|<>|[<>]=?|=|\b(?:and|div|mod|not|or|xor)\b/i,
	    punctuation: /[()\[\]{}:.;,]/
	  };
	}

	// @ts-nocheck
	antlr4.displayName = 'antlr4';
	antlr4.aliases = ['g4'];

	/** @type {import('../core.js').Syntax} */
	function antlr4(Prism) {
	  Prism.languages.antlr4 = {
	    comment: /\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,
	    string: {
	      pattern: /'(?:\\.|[^\\'\r\n])*'/,
	      greedy: true
	    },
	    'character-class': {
	      pattern: /\[(?:\\.|[^\\\]\r\n])*\]/,
	      greedy: true,
	      alias: 'regex',
	      inside: {
	        range: {
	          pattern: /([^[]|(?:^|[^\\])(?:\\\\)*\\\[)-(?!\])/,
	          lookbehind: true,
	          alias: 'punctuation'
	        },
	        escape:
	          /\\(?:u(?:[a-fA-F\d]{4}|\{[a-fA-F\d]+\})|[pP]\{[=\w-]+\}|[^\r\nupP])/,
	        punctuation: /[\[\]]/
	      }
	    },
	    action: {
	      pattern: /\{(?:[^{}]|\{(?:[^{}]|\{(?:[^{}]|\{[^{}]*\})*\})*\})*\}/,
	      greedy: true,
	      inside: {
	        content: {
	          // this might be C, C++, Python, Java, C#, or any other language ANTLR4 compiles to
	          pattern: /(\{)[\s\S]+(?=\})/,
	          lookbehind: true
	        },
	        punctuation: /[{}]/
	      }
	    },
	    command: {
	      pattern:
	        /(->\s*(?!\s))(?:\s*(?:,\s*)?\b[a-z]\w*(?:\s*\([^()\r\n]*\))?)+(?=\s*;)/i,
	      lookbehind: true,
	      inside: {
	        function: /\b\w+(?=\s*(?:[,(]|$))/,
	        punctuation: /[,()]/
	      }
	    },
	    annotation: {
	      pattern: /@\w+(?:::\w+)*/,
	      alias: 'keyword'
	    },
	    label: {
	      pattern: /#[ \t]*\w+/,
	      alias: 'punctuation'
	    },
	    keyword:
	      /\b(?:catch|channels|finally|fragment|grammar|import|lexer|locals|mode|options|parser|returns|throws|tokens)\b/,
	    definition: [
	      {
	        pattern: /\b[a-z]\w*(?=\s*:)/,
	        alias: ['rule', 'class-name']
	      },
	      {
	        pattern: /\b[A-Z]\w*(?=\s*:)/,
	        alias: ['token', 'constant']
	      }
	    ],
	    constant: /\b[A-Z][A-Z_]*\b/,
	    operator: /\.\.|->|[|~]|[*+?]\??/,
	    punctuation: /[;:()=]/
	  };
	  Prism.languages.g4 = Prism.languages.antlr4;
	}

	// @ts-nocheck
	apacheconf.displayName = 'apacheconf';
	apacheconf.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function apacheconf(Prism) {
	  Prism.languages.apacheconf = {
	    comment: /#.*/,
	    'directive-inline': {
	      pattern:
	        /(^[\t ]*)\b(?:AcceptFilter|AcceptPathInfo|AccessFileName|Action|Add(?:Alt|AltByEncoding|AltByType|Charset|DefaultCharset|Description|Encoding|Handler|Icon|IconByEncoding|IconByType|InputFilter|Language|ModuleInfo|OutputFilter|OutputFilterByType|Type)|Alias|AliasMatch|Allow(?:CONNECT|EncodedSlashes|Methods|Override|OverrideList)?|Anonymous(?:_LogEmail|_MustGiveEmail|_NoUserID|_VerifyEmail)?|AsyncRequestWorkerFactor|Auth(?:BasicAuthoritative|BasicFake|BasicProvider|BasicUseDigestAlgorithm|DBDUserPWQuery|DBDUserRealmQuery|DBMGroupFile|DBMType|DBMUserFile|Digest(?:Algorithm|Domain|NonceLifetime|Provider|Qop|ShmemSize)|Form(?:Authoritative|Body|DisableNoStore|FakeBasicAuth|Location|LoginRequiredLocation|LoginSuccessLocation|LogoutLocation|Method|Mimetype|Password|Provider|SitePassphrase|Size|Username)|GroupFile|LDAP(?:AuthorizePrefix|BindAuthoritative|BindDN|BindPassword|CharsetConfig|CompareAsUser|CompareDNOnServer|DereferenceAliases|GroupAttribute|GroupAttributeIsDN|InitialBindAsUser|InitialBindPattern|MaxSubGroupDepth|RemoteUserAttribute|RemoteUserIsDN|SearchAsUser|SubGroupAttribute|SubGroupClass|Url)|Merging|Name|nCache(?:Context|Enable|ProvideFor|SOCache|Timeout)|nzFcgiCheckAuthnProvider|nzFcgiDefineProvider|Type|UserFile|zDBDLoginToReferer|zDBDQuery|zDBDRedirectQuery|zDBMType|zSendForbiddenOnFailure)|BalancerGrowth|BalancerInherit|BalancerMember|BalancerPersist|BrowserMatch|BrowserMatchNoCase|BufferedLogs|BufferSize|Cache(?:DefaultExpire|DetailHeader|DirLength|DirLevels|Disable|Enable|File|Header|IgnoreCacheControl|IgnoreHeaders|IgnoreNoLastMod|IgnoreQueryString|IgnoreURLSessionIdentifiers|KeyBaseURL|LastModifiedFactor|Lock|LockMaxAge|LockPath|MaxExpire|MaxFileSize|MinExpire|MinFileSize|NegotiatedDocs|QuickHandler|ReadSize|ReadTime|Root|Socache(?:MaxSize|MaxTime|MinTime|ReadSize|ReadTime)?|StaleOnError|StoreExpired|StoreNoStore|StorePrivate)|CGIDScriptTimeout|CGIMapExtension|CharsetDefault|CharsetOptions|CharsetSourceEnc|CheckCaseOnly|CheckSpelling|ChrootDir|ContentDigest|CookieDomain|CookieExpires|CookieName|CookieStyle|CookieTracking|CoreDumpDirectory|CustomLog|Dav|DavDepthInfinity|DavGenericLockDB|DavLockDB|DavMinTimeout|DBDExptime|DBDInitSQL|DBDKeep|DBDMax|DBDMin|DBDParams|DBDPersist|DBDPrepareSQL|DBDriver|DefaultIcon|DefaultLanguage|DefaultRuntimeDir|DefaultType|Define|Deflate(?:BufferSize|CompressionLevel|FilterNote|InflateLimitRequestBody|InflateRatio(?:Burst|Limit)|MemLevel|WindowSize)|Deny|DirectoryCheckHandler|DirectoryIndex|DirectoryIndexRedirect|DirectorySlash|DocumentRoot|DTracePrivileges|DumpIOInput|DumpIOOutput|EnableExceptionHook|EnableMMAP|EnableSendfile|Error|ErrorDocument|ErrorLog|ErrorLogFormat|Example|ExpiresActive|ExpiresByType|ExpiresDefault|ExtendedStatus|ExtFilterDefine|ExtFilterOptions|FallbackResource|FileETag|FilterChain|FilterDeclare|FilterProtocol|FilterProvider|FilterTrace|ForceLanguagePriority|ForceType|ForensicLog|GprofDir|GracefulShutdownTimeout|Group|Header|HeaderName|Heartbeat(?:Address|Listen|MaxServers|Storage)|HostnameLookups|IdentityCheck|IdentityCheckTimeout|ImapBase|ImapDefault|ImapMenu|Include|IncludeOptional|Index(?:HeadInsert|Ignore|IgnoreReset|Options|OrderDefault|StyleSheet)|InputSed|ISAPI(?:AppendLogToErrors|AppendLogToQuery|CacheFile|FakeAsync|LogNotSupported|ReadAheadBuffer)|KeepAlive|KeepAliveTimeout|KeptBodySize|LanguagePriority|LDAP(?:CacheEntries|CacheTTL|ConnectionPoolTTL|ConnectionTimeout|LibraryDebug|OpCacheEntries|OpCacheTTL|ReferralHopLimit|Referrals|Retries|RetryDelay|SharedCacheFile|SharedCacheSize|Timeout|TrustedClientCert|TrustedGlobalCert|TrustedMode|VerifyServerCert)|Limit(?:InternalRecursion|Request(?:Body|Fields|FieldSize|Line)|XMLRequestBody)|Listen|ListenBackLog|LoadFile|LoadModule|LogFormat|LogLevel|LogMessage|LuaAuthzProvider|LuaCodeCache|Lua(?:Hook(?:AccessChecker|AuthChecker|CheckUserID|Fixups|InsertFilter|Log|MapToStorage|TranslateName|TypeChecker)|Inherit|InputFilter|MapHandler|OutputFilter|PackageCPath|PackagePath|QuickHandler|Root|Scope)|Max(?:ConnectionsPerChild|KeepAliveRequests|MemFree|RangeOverlaps|RangeReversals|Ranges|RequestWorkers|SpareServers|SpareThreads|Threads)|MergeTrailers|MetaDir|MetaFiles|MetaSuffix|MimeMagicFile|MinSpareServers|MinSpareThreads|MMapFile|ModemStandard|ModMimeUsePathInfo|MultiviewsMatch|Mutex|NameVirtualHost|NoProxy|NWSSLTrustedCerts|NWSSLUpgradeable|Options|Order|OutputSed|PassEnv|PidFile|PrivilegesMode|Protocol|ProtocolEcho|Proxy(?:AddHeaders|BadHeader|Block|Domain|ErrorOverride|ExpressDBMFile|ExpressDBMType|ExpressEnable|FtpDirCharset|FtpEscapeWildcards|FtpListOnWildcard|HTML(?:BufSize|CharsetOut|DocType|Enable|Events|Extended|Fixups|Interp|Links|Meta|StripComments|URLMap)|IOBufferSize|MaxForwards|Pass(?:Inherit|InterpolateEnv|Match|Reverse|ReverseCookieDomain|ReverseCookiePath)?|PreserveHost|ReceiveBufferSize|Remote|RemoteMatch|Requests|SCGIInternalRedirect|SCGISendfile|Set|SourceAddress|Status|Timeout|Via)|ReadmeName|ReceiveBufferSize|Redirect|RedirectMatch|RedirectPermanent|RedirectTemp|ReflectorHeader|RemoteIP(?:Header|InternalProxy|InternalProxyList|ProxiesHeader|TrustedProxy|TrustedProxyList)|RemoveCharset|RemoveEncoding|RemoveHandler|RemoveInputFilter|RemoveLanguage|RemoveOutputFilter|RemoveType|RequestHeader|RequestReadTimeout|Require|Rewrite(?:Base|Cond|Engine|Map|Options|Rule)|RLimitCPU|RLimitMEM|RLimitNPROC|Satisfy|ScoreBoardFile|Script(?:Alias|AliasMatch|InterpreterSource|Log|LogBuffer|LogLength|Sock)?|SecureListen|SeeRequestTail|SendBufferSize|Server(?:Admin|Alias|Limit|Name|Path|Root|Signature|Tokens)|Session(?:Cookie(?:Name|Name2|Remove)|Crypto(?:Cipher|Driver|Passphrase|PassphraseFile)|DBD(?:CookieName|CookieName2|CookieRemove|DeleteLabel|InsertLabel|PerUser|SelectLabel|UpdateLabel)|Env|Exclude|Header|Include|MaxAge)?|SetEnv|SetEnvIf|SetEnvIfExpr|SetEnvIfNoCase|SetHandler|SetInputFilter|SetOutputFilter|SSIEndTag|SSIErrorMsg|SSIETag|SSILastModified|SSILegacyExprParser|SSIStartTag|SSITimeFormat|SSIUndefinedEcho|SSL(?:CACertificateFile|CACertificatePath|CADNRequestFile|CADNRequestPath|CARevocationCheck|CARevocationFile|CARevocationPath|CertificateChainFile|CertificateFile|CertificateKeyFile|CipherSuite|Compression|CryptoDevice|Engine|FIPS|HonorCipherOrder|InsecureRenegotiation|OCSP(?:DefaultResponder|Enable|OverrideResponder|ResponderTimeout|ResponseMaxAge|ResponseTimeSkew|UseRequestNonce)|OpenSSLConfCmd|Options|PassPhraseDialog|Protocol|Proxy(?:CACertificateFile|CACertificatePath|CARevocation(?:Check|File|Path)|CheckPeer(?:CN|Expire|Name)|CipherSuite|Engine|MachineCertificate(?:ChainFile|File|Path)|Protocol|Verify|VerifyDepth)|RandomSeed|RenegBufferSize|Require|RequireSSL|Session(?:Cache|CacheTimeout|TicketKeyFile|Tickets)|SRPUnknownUserSeed|SRPVerifierFile|Stapling(?:Cache|ErrorCacheTimeout|FakeTryLater|ForceURL|ResponderTimeout|ResponseMaxAge|ResponseTimeSkew|ReturnResponderErrors|StandardCacheTimeout)|StrictSNIVHostCheck|UserName|UseStapling|VerifyClient|VerifyDepth)|StartServers|StartThreads|Substitute|Suexec|SuexecUserGroup|ThreadLimit|ThreadsPerChild|ThreadStackSize|TimeOut|TraceEnable|TransferLog|TypesConfig|UnDefine|UndefMacro|UnsetEnv|Use|UseCanonicalName|UseCanonicalPhysicalPort|User|UserDir|VHostCGIMode|VHostCGIPrivs|VHostGroup|VHostPrivs|VHostSecure|VHostUser|Virtual(?:DocumentRoot|ScriptAlias)(?:IP)?|WatchdogInterval|XBitHack|xml2EncAlias|xml2EncDefault|xml2StartParse)\b/im,
	      lookbehind: true,
	      alias: 'property'
	    },
	    'directive-block': {
	      pattern:
	        /<\/?\b(?:Auth[nz]ProviderAlias|Directory|DirectoryMatch|Else|ElseIf|Files|FilesMatch|If|IfDefine|IfModule|IfVersion|Limit|LimitExcept|Location|LocationMatch|Macro|Proxy|Require(?:All|Any|None)|VirtualHost)\b.*>/i,
	      inside: {
	        'directive-block': {
	          pattern: /^<\/?\w+/,
	          inside: {
	            punctuation: /^<\/?/
	          },
	          alias: 'tag'
	        },
	        'directive-block-parameter': {
	          pattern: /.*[^>]/,
	          inside: {
	            punctuation: /:/,
	            string: {
	              pattern: /("|').*\1/,
	              inside: {
	                variable: /[$%]\{?(?:\w\.?[-+:]?)+\}?/
	              }
	            }
	          },
	          alias: 'attr-value'
	        },
	        punctuation: />/
	      },
	      alias: 'tag'
	    },
	    'directive-flags': {
	      pattern: /\[(?:[\w=],?)+\]/,
	      alias: 'keyword'
	    },
	    string: {
	      pattern: /("|').*\1/,
	      inside: {
	        variable: /[$%]\{?(?:\w\.?[-+:]?)+\}?/
	      }
	    },
	    variable: /[$%]\{?(?:\w\.?[-+:]?)+\}?/,
	    regex: /\^?.*\$|\^.*\$?/
	  };
	}

	// @ts-nocheck
	apex.displayName = 'apex';
	apex.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function apex(Prism) {
	  Prism.register(clike);
	  Prism.register(sql)
	  ;(function (Prism) {
	    var keywords =
	      /\b(?:(?:after|before)(?=\s+[a-z])|abstract|activate|and|any|array|as|asc|autonomous|begin|bigdecimal|blob|boolean|break|bulk|by|byte|case|cast|catch|char|class|collect|commit|const|continue|currency|date|datetime|decimal|default|delete|desc|do|double|else|end|enum|exception|exit|export|extends|final|finally|float|for|from|get(?=\s*[{};])|global|goto|group|having|hint|if|implements|import|in|inner|insert|instanceof|int|integer|interface|into|join|like|limit|list|long|loop|map|merge|new|not|null|nulls|number|object|of|on|or|outer|override|package|parallel|pragma|private|protected|public|retrieve|return|rollback|select|set|short|sObject|sort|static|string|super|switch|synchronized|system|testmethod|then|this|throw|time|transaction|transient|trigger|try|undelete|update|upsert|using|virtual|void|webservice|when|where|while|(?:inherited|with|without)\s+sharing)\b/i;
	    var className =
	      /\b(?:(?=[a-z_]\w*\s*[<\[])|(?!<keyword>))[A-Z_]\w*(?:\s*\.\s*[A-Z_]\w*)*\b(?:\s*(?:\[\s*\]|<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>))*/.source.replace(
	        /<keyword>/g,
	        function () {
	          return keywords.source
	        }
	      );
	    /** @param {string} pattern */
	    function insertClassName(pattern) {
	      return RegExp(
	        pattern.replace(/<CLASS-NAME>/g, function () {
	          return className
	        }),
	        'i'
	      )
	    }
	    var classNameInside = {
	      keyword: keywords,
	      punctuation: /[()\[\]{};,:.<>]/
	    };
	    Prism.languages.apex = {
	      comment: Prism.languages.clike.comment,
	      string: Prism.languages.clike.string,
	      sql: {
	        pattern: /((?:[=,({:]|\breturn)\s*)\[[^\[\]]*\]/i,
	        lookbehind: true,
	        greedy: true,
	        alias: 'language-sql',
	        inside: Prism.languages.sql
	      },
	      annotation: {
	        pattern: /@\w+\b/,
	        alias: 'punctuation'
	      },
	      'class-name': [
	        {
	          pattern: insertClassName(
	            /(\b(?:class|enum|extends|implements|instanceof|interface|new|trigger\s+\w+\s+on)\s+)<CLASS-NAME>/
	              .source
	          ),
	          lookbehind: true,
	          inside: classNameInside
	        },
	        {
	          // cast
	          pattern: insertClassName(
	            /(\(\s*)<CLASS-NAME>(?=\s*\)\s*[\w(])/.source
	          ),
	          lookbehind: true,
	          inside: classNameInside
	        },
	        {
	          // variable/parameter declaration and return types
	          pattern: insertClassName(/<CLASS-NAME>(?=\s*\w+\s*[;=,(){:])/.source),
	          inside: classNameInside
	        }
	      ],
	      trigger: {
	        pattern: /(\btrigger\s+)\w+\b/i,
	        lookbehind: true,
	        alias: 'class-name'
	      },
	      keyword: keywords,
	      function: /\b[a-z_]\w*(?=\s*\()/i,
	      boolean: /\b(?:false|true)\b/i,
	      number: /(?:\B\.\d+|\b\d+(?:\.\d+|L)?)\b/i,
	      operator:
	        /[!=](?:==?)?|\?\.?|&&|\|\||--|\+\+|[-+*/^&|]=?|:|<<?=?|>{1,3}=?/,
	      punctuation: /[()\[\]{};,.]/
	    };
	  })(Prism);
	}

	// @ts-nocheck
	apl.displayName = 'apl';
	apl.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function apl(Prism) {
	  Prism.languages.apl = {
	    comment: /(?:⍝|#[! ]).*$/m,
	    string: {
	      pattern: /'(?:[^'\r\n]|'')*'/,
	      greedy: true
	    },
	    number:
	      /¯?(?:\d*\.?\b\d+(?:e[+¯]?\d+)?|¯|∞)(?:j¯?(?:(?:\d+(?:\.\d+)?|\.\d+)(?:e[+¯]?\d+)?|¯|∞))?/i,
	    statement: /:[A-Z][a-z][A-Za-z]*\b/,
	    'system-function': {
	      pattern: /⎕[A-Z]+/i,
	      alias: 'function'
	    },
	    constant: /[⍬⌾#⎕⍞]/,
	    function: /[-+×÷⌈⌊∣|⍳⍸?*⍟○!⌹<≤=>≥≠≡≢∊⍷∪∩~∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⊆⊇⌷⍋⍒⊤⊥⍕⍎⊣⊢⍁⍂≈⍯↗¤→]/,
	    'monadic-operator': {
	      pattern: /[\\\/⌿⍀¨⍨⌶&∥]/,
	      alias: 'operator'
	    },
	    'dyadic-operator': {
	      pattern: /[.⍣⍠⍤∘⌸@⌺⍥]/,
	      alias: 'operator'
	    },
	    assignment: {
	      pattern: /←/,
	      alias: 'keyword'
	    },
	    punctuation: /[\[;\]()◇⋄]/,
	    dfn: {
	      pattern: /[{}⍺⍵⍶⍹∇⍫:]/,
	      alias: 'builtin'
	    }
	  };
	}

	// @ts-nocheck
	applescript.displayName = 'applescript';
	applescript.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function applescript(Prism) {
	  Prism.languages.applescript = {
	    comment: [
	      // Allow one level of nesting
	      /\(\*(?:\(\*(?:[^*]|\*(?!\)))*\*\)|(?!\(\*)[\s\S])*?\*\)/,
	      /--.+/,
	      /#.+/
	    ],
	    string: /"(?:\\.|[^"\\\r\n])*"/,
	    number: /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e-?\d+)?\b/i,
	    operator: [
	      /[&=≠≤≥*+\-\/÷^]|[<>]=?/,
	      /\b(?:(?:begin|end|start)s? with|(?:contains?|(?:does not|doesn't) contain)|(?:is|isn't|is not) (?:contained by|in)|(?:(?:is|isn't|is not) )?(?:greater|less) than(?: or equal)?(?: to)?|(?:comes|(?:does not|doesn't) come) (?:after|before)|(?:is|isn't|is not) equal(?: to)?|(?:(?:does not|doesn't) equal|equal to|equals|is not|isn't)|(?:a )?(?:ref(?: to)?|reference to)|(?:and|as|div|mod|not|or))\b/
	    ],
	    keyword:
	      /\b(?:about|above|after|against|apart from|around|aside from|at|back|before|beginning|behind|below|beneath|beside|between|but|by|considering|continue|copy|does|eighth|else|end|equal|error|every|exit|false|fifth|first|for|fourth|from|front|get|given|global|if|ignoring|in|instead of|into|is|it|its|last|local|me|middle|my|ninth|of|on|onto|out of|over|prop|property|put|repeat|return|returning|second|set|seventh|since|sixth|some|tell|tenth|that|the|then|third|through|thru|timeout|times|to|transaction|true|try|until|where|while|whose|with|without)\b/,
	    'class-name':
	      /\b(?:POSIX file|RGB color|alias|application|boolean|centimeters|centimetres|class|constant|cubic centimeters|cubic centimetres|cubic feet|cubic inches|cubic meters|cubic metres|cubic yards|date|degrees Celsius|degrees Fahrenheit|degrees Kelvin|feet|file|gallons|grams|inches|integer|kilograms|kilometers|kilometres|list|liters|litres|meters|metres|miles|number|ounces|pounds|quarts|real|record|reference|script|square feet|square kilometers|square kilometres|square meters|square metres|square miles|square yards|text|yards)\b/,
	    punctuation: /[{}():,¬«»《》]/
	  };
	}

	// @ts-nocheck
	aql.displayName = 'aql';
	aql.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function aql(Prism) {
	  Prism.languages.aql = {
	    comment: /\/\/.*|\/\*[\s\S]*?\*\//,
	    property: {
	      pattern:
	        /([{,]\s*)(?:(?!\d)\w+|(["'´`])(?:(?!\2)[^\\\r\n]|\\.)*\2)(?=\s*:)/,
	      lookbehind: true,
	      greedy: true
	    },
	    string: {
	      pattern: /(["'])(?:(?!\1)[^\\\r\n]|\\.)*\1/,
	      greedy: true
	    },
	    identifier: {
	      pattern: /([´`])(?:(?!\1)[^\\\r\n]|\\.)*\1/,
	      greedy: true
	    },
	    variable: /@@?\w+/,
	    keyword: [
	      {
	        pattern: /(\bWITH\s+)COUNT(?=\s+INTO\b)/i,
	        lookbehind: true
	      },
	      /\b(?:AGGREGATE|ALL|AND|ANY|ASC|COLLECT|DESC|DISTINCT|FILTER|FOR|GRAPH|IN|INBOUND|INSERT|INTO|K_PATHS|K_SHORTEST_PATHS|LET|LIKE|LIMIT|NONE|NOT|NULL|OR|OUTBOUND|REMOVE|REPLACE|RETURN|SHORTEST_PATH|SORT|UPDATE|UPSERT|WINDOW|WITH)\b/i,
	      // pseudo keywords get a lookbehind to avoid false positives
	      {
	        pattern: /(^|[^\w.[])(?:KEEP|PRUNE|SEARCH|TO)\b/i,
	        lookbehind: true
	      },
	      {
	        pattern: /(^|[^\w.[])(?:CURRENT|NEW|OLD)\b/,
	        lookbehind: true
	      },
	      {
	        pattern: /\bOPTIONS(?=\s*\{)/i
	      }
	    ],
	    function: /\b(?!\d)\w+(?=\s*\()/,
	    boolean: /\b(?:false|true)\b/i,
	    range: {
	      pattern: /\.\./,
	      alias: 'operator'
	    },
	    number: [
	      /\b0b[01]+/i,
	      /\b0x[0-9a-f]+/i,
	      /(?:\B\.\d+|\b(?:0|[1-9]\d*)(?:\.\d+)?)(?:e[+-]?\d+)?/i
	    ],
	    operator: /\*{2,}|[=!]~|[!=<>]=?|&&|\|\||[-+*/%]/,
	    punctuation: /::|[?.:,;()[\]{}]/
	  };
	}

	// @ts-nocheck
	arff.displayName = 'arff';
	arff.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function arff(Prism) {
	  Prism.languages.arff = {
	    comment: /%.*/,
	    string: {
	      pattern: /(["'])(?:\\.|(?!\1)[^\\\r\n])*\1/,
	      greedy: true
	    },
	    keyword: /@(?:attribute|data|end|relation)\b/i,
	    number: /\b\d+(?:\.\d+)?\b/,
	    punctuation: /[{},]/
	  };
	}

	// @ts-nocheck
	armasm.displayName = 'armasm';
	armasm.aliases = ['arm-asm'];

	/** @type {import('../core.js').Syntax} */
	function armasm(Prism) {
	  Prism.languages.armasm = {
	    comment: {
	      pattern: /;.*/,
	      greedy: true
	    },
	    string: {
	      pattern: /"(?:[^"\r\n]|"")*"/,
	      greedy: true,
	      inside: {
	        variable: {
	          pattern: /((?:^|[^$])(?:\${2})*)\$\w+/,
	          lookbehind: true
	        }
	      }
	    },
	    char: {
	      pattern: /'(?:[^'\r\n]{0,4}|'')'/,
	      greedy: true
	    },
	    'version-symbol': {
	      pattern: /\|[\w@]+\|/,
	      greedy: true,
	      alias: 'property'
	    },
	    boolean: /\b(?:FALSE|TRUE)\b/,
	    directive: {
	      pattern:
	        /\b(?:ALIAS|ALIGN|AREA|ARM|ASSERT|ATTR|CN|CODE|CODE16|CODE32|COMMON|CP|DATA|DCB|DCD|DCDO|DCDU|DCFD|DCFDU|DCI|DCQ|DCQU|DCW|DCWU|DN|ELIF|ELSE|END|ENDFUNC|ENDIF|ENDP|ENTRY|EQU|EXPORT|EXPORTAS|EXTERN|FIELD|FILL|FN|FUNCTION|GBLA|GBLL|GBLS|GET|GLOBAL|IF|IMPORT|INCBIN|INCLUDE|INFO|KEEP|LCLA|LCLL|LCLS|LTORG|MACRO|MAP|MEND|MEXIT|NOFP|OPT|PRESERVE8|PROC|QN|READONLY|RELOC|REQUIRE|REQUIRE8|RLIST|ROUT|SETA|SETL|SETS|SN|SPACE|SUBT|THUMB|THUMBX|TTL|WEND|WHILE)\b/,
	      alias: 'property'
	    },
	    instruction: {
	      pattern:
	        /((?:^|(?:^|[^\\])(?:\r\n?|\n))[ \t]*(?:(?:[A-Z][A-Z0-9_]*[a-z]\w*|[a-z]\w*|\d+)[ \t]+)?)\b[A-Z.]+\b/,
	      lookbehind: true,
	      alias: 'keyword'
	    },
	    variable: /\$\w+/,
	    number:
	      /(?:\b[2-9]_\d+|(?:\b\d+(?:\.\d+)?|\B\.\d+)(?:e-?\d+)?|\b0(?:[fd]_|x)[0-9a-f]+|&[0-9a-f]+)\b/i,
	    register: {
	      pattern: /\b(?:r\d|lr)\b/,
	      alias: 'symbol'
	    },
	    operator: /<>|<<|>>|&&|\|\||[=!<>/]=?|[+\-*%#?&|^]|:[A-Z]+:/,
	    punctuation: /[()[\],]/
	  };
	  Prism.languages['arm-asm'] = Prism.languages.armasm;
	}

	// @ts-nocheck
	arturo.displayName = 'arturo';
	arturo.aliases = ['art'];

	/** @type {import('../core.js').Syntax} */
	function arturo(Prism) {
	(function (Prism) {
	    /**
	     * @param {string} lang
	     * @param {string} pattern
	     */
	    var createLanguageString = function (lang, pattern) {
	      return {
	        pattern: RegExp(
	          /\{!/.source + '(?:' + (pattern || lang) + ')' + /$[\s\S]*\}/.source,
	          'm'
	        ),
	        greedy: true,
	        inside: {
	          embedded: {
	            pattern: /(^\{!\w+\b)[\s\S]+(?=\}$)/,
	            lookbehind: true,
	            alias: 'language-' + lang,
	            inside: Prism.languages[lang]
	          },
	          string: /[\s\S]+/
	        }
	      }
	    };
	    Prism.languages.arturo = {
	      comment: {
	        pattern: /;.*/,
	        greedy: true
	      },
	      character: {
	        pattern: /`.`/,
	        alias: 'char',
	        greedy: true
	      },
	      number: {
	        pattern: /\b\d+(?:\.\d+(?:\.\d+(?:-[\w+-]+)?)?)?\b/
	      },
	      string: {
	        pattern: /"(?:[^"\\\r\n]|\\.)*"/,
	        greedy: true
	      },
	      regex: {
	        pattern: /\{\/.*?\/\}/,
	        greedy: true
	      },
	      'html-string': createLanguageString('html'),
	      'css-string': createLanguageString('css'),
	      'js-string': createLanguageString('js'),
	      'md-string': createLanguageString('md'),
	      'sql-string': createLanguageString('sql'),
	      'sh-string': createLanguageString('shell', 'sh'),
	      multistring: {
	        pattern: /».*|\{:[\s\S]*?:\}|\{[\s\S]*?\}|^-{6}$[\s\S]*/m,
	        alias: 'string',
	        greedy: true
	      },
	      label: {
	        pattern: /\w+\b\??:/,
	        alias: 'property'
	      },
	      literal: {
	        pattern: /'(?:\w+\b\??:?)/,
	        alias: 'constant'
	      },
	      type: {
	        pattern: /:(?:\w+\b\??:?)/,
	        alias: 'class-name'
	      },
	      color: /#\w+/,
	      predicate: {
	        pattern:
	          /\b(?:all|and|any|ascii|attr|attribute|attributeLabel|binary|block|char|contains|database|date|dictionary|empty|equal|even|every|exists|false|floating|function|greater|greaterOrEqual|if|in|inline|integer|is|key|label|leap|less|lessOrEqual|literal|logical|lower|nand|negative|nor|not|notEqual|null|numeric|odd|or|path|pathLabel|positive|prefix|prime|regex|same|set|some|sorted|standalone|string|subset|suffix|superset|symbol|symbolLiteral|true|try|type|unless|upper|when|whitespace|word|xnor|xor|zero)\?/,
	        alias: 'keyword'
	      },
	      'builtin-function': {
	        pattern:
	          /\b(?:abs|acos|acosh|acsec|acsech|actan|actanh|add|after|alert|alias|and|angle|append|arg|args|arity|array|as|asec|asech|asin|asinh|atan|atan2|atanh|attr|attrs|average|before|benchmark|blend|break|call|capitalize|case|ceil|chop|clear|clip|close|color|combine|conj|continue|copy|cos|cosh|crc|csec|csech|ctan|ctanh|cursor|darken|dec|decode|define|delete|desaturate|deviation|dialog|dictionary|difference|digest|digits|div|do|download|drop|dup|e|else|empty|encode|ensure|env|escape|execute|exit|exp|extend|extract|factors|fdiv|filter|first|flatten|floor|fold|from|function|gamma|gcd|get|goto|hash|hypot|if|inc|indent|index|infinity|info|input|insert|inspect|intersection|invert|jaro|join|keys|kurtosis|last|let|levenshtein|lighten|list|ln|log|loop|lower|mail|map|match|max|median|min|mod|module|mul|nand|neg|new|nor|normalize|not|now|null|open|or|outdent|pad|palette|panic|path|pause|permissions|permutate|pi|pop|popup|pow|powerset|powmod|prefix|print|prints|process|product|query|random|range|read|relative|remove|rename|render|repeat|replace|request|return|reverse|round|sample|saturate|script|sec|sech|select|serve|set|shl|shr|shuffle|sin|sinh|size|skewness|slice|sort|spin|split|sqrt|squeeze|stack|strip|sub|suffix|sum|switch|symbols|symlink|sys|take|tan|tanh|terminal|terminate|to|truncate|try|type|unclip|union|unique|unless|until|unzip|upper|values|var|variance|volume|webview|while|with|wordwrap|write|xnor|xor|zip)\b/,
	        alias: 'keyword'
	      },
	      sugar: {
	        pattern: /->|=>|\||::/,
	        alias: 'operator'
	      },
	      punctuation: /[()[\],]/,
	      symbol: {
	        pattern: /<:|-:|ø|@|#|\+|\||\*|\$|---|-|%|\/|\.\.|\^|~|=|<|>|\\/
	      },
	      boolean: {
	        pattern: /\b(?:false|maybe|true)\b/
	      }
	    };
	    Prism.languages.art = Prism.languages['arturo'];
	  })(Prism);
	}

	// @ts-nocheck
	asciidoc.displayName = 'asciidoc';
	asciidoc.aliases = ['adoc'];

	/** @type {import('../core.js').Syntax} */
	function asciidoc(Prism) {
	(function (Prism) {
	    var attributes = {
	      pattern:
	        /(^[ \t]*)\[(?!\[)(?:(["'$`])(?:(?!\2)[^\\]|\\.)*\2|\[(?:[^\[\]\\]|\\.)*\]|[^\[\]\\"'$`]|\\.)*\]/m,
	      lookbehind: true,
	      inside: {
	        quoted: {
	          pattern: /([$`])(?:(?!\1)[^\\]|\\.)*\1/,
	          inside: {
	            punctuation: /^[$`]|[$`]$/
	          }
	        },
	        interpreted: {
	          pattern: /'(?:[^'\\]|\\.)*'/,
	          inside: {
	            punctuation: /^'|'$/
	            // See rest below
	          }
	        },

	        string: /"(?:[^"\\]|\\.)*"/,
	        variable: /\w+(?==)/,
	        punctuation: /^\[|\]$|,/,
	        operator: /=/,
	        // The negative look-ahead prevents blank matches
	        'attr-value': /(?!^\s+$).+/
	      }
	    };
	    var asciidoc = (Prism.languages.asciidoc = {
	      'comment-block': {
	        pattern: /^(\/{4,})$[\s\S]*?^\1/m,
	        alias: 'comment'
	      },
	      table: {
	        pattern: /^\|={3,}(?:(?:\r?\n|\r(?!\n)).*)*?(?:\r?\n|\r)\|={3,}$/m,
	        inside: {
	          specifiers: {
	            pattern:
	              /(?:(?:(?:\d+(?:\.\d+)?|\.\d+)[+*](?:[<^>](?:\.[<^>])?|\.[<^>])?|[<^>](?:\.[<^>])?|\.[<^>])[a-z]*|[a-z]+)(?=\|)/,
	            alias: 'attr-value'
	          },
	          punctuation: {
	            pattern: /(^|[^\\])[|!]=*/,
	            lookbehind: true
	          }
	          // See rest below
	        }
	      },

	      'passthrough-block': {
	        pattern: /^(\+{4,})$[\s\S]*?^\1$/m,
	        inside: {
	          punctuation: /^\++|\++$/
	          // See rest below
	        }
	      },

	      // Literal blocks and listing blocks
	      'literal-block': {
	        pattern: /^(-{4,}|\.{4,})$[\s\S]*?^\1$/m,
	        inside: {
	          punctuation: /^(?:-+|\.+)|(?:-+|\.+)$/
	          // See rest below
	        }
	      },

	      // Sidebar blocks, quote blocks, example blocks and open blocks
	      'other-block': {
	        pattern: /^(--|\*{4,}|_{4,}|={4,})$[\s\S]*?^\1$/m,
	        inside: {
	          punctuation: /^(?:-+|\*+|_+|=+)|(?:-+|\*+|_+|=+)$/
	          // See rest below
	        }
	      },

	      // list-punctuation and list-label must appear before indented-block
	      'list-punctuation': {
	        pattern:
	          /(^[ \t]*)(?:-|\*{1,5}|\.{1,5}|(?:[a-z]|\d+)\.|[xvi]+\))(?= )/im,
	        lookbehind: true,
	        alias: 'punctuation'
	      },
	      'list-label': {
	        pattern: /(^[ \t]*)[a-z\d].+(?::{2,4}|;;)(?=\s)/im,
	        lookbehind: true,
	        alias: 'symbol'
	      },
	      'indented-block': {
	        pattern: /((\r?\n|\r)\2)([ \t]+)\S.*(?:(?:\r?\n|\r)\3.+)*(?=\2{2}|$)/,
	        lookbehind: true
	      },
	      comment: /^\/\/.*/m,
	      title: {
	        pattern:
	          /^.+(?:\r?\n|\r)(?:={3,}|-{3,}|~{3,}|\^{3,}|\+{3,})$|^={1,5} .+|^\.(?![\s.]).*/m,
	        alias: 'important',
	        inside: {
	          punctuation: /^(?:\.|=+)|(?:=+|-+|~+|\^+|\++)$/
	          // See rest below
	        }
	      },

	      'attribute-entry': {
	        pattern: /^:[^:\r\n]+:(?: .*?(?: \+(?:\r?\n|\r).*?)*)?$/m,
	        alias: 'tag'
	      },
	      attributes: attributes,
	      hr: {
	        pattern: /^'{3,}$/m,
	        alias: 'punctuation'
	      },
	      'page-break': {
	        pattern: /^<{3,}$/m,
	        alias: 'punctuation'
	      },
	      admonition: {
	        pattern: /^(?:CAUTION|IMPORTANT|NOTE|TIP|WARNING):/m,
	        alias: 'keyword'
	      },
	      callout: [
	        {
	          pattern: /(^[ \t]*)<?\d*>/m,
	          lookbehind: true,
	          alias: 'symbol'
	        },
	        {
	          pattern: /<\d+>/,
	          alias: 'symbol'
	        }
	      ],
	      macro: {
	        pattern:
	          /\b[a-z\d][a-z\d-]*::?(?:[^\s\[\]]*\[(?:[^\]\\"']|(["'])(?:(?!\1)[^\\]|\\.)*\1|\\.)*\])/,
	        inside: {
	          function: /^[a-z\d-]+(?=:)/,
	          punctuation: /^::?/,
	          attributes: {
	            pattern: /(?:\[(?:[^\]\\"']|(["'])(?:(?!\1)[^\\]|\\.)*\1|\\.)*\])/,
	            inside: attributes.inside
	          }
	        }
	      },
	      inline: {
	        /*
	The initial look-behind prevents the highlighting of escaped quoted text.
	Quoted text can be multi-line but cannot span an empty line.
	All quoted text can have attributes before [foobar, 'foobar', baz="bar"].
	First, we handle the constrained quotes.
	Those must be bounded by non-word chars and cannot have spaces between the delimiter and the first char.
	They are, in order: _emphasis_, ``double quotes'', `single quotes', `monospace`, 'emphasis', *strong*, +monospace+ and #unquoted#
	Then we handle the unconstrained quotes.
	Those do not have the restrictions of the constrained quotes.
	They are, in order: __emphasis__, **strong**, ++monospace++, +++passthrough+++, ##unquoted##, $$passthrough$$, ~subscript~, ^superscript^, {attribute-reference}, [[anchor]], [[[bibliography anchor]]], <<xref>>, (((indexes))) and ((indexes))
	*/
	        pattern:
	          /(^|[^\\])(?:(?:\B\[(?:[^\]\\"']|(["'])(?:(?!\2)[^\\]|\\.)*\2|\\.)*\])?(?:\b_(?!\s)(?: _|[^_\\\r\n]|\\.)+(?:(?:\r?\n|\r)(?: _|[^_\\\r\n]|\\.)+)*_\b|\B``(?!\s).+?(?:(?:\r?\n|\r).+?)*''\B|\B`(?!\s)(?:[^`'\s]|\s+\S)+['`]\B|\B(['*+#])(?!\s)(?: \3|(?!\3)[^\\\r\n]|\\.)+(?:(?:\r?\n|\r)(?: \3|(?!\3)[^\\\r\n]|\\.)+)*\3\B)|(?:\[(?:[^\]\\"']|(["'])(?:(?!\4)[^\\]|\\.)*\4|\\.)*\])?(?:(__|\*\*|\+\+\+?|##|\$\$|[~^]).+?(?:(?:\r?\n|\r).+?)*\5|\{[^}\r\n]+\}|\[\[\[?.+?(?:(?:\r?\n|\r).+?)*\]?\]\]|<<.+?(?:(?:\r?\n|\r).+?)*>>|\(\(\(?.+?(?:(?:\r?\n|\r).+?)*\)?\)\)))/m,
	        lookbehind: true,
	        inside: {
	          attributes: attributes,
	          url: {
	            pattern: /^(?:\[\[\[?.+?\]?\]\]|<<.+?>>)$/,
	            inside: {
	              punctuation: /^(?:\[\[\[?|<<)|(?:\]\]\]?|>>)$/
	            }
	          },
	          'attribute-ref': {
	            pattern: /^\{.+\}$/,
	            inside: {
	              variable: {
	                pattern: /(^\{)[a-z\d,+_-]+/,
	                lookbehind: true
	              },
	              operator: /^[=?!#%@$]|!(?=[:}])/,
	              punctuation: /^\{|\}$|::?/
	            }
	          },
	          italic: {
	            pattern: /^(['_])[\s\S]+\1$/,
	            inside: {
	              punctuation: /^(?:''?|__?)|(?:''?|__?)$/
	            }
	          },
	          bold: {
	            pattern: /^\*[\s\S]+\*$/,
	            inside: {
	              punctuation: /^\*\*?|\*\*?$/
	            }
	          },
	          punctuation:
	            /^(?:``?|\+{1,3}|##?|\$\$|[~^]|\(\(\(?)|(?:''?|\+{1,3}|##?|\$\$|[~^`]|\)?\)\))$/
	        }
	      },
	      replacement: {
	        pattern: /\((?:C|R|TM)\)/,
	        alias: 'builtin'
	      },
	      entity: /&#?[\da-z]{1,8};/i,
	      'line-continuation': {
	        pattern: /(^| )\+$/m,
	        lookbehind: true,
	        alias: 'punctuation'
	      }
	    });

	    // Allow some nesting. There is no recursion though, so cloning should not be needed.

	    function copyFromAsciiDoc(keys) {
	      keys = keys.split(' ');
	      var o = {};
	      for (var i = 0, l = keys.length; i < l; i++) {
	        o[keys[i]] = asciidoc[keys[i]];
	      }
	      return o
	    }
	    attributes.inside['interpreted'].inside.rest = copyFromAsciiDoc(
	      'macro inline replacement entity'
	    );
	    asciidoc['passthrough-block'].inside.rest = copyFromAsciiDoc('macro');
	    asciidoc['literal-block'].inside.rest = copyFromAsciiDoc('callout');
	    asciidoc['table'].inside.rest = copyFromAsciiDoc(
	      'comment-block passthrough-block literal-block other-block list-punctuation indented-block comment title attribute-entry attributes hr page-break admonition list-label callout macro inline replacement entity line-continuation'
	    );
	    asciidoc['other-block'].inside.rest = copyFromAsciiDoc(
	      'table list-punctuation indented-block comment attribute-entry attributes hr page-break admonition list-label macro inline replacement entity line-continuation'
	    );
	    asciidoc['title'].inside.rest = copyFromAsciiDoc(
	      'macro inline replacement entity'
	    );

	    // Plugin to make entity title show the real entity, idea by Roman Komarov
	    Prism.hooks.add('wrap', function (env) {
	      if (env.type === 'entity') {
	        env.attributes['title'] = env.content.value.replace(/&amp;/, '&');
	      }
	    });
	    Prism.languages.adoc = Prism.languages.asciidoc;
	  })(Prism);
	}

	// @ts-nocheck
	aspnet.displayName = 'aspnet';
	aspnet.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function aspnet(Prism) {
	  Prism.register(csharp);
	  Prism.register(markup);
	  Prism.languages.aspnet = Prism.languages.extend('markup', {
	    'page-directive': {
	      pattern: /<%\s*@.*%>/,
	      alias: 'tag',
	      inside: {
	        'page-directive': {
	          pattern:
	            /<%\s*@\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>/i,
	          alias: 'tag'
	        },
	        rest: Prism.languages.markup.tag.inside
	      }
	    },
	    directive: {
	      pattern: /<%.*%>/,
	      alias: 'tag',
	      inside: {
	        directive: {
	          pattern: /<%\s*?[$=%#:]{0,2}|%>/,
	          alias: 'tag'
	        },
	        rest: Prism.languages.csharp
	      }
	    }
	  });
	  // Regexp copied from prism-markup, with a negative look-ahead added
	  Prism.languages.aspnet.tag.pattern =
	    /<(?!%)\/?[^\s>\/]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+))?)*\s*\/?>/;

	  // match directives of attribute value foo="<% Bar %>"
	  Prism.languages.insertBefore(
	    'inside',
	    'punctuation',
	    {
	      directive: Prism.languages.aspnet['directive']
	    },
	    Prism.languages.aspnet.tag.inside['attr-value']
	  );
	  Prism.languages.insertBefore('aspnet', 'comment', {
	    'asp-comment': {
	      pattern: /<%--[\s\S]*?--%>/,
	      alias: ['asp', 'comment']
	    }
	  });

	  // script runat="server" contains csharp, not javascript
	  Prism.languages.insertBefore(
	    'aspnet',
	    Prism.languages.javascript ? 'script' : 'tag',
	    {
	      'asp-script': {
	        pattern:
	          /(<script(?=.*runat=['"]?server\b)[^>]*>)[\s\S]*?(?=<\/script>)/i,
	        lookbehind: true,
	        alias: ['asp', 'script'],
	        inside: Prism.languages.csharp || {}
	      }
	    }
	  );
	}

	// @ts-nocheck
	asm6502.displayName = 'asm6502';
	asm6502.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function asm6502(Prism) {
	  Prism.languages.asm6502 = {
	    comment: /;.*/,
	    directive: {
	      pattern: /\.\w+(?= )/,
	      alias: 'property'
	    },
	    string: /(["'`])(?:\\.|(?!\1)[^\\\r\n])*\1/,
	    'op-code': {
	      pattern:
	        /\b(?:ADC|AND|ASL|BCC|BCS|BEQ|BIT|BMI|BNE|BPL|BRK|BVC|BVS|CLC|CLD|CLI|CLV|CMP|CPX|CPY|DEC|DEX|DEY|EOR|INC|INX|INY|JMP|JSR|LDA|LDX|LDY|LSR|NOP|ORA|PHA|PHP|PLA|PLP|ROL|ROR|RTI|RTS|SBC|SEC|SED|SEI|STA|STX|STY|TAX|TAY|TSX|TXA|TXS|TYA|adc|and|asl|bcc|bcs|beq|bit|bmi|bne|bpl|brk|bvc|bvs|clc|cld|cli|clv|cmp|cpx|cpy|dec|dex|dey|eor|inc|inx|iny|jmp|jsr|lda|ldx|ldy|lsr|nop|ora|pha|php|pla|plp|rol|ror|rti|rts|sbc|sec|sed|sei|sta|stx|sty|tax|tay|tsx|txa|txs|tya)\b/,
	      alias: 'keyword'
	    },
	    'hex-number': {
	      pattern: /#?\$[\da-f]{1,4}\b/i,
	      alias: 'number'
	    },
	    'binary-number': {
	      pattern: /#?%[01]+\b/,
	      alias: 'number'
	    },
	    'decimal-number': {
	      pattern: /#?\b\d+\b/,
	      alias: 'number'
	    },
	    register: {
	      pattern: /\b[xya]\b/i,
	      alias: 'variable'
	    },
	    punctuation: /[(),:]/
	  };
	}

	// @ts-nocheck
	asmatmel.displayName = 'asmatmel';
	asmatmel.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function asmatmel(Prism) {
	  Prism.languages.asmatmel = {
	    comment: {
	      pattern: /;.*/,
	      greedy: true
	    },
	    string: {
	      pattern: /(["'`])(?:\\.|(?!\1)[^\\\r\n])*\1/,
	      greedy: true
	    },
	    constant: /\b(?:PORT[A-Z]|DDR[A-Z]|(?:DD|P)[A-Z](?:\d|[0-2]\d|3[01]))\b/,
	    directive: {
	      pattern: /\.\w+(?= )/,
	      alias: 'property'
	    },
	    'r-register': {
	      pattern: /\br(?:\d|[12]\d|3[01])\b/,
	      alias: 'variable'
	    },
	    'op-code': {
	      pattern:
	        /\b(?:ADC|ADD|ADIW|AND|ANDI|ASR|BCLR|BLD|BRBC|BRBS|BRCC|BRCS|BREAK|BREQ|BRGE|BRHC|BRHS|BRID|BRIE|BRLO|BRLT|BRMI|BRNE|BRPL|BRSH|BRTC|BRTS|BRVC|BRVS|BSET|BST|CALL|CBI|CBR|CLC|CLH|CLI|CLN|CLR|CLS|CLT|CLV|CLZ|COM|CP|CPC|CPI|CPSE|DEC|DES|EICALL|EIJMP|ELPM|EOR|FMUL|FMULS|FMULSU|ICALL|IJMP|IN|INC|JMP|LAC|LAS|LAT|LD|LD[A-Za-z0-9]|LPM|LSL|LSR|MOV|MOVW|MUL|MULS|MULSU|NEG|NOP|OR|ORI|OUT|POP|PUSH|RCALL|RET|RETI|RJMP|ROL|ROR|SBC|SBCI|SBI|SBIC|SBIS|SBIW|SBR|SBRC|SBRS|SEC|SEH|SEI|SEN|SER|SES|SET|SEV|SEZ|SLEEP|SPM|ST|ST[A-Z0-9]|SUB|SUBI|SWAP|TST|WDR|XCH|adc|add|adiw|and|andi|asr|bclr|bld|brbc|brbs|brcc|brcs|break|breq|brge|brhc|brhs|brid|brie|brlo|brlt|brmi|brne|brpl|brsh|brtc|brts|brvc|brvs|bset|bst|call|cbi|cbr|clc|clh|cli|cln|clr|cls|clt|clv|clz|com|cp|cpc|cpi|cpse|dec|des|eicall|eijmp|elpm|eor|fmul|fmuls|fmulsu|icall|ijmp|in|inc|jmp|lac|las|lat|ld|ld[a-z0-9]|lpm|lsl|lsr|mov|movw|mul|muls|mulsu|neg|nop|or|ori|out|pop|push|rcall|ret|reti|rjmp|rol|ror|sbc|sbci|sbi|sbic|sbis|sbiw|sbr|sbrc|sbrs|sec|seh|sei|sen|ser|ses|set|sev|sez|sleep|spm|st|st[a-zA-Z0-9]|sub|subi|swap|tst|wdr|xch)\b/,
	      alias: 'keyword'
	    },
	    'hex-number': {
	      pattern: /#?\$[\da-f]{2,4}\b/i,
	      alias: 'number'
	    },
	    'binary-number': {
	      pattern: /#?%[01]+\b/,
	      alias: 'number'
	    },
	    'decimal-number': {
	      pattern: /#?\b\d+\b/,
	      alias: 'number'
	    },
	    register: {
	      pattern: /\b[acznvshtixy]\b/i,
	      alias: 'variable'
	    },
	    operator: />>=?|<<=?|&[&=]?|\|[\|=]?|[-+*/%^!=<>?]=?/,
	    punctuation: /[(),:]/
	  };
	}

	// @ts-nocheck
	autohotkey.displayName = 'autohotkey';
	autohotkey.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function autohotkey(Prism) {
	  // NOTES - follows first-first highlight method, block is locked after highlight, different from SyntaxHl
	  Prism.languages.autohotkey = {
	    comment: [
	      {
	        pattern: /(^|\s);.*/,
	        lookbehind: true
	      },
	      {
	        pattern:
	          /(^[\t ]*)\/\*(?:[\r\n](?![ \t]*\*\/)|[^\r\n])*(?:[\r\n][ \t]*\*\/)?/m,
	        lookbehind: true,
	        greedy: true
	      }
	    ],
	    tag: {
	      // labels
	      pattern: /^([ \t]*)[^\s,`":]+(?=:[ \t]*$)/m,
	      lookbehind: true
	    },
	    string: /"(?:[^"\n\r]|"")*"/,
	    variable: /%\w+%/,
	    number: /\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/,
	    operator:
	      /\?|\/\/?=?|:=|\|[=|]?|&[=&]?|\+[=+]?|-[=-]?|\*[=*]?|<(?:<=?|>|=)?|>>?=?|[.^!=~]=?|\b(?:AND|NOT|OR)\b/,
	    boolean: /\b(?:false|true)\b/,
	    command: {
	      pattern:
	        /\b(?:AutoTrim|BlockInput|Break|Click|ClipWait|Continue|Control|ControlClick|ControlFocus|ControlGet|ControlGetFocus|ControlGetPos|ControlGetText|ControlMove|ControlSend|ControlSendRaw|ControlSetText|CoordMode|Critical|DetectHiddenText|DetectHiddenWindows|Drive|DriveGet|DriveSpaceFree|EnvAdd|EnvDiv|EnvGet|EnvMult|EnvSet|EnvSub|EnvUpdate|Exit|ExitApp|FileAppend|FileCopy|FileCopyDir|FileCreateDir|FileCreateShortcut|FileDelete|FileEncoding|FileGetAttrib|FileGetShortcut|FileGetSize|FileGetTime|FileGetVersion|FileInstall|FileMove|FileMoveDir|FileRead|FileReadLine|FileRecycle|FileRecycleEmpty|FileRemoveDir|FileSelectFile|FileSelectFolder|FileSetAttrib|FileSetTime|FormatTime|GetKeyState|Gosub|Goto|GroupActivate|GroupAdd|GroupClose|GroupDeactivate|Gui|GuiControl|GuiControlGet|Hotkey|ImageSearch|IniDelete|IniRead|IniWrite|Input|InputBox|KeyWait|ListHotkeys|ListLines|ListVars|Loop|Menu|MouseClick|MouseClickDrag|MouseGetPos|MouseMove|MsgBox|OnExit|OutputDebug|Pause|PixelGetColor|PixelSearch|PostMessage|Process|Progress|Random|RegDelete|RegRead|RegWrite|Reload|Repeat|Return|Run|RunAs|RunWait|Send|SendEvent|SendInput|SendMessage|SendMode|SendPlay|SendRaw|SetBatchLines|SetCapslockState|SetControlDelay|SetDefaultMouseSpeed|SetEnv|SetFormat|SetKeyDelay|SetMouseDelay|SetNumlockState|SetRegView|SetScrollLockState|SetStoreCapslockMode|SetTimer|SetTitleMatchMode|SetWinDelay|SetWorkingDir|Shutdown|Sleep|Sort|SoundBeep|SoundGet|SoundGetWaveVolume|SoundPlay|SoundSet|SoundSetWaveVolume|SplashImage|SplashTextOff|SplashTextOn|SplitPath|StatusBarGetText|StatusBarWait|StringCaseSense|StringGetPos|StringLeft|StringLen|StringLower|StringMid|StringReplace|StringRight|StringSplit|StringTrimLeft|StringTrimRight|StringUpper|Suspend|SysGet|Thread|ToolTip|Transform|TrayTip|URLDownloadToFile|WinActivate|WinActivateBottom|WinClose|WinGet|WinGetActiveStats|WinGetActiveTitle|WinGetClass|WinGetPos|WinGetText|WinGetTitle|WinHide|WinKill|WinMaximize|WinMenuSelectItem|WinMinimize|WinMinimizeAll|WinMinimizeAllUndo|WinMove|WinRestore|WinSet|WinSetTitle|WinShow|WinWait|WinWaitActive|WinWaitClose|WinWaitNotActive)\b/i,
	      alias: 'selector'
	    },
	    constant:
	      /\b(?:a_ahkpath|a_ahkversion|a_appdata|a_appdatacommon|a_autotrim|a_batchlines|a_caretx|a_carety|a_computername|a_controldelay|a_cursor|a_dd|a_ddd|a_dddd|a_defaultmousespeed|a_desktop|a_desktopcommon|a_detecthiddentext|a_detecthiddenwindows|a_endchar|a_eventinfo|a_exitreason|a_fileencoding|a_formatfloat|a_formatinteger|a_gui|a_guicontrol|a_guicontrolevent|a_guievent|a_guiheight|a_guiwidth|a_guix|a_guiy|a_hour|a_iconfile|a_iconhidden|a_iconnumber|a_icontip|a_index|a_ipaddress1|a_ipaddress2|a_ipaddress3|a_ipaddress4|a_is64bitos|a_isadmin|a_iscompiled|a_iscritical|a_ispaused|a_issuspended|a_isunicode|a_keydelay|a_language|a_lasterror|a_linefile|a_linenumber|a_loopfield|a_loopfileattrib|a_loopfiledir|a_loopfileext|a_loopfilefullpath|a_loopfilelongpath|a_loopfilename|a_loopfileshortname|a_loopfileshortpath|a_loopfilesize|a_loopfilesizekb|a_loopfilesizemb|a_loopfiletimeaccessed|a_loopfiletimecreated|a_loopfiletimemodified|a_loopreadline|a_loopregkey|a_loopregname|a_loopregsubkey|a_loopregtimemodified|a_loopregtype|a_mday|a_min|a_mm|a_mmm|a_mmmm|a_mon|a_mousedelay|a_msec|a_mydocuments|a_now|a_nowutc|a_numbatchlines|a_ostype|a_osversion|a_priorhotkey|a_priorkey|a_programfiles|a_programs|a_programscommon|a_ptrsize|a_regview|a_screendpi|a_screenheight|a_screenwidth|a_scriptdir|a_scriptfullpath|a_scripthwnd|a_scriptname|a_sec|a_space|a_startmenu|a_startmenucommon|a_startup|a_startupcommon|a_stringcasesense|a_tab|a_temp|a_thisfunc|a_thishotkey|a_thislabel|a_thismenu|a_thismenuitem|a_thismenuitempos|a_tickcount|a_timeidle|a_timeidlephysical|a_timesincepriorhotkey|a_timesincethishotkey|a_titlematchmode|a_titlematchmodespeed|a_username|a_wday|a_windelay|a_windir|a_workingdir|a_yday|a_year|a_yweek|a_yyyy|clipboard|clipboardall|comspec|errorlevel|programfiles)\b/i,
	    builtin:
	      /\b(?:abs|acos|asc|asin|atan|ceil|chr|class|comobjactive|comobjarray|comobjconnect|comobjcreate|comobjerror|comobjflags|comobjget|comobjquery|comobjtype|comobjvalue|cos|dllcall|exp|fileexist|Fileopen|floor|format|il_add|il_create|il_destroy|instr|isfunc|islabel|IsObject|ln|log|ltrim|lv_add|lv_delete|lv_deletecol|lv_getcount|lv_getnext|lv_gettext|lv_insert|lv_insertcol|lv_modify|lv_modifycol|lv_setimagelist|mod|numget|numput|onmessage|regexmatch|regexreplace|registercallback|round|rtrim|sb_seticon|sb_setparts|sb_settext|sin|sqrt|strlen|strreplace|strsplit|substr|tan|tv_add|tv_delete|tv_get|tv_getchild|tv_getcount|tv_getnext|tv_getparent|tv_getprev|tv_getselection|tv_gettext|tv_modify|varsetcapacity|winactive|winexist|__Call|__Get|__New|__Set)\b/i,
	    symbol:
	      /\b(?:alt|altdown|altup|appskey|backspace|browser_back|browser_favorites|browser_forward|browser_home|browser_refresh|browser_search|browser_stop|bs|capslock|ctrl|ctrlbreak|ctrldown|ctrlup|del|delete|down|end|enter|esc|escape|f1|f10|f11|f12|f13|f14|f15|f16|f17|f18|f19|f2|f20|f21|f22|f23|f24|f3|f4|f5|f6|f7|f8|f9|home|ins|insert|joy1|joy10|joy11|joy12|joy13|joy14|joy15|joy16|joy17|joy18|joy19|joy2|joy20|joy21|joy22|joy23|joy24|joy25|joy26|joy27|joy28|joy29|joy3|joy30|joy31|joy32|joy4|joy5|joy6|joy7|joy8|joy9|joyaxes|joybuttons|joyinfo|joyname|joypov|joyr|joyu|joyv|joyx|joyy|joyz|lalt|launch_app1|launch_app2|launch_mail|launch_media|lbutton|lcontrol|lctrl|left|lshift|lwin|lwindown|lwinup|mbutton|media_next|media_play_pause|media_prev|media_stop|numlock|numpad0|numpad1|numpad2|numpad3|numpad4|numpad5|numpad6|numpad7|numpad8|numpad9|numpadadd|numpadclear|numpaddel|numpaddiv|numpaddot|numpaddown|numpadend|numpadenter|numpadhome|numpadins|numpadleft|numpadmult|numpadpgdn|numpadpgup|numpadright|numpadsub|numpadup|pgdn|pgup|printscreen|ralt|rbutton|rcontrol|rctrl|right|rshift|rwin|rwindown|rwinup|scrolllock|shift|shiftdown|shiftup|space|tab|up|volume_down|volume_mute|volume_up|wheeldown|wheelleft|wheelright|wheelup|xbutton1|xbutton2)\b/i,
	    directive: {
	      pattern: /#[a-z]+\b/i,
	      alias: 'important'
	    },
	    keyword:
	      /\b(?:Abort|AboveNormal|Add|ahk_class|ahk_exe|ahk_group|ahk_id|ahk_pid|All|Alnum|Alpha|AltSubmit|AltTab|AltTabAndMenu|AltTabMenu|AltTabMenuDismiss|AlwaysOnTop|AutoSize|Background|BackgroundTrans|BelowNormal|between|BitAnd|BitNot|BitOr|BitShiftLeft|BitShiftRight|BitXOr|Bold|Border|Button|ByRef|Catch|Checkbox|Checked|CheckedGray|Choose|ChooseString|Close|Color|ComboBox|Contains|ControlList|Count|Date|DateTime|Days|DDL|Default|DeleteAll|Delimiter|Deref|Destroy|Digit|Disable|Disabled|DropDownList|Edit|Eject|Else|Enable|Enabled|Error|Exist|Expand|ExStyle|FileSystem|Finally|First|Flash|Float|FloatFast|Focus|Font|for|global|Grid|Group|GroupBox|GuiClose|GuiContextMenu|GuiDropFiles|GuiEscape|GuiSize|Hdr|Hidden|Hide|High|HKCC|HKCR|HKCU|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKLM|HKU|Hours|HScroll|Icon|IconSmall|ID|IDLast|If|IfEqual|IfExist|IfGreater|IfGreaterOrEqual|IfInString|IfLess|IfLessOrEqual|IfMsgBox|IfNotEqual|IfNotExist|IfNotInString|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Ignore|ImageList|in|Integer|IntegerFast|Interrupt|is|italic|Join|Label|LastFound|LastFoundExist|Limit|Lines|List|ListBox|ListView|local|Lock|Logoff|Low|Lower|Lowercase|MainWindow|Margin|Maximize|MaximizeBox|MaxSize|Minimize|MinimizeBox|MinMax|MinSize|Minutes|MonthCal|Mouse|Move|Multi|NA|No|NoActivate|NoDefault|NoHide|NoIcon|NoMainWindow|norm|Normal|NoSort|NoSortHdr|NoStandard|Not|NoTab|NoTimers|Number|Off|Ok|On|OwnDialogs|Owner|Parse|Password|Picture|Pixel|Pos|Pow|Priority|ProcessName|Radio|Range|Read|ReadOnly|Realtime|Redraw|Region|REG_BINARY|REG_DWORD|REG_EXPAND_SZ|REG_MULTI_SZ|REG_SZ|Relative|Rename|Report|Resize|Restore|Retry|RGB|Screen|Seconds|Section|Serial|SetLabel|ShiftAltTab|Show|Single|Slider|SortDesc|Standard|static|Status|StatusBar|StatusCD|strike|Style|Submit|SysMenu|Tab2|TabStop|Text|Theme|Throw|Tile|ToggleCheck|ToggleEnable|ToolWindow|Top|Topmost|TransColor|Transparent|Tray|TreeView|Try|TryAgain|Type|UnCheck|underline|Unicode|Unlock|Until|UpDown|Upper|Uppercase|UseErrorLevel|Vis|VisFirst|Visible|VScroll|Wait|WaitClose|WantCtrlA|WantF2|WantReturn|While|Wrap|Xdigit|xm|xp|xs|Yes|ym|yp|ys)\b/i,
	    function: /[^(); \t,\n+*\-=?>:\\\/<&%\[\]]+(?=\()/,
	    punctuation: /[{}[\]():,]/
	  };
	}

	// @ts-nocheck
	autoit.displayName = 'autoit';
	autoit.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function autoit(Prism) {
	  Prism.languages.autoit = {
	    comment: [
	      /;.*/,
	      {
	        // The multi-line comments delimiters can actually be commented out with ";"
	        pattern:
	          /(^[\t ]*)#(?:comments-start|cs)[\s\S]*?^[ \t]*#(?:ce|comments-end)/m,
	        lookbehind: true
	      }
	    ],
	    url: {
	      pattern: /(^[\t ]*#include\s+)(?:<[^\r\n>]+>|"[^\r\n"]+")/m,
	      lookbehind: true
	    },
	    string: {
	      pattern: /(["'])(?:\1\1|(?!\1)[^\r\n])*\1/,
	      greedy: true,
	      inside: {
	        variable: /([%$@])\w+\1/
	      }
	    },
	    directive: {
	      pattern: /(^[\t ]*)#[\w-]+/m,
	      lookbehind: true,
	      alias: 'keyword'
	    },
	    function: /\b\w+(?=\()/,
	    // Variables and macros
	    variable: /[$@]\w+/,
	    keyword:
	      /\b(?:Case|Const|Continue(?:Case|Loop)|Default|Dim|Do|Else(?:If)?|End(?:Func|If|Select|Switch|With)|Enum|Exit(?:Loop)?|For|Func|Global|If|In|Local|Next|Null|ReDim|Select|Static|Step|Switch|Then|To|Until|Volatile|WEnd|While|With)\b/i,
	    number: /\b(?:0x[\da-f]+|\d+(?:\.\d+)?(?:e[+-]?\d+)?)\b/i,
	    boolean: /\b(?:False|True)\b/i,
	    operator: /<[=>]?|[-+*\/=&>]=?|[?^]|\b(?:And|Not|Or)\b/i,
	    punctuation: /[\[\]().,:]/
	  };
	}

	// @ts-nocheck
	avisynth.displayName = 'avisynth';
	avisynth.aliases = ['avs'];

	/** @type {import('../core.js').Syntax} */
	function avisynth(Prism) {
	(function (Prism) {
	    function replace(pattern, replacements) {
	      return pattern.replace(/<<(\d+)>>/g, function (m, index) {
	        return replacements[+index]
	      })
	    }
	    function re(pattern, replacements, flags) {
	      return RegExp(replace(pattern, replacements), flags || '')
	    }
	    var types = /bool|clip|float|int|string|val/.source;
	    var internals = [
	      // bools
	      /is(?:bool|clip|float|int|string)|defined|(?:(?:internal)?function|var)?exists?/
	        .source,
	      // control
	      /apply|assert|default|eval|import|nop|select|undefined/.source,
	      // global
	      /opt_(?:allowfloataudio|avipadscanlines|dwchannelmask|enable_(?:b64a|planartopackedrgb|v210|y3_10_10|y3_10_16)|usewaveextensible|vdubplanarhack)|set(?:cachemode|maxcpu|memorymax|planarlegacyalignment|workingdir)/
	        .source,
	      // conv
	      /hex(?:value)?|value/.source,
	      // numeric
	      /abs|ceil|continued(?:denominator|numerator)?|exp|floor|fmod|frac|log(?:10)?|max|min|muldiv|pi|pow|rand|round|sign|spline|sqrt/
	        .source,
	      // trig
	      /a?sinh?|a?cosh?|a?tan[2h]?/.source,
	      // bit
	      /(?:bit(?:and|not|x?or|[lr]?shift[aslu]?|sh[lr]|sa[lr]|[lr]rotatel?|ro[rl]|te?st|set(?:count)?|cl(?:ea)?r|ch(?:an)?ge?))/
	        .source,
	      // runtime
	      /average(?:[bgr]|chroma[uv]|luma)|(?:[rgb]|chroma[uv]|luma|rgb|[yuv](?=difference(?:fromprevious|tonext)))difference(?:fromprevious|tonext)?|[yuvrgb]plane(?:median|min|max|minmaxdifference)/
	        .source,
	      // script
	      /getprocessinfo|logmsg|script(?:dir(?:utf8)?|file(?:utf8)?|name(?:utf8)?)|setlogparams/
	        .source,
	      // string
	      /chr|(?:fill|find|left|mid|replace|rev|right)str|format|[lu]case|ord|str(?:cmpi?|fromutf8|len|toutf8)|time|trim(?:all|left|right)/
	        .source,
	      // version
	      /isversionorgreater|version(?:number|string)/.source,
	      // helper
	      /buildpixeltype|colorspacenametopixeltype/.source,
	      // avsplus
	      /addautoloaddir|on(?:cpu|cuda)|prefetch|setfiltermtmode/.source
	    ].join('|');
	    var properties = [
	      // content
	      /has(?:audio|video)/.source,
	      // resolution
	      /height|width/.source,
	      // framerate
	      /frame(?:count|rate)|framerate(?:denominator|numerator)/.source,
	      // interlacing
	      /getparity|is(?:field|frame)based/.source,
	      // color format
	      /bitspercomponent|componentsize|hasalpha|is(?:planar(?:rgba?)?|interleaved|rgb(?:24|32|48|64)?|y(?:8|u(?:va?|y2))?|yv(?:12|16|24|411)|420|422|444|packedrgb)|numcomponents|pixeltype/
	        .source,
	      // audio
	      /audio(?:bits|channels|duration|length(?:[fs]|hi|lo)?|rate)|isaudio(?:float|int)/
	        .source
	    ].join('|');
	    var filters = [
	      // source
	      /avi(?:file)?source|directshowsource|image(?:reader|source|sourceanim)|opendmlsource|segmented(?:avisource|directshowsource)|wavsource/
	        .source,
	      // color
	      /coloryuv|convertbacktoyuy2|convertto(?:RGB(?:24|32|48|64)|(?:planar)?RGBA?|Y8?|YV(?:12|16|24|411)|YUVA?(?:411|420|422|444)|YUY2)|fixluminance|gr[ae]yscale|invert|levels|limiter|mergea?rgb|merge(?:chroma|luma)|rgbadjust|show(?:alpha|blue|green|red)|swapuv|tweak|[uv]toy8?|ytouv/
	        .source,
	      // overlay
	      /(?:colorkey|reset)mask|layer|mask(?:hs)?|merge|overlay|subtract/.source,
	      // geometry
	      /addborders|(?:bicubic|bilinear|blackman|gauss|lanczos4|lanczos|point|sinc|spline(?:16|36|64))resize|crop(?:bottom)?|flip(?:horizontal|vertical)|(?:horizontal|vertical)?reduceby2|letterbox|skewrows|turn(?:180|left|right)/
	        .source,
	      // pixel
	      /blur|fixbrokenchromaupsampling|generalconvolution|(?:spatial|temporal)soften|sharpen/
	        .source,
	      // timeline
	      /trim|(?:un)?alignedsplice|(?:assume|assumescaled|change|convert)FPS|(?:delete|duplicate)frame|dissolve|fade(?:in|io|out)[02]?|freezeframe|interleave|loop|reverse|select(?:even|odd|(?:range)?every)/
	        .source,
	      // interlace
	      /assume[bt]ff|assume(?:field|frame)based|bob|complementparity|doubleweave|peculiarblend|pulldown|separate(?:columns|fields|rows)|swapfields|weave(?:columns|rows)?/
	        .source,
	      // audio
	      /amplify(?:db)?|assumesamplerate|audiodub(?:ex)?|audiotrim|convertaudioto(?:(?:8|16|24|32)bit|float)|converttomono|delayaudio|ensurevbrmp3sync|get(?:left|right)?channel|kill(?:audio|video)|mergechannels|mixaudio|monotostereo|normalize|resampleaudio|ssrc|supereq|timestretch/
	        .source,
	      // conditional
	      /animate|applyrange|conditional(?:filter|reader|select)|frameevaluate|scriptclip|tcp(?:server|source)|writefile(?:end|if|start)?/
	        .source,
	      // export
	      /imagewriter/.source,
	      // debug
	      /blackness|blankclip|colorbars(?:hd)?|compare|dumpfiltergraph|echo|histogram|info|messageclip|preroll|setgraphanalysis|show(?:framenumber|smpte|time)|showfiveversions|stack(?:horizontal|vertical)|subtitle|tone|version/
	        .source
	    ].join('|');
	    var allinternals = [internals, properties, filters].join('|');
	    Prism.languages.avisynth = {
	      comment: [
	        {
	          // Matches [* *] nestable block comments, but only supports 1 level of nested comments
	          // /\[\*(?:[^\[*]|\[(?!\*)|\*(?!\])|<self>)*\*\]/
	          pattern:
	            /(^|[^\\])\[\*(?:[^\[*]|\[(?!\*)|\*(?!\])|\[\*(?:[^\[*]|\[(?!\*)|\*(?!\]))*\*\])*\*\]/,
	          lookbehind: true,
	          greedy: true
	        },
	        {
	          // Matches /* */ block comments
	          pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
	          lookbehind: true,
	          greedy: true
	        },
	        {
	          // Matches # comments
	          pattern: /(^|[^\\$])#.*/,
	          lookbehind: true,
	          greedy: true
	        }
	      ],
	      // Handle before strings because optional arguments are surrounded by double quotes
	      argument: {
	        pattern: re(/\b(?:<<0>>)\s+("?)\w+\1/.source, [types], 'i'),
	        inside: {
	          keyword: /^\w+/
	        }
	      },
	      // Optional argument assignment
	      'argument-label': {
	        pattern: /([,(][\s\\]*)\w+\s*=(?!=)/,
	        lookbehind: true,
	        inside: {
	          'argument-name': {
	            pattern: /^\w+/,
	            alias: 'punctuation'
	          },
	          punctuation: /=$/
	        }
	      },
	      string: [
	        {
	          // triple double-quoted
	          pattern: /"""[\s\S]*?"""/,
	          greedy: true
	        },
	        {
	          // single double-quoted
	          pattern: /"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,
	          greedy: true,
	          inside: {
	            constant: {
	              // These *are* case-sensitive!
	              pattern:
	                /\b(?:DEFAULT_MT_MODE|(?:MAINSCRIPT|PROGRAM|SCRIPT)DIR|(?:MACHINE|USER)_(?:CLASSIC|PLUS)_PLUGINS)\b/
	            }
	          }
	        }
	      ],
	      // The special "last" variable that takes the value of the last implicitly returned clip
	      variable: /\b(?:last)\b/i,
	      boolean: /\b(?:false|no|true|yes)\b/i,
	      keyword:
	        /\b(?:catch|else|for|function|global|if|return|try|while|__END__)\b/i,
	      constant: /\bMT_(?:MULTI_INSTANCE|NICE_FILTER|SERIALIZED|SPECIAL_MT)\b/,
	      // AviSynth's internal functions, filters, and properties
	      'builtin-function': {
	        pattern: re(/\b(?:<<0>>)\b/.source, [allinternals], 'i'),
	        alias: 'function'
	      },
	      'type-cast': {
	        pattern: re(/\b(?:<<0>>)(?=\s*\()/.source, [types], 'i'),
	        alias: 'keyword'
	      },
	      // External/user-defined filters
	      function: {
	        pattern: /\b[a-z_]\w*(?=\s*\()|(\.)[a-z_]\w*\b/i,
	        lookbehind: true
	      },
	      // Matches a \ as the first or last character on a line
	      'line-continuation': {
	        pattern: /(^[ \t]*)\\|\\(?=[ \t]*$)/m,
	        lookbehind: true,
	        alias: 'punctuation'
	      },
	      number:
	        /\B\$(?:[\da-f]{6}|[\da-f]{8})\b|(?:(?:\b|\B-)\d+(?:\.\d*)?\b|\B\.\d+\b)/i,
	      operator: /\+\+?|[!=<>]=?|&&|\|\||[?:*/%-]/,
	      punctuation: /[{}\[\]();,.]/
	    };
	    Prism.languages.avs = Prism.languages.avisynth;
	  })(Prism);
	}

	// @ts-nocheck
	avroIdl.displayName = 'avro-idl';
	avroIdl.aliases = ['avdl'];

	/** @type {import('../core.js').Syntax} */
	function avroIdl(Prism) {
	  // GitHub: https://github.com/apache/avro
	  // Docs: https://avro.apache.org/docs/current/idl.html

	  Prism.languages['avro-idl'] = {
	    comment: {
	      pattern: /\/\/.*|\/\*[\s\S]*?\*\//,
	      greedy: true
	    },
	    string: {
	      pattern: /(^|[^\\])"(?:[^\r\n"\\]|\\.)*"/,
	      lookbehind: true,
	      greedy: true
	    },
	    annotation: {
	      pattern: /@(?:[$\w.-]|`[^\r\n`]+`)+/,
	      greedy: true,
	      alias: 'function'
	    },
	    'function-identifier': {
	      pattern: /`[^\r\n`]+`(?=\s*\()/,
	      greedy: true,
	      alias: 'function'
	    },
	    identifier: {
	      pattern: /`[^\r\n`]+`/,
	      greedy: true
	    },
	    'class-name': {
	      pattern: /(\b(?:enum|error|protocol|record|throws)\b\s+)[$\w]+/,
	      lookbehind: true,
	      greedy: true
	    },
	    keyword:
	      /\b(?:array|boolean|bytes|date|decimal|double|enum|error|false|fixed|float|idl|import|int|local_timestamp_ms|long|map|null|oneway|protocol|record|schema|string|throws|time_ms|timestamp_ms|true|union|uuid|void)\b/,
	    function: /\b[a-z_]\w*(?=\s*\()/i,
	    number: [
	      {
	        pattern:
	          /(^|[^\w.])-?(?:(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?|0x(?:[a-f0-9]+(?:\.[a-f0-9]*)?|\.[a-f0-9]+)(?:p[+-]?\d+)?)[dfl]?(?![\w.])/i,
	        lookbehind: true
	      },
	      /-?\b(?:Infinity|NaN)\b/
	    ],
	    operator: /=/,
	    punctuation: /[()\[\]{}<>.:,;-]/
	  };
	  Prism.languages.avdl = Prism.languages['avro-idl'];
	}

	// @ts-nocheck
	awk.displayName = 'awk';
	awk.aliases = ['gawk'];

	/** @type {import('../core.js').Syntax} */
	function awk(Prism) {
	  Prism.languages.awk = {
	    hashbang: {
	      pattern: /^#!.*/,
	      greedy: true,
	      alias: 'comment'
	    },
	    comment: {
	      pattern: /#.*/,
	      greedy: true
	    },
	    string: {
	      pattern: /(^|[^\\])"(?:[^\\"\r\n]|\\.)*"/,
	      lookbehind: true,
	      greedy: true
	    },
	    regex: {
	      pattern: /((?:^|[^\w\s)])\s*)\/(?:[^\/\\\r\n]|\\.)*\//,
	      lookbehind: true,
	      greedy: true
	    },
	    variable: /\$\w+/,
	    keyword:
	      /\b(?:BEGIN|BEGINFILE|END|ENDFILE|break|case|continue|default|delete|do|else|exit|for|function|getline|if|in|next|nextfile|printf?|return|switch|while)\b|@(?:include|load)\b/,
	    function: /\b[a-z_]\w*(?=\s*\()/i,
	    number: /\b(?:\d+(?:\.\d+)?(?:e[+-]?\d+)?|0x[a-fA-F0-9]+)\b/,
	    operator: /--|\+\+|!?~|>&|>>|<<|(?:\*\*|[<>!=+\-*/%^])=?|&&|\|[|&]|[?:]/,
	    punctuation: /[()[\]{},;]/
	  };
	  Prism.languages.gawk = Prism.languages.awk;
	}

	// @ts-nocheck
	batch.displayName = 'batch';
	batch.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function batch(Prism) {
	(function (Prism) {
	    var variable = /%%?[~:\w]+%?|!\S+!/;
	    var parameter = {
	      pattern: /\/[a-z?]+(?=[ :]|$):?|-[a-z]\b|--[a-z-]+\b/im,
	      alias: 'attr-name',
	      inside: {
	        punctuation: /:/
	      }
	    };
	    var string = /"(?:[\\"]"|[^"])*"(?!")/;
	    var number = /(?:\b|-)\d+\b/;
	    Prism.languages.batch = {
	      comment: [
	        /^::.*/m,
	        {
	          pattern: /((?:^|[&(])[ \t]*)rem\b(?:[^^&)\r\n]|\^(?:\r\n|[\s\S]))*/im,
	          lookbehind: true
	        }
	      ],
	      label: {
	        pattern: /^:.*/m,
	        alias: 'property'
	      },
	      command: [
	        {
	          // FOR command
	          pattern:
	            /((?:^|[&(])[ \t]*)for(?: \/[a-z?](?:[ :](?:"[^"]*"|[^\s"/]\S*))?)* \S+ in \([^)]+\) do/im,
	          lookbehind: true,
	          inside: {
	            keyword: /\b(?:do|in)\b|^for\b/i,
	            string: string,
	            parameter: parameter,
	            variable: variable,
	            number: number,
	            punctuation: /[()',]/
	          }
	        },
	        {
	          // IF command
	          pattern:
	            /((?:^|[&(])[ \t]*)if(?: \/[a-z?](?:[ :](?:"[^"]*"|[^\s"/]\S*))?)* (?:not )?(?:cmdextversion \d+|defined \w+|errorlevel \d+|exist \S+|(?:"[^"]*"|(?!")(?:(?!==)\S)+)?(?:==| (?:equ|geq|gtr|leq|lss|neq) )(?:"[^"]*"|[^\s"]\S*))/im,
	          lookbehind: true,
	          inside: {
	            keyword:
	              /\b(?:cmdextversion|defined|errorlevel|exist|not)\b|^if\b/i,
	            string: string,
	            parameter: parameter,
	            variable: variable,
	            number: number,
	            operator: /\^|==|\b(?:equ|geq|gtr|leq|lss|neq)\b/i
	          }
	        },
	        {
	          // ELSE command
	          pattern: /((?:^|[&()])[ \t]*)else\b/im,
	          lookbehind: true,
	          inside: {
	            keyword: /^else\b/i
	          }
	        },
	        {
	          // SET command
	          pattern:
	            /((?:^|[&(])[ \t]*)set(?: \/[a-z](?:[ :](?:"[^"]*"|[^\s"/]\S*))?)* (?:[^^&)\r\n]|\^(?:\r\n|[\s\S]))*/im,
	          lookbehind: true,
	          inside: {
	            keyword: /^set\b/i,
	            string: string,
	            parameter: parameter,
	            variable: [variable, /\w+(?=(?:[*\/%+\-&^|]|<<|>>)?=)/],
	            number: number,
	            operator: /[*\/%+\-&^|]=?|<<=?|>>=?|[!~_=]/,
	            punctuation: /[()',]/
	          }
	        },
	        {
	          // Other commands
	          pattern:
	            /((?:^|[&(])[ \t]*@?)\w+\b(?:"(?:[\\"]"|[^"])*"(?!")|[^"^&)\r\n]|\^(?:\r\n|[\s\S]))*/m,
	          lookbehind: true,
	          inside: {
	            keyword: /^\w+\b/,
	            string: string,
	            parameter: parameter,
	            label: {
	              pattern: /(^\s*):\S+/m,
	              lookbehind: true,
	              alias: 'property'
	            },
	            variable: variable,
	            number: number,
	            operator: /\^/
	          }
	        }
	      ],
	      operator: /[&@]/,
	      punctuation: /[()']/
	    };
	  })(Prism);
	}

	// @ts-nocheck
	bbcode.displayName = 'bbcode';
	bbcode.aliases = ['shortcode'];

	/** @type {import('../core.js').Syntax} */
	function bbcode(Prism) {
	  Prism.languages.bbcode = {
	    tag: {
	      pattern:
	        /\[\/?[^\s=\]]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'"\]=]+))?(?:\s+[^\s=\]]+\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'"\]=]+))*\s*\]/,
	      inside: {
	        tag: {
	          pattern: /^\[\/?[^\s=\]]+/,
	          inside: {
	            punctuation: /^\[\/?/
	          }
	        },
	        'attr-value': {
	          pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'"\]=]+)/,
	          inside: {
	            punctuation: [
	              /^=/,
	              {
	                pattern: /^(\s*)["']|["']$/,
	                lookbehind: true
	              }
	            ]
	          }
	        },
	        punctuation: /\]/,
	        'attr-name': /[^\s=\]]+/
	      }
	    }
	  };
	  Prism.languages.shortcode = Prism.languages.bbcode;
	}

	// @ts-nocheck
	bbj.displayName = 'bbj';
	bbj.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function bbj(Prism) {
	(function (Prism) {
	    Prism.languages.bbj = {
	      comment: {
	        pattern: /(^|[^\\:])rem\s+.*/i,
	        lookbehind: true,
	        greedy: true
	      },
	      string: {
	        pattern: /(['"])(?:(?!\1|\\).|\\.)*\1/,
	        greedy: true
	      },
	      number: /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:E[+-]?\d+)?/i,
	      keyword:
	        /\b(?:abstract|all|argc|begin|bye|callback|case|chn|class|classend|ctl|day|declare|delete|dim|dom|dread|dsz|else|end|endif|err|exitto|extends|fi|field|for|from|gosub|goto|if|implements|interface|interfaceend|iol|iolist|let|list|load|method|methodend|methodret|on|opts|pfx|print|private|process_events|protected|psz|public|read|read_resource|release|remove_callback|repeat|restore|return|rev|seterr|setesc|sqlchn|sqlunt|ssn|start|static|swend|switch|sys|then|tim|unt|until|use|void|wend|where|while)\b/i,
	      function: /\b\w+(?=\()/,
	      boolean: /\b(?:BBjAPI\.TRUE|BBjAPI\.FALSE)\b/i,
	      operator: /<[=>]?|>=?|[+\-*\/^=&]|\b(?:and|not|or|xor)\b/i,
	      punctuation: /[.,;:()]/
	    };
	  })(Prism);
	}

	// @ts-nocheck
	bicep.displayName = 'bicep';
	bicep.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function bicep(Prism) {
	  // based loosely upon: https://github.com/Azure/bicep/blob/main/src/textmate/bicep.tmlanguage
	  Prism.languages.bicep = {
	    comment: [
	      {
	        // multiline comments eg /* ASDF */
	        pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
	        lookbehind: true,
	        greedy: true
	      },
	      {
	        // singleline comments eg // ASDF
	        pattern: /(^|[^\\:])\/\/.*/,
	        lookbehind: true,
	        greedy: true
	      }
	    ],
	    property: [
	      {
	        pattern: /([\r\n][ \t]*)[a-z_]\w*(?=[ \t]*:)/i,
	        lookbehind: true
	      },
	      {
	        pattern: /([\r\n][ \t]*)'(?:\\.|\$(?!\{)|[^'\\\r\n$])*'(?=[ \t]*:)/,
	        lookbehind: true,
	        greedy: true
	      }
	    ],
	    string: [
	      {
	        pattern: /'''[^'][\s\S]*?'''/,
	        greedy: true
	      },
	      {
	        pattern: /(^|[^\\'])'(?:\\.|\$(?!\{)|[^'\\\r\n$])*'/,
	        lookbehind: true,
	        greedy: true
	      }
	    ],
	    'interpolated-string': {
	      pattern: /(^|[^\\'])'(?:\\.|\$(?:(?!\{)|\{[^{}\r\n]*\})|[^'\\\r\n$])*'/,
	      lookbehind: true,
	      greedy: true,
	      inside: {
	        interpolation: {
	          pattern: /\$\{[^{}\r\n]*\}/,
	          inside: {
	            expression: {
	              pattern: /(^\$\{)[\s\S]+(?=\}$)/,
	              lookbehind: true
	            },
	            punctuation: /^\$\{|\}$/
	          }
	        },
	        string: /[\s\S]+/
	      }
	    },
	    datatype: {
	      pattern: /(\b(?:output|param)\b[ \t]+\w+[ \t]+)\w+\b/,
	      lookbehind: true,
	      alias: 'class-name'
	    },
	    boolean: /\b(?:false|true)\b/,
	    // https://github.com/Azure/bicep/blob/114a3251b4e6e30082a58729f19a8cc4e374ffa6/src/textmate/bicep.tmlanguage#L184
	    keyword:
	      /\b(?:existing|for|if|in|module|null|output|param|resource|targetScope|var)\b/,
	    decorator: /@\w+\b/,
	    function: /\b[a-z_]\w*(?=[ \t]*\()/i,
	    number: /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:E[+-]?\d+)?/i,
	    operator:
	      /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/,
	    punctuation: /[{}[\];(),.:]/
	  };
	  Prism.languages.bicep['interpolated-string'].inside['interpolation'].inside[
	    'expression'
	  ].inside = Prism.languages.bicep;
	}

	// @ts-nocheck
	birb.displayName = 'birb';
	birb.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function birb(Prism) {
	  Prism.register(clike);
	  Prism.languages.birb = Prism.languages.extend('clike', {
	    string: {
	      pattern: /r?("|')(?:\\.|(?!\1)[^\\])*\1/,
	      greedy: true
	    },
	    'class-name': [
	      /\b[A-Z](?:[\d_]*[a-zA-Z]\w*)?\b/,
	      // matches variable and function return types (parameters as well).
	      /\b(?:[A-Z]\w*|(?!(?:var|void)\b)[a-z]\w*)(?=\s+\w+\s*[;,=()])/
	    ],
	    keyword:
	      /\b(?:assert|break|case|class|const|default|else|enum|final|follows|for|grab|if|nest|new|next|noSeeb|return|static|switch|throw|var|void|while)\b/,
	    operator: /\+\+|--|&&|\|\||<<=?|>>=?|~(?:\/=?)?|[+\-*\/%&^|=!<>]=?|\?|:/,
	    variable: /\b[a-z_]\w*\b/
	  });
	  Prism.languages.insertBefore('birb', 'function', {
	    metadata: {
	      pattern: /<\w+>/,
	      greedy: true,
	      alias: 'symbol'
	    }
	  });
	}

	// @ts-nocheck
	bison.displayName = 'bison';
	bison.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function bison(Prism) {
	  Prism.register(c$1);
	  Prism.languages.bison = Prism.languages.extend('c', {});
	  Prism.languages.insertBefore('bison', 'comment', {
	    bison: {
	      // This should match all the beginning of the file
	      // including the prologue(s), the bison declarations and
	      // the grammar rules.
	      pattern: /^(?:[^%]|%(?!%))*%%[\s\S]*?%%/,
	      inside: {
	        c: {
	          // Allow for one level of nested braces
	          pattern: /%\{[\s\S]*?%\}|\{(?:\{[^}]*\}|[^{}])*\}/,
	          inside: {
	            delimiter: {
	              pattern: /^%?\{|%?\}$/,
	              alias: 'punctuation'
	            },
	            'bison-variable': {
	              pattern: /[$@](?:<[^\s>]+>)?[\w$]+/,
	              alias: 'variable',
	              inside: {
	                punctuation: /<|>/
	              }
	            },
	            rest: Prism.languages.c
	          }
	        },
	        comment: Prism.languages.c.comment,
	        string: Prism.languages.c.string,
	        property: /\S+(?=:)/,
	        keyword: /%\w+/,
	        number: {
	          pattern: /(^|[^@])\b(?:0x[\da-f]+|\d+)/i,
	          lookbehind: true
	        },
	        punctuation: /%[%?]|[|:;\[\]<>]/
	      }
	    }
	  });
	}

	// @ts-nocheck
	bnf.displayName = 'bnf';
	bnf.aliases = ['rbnf'];

	/** @type {import('../core.js').Syntax} */
	function bnf(Prism) {
	  Prism.languages.bnf = {
	    string: {
	      pattern: /"[^\r\n"]*"|'[^\r\n']*'/
	    },
	    definition: {
	      pattern: /<[^<>\r\n\t]+>(?=\s*::=)/,
	      alias: ['rule', 'keyword'],
	      inside: {
	        punctuation: /^<|>$/
	      }
	    },
	    rule: {
	      pattern: /<[^<>\r\n\t]+>/,
	      inside: {
	        punctuation: /^<|>$/
	      }
	    },
	    operator: /::=|[|()[\]{}*+?]|\.{3}/
	  };
	  Prism.languages.rbnf = Prism.languages.bnf;
	}

	// @ts-nocheck
	bqn.displayName = 'bqn';
	bqn.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function bqn(Prism) {
	  Prism.languages.bqn = {
	    shebang: {
	      pattern: /^#![ \t]*\/.*/,
	      alias: 'important',
	      greedy: true
	    },
	    comment: {
	      pattern: /#.*/,
	      greedy: true
	    },
	    'string-literal': {
	      pattern: /"(?:[^"]|"")*"/,
	      greedy: true,
	      alias: 'string'
	    },
	    'character-literal': {
	      pattern: /'(?:[\s\S]|[\uD800-\uDBFF][\uDC00-\uDFFF])'/,
	      greedy: true,
	      alias: 'char'
	    },
	    function: /•[\w¯.∞π]+[\w¯.∞π]*/,
	    'dot-notation-on-brackets': {
	      pattern: /\{(?=.*\}\.)|\}\./,
	      alias: 'namespace'
	    },
	    'special-name': {
	      pattern: /(?:𝕨|𝕩|𝕗|𝕘|𝕤|𝕣|𝕎|𝕏|𝔽|𝔾|𝕊|_𝕣_|_𝕣)/,
	      alias: 'keyword'
	    },
	    'dot-notation-on-name': {
	      pattern: /[A-Za-z_][\w¯∞π]*\./,
	      alias: 'namespace'
	    },
	    'word-number-scientific': {
	      pattern: /\d+(?:\.\d+)?[eE]¯?\d+/,
	      alias: 'number'
	    },
	    'word-name': {
	      pattern: /[A-Za-z_][\w¯∞π]*/,
	      alias: 'symbol'
	    },
	    'word-number': {
	      pattern:
	        /[¯∞π]?(?:\d*\.?\b\d+(?:e[+¯]?\d+|E[+¯]?\d+)?|¯|∞|π)(?:j¯?(?:(?:\d+(?:\.\d+)?|\.\d+)(?:e[+¯]?\d+|E[+¯]?\d+)?|¯|∞|π))?/,
	      alias: 'number'
	    },
	    'null-literal': {
	      pattern: /@/,
	      alias: 'char'
	    },
	    'primitive-functions': {
	      pattern: /[-+×÷⋆√⌊⌈|¬∧∨<>≠=≤≥≡≢⊣⊢⥊∾≍⋈↑↓↕«»⌽⍉/⍋⍒⊏⊑⊐⊒∊⍷⊔!]/,
	      alias: 'operator'
	    },
	    'primitive-1-operators': {
	      pattern: /[`˜˘¨⁼⌜´˝˙]/,
	      alias: 'operator'
	    },
	    'primitive-2-operators': {
	      pattern: /[∘⊸⟜○⌾⎉⚇⍟⊘◶⎊]/,
	      alias: 'operator'
	    },
	    punctuation: /[←⇐↩(){}⟨⟩[\]‿·⋄,.;:?]/
	  };
	}

	// @ts-nocheck
	brainfuck.displayName = 'brainfuck';
	brainfuck.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function brainfuck(Prism) {
	  Prism.languages.brainfuck = {
	    pointer: {
	      pattern: /<|>/,
	      alias: 'keyword'
	    },
	    increment: {
	      pattern: /\+/,
	      alias: 'inserted'
	    },
	    decrement: {
	      pattern: /-/,
	      alias: 'deleted'
	    },
	    branching: {
	      pattern: /\[|\]/,
	      alias: 'important'
	    },
	    operator: /[.,]/,
	    comment: /\S+/
	  };
	}

	// @ts-nocheck
	brightscript.displayName = 'brightscript';
	brightscript.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function brightscript(Prism) {
	  Prism.languages.brightscript = {
	    comment: /(?:\brem|').*/i,
	    'directive-statement': {
	      pattern: /(^[\t ]*)#(?:const|else(?:[\t ]+if)?|end[\t ]+if|error|if).*/im,
	      lookbehind: true,
	      alias: 'property',
	      inside: {
	        'error-message': {
	          pattern: /(^#error).+/,
	          lookbehind: true
	        },
	        directive: {
	          pattern: /^#(?:const|else(?:[\t ]+if)?|end[\t ]+if|error|if)/,
	          alias: 'keyword'
	        },
	        expression: {
	          pattern: /[\s\S]+/,
	          inside: null // see below
	        }
	      }
	    },

	    property: {
	      pattern:
	        /([\r\n{,][\t ]*)(?:(?!\d)\w+|"(?:[^"\r\n]|"")*"(?!"))(?=[ \t]*:)/,
	      lookbehind: true,
	      greedy: true
	    },
	    string: {
	      pattern: /"(?:[^"\r\n]|"")*"(?!")/,
	      greedy: true
	    },
	    'class-name': {
	      pattern: /(\bAs[\t ]+)\w+/i,
	      lookbehind: true
	    },
	    keyword:
	      /\b(?:As|Dim|Each|Else|Elseif|End|Exit|For|Function|Goto|If|In|Print|Return|Step|Stop|Sub|Then|To|While)\b/i,
	    boolean: /\b(?:false|true)\b/i,
	    function: /\b(?!\d)\w+(?=[\t ]*\()/,
	    number: /(?:\b\d+(?:\.\d+)?(?:[ed][+-]\d+)?|&h[a-f\d]+)\b[%&!#]?/i,
	    operator:
	      /--|\+\+|>>=?|<<=?|<>|[-+*/\\<>]=?|[:^=?]|\b(?:and|mod|not|or)\b/i,
	    punctuation: /[.,;()[\]{}]/,
	    constant: /\b(?:LINE_NUM)\b/i
	  };
	  Prism.languages.brightscript['directive-statement'].inside.expression.inside =
	    Prism.languages.brightscript;
	}

	// @ts-nocheck
	bro.displayName = 'bro';
	bro.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function bro(Prism) {
	  Prism.languages.bro = {
	    comment: {
	      pattern: /(^|[^\\$])#.*/,
	      lookbehind: true,
	      inside: {
	        italic: /\b(?:FIXME|TODO|XXX)\b/
	      }
	    },
	    string: {
	      pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
	      greedy: true
	    },
	    boolean: /\b[TF]\b/,
	    function: {
	      pattern: /(\b(?:event|function|hook)[ \t]+)\w+(?:::\w+)?/,
	      lookbehind: true
	    },
	    builtin:
	      /(?:@(?:load(?:-(?:plugin|sigs))?|unload|prefixes|ifn?def|else|(?:end)?if|DIR|FILENAME))|(?:&?(?:add_func|create_expire|default|delete_func|encrypt|error_handler|expire_func|group|log|mergeable|optional|persistent|priority|raw_output|read_expire|redef|rotate_interval|rotate_size|synchronized|type_column|write_expire))/,
	    constant: {
	      pattern: /(\bconst[ \t]+)\w+/i,
	      lookbehind: true
	    },
	    keyword:
	      /\b(?:add|addr|alarm|any|bool|break|const|continue|count|delete|double|else|enum|event|export|file|for|function|global|hook|if|in|int|interval|local|module|next|of|opaque|pattern|port|print|record|return|schedule|set|string|subnet|table|time|timeout|using|vector|when)\b/,
	    operator: /--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&|\|\|?|\?|\*|\/|~|\^|%/,
	    number: /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
	    punctuation: /[{}[\];(),.:]/
	  };
	}

	// @ts-nocheck
	bsl.displayName = 'bsl';
	bsl.aliases = ['oscript'];

	/** @type {import('../core.js').Syntax} */
	function bsl(Prism) {
	  /* eslint-disable no-misleading-character-class */

	  // 1C:Enterprise
	  // https://github.com/Diversus23/
	  //
	  Prism.languages.bsl = {
	    comment: /\/\/.*/,
	    string: [
	      // Строки
	      // Strings
	      {
	        pattern: /"(?:[^"]|"")*"(?!")/,
	        greedy: true
	      },
	      // Дата и время
	      // Date & time
	      {
	        pattern: /'(?:[^'\r\n\\]|\\.)*'/
	      }
	    ],
	    keyword: [
	      {
	        // RU
	        pattern:
	          /(^|[^\w\u0400-\u0484\u0487-\u052f\u1d2b\u1d78\u2de0-\u2dff\ua640-\ua69f\ufe2e\ufe2f])(?:пока|для|новый|прервать|попытка|исключение|вызватьисключение|иначе|конецпопытки|неопределено|функция|перем|возврат|конецфункции|если|иначеесли|процедура|конецпроцедуры|тогда|знач|экспорт|конецесли|из|каждого|истина|ложь|по|цикл|конеццикла|выполнить)(?![\w\u0400-\u0484\u0487-\u052f\u1d2b\u1d78\u2de0-\u2dff\ua640-\ua69f\ufe2e\ufe2f])/i,
	        lookbehind: true
	      },
	      {
	        // EN
	        pattern:
	          /\b(?:break|do|each|else|elseif|enddo|endfunction|endif|endprocedure|endtry|except|execute|export|false|for|function|if|in|new|null|procedure|raise|return|then|to|true|try|undefined|val|var|while)\b/i
	      }
	    ],
	    number: {
	      pattern:
	        /(^(?=\d)|[^\w\u0400-\u0484\u0487-\u052f\u1d2b\u1d78\u2de0-\u2dff\ua640-\ua69f\ufe2e\ufe2f])(?:\d+(?:\.\d*)?|\.\d+)(?:E[+-]?\d+)?/i,
	      lookbehind: true
	    },
	    operator: [
	      /[<>+\-*/]=?|[%=]/,
	      // RU
	      {
	        pattern:
	          /(^|[^\w\u0400-\u0484\u0487-\u052f\u1d2b\u1d78\u2de0-\u2dff\ua640-\ua69f\ufe2e\ufe2f])(?:и|или|не)(?![\w\u0400-\u0484\u0487-\u052f\u1d2b\u1d78\u2de0-\u2dff\ua640-\ua69f\ufe2e\ufe2f])/i,
	        lookbehind: true
	      },
	      // EN
	      {
	        pattern: /\b(?:and|not|or)\b/i
	      }
	    ],
	    punctuation: /\(\.|\.\)|[()\[\]:;,.]/,
	    directive: [
	      // Теги препроцессора вида &Клиент, &Сервер, ...
	      // Preprocessor tags of the type &Client, &Server, ...
	      {
	        pattern: /^([ \t]*)&.*/m,
	        lookbehind: true,
	        greedy: true,
	        alias: 'important'
	      },
	      // Инструкции препроцессора вида:
	      // #Если Сервер Тогда
	      // ...
	      // #КонецЕсли
	      // Preprocessor instructions of the form:
	      // #If Server Then
	      // ...
	      // #EndIf
	      {
	        pattern: /^([ \t]*)#.*/gm,
	        lookbehind: true,
	        greedy: true,
	        alias: 'important'
	      }
	    ]
	  };
	  Prism.languages.oscript = Prism.languages['bsl'];
	}

	// @ts-nocheck
	cfscript.displayName = 'cfscript';
	cfscript.aliases = ['cfc'];

	/** @type {import('../core.js').Syntax} */
	function cfscript(Prism) {
	  Prism.register(clike);
	  // https://cfdocs.org/script
	  Prism.languages.cfscript = Prism.languages.extend('clike', {
	    comment: [
	      {
	        pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
	        lookbehind: true,
	        inside: {
	          annotation: {
	            pattern: /(?:^|[^.])@[\w\.]+/,
	            alias: 'punctuation'
	          }
	        }
	      },
	      {
	        pattern: /(^|[^\\:])\/\/.*/,
	        lookbehind: true,
	        greedy: true
	      }
	    ],
	    keyword:
	      /\b(?:abstract|break|catch|component|continue|default|do|else|extends|final|finally|for|function|if|in|include|package|private|property|public|remote|required|rethrow|return|static|switch|throw|try|var|while|xml)\b(?!\s*=)/,
	    operator: [
	      /\+\+|--|&&|\|\||::|=>|[!=]==|[-+*/%&|^!=<>]=?|\?(?:\.|:)?|:/,
	      /\b(?:and|contains|eq|equal|eqv|gt|gte|imp|is|lt|lte|mod|not|or|xor)\b/
	    ],
	    scope: {
	      pattern:
	        /\b(?:application|arguments|cgi|client|cookie|local|session|super|this|variables)\b/,
	      alias: 'global'
	    },
	    type: {
	      pattern:
	        /\b(?:any|array|binary|boolean|date|guid|numeric|query|string|struct|uuid|void|xml)\b/,
	      alias: 'builtin'
	    }
	  });
	  Prism.languages.insertBefore('cfscript', 'keyword', {
	    // This must be declared before keyword because we use "function" inside the lookahead
	    'function-variable': {
	      pattern:
	        /[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
	      alias: 'function'
	    }
	  });
	  delete Prism.languages.cfscript['class-name'];
	  Prism.languages.cfc = Prism.languages['cfscript'];
	}

	// @ts-nocheck
	chaiscript.displayName = 'chaiscript';
	chaiscript.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function chaiscript(Prism) {
	  Prism.register(clike);
	  Prism.register(cpp);
	  Prism.languages.chaiscript = Prism.languages.extend('clike', {
	    string: {
	      pattern: /(^|[^\\])'(?:[^'\\]|\\[\s\S])*'/,
	      lookbehind: true,
	      greedy: true
	    },
	    'class-name': [
	      {
	        // e.g. class Rectangle { ... }
	        pattern: /(\bclass\s+)\w+/,
	        lookbehind: true
	      },
	      {
	        // e.g. attr Rectangle::height, def Rectangle::area() { ... }
	        pattern: /(\b(?:attr|def)\s+)\w+(?=\s*::)/,
	        lookbehind: true
	      }
	    ],
	    keyword:
	      /\b(?:attr|auto|break|case|catch|class|continue|def|default|else|finally|for|fun|global|if|return|switch|this|try|var|while)\b/,
	    number: [Prism.languages.cpp.number, /\b(?:Infinity|NaN)\b/],
	    operator:
	      />>=?|<<=?|\|\||&&|:[:=]?|--|\+\+|[=!<>+\-*/%|&^]=?|[?~]|`[^`\r\n]{1,4}`/
	  });
	  Prism.languages.insertBefore('chaiscript', 'operator', {
	    'parameter-type': {
	      // e.g. def foo(int x, Vector y) {...}
	      pattern: /([,(]\s*)\w+(?=\s+\w)/,
	      lookbehind: true,
	      alias: 'class-name'
	    }
	  });
	  Prism.languages.insertBefore('chaiscript', 'string', {
	    'string-interpolation': {
	      pattern:
	        /(^|[^\\])"(?:[^"$\\]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{(?:[^{}]|\{[^{}]*\})*\})*\})*"/,
	      lookbehind: true,
	      greedy: true,
	      inside: {
	        interpolation: {
	          pattern:
	            /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^{}]*\})*\})*\}/,
	          lookbehind: true,
	          inside: {
	            'interpolation-expression': {
	              pattern: /(^\$\{)[\s\S]+(?=\}$)/,
	              lookbehind: true,
	              inside: Prism.languages.chaiscript
	            },
	            'interpolation-punctuation': {
	              pattern: /^\$\{|\}$/,
	              alias: 'punctuation'
	            }
	          }
	        },
	        string: /[\s\S]+/
	      }
	    }
	  });
	}

	// @ts-nocheck
	cil.displayName = 'cil';
	cil.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function cil(Prism) {
	  Prism.languages.cil = {
	    comment: /\/\/.*/,
	    string: {
	      pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
	      greedy: true
	    },
	    directive: {
	      pattern: /(^|\W)\.[a-z]+(?=\s)/,
	      lookbehind: true,
	      alias: 'class-name'
	    },
	    // Actually an assembly reference
	    variable: /\[[\w\.]+\]/,
	    keyword:
	      /\b(?:abstract|ansi|assembly|auto|autochar|beforefieldinit|bool|bstr|byvalstr|catch|char|cil|class|currency|date|decimal|default|enum|error|explicit|extends|extern|famandassem|family|famorassem|final(?:ly)?|float32|float64|hidebysig|u?int(?:8|16|32|64)?|iant|idispatch|implements|import|initonly|instance|interface|iunknown|literal|lpstr|lpstruct|lptstr|lpwstr|managed|method|native(?:Type)?|nested|newslot|object(?:ref)?|pinvokeimpl|private|privatescope|public|reqsecobj|rtspecialname|runtime|sealed|sequential|serializable|specialname|static|string|struct|syschar|tbstr|unicode|unmanagedexp|unsigned|value(?:type)?|variant|virtual|void)\b/,
	    function:
	      /\b(?:(?:constrained|no|readonly|tail|unaligned|volatile)\.)?(?:conv\.(?:[iu][1248]?|ovf\.[iu][1248]?(?:\.un)?|r\.un|r4|r8)|ldc\.(?:i4(?:\.\d+|\.[mM]1|\.s)?|i8|r4|r8)|ldelem(?:\.[iu][1248]?|\.r[48]|\.ref|a)?|ldind\.(?:[iu][1248]?|r[48]|ref)|stelem\.?(?:i[1248]?|r[48]|ref)?|stind\.(?:i[1248]?|r[48]|ref)?|end(?:fault|filter|finally)|ldarg(?:\.[0-3s]|a(?:\.s)?)?|ldloc(?:\.\d+|\.s)?|sub(?:\.ovf(?:\.un)?)?|mul(?:\.ovf(?:\.un)?)?|add(?:\.ovf(?:\.un)?)?|stloc(?:\.[0-3s])?|refany(?:type|val)|blt(?:\.un)?(?:\.s)?|ble(?:\.un)?(?:\.s)?|bgt(?:\.un)?(?:\.s)?|bge(?:\.un)?(?:\.s)?|unbox(?:\.any)?|init(?:blk|obj)|call(?:i|virt)?|brfalse(?:\.s)?|bne\.un(?:\.s)?|ldloca(?:\.s)?|brzero(?:\.s)?|brtrue(?:\.s)?|brnull(?:\.s)?|brinst(?:\.s)?|starg(?:\.s)?|leave(?:\.s)?|shr(?:\.un)?|rem(?:\.un)?|div(?:\.un)?|clt(?:\.un)?|alignment|castclass|ldvirtftn|beq(?:\.s)?|ckfinite|ldsflda|ldtoken|localloc|mkrefany|rethrow|cgt\.un|arglist|switch|stsfld|sizeof|newobj|newarr|ldsfld|ldnull|ldflda|isinst|throw|stobj|stfld|ldstr|ldobj|ldlen|ldftn|ldfld|cpobj|cpblk|break|br\.s|xor|shl|ret|pop|not|nop|neg|jmp|dup|cgt|ceq|box|and|or|br)\b/,
	    boolean: /\b(?:false|true)\b/,
	    number: /\b-?(?:0x[0-9a-f]+|\d+)(?:\.[0-9a-f]+)?\b/i,
	    punctuation: /[{}[\];(),:=]|IL_[0-9A-Za-z]+/
	  };
	}

	// @ts-nocheck
	cilkc.displayName = 'cilkc';
	cilkc.aliases = ['cilk-c'];

	/** @type {import('../core.js').Syntax} */
	function cilkc(Prism) {
	  Prism.register(c$1);
	  Prism.languages.cilkc = Prism.languages.insertBefore('c', 'function', {
	    'parallel-keyword': {
	      pattern: /\bcilk_(?:for|reducer|s(?:cope|pawn|ync))\b/,
	      alias: 'keyword'
	    }
	  });
	  Prism.languages['cilk-c'] = Prism.languages['cilkc'];
	}

	// @ts-nocheck
	cilkcpp.displayName = 'cilkcpp';
	cilkcpp.aliases = ['cilk', 'cilk-cpp'];

	/** @type {import('../core.js').Syntax} */
	function cilkcpp(Prism) {
	  Prism.register(cpp);
	  Prism.languages.cilkcpp = Prism.languages.insertBefore('cpp', 'function', {
	    'parallel-keyword': {
	      pattern: /\bcilk_(?:for|reducer|s(?:cope|pawn|ync))\b/,
	      alias: 'keyword'
	    }
	  });
	  Prism.languages['cilk-cpp'] = Prism.languages['cilkcpp'];
	  Prism.languages['cilk'] = Prism.languages['cilkcpp'];
	}

	// @ts-nocheck
	clojure.displayName = 'clojure';
	clojure.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function clojure(Prism) {
	  // Copied from https://github.com/jeluard/prism-clojure
	  Prism.languages.clojure = {
	    comment: {
	      pattern: /;.*/,
	      greedy: true
	    },
	    string: {
	      pattern: /"(?:[^"\\]|\\.)*"/,
	      greedy: true
	    },
	    char: /\\\w+/,
	    symbol: {
	      pattern: /(^|[\s()\[\]{},])::?[\w*+!?'<>=/.-]+/,
	      lookbehind: true
	    },
	    keyword: {
	      pattern:
	        /(\()(?:-|->|->>|\.|\.\.|\*|\/|\+|<|<=|=|==|>|>=|accessor|agent|agent-errors|aget|alength|all-ns|alter|and|append-child|apply|array-map|aset|aset-boolean|aset-byte|aset-char|aset-double|aset-float|aset-int|aset-long|aset-short|assert|assoc|await|await-for|bean|binding|bit-and|bit-not|bit-or|bit-shift-left|bit-shift-right|bit-xor|boolean|branch\?|butlast|byte|cast|char|children|class|clear-agent-errors|comment|commute|comp|comparator|complement|concat|cond|conj|cons|constantly|construct-proxy|contains\?|count|create-ns|create-struct|cycle|dec|declare|def|def-|definline|definterface|defmacro|defmethod|defmulti|defn|defn-|defonce|defproject|defprotocol|defrecord|defstruct|deftype|deref|difference|disj|dissoc|distinct|do|doall|doc|dorun|doseq|dosync|dotimes|doto|double|down|drop|drop-while|edit|end\?|ensure|eval|every\?|false\?|ffirst|file-seq|filter|find|find-doc|find-ns|find-var|first|float|flush|fn|fnseq|for|frest|gensym|get|get-proxy-class|hash-map|hash-set|identical\?|identity|if|if-let|if-not|import|in-ns|inc|index|insert-child|insert-left|insert-right|inspect-table|inspect-tree|instance\?|int|interleave|intersection|into|into-array|iterate|join|key|keys|keyword|keyword\?|last|lazy-cat|lazy-cons|left|lefts|let|line-seq|list|list\*|load|load-file|locking|long|loop|macroexpand|macroexpand-1|make-array|make-node|map|map-invert|map\?|mapcat|max|max-key|memfn|merge|merge-with|meta|min|min-key|monitor-enter|name|namespace|neg\?|new|newline|next|nil\?|node|not|not-any\?|not-every\?|not=|ns|ns-imports|ns-interns|ns-map|ns-name|ns-publics|ns-refers|ns-resolve|ns-unmap|nth|nthrest|or|parse|partial|path|peek|pop|pos\?|pr|pr-str|print|print-str|println|println-str|prn|prn-str|project|proxy|proxy-mappings|quot|quote|rand|rand-int|range|re-find|re-groups|re-matcher|re-matches|re-pattern|re-seq|read|read-line|recur|reduce|ref|ref-set|refer|rem|remove|remove-method|remove-ns|rename|rename-keys|repeat|replace|replicate|resolve|rest|resultset-seq|reverse|rfirst|right|rights|root|rrest|rseq|second|select|select-keys|send|send-off|seq|seq-zip|seq\?|set|set!|short|slurp|some|sort|sort-by|sorted-map|sorted-map-by|sorted-set|special-symbol\?|split-at|split-with|str|string\?|struct|struct-map|subs|subvec|symbol|symbol\?|sync|take|take-nth|take-while|test|throw|time|to-array|to-array-2d|tree-seq|true\?|try|union|up|update-proxy|val|vals|var|var-get|var-set|var\?|vector|vector-zip|vector\?|when|when-first|when-let|when-not|with-local-vars|with-meta|with-open|with-out-str|xml-seq|xml-zip|zero\?|zipmap|zipper)(?=[\s)]|$)/,
	      lookbehind: true
	    },
	    boolean: /\b(?:false|nil|true)\b/,
	    number: {
	      pattern:
	        /(^|[^\w$@])(?:\d+(?:[/.]\d+)?(?:e[+-]?\d+)?|0x[a-f0-9]+|[1-9]\d?r[a-z0-9]+)[lmn]?(?![\w$@])/i,
	      lookbehind: true
	    },
	    function: {
	      pattern: /((?:^|[^'])\()[\w*+!?'<>=/.-]+(?=[\s)]|$)/,
	      lookbehind: true
	    },
	    operator: /[#@^`~]/,
	    punctuation: /[{}\[\](),]/
	  };
	}

	// @ts-nocheck
	cmake.displayName = 'cmake';
	cmake.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function cmake(Prism) {
	  Prism.languages.cmake = {
	    comment: /#.*/,
	    string: {
	      pattern: /"(?:[^\\"]|\\.)*"/,
	      greedy: true,
	      inside: {
	        interpolation: {
	          pattern: /\$\{(?:[^{}$]|\$\{[^{}$]*\})*\}/,
	          inside: {
	            punctuation: /\$\{|\}/,
	            variable: /\w+/
	          }
	        }
	      }
	    },
	    variable:
	      /\b(?:CMAKE_\w+|\w+_(?:(?:BINARY|SOURCE)_DIR|DESCRIPTION|HOMEPAGE_URL|ROOT|VERSION(?:_MAJOR|_MINOR|_PATCH|_TWEAK)?)|(?:ANDROID|APPLE|BORLAND|BUILD_SHARED_LIBS|CACHE|CPACK_(?:ABSOLUTE_DESTINATION_FILES|COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY|ERROR_ON_ABSOLUTE_INSTALL_DESTINATION|INCLUDE_TOPLEVEL_DIRECTORY|INSTALL_DEFAULT_DIRECTORY_PERMISSIONS|INSTALL_SCRIPT|PACKAGING_INSTALL_PREFIX|SET_DESTDIR|WARN_ON_ABSOLUTE_INSTALL_DESTINATION)|CTEST_(?:BINARY_DIRECTORY|BUILD_COMMAND|BUILD_NAME|BZR_COMMAND|BZR_UPDATE_OPTIONS|CHANGE_ID|CHECKOUT_COMMAND|CONFIGURATION_TYPE|CONFIGURE_COMMAND|COVERAGE_COMMAND|COVERAGE_EXTRA_FLAGS|CURL_OPTIONS|CUSTOM_(?:COVERAGE_EXCLUDE|ERROR_EXCEPTION|ERROR_MATCH|ERROR_POST_CONTEXT|ERROR_PRE_CONTEXT|MAXIMUM_FAILED_TEST_OUTPUT_SIZE|MAXIMUM_NUMBER_OF_(?:ERRORS|WARNINGS)|MAXIMUM_PASSED_TEST_OUTPUT_SIZE|MEMCHECK_IGNORE|POST_MEMCHECK|POST_TEST|PRE_MEMCHECK|PRE_TEST|TESTS_IGNORE|WARNING_EXCEPTION|WARNING_MATCH)|CVS_CHECKOUT|CVS_COMMAND|CVS_UPDATE_OPTIONS|DROP_LOCATION|DROP_METHOD|DROP_SITE|DROP_SITE_CDASH|DROP_SITE_PASSWORD|DROP_SITE_USER|EXTRA_COVERAGE_GLOB|GIT_COMMAND|GIT_INIT_SUBMODULES|GIT_UPDATE_CUSTOM|GIT_UPDATE_OPTIONS|HG_COMMAND|HG_UPDATE_OPTIONS|LABELS_FOR_SUBPROJECTS|MEMORYCHECK_(?:COMMAND|COMMAND_OPTIONS|SANITIZER_OPTIONS|SUPPRESSIONS_FILE|TYPE)|NIGHTLY_START_TIME|P4_CLIENT|P4_COMMAND|P4_OPTIONS|P4_UPDATE_OPTIONS|RUN_CURRENT_SCRIPT|SCP_COMMAND|SITE|SOURCE_DIRECTORY|SUBMIT_URL|SVN_COMMAND|SVN_OPTIONS|SVN_UPDATE_OPTIONS|TEST_LOAD|TEST_TIMEOUT|TRIGGER_SITE|UPDATE_COMMAND|UPDATE_OPTIONS|UPDATE_VERSION_ONLY|USE_LAUNCHERS)|CYGWIN|ENV|EXECUTABLE_OUTPUT_PATH|GHS-MULTI|IOS|LIBRARY_OUTPUT_PATH|MINGW|MSVC(?:10|11|12|14|60|70|71|80|90|_IDE|_TOOLSET_VERSION|_VERSION)?|MSYS|PROJECT_NAME|UNIX|WIN32|WINCE|WINDOWS_PHONE|WINDOWS_STORE|XCODE))\b/,
	    property:
	      /\b(?:cxx_\w+|(?:ARCHIVE_OUTPUT_(?:DIRECTORY|NAME)|COMPILE_DEFINITIONS|COMPILE_PDB_NAME|COMPILE_PDB_OUTPUT_DIRECTORY|EXCLUDE_FROM_DEFAULT_BUILD|IMPORTED_(?:IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_LANGUAGES|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|NO_SONAME|OBJECTS|SONAME)|INTERPROCEDURAL_OPTIMIZATION|LIBRARY_OUTPUT_DIRECTORY|LIBRARY_OUTPUT_NAME|LINK_FLAGS|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|MAP_IMPORTED_CONFIG|OSX_ARCHITECTURES|OUTPUT_NAME|PDB_NAME|PDB_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_NAME|STATIC_LIBRARY_FLAGS|VS_CSHARP|VS_DOTNET_REFERENCEPROP|VS_DOTNET_REFERENCE|VS_GLOBAL_SECTION_POST|VS_GLOBAL_SECTION_PRE|VS_GLOBAL|XCODE_ATTRIBUTE)_\w+|\w+_(?:CLANG_TIDY|COMPILER_LAUNCHER|CPPCHECK|CPPLINT|INCLUDE_WHAT_YOU_USE|OUTPUT_NAME|POSTFIX|VISIBILITY_PRESET)|ABSTRACT|ADDITIONAL_MAKE_CLEAN_FILES|ADVANCED|ALIASED_TARGET|ALLOW_DUPLICATE_CUSTOM_TARGETS|ANDROID_(?:ANT_ADDITIONAL_OPTIONS|API|API_MIN|ARCH|ASSETS_DIRECTORIES|GUI|JAR_DEPENDENCIES|NATIVE_LIB_DEPENDENCIES|NATIVE_LIB_DIRECTORIES|PROCESS_MAX|PROGUARD|PROGUARD_CONFIG_PATH|SECURE_PROPS_PATH|SKIP_ANT_STEP|STL_TYPE)|ARCHIVE_OUTPUT_DIRECTORY|ATTACHED_FILES|ATTACHED_FILES_ON_FAIL|AUTOGEN_(?:BUILD_DIR|ORIGIN_DEPENDS|PARALLEL|SOURCE_GROUP|TARGETS_FOLDER|TARGET_DEPENDS)|AUTOMOC|AUTOMOC_(?:COMPILER_PREDEFINES|DEPEND_FILTERS|EXECUTABLE|MACRO_NAMES|MOC_OPTIONS|SOURCE_GROUP|TARGETS_FOLDER)|AUTORCC|AUTORCC_EXECUTABLE|AUTORCC_OPTIONS|AUTORCC_SOURCE_GROUP|AUTOUIC|AUTOUIC_EXECUTABLE|AUTOUIC_OPTIONS|AUTOUIC_SEARCH_PATHS|BINARY_DIR|BUILDSYSTEM_TARGETS|BUILD_RPATH|BUILD_RPATH_USE_ORIGIN|BUILD_WITH_INSTALL_NAME_DIR|BUILD_WITH_INSTALL_RPATH|BUNDLE|BUNDLE_EXTENSION|CACHE_VARIABLES|CLEAN_NO_CUSTOM|COMMON_LANGUAGE_RUNTIME|COMPATIBLE_INTERFACE_(?:BOOL|NUMBER_MAX|NUMBER_MIN|STRING)|COMPILE_(?:DEFINITIONS|FEATURES|FLAGS|OPTIONS|PDB_NAME|PDB_OUTPUT_DIRECTORY)|COST|CPACK_DESKTOP_SHORTCUTS|CPACK_NEVER_OVERWRITE|CPACK_PERMANENT|CPACK_STARTUP_SHORTCUTS|CPACK_START_MENU_SHORTCUTS|CPACK_WIX_ACL|CROSSCOMPILING_EMULATOR|CUDA_EXTENSIONS|CUDA_PTX_COMPILATION|CUDA_RESOLVE_DEVICE_SYMBOLS|CUDA_SEPARABLE_COMPILATION|CUDA_STANDARD|CUDA_STANDARD_REQUIRED|CXX_EXTENSIONS|CXX_STANDARD|CXX_STANDARD_REQUIRED|C_EXTENSIONS|C_STANDARD|C_STANDARD_REQUIRED|DEBUG_CONFIGURATIONS|DEFINE_SYMBOL|DEFINITIONS|DEPENDS|DEPLOYMENT_ADDITIONAL_FILES|DEPLOYMENT_REMOTE_DIRECTORY|DISABLED|DISABLED_FEATURES|ECLIPSE_EXTRA_CPROJECT_CONTENTS|ECLIPSE_EXTRA_NATURES|ENABLED_FEATURES|ENABLED_LANGUAGES|ENABLE_EXPORTS|ENVIRONMENT|EXCLUDE_FROM_ALL|EXCLUDE_FROM_DEFAULT_BUILD|EXPORT_NAME|EXPORT_PROPERTIES|EXTERNAL_OBJECT|EchoString|FAIL_REGULAR_EXPRESSION|FIND_LIBRARY_USE_LIB32_PATHS|FIND_LIBRARY_USE_LIB64_PATHS|FIND_LIBRARY_USE_LIBX32_PATHS|FIND_LIBRARY_USE_OPENBSD_VERSIONING|FIXTURES_CLEANUP|FIXTURES_REQUIRED|FIXTURES_SETUP|FOLDER|FRAMEWORK|Fortran_FORMAT|Fortran_MODULE_DIRECTORY|GENERATED|GENERATOR_FILE_NAME|GENERATOR_IS_MULTI_CONFIG|GHS_INTEGRITY_APP|GHS_NO_SOURCE_GROUP_FILE|GLOBAL_DEPENDS_DEBUG_MODE|GLOBAL_DEPENDS_NO_CYCLES|GNUtoMS|HAS_CXX|HEADER_FILE_ONLY|HELPSTRING|IMPLICIT_DEPENDS_INCLUDE_TRANSFORM|IMPORTED|IMPORTED_(?:COMMON_LANGUAGE_RUNTIME|CONFIGURATIONS|GLOBAL|IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_(?:LANGUAGES|LIBRARIES|MULTIPLICITY)|LOCATION|NO_SONAME|OBJECTS|SONAME)|IMPORT_PREFIX|IMPORT_SUFFIX|INCLUDE_DIRECTORIES|INCLUDE_REGULAR_EXPRESSION|INSTALL_NAME_DIR|INSTALL_RPATH|INSTALL_RPATH_USE_LINK_PATH|INTERFACE_(?:AUTOUIC_OPTIONS|COMPILE_DEFINITIONS|COMPILE_FEATURES|COMPILE_OPTIONS|INCLUDE_DIRECTORIES|LINK_DEPENDS|LINK_DIRECTORIES|LINK_LIBRARIES|LINK_OPTIONS|POSITION_INDEPENDENT_CODE|SOURCES|SYSTEM_INCLUDE_DIRECTORIES)|INTERPROCEDURAL_OPTIMIZATION|IN_TRY_COMPILE|IOS_INSTALL_COMBINED|JOB_POOLS|JOB_POOL_COMPILE|JOB_POOL_LINK|KEEP_EXTENSION|LABELS|LANGUAGE|LIBRARY_OUTPUT_DIRECTORY|LINKER_LANGUAGE|LINK_(?:DEPENDS|DEPENDS_NO_SHARED|DIRECTORIES|FLAGS|INTERFACE_LIBRARIES|INTERFACE_MULTIPLICITY|LIBRARIES|OPTIONS|SEARCH_END_STATIC|SEARCH_START_STATIC|WHAT_YOU_USE)|LISTFILE_STACK|LOCATION|MACOSX_BUNDLE|MACOSX_BUNDLE_INFO_PLIST|MACOSX_FRAMEWORK_INFO_PLIST|MACOSX_PACKAGE_LOCATION|MACOSX_RPATH|MACROS|MANUALLY_ADDED_DEPENDENCIES|MEASUREMENT|MODIFIED|NAME|NO_SONAME|NO_SYSTEM_FROM_IMPORTED|OBJECT_DEPENDS|OBJECT_OUTPUTS|OSX_ARCHITECTURES|OUTPUT_NAME|PACKAGES_FOUND|PACKAGES_NOT_FOUND|PARENT_DIRECTORY|PASS_REGULAR_EXPRESSION|PDB_NAME|PDB_OUTPUT_DIRECTORY|POSITION_INDEPENDENT_CODE|POST_INSTALL_SCRIPT|PREDEFINED_TARGETS_FOLDER|PREFIX|PRE_INSTALL_SCRIPT|PRIVATE_HEADER|PROCESSORS|PROCESSOR_AFFINITY|PROJECT_LABEL|PUBLIC_HEADER|REPORT_UNDEFINED_PROPERTIES|REQUIRED_FILES|RESOURCE|RESOURCE_LOCK|RULE_LAUNCH_COMPILE|RULE_LAUNCH_CUSTOM|RULE_LAUNCH_LINK|RULE_MESSAGES|RUNTIME_OUTPUT_DIRECTORY|RUN_SERIAL|SKIP_AUTOGEN|SKIP_AUTOMOC|SKIP_AUTORCC|SKIP_AUTOUIC|SKIP_BUILD_RPATH|SKIP_RETURN_CODE|SOURCES|SOURCE_DIR|SOVERSION|STATIC_LIBRARY_FLAGS|STATIC_LIBRARY_OPTIONS|STRINGS|SUBDIRECTORIES|SUFFIX|SYMBOLIC|TARGET_ARCHIVES_MAY_BE_SHARED_LIBS|TARGET_MESSAGES|TARGET_SUPPORTS_SHARED_LIBS|TESTS|TEST_INCLUDE_FILE|TEST_INCLUDE_FILES|TIMEOUT|TIMEOUT_AFTER_MATCH|TYPE|USE_FOLDERS|VALUE|VARIABLES|VERSION|VISIBILITY_INLINES_HIDDEN|VS_(?:CONFIGURATION_TYPE|COPY_TO_OUT_DIR|DEBUGGER_(?:COMMAND|COMMAND_ARGUMENTS|ENVIRONMENT|WORKING_DIRECTORY)|DEPLOYMENT_CONTENT|DEPLOYMENT_LOCATION|DOTNET_REFERENCES|DOTNET_REFERENCES_COPY_LOCAL|INCLUDE_IN_VSIX|IOT_STARTUP_TASK|KEYWORD|RESOURCE_GENERATOR|SCC_AUXPATH|SCC_LOCALPATH|SCC_PROJECTNAME|SCC_PROVIDER|SDK_REFERENCES|SHADER_(?:DISABLE_OPTIMIZATIONS|ENABLE_DEBUG|ENTRYPOINT|FLAGS|MODEL|OBJECT_FILE_NAME|OUTPUT_HEADER_FILE|TYPE|VARIABLE_NAME)|STARTUP_PROJECT|TOOL_OVERRIDE|USER_PROPS|WINRT_COMPONENT|WINRT_EXTENSIONS|WINRT_REFERENCES|XAML_TYPE)|WILL_FAIL|WIN32_EXECUTABLE|WINDOWS_EXPORT_ALL_SYMBOLS|WORKING_DIRECTORY|WRAP_EXCLUDE|XCODE_(?:EMIT_EFFECTIVE_PLATFORM_NAME|EXPLICIT_FILE_TYPE|FILE_ATTRIBUTES|LAST_KNOWN_FILE_TYPE|PRODUCT_TYPE|SCHEME_(?:ADDRESS_SANITIZER|ADDRESS_SANITIZER_USE_AFTER_RETURN|ARGUMENTS|DISABLE_MAIN_THREAD_CHECKER|DYNAMIC_LIBRARY_LOADS|DYNAMIC_LINKER_API_USAGE|ENVIRONMENT|EXECUTABLE|GUARD_MALLOC|MAIN_THREAD_CHECKER_STOP|MALLOC_GUARD_EDGES|MALLOC_SCRIBBLE|MALLOC_STACK|THREAD_SANITIZER(?:_STOP)?|UNDEFINED_BEHAVIOUR_SANITIZER(?:_STOP)?|ZOMBIE_OBJECTS))|XCTEST)\b/,
	    keyword:
	      /\b(?:add_compile_definitions|add_compile_options|add_custom_command|add_custom_target|add_definitions|add_dependencies|add_executable|add_library|add_link_options|add_subdirectory|add_test|aux_source_directory|break|build_command|build_name|cmake_host_system_information|cmake_minimum_required|cmake_parse_arguments|cmake_policy|configure_file|continue|create_test_sourcelist|ctest_build|ctest_configure|ctest_coverage|ctest_empty_binary_directory|ctest_memcheck|ctest_read_custom_files|ctest_run_script|ctest_sleep|ctest_start|ctest_submit|ctest_test|ctest_update|ctest_upload|define_property|else|elseif|enable_language|enable_testing|endforeach|endfunction|endif|endmacro|endwhile|exec_program|execute_process|export|export_library_dependencies|file|find_file|find_library|find_package|find_path|find_program|fltk_wrap_ui|foreach|function|get_cmake_property|get_directory_property|get_filename_component|get_property|get_source_file_property|get_target_property|get_test_property|if|include|include_directories|include_external_msproject|include_guard|include_regular_expression|install|install_files|install_programs|install_targets|link_directories|link_libraries|list|load_cache|load_command|macro|make_directory|mark_as_advanced|math|message|option|output_required_files|project|qt_wrap_cpp|qt_wrap_ui|remove|remove_definitions|return|separate_arguments|set|set_directory_properties|set_property|set_source_files_properties|set_target_properties|set_tests_properties|site_name|source_group|string|subdir_depends|subdirs|target_compile_definitions|target_compile_features|target_compile_options|target_include_directories|target_link_directories|target_link_libraries|target_link_options|target_sources|try_compile|try_run|unset|use_mangled_mesa|utility_source|variable_requires|variable_watch|while|write_file)(?=\s*\()\b/,
	    boolean: /\b(?:FALSE|OFF|ON|TRUE)\b/,
	    namespace:
	      /\b(?:INTERFACE|PRIVATE|PROPERTIES|PUBLIC|SHARED|STATIC|TARGET_OBJECTS)\b/,
	    operator:
	      /\b(?:AND|DEFINED|EQUAL|GREATER|LESS|MATCHES|NOT|OR|STREQUAL|STRGREATER|STRLESS|VERSION_EQUAL|VERSION_GREATER|VERSION_LESS)\b/,
	    inserted: {
	      pattern: /\b\w+::\w+\b/,
	      alias: 'class-name'
	    },
	    number: /\b\d+(?:\.\d+)*\b/,
	    function: /\b[a-z_]\w*(?=\s*\()\b/i,
	    punctuation: /[()>}]|\$[<{]/
	  };
	}

	// @ts-nocheck
	cobol.displayName = 'cobol';
	cobol.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function cobol(Prism) {
	  Prism.languages.cobol = {
	    comment: {
	      pattern: /\*>.*|(^[ \t]*)\*.*/m,
	      lookbehind: true,
	      greedy: true
	    },
	    string: {
	      pattern: /[xzgn]?(?:"(?:[^\r\n"]|"")*"(?!")|'(?:[^\r\n']|'')*'(?!'))/i,
	      greedy: true
	    },
	    level: {
	      pattern: /(^[ \t]*)\d+\b/m,
	      lookbehind: true,
	      greedy: true,
	      alias: 'number'
	    },
	    'class-name': {
	      // https://github.com/antlr/grammars-v4/blob/42edd5b687d183b5fa679e858a82297bd27141e7/cobol85/Cobol85.g4#L1015
	      pattern:
	        /(\bpic(?:ture)?\s+)(?:(?:[-\w$/,:*+<>]|\.(?!\s|$))(?:\(\d+\))?)+/i,
	      lookbehind: true,
	      inside: {
	        number: {
	          pattern: /(\()\d+/,
	          lookbehind: true
	        },
	        punctuation: /[()]/
	      }
	    },
	    keyword: {
	      pattern:
	        /(^|[^\w-])(?:ABORT|ACCEPT|ACCESS|ADD|ADDRESS|ADVANCING|AFTER|ALIGNED|ALL|ALPHABET|ALPHABETIC|ALPHABETIC-LOWER|ALPHABETIC-UPPER|ALPHANUMERIC|ALPHANUMERIC-EDITED|ALSO|ALTER|ALTERNATE|ANY|ARE|AREA|AREAS|AS|ASCENDING|ASCII|ASSIGN|ASSOCIATED-DATA|ASSOCIATED-DATA-LENGTH|AT|ATTRIBUTE|AUTHOR|AUTO|AUTO-SKIP|BACKGROUND-COLOR|BACKGROUND-COLOUR|BASIS|BEEP|BEFORE|BEGINNING|BELL|BINARY|BIT|BLANK|BLINK|BLOCK|BOTTOM|BOUNDS|BY|BYFUNCTION|BYTITLE|CALL|CANCEL|CAPABLE|CCSVERSION|CD|CF|CH|CHAINING|CHANGED|CHANNEL|CHARACTER|CHARACTERS|CLASS|CLASS-ID|CLOCK-UNITS|CLOSE|CLOSE-DISPOSITION|COBOL|CODE|CODE-SET|COL|COLLATING|COLUMN|COM-REG|COMMA|COMMITMENT|COMMON|COMMUNICATION|COMP|COMP-1|COMP-2|COMP-3|COMP-4|COMP-5|COMPUTATIONAL|COMPUTATIONAL-1|COMPUTATIONAL-2|COMPUTATIONAL-3|COMPUTATIONAL-4|COMPUTATIONAL-5|COMPUTE|CONFIGURATION|CONTAINS|CONTENT|CONTINUE|CONTROL|CONTROL-POINT|CONTROLS|CONVENTION|CONVERTING|COPY|CORR|CORRESPONDING|COUNT|CRUNCH|CURRENCY|CURSOR|DATA|DATA-BASE|DATE|DATE-COMPILED|DATE-WRITTEN|DAY|DAY-OF-WEEK|DBCS|DE|DEBUG-CONTENTS|DEBUG-ITEM|DEBUG-LINE|DEBUG-NAME|DEBUG-SUB-1|DEBUG-SUB-2|DEBUG-SUB-3|DEBUGGING|DECIMAL-POINT|DECLARATIVES|DEFAULT|DEFAULT-DISPLAY|DEFINITION|DELETE|DELIMITED|DELIMITER|DEPENDING|DESCENDING|DESTINATION|DETAIL|DFHRESP|DFHVALUE|DISABLE|DISK|DISPLAY|DISPLAY-1|DIVIDE|DIVISION|DONTCARE|DOUBLE|DOWN|DUPLICATES|DYNAMIC|EBCDIC|EGCS|EGI|ELSE|EMI|EMPTY-CHECK|ENABLE|END|END-ACCEPT|END-ADD|END-CALL|END-COMPUTE|END-DELETE|END-DIVIDE|END-EVALUATE|END-IF|END-MULTIPLY|END-OF-PAGE|END-PERFORM|END-READ|END-RECEIVE|END-RETURN|END-REWRITE|END-SEARCH|END-START|END-STRING|END-SUBTRACT|END-UNSTRING|END-WRITE|ENDING|ENTER|ENTRY|ENTRY-PROCEDURE|ENVIRONMENT|EOL|EOP|EOS|ERASE|ERROR|ESCAPE|ESI|EVALUATE|EVENT|EVERY|EXCEPTION|EXCLUSIVE|EXHIBIT|EXIT|EXPORT|EXTEND|EXTENDED|EXTERNAL|FD|FILE|FILE-CONTROL|FILLER|FINAL|FIRST|FOOTING|FOR|FOREGROUND-COLOR|FOREGROUND-COLOUR|FROM|FULL|FUNCTION|FUNCTION-POINTER|FUNCTIONNAME|GENERATE|GIVING|GLOBAL|GO|GOBACK|GRID|GROUP|HEADING|HIGH-VALUE|HIGH-VALUES|HIGHLIGHT|I-O|I-O-CONTROL|ID|IDENTIFICATION|IF|IMPLICIT|IMPORT|IN|INDEX|INDEXED|INDICATE|INITIAL|INITIALIZE|INITIATE|INPUT|INPUT-OUTPUT|INSPECT|INSTALLATION|INTEGER|INTO|INVALID|INVOKE|IS|JUST|JUSTIFIED|KANJI|KEPT|KEY|KEYBOARD|LABEL|LANGUAGE|LAST|LB|LD|LEADING|LEFT|LEFTLINE|LENGTH|LENGTH-CHECK|LIBACCESS|LIBPARAMETER|LIBRARY|LIMIT|LIMITS|LINAGE|LINAGE-COUNTER|LINE|LINE-COUNTER|LINES|LINKAGE|LIST|LOCAL|LOCAL-STORAGE|LOCK|LONG-DATE|LONG-TIME|LOW-VALUE|LOW-VALUES|LOWER|LOWLIGHT|MEMORY|MERGE|MESSAGE|MMDDYYYY|MODE|MODULES|MORE-LABELS|MOVE|MULTIPLE|MULTIPLY|NAMED|NATIONAL|NATIONAL-EDITED|NATIVE|NEGATIVE|NETWORK|NEXT|NO|NO-ECHO|NULL|NULLS|NUMBER|NUMERIC|NUMERIC-DATE|NUMERIC-EDITED|NUMERIC-TIME|OBJECT-COMPUTER|OCCURS|ODT|OF|OFF|OMITTED|ON|OPEN|OPTIONAL|ORDER|ORDERLY|ORGANIZATION|OTHER|OUTPUT|OVERFLOW|OVERLINE|OWN|PACKED-DECIMAL|PADDING|PAGE|PAGE-COUNTER|PASSWORD|PERFORM|PF|PH|PIC|PICTURE|PLUS|POINTER|PORT|POSITION|POSITIVE|PRINTER|PRINTING|PRIVATE|PROCEDURE|PROCEDURE-POINTER|PROCEDURES|PROCEED|PROCESS|PROGRAM|PROGRAM-ID|PROGRAM-LIBRARY|PROMPT|PURGE|QUEUE|QUOTE|QUOTES|RANDOM|RD|READ|READER|REAL|RECEIVE|RECEIVED|RECORD|RECORDING|RECORDS|RECURSIVE|REDEFINES|REEL|REF|REFERENCE|REFERENCES|RELATIVE|RELEASE|REMAINDER|REMARKS|REMOTE|REMOVAL|REMOVE|RENAMES|REPLACE|REPLACING|REPORT|REPORTING|REPORTS|REQUIRED|RERUN|RESERVE|RESET|RETURN|RETURN-CODE|RETURNING|REVERSE-VIDEO|REVERSED|REWIND|REWRITE|RF|RH|RIGHT|ROUNDED|RUN|SAME|SAVE|SCREEN|SD|SEARCH|SECTION|SECURE|SECURITY|SEGMENT|SEGMENT-LIMIT|SELECT|SEND|SENTENCE|SEPARATE|SEQUENCE|SEQUENTIAL|SET|SHARED|SHAREDBYALL|SHAREDBYRUNUNIT|SHARING|SHIFT-IN|SHIFT-OUT|SHORT-DATE|SIGN|SIZE|SORT|SORT-CONTROL|SORT-CORE-SIZE|SORT-FILE-SIZE|SORT-MERGE|SORT-MESSAGE|SORT-MODE-SIZE|SORT-RETURN|SOURCE|SOURCE-COMPUTER|SPACE|SPACES|SPECIAL-NAMES|STANDARD|STANDARD-1|STANDARD-2|START|STATUS|STOP|STRING|SUB-QUEUE-1|SUB-QUEUE-2|SUB-QUEUE-3|SUBTRACT|SUM|SUPPRESS|SYMBOL|SYMBOLIC|SYNC|SYNCHRONIZED|TABLE|TALLY|TALLYING|TAPE|TASK|TERMINAL|TERMINATE|TEST|TEXT|THEN|THREAD|THREAD-LOCAL|THROUGH|THRU|TIME|TIMER|TIMES|TITLE|TO|TODAYS-DATE|TODAYS-NAME|TOP|TRAILING|TRUNCATED|TYPE|TYPEDEF|UNDERLINE|UNIT|UNSTRING|UNTIL|UP|UPON|USAGE|USE|USING|VALUE|VALUES|VARYING|VIRTUAL|WAIT|WHEN|WHEN-COMPILED|WITH|WORDS|WORKING-STORAGE|WRITE|YEAR|YYYYDDD|YYYYMMDD|ZERO-FILL|ZEROES|ZEROS)(?![\w-])/i,
	      lookbehind: true
	    },
	    boolean: {
	      pattern: /(^|[^\w-])(?:false|true)(?![\w-])/i,
	      lookbehind: true
	    },
	    number: {
	      pattern:
	        /(^|[^\w-])(?:[+-]?(?:(?:\d+(?:[.,]\d+)?|[.,]\d+)(?:e[+-]?\d+)?|zero))(?![\w-])/i,
	      lookbehind: true
	    },
	    operator: [
	      /<>|[<>]=?|[=+*/&]/,
	      {
	        pattern: /(^|[^\w-])(?:-|and|equal|greater|less|not|or|than)(?![\w-])/i,
	        lookbehind: true
	      }
	    ],
	    punctuation: /[.:,()]/
	  };
	}

	// @ts-nocheck
	coffeescript.displayName = 'coffeescript';
	coffeescript.aliases = ['coffee'];

	/** @type {import('../core.js').Syntax} */
	function coffeescript(Prism) {
	  Prism.register(javascript)
	  ;(function (Prism) {
	    // Ignore comments starting with { to privilege string interpolation highlighting
	    var comment = /#(?!\{).+/;
	    var interpolation = {
	      pattern: /#\{[^}]+\}/,
	      alias: 'variable'
	    };
	    Prism.languages.coffeescript = Prism.languages.extend('javascript', {
	      comment: comment,
	      string: [
	        // Strings are multiline
	        {
	          pattern: /'(?:\\[\s\S]|[^\\'])*'/,
	          greedy: true
	        },
	        {
	          // Strings are multiline
	          pattern: /"(?:\\[\s\S]|[^\\"])*"/,
	          greedy: true,
	          inside: {
	            interpolation: interpolation
	          }
	        }
	      ],
	      keyword:
	        /\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\b/,
	      'class-member': {
	        pattern: /@(?!\d)\w+/,
	        alias: 'variable'
	      }
	    });
	    Prism.languages.insertBefore('coffeescript', 'comment', {
	      'multiline-comment': {
	        pattern: /###[\s\S]+?###/,
	        alias: 'comment'
	      },
	      // Block regexp can contain comments and interpolation
	      'block-regex': {
	        pattern: /\/{3}[\s\S]*?\/{3}/,
	        alias: 'regex',
	        inside: {
	          comment: comment,
	          interpolation: interpolation
	        }
	      }
	    });
	    Prism.languages.insertBefore('coffeescript', 'string', {
	      'inline-javascript': {
	        pattern: /`(?:\\[\s\S]|[^\\`])*`/,
	        inside: {
	          delimiter: {
	            pattern: /^`|`$/,
	            alias: 'punctuation'
	          },
	          script: {
	            pattern: /[\s\S]+/,
	            alias: 'language-javascript',
	            inside: Prism.languages.javascript
	          }
	        }
	      },
	      // Block strings
	      'multiline-string': [
	        {
	          pattern: /'''[\s\S]*?'''/,
	          greedy: true,
	          alias: 'string'
	        },
	        {
	          pattern: /"""[\s\S]*?"""/,
	          greedy: true,
	          alias: 'string',
	          inside: {
	            interpolation: interpolation
	          }
	        }
	      ]
	    });
	    Prism.languages.insertBefore('coffeescript', 'keyword', {
	      // Object property
	      property: /(?!\d)\w+(?=\s*:(?!:))/
	    });
	    delete Prism.languages.coffeescript['template-string'];
	    Prism.languages.coffee = Prism.languages.coffeescript;
	  })(Prism);
	}

	// @ts-nocheck
	concurnas.displayName = 'concurnas';
	concurnas.aliases = ['conc'];

	/** @type {import('../core.js').Syntax} */
	function concurnas(Prism) {
	  Prism.languages.concurnas = {
	    comment: {
	      pattern: /(^|[^\\])(?:\/\*[\s\S]*?(?:\*\/|$)|\/\/.*)/,
	      lookbehind: true,
	      greedy: true
	    },
	    langext: {
	      pattern: /\b\w+\s*\|\|[\s\S]+?\|\|/,
	      greedy: true,
	      inside: {
	        'class-name': /^\w+/,
	        string: {
	          pattern: /(^\s*\|\|)[\s\S]+(?=\|\|$)/,
	          lookbehind: true
	        },
	        punctuation: /\|\|/
	      }
	    },
	    function: {
	      pattern: /((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/,
	      lookbehind: true
	    },
	    keyword:
	      /\b(?:abstract|actor|also|annotation|assert|async|await|bool|boolean|break|byte|case|catch|changed|char|class|closed|constant|continue|def|default|del|double|elif|else|enum|every|extends|false|finally|float|for|from|global|gpudef|gpukernel|if|import|in|init|inject|int|lambda|local|long|loop|match|new|nodefault|null|of|onchange|open|out|override|package|parfor|parforsync|post|pre|private|protected|provide|provider|public|return|shared|short|single|size_t|sizeof|super|sync|this|throw|trait|trans|transient|true|try|typedef|unchecked|using|val|var|void|while|with)\b/,
	    boolean: /\b(?:false|true)\b/,
	    number:
	      /\b0b[01][01_]*L?\b|\b0x(?:[\da-f_]*\.)?[\da-f_p+-]+\b|(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.\d[\d_]*)(?:e[+-]?\d[\d_]*)?[dfls]?/i,
	    punctuation: /[{}[\];(),.:]/,
	    operator:
	      /<==|>==|=>|->|<-|<>|&==|&<>|\?:?|\.\?|\+\+|--|[-+*/=<>]=?|[!^~]|\b(?:and|as|band|bor|bxor|comp|is|isnot|mod|or)\b=?/,
	    annotation: {
	      pattern: /@(?:\w+:)?(?:\w+|\[[^\]]+\])?/,
	      alias: 'builtin'
	    }
	  };
	  Prism.languages.insertBefore('concurnas', 'langext', {
	    'regex-literal': {
	      pattern: /\br("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
	      greedy: true,
	      inside: {
	        interpolation: {
	          pattern:
	            /((?:^|[^\\])(?:\\{2})*)\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
	          lookbehind: true,
	          inside: Prism.languages.concurnas
	        },
	        regex: /[\s\S]+/
	      }
	    },
	    'string-literal': {
	      pattern: /(?:\B|\bs)("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
	      greedy: true,
	      inside: {
	        interpolation: {
	          pattern:
	            /((?:^|[^\\])(?:\\{2})*)\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
	          lookbehind: true,
	          inside: Prism.languages.concurnas
	        },
	        string: /[\s\S]+/
	      }
	    }
	  });
	  Prism.languages.conc = Prism.languages.concurnas;
	}

	// @ts-nocheck
	csp.displayName = 'csp';
	csp.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function csp(Prism) {
	(function (Prism) {
	    /**
	     * @param {string} source
	     * @returns {RegExp}
	     */
	    function value(source) {
	      return RegExp(
	        /([ \t])/.source + '(?:' + source + ')' + /(?=[\s;]|$)/.source,
	        'i'
	      )
	    }
	    Prism.languages.csp = {
	      directive: {
	        pattern:
	          /(^|[\s;])(?:base-uri|block-all-mixed-content|(?:child|connect|default|font|frame|img|manifest|media|object|prefetch|script|style|worker)-src|disown-opener|form-action|frame-(?:ancestors|options)|input-protection(?:-(?:clip|selectors))?|navigate-to|plugin-types|policy-uri|referrer|reflected-xss|report-(?:to|uri)|require-sri-for|sandbox|(?:script|style)-src-(?:attr|elem)|upgrade-insecure-requests)(?=[\s;]|$)/i,
	        lookbehind: true,
	        alias: 'property'
	      },
	      scheme: {
	        pattern: value(/[a-z][a-z0-9.+-]*:/.source),
	        lookbehind: true
	      },
	      none: {
	        pattern: value(/'none'/.source),
	        lookbehind: true,
	        alias: 'keyword'
	      },
	      nonce: {
	        pattern: value(/'nonce-[-+/\w=]+'/.source),
	        lookbehind: true,
	        alias: 'number'
	      },
	      hash: {
	        pattern: value(/'sha(?:256|384|512)-[-+/\w=]+'/.source),
	        lookbehind: true,
	        alias: 'number'
	      },
	      host: {
	        pattern: value(
	          /[a-z][a-z0-9.+-]*:\/\/[^\s;,']*/.source +
	            '|' +
	            /\*[^\s;,']*/.source +
	            '|' +
	            /[a-z0-9-]+(?:\.[a-z0-9-]+)+(?::[\d*]+)?(?:\/[^\s;,']*)?/.source
	        ),
	        lookbehind: true,
	        alias: 'url',
	        inside: {
	          important: /\*/
	        }
	      },
	      keyword: [
	        {
	          pattern: value(/'unsafe-[a-z-]+'/.source),
	          lookbehind: true,
	          alias: 'unsafe'
	        },
	        {
	          pattern: value(/'[a-z-]+'/.source),
	          lookbehind: true,
	          alias: 'safe'
	        }
	      ],
	      punctuation: /;/
	    };
	  })(Prism);
	}

	// @ts-nocheck
	cooklang.displayName = 'cooklang';
	cooklang.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function cooklang(Prism) {
	(function (Prism) {
	    // see https://github.com/cooklang/spec/blob/main/EBNF.md

	    var single_token_suffix = /(?:(?!\s)[\d$+<=a-zA-Z\x80-\uFFFF])+/.source;
	    var multi_token_infix = /[^{}@#]+/.source;
	    var multi_token_suffix = /\{[^}#@]*\}/.source;
	    var multi_token = multi_token_infix + multi_token_suffix;
	    var timer_units = /(?:h|hours|hrs|m|min|minutes)/.source;
	    var amount_group_impl = {
	      pattern: /\{[^{}]*\}/,
	      inside: {
	        amount: {
	          pattern: /([\{|])[^{}|*%]+/,
	          lookbehind: true,
	          alias: 'number'
	        },
	        unit: {
	          pattern: /(%)[^}]+/,
	          lookbehind: true,
	          alias: 'symbol'
	        },
	        'servings-scaler': {
	          pattern: /\*/,
	          alias: 'operator'
	        },
	        'servings-alternative-separator': {
	          pattern: /\|/,
	          alias: 'operator'
	        },
	        'unit-separator': {
	          pattern: /(?:%|(\*)%)/,
	          lookbehind: true,
	          alias: 'operator'
	        },
	        punctuation: /[{}]/
	      }
	    };
	    Prism.languages.cooklang = {
	      comment: {
	        // [- comment -]
	        // -- comment
	        pattern: /\[-[\s\S]*?-\]|--.*/,
	        greedy: true
	      },
	      meta: {
	        // >> key: value
	        pattern: />>.*:.*/,
	        inside: {
	          property: {
	            // key:
	            pattern: /(>>\s*)[^\s:](?:[^:]*[^\s:])?/,
	            lookbehind: true
	          }
	        }
	      },
	      'cookware-group': {
	        // #...{...}, #...
	        pattern: new RegExp(
	          '#(?:' + multi_token + '|' + single_token_suffix + ')'
	        ),
	        inside: {
	          cookware: {
	            pattern: new RegExp('(^#)(?:' + multi_token_infix + ')'),
	            lookbehind: true,
	            alias: 'variable'
	          },
	          'cookware-keyword': {
	            pattern: /^#/,
	            alias: 'keyword'
	          },
	          'quantity-group': {
	            pattern: new RegExp(/\{[^{}@#]*\}/),
	            inside: {
	              quantity: {
	                pattern: new RegExp(/(^\{)/.source + multi_token_infix),
	                lookbehind: true,
	                alias: 'number'
	              },
	              punctuation: /[{}]/
	            }
	          }
	        }
	      },
	      'ingredient-group': {
	        // @...{...}, @...
	        pattern: new RegExp(
	          '@(?:' + multi_token + '|' + single_token_suffix + ')'
	        ),
	        inside: {
	          ingredient: {
	            pattern: new RegExp('(^@)(?:' + multi_token_infix + ')'),
	            lookbehind: true,
	            alias: 'variable'
	          },
	          'ingredient-keyword': {
	            pattern: /^@/,
	            alias: 'keyword'
	          },
	          'amount-group': amount_group_impl
	        }
	      },
	      'timer-group': {
	        // ~timer{...}
	        // eslint-disable-next-line regexp/sort-alternatives
	        pattern: /~(?!\s)[^@#~{}]*\{[^{}]*\}/,
	        inside: {
	          timer: {
	            pattern: /(^~)[^{]+/,
	            lookbehind: true,
	            alias: 'variable'
	          },
	          'duration-group': {
	            // {...}
	            pattern: /\{[^{}]*\}/,
	            inside: {
	              punctuation: /[{}]/,
	              unit: {
	                pattern: new RegExp(
	                  /(%\s*)/.source + timer_units + /\b/.source
	                ),
	                lookbehind: true,
	                alias: 'symbol'
	              },
	              operator: /%/,
	              duration: {
	                pattern: /\d+/,
	                alias: 'number'
	              }
	            }
	          },
	          'timer-keyword': {
	            pattern: /^~/,
	            alias: 'keyword'
	          }
	        }
	      }
	    };
	  })(Prism);
	}

	// @ts-nocheck
	coq.displayName = 'coq';
	coq.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function coq(Prism) {
	(function (Prism) {
	    // https://github.com/coq/coq

	    var commentSource = /\(\*(?:[^(*]|\((?!\*)|\*(?!\))|<self>)*\*\)/.source;
	    for (var i = 0; i < 2; i++) {
	      commentSource = commentSource.replace(/<self>/g, function () {
	        return commentSource
	      });
	    }
	    commentSource = commentSource.replace(/<self>/g, '[]');
	    Prism.languages.coq = {
	      comment: RegExp(commentSource),
	      string: {
	        pattern: /"(?:[^"]|"")*"(?!")/,
	        greedy: true
	      },
	      attribute: [
	        {
	          pattern: RegExp(
	            /#\[(?:[^\[\]("]|"(?:[^"]|"")*"(?!")|\((?!\*)|<comment>)*\]/.source.replace(
	              /<comment>/g,
	              function () {
	                return commentSource
	              }
	            )
	          ),
	          greedy: true,
	          alias: 'attr-name',
	          inside: {
	            comment: RegExp(commentSource),
	            string: {
	              pattern: /"(?:[^"]|"")*"(?!")/,
	              greedy: true
	            },
	            operator: /=/,
	            punctuation: /^#\[|\]$|[,()]/
	          }
	        },
	        {
	          pattern:
	            /\b(?:Cumulative|Global|Local|Monomorphic|NonCumulative|Polymorphic|Private|Program)\b/,
	          alias: 'attr-name'
	        }
	      ],
	      keyword:
	        /\b(?:Abort|About|Add|Admit|Admitted|All|Arguments|As|Assumptions|Axiom|Axioms|Back|BackTo|Backtrace|BinOp|BinOpSpec|BinRel|Bind|Blacklist|Canonical|Case|Cd|Check|Class|Classes|Close|CoFixpoint|CoInductive|Coercion|Coercions|Collection|Combined|Compute|Conjecture|Conjectures|Constant|Constants|Constraint|Constructors|Context|Corollary|Create|CstOp|Custom|Cut|Debug|Declare|Defined|Definition|Delimit|Dependencies|Dependent|Derive|Diffs|Drop|Elimination|End|Entry|Equality|Eval|Example|Existential|Existentials|Existing|Export|Extern|Extraction|Fact|Fail|Field|File|Firstorder|Fixpoint|Flags|Focus|From|Funclass|Function|Functional|GC|Generalizable|Goal|Grab|Grammar|Graph|Guarded|Haskell|Heap|Hide|Hint|HintDb|Hints|Hypotheses|Hypothesis|IF|Identity|Immediate|Implicit|Implicits|Import|Include|Induction|Inductive|Infix|Info|Initial|InjTyp|Inline|Inspect|Instance|Instances|Intro|Intros|Inversion|Inversion_clear|JSON|Language|Left|Lemma|Let|Lia|Libraries|Library|Load|LoadPath|Locate|Ltac|Ltac2|ML|Match|Method|Minimality|Module|Modules|Morphism|Next|NoInline|Notation|Number|OCaml|Obligation|Obligations|Opaque|Open|Optimize|Parameter|Parameters|Parametric|Path|Paths|Prenex|Preterm|Primitive|Print|Profile|Projections|Proof|Prop|PropBinOp|PropOp|PropUOp|Property|Proposition|Pwd|Qed|Quit|Rec|Record|Recursive|Redirect|Reduction|Register|Relation|Remark|Remove|Require|Reserved|Reset|Resolve|Restart|Rewrite|Right|Ring|Rings|SProp|Saturate|Save|Scheme|Scope|Scopes|Search|SearchHead|SearchPattern|SearchRewrite|Section|Separate|Set|Setoid|Show|Signatures|Solve|Solver|Sort|Sortclass|Sorted|Spec|Step|Strategies|Strategy|String|Structure|SubClass|Subgraph|SuchThat|Tactic|Term|TestCompile|Theorem|Time|Timeout|To|Transparent|Type|Typeclasses|Types|Typing|UnOp|UnOpSpec|Undelimit|Undo|Unfocus|Unfocused|Unfold|Universe|Universes|Unshelve|Variable|Variables|Variant|Verbose|View|Visibility|Zify|_|apply|as|at|by|cofix|else|end|exists|exists2|fix|for|forall|fun|if|in|let|match|measure|move|removed|return|struct|then|using|wf|where|with)\b/,
	      number:
	        /\b(?:0x[a-f0-9][a-f0-9_]*(?:\.[a-f0-9_]+)?(?:p[+-]?\d[\d_]*)?|\d[\d_]*(?:\.[\d_]+)?(?:e[+-]?\d[\d_]*)?)\b/i,
	      punct: {
	        pattern: /@\{|\{\||\[=|:>/,
	        alias: 'punctuation'
	      },
	      operator:
	        /\/\\|\\\/|\.{2,3}|:{1,2}=|\*\*|[-=]>|<(?:->?|[+:=>]|<:)|>(?:=|->)|\|[-|]?|[-!%&*+/<=>?@^~']/,
	      punctuation: /\.\(|`\(|@\{|`\{|\{\||\[=|:>|[:.,;(){}\[\]]/
	    };
	  })(Prism);
	}

	// @ts-nocheck
	crystal.displayName = 'crystal';
	crystal.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function crystal(Prism) {
	  Prism.register(ruby)
	  ;(function (Prism) {
	    Prism.languages.crystal = Prism.languages.extend('ruby', {
	      keyword: [
	        /\b(?:__DIR__|__END_LINE__|__FILE__|__LINE__|abstract|alias|annotation|as|asm|begin|break|case|class|def|do|else|elsif|end|ensure|enum|extend|for|fun|if|ifdef|include|instance_sizeof|lib|macro|module|next|of|out|pointerof|private|protected|ptr|require|rescue|return|select|self|sizeof|struct|super|then|type|typeof|undef|uninitialized|union|unless|until|when|while|with|yield)\b/,
	        {
	          pattern: /(\.\s*)(?:is_a|responds_to)\?/,
	          lookbehind: true
	        }
	      ],
	      number:
	        /\b(?:0b[01_]*[01]|0o[0-7_]*[0-7]|0x[\da-fA-F_]*[\da-fA-F]|(?:\d(?:[\d_]*\d)?)(?:\.[\d_]*\d)?(?:[eE][+-]?[\d_]*\d)?)(?:_(?:[uif](?:8|16|32|64))?)?\b/,
	      operator: [/->/, Prism.languages.ruby.operator],
	      punctuation: /[(){}[\].,;\\]/
	    });
	    Prism.languages.insertBefore('crystal', 'string-literal', {
	      attribute: {
	        pattern: /@\[.*?\]/,
	        inside: {
	          delimiter: {
	            pattern: /^@\[|\]$/,
	            alias: 'punctuation'
	          },
	          attribute: {
	            pattern: /^(\s*)\w+/,
	            lookbehind: true,
	            alias: 'class-name'
	          },
	          args: {
	            pattern: /\S(?:[\s\S]*\S)?/,
	            inside: Prism.languages.crystal
	          }
	        }
	      },
	      expansion: {
	        pattern: /\{(?:\{.*?\}|%.*?%)\}/,
	        inside: {
	          content: {
	            pattern: /^(\{.)[\s\S]+(?=.\}$)/,
	            lookbehind: true,
	            inside: Prism.languages.crystal
	          },
	          delimiter: {
	            pattern: /^\{[\{%]|[\}%]\}$/,
	            alias: 'operator'
	          }
	        }
	      },
	      char: {
	        pattern:
	          /'(?:[^\\\r\n]{1,2}|\\(?:.|u(?:[A-Fa-f0-9]{1,4}|\{[A-Fa-f0-9]{1,6}\})))'/,
	        greedy: true
	      }
	    });
	  })(Prism);
	}

	// @ts-nocheck
	cssExtras.displayName = 'css-extras';
	cssExtras.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function cssExtras(Prism) {
	  Prism.register(css)
	  ;(function (Prism) {
	    var string = /("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/;
	    var selectorInside;
	    Prism.languages.css.selector = {
	      pattern: Prism.languages.css.selector.pattern,
	      lookbehind: true,
	      inside: (selectorInside = {
	        'pseudo-element':
	          /:(?:after|before|first-letter|first-line|selection)|::[-\w]+/,
	        'pseudo-class': /:[-\w]+/,
	        class: /\.[-\w]+/,
	        id: /#[-\w]+/,
	        attribute: {
	          pattern: RegExp('\\[(?:[^[\\]"\']|' + string.source + ')*\\]'),
	          greedy: true,
	          inside: {
	            punctuation: /^\[|\]$/,
	            'case-sensitivity': {
	              pattern: /(\s)[si]$/i,
	              lookbehind: true,
	              alias: 'keyword'
	            },
	            namespace: {
	              pattern: /^(\s*)(?:(?!\s)[-*\w\xA0-\uFFFF])*\|(?!=)/,
	              lookbehind: true,
	              inside: {
	                punctuation: /\|$/
	              }
	            },
	            'attr-name': {
	              pattern: /^(\s*)(?:(?!\s)[-\w\xA0-\uFFFF])+/,
	              lookbehind: true
	            },
	            'attr-value': [
	              string,
	              {
	                pattern: /(=\s*)(?:(?!\s)[-\w\xA0-\uFFFF])+(?=\s*$)/,
	                lookbehind: true
	              }
	            ],
	            operator: /[|~*^$]?=/
	          }
	        },
	        'n-th': [
	          {
	            pattern: /(\(\s*)[+-]?\d*[\dn](?:\s*[+-]\s*\d+)?(?=\s*\))/,
	            lookbehind: true,
	            inside: {
	              number: /[\dn]+/,
	              operator: /[+-]/
	            }
	          },
	          {
	            pattern: /(\(\s*)(?:even|odd)(?=\s*\))/i,
	            lookbehind: true
	          }
	        ],
	        combinator: />|\+|~|\|\|/,
	        // the `tag` token has been existed and removed.
	        // because we can't find a perfect tokenize to match it.
	        // if you want to add it, please read https://github.com/PrismJS/prism/pull/2373 first.

	        punctuation: /[(),]/
	      })
	    };
	    Prism.languages.css['atrule'].inside['selector-function-argument'].inside =
	      selectorInside;
	    Prism.languages.insertBefore('css', 'property', {
	      variable: {
	        pattern:
	          /(^|[^-\w\xA0-\uFFFF])--(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*/i,
	        lookbehind: true
	      }
	    });
	    var unit = {
	      pattern: /(\b\d+)(?:%|[a-z]+(?![\w-]))/,
	      lookbehind: true
	    };
	    // 123 -123 .123 -.123 12.3 -12.3
	    var number = {
	      pattern: /(^|[^\w.-])-?(?:\d+(?:\.\d+)?|\.\d+)/,
	      lookbehind: true
	    };
	    Prism.languages.insertBefore('css', 'function', {
	      operator: {
	        pattern: /(\s)[+\-*\/](?=\s)/,
	        lookbehind: true
	      },
	      // CAREFUL!
	      // Previewers and Inline color use hexcode and color.
	      hexcode: {
	        pattern: /\B#[\da-f]{3,8}\b/i,
	        alias: 'color'
	      },
	      color: [
	        {
	          pattern:
	            /(^|[^\w-])(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|RebeccaPurple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)(?![\w-])/i,
	          lookbehind: true
	        },
	        {
	          pattern:
	            /\b(?:hsl|rgb)\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*\)\B|\b(?:hsl|rgb)a\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*,\s*(?:0|0?\.\d+|1)\s*\)\B/i,
	          inside: {
	            unit: unit,
	            number: number,
	            function: /[\w-]+(?=\()/,
	            punctuation: /[(),]/
	          }
	        }
	      ],
	      // it's important that there is no boundary assertion after the hex digits
	      entity: /\\[\da-f]{1,8}/i,
	      unit: unit,
	      number: number
	    });
	  })(Prism);
	}

	// @ts-nocheck
	csv.displayName = 'csv';
	csv.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function csv(Prism) {
	  // https://tools.ietf.org/html/rfc4180

	  Prism.languages.csv = {
	    value: /[^\r\n,"]+|"(?:[^"]|"")*"(?!")/,
	    punctuation: /,/
	  };
	}

	// @ts-nocheck
	cue.displayName = 'cue';
	cue.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function cue(Prism) {
	(function (Prism) {
	    // https://cuelang.org/docs/references/spec/

	    // eslint-disable-next-line regexp/strict
	    var stringEscape = /\\(?:(?!\2)|\2(?:[^()\r\n]|\([^()]*\)))/.source;
	    // eslint-disable-next-line regexp/strict
	    var stringTypes =
	      /"""(?:[^\\"]|"(?!""\2)|<esc>)*"""/.source +
	      // eslint-disable-next-line regexp/strict
	      '|' +
	      /'''(?:[^\\']|'(?!''\2)|<esc>)*'''/.source +
	      // eslint-disable-next-line regexp/strict
	      '|' +
	      /"(?:[^\\\r\n"]|"(?!\2)|<esc>)*"/.source +
	      // eslint-disable-next-line regexp/strict
	      '|' +
	      /'(?:[^\\\r\n']|'(?!\2)|<esc>)*'/.source;
	    var stringLiteral =
	      '(?:' + stringTypes.replace(/<esc>/g, stringEscape) + ')';
	    Prism.languages.cue = {
	      comment: {
	        pattern: /\/\/.*/,
	        greedy: true
	      },
	      'string-literal': {
	        // eslint-disable-next-line regexp/strict
	        pattern: RegExp(
	          /(^|[^#"'\\])(#*)/.source + stringLiteral + /(?!["'])\2/.source
	        ),
	        lookbehind: true,
	        greedy: true,
	        inside: {
	          // I'm using dirty hack here. We have to know the number hashes at the start of the string somehow,
	          // but we can't look back. So instead, we will use a lookahead, go to the end of the string, and
	          // capture the hashes at the end of the string.
	          escape: {
	            pattern:
	              /(?=[\s\S]*["'](#*)$)\\\1(?:U[a-fA-F0-9]{1,8}|u[a-fA-F0-9]{1,4}|x[a-fA-F0-9]{1,2}|\d{2,3}|[^(])/,
	            greedy: true,
	            alias: 'string'
	          },
	          interpolation: {
	            pattern: /(?=[\s\S]*["'](#*)$)\\\1\([^()]*\)/,
	            greedy: true,
	            inside: {
	              punctuation: /^\\#*\(|\)$/,
	              expression: {
	                pattern: /[\s\S]+/,
	                inside: null
	              }
	            }
	          },
	          string: /[\s\S]+/
	        }
	      },
	      keyword: {
	        pattern: /(^|[^\w$])(?:for|if|import|in|let|null|package)(?![\w$])/,
	        lookbehind: true
	      },
	      boolean: {
	        pattern: /(^|[^\w$])(?:false|true)(?![\w$])/,
	        lookbehind: true
	      },
	      builtin: {
	        pattern:
	          /(^|[^\w$])(?:bool|bytes|float|float(?:32|64)|u?int(?:8|16|32|64|128)?|number|rune|string)(?![\w$])/,
	        lookbehind: true
	      },
	      attribute: {
	        pattern: /@[\w$]+(?=\s*\()/,
	        alias: 'function'
	      },
	      function: {
	        pattern: /(^|[^\w$])[a-z_$][\w$]*(?=\s*\()/i,
	        lookbehind: true
	      },
	      number: {
	        pattern:
	          /(^|[^\w$.])(?:0b[01]+(?:_[01]+)*|0o[0-7]+(?:_[0-7]+)*|0[xX][0-9A-Fa-f]+(?:_[0-9A-Fa-f]+)*|(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[eE][+-]?\d+(?:_\d+)*)?(?:[KMGTP]i?)?)(?![\w$])/,
	        lookbehind: true
	      },
	      operator: /\.{3}|_\|_|&&?|\|\|?|[=!]~|[<>=!]=?|[+\-*/?]/,
	      punctuation: /[()[\]{},.:]/
	    };
	    Prism.languages.cue[
	      'string-literal'
	    ].inside.interpolation.inside.expression.inside = Prism.languages.cue;
	  })(Prism);
	}

	// @ts-nocheck
	cypher.displayName = 'cypher';
	cypher.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function cypher(Prism) {
	  Prism.languages.cypher = {
	    // https://neo4j.com/docs/cypher-manual/current/syntax/comments/
	    comment: /\/\/.*/,
	    string: {
	      pattern: /"(?:[^"\\\r\n]|\\.)*"|'(?:[^'\\\r\n]|\\.)*'/,
	      greedy: true
	    },
	    'class-name': {
	      pattern: /(:\s*)(?:\w+|`(?:[^`\\\r\n])*`)(?=\s*[{):])/,
	      lookbehind: true,
	      greedy: true
	    },
	    relationship: {
	      pattern:
	        /(-\[\s*(?:\w+\s*|`(?:[^`\\\r\n])*`\s*)?:\s*|\|\s*:\s*)(?:\w+|`(?:[^`\\\r\n])*`)/,
	      lookbehind: true,
	      greedy: true,
	      alias: 'property'
	    },
	    identifier: {
	      pattern: /`(?:[^`\\\r\n])*`/,
	      greedy: true
	    },
	    variable: /\$\w+/,
	    // https://neo4j.com/docs/cypher-manual/current/syntax/reserved/
	    keyword:
	      /\b(?:ADD|ALL|AND|AS|ASC|ASCENDING|ASSERT|BY|CALL|CASE|COMMIT|CONSTRAINT|CONTAINS|CREATE|CSV|DELETE|DESC|DESCENDING|DETACH|DISTINCT|DO|DROP|ELSE|END|ENDS|EXISTS|FOR|FOREACH|IN|INDEX|IS|JOIN|KEY|LIMIT|LOAD|MANDATORY|MATCH|MERGE|NODE|NOT|OF|ON|OPTIONAL|OR|ORDER(?=\s+BY)|PERIODIC|REMOVE|REQUIRE|RETURN|SCALAR|SCAN|SET|SKIP|START|STARTS|THEN|UNION|UNIQUE|UNWIND|USING|WHEN|WHERE|WITH|XOR|YIELD)\b/i,
	    function: /\b\w+\b(?=\s*\()/,
	    boolean: /\b(?:false|null|true)\b/i,
	    number: /\b(?:0x[\da-fA-F]+|\d+(?:\.\d+)?(?:[eE][+-]?\d+)?)\b/,
	    // https://neo4j.com/docs/cypher-manual/current/syntax/operators/
	    operator: /:|<--?|--?>?|<>|=~?|[<>]=?|[+*/%^|]|\.\.\.?/,
	    punctuation: /[()[\]{},;.]/
	  };
	}

	// @ts-nocheck
	d.displayName = 'd';
	d.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function d(Prism) {
	  Prism.register(clike);
	  Prism.languages.d = Prism.languages.extend('clike', {
	    comment: [
	      {
	        // Shebang
	        pattern: /^\s*#!.+/,
	        greedy: true
	      },
	      {
	        pattern: RegExp(
	          /(^|[^\\])/.source +
	            '(?:' +
	            [
	              // /+ comment +/
	              // Allow one level of nesting
	              /\/\+(?:\/\+(?:[^+]|\+(?!\/))*\+\/|(?!\/\+)[\s\S])*?\+\//.source,
	              // // comment
	              /\/\/.*/.source,
	              // /* comment */
	              /\/\*[\s\S]*?\*\//.source
	            ].join('|') +
	            ')'
	        ),
	        lookbehind: true,
	        greedy: true
	      }
	    ],
	    string: [
	      {
	        pattern: RegExp(
	          [
	            // r"", x""
	            /\b[rx]"(?:\\[\s\S]|[^\\"])*"[cwd]?/.source,
	            // q"[]", q"()", q"<>", q"{}"
	            /\bq"(?:\[[\s\S]*?\]|\([\s\S]*?\)|<[\s\S]*?>|\{[\s\S]*?\})"/.source,
	            // q"IDENT
	            // ...
	            // IDENT"
	            /\bq"((?!\d)\w+)$[\s\S]*?^\1"/.source,
	            // q"//", q"||", etc.
	            // eslint-disable-next-line regexp/strict
	            /\bq"(.)[\s\S]*?\2"/.source,
	            // eslint-disable-next-line regexp/strict
	            /(["`])(?:\\[\s\S]|(?!\3)[^\\])*\3[cwd]?/.source
	          ].join('|'),
	          'm'
	        ),
	        greedy: true
	      },
	      {
	        pattern: /\bq\{(?:\{[^{}]*\}|[^{}])*\}/,
	        greedy: true,
	        alias: 'token-string'
	      }
	    ],
	    // In order: $, keywords and special tokens, globally defined symbols
	    keyword:
	      /\$|\b(?:__(?:(?:DATE|EOF|FILE|FUNCTION|LINE|MODULE|PRETTY_FUNCTION|TIMESTAMP|TIME|VENDOR|VERSION)__|gshared|parameters|traits|vector)|abstract|alias|align|asm|assert|auto|body|bool|break|byte|case|cast|catch|cdouble|cent|cfloat|char|class|const|continue|creal|dchar|debug|default|delegate|delete|deprecated|do|double|dstring|else|enum|export|extern|false|final|finally|float|for|foreach|foreach_reverse|function|goto|idouble|if|ifloat|immutable|import|inout|int|interface|invariant|ireal|lazy|long|macro|mixin|module|new|nothrow|null|out|override|package|pragma|private|protected|ptrdiff_t|public|pure|real|ref|return|scope|shared|short|size_t|static|string|struct|super|switch|synchronized|template|this|throw|true|try|typedef|typeid|typeof|ubyte|ucent|uint|ulong|union|unittest|ushort|version|void|volatile|wchar|while|with|wstring)\b/,
	    number: [
	      // The lookbehind and the negative look-ahead try to prevent bad highlighting of the .. operator
	      // Hexadecimal numbers must be handled separately to avoid problems with exponent "e"
	      /\b0x\.?[a-f\d_]+(?:(?!\.\.)\.[a-f\d_]*)?(?:p[+-]?[a-f\d_]+)?[ulfi]{0,4}/i,
	      {
	        pattern:
	          /((?:\.\.)?)(?:\b0b\.?|\b|\.)\d[\d_]*(?:(?!\.\.)\.[\d_]*)?(?:e[+-]?\d[\d_]*)?[ulfi]{0,4}/i,
	        lookbehind: true
	      }
	    ],
	    operator:
	      /\|[|=]?|&[&=]?|\+[+=]?|-[-=]?|\.?\.\.|=[>=]?|!(?:i[ns]\b|<>?=?|>=?|=)?|\bi[ns]\b|(?:<[<>]?|>>?>?|\^\^|[*\/%^~])=?/
	  });
	  Prism.languages.insertBefore('d', 'string', {
	    // Characters
	    // 'a', '\\', '\n', '\xFF', '\377', '\uFFFF', '\U0010FFFF', '\quot'
	    char: /'(?:\\(?:\W|\w+)|[^\\])'/
	  });
	  Prism.languages.insertBefore('d', 'keyword', {
	    property: /\B@\w*/
	  });
	  Prism.languages.insertBefore('d', 'function', {
	    register: {
	      // Iasm registers
	      pattern:
	        /\b(?:[ABCD][LHX]|E?(?:BP|DI|SI|SP)|[BS]PL|[ECSDGF]S|CR[0234]|[DS]IL|DR[012367]|E[ABCD]X|X?MM[0-7]|R(?:1[0-5]|[89])[BWD]?|R[ABCD]X|R[BS]P|R[DS]I|TR[3-7]|XMM(?:1[0-5]|[89])|YMM(?:1[0-5]|\d))\b|\bST(?:\([0-7]\)|\b)/,
	      alias: 'variable'
	    }
	  });
	}

	// @ts-nocheck
	dart.displayName = 'dart';
	dart.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function dart(Prism) {
	  Prism.register(clike)
	  ;(function (Prism) {
	    var keywords = [
	      /\b(?:async|sync|yield)\*/,
	      /\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|covariant|default|deferred|do|dynamic|else|enum|export|extends|extension|external|factory|final|finally|for|get|hide|if|implements|import|in|interface|library|mixin|new|null|on|operator|part|rethrow|return|set|show|static|super|switch|sync|this|throw|try|typedef|var|void|while|with|yield)\b/
	    ];

	    // Handles named imports, such as http.Client
	    var packagePrefix = /(^|[^\w.])(?:[a-z]\w*\s*\.\s*)*(?:[A-Z]\w*\s*\.\s*)*/
	      .source;

	    // based on the dart naming conventions
	    var className = {
	      pattern: RegExp(packagePrefix + /[A-Z](?:[\d_A-Z]*[a-z]\w*)?\b/.source),
	      lookbehind: true,
	      inside: {
	        namespace: {
	          pattern: /^[a-z]\w*(?:\s*\.\s*[a-z]\w*)*(?:\s*\.)?/,
	          inside: {
	            punctuation: /\./
	          }
	        }
	      }
	    };
	    Prism.languages.dart = Prism.languages.extend('clike', {
	      'class-name': [
	        className,
	        {
	          // variables and parameters
	          // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)
	          pattern: RegExp(
	            packagePrefix + /[A-Z]\w*(?=\s+\w+\s*[;,=()])/.source
	          ),
	          lookbehind: true,
	          inside: className.inside
	        }
	      ],
	      keyword: keywords,
	      operator:
	        /\bis!|\b(?:as|is)\b|\+\+|--|&&|\|\||<<=?|>>=?|~(?:\/=?)?|[+\-*\/%&^|=!<>]=?|\?/
	    });
	    Prism.languages.insertBefore('dart', 'string', {
	      'string-literal': {
	        pattern:
	          /r?(?:("""|''')[\s\S]*?\1|(["'])(?:\\.|(?!\2)[^\\\r\n])*\2(?!\2))/,
	        greedy: true,
	        inside: {
	          interpolation: {
	            pattern:
	              /((?:^|[^\\])(?:\\{2})*)\$(?:\w+|\{(?:[^{}]|\{[^{}]*\})*\})/,
	            lookbehind: true,
	            inside: {
	              punctuation: /^\$\{?|\}$/,
	              expression: {
	                pattern: /[\s\S]+/,
	                inside: Prism.languages.dart
	              }
	            }
	          },
	          string: /[\s\S]+/
	        }
	      },
	      string: undefined
	    });
	    Prism.languages.insertBefore('dart', 'class-name', {
	      metadata: {
	        pattern: /@\w+/,
	        alias: 'function'
	      }
	    });
	    Prism.languages.insertBefore('dart', 'class-name', {
	      generics: {
	        pattern:
	          /<(?:[\w\s,.&?]|<(?:[\w\s,.&?]|<(?:[\w\s,.&?]|<[\w\s,.&?]*>)*>)*>)*>/,
	        inside: {
	          'class-name': className,
	          keyword: keywords,
	          punctuation: /[<>(),.:]/,
	          operator: /[?&|]/
	        }
	      }
	    });
	  })(Prism);
	}

	// @ts-nocheck
	dataweave.displayName = 'dataweave';
	dataweave.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function dataweave(Prism) {
	(function (Prism) {
	    Prism.languages.dataweave = {
	      url: /\b[A-Za-z]+:\/\/[\w/:.?=&-]+|\burn:[\w:.?=&-]+/,
	      property: {
	        pattern: /(?:\b\w+#)?(?:"(?:\\.|[^\\"\r\n])*"|\b\w+)(?=\s*[:@])/,
	        greedy: true
	      },
	      string: {
	        pattern: /(["'`])(?:\\[\s\S]|(?!\1)[^\\])*\1/,
	        greedy: true
	      },
	      'mime-type':
	        /\b(?:application|audio|image|multipart|text|video)\/[\w+-]+/,
	      date: {
	        pattern: /\|[\w:+-]+\|/,
	        greedy: true
	      },
	      comment: [
	        {
	          pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
	          lookbehind: true,
	          greedy: true
	        },
	        {
	          pattern: /(^|[^\\:])\/\/.*/,
	          lookbehind: true,
	          greedy: true
	        }
	      ],
	      regex: {
	        pattern: /\/(?:[^\\\/\r\n]|\\[^\r\n])+\//,
	        greedy: true
	      },
	      keyword:
	        /\b(?:and|as|at|case|do|else|fun|if|input|is|match|not|ns|null|or|output|type|unless|update|using|var)\b/,
	      function: /\b[A-Z_]\w*(?=\s*\()/i,
	      number: /-?\b\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,
	      punctuation: /[{}[\];(),.:@]/,
	      operator: /<<|>>|->|[<>~=]=?|!=|--?-?|\+\+?|!|\?/,
	      boolean: /\b(?:false|true)\b/
	    };
	  })(Prism);
	}

	// @ts-nocheck
	dax.displayName = 'dax';
	dax.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function dax(Prism) {
	  Prism.languages.dax = {
	    comment: {
	      pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:--|\/\/).*)/,
	      lookbehind: true
	    },
	    'data-field': {
	      pattern:
	        /'(?:[^']|'')*'(?!')(?:\[[ \w\xA0-\uFFFF]+\])?|\w+\[[ \w\xA0-\uFFFF]+\]/,
	      alias: 'symbol'
	    },
	    measure: {
	      pattern: /\[[ \w\xA0-\uFFFF]+\]/,
	      alias: 'constant'
	    },
	    string: {
	      pattern: /"(?:[^"]|"")*"(?!")/,
	      greedy: true
	    },
	    function:
	      /\b(?:ABS|ACOS|ACOSH|ACOT|ACOTH|ADDCOLUMNS|ADDMISSINGITEMS|ALL|ALLCROSSFILTERED|ALLEXCEPT|ALLNOBLANKROW|ALLSELECTED|AND|APPROXIMATEDISTINCTCOUNT|ASIN|ASINH|ATAN|ATANH|AVERAGE|AVERAGEA|AVERAGEX|BETA\.DIST|BETA\.INV|BLANK|CALCULATE|CALCULATETABLE|CALENDAR|CALENDARAUTO|CEILING|CHISQ\.DIST|CHISQ\.DIST\.RT|CHISQ\.INV|CHISQ\.INV\.RT|CLOSINGBALANCEMONTH|CLOSINGBALANCEQUARTER|CLOSINGBALANCEYEAR|COALESCE|COMBIN|COMBINA|COMBINEVALUES|CONCATENATE|CONCATENATEX|CONFIDENCE\.NORM|CONFIDENCE\.T|CONTAINS|CONTAINSROW|CONTAINSSTRING|CONTAINSSTRINGEXACT|CONVERT|COS|COSH|COT|COTH|COUNT|COUNTA|COUNTAX|COUNTBLANK|COUNTROWS|COUNTX|CROSSFILTER|CROSSJOIN|CURRENCY|CURRENTGROUP|CUSTOMDATA|DATATABLE|DATE|DATEADD|DATEDIFF|DATESBETWEEN|DATESINPERIOD|DATESMTD|DATESQTD|DATESYTD|DATEVALUE|DAY|DEGREES|DETAILROWS|DISTINCT|DISTINCTCOUNT|DISTINCTCOUNTNOBLANK|DIVIDE|EARLIER|EARLIEST|EDATE|ENDOFMONTH|ENDOFQUARTER|ENDOFYEAR|EOMONTH|ERROR|EVEN|EXACT|EXCEPT|EXP|EXPON\.DIST|FACT|FALSE|FILTER|FILTERS|FIND|FIRSTDATE|FIRSTNONBLANK|FIRSTNONBLANKVALUE|FIXED|FLOOR|FORMAT|GCD|GENERATE|GENERATEALL|GENERATESERIES|GEOMEAN|GEOMEANX|GROUPBY|HASONEFILTER|HASONEVALUE|HOUR|IF|IF\.EAGER|IFERROR|IGNORE|INT|INTERSECT|ISBLANK|ISCROSSFILTERED|ISEMPTY|ISERROR|ISEVEN|ISFILTERED|ISINSCOPE|ISLOGICAL|ISNONTEXT|ISNUMBER|ISO\.CEILING|ISODD|ISONORAFTER|ISSELECTEDMEASURE|ISSUBTOTAL|ISTEXT|KEEPFILTERS|KEYWORDMATCH|LASTDATE|LASTNONBLANK|LASTNONBLANKVALUE|LCM|LEFT|LEN|LN|LOG|LOG10|LOOKUPVALUE|LOWER|MAX|MAXA|MAXX|MEDIAN|MEDIANX|MID|MIN|MINA|MINUTE|MINX|MOD|MONTH|MROUND|NATURALINNERJOIN|NATURALLEFTOUTERJOIN|NEXTDAY|NEXTMONTH|NEXTQUARTER|NEXTYEAR|NONVISUAL|NORM\.DIST|NORM\.INV|NORM\.S\.DIST|NORM\.S\.INV|NOT|NOW|ODD|OPENINGBALANCEMONTH|OPENINGBALANCEQUARTER|OPENINGBALANCEYEAR|OR|PARALLELPERIOD|PATH|PATHCONTAINS|PATHITEM|PATHITEMREVERSE|PATHLENGTH|PERCENTILE\.EXC|PERCENTILE\.INC|PERCENTILEX\.EXC|PERCENTILEX\.INC|PERMUT|PI|POISSON\.DIST|POWER|PREVIOUSDAY|PREVIOUSMONTH|PREVIOUSQUARTER|PREVIOUSYEAR|PRODUCT|PRODUCTX|QUARTER|QUOTIENT|RADIANS|RAND|RANDBETWEEN|RANK\.EQ|RANKX|RELATED|RELATEDTABLE|REMOVEFILTERS|REPLACE|REPT|RIGHT|ROLLUP|ROLLUPADDISSUBTOTAL|ROLLUPGROUP|ROLLUPISSUBTOTAL|ROUND|ROUNDDOWN|ROUNDUP|ROW|SAMEPERIODLASTYEAR|SAMPLE|SEARCH|SECOND|SELECTCOLUMNS|SELECTEDMEASURE|SELECTEDMEASUREFORMATSTRING|SELECTEDMEASURENAME|SELECTEDVALUE|SIGN|SIN|SINH|SQRT|SQRTPI|STARTOFMONTH|STARTOFQUARTER|STARTOFYEAR|STDEV\.P|STDEV\.S|STDEVX\.P|STDEVX\.S|SUBSTITUTE|SUBSTITUTEWITHINDEX|SUM|SUMMARIZE|SUMMARIZECOLUMNS|SUMX|SWITCH|T\.DIST|T\.DIST\.2T|T\.DIST\.RT|T\.INV|T\.INV\.2T|TAN|TANH|TIME|TIMEVALUE|TODAY|TOPN|TOPNPERLEVEL|TOPNSKIP|TOTALMTD|TOTALQTD|TOTALYTD|TREATAS|TRIM|TRUE|TRUNC|UNICHAR|UNICODE|UNION|UPPER|USERELATIONSHIP|USERNAME|USEROBJECTID|USERPRINCIPALNAME|UTCNOW|UTCTODAY|VALUE|VALUES|VAR\.P|VAR\.S|VARX\.P|VARX\.S|WEEKDAY|WEEKNUM|XIRR|XNPV|YEAR|YEARFRAC)(?=\s*\()/i,
	    keyword:
	      /\b(?:DEFINE|EVALUATE|MEASURE|ORDER\s+BY|RETURN|VAR|START\s+AT|ASC|DESC)\b/i,
	    boolean: {
	      pattern: /\b(?:FALSE|NULL|TRUE)\b/i,
	      alias: 'constant'
	    },
	    number: /\b\d+(?:\.\d*)?|\B\.\d+\b/,
	    operator: /:=|[-+*\/=^]|&&?|\|\||<(?:=>?|<|>)?|>[>=]?|\b(?:IN|NOT)\b/i,
	    punctuation: /[;\[\](){}`,.]/
	  };
	}

	// @ts-nocheck
	dhall.displayName = 'dhall';
	dhall.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function dhall(Prism) {
	  // ABNF grammar:
	  // https://github.com/dhall-lang/dhall-lang/blob/master/standard/dhall.abnf

	  Prism.languages.dhall = {
	    // Multi-line comments can be nested. E.g. {- foo {- bar -} -}
	    // The multi-line pattern is essentially this:
	    //   \{-(?:[^-{]|-(?!\})|\{(?!-)|<SELF>)*-\}
	    comment:
	      /--.*|\{-(?:[^-{]|-(?!\})|\{(?!-)|\{-(?:[^-{]|-(?!\})|\{(?!-))*-\})*-\}/,
	    string: {
	      pattern: /"(?:[^"\\]|\\.)*"|''(?:[^']|'(?!')|'''|''\$\{)*''(?!'|\$)/,
	      greedy: true,
	      inside: {
	        interpolation: {
	          pattern: /\$\{[^{}]*\}/,
	          inside: {
	            expression: {
	              pattern: /(^\$\{)[\s\S]+(?=\}$)/,
	              lookbehind: true,
	              alias: 'language-dhall',
	              inside: null // see blow
	            },

	            punctuation: /\$\{|\}/
	          }
	        }
	      }
	    },
	    label: {
	      pattern: /`[^`]*`/,
	      greedy: true
	    },
	    url: {
	      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L596
	      pattern:
	        /\bhttps?:\/\/[\w.:%!$&'*+;=@~-]+(?:\/[\w.:%!$&'*+;=@~-]*)*(?:\?[/?\w.:%!$&'*+;=@~-]*)?/,
	      greedy: true
	    },
	    env: {
	      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L661
	      pattern: /\benv:(?:(?!\d)\w+|"(?:[^"\\=]|\\.)*")/,
	      greedy: true,
	      inside: {
	        function: /^env/,
	        operator: /^:/,
	        variable: /[\s\S]+/
	      }
	    },
	    hash: {
	      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L725
	      pattern: /\bsha256:[\da-fA-F]{64}\b/,
	      inside: {
	        function: /sha256/,
	        operator: /:/,
	        number: /[\da-fA-F]{64}/
	      }
	    },
	    // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L359
	    keyword:
	      /\b(?:as|assert|else|forall|if|in|let|merge|missing|then|toMap|using|with)\b|\u2200/,
	    builtin: /\b(?:None|Some)\b/,
	    boolean: /\b(?:False|True)\b/,
	    number:
	      /\bNaN\b|-?\bInfinity\b|[+-]?\b(?:0x[\da-fA-F]+|\d+(?:\.\d+)?(?:e[+-]?\d+)?)\b/,
	    operator:
	      /\/\\|\/\/\\\\|&&|\|\||===|[!=]=|\/\/|->|\+\+|::|[+*#@=:?<>|\\\u2227\u2a53\u2261\u2afd\u03bb\u2192]/,
	    punctuation: /\.\.|[{}\[\](),./]/,
	    // we'll just assume that every capital word left is a type name
	    'class-name': /\b[A-Z]\w*\b/
	  };
	  Prism.languages.dhall.string.inside.interpolation.inside.expression.inside =
	    Prism.languages.dhall;
	}

	// @ts-nocheck
	django.displayName = 'django';
	django.aliases = ['jinja2'];

	/** @type {import('../core.js').Syntax} */
	function django(Prism) {
	  Prism.register(markupTemplating)
	  // Django/Jinja2 syntax definition for Prism.js <http://prismjs.com> syntax highlighter.
	  // Mostly it works OK but can paint code incorrectly on complex html/template tag combinations.

	  ;(function (Prism) {
	    Prism.languages.django = {
	      comment: /^\{#[\s\S]*?#\}$/,
	      tag: {
	        pattern: /(^\{%[+-]?\s*)\w+/,
	        lookbehind: true,
	        alias: 'keyword'
	      },
	      delimiter: {
	        pattern: /^\{[{%][+-]?|[+-]?[}%]\}$/,
	        alias: 'punctuation'
	      },
	      string: {
	        pattern: /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
	        greedy: true
	      },
	      filter: {
	        pattern: /(\|)\w+/,
	        lookbehind: true,
	        alias: 'function'
	      },
	      test: {
	        pattern: /(\bis\s+(?:not\s+)?)(?!not\b)\w+/,
	        lookbehind: true,
	        alias: 'function'
	      },
	      function: /\b[a-z_]\w+(?=\s*\()/i,
	      keyword:
	        /\b(?:and|as|by|else|for|if|import|in|is|loop|not|or|recursive|with|without)\b/,
	      operator: /[-+%=]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,
	      number: /\b\d+(?:\.\d+)?\b/,
	      boolean: /[Ff]alse|[Nn]one|[Tt]rue/,
	      variable: /\b\w+\b/,
	      punctuation: /[{}[\](),.:;]/
	    };
	    var pattern = /\{\{[\s\S]*?\}\}|\{%[\s\S]*?%\}|\{#[\s\S]*?#\}/g;
	    var markupTemplating = Prism.languages['markup-templating'];
	    Prism.hooks.add('before-tokenize', function (env) {
	      markupTemplating.buildPlaceholders(env, 'django', pattern);
	    });
	    Prism.hooks.add('after-tokenize', function (env) {
	      markupTemplating.tokenizePlaceholders(env, 'django');
	    });

	    // Add an Jinja2 alias
	    Prism.languages.jinja2 = Prism.languages.django;
	    Prism.hooks.add('before-tokenize', function (env) {
	      markupTemplating.buildPlaceholders(env, 'jinja2', pattern);
	    });
	    Prism.hooks.add('after-tokenize', function (env) {
	      markupTemplating.tokenizePlaceholders(env, 'jinja2');
	    });
	  })(Prism);
	}

	// @ts-nocheck
	dnsZoneFile.displayName = 'dns-zone-file';
	dnsZoneFile.aliases = ['dns-zone'];

	/** @type {import('../core.js').Syntax} */
	function dnsZoneFile(Prism) {
	  Prism.languages['dns-zone-file'] = {
	    comment: /;.*/,
	    string: {
	      pattern: /"(?:\\.|[^"\\\r\n])*"/,
	      greedy: true
	    },
	    variable: [
	      {
	        pattern: /(^\$ORIGIN[ \t]+)\S+/m,
	        lookbehind: true
	      },
	      {
	        pattern: /(^|\s)@(?=\s|$)/,
	        lookbehind: true
	      }
	    ],
	    keyword: /^\$(?:INCLUDE|ORIGIN|TTL)(?=\s|$)/m,
	    class: {
	      // https://tools.ietf.org/html/rfc1035#page-13
	      pattern: /(^|\s)(?:CH|CS|HS|IN)(?=\s|$)/,
	      lookbehind: true,
	      alias: 'keyword'
	    },
	    type: {
	      // https://en.wikipedia.org/wiki/List_of_DNS_record_types
	      pattern:
	        /(^|\s)(?:A|A6|AAAA|AFSDB|APL|ATMA|CAA|CDNSKEY|CDS|CERT|CNAME|DHCID|DLV|DNAME|DNSKEY|DS|EID|GID|GPOS|HINFO|HIP|IPSECKEY|ISDN|KEY|KX|LOC|MAILA|MAILB|MB|MD|MF|MG|MINFO|MR|MX|NAPTR|NB|NBSTAT|NIMLOC|NINFO|NS|NSAP|NSAP-PTR|NSEC|NSEC3|NSEC3PARAM|NULL|NXT|OPENPGPKEY|PTR|PX|RKEY|RP|RRSIG|RT|SIG|SINK|SMIMEA|SOA|SPF|SRV|SSHFP|TA|TKEY|TLSA|TSIG|TXT|UID|UINFO|UNSPEC|URI|WKS|X25)(?=\s|$)/,
	      lookbehind: true,
	      alias: 'keyword'
	    },
	    punctuation: /[()]/
	  };
	  Prism.languages['dns-zone'] = Prism.languages['dns-zone-file'];
	}

	// @ts-nocheck
	docker.displayName = 'docker';
	docker.aliases = ['dockerfile'];

	/** @type {import('../core.js').Syntax} */
	function docker(Prism) {
	(function (Prism) {
	    // Many of the following regexes will contain negated lookaheads like `[ \t]+(?![ \t])`. This is a trick to ensure
	    // that quantifiers behave *atomically*. Atomic quantifiers are necessary to prevent exponential backtracking.

	    var spaceAfterBackSlash =
	      /\\[\r\n](?:\s|\\[\r\n]|#.*(?!.))*(?![\s#]|\\[\r\n])/.source;
	    // At least one space, comment, or line break
	    var space = /(?:[ \t]+(?![ \t])(?:<SP_BS>)?|<SP_BS>)/.source.replace(
	      /<SP_BS>/g,
	      function () {
	        return spaceAfterBackSlash
	      }
	    );
	    var string =
	      /"(?:[^"\\\r\n]|\\(?:\r\n|[\s\S]))*"|'(?:[^'\\\r\n]|\\(?:\r\n|[\s\S]))*'/
	        .source;
	    var option = /--[\w-]+=(?:<STR>|(?!["'])(?:[^\s\\]|\\.)+)/.source.replace(
	      /<STR>/g,
	      function () {
	        return string
	      }
	    );
	    var stringRule = {
	      pattern: RegExp(string),
	      greedy: true
	    };
	    var commentRule = {
	      pattern: /(^[ \t]*)#.*/m,
	      lookbehind: true,
	      greedy: true
	    };

	    /**
	     * @param {string} source
	     * @param {string} flags
	     * @returns {RegExp}
	     */
	    function re(source, flags) {
	      source = source
	        .replace(/<OPT>/g, function () {
	          return option
	        })
	        .replace(/<SP>/g, function () {
	          return space
	        });
	      return RegExp(source, flags)
	    }
	    Prism.languages.docker = {
	      instruction: {
	        pattern:
	          /(^[ \t]*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\s)(?:\\.|[^\r\n\\])*(?:\\$(?:\s|#.*$)*(?![\s#])(?:\\.|[^\r\n\\])*)*/im,
	        lookbehind: true,
	        greedy: true,
	        inside: {
	          options: {
	            pattern: re(
	              /(^(?:ONBUILD<SP>)?\w+<SP>)<OPT>(?:<SP><OPT>)*/.source,
	              'i'
	            ),
	            lookbehind: true,
	            greedy: true,
	            inside: {
	              property: {
	                pattern: /(^|\s)--[\w-]+/,
	                lookbehind: true
	              },
	              string: [
	                stringRule,
	                {
	                  pattern: /(=)(?!["'])(?:[^\s\\]|\\.)+/,
	                  lookbehind: true
	                }
	              ],
	              operator: /\\$/m,
	              punctuation: /=/
	            }
	          },
	          keyword: [
	            {
	              // https://docs.docker.com/engine/reference/builder/#healthcheck
	              pattern: re(
	                /(^(?:ONBUILD<SP>)?HEALTHCHECK<SP>(?:<OPT><SP>)*)(?:CMD|NONE)\b/
	                  .source,
	                'i'
	              ),
	              lookbehind: true,
	              greedy: true
	            },
	            {
	              // https://docs.docker.com/engine/reference/builder/#from
	              pattern: re(
	                /(^(?:ONBUILD<SP>)?FROM<SP>(?:<OPT><SP>)*(?!--)[^ \t\\]+<SP>)AS/
	                  .source,
	                'i'
	              ),
	              lookbehind: true,
	              greedy: true
	            },
	            {
	              // https://docs.docker.com/engine/reference/builder/#onbuild
	              pattern: re(/(^ONBUILD<SP>)\w+/.source, 'i'),
	              lookbehind: true,
	              greedy: true
	            },
	            {
	              pattern: /^\w+/,
	              greedy: true
	            }
	          ],
	          comment: commentRule,
	          string: stringRule,
	          variable: /\$(?:\w+|\{[^{}"'\\]*\})/,
	          operator: /\\$/m
	        }
	      },
	      comment: commentRule
	    };
	    Prism.languages.dockerfile = Prism.languages.docker;
	  })(Prism);
	}

	// @ts-nocheck
	dot.displayName = 'dot';
	dot.aliases = ['gv'];

	/** @type {import('../core.js').Syntax} */
	function dot(Prism) {
	(function (Prism) {
	    var ID =
	      '(?:' +
	      [
	        // an identifier
	        /[a-zA-Z_\x80-\uFFFF][\w\x80-\uFFFF]*/.source,
	        // a number
	        /-?(?:\.\d+|\d+(?:\.\d*)?)/.source,
	        // a double-quoted string
	        /"[^"\\]*(?:\\[\s\S][^"\\]*)*"/.source,
	        // HTML-like string
	        /<(?:[^<>]|(?!<!--)<(?:[^<>"']|"[^"]*"|'[^']*')+>|<!--(?:[^-]|-(?!->))*-->)*>/
	          .source
	      ].join('|') +
	      ')';
	    var IDInside = {
	      markup: {
	        pattern: /(^<)[\s\S]+(?=>$)/,
	        lookbehind: true,
	        alias: ['language-markup', 'language-html', 'language-xml'],
	        inside: Prism.languages.markup
	      }
	    };

	    /**
	     * @param {string} source
	     * @param {string} flags
	     * @returns {RegExp}
	     */
	    function withID(source, flags) {
	      return RegExp(
	        source.replace(/<ID>/g, function () {
	          return ID
	        }),
	        flags
	      )
	    }
	    Prism.languages.dot = {
	      comment: {
	        pattern: /\/\/.*|\/\*[\s\S]*?\*\/|^#.*/m,
	        greedy: true
	      },
	      'graph-name': {
	        pattern: withID(
	          /(\b(?:digraph|graph|subgraph)[ \t\r\n]+)<ID>/.source,
	          'i'
	        ),
	        lookbehind: true,
	        greedy: true,
	        alias: 'class-name',
	        inside: IDInside
	      },
	      'attr-value': {
	        pattern: withID(/(=[ \t\r\n]*)<ID>/.source),
	        lookbehind: true,
	        greedy: true,
	        inside: IDInside
	      },
	      'attr-name': {
	        pattern: withID(/([\[;, \t\r\n])<ID>(?=[ \t\r\n]*=)/.source),
	        lookbehind: true,
	        greedy: true,
	        inside: IDInside
	      },
	      keyword: /\b(?:digraph|edge|graph|node|strict|subgraph)\b/i,
	      'compass-point': {
	        pattern: /(:[ \t\r\n]*)(?:[ewc_]|[ns][ew]?)(?![\w\x80-\uFFFF])/,
	        lookbehind: true,
	        alias: 'builtin'
	      },
	      node: {
	        pattern: withID(/(^|[^-.\w\x80-\uFFFF\\])<ID>/.source),
	        lookbehind: true,
	        greedy: true,
	        inside: IDInside
	      },
	      operator: /[=:]|-[->]/,
	      punctuation: /[\[\]{};,]/
	    };
	    Prism.languages.gv = Prism.languages.dot;
	  })(Prism);
	}

	// @ts-nocheck
	ebnf.displayName = 'ebnf';
	ebnf.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function ebnf(Prism) {
	  Prism.languages.ebnf = {
	    comment: /\(\*[\s\S]*?\*\)/,
	    string: {
	      pattern: /"[^"\r\n]*"|'[^'\r\n]*'/,
	      greedy: true
	    },
	    special: {
	      pattern: /\?[^?\r\n]*\?/,
	      greedy: true,
	      alias: 'class-name'
	    },
	    definition: {
	      pattern: /^([\t ]*)[a-z]\w*(?:[ \t]+[a-z]\w*)*(?=\s*=)/im,
	      lookbehind: true,
	      alias: ['rule', 'keyword']
	    },
	    rule: /\b[a-z]\w*(?:[ \t]+[a-z]\w*)*\b/i,
	    punctuation: /\([:/]|[:/]\)|[.,;()[\]{}]/,
	    operator: /[-=|*/!]/
	  };
	}

	// @ts-nocheck
	editorconfig.displayName = 'editorconfig';
	editorconfig.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function editorconfig(Prism) {
	  Prism.languages.editorconfig = {
	    // https://editorconfig-specification.readthedocs.io
	    comment: /[;#].*/,
	    section: {
	      pattern: /(^[ \t]*)\[.+\]/m,
	      lookbehind: true,
	      alias: 'selector',
	      inside: {
	        regex: /\\\\[\[\]{},!?.*]/,
	        // Escape special characters with '\\'
	        operator: /[!?]|\.\.|\*{1,2}/,
	        punctuation: /[\[\]{},]/
	      }
	    },
	    key: {
	      pattern: /(^[ \t]*)[^\s=]+(?=[ \t]*=)/m,
	      lookbehind: true,
	      alias: 'attr-name'
	    },
	    value: {
	      pattern: /=.*/,
	      alias: 'attr-value',
	      inside: {
	        punctuation: /^=/
	      }
	    }
	  };
	}

	// @ts-nocheck
	eiffel.displayName = 'eiffel';
	eiffel.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function eiffel(Prism) {
	  Prism.languages.eiffel = {
	    comment: /--.*/,
	    string: [
	      // Aligned-verbatim-strings
	      {
	        pattern: /"([^[]*)\[[\s\S]*?\]\1"/,
	        greedy: true
	      },
	      // Non-aligned-verbatim-strings
	      {
	        pattern: /"([^{]*)\{[\s\S]*?\}\1"/,
	        greedy: true
	      },
	      // Single-line string
	      {
	        pattern: /"(?:%(?:(?!\n)\s)*\n\s*%|%\S|[^%"\r\n])*"/,
	        greedy: true
	      }
	    ],
	    // normal char | special char | char code
	    char: /'(?:%.|[^%'\r\n])+'/,
	    keyword:
	      /\b(?:across|agent|alias|all|and|as|assign|attached|attribute|check|class|convert|create|Current|debug|deferred|detachable|do|else|elseif|end|ensure|expanded|export|external|feature|from|frozen|if|implies|inherit|inspect|invariant|like|local|loop|not|note|obsolete|old|once|or|Precursor|redefine|rename|require|rescue|Result|retry|select|separate|some|then|undefine|until|variant|Void|when|xor)\b/i,
	    boolean: /\b(?:False|True)\b/i,
	    // Convention: class-names are always all upper-case characters
	    'class-name': /\b[A-Z][\dA-Z_]*\b/,
	    number: [
	      // hexa | octal | bin
	      /\b0[xcb][\da-f](?:_*[\da-f])*\b/i,
	      // Decimal
	      /(?:\b\d(?:_*\d)*)?\.(?:(?:\d(?:_*\d)*)?e[+-]?)?\d(?:_*\d)*\b|\b\d(?:_*\d)*\b\.?/i
	    ],
	    punctuation: /:=|<<|>>|\(\||\|\)|->|\.(?=\w)|[{}[\];(),:?]/,
	    operator: /\\\\|\|\.\.\||\.\.|\/[~\/=]?|[><]=?|[-+*^=~]/
	  };
	}

	// @ts-nocheck
	ejs.displayName = 'ejs';
	ejs.aliases = ['eta'];

	/** @type {import('../core.js').Syntax} */
	function ejs(Prism) {
	  Prism.register(javascript);
	  Prism.register(markupTemplating)
	  ;(function (Prism) {
	    Prism.languages.ejs = {
	      delimiter: {
	        pattern: /^<%[-_=]?|[-_]?%>$/,
	        alias: 'punctuation'
	      },
	      comment: /^#[\s\S]*/,
	      'language-javascript': {
	        pattern: /[\s\S]+/,
	        inside: Prism.languages.javascript
	      }
	    };
	    Prism.hooks.add('before-tokenize', function (env) {
	      var ejsPattern = /<%(?!%)[\s\S]+?%>/g;
	      Prism.languages['markup-templating'].buildPlaceholders(
	        env,
	        'ejs',
	        ejsPattern
	      );
	    });
	    Prism.hooks.add('after-tokenize', function (env) {
	      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'ejs');
	    });
	    Prism.languages.eta = Prism.languages.ejs;
	  })(Prism);
	}

	// @ts-nocheck
	elixir.displayName = 'elixir';
	elixir.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function elixir(Prism) {
	  Prism.languages.elixir = {
	    doc: {
	      pattern:
	        /@(?:doc|moduledoc)\s+(?:("""|''')[\s\S]*?\1|("|')(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2)/,
	      inside: {
	        attribute: /^@\w+/,
	        string: /['"][\s\S]+/
	      }
	    },
	    comment: {
	      pattern: /#.*/,
	      greedy: true
	    },
	    // ~r"""foo""" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r"foo", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>
	    regex: {
	      pattern:
	        /~[rR](?:("""|''')(?:\\[\s\S]|(?!\1)[^\\])+\1|([\/|"'])(?:\\.|(?!\2)[^\\\r\n])+\2|\((?:\\.|[^\\)\r\n])+\)|\[(?:\\.|[^\\\]\r\n])+\]|\{(?:\\.|[^\\}\r\n])+\}|<(?:\\.|[^\\>\r\n])+>)[uismxfr]*/,
	      greedy: true
	    },
	    string: [
	      {
	        // ~s"""foo""" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s"foo", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>
	        pattern:
	          /~[cCsSwW](?:("""|''')(?:\\[\s\S]|(?!\1)[^\\])+\1|([\/|"'])(?:\\.|(?!\2)[^\\\r\n])+\2|\((?:\\.|[^\\)\r\n])+\)|\[(?:\\.|[^\\\]\r\n])+\]|\{(?:\\.|#\{[^}]+\}|#(?!\{)|[^#\\}\r\n])+\}|<(?:\\.|[^\\>\r\n])+>)[csa]?/,
	        greedy: true,
	        inside: {
	          // See interpolation below
	        }
	      },
	      {
	        pattern: /("""|''')[\s\S]*?\1/,
	        greedy: true,
	        inside: {
	          // See interpolation below
	        }
	      },
	      {
	        // Multi-line strings are allowed
	        pattern: /("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
	        greedy: true,
	        inside: {
	          // See interpolation below
	        }
	      }
	    ],
	    atom: {
	      // Look-behind prevents bad highlighting of the :: operator
	      pattern: /(^|[^:]):\w+/,
	      lookbehind: true,
	      alias: 'symbol'
	    },
	    module: {
	      pattern: /\b[A-Z]\w*\b/,
	      alias: 'class-name'
	    },
	    // Look-ahead prevents bad highlighting of the :: operator
	    'attr-name': /\b\w+\??:(?!:)/,
	    argument: {
	      // Look-behind prevents bad highlighting of the && operator
	      pattern: /(^|[^&])&\d+/,
	      lookbehind: true,
	      alias: 'variable'
	    },
	    attribute: {
	      pattern: /@\w+/,
	      alias: 'variable'
	    },
	    function: /\b[_a-zA-Z]\w*[?!]?(?:(?=\s*(?:\.\s*)?\()|(?=\/\d))/,
	    number: /\b(?:0[box][a-f\d_]+|\d[\d_]*)(?:\.[\d_]+)?(?:e[+-]?[\d_]+)?\b/i,
	    keyword:
	      /\b(?:after|alias|and|case|catch|cond|def(?:callback|delegate|exception|impl|macro|module|n|np|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|quote|raise|require|rescue|try|unless|unquote|use|when)\b/,
	    boolean: /\b(?:false|nil|true)\b/,
	    operator: [
	      /\bin\b|&&?|\|[|>]?|\\\\|::|\.\.\.?|\+\+?|-[->]?|<[-=>]|>=|!==?|\B!|=(?:==?|[>~])?|[*\/^]/,
	      {
	        // We don't want to match <<
	        pattern: /([^<])<(?!<)/,
	        lookbehind: true
	      },
	      {
	        // We don't want to match >>
	        pattern: /([^>])>(?!>)/,
	        lookbehind: true
	      }
	    ],
	    punctuation: /<<|>>|[.,%\[\]{}()]/
	  };
	  Prism.languages.elixir.string.forEach(function (o) {
	    o.inside = {
	      interpolation: {
	        pattern: /#\{[^}]+\}/,
	        inside: {
	          delimiter: {
	            pattern: /^#\{|\}$/,
	            alias: 'punctuation'
	          },
	          rest: Prism.languages.elixir
	        }
	      }
	    };
	  });
	}

	// @ts-nocheck
	elm.displayName = 'elm';
	elm.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function elm(Prism) {
	  Prism.languages.elm = {
	    comment: /--.*|\{-[\s\S]*?-\}/,
	    char: {
	      pattern:
	        /'(?:[^\\'\r\n]|\\(?:[abfnrtv\\']|\d+|x[0-9a-fA-F]+|u\{[0-9a-fA-F]+\}))'/,
	      greedy: true
	    },
	    string: [
	      {
	        // Multiline strings are wrapped in triple ". Quotes may appear unescaped.
	        pattern: /"""[\s\S]*?"""/,
	        greedy: true
	      },
	      {
	        pattern: /"(?:[^\\"\r\n]|\\.)*"/,
	        greedy: true
	      }
	    ],
	    'import-statement': {
	      // The imported or hidden names are not included in this import
	      // statement. This is because we want to highlight those exactly like
	      // we do for the names in the program.
	      pattern:
	        /(^[\t ]*)import\s+[A-Z]\w*(?:\.[A-Z]\w*)*(?:\s+as\s+(?:[A-Z]\w*)(?:\.[A-Z]\w*)*)?(?:\s+exposing\s+)?/m,
	      lookbehind: true,
	      inside: {
	        keyword: /\b(?:as|exposing|import)\b/
	      }
	    },
	    keyword:
	      /\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\b/,
	    // These are builtin variables only. Constructors are highlighted later as a constant.
	    builtin:
	      /\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\b/,
	    // decimal integers and floating point numbers | hexadecimal integers
	    number: /\b(?:\d+(?:\.\d+)?(?:e[+-]?\d+)?|0x[0-9a-f]+)\b/i,
	    // Most of this is needed because of the meaning of a single '.'.
	    // If it stands alone freely, it is the function composition.
	    // It may also be a separator between a module name and an identifier => no
	    // operator. If it comes together with other special characters it is an
	    // operator too.
	    // Valid operator characters in 0.18: +-/*=.$<>:&|^?%#@~!
	    // Ref: https://groups.google.com/forum/#!msg/elm-dev/0AHSnDdkSkQ/E0SVU70JEQAJ
	    operator: /\s\.\s|[+\-/*=.$<>:&|^?%#@~!]{2,}|[+\-/*=$<>:&|^?%#@~!]/,
	    // In Elm, nearly everything is a variable, do not highlight these.
	    hvariable: /\b(?:[A-Z]\w*\.)*[a-z]\w*\b/,
	    constant: /\b(?:[A-Z]\w*\.)*[A-Z]\w*\b/,
	    punctuation: /[{}[\]|(),.:]/
	  };
	}

	// @ts-nocheck
	etlua.displayName = 'etlua';
	etlua.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function etlua(Prism) {
	  Prism.register(lua);
	  Prism.register(markupTemplating)
	  ;(function (Prism) {
	    Prism.languages.etlua = {
	      delimiter: {
	        pattern: /^<%[-=]?|-?%>$/,
	        alias: 'punctuation'
	      },
	      'language-lua': {
	        pattern: /[\s\S]+/,
	        inside: Prism.languages.lua
	      }
	    };
	    Prism.hooks.add('before-tokenize', function (env) {
	      var pattern = /<%[\s\S]+?%>/g;
	      Prism.languages['markup-templating'].buildPlaceholders(
	        env,
	        'etlua',
	        pattern
	      );
	    });
	    Prism.hooks.add('after-tokenize', function (env) {
	      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'etlua');
	    });
	  })(Prism);
	}

	// @ts-nocheck
	erb.displayName = 'erb';
	erb.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function erb(Prism) {
	  Prism.register(markupTemplating);
	  Prism.register(ruby)
	  ;(function (Prism) {
	    Prism.languages.erb = {
	      delimiter: {
	        pattern: /^(\s*)<%=?|%>(?=\s*$)/,
	        lookbehind: true,
	        alias: 'punctuation'
	      },
	      ruby: {
	        pattern: /\s*\S[\s\S]*/,
	        alias: 'language-ruby',
	        inside: Prism.languages.ruby
	      }
	    };
	    Prism.hooks.add('before-tokenize', function (env) {
	      var erbPattern =
	        /<%=?(?:[^\r\n]|[\r\n](?!=begin)|[\r\n]=begin\s(?:[^\r\n]|[\r\n](?!=end))*[\r\n]=end)+?%>/g;
	      Prism.languages['markup-templating'].buildPlaceholders(
	        env,
	        'erb',
	        erbPattern
	      );
	    });
	    Prism.hooks.add('after-tokenize', function (env) {
	      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'erb');
	    });
	  })(Prism);
	}

	// @ts-nocheck
	erlang.displayName = 'erlang';
	erlang.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function erlang(Prism) {
	  Prism.languages.erlang = {
	    comment: /%.+/,
	    string: {
	      pattern: /"(?:\\.|[^\\"\r\n])*"/,
	      greedy: true
	    },
	    'quoted-function': {
	      pattern: /'(?:\\.|[^\\'\r\n])+'(?=\()/,
	      alias: 'function'
	    },
	    'quoted-atom': {
	      pattern: /'(?:\\.|[^\\'\r\n])+'/,
	      alias: 'atom'
	    },
	    boolean: /\b(?:false|true)\b/,
	    keyword: /\b(?:after|begin|case|catch|end|fun|if|of|receive|try|when)\b/,
	    number: [
	      /\$\\?./,
	      /\b\d+#[a-z0-9]+/i,
	      /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i
	    ],
	    function: /\b[a-z][\w@]*(?=\()/,
	    variable: {
	      // Look-behind is used to prevent wrong highlighting of atoms containing "@"
	      pattern: /(^|[^@])(?:\b|\?)[A-Z_][\w@]*/,
	      lookbehind: true
	    },
	    operator: [
	      /[=\/<>:]=|=[:\/]=|\+\+?|--?|[=*\/!]|\b(?:and|andalso|band|bnot|bor|bsl|bsr|bxor|div|not|or|orelse|rem|xor)\b/,
	      {
	        // We don't want to match <<
	        pattern: /(^|[^<])<(?!<)/,
	        lookbehind: true
	      },
	      {
	        // We don't want to match >>
	        pattern: /(^|[^>])>(?!>)/,
	        lookbehind: true
	      }
	    ],
	    atom: /\b[a-z][\w@]*/,
	    punctuation: /[()[\]{}:;,.#|]|<<|>>/
	  };
	}

	// @ts-nocheck
	excelFormula.displayName = 'excel-formula';
	excelFormula.aliases = ['xls', 'xlsx'];

	/** @type {import('../core.js').Syntax} */
	function excelFormula(Prism) {
	  Prism.languages['excel-formula'] = {
	    comment: {
	      pattern: /(\bN\(\s*)"(?:[^"]|"")*"(?=\s*\))/i,
	      lookbehind: true,
	      greedy: true
	    },
	    string: {
	      pattern: /"(?:[^"]|"")*"(?!")/,
	      greedy: true
	    },
	    reference: {
	      // https://www.ablebits.com/office-addins-blog/2015/12/08/excel-reference-another-sheet-workbook/

	      // Sales!B2
	      // 'Winter sales'!B2
	      // [Sales.xlsx]Jan!B2:B5
	      // D:\Reports\[Sales.xlsx]Jan!B2:B5
	      // '[Sales.xlsx]Jan sales'!B2:B5
	      // 'D:\Reports\[Sales.xlsx]Jan sales'!B2:B5

	      pattern:
	        /(?:'[^']*'|(?:[^\s()[\]{}<>*?"';,$&]*\[[^^\s()[\]{}<>*?"']+\])?\w+)!/,
	      greedy: true,
	      alias: 'string',
	      inside: {
	        operator: /!$/,
	        punctuation: /'/,
	        sheet: {
	          pattern: /[^[\]]+$/,
	          alias: 'function'
	        },
	        file: {
	          pattern: /\[[^[\]]+\]$/,
	          inside: {
	            punctuation: /[[\]]/
	          }
	        },
	        path: /[\s\S]+/
	      }
	    },
	    'function-name': {
	      pattern: /\b[A-Z]\w*(?=\()/i,
	      alias: 'builtin'
	    },
	    range: {
	      pattern:
	        /\$?\b(?:[A-Z]+\$?\d+:\$?[A-Z]+\$?\d+|[A-Z]+:\$?[A-Z]+|\d+:\$?\d+)\b/i,
	      alias: 'selector',
	      inside: {
	        operator: /:/,
	        cell: /\$?[A-Z]+\$?\d+/i,
	        column: /\$?[A-Z]+/i,
	        row: /\$?\d+/
	      }
	    },
	    cell: {
	      // Excel is case insensitive, so the string "foo1" could be either a variable or a cell.
	      // To combat this, we match cells case insensitive, if the contain at least one "$", and case sensitive otherwise.
	      pattern: /\b[A-Z]+\d+\b|\$[A-Za-z]+\$?\d+\b|\b[A-Za-z]+\$\d+\b/,
	      alias: 'selector'
	    },
	    number: /(?:\b\d+(?:\.\d+)?|\B\.\d+)(?:e[+-]?\d+)?\b/i,
	    boolean: /\b(?:FALSE|TRUE)\b/i,
	    operator: /[-+*/^%=&,]|<[=>]?|>=?/,
	    punctuation: /[[\]();{}|]/
	  };
	  Prism.languages['xlsx'] = Prism.languages['xls'] =
	    Prism.languages['excel-formula'];
	}

	// @ts-nocheck
	fsharp.displayName = 'fsharp';
	fsharp.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function fsharp(Prism) {
	  Prism.register(clike);
	  Prism.languages.fsharp = Prism.languages.extend('clike', {
	    comment: [
	      {
	        pattern: /(^|[^\\])\(\*(?!\))[\s\S]*?\*\)/,
	        lookbehind: true,
	        greedy: true
	      },
	      {
	        pattern: /(^|[^\\:])\/\/.*/,
	        lookbehind: true,
	        greedy: true
	      }
	    ],
	    string: {
	      pattern: /(?:"""[\s\S]*?"""|@"(?:""|[^"])*"|"(?:\\[\s\S]|[^\\"])*")B?/,
	      greedy: true
	    },
	    'class-name': {
	      pattern:
	        /(\b(?:exception|inherit|interface|new|of|type)\s+|\w\s*:\s*|\s:\??>\s*)[.\w]+\b(?:\s*(?:->|\*)\s*[.\w]+\b)*(?!\s*[:.])/,
	      lookbehind: true,
	      inside: {
	        operator: /->|\*/,
	        punctuation: /\./
	      }
	    },
	    keyword:
	      /\b(?:let|return|use|yield)(?:!\B|\b)|\b(?:abstract|and|as|asr|assert|atomic|base|begin|break|checked|class|component|const|constraint|constructor|continue|default|delegate|do|done|downcast|downto|eager|elif|else|end|event|exception|extern|external|false|finally|fixed|for|fun|function|functor|global|if|in|include|inherit|inline|interface|internal|land|lazy|lor|lsl|lsr|lxor|match|member|method|mixin|mod|module|mutable|namespace|new|not|null|object|of|open|or|override|parallel|private|process|protected|public|pure|rec|sealed|select|sig|static|struct|tailcall|then|to|trait|true|try|type|upcast|val|virtual|void|volatile|when|while|with)\b/,
	    number: [
	      /\b0x[\da-fA-F]+(?:LF|lf|un)?\b/,
	      /\b0b[01]+(?:uy|y)?\b/,
	      /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[fm]|e[+-]?\d+)?\b/i,
	      /\b\d+(?:[IlLsy]|UL|u[lsy]?)?\b/
	    ],
	    operator:
	      /([<>~&^])\1\1|([*.:<>&])\2|<-|->|[!=:]=|<?\|{1,3}>?|\??(?:<=|>=|<>|[-+*/%=<>])\??|[!?^&]|~[+~-]|:>|:\?>?/
	  });
	  Prism.languages.insertBefore('fsharp', 'keyword', {
	    preprocessor: {
	      pattern: /(^[\t ]*)#.*/m,
	      lookbehind: true,
	      alias: 'property',
	      inside: {
	        directive: {
	          pattern: /(^#)\b(?:else|endif|if|light|line|nowarn)\b/,
	          lookbehind: true,
	          alias: 'keyword'
	        }
	      }
	    }
	  });
	  Prism.languages.insertBefore('fsharp', 'punctuation', {
	    'computation-expression': {
	      pattern: /\b[_a-z]\w*(?=\s*\{)/i,
	      alias: 'keyword'
	    }
	  });
	  Prism.languages.insertBefore('fsharp', 'string', {
	    annotation: {
	      pattern: /\[<.+?>\]/,
	      greedy: true,
	      inside: {
	        punctuation: /^\[<|>\]$/,
	        'class-name': {
	          pattern: /^\w+$|(^|;\s*)[A-Z]\w*(?=\()/,
	          lookbehind: true
	        },
	        'annotation-content': {
	          pattern: /[\s\S]+/,
	          inside: Prism.languages.fsharp
	        }
	      }
	    },
	    char: {
	      pattern:
	        /'(?:[^\\']|\\(?:.|\d{3}|x[a-fA-F\d]{2}|u[a-fA-F\d]{4}|U[a-fA-F\d]{8}))'B?/,
	      greedy: true
	    }
	  });
	}

	// @ts-nocheck
	factor.displayName = 'factor';
	factor.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function factor(Prism) {
	(function (Prism) {
	    var comment_inside = {
	      function:
	        /\b(?:BUGS?|FIX(?:MES?)?|NOTES?|TODOS?|XX+|HACKS?|WARN(?:ING)?|\?{2,}|!{2,})\b/
	    };
	    var string_inside = {
	      number: /\\[^\s']|%\w/
	    };
	    var factor = {
	      comment: [
	        {
	          // ! single-line exclamation point comments with whitespace after/around the !
	          pattern: /(^|\s)(?:! .*|!$)/,
	          lookbehind: true,
	          inside: comment_inside
	        } /* from basis/multiline: */,
	        {
	          // /* comment */, /* comment*/
	          pattern: /(^|\s)\/\*\s[\s\S]*?\*\/(?=\s|$)/,
	          lookbehind: true,
	          greedy: true,
	          inside: comment_inside
	        },
	        {
	          // ![[ comment ]] , ![===[ comment]===]
	          pattern: /(^|\s)!\[(={0,6})\[\s[\s\S]*?\]\2\](?=\s|$)/,
	          lookbehind: true,
	          greedy: true,
	          inside: comment_inside
	        }
	      ],
	      number: [
	        {
	          // basic base 10 integers 9, -9
	          pattern: /(^|\s)[+-]?\d+(?=\s|$)/,
	          lookbehind: true
	        },
	        {
	          // base prefix integers 0b010 0o70 0xad 0d10 0XAD -0xa9
	          pattern: /(^|\s)[+-]?0(?:b[01]+|o[0-7]+|d\d+|x[\dA-F]+)(?=\s|$)/i,
	          lookbehind: true
	        },
	        {
	          // fractional ratios 1/5 -1/5 and the literal float approximations 1/5. -1/5.
	          pattern: /(^|\s)[+-]?\d+\/\d+\.?(?=\s|$)/,
	          lookbehind: true
	        },
	        {
	          // positive mixed numbers 23+1/5 +23+1/5
	          pattern: /(^|\s)\+?\d+\+\d+\/\d+(?=\s|$)/,
	          lookbehind: true
	        },
	        {
	          // negative mixed numbers -23-1/5
	          pattern: /(^|\s)-\d+-\d+\/\d+(?=\s|$)/,
	          lookbehind: true
	        },
	        {
	          // basic decimal floats -0.01 0. .0 .1 -.1 -1. -12.13 +12.13
	          // and scientific notation with base 10 exponents 3e4 3e-4 .3e-4
	          pattern:
	            /(^|\s)[+-]?(?:\d*\.\d+|\d+\.\d*|\d+)(?:e[+-]?\d+)?(?=\s|$)/i,
	          lookbehind: true
	        },
	        {
	          // NAN literal syntax NAN: 80000deadbeef, NAN: a
	          pattern: /(^|\s)NAN:\s+[\da-fA-F]+(?=\s|$)/,
	          lookbehind: true
	        },
	        {
	          /*
	base prefix floats 0x1.0p3 (8.0) 0b1.010p2 (5.0) 0x1.p1 0b1.11111111p11111...
	"The normalized hex form ±0x1.MMMMMMMMMMMMM[pP]±EEEE allows any floating-point number to be specified precisely.
	The values of MMMMMMMMMMMMM and EEEE map directly to the mantissa and exponent fields of the binary IEEE 754 representation."
	<https://docs.factorcode.org/content/article-syntax-floats.html>
	*/
	          pattern:
	            /(^|\s)[+-]?0(?:b1\.[01]*|o1\.[0-7]*|d1\.\d*|x1\.[\dA-F]*)p\d+(?=\s|$)/i,
	          lookbehind: true
	        }
	      ],
	      // R/ regexp?\/\\/
	      regexp: {
	        pattern:
	          /(^|\s)R\/\s(?:\\\S|[^\\/])*\/(?:[idmsr]*|[idmsr]+-[idmsr]+)(?=\s|$)/,
	        lookbehind: true,
	        alias: 'number',
	        inside: {
	          variable: /\\\S/,
	          keyword: /[+?*\[\]^$(){}.|]/,
	          operator: {
	            pattern: /(\/)[idmsr]+(?:-[idmsr]+)?/,
	            lookbehind: true
	          }
	        }
	      },
	      boolean: {
	        pattern: /(^|\s)[tf](?=\s|$)/,
	        lookbehind: true
	      },
	      // SBUF" asd", URL" ://...", P" /etc/"
	      'custom-string': {
	        pattern: /(^|\s)[A-Z0-9\-]+"\s(?:\\\S|[^"\\])*"/,
	        lookbehind: true,
	        greedy: true,
	        alias: 'string',
	        inside: {
	          number: /\\\S|%\w|\//
	        }
	      },
	      'multiline-string': [
	        {
	          // STRING: name \n content \n ; -> CONSTANT: name "content" (symbol)
	          pattern: /(^|\s)STRING:\s+\S+(?:\n|\r\n).*(?:\n|\r\n)\s*;(?=\s|$)/,
	          lookbehind: true,
	          greedy: true,
	          alias: 'string',
	          inside: {
	            number: string_inside.number,
	            // trailing semicolon on its own line
	            'semicolon-or-setlocal': {
	              pattern: /([\r\n][ \t]*);(?=\s|$)/,
	              lookbehind: true,
	              alias: 'function'
	            }
	          }
	        },
	        {
	          // HEREDOC: marker \n content \n marker ; -> "content" (immediate)
	          pattern: /(^|\s)HEREDOC:\s+\S+(?:\n|\r\n).*(?:\n|\r\n)\s*\S+(?=\s|$)/,
	          lookbehind: true,
	          greedy: true,
	          alias: 'string',
	          inside: string_inside
	        },
	        {
	          // [[ string ]], [==[ string]==]
	          pattern: /(^|\s)\[(={0,6})\[\s[\s\S]*?\]\2\](?=\s|$)/,
	          lookbehind: true,
	          greedy: true,
	          alias: 'string',
	          inside: string_inside
	        }
	      ],
	      'special-using': {
	        pattern: /(^|\s)USING:(?:\s\S+)*(?=\s+;(?:\s|$))/,
	        lookbehind: true,
	        alias: 'function',
	        inside: {
	          // this is essentially a regex for vocab names, which i don't want to specify
	          // but the USING: gets picked up as a vocab name
	          string: {
	            pattern: /(\s)[^:\s]+/,
	            lookbehind: true
	          }
	        }
	      },
	      /* this description of stack effect literal syntax is not complete and not as specific as theoretically possible
	trying to do better is more work and regex-computation-time than it's worth though.
	- we'd like to have the "delimiter" parts of the stack effect [ (, --, and ) ] be a different (less-important or comment-like) colour to the stack effect contents
	- we'd like if nested stack effects were treated as such rather than just appearing flat (with `inside`)
	- we'd like if the following variable name conventions were recognised specifically:
	special row variables = ..a b..
	type and stack effect annotations end with a colon = ( quot: ( a: ( -- ) -- b ) -- x ), ( x: number -- )
	word throws unconditional error = *
	any other word-like variable name = a ? q' etc
	https://docs.factorcode.org/content/article-effects.html
	these are pretty complicated to highlight properly without a real parser, and therefore out of scope
	the old pattern, which may be later useful, was: (^|\s)(?:call|execute|eval)?\((?:\s+[^"\r\n\t ]\S*)*?\s+--(?:\s+[^"\n\t ]\S*)*?\s+\)(?=\s|$)
	*/

	      // current solution is not great
	      'stack-effect-delimiter': [
	        {
	          // opening parenthesis
	          pattern: /(^|\s)(?:call|eval|execute)?\((?=\s)/,
	          lookbehind: true,
	          alias: 'operator'
	        },
	        {
	          // middle --
	          pattern: /(\s)--(?=\s)/,
	          lookbehind: true,
	          alias: 'operator'
	        },
	        {
	          // closing parenthesis
	          pattern: /(\s)\)(?=\s|$)/,
	          lookbehind: true,
	          alias: 'operator'
	        }
	      ],
	      combinators: {
	        pattern: null,
	        lookbehind: true,
	        alias: 'keyword'
	      },
	      'kernel-builtin': {
	        pattern: null,
	        lookbehind: true,
	        alias: 'variable'
	      },
	      'sequences-builtin': {
	        pattern: null,
	        lookbehind: true,
	        alias: 'variable'
	      },
	      'math-builtin': {
	        pattern: null,
	        lookbehind: true,
	        alias: 'variable'
	      },
	      'constructor-word': {
	        // <array> but not <=>
	        pattern: /(^|\s)<(?!=+>|-+>)\S+>(?=\s|$)/,
	        lookbehind: true,
	        alias: 'keyword'
	      },
	      'other-builtin-syntax': {
	        pattern: null,
	        lookbehind: true,
	        alias: 'operator'
	      },
	      /*
	full list of supported word naming conventions: (the convention appears outside of the [brackets])
	set-[x]
	change-[x]
	with-[x]
	new-[x]
	>[string]
	[base]>
	[string]>[number]
	+[symbol]+
	[boolean-word]?
	?[of]
	[slot-reader]>>
	>>[slot-setter]
	[slot-writer]<<
	([implementation-detail])
	[mutater]!
	[variant]*
	[prettyprint].
	$[help-markup]
	<constructors>, SYNTAX:, etc are supported by their own patterns.
	`with` and `new` from `kernel` are their own builtins.
	see <https://docs.factorcode.org/content/article-conventions.html>
	*/
	      'conventionally-named-word': {
	        pattern:
	          /(^|\s)(?!")(?:(?:change|new|set|with)-\S+|\$\S+|>[^>\s]+|[^:>\s]+>|[^>\s]+>[^>\s]+|\+[^+\s]+\+|[^?\s]+\?|\?[^?\s]+|[^>\s]+>>|>>[^>\s]+|[^<\s]+<<|\([^()\s]+\)|[^!\s]+!|[^*\s]\S*\*|[^.\s]\S*\.)(?=\s|$)/,
	        lookbehind: true,
	        alias: 'keyword'
	      },
	      'colon-syntax': {
	        pattern: /(^|\s)(?:[A-Z0-9\-]+#?)?:{1,2}\s+(?:;\S+|(?!;)\S+)(?=\s|$)/,
	        lookbehind: true,
	        greedy: true,
	        alias: 'function'
	      },
	      'semicolon-or-setlocal': {
	        pattern: /(\s)(?:;|:>)(?=\s|$)/,
	        lookbehind: true,
	        alias: 'function'
	      },
	      // do not highlight leading } or trailing X{ at the begin/end of the file as it's invalid syntax
	      'curly-brace-literal-delimiter': [
	        {
	          // opening
	          pattern: /(^|\s)[a-z]*\{(?=\s)/i,
	          lookbehind: true,
	          alias: 'operator'
	        },
	        {
	          // closing
	          pattern: /(\s)\}(?=\s|$)/,
	          lookbehind: true,
	          alias: 'operator'
	        }
	      ],
	      // do not highlight leading ] or trailing [ at the begin/end of the file as it's invalid syntax
	      'quotation-delimiter': [
	        {
	          // opening
	          pattern: /(^|\s)\[(?=\s)/,
	          lookbehind: true,
	          alias: 'operator'
	        },
	        {
	          // closing
	          pattern: /(\s)\](?=\s|$)/,
	          lookbehind: true,
	          alias: 'operator'
	        }
	      ],
	      'normal-word': {
	        pattern: /(^|\s)[^"\s]\S*(?=\s|$)/,
	        lookbehind: true
	      },
	      /*
	basic first-class string "a"
	with escaped double-quote "a\""
	escaped backslash "\\"
	and general escapes since Factor has so many "\N"
	syntax that works in the reference implementation that isn't fully
	supported because it's an implementation detail:
	"string 1""string 2" -> 2 strings (works anyway)
	"string"5 -> string, 5
	"string"[ ] -> string, quotation
	{ "a"} -> array<string>
	the rest of those examples all properly recognise the string, but not
	the other object (number, quotation, etc)
	this is fine for a regex-only implementation.
	*/
	      string: {
	        pattern: /"(?:\\\S|[^"\\])*"/,
	        greedy: true,
	        inside: string_inside
	      }
	    };
	    var escape = function (str) {
	      return (str + '').replace(/([.?*+\^$\[\]\\(){}|\-])/g, '\\$1')
	    };
	    var arrToWordsRegExp = function (arr) {
	      return new RegExp('(^|\\s)(?:' + arr.map(escape).join('|') + ')(?=\\s|$)')
	    };
	    var builtins = {
	      'kernel-builtin': [
	        'or',
	        '2nipd',
	        '4drop',
	        'tuck',
	        'wrapper',
	        'nip',
	        'wrapper?',
	        'callstack>array',
	        'die',
	        'dupd',
	        'callstack',
	        'callstack?',
	        '3dup',
	        'hashcode',
	        'pick',
	        '4nip',
	        'build',
	        '>boolean',
	        'nipd',
	        'clone',
	        '5nip',
	        'eq?',
	        '?',
	        '=',
	        'swapd',
	        '2over',
	        'clear',
	        '2dup',
	        'get-retainstack',
	        'not',
	        'tuple?',
	        'dup',
	        '3nipd',
	        'call',
	        '-rotd',
	        'object',
	        'drop',
	        'assert=',
	        'assert?',
	        '-rot',
	        'execute',
	        'boa',
	        'get-callstack',
	        'curried?',
	        '3drop',
	        'pickd',
	        'overd',
	        'over',
	        'roll',
	        '3nip',
	        'swap',
	        'and',
	        '2nip',
	        'rotd',
	        'throw',
	        '(clone)',
	        'hashcode*',
	        'spin',
	        'reach',
	        '4dup',
	        'equal?',
	        'get-datastack',
	        'assert',
	        '2drop',
	        '<wrapper>',
	        'boolean?',
	        'identity-hashcode',
	        'identity-tuple?',
	        'null',
	        'composed?',
	        'new',
	        '5drop',
	        'rot',
	        '-roll',
	        'xor',
	        'identity-tuple',
	        'boolean'
	      ],
	      'other-builtin-syntax': [
	        // syntax
	        '=======',
	        'recursive',
	        'flushable',
	        '>>',
	        '<<<<<<',
	        'M\\',
	        'B',
	        'PRIVATE>',
	        '\\',
	        '======',
	        'final',
	        'inline',
	        'delimiter',
	        'deprecated',
	        '<PRIVATE',
	        '>>>>>>',
	        '<<<<<<<',
	        'parse-complex',
	        'malformed-complex',
	        'read-only',
	        '>>>>>>>',
	        'call-next-method',
	        '<<',
	        'foldable',
	        // literals
	        '$',
	        '$[',
	        '${'
	      ],
	      'sequences-builtin': [
	        'member-eq?',
	        'mismatch',
	        'append',
	        'assert-sequence=',
	        'longer',
	        'repetition',
	        'clone-like',
	        '3sequence',
	        'assert-sequence?',
	        'last-index-from',
	        'reversed',
	        'index-from',
	        'cut*',
	        'pad-tail',
	        'join-as',
	        'remove-eq!',
	        'concat-as',
	        'but-last',
	        'snip',
	        'nths',
	        'nth',
	        'sequence',
	        'longest',
	        'slice?',
	        '<slice>',
	        'remove-nth',
	        'tail-slice',
	        'empty?',
	        'tail*',
	        'member?',
	        'virtual-sequence?',
	        'set-length',
	        'drop-prefix',
	        'iota',
	        'unclip',
	        'bounds-error?',
	        'unclip-last-slice',
	        'non-negative-integer-expected',
	        'non-negative-integer-expected?',
	        'midpoint@',
	        'longer?',
	        '?set-nth',
	        '?first',
	        'rest-slice',
	        'prepend-as',
	        'prepend',
	        'fourth',
	        'sift',
	        'subseq-start',
	        'new-sequence',
	        '?last',
	        'like',
	        'first4',
	        '1sequence',
	        'reverse',
	        'slice',
	        'virtual@',
	        'repetition?',
	        'set-last',
	        'index',
	        '4sequence',
	        'max-length',
	        'set-second',
	        'immutable-sequence',
	        'first2',
	        'first3',
	        'supremum',
	        'unclip-slice',
	        'suffix!',
	        'insert-nth',
	        'tail',
	        '3append',
	        'short',
	        'suffix',
	        'concat',
	        'flip',
	        'immutable?',
	        'reverse!',
	        '2sequence',
	        'sum',
	        'delete-all',
	        'indices',
	        'snip-slice',
	        '<iota>',
	        'check-slice',
	        'sequence?',
	        'head',
	        'append-as',
	        'halves',
	        'sequence=',
	        'collapse-slice',
	        '?second',
	        'slice-error?',
	        'product',
	        'bounds-check?',
	        'bounds-check',
	        'immutable',
	        'virtual-exemplar',
	        'harvest',
	        'remove',
	        'pad-head',
	        'last',
	        'set-fourth',
	        'cartesian-product',
	        'remove-eq',
	        'shorten',
	        'shorter',
	        'reversed?',
	        'shorter?',
	        'shortest',
	        'head-slice',
	        'pop*',
	        'tail-slice*',
	        'but-last-slice',
	        'iota?',
	        'append!',
	        'cut-slice',
	        'new-resizable',
	        'head-slice*',
	        'sequence-hashcode',
	        'pop',
	        'set-nth',
	        '?nth',
	        'second',
	        'join',
	        'immutable-sequence?',
	        '<reversed>',
	        '3append-as',
	        'virtual-sequence',
	        'subseq?',
	        'remove-nth!',
	        'length',
	        'last-index',
	        'lengthen',
	        'assert-sequence',
	        'copy',
	        'move',
	        'third',
	        'first',
	        'tail?',
	        'set-first',
	        'prefix',
	        'bounds-error',
	        '<repetition>',
	        'exchange',
	        'surround',
	        'cut',
	        'min-length',
	        'set-third',
	        'push-all',
	        'head?',
	        'subseq-start-from',
	        'delete-slice',
	        'rest',
	        'sum-lengths',
	        'head*',
	        'infimum',
	        'remove!',
	        'glue',
	        'slice-error',
	        'subseq',
	        'push',
	        'replace-slice',
	        'subseq-as',
	        'unclip-last'
	      ],
	      'math-builtin': [
	        'number=',
	        'next-power-of-2',
	        '?1+',
	        'fp-special?',
	        'imaginary-part',
	        'float>bits',
	        'number?',
	        'fp-infinity?',
	        'bignum?',
	        'fp-snan?',
	        'denominator',
	        'gcd',
	        '*',
	        '+',
	        'fp-bitwise=',
	        '-',
	        'u>=',
	        '/',
	        '>=',
	        'bitand',
	        'power-of-2?',
	        'log2-expects-positive',
	        'neg?',
	        '<',
	        'log2',
	        '>',
	        'integer?',
	        'number',
	        'bits>double',
	        '2/',
	        'zero?',
	        'bits>float',
	        'float?',
	        'shift',
	        'ratio?',
	        'rect>',
	        'even?',
	        'ratio',
	        'fp-sign',
	        'bitnot',
	        '>fixnum',
	        'complex?',
	        '/i',
	        'integer>fixnum',
	        '/f',
	        'sgn',
	        '>bignum',
	        'next-float',
	        'u<',
	        'u>',
	        'mod',
	        'recip',
	        'rational',
	        '>float',
	        '2^',
	        'integer',
	        'fixnum?',
	        'neg',
	        'fixnum',
	        'sq',
	        'bignum',
	        '>rect',
	        'bit?',
	        'fp-qnan?',
	        'simple-gcd',
	        'complex',
	        '<fp-nan>',
	        'real',
	        '>fraction',
	        'double>bits',
	        'bitor',
	        'rem',
	        'fp-nan-payload',
	        'real-part',
	        'log2-expects-positive?',
	        'prev-float',
	        'align',
	        'unordered?',
	        'float',
	        'fp-nan?',
	        'abs',
	        'bitxor',
	        'integer>fixnum-strict',
	        'u<=',
	        'odd?',
	        '<=',
	        '/mod',
	        '>integer',
	        'real?',
	        'rational?',
	        'numerator'
	      ]
	      // that's all for now
	    };

	    Object.keys(builtins).forEach(function (k) {
	      factor[k].pattern = arrToWordsRegExp(builtins[k]);
	    });
	    var combinators = [
	      // kernel
	      '2bi',
	      'while',
	      '2tri',
	      'bi*',
	      '4dip',
	      'both?',
	      'same?',
	      'tri@',
	      'curry',
	      'prepose',
	      '3bi',
	      '?if',
	      'tri*',
	      '2keep',
	      '3keep',
	      'curried',
	      '2keepd',
	      'when',
	      '2bi*',
	      '2tri*',
	      '4keep',
	      'bi@',
	      'keepdd',
	      'do',
	      'unless*',
	      'tri-curry',
	      'if*',
	      'loop',
	      'bi-curry*',
	      'when*',
	      '2bi@',
	      '2tri@',
	      'with',
	      '2with',
	      'either?',
	      'bi',
	      'until',
	      '3dip',
	      '3curry',
	      'tri-curry*',
	      'tri-curry@',
	      'bi-curry',
	      'keepd',
	      'compose',
	      '2dip',
	      'if',
	      '3tri',
	      'unless',
	      'tuple',
	      'keep',
	      '2curry',
	      'tri',
	      'most',
	      'while*',
	      'dip',
	      'composed',
	      'bi-curry@',
	      // sequences
	      'find-last-from',
	      'trim-head-slice',
	      'map-as',
	      'each-from',
	      'none?',
	      'trim-tail',
	      'partition',
	      'if-empty',
	      'accumulate*',
	      'reject!',
	      'find-from',
	      'accumulate-as',
	      'collector-for-as',
	      'reject',
	      'map',
	      'map-sum',
	      'accumulate!',
	      '2each-from',
	      'follow',
	      'supremum-by',
	      'map!',
	      'unless-empty',
	      'collector',
	      'padding',
	      'reduce-index',
	      'replicate-as',
	      'infimum-by',
	      'trim-tail-slice',
	      'count',
	      'find-index',
	      'filter',
	      'accumulate*!',
	      'reject-as',
	      'map-integers',
	      'map-find',
	      'reduce',
	      'selector',
	      'interleave',
	      '2map',
	      'filter-as',
	      'binary-reduce',
	      'map-index-as',
	      'find',
	      'produce',
	      'filter!',
	      'replicate',
	      'cartesian-map',
	      'cartesian-each',
	      'find-index-from',
	      'map-find-last',
	      '3map-as',
	      '3map',
	      'find-last',
	      'selector-as',
	      '2map-as',
	      '2map-reduce',
	      'accumulate',
	      'each',
	      'each-index',
	      'accumulate*-as',
	      'when-empty',
	      'all?',
	      'collector-as',
	      'push-either',
	      'new-like',
	      'collector-for',
	      '2selector',
	      'push-if',
	      '2all?',
	      'map-reduce',
	      '3each',
	      'any?',
	      'trim-slice',
	      '2reduce',
	      'change-nth',
	      'produce-as',
	      '2each',
	      'trim',
	      'trim-head',
	      'cartesian-find',
	      'map-index',
	      // math
	      'if-zero',
	      'each-integer',
	      'unless-zero',
	      '(find-integer)',
	      'when-zero',
	      'find-last-integer',
	      '(all-integers?)',
	      'times',
	      '(each-integer)',
	      'find-integer',
	      'all-integers?',
	      // math.combinators
	      'unless-negative',
	      'if-positive',
	      'when-positive',
	      'when-negative',
	      'unless-positive',
	      'if-negative',
	      // combinators
	      'case',
	      '2cleave',
	      'cond>quot',
	      'case>quot',
	      '3cleave',
	      'wrong-values',
	      'to-fixed-point',
	      'alist>quot',
	      'cond',
	      'cleave',
	      'call-effect',
	      'recursive-hashcode',
	      'spread',
	      'deep-spread>quot',
	      // combinators.short-circuit
	      '2||',
	      '0||',
	      'n||',
	      '0&&',
	      '2&&',
	      '3||',
	      '1||',
	      '1&&',
	      'n&&',
	      '3&&',
	      // combinators.smart
	      'smart-unless*',
	      'keep-inputs',
	      'reduce-outputs',
	      'smart-when*',
	      'cleave>array',
	      'smart-with',
	      'smart-apply',
	      'smart-if',
	      'inputs/outputs',
	      'output>sequence-n',
	      'map-outputs',
	      'map-reduce-outputs',
	      'dropping',
	      'output>array',
	      'smart-map-reduce',
	      'smart-2map-reduce',
	      'output>array-n',
	      'nullary',
	      'input<sequence',
	      'append-outputs',
	      'drop-inputs',
	      'inputs',
	      'smart-2reduce',
	      'drop-outputs',
	      'smart-reduce',
	      'preserving',
	      'smart-when',
	      'outputs',
	      'append-outputs-as',
	      'smart-unless',
	      'smart-if*',
	      'sum-outputs',
	      'input<sequence-unsafe',
	      'output>sequence'
	      // tafn
	    ];

	    factor.combinators.pattern = arrToWordsRegExp(combinators);
	    Prism.languages.factor = factor;
	  })(Prism);
	}

	// @ts-nocheck
	$false.displayName = 'false';
	$false.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function $false(Prism) {
	(function (Prism) {
	    /**
	     * Based on the manual by Wouter van Oortmerssen.
	     *
	     * @see {@link https://github.com/PrismJS/prism/issues/2801#issue-829717504}
	     */
	    Prism.languages['false'] = {
	      comment: {
	        pattern: /\{[^}]*\}/
	      },
	      string: {
	        pattern: /"[^"]*"/,
	        greedy: true
	      },
	      'character-code': {
	        pattern: /'(?:[^\r]|\r\n?)/,
	        alias: 'number'
	      },
	      'assembler-code': {
	        pattern: /\d+`/,
	        alias: 'important'
	      },
	      number: /\d+/,
	      operator: /[-!#$%&'*+,./:;=>?@\\^_`|~ßø]/,
	      punctuation: /\[|\]/,
	      variable: /[a-z]/,
	      'non-standard': {
	        pattern: /[()<BDO®]/,
	        alias: 'bold'
	      }
	    };
	  })(Prism);
	}

	// @ts-nocheck
	firestoreSecurityRules.displayName = 'firestore-security-rules';
	firestoreSecurityRules.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function firestoreSecurityRules(Prism) {
	  Prism.register(clike);
	  Prism.languages['firestore-security-rules'] = Prism.languages.extend(
	    'clike',
	    {
	      comment: /\/\/.*/,
	      keyword:
	        /\b(?:allow|function|if|match|null|return|rules_version|service)\b/,
	      operator: /&&|\|\||[<>!=]=?|[-+*/%]|\b(?:in|is)\b/
	    }
	  );
	  delete Prism.languages['firestore-security-rules']['class-name'];
	  Prism.languages.insertBefore('firestore-security-rules', 'keyword', {
	    path: {
	      pattern:
	        /(^|[\s(),])(?:\/(?:[\w\xA0-\uFFFF]+|\{[\w\xA0-\uFFFF]+(?:=\*\*)?\}|\$\([\w\xA0-\uFFFF.]+\)))+/,
	      lookbehind: true,
	      greedy: true,
	      inside: {
	        variable: {
	          pattern: /\{[\w\xA0-\uFFFF]+(?:=\*\*)?\}|\$\([\w\xA0-\uFFFF.]+\)/,
	          inside: {
	            operator: /=/,
	            keyword: /\*\*/,
	            punctuation: /[.$(){}]/
	          }
	        },
	        punctuation: /\//
	      }
	    },
	    method: {
	      // to make the pattern shorter, the actual method names are omitted
	      pattern: /(\ballow\s+)[a-z]+(?:\s*,\s*[a-z]+)*(?=\s*[:;])/,
	      lookbehind: true,
	      alias: 'builtin',
	      inside: {
	        punctuation: /,/
	      }
	    }
	  });
	}

	// @ts-nocheck
	flow.displayName = 'flow';
	flow.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function flow(Prism) {
	  Prism.register(javascript)
	  ;(function (Prism) {
	    Prism.languages.flow = Prism.languages.extend('javascript', {});
	    Prism.languages.insertBefore('flow', 'keyword', {
	      type: [
	        {
	          pattern:
	            /\b(?:[Bb]oolean|Function|[Nn]umber|[Ss]tring|[Ss]ymbol|any|mixed|null|void)\b/,
	          alias: 'class-name'
	        }
	      ]
	    });
	    Prism.languages.flow['function-variable'].pattern =
	      /(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=\s*(?:function\b|(?:\([^()]*\)(?:\s*:\s*\w+)?|(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/i;
	    delete Prism.languages.flow['parameter'];
	    Prism.languages.insertBefore('flow', 'operator', {
	      'flow-punctuation': {
	        pattern: /\{\||\|\}/,
	        alias: 'punctuation'
	      }
	    });
	    if (!Array.isArray(Prism.languages.flow.keyword)) {
	      Prism.languages.flow.keyword = [Prism.languages.flow.keyword];
	    }
	    Prism.languages.flow.keyword.unshift(
	      {
	        pattern: /(^|[^$]\b)(?:Class|declare|opaque|type)\b(?!\$)/,
	        lookbehind: true
	      },
	      {
	        pattern:
	          /(^|[^$]\B)\$(?:Diff|Enum|Exact|Keys|ObjMap|PropertyType|Record|Shape|Subtype|Supertype|await)\b(?!\$)/,
	        lookbehind: true
	      }
	    );
	  })(Prism);
	}

	// @ts-nocheck
	fortran.displayName = 'fortran';
	fortran.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function fortran(Prism) {
	  Prism.languages.fortran = {
	    'quoted-number': {
	      pattern: /[BOZ](['"])[A-F0-9]+\1/i,
	      alias: 'number'
	    },
	    string: {
	      pattern:
	        /(?:\b\w+_)?(['"])(?:\1\1|&(?:\r\n?|\n)(?:[ \t]*!.*(?:\r\n?|\n)|(?![ \t]*!))|(?!\1).)*(?:\1|&)/,
	      inside: {
	        comment: {
	          pattern: /(&(?:\r\n?|\n)\s*)!.*/,
	          lookbehind: true
	        }
	      }
	    },
	    comment: {
	      pattern: /!.*/,
	      greedy: true
	    },
	    boolean: /\.(?:FALSE|TRUE)\.(?:_\w+)?/i,
	    number: /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[ED][+-]?\d+)?(?:_\w+)?/i,
	    keyword: [
	      // Types
	      /\b(?:CHARACTER|COMPLEX|DOUBLE ?PRECISION|INTEGER|LOGICAL|REAL)\b/i,
	      // END statements
	      /\b(?:END ?)?(?:BLOCK ?DATA|DO|FILE|FORALL|FUNCTION|IF|INTERFACE|MODULE(?! PROCEDURE)|PROGRAM|SELECT|SUBROUTINE|TYPE|WHERE)\b/i,
	      // Statements
	      /\b(?:ALLOCATABLE|ALLOCATE|BACKSPACE|CALL|CASE|CLOSE|COMMON|CONTAINS|CONTINUE|CYCLE|DATA|DEALLOCATE|DIMENSION|DO|END|EQUIVALENCE|EXIT|EXTERNAL|FORMAT|GO ?TO|IMPLICIT(?: NONE)?|INQUIRE|INTENT|INTRINSIC|MODULE PROCEDURE|NAMELIST|NULLIFY|OPEN|OPTIONAL|PARAMETER|POINTER|PRINT|PRIVATE|PUBLIC|READ|RETURN|REWIND|SAVE|SELECT|STOP|TARGET|WHILE|WRITE)\b/i,
	      // Others
	      /\b(?:ASSIGNMENT|DEFAULT|ELEMENTAL|ELSE|ELSEIF|ELSEWHERE|ENTRY|IN|INCLUDE|INOUT|KIND|NULL|ONLY|OPERATOR|OUT|PURE|RECURSIVE|RESULT|SEQUENCE|STAT|THEN|USE)\b/i
	    ],
	    operator: [
	      /\*\*|\/\/|=>|[=\/]=|[<>]=?|::|[+\-*=%]|\.[A-Z]+\./i,
	      {
	        // Use lookbehind to prevent confusion with (/ /)
	        pattern: /(^|(?!\().)\/(?!\))/,
	        lookbehind: true
	      }
	    ],
	    punctuation: /\(\/|\/\)|[(),;:&]/
	  };
	}

	// @ts-nocheck
	ftl.displayName = 'ftl';
	ftl.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function ftl(Prism) {
	  Prism.register(markupTemplating)
	  ;(function (Prism) {
	    // https://freemarker.apache.org/docs/dgui_template_exp.html

	    // FTL expression with 4 levels of nesting supported
	    var FTL_EXPR =
	      /[^<()"']|\((?:<expr>)*\)|<(?!#--)|<#--(?:[^-]|-(?!->))*-->|"(?:[^\\"]|\\.)*"|'(?:[^\\']|\\.)*'/
	        .source;
	    for (var i = 0; i < 2; i++) {
	      FTL_EXPR = FTL_EXPR.replace(/<expr>/g, function () {
	        return FTL_EXPR
	      });
	    }
	    FTL_EXPR = FTL_EXPR.replace(/<expr>/g, /[^\s\S]/.source);
	    var ftl = {
	      comment: /<#--[\s\S]*?-->/,
	      string: [
	        {
	          // raw string
	          pattern: /\br("|')(?:(?!\1)[^\\]|\\.)*\1/,
	          greedy: true
	        },
	        {
	          pattern: RegExp(
	            /("|')(?:(?!\1|\$\{)[^\\]|\\.|\$\{(?:(?!\})(?:<expr>))*\})*\1/.source.replace(
	              /<expr>/g,
	              function () {
	                return FTL_EXPR
	              }
	            )
	          ),
	          greedy: true,
	          inside: {
	            interpolation: {
	              pattern: RegExp(
	                /((?:^|[^\\])(?:\\\\)*)\$\{(?:(?!\})(?:<expr>))*\}/.source.replace(
	                  /<expr>/g,
	                  function () {
	                    return FTL_EXPR
	                  }
	                )
	              ),
	              lookbehind: true,
	              inside: {
	                'interpolation-punctuation': {
	                  pattern: /^\$\{|\}$/,
	                  alias: 'punctuation'
	                },
	                rest: null
	              }
	            }
	          }
	        }
	      ],
	      keyword: /\b(?:as)\b/,
	      boolean: /\b(?:false|true)\b/,
	      'builtin-function': {
	        pattern: /((?:^|[^?])\?\s*)\w+/,
	        lookbehind: true,
	        alias: 'function'
	      },
	      function: /\b\w+(?=\s*\()/,
	      number: /\b\d+(?:\.\d+)?\b/,
	      operator:
	        /\.\.[<*!]?|->|--|\+\+|&&|\|\||\?{1,2}|[-+*/%!=<>]=?|\b(?:gt|gte|lt|lte)\b/,
	      punctuation: /[,;.:()[\]{}]/
	    };
	    ftl.string[1].inside.interpolation.inside.rest = ftl;
	    Prism.languages.ftl = {
	      'ftl-comment': {
	        // the pattern is shortened to be more efficient
	        pattern: /^<#--[\s\S]*/,
	        alias: 'comment'
	      },
	      'ftl-directive': {
	        pattern: /^<[\s\S]+>$/,
	        inside: {
	          directive: {
	            pattern: /(^<\/?)[#@][a-z]\w*/i,
	            lookbehind: true,
	            alias: 'keyword'
	          },
	          punctuation: /^<\/?|\/?>$/,
	          content: {
	            pattern: /\s*\S[\s\S]*/,
	            alias: 'ftl',
	            inside: ftl
	          }
	        }
	      },
	      'ftl-interpolation': {
	        pattern: /^\$\{[\s\S]*\}$/,
	        inside: {
	          punctuation: /^\$\{|\}$/,
	          content: {
	            pattern: /\s*\S[\s\S]*/,
	            alias: 'ftl',
	            inside: ftl
	          }
	        }
	      }
	    };
	    Prism.hooks.add('before-tokenize', function (env) {
	      // eslint-disable-next-line regexp/no-useless-lazy
	      var pattern = RegExp(
	        /<#--[\s\S]*?-->|<\/?[#@][a-zA-Z](?:<expr>)*?>|\$\{(?:<expr>)*?\}/.source.replace(
	          /<expr>/g,
	          function () {
	            return FTL_EXPR
	          }
	        ),
	        'gi'
	      );
	      Prism.languages['markup-templating'].buildPlaceholders(
	        env,
	        'ftl',
	        pattern
	      );
	    });
	    Prism.hooks.add('after-tokenize', function (env) {
	      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'ftl');
	    });
	  })(Prism);
	}

	// @ts-nocheck
	gml.displayName = 'gml';
	gml.aliases = ['gamemakerlanguage'];

	/** @type {import('../core.js').Syntax} */
	function gml(Prism) {
	  Prism.register(clike);
	  Prism.languages.gamemakerlanguage = Prism.languages.gml =
	    Prism.languages.extend('clike', {
	      keyword:
	        /\b(?:break|case|continue|default|do|else|enum|exit|for|globalvar|if|repeat|return|switch|until|var|while)\b/,
	      number:
	        /(?:\b0x[\da-f]+|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)[ulf]{0,4}/i,
	      operator:
	        /--|\+\+|[-+%/=]=?|!=|\*\*?=?|<[<=>]?|>[=>]?|&&?|\^\^?|\|\|?|~|\b(?:and|at|not|or|with|xor)\b/,
	      constant:
	        /\b(?:GM_build_date|GM_version|action_(?:continue|restart|reverse|stop)|all|gamespeed_(?:fps|microseconds)|global|local|noone|other|pi|pointer_(?:invalid|null)|self|timezone_(?:local|utc)|undefined|ev_(?:create|destroy|step|alarm|keyboard|mouse|collision|other|draw|draw_(?:begin|end|post|pre)|keypress|keyrelease|trigger|(?:left|middle|no|right)_button|(?:left|middle|right)_press|(?:left|middle|right)_release|mouse_(?:enter|leave|wheel_down|wheel_up)|global_(?:left|middle|right)_button|global_(?:left|middle|right)_press|global_(?:left|middle|right)_release|joystick(?:1|2)_(?:button1|button2|button3|button4|button5|button6|button7|button8|down|left|right|up)|outside|boundary|game_start|game_end|room_start|room_end|no_more_lives|animation_end|end_of_path|no_more_health|user\d|gui|gui_begin|gui_end|step_(?:begin|end|normal))|vk_(?:alt|anykey|backspace|control|delete|down|end|enter|escape|home|insert|left|nokey|pagedown|pageup|pause|printscreen|return|right|shift|space|tab|up|f\d|numpad\d|add|decimal|divide|lalt|lcontrol|lshift|multiply|ralt|rcontrol|rshift|subtract)|achievement_(?:filter_(?:all_players|favorites_only|friends_only)|friends_info|info|leaderboard_info|our_info|pic_loaded|show_(?:achievement|bank|friend_picker|leaderboard|profile|purchase_prompt|ui)|type_challenge|type_score_challenge)|asset_(?:font|object|path|room|script|shader|sound|sprite|tiles|timeline|unknown)|audio_(?:3d|falloff_(?:exponent_distance|exponent_distance_clamped|inverse_distance|inverse_distance_clamped|linear_distance|linear_distance_clamped|none)|mono|new_system|old_system|stereo)|bm_(?:add|complex|dest_alpha|dest_color|dest_colour|inv_dest_alpha|inv_dest_color|inv_dest_colour|inv_src_alpha|inv_src_color|inv_src_colour|max|normal|one|src_alpha|src_alpha_sat|src_color|src_colour|subtract|zero)|browser_(?:chrome|firefox|ie|ie_mobile|not_a_browser|opera|safari|safari_mobile|tizen|unknown|windows_store)|buffer_(?:bool|f16|f32|f64|fast|fixed|generalerror|grow|invalidtype|network|outofbounds|outofspace|s16|s32|s8|seek_end|seek_relative|seek_start|string|text|u16|u32|u64|u8|vbuffer|wrap)|c_(?:aqua|black|blue|dkgray|fuchsia|gray|green|lime|ltgray|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow)|cmpfunc_(?:always|equal|greater|greaterequal|less|lessequal|never|notequal)|cr_(?:appstart|arrow|beam|cross|default|drag|handpoint|hourglass|none|size_all|size_nesw|size_ns|size_nwse|size_we|uparrow)|cull_(?:clockwise|counterclockwise|noculling)|device_(?:emulator|tablet)|device_ios_(?:ipad|ipad_retina|iphone|iphone5|iphone6|iphone6plus|iphone_retina|unknown)|display_(?:landscape|landscape_flipped|portrait|portrait_flipped)|dll_(?:cdecl|cdel|stdcall)|ds_type_(?:grid|list|map|priority|queue|stack)|ef_(?:cloud|ellipse|explosion|firework|flare|rain|ring|smoke|smokeup|snow|spark|star)|fa_(?:archive|bottom|center|directory|hidden|left|middle|readonly|right|sysfile|top|volumeid)|fb_login_(?:default|fallback_to_webview|forcing_safari|forcing_webview|no_fallback_to_webview|use_system_account)|iap_(?:available|canceled|ev_consume|ev_product|ev_purchase|ev_restore|ev_storeload|failed|purchased|refunded|status_available|status_loading|status_processing|status_restoring|status_unavailable|status_uninitialised|storeload_failed|storeload_ok|unavailable)|leaderboard_type_(?:number|time_mins_secs)|lighttype_(?:dir|point)|matrix_(?:projection|view|world)|mb_(?:any|left|middle|none|right)|network_(?:config_(?:connect_timeout|disable_reliable_udp|enable_reliable_udp|use_non_blocking_socket)|socket_(?:bluetooth|tcp|udp)|type_(?:connect|data|disconnect|non_blocking_connect))|of_challenge_(?:lose|tie|win)|os_(?:android|ios|linux|macosx|ps3|ps4|psvita|unknown|uwp|win32|win8native|windows|winphone|xboxone)|phy_debug_render_(?:aabb|collision_pairs|coms|core_shapes|joints|obb|shapes)|phy_joint_(?:anchor_1_x|anchor_1_y|anchor_2_x|anchor_2_y|angle|angle_limits|damping_ratio|frequency|length_1|length_2|lower_angle_limit|max_force|max_length|max_motor_force|max_motor_torque|max_torque|motor_force|motor_speed|motor_torque|reaction_force_x|reaction_force_y|reaction_torque|speed|translation|upper_angle_limit)|phy_particle_data_flag_(?:category|color|colour|position|typeflags|velocity)|phy_particle_flag_(?:colormixing|colourmixing|elastic|powder|spring|tensile|viscous|wall|water|zombie)|phy_particle_group_flag_(?:rigid|solid)|pr_(?:linelist|linestrip|pointlist|trianglefan|trianglelist|trianglestrip)|ps_(?:distr|shape)_(?:diamond|ellipse|gaussian|invgaussian|line|linear|rectangle)|pt_shape_(?:circle|cloud|disk|explosion|flare|line|pixel|ring|smoke|snow|spark|sphere|square|star)|ty_(?:real|string)|gp_(?:face\d|axislh|axislv|axisrh|axisrv|padd|padl|padr|padu|select|shoulderl|shoulderlb|shoulderr|shoulderrb|start|stickl|stickr)|lb_disp_(?:none|numeric|time_ms|time_sec)|lb_sort_(?:ascending|descending|none)|ov_(?:achievements|community|friends|gamegroup|players|settings)|ugc_(?:filetype_(?:community|microtrans)|list_(?:Favorited|Followed|Published|Subscribed|UsedOrPlayed|VotedDown|VotedOn|VotedUp|WillVoteLater)|match_(?:AllGuides|Artwork|Collections|ControllerBindings|IntegratedGuides|Items|Items_Mtx|Items_ReadyToUse|Screenshots|UsableInGame|Videos|WebGuides)|query_(?:AcceptedForGameRankedByAcceptanceDate|CreatedByFriendsRankedByPublicationDate|FavoritedByFriendsRankedByPublicationDate|NotYetRated)|query_RankedBy(?:NumTimesReported|PublicationDate|TextSearch|TotalVotesAsc|Trend|Vote|VotesUp)|result_success|sortorder_CreationOrder(?:Asc|Desc)|sortorder_(?:ForModeration|LastUpdatedDesc|SubscriptionDateDesc|TitleAsc|VoteScoreDesc)|visibility_(?:friends_only|private|public))|vertex_usage_(?:binormal|blendindices|blendweight|color|colour|depth|fog|normal|position|psize|sample|tangent|texcoord|textcoord)|vertex_type_(?:float\d|color|colour|ubyte4)|input_type|layerelementtype_(?:background|instance|oldtilemap|particlesystem|sprite|tile|tilemap|undefined)|se_(?:chorus|compressor|echo|equalizer|flanger|gargle|none|reverb)|text_type|tile_(?:flip|index_mask|mirror|rotate)|(?:obj|rm|scr|spr)\w+)\b/,
	      variable:
	        /\b(?:alarm|application_surface|async_load|background_(?:alpha|blend|color|colour|foreground|height|hspeed|htiled|index|showcolor|showcolour|visible|vspeed|vtiled|width|x|xscale|y|yscale)|bbox_(?:bottom|left|right|top)|browser_(?:height|width)|caption_(?:health|lives|score)|current_(?:day|hour|minute|month|second|time|weekday|year)|cursor_sprite|debug_mode|delta_time|direction|display_aa|error_(?:last|occurred)|event_(?:action|number|object|type)|fps|fps_real|friction|game_(?:display|project|save)_(?:id|name)|gamemaker_(?:pro|registered|version)|gravity|gravity_direction|(?:h|v)speed|health|iap_data|id|image_(?:alpha|angle|blend|depth|index|number|speed|xscale|yscale)|instance_(?:count|id)|keyboard_(?:key|lastchar|lastkey|string)|layer|lives|mask_index|mouse_(?:button|lastbutton|x|y)|object_index|os_(?:browser|device|type|version)|path_(?:endaction|index|orientation|position|positionprevious|scale|speed)|persistent|phy_(?:rotation|(?:col_normal|collision|com|linear_velocity|position|speed)_(?:x|y)|angular_(?:damping|velocity)|position_(?:x|y)previous|speed|linear_damping|bullet|fixed_rotation|active|mass|inertia|dynamic|kinematic|sleeping|collision_points)|pointer_(?:invalid|null)|room|room_(?:caption|first|height|last|persistent|speed|width)|score|secure_mode|show_(?:health|lives|score)|solid|speed|sprite_(?:height|index|width|xoffset|yoffset)|temp_directory|timeline_(?:index|loop|position|running|speed)|transition_(?:color|kind|steps)|undefined|view_(?:angle|current|enabled|(?:h|v)(?:border|speed)|(?:h|w|x|y)port|(?:h|w|x|y)view|object|surface_id|visible)|visible|webgl_enabled|working_directory|(?:x|y)(?:previous|start)|x|y|argument(?:_relitive|_count|\d)|argument|global|local|other|self)\b/
	    });
	}

	// @ts-nocheck
	gap.displayName = 'gap';
	gap.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function gap(Prism) {
	  // https://www.gap-system.org/Manuals/doc/ref/chap4.html
	  // https://www.gap-system.org/Manuals/doc/ref/chap27.html

	  Prism.languages.gap = {
	    shell: {
	      pattern: /^gap>[\s\S]*?(?=^gap>|$(?![\s\S]))/m,
	      greedy: true,
	      inside: {
	        gap: {
	          pattern: /^(gap>).+(?:(?:\r(?:\n|(?!\n))|\n)>.*)*/,
	          lookbehind: true,
	          inside: null // see below
	        },

	        punctuation: /^gap>/
	      }
	    },
	    comment: {
	      pattern: /#.*/,
	      greedy: true
	    },
	    string: {
	      pattern:
	        /(^|[^\\'"])(?:'(?:[^\r\n\\']|\\.){1,10}'|"(?:[^\r\n\\"]|\\.)*"(?!")|"""[\s\S]*?""")/,
	      lookbehind: true,
	      greedy: true,
	      inside: {
	        continuation: {
	          pattern: /([\r\n])>/,
	          lookbehind: true,
	          alias: 'punctuation'
	        }
	      }
	    },
	    keyword:
	      /\b(?:Assert|Info|IsBound|QUIT|TryNextMethod|Unbind|and|atomic|break|continue|do|elif|else|end|fi|for|function|if|in|local|mod|not|od|or|quit|readonly|readwrite|rec|repeat|return|then|until|while)\b/,
	    boolean: /\b(?:false|true)\b/,
	    function: /\b[a-z_]\w*(?=\s*\()/i,
	    number: {
	      pattern:
	        /(^|[^\w.]|\.\.)(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)?(?:_[a-z]?)?(?=$|[^\w.]|\.\.)/,
	      lookbehind: true
	    },
	    continuation: {
	      pattern: /([\r\n])>/,
	      lookbehind: true,
	      alias: 'punctuation'
	    },
	    operator: /->|[-+*/^~=!]|<>|[<>]=?|:=|\.\./,
	    punctuation: /[()[\]{},;.:]/
	  };
	  Prism.languages.gap.shell.inside.gap.inside = Prism.languages.gap;
	}

	// @ts-nocheck
	gcode.displayName = 'gcode';
	gcode.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function gcode(Prism) {
	  Prism.languages.gcode = {
	    comment: /;.*|\B\(.*?\)\B/,
	    string: {
	      pattern: /"(?:""|[^"])*"/,
	      greedy: true
	    },
	    keyword: /\b[GM]\d+(?:\.\d+)?\b/,
	    property: /\b[A-Z]/,
	    checksum: {
	      pattern: /(\*)\d+/,
	      lookbehind: true,
	      alias: 'number'
	    },
	    // T0:0:0
	    punctuation: /[:*]/
	  };
	}

	// @ts-nocheck
	gdscript.displayName = 'gdscript';
	gdscript.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function gdscript(Prism) {
	  Prism.languages.gdscript = {
	    comment: /#.*/,
	    string: {
	      pattern:
	        /@?(?:("|')(?:(?!\1)[^\n\\]|\\[\s\S])*\1(?!"|')|"""(?:[^\\]|\\[\s\S])*?""")/,
	      greedy: true
	    },
	    'class-name': {
	      // class_name Foo, extends Bar, class InnerClass
	      // export(int) var baz, export(int, 0) var i
	      // as Node
	      // const FOO: int = 9, var bar: bool = true
	      // func add(reference: Item, amount: int) -> Item:
	      pattern:
	        /(^(?:class|class_name|extends)[ \t]+|^export\([ \t]*|\bas[ \t]+|(?:\b(?:const|var)[ \t]|[,(])[ \t]*\w+[ \t]*:[ \t]*|->[ \t]*)[a-zA-Z_]\w*/m,
	      lookbehind: true
	    },
	    keyword:
	      /\b(?:and|as|assert|break|breakpoint|class|class_name|const|continue|elif|else|enum|export|extends|for|func|if|in|is|master|mastersync|match|not|null|onready|or|pass|preload|puppet|puppetsync|remote|remotesync|return|self|setget|signal|static|tool|var|while|yield)\b/,
	    function: /\b[a-z_]\w*(?=[ \t]*\()/i,
	    variable: /\$\w+/,
	    number: [
	      /\b0b[01_]+\b|\b0x[\da-fA-F_]+\b|(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.[\d_]+)(?:e[+-]?[\d_]+)?\b/,
	      /\b(?:INF|NAN|PI|TAU)\b/
	    ],
	    constant: /\b[A-Z][A-Z_\d]*\b/,
	    boolean: /\b(?:false|true)\b/,
	    operator: /->|:=|&&|\|\||<<|>>|[-+*/%&|!<>=]=?|[~^]/,
	    punctuation: /[.:,;()[\]{}]/
	  };
	}

	// @ts-nocheck
	gedcom.displayName = 'gedcom';
	gedcom.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function gedcom(Prism) {
	  Prism.languages.gedcom = {
	    'line-value': {
	      // Preceded by level, optional pointer, and tag
	      pattern:
	        /(^[\t ]*\d+ +(?:@\w[\w!"$%&'()*+,\-./:;<=>?[\\\]^`{|}~\x80-\xfe #]*@ +)?\w+ ).+/m,
	      lookbehind: true,
	      inside: {
	        pointer: {
	          pattern: /^@\w[\w!"$%&'()*+,\-./:;<=>?[\\\]^`{|}~\x80-\xfe #]*@$/,
	          alias: 'variable'
	        }
	      }
	    },
	    record: {
	      // Preceded by level and optional pointer
	      pattern:
	        /(^[\t ]*\d+ +(?:@\w[\w!"$%&'()*+,\-./:;<=>?[\\\]^`{|}~\x80-\xfe #]*@ +)?)\w+/m,
	      lookbehind: true,
	      alias: 'tag'
	    },
	    level: {
	      pattern: /(^[\t ]*)\d+/m,
	      lookbehind: true,
	      alias: 'number'
	    },
	    pointer: {
	      pattern: /@\w[\w!"$%&'()*+,\-./:;<=>?[\\\]^`{|}~\x80-\xfe #]*@/,
	      alias: 'variable'
	    }
	  };
	}

	// @ts-nocheck
	gettext.displayName = 'gettext';
	gettext.aliases = ['po'];

	/** @type {import('../core.js').Syntax} */
	function gettext(Prism) {
	  Prism.languages.gettext = {
	    comment: [
	      {
	        pattern: /# .*/,
	        greedy: true,
	        alias: 'translator-comment'
	      },
	      {
	        pattern: /#\..*/,
	        greedy: true,
	        alias: 'extracted-comment'
	      },
	      {
	        pattern: /#:.*/,
	        greedy: true,
	        alias: 'reference-comment'
	      },
	      {
	        pattern: /#,.*/,
	        greedy: true,
	        alias: 'flag-comment'
	      },
	      {
	        pattern: /#\|.*/,
	        greedy: true,
	        alias: 'previously-untranslated-comment'
	      },
	      {
	        pattern: /#.*/,
	        greedy: true
	      }
	    ],
	    string: {
	      pattern: /(^|[^\\])"(?:[^"\\]|\\.)*"/,
	      lookbehind: true,
	      greedy: true
	    },
	    keyword: /^msg(?:ctxt|id|id_plural|str)\b/m,
	    number: /\b\d+\b/,
	    punctuation: /[\[\]]/
	  };
	  Prism.languages.po = Prism.languages.gettext;
	}

	// @ts-nocheck
	gherkin.displayName = 'gherkin';
	gherkin.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function gherkin(Prism) {
	(function (Prism) {
	    var tableRow = /(?:\r?\n|\r)[ \t]*\|.+\|(?:(?!\|).)*/.source;
	    Prism.languages.gherkin = {
	      pystring: {
	        pattern: /("""|''')[\s\S]+?\1/,
	        alias: 'string'
	      },
	      comment: {
	        pattern: /(^[ \t]*)#.*/m,
	        lookbehind: true
	      },
	      tag: {
	        pattern: /(^[ \t]*)@\S*/m,
	        lookbehind: true
	      },
	      feature: {
	        pattern:
	          /((?:^|\r?\n|\r)[ \t]*)(?:Ability|Ahoy matey!|Arwedd|Aspekt|Besigheid Behoefte|Business Need|Caracteristica|Característica|Egenskab|Egenskap|Eiginleiki|Feature|Fīča|Fitur|Fonctionnalité|Fonksyonalite|Funcionalidade|Funcionalitat|Functionalitate|Funcţionalitate|Funcționalitate|Functionaliteit|Fungsi|Funkcia|Funkcija|Funkcionalitāte|Funkcionalnost|Funkcja|Funksie|Funktionalität|Funktionalitéit|Funzionalità|Hwaet|Hwæt|Jellemző|Karakteristik|Lastnost|Mak|Mogucnost|laH|Mogućnost|Moznosti|Možnosti|OH HAI|Omadus|Ominaisuus|Osobina|Özellik|Potrzeba biznesowa|perbogh|poQbogh malja'|Požadavek|Požiadavka|Pretty much|Qap|Qu'meH 'ut|Savybė|Tính năng|Trajto|Vermoë|Vlastnosť|Właściwość|Značilnost|Δυνατότητα|Λειτουργία|Могућност|Мөмкинлек|Особина|Свойство|Үзенчәлеклелек|Функционал|Функционалност|Функция|Функціонал|תכונה|خاصية|خصوصیت|صلاحیت|کاروبار کی ضرورت|وِیژگی|रूप लेख|ਖਾਸੀਅਤ|ਨਕਸ਼ ਨੁਹਾਰ|ਮੁਹਾਂਦਰਾ|గుణము|ಹೆಚ್ಚಳ|ความต้องการทางธุรกิจ|ความสามารถ|โครงหลัก|기능|フィーチャ|功能|機能):(?:[^:\r\n]+(?:\r?\n|\r|$))*/,
	        lookbehind: true,
	        inside: {
	          important: {
	            pattern: /(:)[^\r\n]+/,
	            lookbehind: true
	          },
	          keyword: /[^:\r\n]+:/
	        }
	      },
	      scenario: {
	        pattern:
	          /(^[ \t]*)(?:Abstract Scenario|Abstrakt Scenario|Achtergrond|Aer|Ær|Agtergrond|All y'all|Antecedentes|Antecedents|Atburðarás|Atburðarásir|Awww, look mate|B4|Background|Baggrund|Bakgrund|Bakgrunn|Bakgrunnur|Beispiele|Beispiller|Bối cảnh|Cefndir|Cenario|Cenário|Cenario de Fundo|Cenário de Fundo|Cenarios|Cenários|Contesto|Context|Contexte|Contexto|Conto|Contoh|Contone|Dæmi|Dasar|Dead men tell no tales|Delineacao do Cenario|Delineação do Cenário|Dis is what went down|Dữ liệu|Dyagram Senaryo|Dyagram senaryo|Egzanp|Ejemplos|Eksempler|Ekzemploj|Enghreifftiau|Esbozo do escenario|Escenari|Escenario|Esempi|Esquema de l'escenari|Esquema del escenario|Esquema do Cenario|Esquema do Cenário|EXAMPLZ|Examples|Exempel|Exemple|Exemples|Exemplos|First off|Fono|Forgatókönyv|Forgatókönyv vázlat|Fundo|Geçmiş|Grundlage|Hannergrond|ghantoH|Háttér|Heave to|Istorik|Juhtumid|Keadaan|Khung kịch bản|Khung tình huống|Kịch bản|Koncept|Konsep skenario|Kontèks|Kontekst|Kontekstas|Konteksts|Kontext|Konturo de la scenaro|Latar Belakang|lut chovnatlh|lut|lutmey|Lýsing Atburðarásar|Lýsing Dæma|MISHUN SRSLY|MISHUN|Menggariskan Senario|mo'|Náčrt Scenára|Náčrt Scénáře|Náčrt Scenáru|Oris scenarija|Örnekler|Osnova|Osnova Scenára|Osnova scénáře|Osnutek|Ozadje|Paraugs|Pavyzdžiai|Példák|Piemēri|Plan du scénario|Plan du Scénario|Plan Senaryo|Plan senaryo|Plang vum Szenario|Pozadí|Pozadie|Pozadina|Príklady|Příklady|Primer|Primeri|Primjeri|Przykłady|Raamstsenaarium|Reckon it's like|Rerefons|Scenár|Scénář|Scenarie|Scenarij|Scenarijai|Scenarijaus šablonas|Scenariji|Scenārijs|Scenārijs pēc parauga|Scenarijus|Scenario|Scénario|Scenario Amlinellol|Scenario Outline|Scenario Template|Scenariomal|Scenariomall|Scenarios|Scenariu|Scenariusz|Scenaro|Schema dello scenario|Se ðe|Se the|Se þe|Senario|Senaryo Deskripsyon|Senaryo deskripsyon|Senaryo|Senaryo taslağı|Shiver me timbers|Situācija|Situai|Situasie Uiteensetting|Situasie|Skenario konsep|Skenario|Skica|Structura scenariu|Structură scenariu|Struktura scenarija|Stsenaarium|Swa hwaer swa|Swa|Swa hwær swa|Szablon scenariusza|Szenario|Szenariogrundriss|Tapaukset|Tapaus|Tapausaihio|Taust|Tausta|Template Keadaan|Template Senario|Template Situai|The thing of it is|Tình huống|Variantai|Voorbeelde|Voorbeelden|Wharrimean is|Yo-ho-ho|You'll wanna|Założenia|Παραδείγματα|Περιγραφή Σεναρίου|Σενάρια|Σενάριο|Υπόβαθρο|Кереш|Контекст|Концепт|Мисаллар|Мисоллар|Основа|Передумова|Позадина|Предистория|Предыстория|Приклади|Пример|Примери|Примеры|Рамка на сценарий|Скица|Структура сценарија|Структура сценария|Структура сценарію|Сценарий|Сценарий структураси|Сценарийның төзелеше|Сценарији|Сценарио|Сценарій|Тарих|Үрнәкләр|דוגמאות|רקע|תבנית תרחיש|תרחיש|الخلفية|الگوی سناریو|امثلة|پس منظر|زمینه|سناریو|سيناريو|سيناريو مخطط|مثالیں|منظر نامے کا خاکہ|منظرنامہ|نمونه ها|उदाहरण|परिदृश्य|परिदृश्य रूपरेखा|पृष्ठभूमि|ਉਦਾਹਰਨਾਂ|ਪਟਕਥਾ|ਪਟਕਥਾ ਢਾਂਚਾ|ਪਟਕਥਾ ਰੂਪ ਰੇਖਾ|ਪਿਛੋਕੜ|ఉదాహరణలు|కథనం|నేపథ్యం|సన్నివేశం|ಉದಾಹರಣೆಗಳು|ಕಥಾಸಾರಾಂಶ|ವಿವರಣೆ|ಹಿನ್ನೆಲೆ|โครงสร้างของเหตุการณ์|ชุดของตัวอย่าง|ชุดของเหตุการณ์|แนวคิด|สรุปเหตุการณ์|เหตุการณ์|배경|시나리오|시나리오 개요|예|サンプル|シナリオ|シナリオアウトライン|シナリオテンプレ|シナリオテンプレート|テンプレ|例|例子|剧本|剧本大纲|劇本|劇本大綱|场景|场景大纲|場景|場景大綱|背景):[^:\r\n]*/m,
	        lookbehind: true,
	        inside: {
	          important: {
	            pattern: /(:)[^\r\n]*/,
	            lookbehind: true
	          },
	          keyword: /[^:\r\n]+:/
	        }
	      },
	      'table-body': {
	        // Look-behind is used to skip the table head, which has the same format as any table row
	        pattern: RegExp('(' + tableRow + ')(?:' + tableRow + ')+'),
	        lookbehind: true,
	        inside: {
	          outline: {
	            pattern: /<[^>]+>/,
	            alias: 'variable'
	          },
	          td: {
	            pattern: /\s*[^\s|][^|]*/,
	            alias: 'string'
	          },
	          punctuation: /\|/
	        }
	      },
	      'table-head': {
	        pattern: RegExp(tableRow),
	        inside: {
	          th: {
	            pattern: /\s*[^\s|][^|]*/,
	            alias: 'variable'
	          },
	          punctuation: /\|/
	        }
	      },
	      atrule: {
	        pattern:
	          /(^[ \t]+)(?:'a|'ach|'ej|7|a|A také|A taktiež|A tiež|A zároveň|Aber|Ac|Adott|Akkor|Ak|Aleshores|Ale|Ali|Allora|Alors|Als|Ama|Amennyiben|Amikor|Ampak|an|AN|Ananging|And y'all|And|Angenommen|Anrhegedig a|An|Apabila|Atès|Atesa|Atunci|Avast!|Aye|A|awer|Bagi|Banjur|Bet|Biết|Blimey!|Buh|But at the end of the day I reckon|But y'all|But|BUT|Cal|Când|Cand|Cando|Ce|Cuando|Če|Ða ðe|Ða|Dadas|Dada|Dados|Dado|DaH ghu' bejlu'|dann|Dann|Dano|Dan|Dar|Dat fiind|Data|Date fiind|Date|Dati fiind|Dati|Daţi fiind|Dați fiind|DEN|Dato|De|Den youse gotta|Dengan|Diberi|Diyelim ki|Donada|Donat|Donitaĵo|Do|Dun|Duota|Ðurh|Eeldades|Ef|Eğer ki|Entao|Então|Entón|E|En|Entonces|Epi|És|Etant donnée|Etant donné|Et|Étant données|Étant donnée|Étant donné|Etant données|Etant donnés|Étant donnés|Fakat|Gangway!|Gdy|Gegeben seien|Gegeben sei|Gegeven|Gegewe|ghu' noblu'|Gitt|Given y'all|Given|Givet|Givun|Ha|Cho|I CAN HAZ|In|Ir|It's just unbelievable|I|Ja|Jeśli|Jeżeli|Kad|Kada|Kadar|Kai|Kaj|Když|Keď|Kemudian|Ketika|Khi|Kiedy|Ko|Kuid|Kui|Kun|Lan|latlh|Le sa a|Let go and haul|Le|Lè sa a|Lè|Logo|Lorsqu'<|Lorsque|mä|Maar|Mais|Mając|Ma|Majd|Maka|Manawa|Mas|Men|Menawa|Mutta|Nalika|Nalikaning|Nanging|Når|När|Nato|Nhưng|Niin|Njuk|O zaman|Och|Og|Oletetaan|Ond|Onda|Oraz|Pak|Pero|Però|Podano|Pokiaľ|Pokud|Potem|Potom|Privzeto|Pryd|Quan|Quand|Quando|qaSDI'|Så|Sed|Se|Siis|Sipoze ke|Sipoze Ke|Sipoze|Si|Şi|Și|Soit|Stel|Tada|Tad|Takrat|Tak|Tapi|Ter|Tetapi|Tha the|Tha|Then y'all|Then|Thì|Thurh|Toda|Too right|Un|Und|ugeholl|Và|vaj|Vendar|Ve|wann|Wanneer|WEN|Wenn|When y'all|When|Wtedy|Wun|Y'know|Yeah nah|Yna|Youse know like when|Youse know when youse got|Y|Za predpokladu|Za předpokladu|Zadan|Zadani|Zadano|Zadate|Zadato|Zakładając|Zaradi|Zatati|Þa þe|Þa|Þá|Þegar|Þurh|Αλλά|Δεδομένου|Και|Όταν|Τότε|А також|Агар|Але|Али|Аммо|А|Әгәр|Әйтик|Әмма|Бирок|Ва|Вә|Дадено|Дано|Допустим|Если|Задате|Задати|Задато|И|І|К тому же|Када|Кад|Когато|Когда|Коли|Ләкин|Лекин|Нәтиҗәдә|Нехай|Но|Онда|Припустимо, що|Припустимо|Пусть|Также|Та|Тогда|Тоді|То|Унда|Һәм|Якщо|אבל|אזי|אז|בהינתן|וגם|כאשר|آنگاه|اذاً|اگر|اما|اور|با فرض|بالفرض|بفرض|پھر|تب|ثم|جب|عندما|فرض کیا|لكن|لیکن|متى|هنگامی|و|अगर|और|कदा|किन्तु|चूंकि|जब|तथा|तदा|तब|परन्तु|पर|यदि|ਅਤੇ|ਜਦੋਂ|ਜਿਵੇਂ ਕਿ|ਜੇਕਰ|ਤਦ|ਪਰ|అప్పుడు|ఈ పరిస్థితిలో|కాని|చెప్పబడినది|మరియు|ಆದರೆ|ನಂತರ|ನೀಡಿದ|ಮತ್ತು|ಸ್ಥಿತಿಯನ್ನು|กำหนดให้|ดังนั้น|แต่|เมื่อ|และ|그러면<|그리고<|단<|만약<|만일<|먼저<|조건<|하지만<|かつ<|しかし<|ただし<|ならば<|もし<|並且<|但し<|但是<|假如<|假定<|假設<|假设<|前提<|同时<|同時<|并且<|当<|當<|而且<|那么<|那麼<)(?=[ \t])/m,
	        lookbehind: true
	      },
	      string: {
	        pattern: /"(?:\\.|[^"\\\r\n])*"|'(?:\\.|[^'\\\r\n])*'/,
	        inside: {
	          outline: {
	            pattern: /<[^>]+>/,
	            alias: 'variable'
	          }
	        }
	      },
	      outline: {
	        pattern: /<[^>]+>/,
	        alias: 'variable'
	      }
	    };
	  })(Prism);
	}

	// @ts-nocheck
	git.displayName = 'git';
	git.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function git(Prism) {
	  Prism.languages.git = {
	    /*
	     * A simple one line comment like in a git status command
	     * For instance:
	     * $ git status
	     * # On branch infinite-scroll
	     * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,
	     * # and have 1 and 2 different commits each, respectively.
	     * nothing to commit (working directory clean)
	     */
	    comment: /^#.*/m,
	    /*
	     * Regexp to match the changed lines in a git diff output. Check the example below.
	     */
	    deleted: /^[-–].*/m,
	    inserted: /^\+.*/m,
	    /*
	     * a string (double and simple quote)
	     */
	    string: /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
	    /*
	     * a git command. It starts with a random prompt finishing by a $, then "git" then some other parameters
	     * For instance:
	     * $ git add file.txt
	     */
	    command: {
	      pattern: /^.*\$ git .*$/m,
	      inside: {
	        /*
	         * A git command can contain a parameter starting by a single or a double dash followed by a string
	         * For instance:
	         * $ git diff --cached
	         * $ git log -p
	         */
	        parameter: /\s--?\w+/
	      }
	    },
	    /*
	     * Coordinates displayed in a git diff command
	     * For instance:
	     * $ git diff
	     * diff --git file.txt file.txt
	     * index 6214953..1d54a52 100644
	     * --- file.txt
	     * +++ file.txt
	     * @@ -1 +1,2 @@
	     * -Here's my tetx file
	     * +Here's my text file
	     * +And this is the second line
	     */
	    coord: /^@@.*@@$/m,
	    /*
	     * Match a "commit [SHA1]" line in a git log output.
	     * For instance:
	     * $ git log
	     * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09
	     * Author: lgiraudel
	     * Date:   Mon Feb 17 11:18:34 2014 +0100
	     *
	     *     Add of a new line
	     */
	    'commit-sha1': /^commit \w{40}$/m
	  };
	}

	// @ts-nocheck
	glsl.displayName = 'glsl';
	glsl.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function glsl(Prism) {
	  Prism.register(c$1);
	  Prism.languages.glsl = Prism.languages.extend('c', {
	    keyword:
	      /\b(?:active|asm|atomic_uint|attribute|[ibdu]?vec[234]|bool|break|buffer|case|cast|centroid|class|coherent|common|const|continue|d?mat[234](?:x[234])?|default|discard|do|double|else|enum|extern|external|false|filter|fixed|flat|float|for|fvec[234]|goto|half|highp|hvec[234]|[iu]?sampler2DMS(?:Array)?|[iu]?sampler2DRect|[iu]?samplerBuffer|[iu]?samplerCube|[iu]?samplerCubeArray|[iu]?sampler[123]D|[iu]?sampler[12]DArray|[iu]?image2DMS(?:Array)?|[iu]?image2DRect|[iu]?imageBuffer|[iu]?imageCube|[iu]?imageCubeArray|[iu]?image[123]D|[iu]?image[12]DArray|if|in|inline|inout|input|int|interface|invariant|layout|long|lowp|mediump|namespace|noinline|noperspective|out|output|partition|patch|precise|precision|public|readonly|resource|restrict|return|sample|sampler[12]DArrayShadow|sampler[12]DShadow|sampler2DRectShadow|sampler3DRect|samplerCubeArrayShadow|samplerCubeShadow|shared|short|sizeof|smooth|static|struct|subroutine|superp|switch|template|this|true|typedef|uint|uniform|union|unsigned|using|varying|void|volatile|while|writeonly)\b/
	  });
	}

	// @ts-nocheck
	gn.displayName = 'gn';
	gn.aliases = ['gni'];

	/** @type {import('../core.js').Syntax} */
	function gn(Prism) {
	  // https://gn.googlesource.com/gn/+/refs/heads/main/docs/reference.md#grammar

	  Prism.languages.gn = {
	    comment: {
	      pattern: /#.*/,
	      greedy: true
	    },
	    'string-literal': {
	      pattern: /(^|[^\\"])"(?:[^\r\n"\\]|\\.)*"/,
	      lookbehind: true,
	      greedy: true,
	      inside: {
	        interpolation: {
	          pattern:
	            /((?:^|[^\\])(?:\\{2})*)\$(?:\{[\s\S]*?\}|[a-zA-Z_]\w*|0x[a-fA-F0-9]{2})/,
	          lookbehind: true,
	          inside: {
	            number: /^\$0x[\s\S]{2}$/,
	            variable: /^\$\w+$/,
	            'interpolation-punctuation': {
	              pattern: /^\$\{|\}$/,
	              alias: 'punctuation'
	            },
	            expression: {
	              pattern: /[\s\S]+/,
	              inside: null // see below
	            }
	          }
	        },

	        string: /[\s\S]+/
	      }
	    },
	    keyword: /\b(?:else|if)\b/,
	    boolean: /\b(?:false|true)\b/,
	    'builtin-function': {
	      // a few functions get special highlighting to improve readability
	      pattern:
	        /\b(?:assert|defined|foreach|import|pool|print|template|tool|toolchain)(?=\s*\()/i,
	      alias: 'keyword'
	    },
	    function: /\b[a-z_]\w*(?=\s*\()/i,
	    constant:
	      /\b(?:current_cpu|current_os|current_toolchain|default_toolchain|host_cpu|host_os|root_build_dir|root_gen_dir|root_out_dir|target_cpu|target_gen_dir|target_os|target_out_dir)\b/,
	    number: /-?\b\d+\b/,
	    operator: /[-+!=<>]=?|&&|\|\|/,
	    punctuation: /[(){}[\],.]/
	  };
	  Prism.languages.gn['string-literal'].inside['interpolation'].inside[
	    'expression'
	  ].inside = Prism.languages.gn;
	  Prism.languages.gni = Prism.languages.gn;
	}

	// @ts-nocheck
	linkerScript.displayName = 'linker-script';
	linkerScript.aliases = ['ld'];

	/** @type {import('../core.js').Syntax} */
	function linkerScript(Prism) {
	  Prism.languages['linker-script'] = {
	    comment: {
	      pattern: /(^|\s)\/\*[\s\S]*?(?:$|\*\/)/,
	      lookbehind: true,
	      greedy: true
	    },
	    identifier: {
	      pattern: /"[^"\r\n]*"/,
	      greedy: true
	    },
	    'location-counter': {
	      pattern: /\B\.\B/,
	      alias: 'important'
	    },
	    section: {
	      pattern: /(^|[^\w*])\.\w+\b/,
	      lookbehind: true,
	      alias: 'keyword'
	    },
	    function: /\b[A-Z][A-Z_]*(?=\s*\()/,
	    number: /\b(?:0[xX][a-fA-F0-9]+|\d+)[KM]?\b/,
	    operator: />>=?|<<=?|->|\+\+|--|&&|\|\||::|[?:~]|[-+*/%&|^!=<>]=?/,
	    punctuation: /[(){},;]/
	  };
	  Prism.languages['ld'] = Prism.languages['linker-script'];
	}

	// @ts-nocheck
	goModule.displayName = 'go-module';
	goModule.aliases = ['go-mod'];

	/** @type {import('../core.js').Syntax} */
	function goModule(Prism) {
	  // https://go.dev/ref/mod#go-mod-file-module

	  Prism.languages['go-mod'] = Prism.languages['go-module'] = {
	    comment: {
	      pattern: /\/\/.*/,
	      greedy: true
	    },
	    version: {
	      pattern: /(^|[\s()[\],])v\d+\.\d+\.\d+(?:[+-][-+.\w]*)?(?![^\s()[\],])/,
	      lookbehind: true,
	      alias: 'number'
	    },
	    'go-version': {
	      pattern: /((?:^|\s)go\s+)\d+(?:\.\d+){1,2}/,
	      lookbehind: true,
	      alias: 'number'
	    },
	    keyword: {
	      pattern: /^([ \t]*)(?:exclude|go|module|replace|require|retract)\b/m,
	      lookbehind: true
	    },
	    operator: /=>/,
	    punctuation: /[()[\],]/
	  };
	}

	// @ts-nocheck
	gradle.displayName = 'gradle';
	gradle.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function gradle(Prism) {
	  Prism.register(clike)
	  ;(function (Prism) {
	    var interpolation = {
	      pattern: /((?:^|[^\\$])(?:\\{2})*)\$(?:\w+|\{[^{}]*\})/,
	      lookbehind: true,
	      inside: {
	        'interpolation-punctuation': {
	          pattern: /^\$\{?|\}$/,
	          alias: 'punctuation'
	        },
	        expression: {
	          pattern: /[\s\S]+/,
	          inside: null
	        }
	      }
	    };
	    Prism.languages.gradle = Prism.languages.extend('clike', {
	      string: {
	        pattern: /'''(?:[^\\]|\\[\s\S])*?'''|'(?:\\.|[^\\'\r\n])*'/,
	        greedy: true
	      },
	      keyword:
	        /\b(?:apply|def|dependencies|else|if|implementation|import|plugin|plugins|project|repositories|repository|sourceSets|tasks|val)\b/,
	      number:
	        /\b(?:0b[01_]+|0x[\da-f_]+(?:\.[\da-f_p\-]+)?|[\d_]+(?:\.[\d_]+)?(?:e[+-]?\d+)?)[glidf]?\b/i,
	      operator: {
	        pattern:
	          /(^|[^.])(?:~|==?~?|\?[.:]?|\*(?:[.=]|\*=?)?|\.[@&]|\.\.<|\.\.(?!\.)|-[-=>]?|\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\|[|=]?|\/=?|\^=?|%=?)/,
	        lookbehind: true
	      },
	      punctuation: /\.+|[{}[\];(),:$]/
	    });
	    Prism.languages.insertBefore('gradle', 'string', {
	      shebang: {
	        pattern: /#!.+/,
	        alias: 'comment',
	        greedy: true
	      },
	      'interpolation-string': {
	        pattern:
	          /"""(?:[^\\]|\\[\s\S])*?"""|(["/])(?:\\.|(?!\1)[^\\\r\n])*\1|\$\/(?:[^/$]|\$(?:[/$]|(?![/$]))|\/(?!\$))*\/\$/,
	        greedy: true,
	        inside: {
	          interpolation: interpolation,
	          string: /[\s\S]+/
	        }
	      }
	    });
	    Prism.languages.insertBefore('gradle', 'punctuation', {
	      'spock-block': /\b(?:and|cleanup|expect|given|setup|then|when|where):/
	    });
	    Prism.languages.insertBefore('gradle', 'function', {
	      annotation: {
	        pattern: /(^|[^.])@\w+/,
	        lookbehind: true,
	        alias: 'punctuation'
	      }
	    });
	    interpolation.inside.expression.inside = Prism.languages.gradle;
	  })(Prism);
	}

	// @ts-nocheck
	graphql.displayName = 'graphql';
	graphql.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function graphql(Prism) {
	  Prism.languages.graphql = {
	    comment: /#.*/,
	    description: {
	      pattern:
	        /(?:"""(?:[^"]|(?!""")")*"""|"(?:\\.|[^\\"\r\n])*")(?=\s*[a-z_])/i,
	      greedy: true,
	      alias: 'string',
	      inside: {
	        'language-markdown': {
	          pattern: /(^"(?:"")?)(?!\1)[\s\S]+(?=\1$)/,
	          lookbehind: true,
	          inside: Prism.languages.markdown
	        }
	      }
	    },
	    string: {
	      pattern: /"""(?:[^"]|(?!""")")*"""|"(?:\\.|[^\\"\r\n])*"/,
	      greedy: true
	    },
	    number: /(?:\B-|\b)\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,
	    boolean: /\b(?:false|true)\b/,
	    variable: /\$[a-z_]\w*/i,
	    directive: {
	      pattern: /@[a-z_]\w*/i,
	      alias: 'function'
	    },
	    'attr-name': {
	      pattern: /\b[a-z_]\w*(?=\s*(?:\((?:[^()"]|"(?:\\.|[^\\"\r\n])*")*\))?:)/i,
	      greedy: true
	    },
	    'atom-input': {
	      pattern: /\b[A-Z]\w*Input\b/,
	      alias: 'class-name'
	    },
	    scalar: /\b(?:Boolean|Float|ID|Int|String)\b/,
	    constant: /\b[A-Z][A-Z_\d]*\b/,
	    'class-name': {
	      pattern:
	        /(\b(?:enum|implements|interface|on|scalar|type|union)\s+|&\s*|:\s*|\[)[A-Z_]\w*/,
	      lookbehind: true
	    },
	    fragment: {
	      pattern: /(\bfragment\s+|\.{3}\s*(?!on\b))[a-zA-Z_]\w*/,
	      lookbehind: true,
	      alias: 'function'
	    },
	    'definition-mutation': {
	      pattern: /(\bmutation\s+)[a-zA-Z_]\w*/,
	      lookbehind: true,
	      alias: 'function'
	    },
	    'definition-query': {
	      pattern: /(\bquery\s+)[a-zA-Z_]\w*/,
	      lookbehind: true,
	      alias: 'function'
	    },
	    keyword:
	      /\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\b/,
	    operator: /[!=|&]|\.{3}/,
	    'property-query': /\w+(?=\s*\()/,
	    object: /\w+(?=\s*\{)/,
	    punctuation: /[!(){}\[\]:=,]/,
	    property: /\w+/
	  };
	  Prism.hooks.add('after-tokenize', function afterTokenizeGraphql(env) {
	    if (env.language !== 'graphql') {
	      return
	    }

	    /**
	     * get the graphql token stream that we want to customize
	     *
	     * @typedef {InstanceType<import("./prism-core")["Token"]>} Token
	     * @type {Token[]}
	     */
	    var validTokens = env.tokens.filter(function (token) {
	      return (
	        typeof token !== 'string' &&
	        token.type !== 'comment' &&
	        token.type !== 'scalar'
	      )
	    });
	    var currentIndex = 0;

	    /**
	     * Returns whether the token relative to the current index has the given type.
	     *
	     * @param {number} offset
	     * @returns {Token | undefined}
	     */
	    function getToken(offset) {
	      return validTokens[currentIndex + offset]
	    }

	    /**
	     * Returns whether the token relative to the current index has the given type.
	     *
	     * @param {readonly string[]} types
	     * @param {number} [offset=0]
	     * @returns {boolean}
	     */
	    function isTokenType(types, offset) {
	      offset = offset || 0;
	      for (var i = 0; i < types.length; i++) {
	        var token = getToken(i + offset);
	        if (!token || token.type !== types[i]) {
	          return false
	        }
	      }
	      return true
	    }

	    /**
	     * Returns the index of the closing bracket to an opening bracket.
	     *
	     * It is assumed that `token[currentIndex - 1]` is an opening bracket.
	     *
	     * If no closing bracket could be found, `-1` will be returned.
	     *
	     * @param {RegExp} open
	     * @param {RegExp} close
	     * @returns {number}
	     */
	    function findClosingBracket(open, close) {
	      var stackHeight = 1;
	      for (var i = currentIndex; i < validTokens.length; i++) {
	        var token = validTokens[i];
	        var content = token.content;
	        if (token.type === 'punctuation' && typeof content === 'string') {
	          if (open.test(content)) {
	            stackHeight++;
	          } else if (close.test(content)) {
	            stackHeight--;
	            if (stackHeight === 0) {
	              return i
	            }
	          }
	        }
	      }
	      return -1
	    }

	    /**
	     * Adds an alias to the given token.
	     *
	     * @param {Token} token
	     * @param {string} alias
	     * @returns {void}
	     */
	    function addAlias(token, alias) {
	      var aliases = token.alias;
	      if (!aliases) {
	        token.alias = aliases = [];
	      } else if (!Array.isArray(aliases)) {
	        token.alias = aliases = [aliases];
	      }
	      aliases.push(alias);
	    }
	    for (; currentIndex < validTokens.length; ) {
	      var startToken = validTokens[currentIndex++];

	      // add special aliases for mutation tokens
	      if (startToken.type === 'keyword' && startToken.content === 'mutation') {
	        // any array of the names of all input variables (if any)
	        var inputVariables = [];
	        if (
	          isTokenType(['definition-mutation', 'punctuation']) &&
	          getToken(1).content === '('
	        ) {
	          // definition

	          currentIndex += 2; // skip 'definition-mutation' and 'punctuation'

	          var definitionEnd = findClosingBracket(/^\($/, /^\)$/);
	          if (definitionEnd === -1) {
	            continue
	          }

	          // find all input variables
	          for (; currentIndex < definitionEnd; currentIndex++) {
	            var t = getToken(0);
	            if (t.type === 'variable') {
	              addAlias(t, 'variable-input');
	              inputVariables.push(t.content);
	            }
	          }
	          currentIndex = definitionEnd + 1;
	        }
	        if (
	          isTokenType(['punctuation', 'property-query']) &&
	          getToken(0).content === '{'
	        ) {
	          currentIndex++; // skip opening bracket

	          addAlias(getToken(0), 'property-mutation');
	          if (inputVariables.length > 0) {
	            var mutationEnd = findClosingBracket(/^\{$/, /^\}$/);
	            if (mutationEnd === -1) {
	              continue
	            }

	            // give references to input variables a special alias
	            for (var i = currentIndex; i < mutationEnd; i++) {
	              var varToken = validTokens[i];
	              if (
	                varToken.type === 'variable' &&
	                inputVariables.indexOf(varToken.content) >= 0
	              ) {
	                addAlias(varToken, 'variable-input');
	              }
	            }
	          }
	        }
	      }
	    }
	  });
	}

	// @ts-nocheck
	groovy.displayName = 'groovy';
	groovy.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function groovy(Prism) {
	  Prism.register(clike)
	  ;(function (Prism) {
	    var interpolation = {
	      pattern: /((?:^|[^\\$])(?:\\{2})*)\$(?:\w+|\{[^{}]*\})/,
	      lookbehind: true,
	      inside: {
	        'interpolation-punctuation': {
	          pattern: /^\$\{?|\}$/,
	          alias: 'punctuation'
	        },
	        expression: {
	          pattern: /[\s\S]+/,
	          inside: null // see below
	        }
	      }
	    };

	    Prism.languages.groovy = Prism.languages.extend('clike', {
	      string: {
	        // https://groovy-lang.org/syntax.html#_dollar_slashy_string
	        pattern: /'''(?:[^\\]|\\[\s\S])*?'''|'(?:\\.|[^\\'\r\n])*'/,
	        greedy: true
	      },
	      keyword:
	        /\b(?:abstract|as|assert|boolean|break|byte|case|catch|char|class|const|continue|def|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|in|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\b/,
	      number:
	        /\b(?:0b[01_]+|0x[\da-f_]+(?:\.[\da-f_p\-]+)?|[\d_]+(?:\.[\d_]+)?(?:e[+-]?\d+)?)[glidf]?\b/i,
	      operator: {
	        pattern:
	          /(^|[^.])(?:~|==?~?|\?[.:]?|\*(?:[.=]|\*=?)?|\.[@&]|\.\.<|\.\.(?!\.)|-[-=>]?|\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\|[|=]?|\/=?|\^=?|%=?)/,
	        lookbehind: true
	      },
	      punctuation: /\.+|[{}[\];(),:$]/
	    });
	    Prism.languages.insertBefore('groovy', 'string', {
	      shebang: {
	        pattern: /#!.+/,
	        alias: 'comment',
	        greedy: true
	      },
	      'interpolation-string': {
	        // TODO: Slash strings (e.g. /foo/) can contain line breaks but this will cause a lot of trouble with
	        // simple division (see JS regex), so find a fix maybe?
	        pattern:
	          /"""(?:[^\\]|\\[\s\S])*?"""|(["/])(?:\\.|(?!\1)[^\\\r\n])*\1|\$\/(?:[^/$]|\$(?:[/$]|(?![/$]))|\/(?!\$))*\/\$/,
	        greedy: true,
	        inside: {
	          interpolation: interpolation,
	          string: /[\s\S]+/
	        }
	      }
	    });
	    Prism.languages.insertBefore('groovy', 'punctuation', {
	      'spock-block': /\b(?:and|cleanup|expect|given|setup|then|when|where):/
	    });
	    Prism.languages.insertBefore('groovy', 'function', {
	      annotation: {
	        pattern: /(^|[^.])@\w+/,
	        lookbehind: true,
	        alias: 'punctuation'
	      }
	    });
	    interpolation.inside.expression.inside = Prism.languages.groovy;
	  })(Prism);
	}

	// @ts-nocheck
	textile.displayName = 'textile';
	textile.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function textile(Prism) {
	  Prism.register(markup)
	  ;(function (Prism) {
	    // We don't allow for pipes inside parentheses
	    // to not break table pattern |(. foo |). bar |
	    var modifierRegex = /\([^|()\n]+\)|\[[^\]\n]+\]|\{[^}\n]+\}/.source;
	    // Opening and closing parentheses which are not a modifier
	    // This pattern is necessary to prevent exponential backtracking
	    var parenthesesRegex = /\)|\((?![^|()\n]+\))/.source;
	    /**
	     * @param {string} source
	     * @param {string} [flags]
	     */
	    function withModifier(source, flags) {
	      return RegExp(
	        source
	          .replace(/<MOD>/g, function () {
	            return '(?:' + modifierRegex + ')'
	          })
	          .replace(/<PAR>/g, function () {
	            return '(?:' + parenthesesRegex + ')'
	          }),
	        flags || ''
	      )
	    }
	    var modifierTokens = {
	      css: {
	        pattern: /\{[^{}]+\}/,
	        inside: {
	          rest: Prism.languages.css
	        }
	      },
	      'class-id': {
	        pattern: /(\()[^()]+(?=\))/,
	        lookbehind: true,
	        alias: 'attr-value'
	      },
	      lang: {
	        pattern: /(\[)[^\[\]]+(?=\])/,
	        lookbehind: true,
	        alias: 'attr-value'
	      },
	      // Anything else is punctuation (the first pattern is for row/col spans inside tables)
	      punctuation: /[\\\/]\d+|\S/
	    };
	    var textile = (Prism.languages.textile = Prism.languages.extend('markup', {
	      phrase: {
	        pattern: /(^|\r|\n)\S[\s\S]*?(?=$|\r?\n\r?\n|\r\r)/,
	        lookbehind: true,
	        inside: {
	          // h1. Header 1
	          'block-tag': {
	            pattern: withModifier(/^[a-z]\w*(?:<MOD>|<PAR>|[<>=])*\./.source),
	            inside: {
	              modifier: {
	                pattern: withModifier(
	                  /(^[a-z]\w*)(?:<MOD>|<PAR>|[<>=])+(?=\.)/.source
	                ),
	                lookbehind: true,
	                inside: modifierTokens
	              },
	              tag: /^[a-z]\w*/,
	              punctuation: /\.$/
	            }
	          },
	          // # List item
	          // * List item
	          list: {
	            pattern: withModifier(/^[*#]+<MOD>*\s+\S.*/.source, 'm'),
	            inside: {
	              modifier: {
	                pattern: withModifier(/(^[*#]+)<MOD>+/.source),
	                lookbehind: true,
	                inside: modifierTokens
	              },
	              punctuation: /^[*#]+/
	            }
	          },
	          // | cell | cell | cell |
	          table: {
	            // Modifiers can be applied to the row: {color:red}.|1|2|3|
	            // or the cell: |{color:red}.1|2|3|
	            pattern: withModifier(
	              /^(?:(?:<MOD>|<PAR>|[<>=^~])+\.\s*)?(?:\|(?:(?:<MOD>|<PAR>|[<>=^~_]|[\\/]\d+)+\.|(?!(?:<MOD>|<PAR>|[<>=^~_]|[\\/]\d+)+\.))[^|]*)+\|/
	                .source,
	              'm'
	            ),
	            inside: {
	              modifier: {
	                // Modifiers for rows after the first one are
	                // preceded by a pipe and a line feed
	                pattern: withModifier(
	                  /(^|\|(?:\r?\n|\r)?)(?:<MOD>|<PAR>|[<>=^~_]|[\\/]\d+)+(?=\.)/
	                    .source
	                ),
	                lookbehind: true,
	                inside: modifierTokens
	              },
	              punctuation: /\||^\./
	            }
	          },
	          inline: {
	            // eslint-disable-next-line regexp/no-super-linear-backtracking
	            pattern: withModifier(
	              /(^|[^a-zA-Z\d])(\*\*|__|\?\?|[*_%@+\-^~])<MOD>*.+?\2(?![a-zA-Z\d])/
	                .source
	            ),
	            lookbehind: true,
	            inside: {
	              // Note: superscripts and subscripts are not handled specifically

	              // *bold*, **bold**
	              bold: {
	                // eslint-disable-next-line regexp/no-super-linear-backtracking
	                pattern: withModifier(/(^(\*\*?)<MOD>*).+?(?=\2)/.source),
	                lookbehind: true
	              },
	              // _italic_, __italic__
	              italic: {
	                // eslint-disable-next-line regexp/no-super-linear-backtracking
	                pattern: withModifier(/(^(__?)<MOD>*).+?(?=\2)/.source),
	                lookbehind: true
	              },
	              // ??cite??
	              cite: {
	                // eslint-disable-next-line regexp/no-super-linear-backtracking
	                pattern: withModifier(/(^\?\?<MOD>*).+?(?=\?\?)/.source),
	                lookbehind: true,
	                alias: 'string'
	              },
	              // @code@
	              code: {
	                // eslint-disable-next-line regexp/no-super-linear-backtracking
	                pattern: withModifier(/(^@<MOD>*).+?(?=@)/.source),
	                lookbehind: true,
	                alias: 'keyword'
	              },
	              // +inserted+
	              inserted: {
	                // eslint-disable-next-line regexp/no-super-linear-backtracking
	                pattern: withModifier(/(^\+<MOD>*).+?(?=\+)/.source),
	                lookbehind: true
	              },
	              // -deleted-
	              deleted: {
	                // eslint-disable-next-line regexp/no-super-linear-backtracking
	                pattern: withModifier(/(^-<MOD>*).+?(?=-)/.source),
	                lookbehind: true
	              },
	              // %span%
	              span: {
	                // eslint-disable-next-line regexp/no-super-linear-backtracking
	                pattern: withModifier(/(^%<MOD>*).+?(?=%)/.source),
	                lookbehind: true
	              },
	              modifier: {
	                pattern: withModifier(
	                  /(^\*\*|__|\?\?|[*_%@+\-^~])<MOD>+/.source
	                ),
	                lookbehind: true,
	                inside: modifierTokens
	              },
	              punctuation: /[*_%?@+\-^~]+/
	            }
	          },
	          // [alias]http://example.com
	          'link-ref': {
	            pattern: /^\[[^\]]+\]\S+$/m,
	            inside: {
	              string: {
	                pattern: /(^\[)[^\]]+(?=\])/,
	                lookbehind: true
	              },
	              url: {
	                pattern: /(^\])\S+$/,
	                lookbehind: true
	              },
	              punctuation: /[\[\]]/
	            }
	          },
	          // "text":http://example.com
	          // "text":link-ref
	          link: {
	            // eslint-disable-next-line regexp/no-super-linear-backtracking
	            pattern: withModifier(
	              /"<MOD>*[^"]+":.+?(?=[^\w/]?(?:\s|$))/.source
	            ),
	            inside: {
	              text: {
	                // eslint-disable-next-line regexp/no-super-linear-backtracking
	                pattern: withModifier(/(^"<MOD>*)[^"]+(?=")/.source),
	                lookbehind: true
	              },
	              modifier: {
	                pattern: withModifier(/(^")<MOD>+/.source),
	                lookbehind: true,
	                inside: modifierTokens
	              },
	              url: {
	                pattern: /(:).+/,
	                lookbehind: true
	              },
	              punctuation: /[":]/
	            }
	          },
	          // !image.jpg!
	          // !image.jpg(Title)!:http://example.com
	          image: {
	            pattern: withModifier(
	              /!(?:<MOD>|<PAR>|[<>=])*(?![<>=])[^!\s()]+(?:\([^)]+\))?!(?::.+?(?=[^\w/]?(?:\s|$)))?/
	                .source
	            ),
	            inside: {
	              source: {
	                pattern: withModifier(
	                  /(^!(?:<MOD>|<PAR>|[<>=])*)(?![<>=])[^!\s()]+(?:\([^)]+\))?(?=!)/
	                    .source
	                ),
	                lookbehind: true,
	                alias: 'url'
	              },
	              modifier: {
	                pattern: withModifier(/(^!)(?:<MOD>|<PAR>|[<>=])+/.source),
	                lookbehind: true,
	                inside: modifierTokens
	              },
	              url: {
	                pattern: /(:).+/,
	                lookbehind: true
	              },
	              punctuation: /[!:]/
	            }
	          },
	          // Footnote[1]
	          footnote: {
	            pattern: /\b\[\d+\]/,
	            alias: 'comment',
	            inside: {
	              punctuation: /\[|\]/
	            }
	          },
	          // CSS(Cascading Style Sheet)
	          acronym: {
	            pattern: /\b[A-Z\d]+\([^)]+\)/,
	            inside: {
	              comment: {
	                pattern: /(\()[^()]+(?=\))/,
	                lookbehind: true
	              },
	              punctuation: /[()]/
	            }
	          },
	          // Prism(C)
	          mark: {
	            pattern: /\b\((?:C|R|TM)\)/,
	            alias: 'comment',
	            inside: {
	              punctuation: /[()]/
	            }
	          }
	        }
	      }
	    }));
	    var phraseInside = textile['phrase'].inside;
	    var nestedPatterns = {
	      inline: phraseInside['inline'],
	      link: phraseInside['link'],
	      image: phraseInside['image'],
	      footnote: phraseInside['footnote'],
	      acronym: phraseInside['acronym'],
	      mark: phraseInside['mark']
	    };

	    // Only allow alpha-numeric HTML tags, not XML tags
	    textile.tag.pattern =
	      /<\/?(?!\d)[a-z0-9]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+))?)*\s*\/?>/i;

	    // Allow some nesting
	    var phraseInlineInside = phraseInside['inline'].inside;
	    phraseInlineInside['bold'].inside = nestedPatterns;
	    phraseInlineInside['italic'].inside = nestedPatterns;
	    phraseInlineInside['inserted'].inside = nestedPatterns;
	    phraseInlineInside['deleted'].inside = nestedPatterns;
	    phraseInlineInside['span'].inside = nestedPatterns;

	    // Allow some styles inside table cells
	    var phraseTableInside = phraseInside['table'].inside;
	    phraseTableInside['inline'] = nestedPatterns['inline'];
	    phraseTableInside['link'] = nestedPatterns['link'];
	    phraseTableInside['image'] = nestedPatterns['image'];
	    phraseTableInside['footnote'] = nestedPatterns['footnote'];
	    phraseTableInside['acronym'] = nestedPatterns['acronym'];
	    phraseTableInside['mark'] = nestedPatterns['mark'];
	  })(Prism);
	}

	// @ts-nocheck
	haml.displayName = 'haml';
	haml.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function haml(Prism) {
	  Prism.register(ruby)
	  /* TODO
	Handle multiline code after tag
	%foo= some |
	multiline |
	code |
	*/

	  ;(function (Prism) {
	    Prism.languages.haml = {
	      // Multiline stuff should appear before the rest

	      'multiline-comment': {
	        pattern:
	          /((?:^|\r?\n|\r)([\t ]*))(?:\/|-#).*(?:(?:\r?\n|\r)\2[\t ].+)*/,
	        lookbehind: true,
	        alias: 'comment'
	      },
	      'multiline-code': [
	        {
	          pattern:
	            /((?:^|\r?\n|\r)([\t ]*)(?:[~-]|[&!]?=)).*,[\t ]*(?:(?:\r?\n|\r)\2[\t ].*,[\t ]*)*(?:(?:\r?\n|\r)\2[\t ].+)/,
	          lookbehind: true,
	          inside: Prism.languages.ruby
	        },
	        {
	          pattern:
	            /((?:^|\r?\n|\r)([\t ]*)(?:[~-]|[&!]?=)).*\|[\t ]*(?:(?:\r?\n|\r)\2[\t ].*\|[\t ]*)*/,
	          lookbehind: true,
	          inside: Prism.languages.ruby
	        }
	      ],
	      // See at the end of the file for known filters
	      filter: {
	        pattern:
	          /((?:^|\r?\n|\r)([\t ]*)):[\w-]+(?:(?:\r?\n|\r)(?:\2[\t ].+|\s*?(?=\r?\n|\r)))+/,
	        lookbehind: true,
	        inside: {
	          'filter-name': {
	            pattern: /^:[\w-]+/,
	            alias: 'symbol'
	          }
	        }
	      },
	      markup: {
	        pattern: /((?:^|\r?\n|\r)[\t ]*)<.+/,
	        lookbehind: true,
	        inside: Prism.languages.markup
	      },
	      doctype: {
	        pattern: /((?:^|\r?\n|\r)[\t ]*)!!!(?: .+)?/,
	        lookbehind: true
	      },
	      tag: {
	        // Allows for one nested group of braces
	        pattern:
	          /((?:^|\r?\n|\r)[\t ]*)[%.#][\w\-#.]*[\w\-](?:\([^)]+\)|\{(?:\{[^}]+\}|[^{}])+\}|\[[^\]]+\])*[\/<>]*/,
	        lookbehind: true,
	        inside: {
	          attributes: [
	            {
	              // Lookbehind tries to prevent interpolations from breaking it all
	              // Allows for one nested group of braces
	              pattern: /(^|[^#])\{(?:\{[^}]+\}|[^{}])+\}/,
	              lookbehind: true,
	              inside: Prism.languages.ruby
	            },
	            {
	              pattern: /\([^)]+\)/,
	              inside: {
	                'attr-value': {
	                  pattern: /(=\s*)(?:"(?:\\.|[^\\"\r\n])*"|[^)\s]+)/,
	                  lookbehind: true
	                },
	                'attr-name': /[\w:-]+(?=\s*!?=|\s*[,)])/,
	                punctuation: /[=(),]/
	              }
	            },
	            {
	              pattern: /\[[^\]]+\]/,
	              inside: Prism.languages.ruby
	            }
	          ],
	          punctuation: /[<>]/
	        }
	      },
	      code: {
	        pattern: /((?:^|\r?\n|\r)[\t ]*(?:[~-]|[&!]?=)).+/,
	        lookbehind: true,
	        inside: Prism.languages.ruby
	      },
	      // Interpolations in plain text
	      interpolation: {
	        pattern: /#\{[^}]+\}/,
	        inside: {
	          delimiter: {
	            pattern: /^#\{|\}$/,
	            alias: 'punctuation'
	          },
	          ruby: {
	            pattern: /[\s\S]+/,
	            inside: Prism.languages.ruby
	          }
	        }
	      },
	      punctuation: {
	        pattern: /((?:^|\r?\n|\r)[\t ]*)[~=\-&!]+/,
	        lookbehind: true
	      }
	    };
	    var filter_pattern =
	      '((?:^|\\r?\\n|\\r)([\\t ]*)):{{filter_name}}(?:(?:\\r?\\n|\\r)(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+';

	    // Non exhaustive list of available filters and associated languages
	    var filters = [
	      'css',
	      {
	        filter: 'coffee',
	        language: 'coffeescript'
	      },
	      'erb',
	      'javascript',
	      'less',
	      'markdown',
	      'ruby',
	      'scss',
	      'textile'
	    ];
	    var all_filters = {};
	    for (var i = 0, l = filters.length; i < l; i++) {
	      var filter = filters[i];
	      filter =
	        typeof filter === 'string'
	          ? {
	              filter: filter,
	              language: filter
	            }
	          : filter;
	      if (Prism.languages[filter.language]) {
	        all_filters['filter-' + filter.filter] = {
	          pattern: RegExp(
	            filter_pattern.replace('{{filter_name}}', function () {
	              return filter.filter
	            })
	          ),
	          lookbehind: true,
	          inside: {
	            'filter-name': {
	              pattern: /^:[\w-]+/,
	              alias: 'symbol'
	            },
	            text: {
	              pattern: /[\s\S]+/,
	              alias: [filter.language, 'language-' + filter.language],
	              inside: Prism.languages[filter.language]
	            }
	          }
	        };
	      }
	    }
	    Prism.languages.insertBefore('haml', 'filter', all_filters);
	  })(Prism);
	}

	// @ts-nocheck
	handlebars.displayName = 'handlebars';
	handlebars.aliases = ['hbs', 'mustache'];

	/** @type {import('../core.js').Syntax} */
	function handlebars(Prism) {
	  Prism.register(markupTemplating)
	  ;(function (Prism) {
	    Prism.languages.handlebars = {
	      comment: /\{\{![\s\S]*?\}\}/,
	      delimiter: {
	        pattern: /^\{\{\{?|\}\}\}?$/,
	        alias: 'punctuation'
	      },
	      string: /(["'])(?:\\.|(?!\1)[^\\\r\n])*\1/,
	      number: /\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee][+-]?\d+)?/,
	      boolean: /\b(?:false|true)\b/,
	      block: {
	        pattern: /^(\s*(?:~\s*)?)[#\/]\S+?(?=\s*(?:~\s*)?$|\s)/,
	        lookbehind: true,
	        alias: 'keyword'
	      },
	      brackets: {
	        pattern: /\[[^\]]+\]/,
	        inside: {
	          punctuation: /\[|\]/,
	          variable: /[\s\S]+/
	        }
	      },
	      punctuation: /[!"#%&':()*+,.\/;<=>@\[\\\]^`{|}~]/,
	      variable: /[^!"#%&'()*+,\/;<=>@\[\\\]^`{|}~\s]+/
	    };
	    Prism.hooks.add('before-tokenize', function (env) {
	      var handlebarsPattern = /\{\{\{[\s\S]+?\}\}\}|\{\{[\s\S]+?\}\}/g;
	      Prism.languages['markup-templating'].buildPlaceholders(
	        env,
	        'handlebars',
	        handlebarsPattern
	      );
	    });
	    Prism.hooks.add('after-tokenize', function (env) {
	      Prism.languages['markup-templating'].tokenizePlaceholders(
	        env,
	        'handlebars'
	      );
	    });
	    Prism.languages.hbs = Prism.languages.handlebars;
	    Prism.languages.mustache = Prism.languages.handlebars;
	  })(Prism);
	}

	// @ts-nocheck
	haskell.displayName = 'haskell';
	haskell.aliases = ['hs'];

	/** @type {import('../core.js').Syntax} */
	function haskell(Prism) {
	  Prism.languages.haskell = {
	    comment: {
	      pattern:
	        /(^|[^-!#$%*+=?&@|~.:<>^\\\/])(?:--(?:(?=.)[^-!#$%*+=?&@|~.:<>^\\\/].*|$)|\{-[\s\S]*?-\})/m,
	      lookbehind: true
	    },
	    char: {
	      pattern:
	        /'(?:[^\\']|\\(?:[abfnrtv\\"'&]|\^[A-Z@[\]^_]|ACK|BEL|BS|CAN|CR|DC1|DC2|DC3|DC4|DEL|DLE|EM|ENQ|EOT|ESC|ETB|ETX|FF|FS|GS|HT|LF|NAK|NUL|RS|SI|SO|SOH|SP|STX|SUB|SYN|US|VT|\d+|o[0-7]+|x[0-9a-fA-F]+))'/,
	      alias: 'string'
	    },
	    string: {
	      pattern: /"(?:[^\\"]|\\(?:\S|\s+\\))*"/,
	      greedy: true
	    },
	    keyword:
	      /\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\b/,
	    'import-statement': {
	      // The imported or hidden names are not included in this import
	      // statement. This is because we want to highlight those exactly like
	      // we do for the names in the program.
	      pattern:
	        /(^[\t ]*)import\s+(?:qualified\s+)?(?:[A-Z][\w']*)(?:\.[A-Z][\w']*)*(?:\s+as\s+(?:[A-Z][\w']*)(?:\.[A-Z][\w']*)*)?(?:\s+hiding\b)?/m,
	      lookbehind: true,
	      inside: {
	        keyword: /\b(?:as|hiding|import|qualified)\b/,
	        punctuation: /\./
	      }
	    },
	    // These are builtin variables only. Constructors are highlighted later as a constant.
	    builtin:
	      /\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\b/,
	    // decimal integers and floating point numbers | octal integers | hexadecimal integers
	    number: /\b(?:\d+(?:\.\d+)?(?:e[+-]?\d+)?|0o[0-7]+|0x[0-9a-f]+)\b/i,
	    operator: [
	      {
	        // infix operator
	        pattern: /`(?:[A-Z][\w']*\.)*[_a-z][\w']*`/,
	        greedy: true
	      },
	      {
	        // function composition
	        pattern: /(\s)\.(?=\s)/,
	        lookbehind: true
	      },
	      // Most of this is needed because of the meaning of a single '.'.
	      // If it stands alone freely, it is the function composition.
	      // It may also be a separator between a module name and an identifier => no
	      // operator. If it comes together with other special characters it is an
	      // operator too.
	      //
	      // This regex means: /[-!#$%*+=?&@|~.:<>^\\\/]+/ without /\./.
	      /[-!#$%*+=?&@|~:<>^\\\/][-!#$%*+=?&@|~.:<>^\\\/]*|\.[-!#$%*+=?&@|~.:<>^\\\/]+/
	    ],
	    // In Haskell, nearly everything is a variable, do not highlight these.
	    hvariable: {
	      pattern: /\b(?:[A-Z][\w']*\.)*[_a-z][\w']*/,
	      inside: {
	        punctuation: /\./
	      }
	    },
	    constant: {
	      pattern: /\b(?:[A-Z][\w']*\.)*[A-Z][\w']*/,
	      inside: {
	        punctuation: /\./
	      }
	    },
	    punctuation: /[{}[\];(),.:]/
	  };
	  Prism.languages.hs = Prism.languages.haskell;
	}

	// @ts-nocheck
	haxe.displayName = 'haxe';
	haxe.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function haxe(Prism) {
	  Prism.register(clike);
	  Prism.languages.haxe = Prism.languages.extend('clike', {
	    string: {
	      // Strings can be multi-line
	      pattern: /"(?:[^"\\]|\\[\s\S])*"/,
	      greedy: true
	    },
	    'class-name': [
	      {
	        pattern:
	          /(\b(?:abstract|class|enum|extends|implements|interface|new|typedef)\s+)[A-Z_]\w*/,
	        lookbehind: true
	      },
	      // based on naming convention
	      /\b[A-Z]\w*/
	    ],
	    // The final look-ahead prevents highlighting of keywords if expressions such as "haxe.macro.Expr"
	    keyword:
	      /\bthis\b|\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|final|for|from|function|if|implements|import|in|inline|interface|macro|new|null|operator|overload|override|package|private|public|return|static|super|switch|throw|to|try|typedef|untyped|using|var|while)(?!\.)\b/,
	    function: {
	      pattern: /\b[a-z_]\w*(?=\s*(?:<[^<>]*>\s*)?\()/i,
	      greedy: true
	    },
	    operator: /\.{3}|\+\+|--|&&|\|\||->|=>|(?:<<?|>{1,3}|[-+*/%!=&|^])=?|[?:~]/
	  });
	  Prism.languages.insertBefore('haxe', 'string', {
	    'string-interpolation': {
	      pattern: /'(?:[^'\\]|\\[\s\S])*'/,
	      greedy: true,
	      inside: {
	        interpolation: {
	          pattern: /(^|[^\\])\$(?:\w+|\{[^{}]+\})/,
	          lookbehind: true,
	          inside: {
	            'interpolation-punctuation': {
	              pattern: /^\$\{?|\}$/,
	              alias: 'punctuation'
	            },
	            expression: {
	              pattern: /[\s\S]+/,
	              inside: Prism.languages.haxe
	            }
	          }
	        },
	        string: /[\s\S]+/
	      }
	    }
	  });
	  Prism.languages.insertBefore('haxe', 'class-name', {
	    regex: {
	      pattern: /~\/(?:[^\/\\\r\n]|\\.)+\/[a-z]*/,
	      greedy: true,
	      inside: {
	        'regex-flags': /\b[a-z]+$/,
	        'regex-source': {
	          pattern: /^(~\/)[\s\S]+(?=\/$)/,
	          lookbehind: true,
	          alias: 'language-regex',
	          inside: Prism.languages.regex
	        },
	        'regex-delimiter': /^~\/|\/$/
	      }
	    }
	  });
	  Prism.languages.insertBefore('haxe', 'keyword', {
	    preprocessor: {
	      pattern: /#(?:else|elseif|end|if)\b.*/,
	      alias: 'property'
	    },
	    metadata: {
	      pattern: /@:?[\w.]+/,
	      alias: 'symbol'
	    },
	    reification: {
	      pattern: /\$(?:\w+|(?=\{))/,
	      alias: 'important'
	    }
	  });
	}

	// @ts-nocheck
	hcl.displayName = 'hcl';
	hcl.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function hcl(Prism) {
	  Prism.languages.hcl = {
	    comment: /(?:\/\/|#).*|\/\*[\s\S]*?(?:\*\/|$)/,
	    heredoc: {
	      pattern: /<<-?(\w+\b)[\s\S]*?^[ \t]*\1/m,
	      greedy: true,
	      alias: 'string'
	    },
	    keyword: [
	      {
	        pattern:
	          /(?:data|resource)\s+(?:"(?:\\[\s\S]|[^\\"])*")(?=\s+"[\w-]+"\s+\{)/i,
	        inside: {
	          type: {
	            pattern: /(resource|data|\s+)(?:"(?:\\[\s\S]|[^\\"])*")/i,
	            lookbehind: true,
	            alias: 'variable'
	          }
	        }
	      },
	      {
	        pattern:
	          /(?:backend|module|output|provider|provisioner|variable)\s+(?:[\w-]+|"(?:\\[\s\S]|[^\\"])*")\s+(?=\{)/i,
	        inside: {
	          type: {
	            pattern:
	              /(backend|module|output|provider|provisioner|variable)\s+(?:[\w-]+|"(?:\\[\s\S]|[^\\"])*")\s+/i,
	            lookbehind: true,
	            alias: 'variable'
	          }
	        }
	      },
	      /[\w-]+(?=\s+\{)/
	    ],
	    property: [/[-\w\.]+(?=\s*=(?!=))/, /"(?:\\[\s\S]|[^\\"])+"(?=\s*[:=])/],
	    string: {
	      pattern:
	        /"(?:[^\\$"]|\\[\s\S]|\$(?:(?=")|\$+(?!\$)|[^"${])|\$\{(?:[^{}"]|"(?:[^\\"]|\\[\s\S])*")*\})*"/,
	      greedy: true,
	      inside: {
	        interpolation: {
	          pattern: /(^|[^$])\$\{(?:[^{}"]|"(?:[^\\"]|\\[\s\S])*")*\}/,
	          lookbehind: true,
	          inside: {
	            type: {
	              pattern:
	                /(\b(?:count|data|local|module|path|self|terraform|var)\b\.)[\w\*]+/i,
	              lookbehind: true,
	              alias: 'variable'
	            },
	            keyword: /\b(?:count|data|local|module|path|self|terraform|var)\b/i,
	            function: /\w+(?=\()/,
	            string: {
	              pattern: /"(?:\\[\s\S]|[^\\"])*"/,
	              greedy: true
	            },
	            number: /\b0x[\da-f]+\b|\b\d+(?:\.\d*)?(?:e[+-]?\d+)?/i,
	            punctuation: /[!\$#%&'()*+,.\/;<=>@\[\\\]^`{|}~?:]/
	          }
	        }
	      }
	    },
	    number: /\b0x[\da-f]+\b|\b\d+(?:\.\d*)?(?:e[+-]?\d+)?/i,
	    boolean: /\b(?:false|true)\b/i,
	    punctuation: /[=\[\]{}]/
	  };
	}

	// @ts-nocheck
	hlsl.displayName = 'hlsl';
	hlsl.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function hlsl(Prism) {
	  Prism.register(c$1);
	  Prism.languages.hlsl = Prism.languages.extend('c', {
	    // Regarding keywords and class names:
	    // The list of all keywords was split into 'keyword' and 'class-name' tokens based on whether they are capitalized.
	    // https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-appendix-keywords
	    // https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-appendix-reserved-words
	    'class-name': [
	      Prism.languages.c['class-name'],
	      /\b(?:AppendStructuredBuffer|BlendState|Buffer|ByteAddressBuffer|CompileShader|ComputeShader|ConsumeStructuredBuffer|DepthStencilState|DepthStencilView|DomainShader|GeometryShader|Hullshader|InputPatch|LineStream|OutputPatch|PixelShader|PointStream|RWBuffer|RWByteAddressBuffer|RWStructuredBuffer|RWTexture(?:1D|1DArray|2D|2DArray|3D)|RasterizerState|RenderTargetView|SamplerComparisonState|SamplerState|StructuredBuffer|Texture(?:1D|1DArray|2D|2DArray|2DMS|2DMSArray|3D|Cube|CubeArray)|TriangleStream|VertexShader)\b/
	    ],
	    keyword: [
	      // HLSL keyword
	      /\b(?:asm|asm_fragment|auto|break|case|catch|cbuffer|centroid|char|class|column_major|compile|compile_fragment|const|const_cast|continue|default|delete|discard|do|dynamic_cast|else|enum|explicit|export|extern|for|friend|fxgroup|goto|groupshared|if|in|inline|inout|interface|line|lineadj|linear|long|matrix|mutable|namespace|new|nointerpolation|noperspective|operator|out|packoffset|pass|pixelfragment|point|precise|private|protected|public|register|reinterpret_cast|return|row_major|sample|sampler|shared|short|signed|sizeof|snorm|stateblock|stateblock_state|static|static_cast|string|struct|switch|tbuffer|technique|technique10|technique11|template|texture|this|throw|triangle|triangleadj|try|typedef|typename|uniform|union|unorm|unsigned|using|vector|vertexfragment|virtual|void|volatile|while)\b/,
	      // scalar, vector, and matrix types
	      /\b(?:bool|double|dword|float|half|int|min(?:10float|12int|16(?:float|int|uint))|uint)(?:[1-4](?:x[1-4])?)?\b/
	    ],
	    // https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-appendix-grammar#floating-point-numbers
	    number:
	      /(?:(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[eE][+-]?\d+)?|\b0x[\da-fA-F]+)[fFhHlLuU]?\b/,
	    boolean: /\b(?:false|true)\b/
	  });
	}

	// @ts-nocheck
	hoon.displayName = 'hoon';
	hoon.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function hoon(Prism) {
	  Prism.languages.hoon = {
	    comment: {
	      pattern: /::.*/,
	      greedy: true
	    },
	    string: {
	      pattern: /"(?:[^"\\]|\\.)*"|'(?:[^'\\]|\\.)*'/,
	      greedy: true
	    },
	    constant: /%(?:\.[ny]|[\w-]+)/,
	    'class-name': /@(?:[a-z0-9-]*[a-z0-9])?|\*/i,
	    function: /(?:\+[-+] {2})?(?:[a-z](?:[a-z0-9-]*[a-z0-9])?)/,
	    keyword:
	      /\.[\^\+\*=\?]|![><:\.=\?!]|=[>|:,\.\-\^<+;/~\*\?]|\?[>|:\.\-\^<\+&~=@!]|\|[\$_%:\.\-\^~\*=@\?]|\+[|\$\+\*]|:[_\-\^\+~\*]|%[_:\.\-\^\+~\*=]|\^[|:\.\-\+&~\*=\?]|\$[|_%:<>\-\^&~@=\?]|;[:<\+;\/~\*=]|~[>|\$_%<\+\/&=\?!]|--|==/
	  };
	}

	// @ts-nocheck
	hpkp.displayName = 'hpkp';
	hpkp.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function hpkp(Prism) {
	  /**
	   * Original by Scott Helme.
	   *
	   * Reference: https://scotthelme.co.uk/hpkp-cheat-sheet/
	   */

	  Prism.languages.hpkp = {
	    directive: {
	      pattern:
	        /\b(?:includeSubDomains|max-age|pin-sha256|preload|report-to|report-uri|strict)(?=[\s;=]|$)/i,
	      alias: 'property'
	    },
	    operator: /=/,
	    punctuation: /;/
	  };
	}

	// @ts-nocheck
	hsts.displayName = 'hsts';
	hsts.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function hsts(Prism) {
	  /**
	   * Original by Scott Helme.
	   *
	   * Reference: https://scotthelme.co.uk/hsts-cheat-sheet/
	   */

	  Prism.languages.hsts = {
	    directive: {
	      pattern: /\b(?:includeSubDomains|max-age|preload)(?=[\s;=]|$)/i,
	      alias: 'property'
	    },
	    operator: /=/,
	    punctuation: /;/
	  };
	}

	// @ts-nocheck
	uri.displayName = 'uri';
	uri.aliases = ['url'];

	/** @type {import('../core.js').Syntax} */
	function uri(Prism) {
	  // https://tools.ietf.org/html/rfc3986#appendix-A

	  Prism.languages.uri = {
	    scheme: {
	      pattern: /^[a-z][a-z0-9+.-]*:/im,
	      greedy: true,
	      inside: {
	        'scheme-delimiter': /:$/
	      }
	    },
	    fragment: {
	      pattern: /#[\w\-.~!$&'()*+,;=%:@/?]*/,
	      inside: {
	        'fragment-delimiter': /^#/
	      }
	    },
	    query: {
	      pattern: /\?[\w\-.~!$&'()*+,;=%:@/?]*/,
	      inside: {
	        'query-delimiter': {
	          pattern: /^\?/,
	          greedy: true
	        },
	        'pair-delimiter': /[&;]/,
	        pair: {
	          pattern: /^[^=][\s\S]*/,
	          inside: {
	            key: /^[^=]+/,
	            value: {
	              pattern: /(^=)[\s\S]+/,
	              lookbehind: true
	            }
	          }
	        }
	      }
	    },
	    authority: {
	      pattern: RegExp(
	        /^\/\//.source +
	          // [ userinfo "@" ]
	          /(?:[\w\-.~!$&'()*+,;=%:]*@)?/.source +
	          // host
	          ('(?:' +
	            // IP-literal
	            /\[(?:[0-9a-fA-F:.]{2,48}|v[0-9a-fA-F]+\.[\w\-.~!$&'()*+,;=]+)\]/
	              .source +
	            '|' +
	            // IPv4address or registered name
	            /[\w\-.~!$&'()*+,;=%]*/.source +
	            ')') +
	          // [ ":" port ]
	          /(?::\d*)?/.source,
	        'm'
	      ),
	      inside: {
	        'authority-delimiter': /^\/\//,
	        'user-info-segment': {
	          pattern: /^[\w\-.~!$&'()*+,;=%:]*@/,
	          inside: {
	            'user-info-delimiter': /@$/,
	            'user-info': /^[\w\-.~!$&'()*+,;=%:]+/
	          }
	        },
	        'port-segment': {
	          pattern: /:\d*$/,
	          inside: {
	            'port-delimiter': /^:/,
	            port: /^\d+/
	          }
	        },
	        host: {
	          pattern: /[\s\S]+/,
	          inside: {
	            'ip-literal': {
	              pattern: /^\[[\s\S]+\]$/,
	              inside: {
	                'ip-literal-delimiter': /^\[|\]$/,
	                'ipv-future': /^v[\s\S]+/,
	                'ipv6-address': /^[\s\S]+/
	              }
	            },
	            'ipv4-address':
	              /^(?:(?:[03-9]\d?|[12]\d{0,2})\.){3}(?:[03-9]\d?|[12]\d{0,2})$/
	          }
	        }
	      }
	    },
	    path: {
	      pattern: /^[\w\-.~!$&'()*+,;=%:@/]+/m,
	      inside: {
	        'path-separator': /\//
	      }
	    }
	  };
	  Prism.languages.url = Prism.languages.uri;
	}

	// @ts-nocheck
	http.displayName = 'http';
	http.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function http(Prism) {
	(function (Prism) {
	    /**
	     * @param {string} name
	     * @returns {RegExp}
	     */
	    function headerValueOf(name) {
	      return RegExp('(^(?:' + name + '):[ \t]*(?![ \t]))[^]+', 'i')
	    }
	    Prism.languages.http = {
	      'request-line': {
	        pattern:
	          /^(?:CONNECT|DELETE|GET|HEAD|OPTIONS|PATCH|POST|PRI|PUT|SEARCH|TRACE)\s(?:https?:\/\/|\/)\S*\sHTTP\/[\d.]+/m,
	        inside: {
	          // HTTP Method
	          method: {
	            pattern: /^[A-Z]+\b/,
	            alias: 'property'
	          },
	          // Request Target e.g. http://example.com, /path/to/file
	          'request-target': {
	            pattern: /^(\s)(?:https?:\/\/|\/)\S*(?=\s)/,
	            lookbehind: true,
	            alias: 'url',
	            inside: Prism.languages.uri
	          },
	          // HTTP Version
	          'http-version': {
	            pattern: /^(\s)HTTP\/[\d.]+/,
	            lookbehind: true,
	            alias: 'property'
	          }
	        }
	      },
	      'response-status': {
	        pattern: /^HTTP\/[\d.]+ \d+ .+/m,
	        inside: {
	          // HTTP Version
	          'http-version': {
	            pattern: /^HTTP\/[\d.]+/,
	            alias: 'property'
	          },
	          // Status Code
	          'status-code': {
	            pattern: /^(\s)\d+(?=\s)/,
	            lookbehind: true,
	            alias: 'number'
	          },
	          // Reason Phrase
	          'reason-phrase': {
	            pattern: /^(\s).+/,
	            lookbehind: true,
	            alias: 'string'
	          }
	        }
	      },
	      header: {
	        pattern: /^[\w-]+:.+(?:(?:\r\n?|\n)[ \t].+)*/m,
	        inside: {
	          'header-value': [
	            {
	              pattern: headerValueOf(/Content-Security-Policy/.source),
	              lookbehind: true,
	              alias: ['csp', 'languages-csp'],
	              inside: Prism.languages.csp
	            },
	            {
	              pattern: headerValueOf(/Public-Key-Pins(?:-Report-Only)?/.source),
	              lookbehind: true,
	              alias: ['hpkp', 'languages-hpkp'],
	              inside: Prism.languages.hpkp
	            },
	            {
	              pattern: headerValueOf(/Strict-Transport-Security/.source),
	              lookbehind: true,
	              alias: ['hsts', 'languages-hsts'],
	              inside: Prism.languages.hsts
	            },
	            {
	              pattern: headerValueOf(/[^:]+/.source),
	              lookbehind: true
	            }
	          ],
	          'header-name': {
	            pattern: /^[^:]+/,
	            alias: 'keyword'
	          },
	          punctuation: /^:/
	        }
	      }
	    };

	    // Create a mapping of Content-Type headers to language definitions
	    var langs = Prism.languages;
	    var httpLanguages = {
	      'application/javascript': langs.javascript,
	      'application/json': langs.json || langs.javascript,
	      'application/xml': langs.xml,
	      'text/xml': langs.xml,
	      'text/html': langs.html,
	      'text/css': langs.css,
	      'text/plain': langs.plain
	    };

	    // Declare which types can also be suffixes
	    var suffixTypes = {
	      'application/json': true,
	      'application/xml': true
	    };

	    /**
	     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.
	     *
	     * @param {string} contentType
	     * @returns {string}
	     */
	    function getSuffixPattern(contentType) {
	      var suffix = contentType.replace(/^[a-z]+\//, '');
	      var suffixPattern = '\\w+/(?:[\\w.-]+\\+)+' + suffix + '(?![+\\w.-])';
	      return '(?:' + contentType + '|' + suffixPattern + ')'
	    }

	    // Insert each content type parser that has its associated language
	    // currently loaded.
	    var options;
	    for (var contentType in httpLanguages) {
	      if (httpLanguages[contentType]) {
	        options = options || {};
	        var pattern = suffixTypes[contentType]
	          ? getSuffixPattern(contentType)
	          : contentType;
	        options[contentType.replace(/\//g, '-')] = {
	          pattern: RegExp(
	            '(' +
	              /content-type:\s*/.source +
	              pattern +
	              /(?:(?:\r\n?|\n)[\w-].*)*(?:\r(?:\n|(?!\n))|\n)/.source +
	              ')' +
	              // This is a little interesting:
	              // The HTTP format spec required 1 empty line before the body to make everything unambiguous.
	              // However, when writing code by hand (e.g. to display on a website) people can forget about this,
	              // so we want to be liberal here. We will allow the empty line to be omitted if the first line of
	              // the body does not start with a [\w-] character (as headers do).
	              /[^ \t\w-][\s\S]*/.source,
	            'i'
	          ),
	          lookbehind: true,
	          inside: httpLanguages[contentType]
	        };
	      }
	    }
	    if (options) {
	      Prism.languages.insertBefore('http', 'header', options);
	    }
	  })(Prism);
	}

	// @ts-nocheck
	ichigojam.displayName = 'ichigojam';
	ichigojam.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function ichigojam(Prism) {
	  // according to the offical reference (EN)
	  // https://ichigojam.net/IchigoJam-en.html
	  Prism.languages.ichigojam = {
	    comment: /(?:\B'|REM)(?:[^\n\r]*)/i,
	    string: {
	      pattern: /"(?:""|[!#$%&'()*,\/:;<=>?^\w +\-.])*"/,
	      greedy: true
	    },
	    number: /\B#[0-9A-F]+|\B`[01]+|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:E[+-]?\d+)?/i,
	    keyword:
	      /\b(?:BEEP|BPS|CASE|CLEAR|CLK|CLO|CLP|CLS|CLT|CLV|CONT|COPY|ELSE|END|FILE|FILES|FOR|GOSUB|GOTO|GSB|IF|INPUT|KBD|LED|LET|LIST|LOAD|LOCATE|LRUN|NEW|NEXT|OUT|PLAY|POKE|PRINT|PWM|REM|RENUM|RESET|RETURN|RIGHT|RTN|RUN|SAVE|SCROLL|SLEEP|SRND|STEP|STOP|SUB|TEMPO|THEN|TO|UART|VIDEO|WAIT)(?:\$|\b)/i,
	    function:
	      /\b(?:ABS|ANA|ASC|BIN|BTN|DEC|END|FREE|HELP|HEX|I2CR|I2CW|IN|INKEY|LEN|LINE|PEEK|RND|SCR|SOUND|STR|TICK|USR|VER|VPEEK|ZER)(?:\$|\b)/i,
	    label: /(?:\B@\S+)/,
	    operator: /<[=>]?|>=?|\|\||&&|[+\-*\/=|&^~!]|\b(?:AND|NOT|OR)\b/i,
	    punctuation: /[\[,;:()\]]/
	  };
	}

	// @ts-nocheck
	icon.displayName = 'icon';
	icon.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function icon(Prism) {
	  Prism.languages.icon = {
	    comment: /#.*/,
	    string: {
	      pattern: /(["'])(?:(?!\1)[^\\\r\n_]|\\.|_(?!\1)(?:\r\n|[\s\S]))*\1/,
	      greedy: true
	    },
	    number: /\b(?:\d+r[a-z\d]+|\d+(?:\.\d+)?(?:e[+-]?\d+)?)\b|\.\d+\b/i,
	    'builtin-keyword': {
	      pattern:
	        /&(?:allocated|ascii|clock|collections|cset|current|date|dateline|digits|dump|e|error(?:number|text|value)?|errout|fail|features|file|host|input|lcase|letters|level|line|main|null|output|phi|pi|pos|progname|random|regions|source|storage|subject|time|trace|ucase|version)\b/,
	      alias: 'variable'
	    },
	    directive: {
	      pattern: /\$\w+/,
	      alias: 'builtin'
	    },
	    keyword:
	      /\b(?:break|by|case|create|default|do|else|end|every|fail|global|if|initial|invocable|link|local|next|not|of|procedure|record|repeat|return|static|suspend|then|to|until|while)\b/,
	    function: /\b(?!\d)\w+(?=\s*[({]|\s*!\s*\[)/,
	    operator:
	      /[+-]:(?!=)|(?:[\/?@^%&]|\+\+?|--?|==?=?|~==?=?|\*\*?|\|\|\|?|<(?:->?|<?=?)|>>?=?)(?::=)?|:(?:=:?)?|[!.\\|~]/,
	    punctuation: /[\[\](){},;]/
	  };
	}

	// @ts-nocheck
	icuMessageFormat.displayName = 'icu-message-format';
	icuMessageFormat.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function icuMessageFormat(Prism) {
	(function (Prism) {
	    /**
	     * @param {string} source
	     * @param {number} level
	     * @returns {string}
	     */
	    function nested(source, level) {
	      if (level <= 0) {
	        return /[]/.source
	      } else {
	        return source.replace(/<SELF>/g, function () {
	          return nested(source, level - 1)
	        })
	      }
	    }
	    var stringPattern = /'[{}:=,](?:[^']|'')*'(?!')/;
	    var escape = {
	      pattern: /''/,
	      greedy: true,
	      alias: 'operator'
	    };
	    var string = {
	      pattern: stringPattern,
	      greedy: true,
	      inside: {
	        escape: escape
	      }
	    };
	    var argumentSource = nested(
	      /\{(?:[^{}']|'(?![{},'])|''|<STR>|<SELF>)*\}/.source.replace(
	        /<STR>/g,
	        function () {
	          return stringPattern.source
	        }
	      ),
	      8
	    );
	    var nestedMessage = {
	      pattern: RegExp(argumentSource),
	      inside: {
	        message: {
	          pattern: /^(\{)[\s\S]+(?=\}$)/,
	          lookbehind: true,
	          inside: null // see below
	        },

	        'message-delimiter': {
	          pattern: /./,
	          alias: 'punctuation'
	        }
	      }
	    };
	    Prism.languages['icu-message-format'] = {
	      argument: {
	        pattern: RegExp(argumentSource),
	        greedy: true,
	        inside: {
	          content: {
	            pattern: /^(\{)[\s\S]+(?=\}$)/,
	            lookbehind: true,
	            inside: {
	              'argument-name': {
	                pattern: /^(\s*)[^{}:=,\s]+/,
	                lookbehind: true
	              },
	              'choice-style': {
	                // https://unicode-org.github.io/icu-docs/apidoc/released/icu4c/classicu_1_1ChoiceFormat.html#details
	                pattern: /^(\s*,\s*choice\s*,\s*)\S(?:[\s\S]*\S)?/,
	                lookbehind: true,
	                inside: {
	                  punctuation: /\|/,
	                  range: {
	                    pattern: /^(\s*)[+-]?(?:\d+(?:\.\d*)?|\u221e)\s*[<#\u2264]/,
	                    lookbehind: true,
	                    inside: {
	                      operator: /[<#\u2264]/,
	                      number: /\S+/
	                    }
	                  },
	                  rest: null // see below
	                }
	              },

	              'plural-style': {
	                // https://unicode-org.github.io/icu-docs/apidoc/released/icu4j/com/ibm/icu/text/PluralFormat.html#:~:text=Patterns%20and%20Their%20Interpretation
	                pattern:
	                  /^(\s*,\s*(?:plural|selectordinal)\s*,\s*)\S(?:[\s\S]*\S)?/,
	                lookbehind: true,
	                inside: {
	                  offset: /^offset:\s*\d+/,
	                  'nested-message': nestedMessage,
	                  selector: {
	                    pattern: /=\d+|[^{}:=,\s]+/,
	                    inside: {
	                      keyword: /^(?:few|many|one|other|two|zero)$/
	                    }
	                  }
	                }
	              },
	              'select-style': {
	                // https://unicode-org.github.io/icu-docs/apidoc/released/icu4j/com/ibm/icu/text/SelectFormat.html#:~:text=Patterns%20and%20Their%20Interpretation
	                pattern: /^(\s*,\s*select\s*,\s*)\S(?:[\s\S]*\S)?/,
	                lookbehind: true,
	                inside: {
	                  'nested-message': nestedMessage,
	                  selector: {
	                    pattern: /[^{}:=,\s]+/,
	                    inside: {
	                      keyword: /^other$/
	                    }
	                  }
	                }
	              },
	              keyword: /\b(?:choice|plural|select|selectordinal)\b/,
	              'arg-type': {
	                pattern: /\b(?:date|duration|number|ordinal|spellout|time)\b/,
	                alias: 'keyword'
	              },
	              'arg-skeleton': {
	                pattern: /(,\s*)::[^{}:=,\s]+/,
	                lookbehind: true
	              },
	              'arg-style': {
	                pattern:
	                  /(,\s*)(?:currency|full|integer|long|medium|percent|short)(?=\s*$)/,
	                lookbehind: true
	              },
	              'arg-style-text': {
	                pattern: RegExp(
	                  /(^\s*,\s*(?=\S))/.source +
	                    nested(/(?:[^{}']|'[^']*'|\{(?:<SELF>)?\})+/.source, 8) +
	                    '$'
	                ),
	                lookbehind: true,
	                alias: 'string'
	              },
	              punctuation: /,/
	            }
	          },
	          'argument-delimiter': {
	            pattern: /./,
	            alias: 'operator'
	          }
	        }
	      },
	      escape: escape,
	      string: string
	    };
	    nestedMessage.inside.message.inside = Prism.languages['icu-message-format'];
	    Prism.languages['icu-message-format'].argument.inside.content.inside[
	      'choice-style'
	    ].inside.rest = Prism.languages['icu-message-format'];
	  })(Prism);
	}

	// @ts-nocheck
	idris.displayName = 'idris';
	idris.aliases = ['idr'];

	/** @type {import('../core.js').Syntax} */
	function idris(Prism) {
	  Prism.register(haskell);
	  Prism.languages.idris = Prism.languages.extend('haskell', {
	    comment: {
	      pattern: /(?:(?:--|\|\|\|).*$|\{-[\s\S]*?-\})/m
	    },
	    keyword:
	      /\b(?:Type|case|class|codata|constructor|corecord|data|do|dsl|else|export|if|implementation|implicit|import|impossible|in|infix|infixl|infixr|instance|interface|let|module|mutual|namespace|of|parameters|partial|postulate|private|proof|public|quoteGoal|record|rewrite|syntax|then|total|using|where|with)\b/,
	    builtin: undefined
	  });
	  Prism.languages.insertBefore('idris', 'keyword', {
	    'import-statement': {
	      pattern: /(^\s*import\s+)(?:[A-Z][\w']*)(?:\.[A-Z][\w']*)*/m,
	      lookbehind: true,
	      inside: {
	        punctuation: /\./
	      }
	    }
	  });
	  Prism.languages.idr = Prism.languages.idris;
	}

	// @ts-nocheck
	ignore.displayName = 'ignore';
	ignore.aliases = ['gitignore', 'hgignore', 'npmignore'];

	/** @type {import('../core.js').Syntax} */
	function ignore(Prism) {
	(function (Prism) {
	    Prism.languages.ignore = {
	      // https://git-scm.com/docs/gitignore
	      comment: /^#.*/m,
	      entry: {
	        pattern: /\S(?:.*(?:(?:\\ )|\S))?/,
	        alias: 'string',
	        inside: {
	          operator: /^!|\*\*?|\?/,
	          regex: {
	            pattern: /(^|[^\\])\[[^\[\]]*\]/,
	            lookbehind: true
	          },
	          punctuation: /\//
	        }
	      }
	    };
	    Prism.languages.gitignore = Prism.languages.ignore;
	    Prism.languages.hgignore = Prism.languages.ignore;
	    Prism.languages.npmignore = Prism.languages.ignore;
	  })(Prism);
	}

	// @ts-nocheck
	inform7.displayName = 'inform7';
	inform7.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function inform7(Prism) {
	  Prism.languages.inform7 = {
	    string: {
	      pattern: /"[^"]*"/,
	      inside: {
	        substitution: {
	          pattern: /\[[^\[\]]+\]/,
	          inside: {
	            delimiter: {
	              pattern: /\[|\]/,
	              alias: 'punctuation'
	            }
	            // See rest below
	          }
	        }
	      }
	    },

	    comment: {
	      pattern: /\[[^\[\]]+\]/,
	      greedy: true
	    },
	    title: {
	      pattern: /^[ \t]*(?:book|chapter|part(?! of)|section|table|volume)\b.+/im,
	      alias: 'important'
	    },
	    number: {
	      pattern:
	        /(^|[^-])(?:\b\d+(?:\.\d+)?(?:\^\d+)?(?:(?!\d)\w+)?|\b(?:eight|eleven|five|four|nine|one|seven|six|ten|three|twelve|two))\b(?!-)/i,
	      lookbehind: true
	    },
	    verb: {
	      pattern:
	        /(^|[^-])\b(?:answering|applying to|are|asking|attacking|be(?:ing)?|burning|buying|called|carries|carry(?! out)|carrying|climbing|closing|conceal(?:ing|s)?|consulting|contain(?:ing|s)?|cutting|drinking|dropping|eating|enclos(?:es?|ing)|entering|examining|exiting|getting|giving|going|ha(?:s|ve|ving)|hold(?:ing|s)?|impl(?:ies|y)|incorporat(?:es?|ing)|inserting|is|jumping|kissing|listening|locking|looking|mean(?:ing|s)?|opening|provid(?:es?|ing)|pulling|pushing|putting|relat(?:es?|ing)|removing|searching|see(?:ing|s)?|setting|showing|singing|sleeping|smelling|squeezing|support(?:ing|s)?|swearing|switching|taking|tasting|telling|thinking|throwing|touching|turning|tying|unlock(?:ing|s)?|var(?:ies|y|ying)|waiting|waking|waving|wear(?:ing|s)?)\b(?!-)/i,
	      lookbehind: true,
	      alias: 'operator'
	    },
	    keyword: {
	      pattern:
	        /(^|[^-])\b(?:after|before|carry out|check|continue the action|definition(?= *:)|do nothing|else|end (?:if|the story|unless)|every turn|if|include|instead(?: of)?|let|move|no|now|otherwise|repeat|report|resume the story|rule for|running through|say(?:ing)?|stop the action|test|try(?:ing)?|understand|unless|use|when|while|yes)\b(?!-)/i,
	      lookbehind: true
	    },
	    property: {
	      pattern:
	        /(^|[^-])\b(?:adjacent(?! to)|carried|closed|concealed|contained|dark|described|edible|empty|enclosed|enterable|even|female|fixed in place|full|handled|held|improper-named|incorporated|inedible|invisible|lighted|lit|lock(?:able|ed)|male|marked for listing|mentioned|negative|neuter|non-(?:empty|full|recurring)|odd|opaque|open(?:able)?|plural-named|portable|positive|privately-named|proper-named|provided|publically-named|pushable between rooms|recurring|related|rubbing|scenery|seen|singular-named|supported|swinging|switch(?:able|ed(?: off| on)?)|touch(?:able|ed)|transparent|unconcealed|undescribed|unlit|unlocked|unmarked for listing|unmentioned|unopenable|untouchable|unvisited|variable|visible|visited|wearable|worn)\b(?!-)/i,
	      lookbehind: true,
	      alias: 'symbol'
	    },
	    position: {
	      pattern:
	        /(^|[^-])\b(?:above|adjacent to|back side of|below|between|down|east|everywhere|front side|here|in|inside(?: from)?|north(?:east|west)?|nowhere|on(?: top of)?|other side|outside(?: from)?|parts? of|regionally in|south(?:east|west)?|through|up|west|within)\b(?!-)/i,
	      lookbehind: true,
	      alias: 'keyword'
	    },
	    type: {
	      pattern:
	        /(^|[^-])\b(?:actions?|activit(?:ies|y)|actors?|animals?|backdrops?|containers?|devices?|directions?|doors?|holders?|kinds?|lists?|m[ae]n|nobody|nothing|nouns?|numbers?|objects?|people|persons?|player(?:'s holdall)?|regions?|relations?|rooms?|rule(?:book)?s?|scenes?|someone|something|supporters?|tables?|texts?|things?|time|vehicles?|wom[ae]n)\b(?!-)/i,
	      lookbehind: true,
	      alias: 'variable'
	    },
	    punctuation: /[.,:;(){}]/
	  };
	  Prism.languages.inform7['string'].inside['substitution'].inside.rest =
	    Prism.languages.inform7;
	  // We don't want the remaining text in the substitution to be highlighted as the string.
	  Prism.languages.inform7['string'].inside['substitution'].inside.rest.text = {
	    pattern: /\S(?:\s*\S)*/,
	    alias: 'comment'
	  };
	}

	// @ts-nocheck
	io.displayName = 'io';
	io.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function io(Prism) {
	  Prism.languages.io = {
	    comment: {
	      pattern: /(^|[^\\])(?:\/\*[\s\S]*?(?:\*\/|$)|\/\/.*|#.*)/,
	      lookbehind: true,
	      greedy: true
	    },
	    'triple-quoted-string': {
	      pattern: /"""(?:\\[\s\S]|(?!""")[^\\])*"""/,
	      greedy: true,
	      alias: 'string'
	    },
	    string: {
	      pattern: /"(?:\\.|[^\\\r\n"])*"/,
	      greedy: true
	    },
	    keyword:
	      /\b(?:activate|activeCoroCount|asString|block|break|call|catch|clone|collectGarbage|compileString|continue|do|doFile|doMessage|doString|else|elseif|exit|for|foreach|forward|getEnvironmentVariable|getSlot|hasSlot|if|ifFalse|ifNil|ifNilEval|ifTrue|isActive|isNil|isResumable|list|message|method|parent|pass|pause|perform|performWithArgList|print|println|proto|raise|raiseResumable|removeSlot|resend|resume|schedulerSleepSeconds|self|sender|setSchedulerSleepSeconds|setSlot|shallowCopy|slotNames|super|system|then|thisBlock|thisContext|try|type|uniqueId|updateSlot|wait|while|write|yield)\b/,
	    builtin:
	      /\b(?:Array|AudioDevice|AudioMixer|BigNum|Block|Box|Buffer|CFunction|CGI|Color|Curses|DBM|DNSResolver|DOConnection|DOProxy|DOServer|Date|Directory|Duration|DynLib|Error|Exception|FFT|File|Fnmatch|Font|Future|GL|GLE|GLScissor|GLU|GLUCylinder|GLUQuadric|GLUSphere|GLUT|Host|Image|Importer|LinkList|List|Lobby|Locals|MD5|MP3Decoder|MP3Encoder|Map|Message|Movie|Notification|Number|Object|OpenGL|Point|Protos|Random|Regex|SGML|SGMLElement|SGMLParser|SQLite|Sequence|Server|ShowMessage|SleepyCat|SleepyCatCursor|Socket|SocketManager|Sound|Soup|Store|String|Tree|UDPSender|UPDReceiver|URL|User|Warning|WeakLink)\b/,
	    boolean: /\b(?:false|nil|true)\b/,
	    number: /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e-?\d+)?/i,
	    operator:
	      /[=!*/%+\-^&|]=|>>?=?|<<?=?|:?:?=|\+\+?|--?|\*\*?|\/\/?|%|\|\|?|&&?|\b(?:and|not|or|return)\b|@@?|\?\??|\.\./,
	    punctuation: /[{}[\];(),.:]/
	  };
	}

	// @ts-nocheck
	j.displayName = 'j';
	j.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function j(Prism) {
	  Prism.languages.j = {
	    comment: {
	      pattern: /\bNB\..*/,
	      greedy: true
	    },
	    string: {
	      pattern: /'(?:''|[^'\r\n])*'/,
	      greedy: true
	    },
	    keyword:
	      /\b(?:(?:CR|LF|adverb|conjunction|def|define|dyad|monad|noun|verb)\b|(?:assert|break|case|catch[dt]?|continue|do|else|elseif|end|fcase|for|for_\w+|goto_\w+|if|label_\w+|return|select|throw|try|while|whilst)\.)/,
	    verb: {
	      // Negative look-ahead prevents bad highlighting
	      // of ^: ;. =. =: !. !:
	      pattern:
	        /(?!\^:|;\.|[=!][.:])(?:\{(?:\.|::?)?|p(?:\.\.?|:)|[=!\]]|[<>+*\-%$|,#][.:]?|[?^]\.?|[;\[]:?|[~}"i][.:]|[ACeEIjLor]\.|(?:[_\/\\qsux]|_?\d):)/,
	      alias: 'keyword'
	    },
	    number:
	      /\b_?(?:(?!\d:)\d+(?:\.\d+)?(?:(?:ad|ar|[ejpx])_?\d+(?:\.\d+)?)*(?:b_?[\da-z]+(?:\.[\da-z]+)?)?|_\b(?!\.))/,
	    adverb: {
	      pattern: /[~}]|[\/\\]\.?|[bfM]\.|t[.:]/,
	      alias: 'builtin'
	    },
	    operator: /[=a][.:]|_\./,
	    conjunction: {
	      pattern: /&(?:\.:?|:)?|[.:@][.:]?|[!D][.:]|[;dHT]\.|`:?|[\^LS]:|"/,
	      alias: 'variable'
	    },
	    punctuation: /[()]/
	  };
	}

	// @ts-nocheck
	javadoclike.displayName = 'javadoclike';
	javadoclike.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function javadoclike(Prism) {
	(function (Prism) {
	    var javaDocLike = (Prism.languages.javadoclike = {
	      parameter: {
	        pattern:
	          /(^[\t ]*(?:\/{3}|\*|\/\*\*)\s*@(?:arg|arguments|param)\s+)\w+/m,
	        lookbehind: true
	      },
	      keyword: {
	        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.
	        // @word, {@word}
	        pattern: /(^[\t ]*(?:\/{3}|\*|\/\*\*)\s*|\{)@[a-z][a-zA-Z-]+\b/m,
	        lookbehind: true
	      },
	      punctuation: /[{}]/
	    });

	    /**
	     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.
	     *
	     * @param {string} lang the language add doc comment support to.
	     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.
	     */
	    function docCommentSupport(lang, callback) {
	      var tokenName = 'doc-comment';
	      var grammar = Prism.languages[lang];
	      if (!grammar) {
	        return
	      }
	      var token = grammar[tokenName];
	      if (!token) {
	        // add doc comment: /** */
	        var definition = {};
	        definition[tokenName] = {
	          pattern: /(^|[^\\])\/\*\*[^/][\s\S]*?(?:\*\/|$)/,
	          lookbehind: true,
	          alias: 'comment'
	        };
	        grammar = Prism.languages.insertBefore(lang, 'comment', definition);
	        token = grammar[tokenName];
	      }
	      if (token instanceof RegExp) {
	        // convert regex to object
	        token = grammar[tokenName] = {
	          pattern: token
	        };
	      }
	      if (Array.isArray(token)) {
	        for (var i = 0, l = token.length; i < l; i++) {
	          if (token[i] instanceof RegExp) {
	            token[i] = {
	              pattern: token[i]
	            };
	          }
	          callback(token[i]);
	        }
	      } else {
	        callback(token);
	      }
	    }

	    /**
	     * Adds doc-comment support to the given languages for the given documentation language.
	     *
	     * @param {string[]|string} languages
	     * @param {Object} docLanguage
	     */
	    function addSupport(languages, docLanguage) {
	      if (typeof languages === 'string') {
	        languages = [languages];
	      }
	      languages.forEach(function (lang) {
	        docCommentSupport(lang, function (pattern) {
	          if (!pattern.inside) {
	            pattern.inside = {};
	          }
	          pattern.inside.rest = docLanguage;
	        });
	      });
	    }
	    Object.defineProperty(javaDocLike, 'addSupport', {
	      value: addSupport
	    });
	    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike);
	  })(Prism);
	}

	// @ts-nocheck
	scala.displayName = 'scala';
	scala.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function scala(Prism) {
	  Prism.register(java);
	  Prism.languages.scala = Prism.languages.extend('java', {
	    'triple-quoted-string': {
	      pattern: /"""[\s\S]*?"""/,
	      greedy: true,
	      alias: 'string'
	    },
	    string: {
	      pattern: /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
	      greedy: true
	    },
	    keyword:
	      /<-|=>|\b(?:abstract|case|catch|class|def|derives|do|else|enum|extends|extension|final|finally|for|forSome|given|if|implicit|import|infix|inline|lazy|match|new|null|object|opaque|open|override|package|private|protected|return|sealed|self|super|this|throw|trait|transparent|try|type|using|val|var|while|with|yield)\b/,
	    number:
	      /\b0x(?:[\da-f]*\.)?[\da-f]+|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e\d+)?[dfl]?/i,
	    builtin:
	      /\b(?:Any|AnyRef|AnyVal|Boolean|Byte|Char|Double|Float|Int|Long|Nothing|Short|String|Unit)\b/,
	    symbol: /'[^\d\s\\]\w*/
	  });
	  Prism.languages.insertBefore('scala', 'triple-quoted-string', {
	    'string-interpolation': {
	      pattern:
	        /\b[a-z]\w*(?:"""(?:[^$]|\$(?:[^{]|\{(?:[^{}]|\{[^{}]*\})*\}))*?"""|"(?:[^$"\r\n]|\$(?:[^{]|\{(?:[^{}]|\{[^{}]*\})*\}))*")/i,
	      greedy: true,
	      inside: {
	        id: {
	          pattern: /^\w+/,
	          greedy: true,
	          alias: 'function'
	        },
	        escape: {
	          pattern: /\\\$"|\$[$"]/,
	          greedy: true,
	          alias: 'symbol'
	        },
	        interpolation: {
	          pattern: /\$(?:\w+|\{(?:[^{}]|\{[^{}]*\})*\})/,
	          greedy: true,
	          inside: {
	            punctuation: /^\$\{?|\}$/,
	            expression: {
	              pattern: /[\s\S]+/,
	              inside: Prism.languages.scala
	            }
	          }
	        },
	        string: /[\s\S]+/
	      }
	    }
	  });
	  delete Prism.languages.scala['class-name'];
	  delete Prism.languages.scala['function'];
	  delete Prism.languages.scala['constant'];
	}

	// @ts-nocheck
	javadoc.displayName = 'javadoc';
	javadoc.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function javadoc(Prism) {
	  Prism.register(java);
	  Prism.register(javadoclike);
	  Prism.register(markup)
	  ;(function (Prism) {
	    var codeLinePattern = /(^(?:[\t ]*(?:\*\s*)*))[^*\s].*$/m;
	    var memberReference = /#\s*\w+(?:\s*\([^()]*\))?/.source;
	    var reference =
	      /(?:\b[a-zA-Z]\w+\s*\.\s*)*\b[A-Z]\w*(?:\s*<mem>)?|<mem>/.source.replace(
	        /<mem>/g,
	        function () {
	          return memberReference
	        }
	      );
	    Prism.languages.javadoc = Prism.languages.extend('javadoclike', {});
	    Prism.languages.insertBefore('javadoc', 'keyword', {
	      reference: {
	        pattern: RegExp(
	          /(@(?:exception|link|linkplain|see|throws|value)\s+(?:\*\s*)?)/
	            .source +
	            '(?:' +
	            reference +
	            ')'
	        ),
	        lookbehind: true,
	        inside: {
	          function: {
	            pattern: /(#\s*)\w+(?=\s*\()/,
	            lookbehind: true
	          },
	          field: {
	            pattern: /(#\s*)\w+/,
	            lookbehind: true
	          },
	          namespace: {
	            pattern: /\b(?:[a-z]\w*\s*\.\s*)+/,
	            inside: {
	              punctuation: /\./
	            }
	          },
	          'class-name': /\b[A-Z]\w*/,
	          keyword: Prism.languages.java.keyword,
	          punctuation: /[#()[\],.]/
	        }
	      },
	      'class-name': {
	        // @param <T> the first generic type parameter
	        pattern: /(@param\s+)<[A-Z]\w*>/,
	        lookbehind: true,
	        inside: {
	          punctuation: /[.<>]/
	        }
	      },
	      'code-section': [
	        {
	          pattern:
	            /(\{@code\s+(?!\s))(?:[^\s{}]|\s+(?![\s}])|\{(?:[^{}]|\{(?:[^{}]|\{(?:[^{}]|\{[^{}]*\})*\})*\})*\})+(?=\s*\})/,
	          lookbehind: true,
	          inside: {
	            code: {
	              // there can't be any HTML inside of {@code} tags
	              pattern: codeLinePattern,
	              lookbehind: true,
	              inside: Prism.languages.java,
	              alias: 'language-java'
	            }
	          }
	        },
	        {
	          pattern:
	            /(<(code|pre|tt)>(?!<code>)\s*)\S(?:\S|\s+\S)*?(?=\s*<\/\2>)/,
	          lookbehind: true,
	          inside: {
	            line: {
	              pattern: codeLinePattern,
	              lookbehind: true,
	              inside: {
	                // highlight HTML tags and entities
	                tag: Prism.languages.markup.tag,
	                entity: Prism.languages.markup.entity,
	                code: {
	                  // everything else is Java code
	                  pattern: /.+/,
	                  inside: Prism.languages.java,
	                  alias: 'language-java'
	                }
	              }
	            }
	          }
	        }
	      ],
	      tag: Prism.languages.markup.tag,
	      entity: Prism.languages.markup.entity
	    });
	    Prism.languages.javadoclike.addSupport('java', Prism.languages.javadoc);
	  })(Prism);
	}

	// @ts-nocheck
	javastacktrace.displayName = 'javastacktrace';
	javastacktrace.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function javastacktrace(Prism) {
	  // Specification:
	  // https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/Throwable.html#printStackTrace()

	  Prism.languages.javastacktrace = {
	    // java.sql.SQLException: Violation of unique constraint MY_ENTITY_UK_1: duplicate value(s) for column(s) MY_COLUMN in statement [...]
	    // Caused by: java.sql.SQLException: Violation of unique constraint MY_ENTITY_UK_1: duplicate value(s) for column(s) MY_COLUMN in statement [...]
	    // Caused by: com.example.myproject.MyProjectServletException
	    // Caused by: MidLevelException: LowLevelException
	    // Suppressed: Resource$CloseFailException: Resource ID = 0
	    summary: {
	      pattern:
	        /^([\t ]*)(?:(?:Caused by:|Suppressed:|Exception in thread "[^"]*")[\t ]+)?[\w$.]+(?::.*)?$/m,
	      lookbehind: true,
	      inside: {
	        keyword: {
	          pattern:
	            /^([\t ]*)(?:(?:Caused by|Suppressed)(?=:)|Exception in thread)/m,
	          lookbehind: true
	        },
	        // the current thread if the summary starts with 'Exception in thread'
	        string: {
	          pattern: /^(\s*)"[^"]*"/,
	          lookbehind: true
	        },
	        exceptions: {
	          pattern: /^(:?\s*)[\w$.]+(?=:|$)/,
	          lookbehind: true,
	          inside: {
	            'class-name': /[\w$]+$/,
	            namespace: /\b[a-z]\w*\b/,
	            punctuation: /\./
	          }
	        },
	        message: {
	          pattern: /(:\s*)\S.*/,
	          lookbehind: true,
	          alias: 'string'
	        },
	        punctuation: /:/
	      }
	    },
	    // at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166)
	    // at org.hsqldb.jdbc.Util.throwError(Unknown Source) here could be some notes
	    // at java.base/java.lang.Class.forName0(Native Method)
	    // at Util.<init>(Unknown Source)
	    // at com.foo.loader/foo@9.0/com.foo.Main.run(Main.java:101)
	    // at com.foo.loader//com.foo.bar.App.run(App.java:12)
	    // at acme@2.1/org.acme.Lib.test(Lib.java:80)
	    // at MyClass.mash(MyClass.java:9)
	    //
	    // More information:
	    // https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/StackTraceElement.html#toString()
	    //
	    // A valid Java module name is defined as:
	    //   "A module name consists of one or more Java identifiers (§3.8) separated by "." tokens."
	    // https://docs.oracle.com/javase/specs/jls/se9/html/jls-6.html#jls-ModuleName
	    //
	    // A Java module version is defined by this class:
	    // https://docs.oracle.com/javase/9/docs/api/java/lang/module/ModuleDescriptor.Version.html
	    // This is the implementation of the `parse` method in JDK13:
	    // https://github.com/matcdac/jdk/blob/2305df71d1b7710266ae0956d73927a225132c0f/src/java.base/share/classes/java/lang/module/ModuleDescriptor.java#L1108
	    // However, to keep this simple, a version will be matched by the pattern /@[\w$.+-]*/.
	    'stack-frame': {
	      pattern: /^([\t ]*)at (?:[\w$./]|@[\w$.+-]*\/)+(?:<init>)?\([^()]*\)/m,
	      lookbehind: true,
	      inside: {
	        keyword: {
	          pattern: /^(\s*)at(?= )/,
	          lookbehind: true
	        },
	        source: [
	          // (Main.java:15)
	          // (Main.scala:15)
	          {
	            pattern: /(\()\w+\.\w+:\d+(?=\))/,
	            lookbehind: true,
	            inside: {
	              file: /^\w+\.\w+/,
	              punctuation: /:/,
	              'line-number': {
	                pattern: /\b\d+\b/,
	                alias: 'number'
	              }
	            }
	          },
	          // (Unknown Source)
	          // (Native Method)
	          // (...something...)
	          {
	            pattern: /(\()[^()]*(?=\))/,
	            lookbehind: true,
	            inside: {
	              keyword: /^(?:Native Method|Unknown Source)$/
	            }
	          }
	        ],
	        'class-name': /[\w$]+(?=\.(?:<init>|[\w$]+)\()/,
	        function: /(?:<init>|[\w$]+)(?=\()/,
	        'class-loader': {
	          pattern: /(\s)[a-z]\w*(?:\.[a-z]\w*)*(?=\/[\w@$.]*\/)/,
	          lookbehind: true,
	          alias: 'namespace',
	          inside: {
	            punctuation: /\./
	          }
	        },
	        module: {
	          pattern: /([\s/])[a-z]\w*(?:\.[a-z]\w*)*(?:@[\w$.+-]*)?(?=\/)/,
	          lookbehind: true,
	          inside: {
	            version: {
	              pattern: /(@)[\s\S]+/,
	              lookbehind: true,
	              alias: 'number'
	            },
	            punctuation: /[@.]/
	          }
	        },
	        namespace: {
	          pattern: /(?:\b[a-z]\w*\.)+/,
	          inside: {
	            punctuation: /\./
	          }
	        },
	        punctuation: /[()/.]/
	      }
	    },
	    // ... 32 more
	    // ... 32 common frames omitted
	    more: {
	      pattern: /^([\t ]*)\.{3} \d+ [a-z]+(?: [a-z]+)*/m,
	      lookbehind: true,
	      inside: {
	        punctuation: /\.{3}/,
	        number: /\d+/,
	        keyword: /\b[a-z]+(?: [a-z]+)*\b/
	      }
	    }
	  };
	}

	// @ts-nocheck
	jexl.displayName = 'jexl';
	jexl.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function jexl(Prism) {
	  Prism.languages.jexl = {
	    string: /(["'])(?:\\[\s\S]|(?!\1)[^\\])*\1/,
	    transform: {
	      pattern:
	        /(\|\s*)[a-zA-Zа-яА-Я_\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF$][\wа-яА-Я\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF$]*/,
	      alias: 'function',
	      lookbehind: true
	    },
	    function:
	      /[a-zA-Zа-яА-Я_\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF$][\wа-яА-Я\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF$]*\s*(?=\()/,
	    number: /\b\d+(?:\.\d+)?\b|\B\.\d+\b/,
	    operator: /[<>!]=?|-|\+|&&|==|\|\|?|\/\/?|[?:*^%]/,
	    boolean: /\b(?:false|true)\b/,
	    keyword: /\bin\b/,
	    punctuation: /[{}[\](),.]/
	  };
	}

	// @ts-nocheck
	jolie.displayName = 'jolie';
	jolie.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function jolie(Prism) {
	  Prism.register(clike);
	  Prism.languages.jolie = Prism.languages.extend('clike', {
	    string: {
	      pattern: /(^|[^\\])"(?:\\[\s\S]|[^"\\])*"/,
	      lookbehind: true,
	      greedy: true
	    },
	    'class-name': {
	      pattern:
	        /((?:\b(?:as|courier|embed|in|inputPort|outputPort|service)\b|@)[ \t]*)\w+/,
	      lookbehind: true
	    },
	    keyword:
	      /\b(?:as|cH|comp|concurrent|constants|courier|cset|csets|default|define|else|embed|embedded|execution|exit|extender|for|foreach|forward|from|global|if|import|in|include|init|inputPort|install|instanceof|interface|is_defined|linkIn|linkOut|main|new|nullProcess|outputPort|over|private|provide|public|scope|sequential|service|single|spawn|synchronized|this|throw|throws|type|undef|until|while|with)\b/,
	    function: /\b[a-z_]\w*(?=[ \t]*[@(])/i,
	    number: /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?l?/i,
	    operator: /-[-=>]?|\+[+=]?|<[<=]?|[>=*!]=?|&&|\|\||[?\/%^@|]/,
	    punctuation: /[()[\]{},;.:]/,
	    builtin:
	      /\b(?:Byte|any|bool|char|double|enum|float|int|length|long|ranges|regex|string|undefined|void)\b/
	  });
	  Prism.languages.insertBefore('jolie', 'keyword', {
	    aggregates: {
	      pattern:
	        /(\bAggregates\s*:\s*)(?:\w+(?:\s+with\s+\w+)?\s*,\s*)*\w+(?:\s+with\s+\w+)?/,
	      lookbehind: true,
	      inside: {
	        keyword: /\bwith\b/,
	        'class-name': /\w+/,
	        punctuation: /,/
	      }
	    },
	    redirects: {
	      pattern:
	        /(\bRedirects\s*:\s*)(?:\w+\s*=>\s*\w+\s*,\s*)*(?:\w+\s*=>\s*\w+)/,
	      lookbehind: true,
	      inside: {
	        punctuation: /,/,
	        'class-name': /\w+/,
	        operator: /=>/
	      }
	    },
	    property: {
	      pattern:
	        /\b(?:Aggregates|[Ii]nterfaces|Java|Javascript|Jolie|[Ll]ocation|OneWay|[Pp]rotocol|Redirects|RequestResponse)\b(?=[ \t]*:)/
	    }
	  });
	}

	// @ts-nocheck
	jq.displayName = 'jq';
	jq.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function jq(Prism) {
	(function (Prism) {
	    var interpolation = /\\\((?:[^()]|\([^()]*\))*\)/.source;
	    var string = RegExp(
	      /(^|[^\\])"(?:[^"\r\n\\]|\\[^\r\n(]|__)*"/.source.replace(
	        /__/g,
	        function () {
	          return interpolation
	        }
	      )
	    );
	    var stringInterpolation = {
	      interpolation: {
	        pattern: RegExp(/((?:^|[^\\])(?:\\{2})*)/.source + interpolation),
	        lookbehind: true,
	        inside: {
	          content: {
	            pattern: /^(\\\()[\s\S]+(?=\)$)/,
	            lookbehind: true,
	            inside: null // see below
	          },

	          punctuation: /^\\\(|\)$/
	        }
	      }
	    };
	    var jq = (Prism.languages.jq = {
	      comment: /#.*/,
	      property: {
	        pattern: RegExp(string.source + /(?=\s*:(?!:))/.source),
	        lookbehind: true,
	        greedy: true,
	        inside: stringInterpolation
	      },
	      string: {
	        pattern: string,
	        lookbehind: true,
	        greedy: true,
	        inside: stringInterpolation
	      },
	      function: {
	        pattern: /(\bdef\s+)[a-z_]\w+/i,
	        lookbehind: true
	      },
	      variable: /\B\$\w+/,
	      'property-literal': {
	        pattern: /\b[a-z_]\w*(?=\s*:(?!:))/i,
	        alias: 'property'
	      },
	      keyword:
	        /\b(?:as|break|catch|def|elif|else|end|foreach|if|import|include|label|module|modulemeta|null|reduce|then|try|while)\b/,
	      boolean: /\b(?:false|true)\b/,
	      number: /(?:\b\d+\.|\B\.)?\b\d+(?:[eE][+-]?\d+)?\b/,
	      operator: [
	        {
	          pattern: /\|=?/,
	          alias: 'pipe'
	        },
	        /\.\.|[!=<>]?=|\?\/\/|\/\/=?|[-+*/%]=?|[<>?]|\b(?:and|not|or)\b/
	      ],
	      'c-style-function': {
	        pattern: /\b[a-z_]\w*(?=\s*\()/i,
	        alias: 'function'
	      },
	      punctuation: /::|[()\[\]{},:;]|\.(?=\s*[\[\w$])/,
	      dot: {
	        pattern: /\./,
	        alias: 'important'
	      }
	    });
	    stringInterpolation.interpolation.inside.content.inside = jq;
	  })(Prism);
	}

	// @ts-nocheck
	jsTemplates.displayName = 'js-templates';
	jsTemplates.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function jsTemplates(Prism) {
	  Prism.register(javascript)
	  ;(function (Prism) {
	    var templateString = Prism.languages.javascript['template-string'];

	    // see the pattern in prism-javascript.js
	    var templateLiteralPattern = templateString.pattern.source;
	    var interpolationObject = templateString.inside['interpolation'];
	    var interpolationPunctuationObject =
	      interpolationObject.inside['interpolation-punctuation'];
	    var interpolationPattern = interpolationObject.pattern.source;

	    /**
	     * Creates a new pattern to match a template string with a special tag.
	     *
	     * This will return `undefined` if there is no grammar with the given language id.
	     *
	     * @param {string} language The language id of the embedded language. E.g. `markdown`.
	     * @param {string} tag The regex pattern to match the tag.
	     * @returns {object | undefined}
	     * @example
	     * createTemplate('css', /\bcss/.source);
	     */
	    function createTemplate(language, tag) {
	      if (!Prism.languages[language]) {
	        return undefined
	      }
	      return {
	        pattern: RegExp('((?:' + tag + ')\\s*)' + templateLiteralPattern),
	        lookbehind: true,
	        greedy: true,
	        inside: {
	          'template-punctuation': {
	            pattern: /^`|`$/,
	            alias: 'string'
	          },
	          'embedded-code': {
	            pattern: /[\s\S]+/,
	            alias: language
	          }
	        }
	      }
	    }
	    Prism.languages.javascript['template-string'] = [
	      // styled-jsx:
	      //   css`a { color: #25F; }`
	      // styled-components:
	      //   styled.h1`color: red;`
	      createTemplate(
	        'css',
	        /\b(?:styled(?:\([^)]*\))?(?:\s*\.\s*\w+(?:\([^)]*\))*)*|css(?:\s*\.\s*(?:global|resolve))?|createGlobalStyle|keyframes)/
	          .source
	      ),
	      // html`<p></p>`
	      // div.innerHTML = `<p></p>`
	      createTemplate('html', /\bhtml|\.\s*(?:inner|outer)HTML\s*\+?=/.source),
	      // svg`<path fill="#fff" d="M55.37 ..."/>`
	      createTemplate('svg', /\bsvg/.source),
	      // md`# h1`, markdown`## h2`
	      createTemplate('markdown', /\b(?:markdown|md)/.source),
	      // gql`...`, graphql`...`, graphql.experimental`...`
	      createTemplate(
	        'graphql',
	        /\b(?:gql|graphql(?:\s*\.\s*experimental)?)/.source
	      ),
	      // sql`...`
	      createTemplate('sql', /\bsql/.source),
	      // vanilla template string
	      templateString
	    ].filter(Boolean);

	    /**
	     * Returns a specific placeholder literal for the given language.
	     *
	     * @param {number} counter
	     * @param {string} language
	     * @returns {string}
	     */
	    function getPlaceholder(counter, language) {
	      return '___' + language.toUpperCase() + '_' + counter + '___'
	    }

	    /**
	     * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.
	     *
	     * @param {string} code
	     * @param {any} grammar
	     * @param {string} language
	     * @returns {(string|Token)[]}
	     */
	    function tokenizeWithHooks(code, grammar, language) {
	      var env = {
	        code: code,
	        grammar: grammar,
	        language: language
	      };
	      Prism.hooks.run('before-tokenize', env);
	      env.tokens = Prism.tokenize(env.code, env.grammar);
	      Prism.hooks.run('after-tokenize', env);
	      return env.tokens
	    }

	    /**
	     * Returns the token of the given JavaScript interpolation expression.
	     *
	     * @param {string} expression The code of the expression. E.g. `"${42}"`
	     * @returns {Token}
	     */
	    function tokenizeInterpolationExpression(expression) {
	      var tempGrammar = {};
	      tempGrammar['interpolation-punctuation'] = interpolationPunctuationObject;

	      /** @type {Array} */
	      var tokens = Prism.tokenize(expression, tempGrammar);
	      if (tokens.length === 3) {
	        /**
	         * The token array will look like this
	         * [
	         *     ["interpolation-punctuation", "${"]
	         *     "..." // JavaScript expression of the interpolation
	         *     ["interpolation-punctuation", "}"]
	         * ]
	         */

	        var args = [1, 1];
	        args.push.apply(
	          args,
	          tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript')
	        );
	        tokens.splice.apply(tokens, args);
	      }
	      return new Prism.Token(
	        'interpolation',
	        tokens,
	        interpolationObject.alias,
	        expression
	      )
	    }

	    /**
	     * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.
	     *
	     * This function has 3 phases:
	     *
	     * 1. Replace all JavaScript interpolation expression with a placeholder.
	     *    The placeholder will have the syntax of a identify of the target language.
	     * 2. Tokenize the code with placeholders.
	     * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.
	     *    The insertion only works if a placeholder hasn't been "ripped apart" meaning that the placeholder has been
	     *    tokenized as two tokens by the grammar of the embedded language.
	     *
	     * @param {string} code
	     * @param {object} grammar
	     * @param {string} language
	     * @returns {Token}
	     */
	    function tokenizeEmbedded(code, grammar, language) {
	      // 1. First filter out all interpolations

	      // because they might be escaped, we need a lookbehind, so we use Prism
	      /** @type {(Token|string)[]} */
	      var _tokens = Prism.tokenize(code, {
	        interpolation: {
	          pattern: RegExp(interpolationPattern),
	          lookbehind: true
	        }
	      });

	      // replace all interpolations with a placeholder which is not in the code already
	      var placeholderCounter = 0;
	      /** @type {Object<string, string>} */
	      var placeholderMap = {};
	      var embeddedCode = _tokens
	        .map(function (token) {
	          if (typeof token === 'string') {
	            return token
	          } else {
	            var interpolationExpression = token.content;
	            var placeholder;
	            while (
	              code.indexOf(
	                (placeholder = getPlaceholder(placeholderCounter++, language))
	              ) !== -1
	            ) {
	              /* noop */
	            }
	            placeholderMap[placeholder] = interpolationExpression;
	            return placeholder
	          }
	        })
	        .join('');

	      // 2. Tokenize the embedded code

	      var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language);

	      // 3. Re-insert the interpolation

	      var placeholders = Object.keys(placeholderMap);
	      placeholderCounter = 0;

	      /**
	       *
	       * @param {(Token|string)[]} tokens
	       * @returns {void}
	       */
	      function walkTokens(tokens) {
	        for (var i = 0; i < tokens.length; i++) {
	          if (placeholderCounter >= placeholders.length) {
	            return
	          }
	          var token = tokens[i];
	          if (typeof token === 'string' || typeof token.content === 'string') {
	            var placeholder = placeholders[placeholderCounter];
	            var s =
	              typeof token === 'string'
	                ? token
	                : /** @type {string} */ token.content;
	            var index = s.indexOf(placeholder);
	            if (index !== -1) {
	              ++placeholderCounter;
	              var before = s.substring(0, index);
	              var middle = tokenizeInterpolationExpression(
	                placeholderMap[placeholder]
	              );
	              var after = s.substring(index + placeholder.length);
	              var replacement = [];
	              if (before) {
	                replacement.push(before);
	              }
	              replacement.push(middle);
	              if (after) {
	                var afterTokens = [after];
	                walkTokens(afterTokens);
	                replacement.push.apply(replacement, afterTokens);
	              }
	              if (typeof token === 'string') {
	                tokens.splice.apply(tokens, [i, 1].concat(replacement));
	                i += replacement.length - 1;
	              } else {
	                token.content = replacement;
	              }
	            }
	          } else {
	            var content = token.content;
	            if (Array.isArray(content)) {
	              walkTokens(content);
	            } else {
	              walkTokens([content]);
	            }
	          }
	        }
	      }
	      walkTokens(embeddedTokens);
	      return new Prism.Token(
	        language,
	        embeddedTokens,
	        'language-' + language,
	        code
	      )
	    }

	    /**
	     * The languages for which JS templating will handle tagged template literals.
	     *
	     * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.
	     */
	    var supportedLanguages = {
	      javascript: true,
	      js: true,
	      typescript: true,
	      ts: true,
	      jsx: true,
	      tsx: true
	    };
	    Prism.hooks.add('after-tokenize', function (env) {
	      if (!(env.language in supportedLanguages)) {
	        return
	      }

	      /**
	       * Finds and tokenizes all template strings with an embedded languages.
	       *
	       * @param {(Token | string)[]} tokens
	       * @returns {void}
	       */
	      function findTemplateStrings(tokens) {
	        for (var i = 0, l = tokens.length; i < l; i++) {
	          var token = tokens[i];
	          if (typeof token === 'string') {
	            continue
	          }
	          var content = token.content;
	          if (!Array.isArray(content)) {
	            if (typeof content !== 'string') {
	              findTemplateStrings([content]);
	            }
	            continue
	          }
	          if (token.type === 'template-string') {
	            /**
	             * A JavaScript template-string token will look like this:
	             *
	             * ["template-string", [
	             *     ["template-punctuation", "`"],
	             *     (
	             *         An array of "string" and "interpolation" tokens. This is the simple string case.
	             *         or
	             *         ["embedded-code", "..."] This is the token containing the embedded code.
	             *                                  It also has an alias which is the language of the embedded code.
	             *     ),
	             *     ["template-punctuation", "`"]
	             * ]]
	             */

	            var embedded = content[1];
	            if (
	              content.length === 3 &&
	              typeof embedded !== 'string' &&
	              embedded.type === 'embedded-code'
	            ) {
	              // get string content
	              var code = stringContent(embedded);
	              var alias = embedded.alias;
	              var language = Array.isArray(alias) ? alias[0] : alias;
	              var grammar = Prism.languages[language];
	              if (!grammar) {
	                // the embedded language isn't registered.
	                continue
	              }
	              content[1] = tokenizeEmbedded(code, grammar, language);
	            }
	          } else {
	            findTemplateStrings(content);
	          }
	        }
	      }
	      findTemplateStrings(env.tokens);
	    });

	    /**
	     * Returns the string content of a token or token stream.
	     *
	     * @param {string | Token | (string | Token)[]} value
	     * @returns {string}
	     */
	    function stringContent(value) {
	      if (typeof value === 'string') {
	        return value
	      } else if (Array.isArray(value)) {
	        return value.map(stringContent).join('')
	      } else {
	        return stringContent(value.content)
	      }
	    }
	  })(Prism);
	}

	// @ts-nocheck
	jsdoc.displayName = 'jsdoc';
	jsdoc.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function jsdoc(Prism) {
	  Prism.register(javadoclike);
	  Prism.register(javascript);
	  Prism.register(typescript)
	  ;(function (Prism) {
	    var javascript = Prism.languages.javascript;
	    var type = /\{(?:[^{}]|\{(?:[^{}]|\{[^{}]*\})*\})+\}/.source;
	    var parameterPrefix =
	      '(@(?:arg|argument|param|property)\\s+(?:' + type + '\\s+)?)';
	    Prism.languages.jsdoc = Prism.languages.extend('javadoclike', {
	      parameter: {
	        // @param {string} foo - foo bar
	        pattern: RegExp(
	          parameterPrefix + /(?:(?!\s)[$\w\xA0-\uFFFF.])+(?=\s|$)/.source
	        ),
	        lookbehind: true,
	        inside: {
	          punctuation: /\./
	        }
	      }
	    });
	    Prism.languages.insertBefore('jsdoc', 'keyword', {
	      'optional-parameter': {
	        // @param {string} [baz.foo="bar"] foo bar
	        pattern: RegExp(
	          parameterPrefix +
	            /\[(?:(?!\s)[$\w\xA0-\uFFFF.])+(?:=[^[\]]+)?\](?=\s|$)/.source
	        ),
	        lookbehind: true,
	        inside: {
	          parameter: {
	            pattern: /(^\[)[$\w\xA0-\uFFFF\.]+/,
	            lookbehind: true,
	            inside: {
	              punctuation: /\./
	            }
	          },
	          code: {
	            pattern: /(=)[\s\S]*(?=\]$)/,
	            lookbehind: true,
	            inside: javascript,
	            alias: 'language-javascript'
	          },
	          punctuation: /[=[\]]/
	        }
	      },
	      'class-name': [
	        {
	          pattern: RegExp(
	            /(@(?:augments|class|extends|interface|memberof!?|template|this|typedef)\s+(?:<TYPE>\s+)?)[A-Z]\w*(?:\.[A-Z]\w*)*/.source.replace(
	              /<TYPE>/g,
	              function () {
	                return type
	              }
	            )
	          ),
	          lookbehind: true,
	          inside: {
	            punctuation: /\./
	          }
	        },
	        {
	          pattern: RegExp('(@[a-z]+\\s+)' + type),
	          lookbehind: true,
	          inside: {
	            string: javascript.string,
	            number: javascript.number,
	            boolean: javascript.boolean,
	            keyword: Prism.languages.typescript.keyword,
	            operator: /=>|\.\.\.|[&|?:*]/,
	            punctuation: /[.,;=<>{}()[\]]/
	          }
	        }
	      ],
	      example: {
	        pattern:
	          /(@example\s+(?!\s))(?:[^@\s]|\s+(?!\s))+?(?=\s*(?:\*\s*)?(?:@\w|\*\/))/,
	        lookbehind: true,
	        inside: {
	          code: {
	            pattern: /^([\t ]*(?:\*\s*)?)\S.*$/m,
	            lookbehind: true,
	            inside: javascript,
	            alias: 'language-javascript'
	          }
	        }
	      }
	    });
	    Prism.languages.javadoclike.addSupport('javascript', Prism.languages.jsdoc);
	  })(Prism);
	}

	// @ts-nocheck
	n4js.displayName = 'n4js';
	n4js.aliases = ['n4jsd'];

	/** @type {import('../core.js').Syntax} */
	function n4js(Prism) {
	  Prism.register(javascript);
	  Prism.languages.n4js = Prism.languages.extend('javascript', {
	    // Keywords from N4JS language spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html
	    keyword:
	      /\b(?:Array|any|boolean|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|false|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|module|new|null|number|package|private|protected|public|return|set|static|string|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\b/
	  });
	  Prism.languages.insertBefore('n4js', 'constant', {
	    // Annotations in N4JS spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html#_annotations
	    annotation: {
	      pattern: /@+\w+/,
	      alias: 'operator'
	    }
	  });
	  Prism.languages.n4jsd = Prism.languages.n4js;
	}

	// @ts-nocheck
	jsExtras.displayName = 'js-extras';
	jsExtras.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function jsExtras(Prism) {
	  Prism.register(javascript)
	  ;(function (Prism) {
	    Prism.languages.insertBefore('javascript', 'function-variable', {
	      'method-variable': {
	        pattern: RegExp(
	          '(\\.\\s*)' +
	            Prism.languages.javascript['function-variable'].pattern.source
	        ),
	        lookbehind: true,
	        alias: ['function-variable', 'method', 'function', 'property-access']
	      }
	    });
	    Prism.languages.insertBefore('javascript', 'function', {
	      method: {
	        pattern: RegExp(
	          '(\\.\\s*)' + Prism.languages.javascript['function'].source
	        ),
	        lookbehind: true,
	        alias: ['function', 'property-access']
	      }
	    });
	    Prism.languages.insertBefore('javascript', 'constant', {
	      'known-class-name': [
	        {
	          // standard built-ins
	          // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
	          pattern:
	            /\b(?:(?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|(?:Weak)?(?:Map|Set)|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|WebAssembly)\b/,
	          alias: 'class-name'
	        },
	        {
	          // errors
	          pattern: /\b(?:[A-Z]\w*)Error\b/,
	          alias: 'class-name'
	        }
	      ]
	    });

	    /**
	     * Replaces the `<ID>` placeholder in the given pattern with a pattern for general JS identifiers.
	     *
	     * @param {string} source
	     * @param {string} [flags]
	     * @returns {RegExp}
	     */
	    function withId(source, flags) {
	      return RegExp(
	        source.replace(/<ID>/g, function () {
	          return /(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/.source
	        }),
	        flags
	      )
	    }
	    Prism.languages.insertBefore('javascript', 'keyword', {
	      imports: {
	        // https://tc39.es/ecma262/#sec-imports
	        pattern: withId(
	          /(\bimport\b\s*)(?:<ID>(?:\s*,\s*(?:\*\s*as\s+<ID>|\{[^{}]*\}))?|\*\s*as\s+<ID>|\{[^{}]*\})(?=\s*\bfrom\b)/
	            .source
	        ),
	        lookbehind: true,
	        inside: Prism.languages.javascript
	      },
	      exports: {
	        // https://tc39.es/ecma262/#sec-exports
	        pattern: withId(
	          /(\bexport\b\s*)(?:\*(?:\s*as\s+<ID>)?(?=\s*\bfrom\b)|\{[^{}]*\})/
	            .source
	        ),
	        lookbehind: true,
	        inside: Prism.languages.javascript
	      }
	    });
	    Prism.languages.javascript['keyword'].unshift(
	      {
	        pattern: /\b(?:as|default|export|from|import)\b/,
	        alias: 'module'
	      },
	      {
	        pattern:
	          /\b(?:await|break|catch|continue|do|else|finally|for|if|return|switch|throw|try|while|yield)\b/,
	        alias: 'control-flow'
	      },
	      {
	        pattern: /\bnull\b/,
	        alias: ['null', 'nil']
	      },
	      {
	        pattern: /\bundefined\b/,
	        alias: 'nil'
	      }
	    );
	    Prism.languages.insertBefore('javascript', 'operator', {
	      spread: {
	        pattern: /\.{3}/,
	        alias: 'operator'
	      },
	      arrow: {
	        pattern: /=>/,
	        alias: 'operator'
	      }
	    });
	    Prism.languages.insertBefore('javascript', 'punctuation', {
	      'property-access': {
	        pattern: withId(/(\.\s*)#?<ID>/.source),
	        lookbehind: true
	      },
	      'maybe-class-name': {
	        pattern: /(^|[^$\w\xA0-\uFFFF])[A-Z][$\w\xA0-\uFFFF]+/,
	        lookbehind: true
	      },
	      dom: {
	        // this contains only a few commonly used DOM variables
	        pattern:
	          /\b(?:document|(?:local|session)Storage|location|navigator|performance|window)\b/,
	        alias: 'variable'
	      },
	      console: {
	        pattern: /\bconsole(?=\s*\.)/,
	        alias: 'class-name'
	      }
	    });

	    // add 'maybe-class-name' to tokens which might be a class name
	    var maybeClassNameTokens = [
	      'function',
	      'function-variable',
	      'method',
	      'method-variable',
	      'property-access'
	    ];
	    for (var i = 0; i < maybeClassNameTokens.length; i++) {
	      var token = maybeClassNameTokens[i];
	      var value = Prism.languages.javascript[token];

	      // convert regex to object
	      if (Prism.util.type(value) === 'RegExp') {
	        value = Prism.languages.javascript[token] = {
	          pattern: value
	        };
	      }

	      // keep in mind that we don't support arrays

	      var inside = value.inside || {};
	      value.inside = inside;
	      inside['maybe-class-name'] = /^[A-Z][\s\S]*/;
	    }
	  })(Prism);
	}

	// @ts-nocheck
	json5.displayName = 'json5';
	json5.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function json5(Prism) {
	  Prism.register(json)
	  ;(function (Prism) {
	    var string = /("|')(?:\\(?:\r\n?|\n|.)|(?!\1)[^\\\r\n])*\1/;
	    Prism.languages.json5 = Prism.languages.extend('json', {
	      property: [
	        {
	          pattern: RegExp(string.source + '(?=\\s*:)'),
	          greedy: true
	        },
	        {
	          pattern:
	            /(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/,
	          alias: 'unquoted'
	        }
	      ],
	      string: {
	        pattern: string,
	        greedy: true
	      },
	      number:
	        /[+-]?\b(?:NaN|Infinity|0x[a-fA-F\d]+)\b|[+-]?(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[eE][+-]?\d+\b)?/
	    });
	  })(Prism);
	}

	// @ts-nocheck
	jsonp.displayName = 'jsonp';
	jsonp.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function jsonp(Prism) {
	  Prism.register(json);
	  Prism.languages.jsonp = Prism.languages.extend('json', {
	    punctuation: /[{}[\]();,.]/
	  });
	  Prism.languages.insertBefore('jsonp', 'punctuation', {
	    function: /(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*\()/
	  });
	}

	// @ts-nocheck
	jsstacktrace.displayName = 'jsstacktrace';
	jsstacktrace.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function jsstacktrace(Prism) {
	  Prism.languages.jsstacktrace = {
	    'error-message': {
	      pattern: /^\S.*/m,
	      alias: 'string'
	    },
	    'stack-frame': {
	      pattern: /(^[ \t]+)at[ \t].*/m,
	      lookbehind: true,
	      inside: {
	        'not-my-code': {
	          pattern:
	            /^at[ \t]+(?!\s)(?:node\.js|<unknown>|.*(?:node_modules|\(<anonymous>\)|\(<unknown>|<anonymous>$|\(internal\/|\(node\.js)).*/m,
	          alias: 'comment'
	        },
	        filename: {
	          pattern: /(\bat\s+(?!\s)|\()(?:[a-zA-Z]:)?[^():]+(?=:)/,
	          lookbehind: true,
	          alias: 'url'
	        },
	        function: {
	          pattern:
	            /(\bat\s+(?:new\s+)?)(?!\s)[_$a-zA-Z\xA0-\uFFFF<][.$\w\xA0-\uFFFF<>]*/,
	          lookbehind: true,
	          inside: {
	            punctuation: /\./
	          }
	        },
	        punctuation: /[()]/,
	        keyword: /\b(?:at|new)\b/,
	        alias: {
	          pattern: /\[(?:as\s+)?(?!\s)[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*\]/,
	          alias: 'variable'
	        },
	        'line-number': {
	          pattern: /:\d+(?::\d+)?\b/,
	          alias: 'number',
	          inside: {
	            punctuation: /:/
	          }
	        }
	      }
	    }
	  };
	}

	// @ts-nocheck
	julia.displayName = 'julia';
	julia.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function julia(Prism) {
	  Prism.languages.julia = {
	    comment: {
	      // support one level of nested comments
	      // https://github.com/JuliaLang/julia/pull/6128
	      pattern:
	        /(^|[^\\])(?:#=(?:[^#=]|=(?!#)|#(?!=)|#=(?:[^#=]|=(?!#)|#(?!=))*=#)*=#|#.*)/,
	      lookbehind: true
	    },
	    regex: {
	      // https://docs.julialang.org/en/v1/manual/strings/#Regular-Expressions-1
	      pattern: /r"(?:\\.|[^"\\\r\n])*"[imsx]{0,4}/,
	      greedy: true
	    },
	    string: {
	      // https://docs.julialang.org/en/v1/manual/strings/#String-Basics-1
	      // https://docs.julialang.org/en/v1/manual/strings/#non-standard-string-literals-1
	      // https://docs.julialang.org/en/v1/manual/running-external-programs/#Running-External-Programs-1
	      pattern:
	        /"""[\s\S]+?"""|(?:\b\w+)?"(?:\\.|[^"\\\r\n])*"|`(?:[^\\`\r\n]|\\.)*`/,
	      greedy: true
	    },
	    char: {
	      // https://docs.julialang.org/en/v1/manual/strings/#man-characters-1
	      pattern: /(^|[^\w'])'(?:\\[^\r\n][^'\r\n]*|[^\\\r\n])'/,
	      lookbehind: true,
	      greedy: true
	    },
	    keyword:
	      /\b(?:abstract|baremodule|begin|bitstype|break|catch|ccall|const|continue|do|else|elseif|end|export|finally|for|function|global|if|immutable|import|importall|in|let|local|macro|module|print|println|quote|return|struct|try|type|typealias|using|while)\b/,
	    boolean: /\b(?:false|true)\b/,
	    number:
	      /(?:\b(?=\d)|\B(?=\.))(?:0[box])?(?:[\da-f]+(?:_[\da-f]+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[efp][+-]?\d+(?:_\d+)*)?j?/i,
	    // https://docs.julialang.org/en/v1/manual/mathematical-operations/
	    // https://docs.julialang.org/en/v1/manual/mathematical-operations/#Operator-Precedence-and-Associativity-1
	    operator:
	      /&&|\|\||[-+*^%÷⊻&$\\]=?|\/[\/=]?|!=?=?|\|[=>]?|<(?:<=?|[=:|])?|>(?:=|>>?=?)?|==?=?|[~≠≤≥'√∛]/,
	    punctuation: /::?|[{}[\]();,.?]/,
	    // https://docs.julialang.org/en/v1/base/numbers/#Base.im
	    constant: /\b(?:(?:Inf|NaN)(?:16|32|64)?|im|pi)\b|[πℯ]/
	  };
	}

	// @ts-nocheck
	keepalived.displayName = 'keepalived';
	keepalived.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function keepalived(Prism) {
	  Prism.languages.keepalived = {
	    comment: {
	      pattern: /[#!].*/,
	      greedy: true
	    },
	    string: {
	      pattern:
	        /(^|[^\\])(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/,
	      lookbehind: true,
	      greedy: true
	    },
	    // support IPv4, IPv6, subnet mask
	    ip: {
	      pattern: RegExp(
	        /\b(?:(?:(?:[\da-f]{1,4}:){7}[\da-f]{1,4}|(?:[\da-f]{1,4}:){6}:[\da-f]{1,4}|(?:[\da-f]{1,4}:){5}:(?:[\da-f]{1,4}:)?[\da-f]{1,4}|(?:[\da-f]{1,4}:){4}:(?:[\da-f]{1,4}:){0,2}[\da-f]{1,4}|(?:[\da-f]{1,4}:){3}:(?:[\da-f]{1,4}:){0,3}[\da-f]{1,4}|(?:[\da-f]{1,4}:){2}:(?:[\da-f]{1,4}:){0,4}[\da-f]{1,4}|(?:[\da-f]{1,4}:){6}<ipv4>|(?:[\da-f]{1,4}:){0,5}:<ipv4>|::(?:[\da-f]{1,4}:){0,5}<ipv4>|[\da-f]{1,4}::(?:[\da-f]{1,4}:){0,5}[\da-f]{1,4}|::(?:[\da-f]{1,4}:){0,6}[\da-f]{1,4}|(?:[\da-f]{1,4}:){1,7}:)(?:\/\d{1,3})?|<ipv4>(?:\/\d{1,2})?)\b/.source.replace(
	          /<ipv4>/g,
	          function () {
	            return /(?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)\.){3}(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d))/
	              .source
	          }
	        ),
	        'i'
	      ),
	      alias: 'number'
	    },
	    // support *nix / Windows, directory / file
	    path: {
	      pattern:
	        /(\s)\/(?:[^\/\s]+\/)*[^\/\s]*|\b[a-zA-Z]:\\(?:[^\\\s]+\\)*[^\\\s]*/,
	      lookbehind: true,
	      alias: 'string'
	    },
	    variable: /\$\{?\w+\}?/,
	    email: {
	      pattern: /[\w-]+@[\w-]+(?:\.[\w-]{2,3}){1,2}/,
	      alias: 'string'
	    },
	    'conditional-configuration': {
	      pattern: /@\^?[\w-]+/,
	      alias: 'variable'
	    },
	    operator: /=/,
	    property:
	      /\b(?:BFD_CHECK|DNS_CHECK|FILE_CHECK|HTTP_GET|MISC_CHECK|NAME|PING_CHECK|SCRIPTS|SMTP_CHECK|SSL|SSL_GET|TCP_CHECK|UDP_CHECK|accept|advert_int|alpha|auth_pass|auth_type|authentication|bfd_cpu_affinity|bfd_instance|bfd_no_swap|bfd_priority|bfd_process_name|bfd_rlimit_rttime|bfd_rt_priority|bind_if|bind_port|bindto|ca|certificate|check_unicast_src|checker|checker_cpu_affinity|checker_log_all_failures|checker_no_swap|checker_priority|checker_rlimit_rttime|checker_rt_priority|child_wait_time|connect_ip|connect_port|connect_timeout|dbus_service_name|debug|default_interface|delay|delay_before_retry|delay_loop|digest|dont_track_primary|dynamic|dynamic_interfaces|enable_(?:dbus|script_security|sni|snmp_checker|snmp_rfc|snmp_rfcv2|snmp_rfcv3|snmp_vrrp|traps)|end|fall|fast_recovery|file|flag-[123]|fork_delay|full_command|fwmark|garp_group|garp_interval|garp_lower_prio_delay|garp_lower_prio_repeat|garp_master_delay|garp_master_refresh|garp_master_refresh_repeat|garp_master_repeat|global_defs|global_tracking|gna_interval|group|ha_suspend|hashed|helo_name|higher_prio_send_advert|hoplimit|http_protocol|hysteresis|idle_tx|include|inhibit_on_failure|init_fail|init_file|instance|interface|interfaces|interval|ip_family|ipvs_process_name|keepalived.conf|kernel_rx_buf_size|key|linkbeat_interfaces|linkbeat_use_polling|log_all_failures|log_unknown_vrids|lower_prio_no_advert|lthreshold|lvs_flush|lvs_flush_onstop|lvs_method|lvs_netlink_cmd_rcv_bufs|lvs_netlink_cmd_rcv_bufs_force|lvs_netlink_monitor_rcv_bufs|lvs_netlink_monitor_rcv_bufs_force|lvs_notify_fifo|lvs_notify_fifo_script|lvs_sched|lvs_sync_daemon|max_auto_priority|max_hops|mcast_src_ip|mh-fallback|mh-port|min_auto_priority_delay|min_rx|min_tx|misc_dynamic|misc_path|misc_timeout|multiplier|name|namespace_with_ipsets|native_ipv6|neighbor_ip|net_namespace|net_namespace_ipvs|nftables|nftables_counters|nftables_ifindex|nftables_priority|no_accept|no_checker_emails|no_email_faults|nopreempt|notification_email|notification_email_from|notify|notify_backup|notify_deleted|notify_down|notify_fault|notify_fifo|notify_fifo_script|notify_master|notify_master_rx_lower_pri|notify_priority_changes|notify_stop|notify_up|old_unicast_checksum|omega|ops|param_match|passive|password|path|persistence_engine|persistence_granularity|persistence_timeout|preempt|preempt_delay|priority|process|process_monitor_rcv_bufs|process_monitor_rcv_bufs_force|process_name|process_names|promote_secondaries|protocol|proxy_arp|proxy_arp_pvlan|quorum|quorum_down|quorum_max|quorum_up|random_seed|real_server|regex|regex_max_offset|regex_min_offset|regex_no_match|regex_options|regex_stack|reload_repeat|reload_time_file|require_reply|retry|rise|router_id|rs_init_notifies|script|script_user|sh-fallback|sh-port|shutdown_script|shutdown_script_timeout|skip_check_adv_addr|smtp_alert|smtp_alert_checker|smtp_alert_vrrp|smtp_connect_timeout|smtp_helo_name|smtp_server|snmp_socket|sorry_server|sorry_server_inhibit|sorry_server_lvs_method|source_ip|start|startup_script|startup_script_timeout|state|static_ipaddress|static_routes|static_rules|status_code|step|strict_mode|sync_group_tracking_weight|terminate_delay|timeout|track_bfd|track_file|track_group|track_interface|track_process|track_script|track_src_ip|ttl|type|umask|unicast_peer|unicast_src_ip|unicast_ttl|url|use_ipvlan|use_pid_dir|use_vmac|user|uthreshold|val[123]|version|virtual_ipaddress|virtual_ipaddress_excluded|virtual_router_id|virtual_routes|virtual_rules|virtual_server|virtual_server_group|virtualhost|vmac_xmit_base|vrrp|vrrp_(?:check_unicast_src|cpu_affinity|garp_interval|garp_lower_prio_delay|garp_lower_prio_repeat|garp_master_delay|garp_master_refresh|garp_master_refresh_repeat|garp_master_repeat|gna_interval|higher_prio_send_advert|instance|ipsets|iptables|lower_prio_no_advert|mcast_group4|mcast_group6|min_garp|netlink_cmd_rcv_bufs|netlink_cmd_rcv_bufs_force|netlink_monitor_rcv_bufs|netlink_monitor_rcv_bufs_force|no_swap|notify_fifo|notify_fifo_script|notify_priority_changes|priority|process_name|rlimit_rttime|rt_priority|rx_bufs_multiplier|rx_bufs_policy|script|skip_check_adv_addr|startup_delay|strict|sync_group|track_process|version)|warmup|weight)\b/,
	    constant:
	      /\b(?:A|AAAA|AH|BACKUP|CNAME|DR|MASTER|MX|NAT|NS|PASS|SCTP|SOA|TCP|TUN|TXT|UDP|dh|fo|lblc|lblcr|lc|mh|nq|ovf|rr|sed|sh|wlc|wrr)\b/,
	    number: {
	      pattern: /(^|[^\w.-])-?\d+(?:\.\d+)?/,
	      lookbehind: true
	    },
	    boolean: /\b(?:false|no|off|on|true|yes)\b/,
	    punctuation: /[\{\}]/
	  };
	}

	// @ts-nocheck
	keyman.displayName = 'keyman';
	keyman.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function keyman(Prism) {
	  Prism.languages.keyman = {
	    comment: {
	      pattern: /\bc .*/i,
	      greedy: true
	    },
	    string: {
	      pattern: /"[^"\r\n]*"|'[^'\r\n]*'/,
	      greedy: true
	    },
	    'virtual-key': {
	      pattern:
	        /\[\s*(?:(?:ALT|CAPS|CTRL|LALT|LCTRL|NCAPS|RALT|RCTRL|SHIFT)\s+)*(?:[TKU]_[\w?]+|[A-E]\d\d?|"[^"\r\n]*"|'[^'\r\n]*')\s*\]/i,
	      greedy: true,
	      alias: 'function' // alias for styles
	    },

	    // https://help.keyman.com/developer/language/guide/headers
	    'header-keyword': {
	      pattern: /&\w+/,
	      alias: 'bold' // alias for styles
	    },

	    'header-statement': {
	      pattern:
	        /\b(?:bitmap|bitmaps|caps always off|caps on only|copyright|hotkey|language|layout|message|name|shift frees caps|version)\b/i,
	      alias: 'bold' // alias for styles
	    },

	    'rule-keyword': {
	      pattern:
	        /\b(?:any|baselayout|beep|call|context|deadkey|dk|if|index|layer|notany|nul|outs|platform|reset|return|save|set|store|use)\b/i,
	      alias: 'keyword'
	    },
	    'structural-keyword': {
	      pattern:
	        /\b(?:ansi|begin|group|match|newcontext|nomatch|postkeystroke|readonly|unicode|using keys)\b/i,
	      alias: 'keyword'
	    },
	    'compile-target': {
	      pattern: /\$(?:keyman|keymanonly|keymanweb|kmfl|weaver):/i,
	      alias: 'property'
	    },
	    // U+####, x###, d### characters and numbers
	    number: /\b(?:U\+[\dA-F]+|d\d+|x[\da-f]+|\d+)\b/i,
	    operator: /[+>\\$]|\.\./,
	    punctuation: /[()=,]/
	  };
	}

	// @ts-nocheck
	kumir.displayName = 'kumir';
	kumir.aliases = ['kum'];

	/** @type {import('../core.js').Syntax} */
	function kumir(Prism) {
	(function (Prism) {
	    /**
	     * Regular expression for characters that are not allowed in identifiers.
	     *
	     * @type {string}
	     */
	    var nonId = /\s\x00-\x1f\x22-\x2f\x3a-\x3f\x5b-\x5e\x60\x7b-\x7e/.source;

	    /**
	     * Surround a regular expression for IDs with patterns for non-ID sequences.
	     *
	     * @param {string} pattern A regular expression for identifiers.
	     * @param {string} [flags] The regular expression flags.
	     * @returns {RegExp} A wrapped regular expression for identifiers.
	     */
	    function wrapId(pattern, flags) {
	      return RegExp(pattern.replace(/<nonId>/g, nonId), flags)
	    }
	    Prism.languages.kumir = {
	      comment: {
	        pattern: /\|.*/
	      },
	      prolog: {
	        pattern: /#.*/,
	        greedy: true
	      },
	      string: {
	        pattern: /"[^\n\r"]*"|'[^\n\r']*'/,
	        greedy: true
	      },
	      boolean: {
	        pattern: wrapId(/(^|[<nonId>])(?:да|нет)(?=[<nonId>]|$)/.source),
	        lookbehind: true
	      },
	      'operator-word': {
	        pattern: wrapId(/(^|[<nonId>])(?:и|или|не)(?=[<nonId>]|$)/.source),
	        lookbehind: true,
	        alias: 'keyword'
	      },
	      'system-variable': {
	        pattern: wrapId(/(^|[<nonId>])знач(?=[<nonId>]|$)/.source),
	        lookbehind: true,
	        alias: 'keyword'
	      },
	      type: [
	        {
	          pattern: wrapId(
	            /(^|[<nonId>])(?:вещ|лит|лог|сим|цел)(?:\x20*таб)?(?=[<nonId>]|$)/
	              .source
	          ),
	          lookbehind: true,
	          alias: 'builtin'
	        },
	        {
	          pattern: wrapId(
	            /(^|[<nonId>])(?:компл|сканкод|файл|цвет)(?=[<nonId>]|$)/.source
	          ),
	          lookbehind: true,
	          alias: 'important'
	        }
	      ],
	      /**
	       * Should be performed after searching for type names because of "таб".
	       * "таб" is a reserved word, but never used without a preceding type name.
	       * "НАЗНАЧИТЬ", "Фввод", and "Фвывод" are not reserved words.
	       */
	      keyword: {
	        pattern: wrapId(
	          /(^|[<nonId>])(?:алг|арг(?:\x20*рез)?|ввод|ВКЛЮЧИТЬ|вс[её]|выбор|вывод|выход|дано|для|до|дс|если|иначе|исп|использовать|кон(?:(?:\x20+|_)исп)?|кц(?:(?:\x20+|_)при)?|надо|нач|нс|нц|от|пауза|пока|при|раза?|рез|стоп|таб|то|утв|шаг)(?=[<nonId>]|$)/
	            .source
	        ),
	        lookbehind: true
	      },
	      /** Should be performed after searching for reserved words. */
	      name: {
	        // eslint-disable-next-line regexp/no-super-linear-backtracking
	        pattern: wrapId(
	          /(^|[<nonId>])[^\d<nonId>][^<nonId>]*(?:\x20+[^<nonId>]+)*(?=[<nonId>]|$)/
	            .source
	        ),
	        lookbehind: true
	      },
	      /** Should be performed after searching for names. */
	      number: {
	        pattern: wrapId(
	          /(^|[<nonId>])(?:\B\$[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)(?=[<nonId>]|$)/
	            .source,
	          'i'
	        ),
	        lookbehind: true
	      },
	      /** Should be performed after searching for words. */
	      punctuation: /:=|[(),:;\[\]]/,
	      /**
	       * Should be performed after searching for
	       * - numeric constants (because of "+" and "-");
	       * - punctuation marks (because of ":=" and "=").
	       */
	      'operator-char': {
	        pattern: /\*\*?|<[=>]?|>=?|[-+/=]/,
	        alias: 'operator'
	      }
	    };
	    Prism.languages.kum = Prism.languages.kumir;
	  })(Prism);
	}

	// @ts-nocheck
	kusto.displayName = 'kusto';
	kusto.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function kusto(Prism) {
	  Prism.languages.kusto = {
	    comment: {
	      pattern: /\/\/.*/,
	      greedy: true
	    },
	    string: {
	      pattern:
	        /```[\s\S]*?```|[hH]?(?:"(?:[^\r\n\\"]|\\.)*"|'(?:[^\r\n\\']|\\.)*'|@(?:"[^\r\n"]*"|'[^\r\n']*'))/,
	      greedy: true
	    },
	    verb: {
	      pattern: /(\|\s*)[a-z][\w-]*/i,
	      lookbehind: true,
	      alias: 'keyword'
	    },
	    command: {
	      pattern: /\.[a-z][a-z\d-]*\b/,
	      alias: 'keyword'
	    },
	    'class-name':
	      /\b(?:bool|datetime|decimal|dynamic|guid|int|long|real|string|timespan)\b/,
	    keyword:
	      /\b(?:access|alias|and|anti|as|asc|auto|between|by|(?:contains|(?:ends|starts)with|has(?:perfix|suffix)?)(?:_cs)?|database|declare|desc|external|from|fullouter|has_all|in|ingestion|inline|inner|innerunique|into|(?:left|right)(?:anti(?:semi)?|inner|outer|semi)?|let|like|local|not|of|on|or|pattern|print|query_parameters|range|restrict|schema|set|step|table|tables|to|view|where|with|matches\s+regex|nulls\s+(?:first|last))(?![\w-])/,
	    boolean: /\b(?:false|null|true)\b/,
	    function: /\b[a-z_]\w*(?=\s*\()/,
	    datetime: [
	      {
	        // RFC 822 + RFC 850
	        pattern:
	          /\b(?:(?:Fri|Friday|Mon|Monday|Sat|Saturday|Sun|Sunday|Thu|Thursday|Tue|Tuesday|Wed|Wednesday)\s*,\s*)?\d{1,2}(?:\s+|-)(?:Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep)(?:\s+|-)\d{2}\s+\d{2}:\d{2}(?::\d{2})?(?:\s*(?:\b(?:[A-Z]|(?:[ECMT][DS]|GM|U)T)|[+-]\d{4}))?\b/,
	        alias: 'number'
	      },
	      {
	        // ISO 8601
	        pattern:
	          /[+-]?\b(?:\d{4}-\d{2}-\d{2}(?:[ T]\d{2}:\d{2}(?::\d{2}(?:\.\d+)?)?)?|\d{2}:\d{2}(?::\d{2}(?:\.\d+)?)?)Z?/,
	        alias: 'number'
	      }
	    ],
	    number:
	      /\b(?:0x[0-9A-Fa-f]+|\d+(?:\.\d+)?(?:[Ee][+-]?\d+)?)(?:(?:min|sec|[mnµ]s|[dhms]|microsecond|tick)\b)?|[+-]?\binf\b/,
	    operator: /=>|[!=]~|[!=<>]=?|[-+*/%|]|\.\./,
	    punctuation: /[()\[\]{},;.:]/
	  };
	}

	// @ts-nocheck
	latex.displayName = 'latex';
	latex.aliases = ['context', 'tex'];

	/** @type {import('../core.js').Syntax} */
	function latex(Prism) {
	(function (Prism) {
	    var funcPattern = /\\(?:[^a-z()[\]]|[a-z*]+)/i;
	    var insideEqu = {
	      'equation-command': {
	        pattern: funcPattern,
	        alias: 'regex'
	      }
	    };
	    Prism.languages.latex = {
	      comment: /%.*/,
	      // the verbatim environment prints whitespace to the document
	      cdata: {
	        pattern:
	          /(\\begin\{((?:lstlisting|verbatim)\*?)\})[\s\S]*?(?=\\end\{\2\})/,
	        lookbehind: true
	      },
	      /*
	       * equations can be between $$ $$ or $ $ or \( \) or \[ \]
	       * (all are multiline)
	       */
	      equation: [
	        {
	          pattern:
	            /\$\$(?:\\[\s\S]|[^\\$])+\$\$|\$(?:\\[\s\S]|[^\\$])+\$|\\\([\s\S]*?\\\)|\\\[[\s\S]*?\\\]/,
	          inside: insideEqu,
	          alias: 'string'
	        },
	        {
	          pattern:
	            /(\\begin\{((?:align|eqnarray|equation|gather|math|multline)\*?)\})[\s\S]*?(?=\\end\{\2\})/,
	          lookbehind: true,
	          inside: insideEqu,
	          alias: 'string'
	        }
	      ],
	      /*
	       * arguments which are keywords or references are highlighted
	       * as keywords
	       */
	      keyword: {
	        pattern:
	          /(\\(?:begin|cite|documentclass|end|label|ref|usepackage)(?:\[[^\]]+\])?\{)[^}]+(?=\})/,
	        lookbehind: true
	      },
	      url: {
	        pattern: /(\\url\{)[^}]+(?=\})/,
	        lookbehind: true
	      },
	      /*
	       * section or chapter headlines are highlighted as bold so that
	       * they stand out more
	       */
	      headline: {
	        pattern:
	          /(\\(?:chapter|frametitle|paragraph|part|section|subparagraph|subsection|subsubparagraph|subsubsection|subsubsubparagraph)\*?(?:\[[^\]]+\])?\{)[^}]+(?=\})/,
	        lookbehind: true,
	        alias: 'class-name'
	      },
	      function: {
	        pattern: funcPattern,
	        alias: 'selector'
	      },
	      punctuation: /[[\]{}&]/
	    };
	    Prism.languages.tex = Prism.languages.latex;
	    Prism.languages.context = Prism.languages.latex;
	  })(Prism);
	}

	// @ts-nocheck
	latte.displayName = 'latte';
	latte.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function latte(Prism) {
	  Prism.register(clike);
	  Prism.register(markupTemplating);
	  Prism.register(php)
	  ;(function (Prism) {
	    Prism.languages.latte = {
	      comment: /^\{\*[\s\S]*/,
	      'latte-tag': {
	        // https://latte.nette.org/en/tags
	        pattern: /(^\{(?:\/(?=[a-z]))?)(?:[=_]|[a-z]\w*\b(?!\())/i,
	        lookbehind: true,
	        alias: 'important'
	      },
	      delimiter: {
	        pattern: /^\{\/?|\}$/,
	        alias: 'punctuation'
	      },
	      php: {
	        pattern: /\S(?:[\s\S]*\S)?/,
	        alias: 'language-php',
	        inside: Prism.languages.php
	      }
	    };
	    var markupLatte = Prism.languages.extend('markup', {});
	    Prism.languages.insertBefore(
	      'inside',
	      'attr-value',
	      {
	        'n-attr': {
	          pattern: /n:[\w-]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+))?/,
	          inside: {
	            'attr-name': {
	              pattern: /^[^\s=]+/,
	              alias: 'important'
	            },
	            'attr-value': {
	              pattern: /=[\s\S]+/,
	              inside: {
	                punctuation: [
	                  /^=/,
	                  {
	                    pattern: /^(\s*)["']|["']$/,
	                    lookbehind: true
	                  }
	                ],
	                php: {
	                  pattern: /\S(?:[\s\S]*\S)?/,
	                  inside: Prism.languages.php
	                }
	              }
	            }
	          }
	        }
	      },
	      markupLatte.tag
	    );
	    Prism.hooks.add('before-tokenize', function (env) {
	      if (env.language !== 'latte') {
	        return
	      }
	      var lattePattern =
	        /\{\*[\s\S]*?\*\}|\{[^'"\s{}*](?:[^"'/{}]|\/(?![*/])|("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|\/\*(?:[^*]|\*(?!\/))*\*\/)*\}/g;
	      Prism.languages['markup-templating'].buildPlaceholders(
	        env,
	        'latte',
	        lattePattern
	      );
	      env.grammar = markupLatte;
	    });
	    Prism.hooks.add('after-tokenize', function (env) {
	      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'latte');
	    });
	  })(Prism);
	}

	// @ts-nocheck
	scheme.displayName = 'scheme';
	scheme.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function scheme(Prism) {
	(function (Prism) {
	    Prism.languages.scheme = {
	      // this supports "normal" single-line comments:
	      //   ; comment
	      // and (potentially nested) multiline comments:
	      //   #| comment #| nested |# still comment |#
	      // (only 1 level of nesting is supported)
	      comment:
	        /;.*|#;\s*(?:\((?:[^()]|\([^()]*\))*\)|\[(?:[^\[\]]|\[[^\[\]]*\])*\])|#\|(?:[^#|]|#(?!\|)|\|(?!#)|#\|(?:[^#|]|#(?!\|)|\|(?!#))*\|#)*\|#/,
	      string: {
	        pattern: /"(?:[^"\\]|\\.)*"/,
	        greedy: true
	      },
	      symbol: {
	        pattern: /'[^()\[\]#'\s]+/,
	        greedy: true
	      },
	      char: {
	        pattern:
	          /#\\(?:[ux][a-fA-F\d]+\b|[-a-zA-Z]+\b|[\uD800-\uDBFF][\uDC00-\uDFFF]|\S)/,
	        greedy: true
	      },
	      'lambda-parameter': [
	        // https://www.cs.cmu.edu/Groups/AI/html/r4rs/r4rs_6.html#SEC30
	        {
	          pattern:
	            /((?:^|[^'`#])[(\[]lambda\s+)(?:[^|()\[\]'\s]+|\|(?:[^\\|]|\\.)*\|)/,
	          lookbehind: true
	        },
	        {
	          pattern: /((?:^|[^'`#])[(\[]lambda\s+[(\[])[^()\[\]']+/,
	          lookbehind: true
	        }
	      ],
	      keyword: {
	        pattern:
	          /((?:^|[^'`#])[(\[])(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|except|export|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\*)?|let\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\[\]\s]|$)/,
	        lookbehind: true
	      },
	      builtin: {
	        // all functions of the base library of R7RS plus some of built-ins of R5Rs
	        pattern:
	          /((?:^|[^'`#])[(\[])(?:abs|and|append|apply|assoc|ass[qv]|binary-port\?|boolean=?\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\?|\?|<\?|<=\?|=\?|>\?|>=\?)|close-(?:input-port|output-port|port)|complex\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\??|eq\?|equal\?|eqv\?|error|error-object(?:-irritants|-message|\?)|eval|even\?|exact(?:-integer-sqrt|-integer\?|\?)?|expt|features|file-error\?|floor(?:-quotient|-remainder|\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\??|input-port(?:-open\?|\?)|integer(?:->char|\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\?|newline|not|null\?|number(?:->string|\?)|numerator|odd\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\?|\?)|pair\?|peek-char|peek-u8|port\?|positive\?|procedure\?|quotient|raise|raise-continuable|rational\?|rationalize|read-(?:bytevector|bytevector!|char|error\?|line|string|u8)|real\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\?|<\?|<=\?|=\?|>\?|>=\?)?|substring|symbol(?:->string|\?|=\?)|syntax-error|textual-port\?|truncate(?:-quotient|-remainder|\/)?|u8-ready\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\?)(?=[()\[\]\s]|$)/,
	        lookbehind: true
	      },
	      operator: {
	        pattern: /((?:^|[^'`#])[(\[])(?:[-+*%/]|[<>]=?|=>?)(?=[()\[\]\s]|$)/,
	        lookbehind: true
	      },
	      number: {
	        // The number pattern from [the R7RS spec](https://small.r7rs.org/attachment/r7rs.pdf).
	        //
	        // <number>      := <num 2>|<num 8>|<num 10>|<num 16>
	        // <num R>       := <prefix R><complex R>
	        // <complex R>   := <real R>(?:@<real R>|<imaginary R>)?|<imaginary R>
	        // <imaginary R> := [+-](?:<ureal R>|(?:inf|nan)\.0)?i
	        // <real R>      := [+-]?<ureal R>|[+-](?:inf|nan)\.0
	        // <ureal R>     := <uint R>(?:\/<uint R>)?
	        //                | <decimal R>
	        //
	        // <decimal 10>  := (?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?
	        // <uint R>      := <digit R>+
	        // <prefix R>    := <radix R>(?:#[ei])?|(?:#[ei])?<radix R>
	        // <radix 2>     := #b
	        // <radix 8>     := #o
	        // <radix 10>    := (?:#d)?
	        // <radix 16>    := #x
	        // <digit 2>     := [01]
	        // <digit 8>     := [0-7]
	        // <digit 10>    := \d
	        // <digit 16>    := [0-9a-f]
	        //
	        // The problem with this grammar is that the resulting regex is way to complex, so we simplify by grouping all
	        // non-decimal bases together. This results in a decimal (dec) and combined binary, octal, and hexadecimal (box)
	        // pattern:
	        pattern: RegExp(
	          SortedBNF({
	            '<ureal dec>':
	              /\d+(?:\/\d+)|(?:\d+(?:\.\d*)?|\.\d+)(?:[esfdl][+-]?\d+)?/.source,
	            '<real dec>': /[+-]?<ureal dec>|[+-](?:inf|nan)\.0/.source,
	            '<imaginary dec>': /[+-](?:<ureal dec>|(?:inf|nan)\.0)?i/.source,
	            '<complex dec>':
	              /<real dec>(?:@<real dec>|<imaginary dec>)?|<imaginary dec>/
	                .source,
	            '<num dec>': /(?:#d(?:#[ei])?|#[ei](?:#d)?)?<complex dec>/.source,
	            '<ureal box>': /[0-9a-f]+(?:\/[0-9a-f]+)?/.source,
	            '<real box>': /[+-]?<ureal box>|[+-](?:inf|nan)\.0/.source,
	            '<imaginary box>': /[+-](?:<ureal box>|(?:inf|nan)\.0)?i/.source,
	            '<complex box>':
	              /<real box>(?:@<real box>|<imaginary box>)?|<imaginary box>/
	                .source,
	            '<num box>': /#[box](?:#[ei])?|(?:#[ei])?#[box]<complex box>/
	              .source,
	            '<number>': /(^|[()\[\]\s])(?:<num dec>|<num box>)(?=[()\[\]\s]|$)/
	              .source
	          }),
	          'i'
	        ),
	        lookbehind: true
	      },
	      boolean: {
	        pattern: /(^|[()\[\]\s])#(?:[ft]|false|true)(?=[()\[\]\s]|$)/,
	        lookbehind: true
	      },
	      function: {
	        pattern:
	          /((?:^|[^'`#])[(\[])(?:[^|()\[\]'\s]+|\|(?:[^\\|]|\\.)*\|)(?=[()\[\]\s]|$)/,
	        lookbehind: true
	      },
	      identifier: {
	        pattern: /(^|[()\[\]\s])\|(?:[^\\|]|\\.)*\|(?=[()\[\]\s]|$)/,
	        lookbehind: true,
	        greedy: true
	      },
	      punctuation: /[()\[\]']/
	    };

	    /**
	     * Given a topologically sorted BNF grammar, this will return the RegExp source of last rule of the grammar.
	     *
	     * @param {Record<string, string>} grammar
	     * @returns {string}
	     */
	    function SortedBNF(grammar) {
	      for (var key in grammar) {
	        grammar[key] = grammar[key].replace(/<[\w\s]+>/g, function (key) {
	          return '(?:' + grammar[key].trim() + ')'
	        });
	      }
	      // return the last item
	      return grammar[key]
	    }
	  })(Prism);
	}

	// @ts-nocheck
	lilypond.displayName = 'lilypond';
	lilypond.aliases = ['ly'];

	/** @type {import('../core.js').Syntax} */
	function lilypond(Prism) {
	  Prism.register(scheme)
	  ;(function (Prism) {
	    var schemeExpression =
	      /\((?:[^();"#\\]|\\[\s\S]|;.*(?!.)|"(?:[^"\\]|\\.)*"|#(?:\{(?:(?!#\})[\s\S])*#\}|[^{])|<expr>)*\)/
	        .source;
	    // allow for up to pow(2, recursivenessLog2) many levels of recursive brace expressions
	    // For some reason, this can't be 4
	    var recursivenessLog2 = 5;
	    for (var i = 0; i < recursivenessLog2; i++) {
	      schemeExpression = schemeExpression.replace(/<expr>/g, function () {
	        return schemeExpression
	      });
	    }
	    schemeExpression = schemeExpression.replace(/<expr>/g, /[^\s\S]/.source);
	    var lilypond = (Prism.languages.lilypond = {
	      comment: /%(?:(?!\{).*|\{[\s\S]*?%\})/,
	      'embedded-scheme': {
	        pattern: RegExp(
	          /(^|[=\s])#(?:"(?:[^"\\]|\\.)*"|[^\s()"]*(?:[^\s()]|<expr>))/.source.replace(
	            /<expr>/g,
	            function () {
	              return schemeExpression
	            }
	          ),
	          'm'
	        ),
	        lookbehind: true,
	        greedy: true,
	        inside: {
	          scheme: {
	            pattern: /^(#)[\s\S]+$/,
	            lookbehind: true,
	            alias: 'language-scheme',
	            inside: {
	              'embedded-lilypond': {
	                pattern: /#\{[\s\S]*?#\}/,
	                greedy: true,
	                inside: {
	                  punctuation: /^#\{|#\}$/,
	                  lilypond: {
	                    pattern: /[\s\S]+/,
	                    alias: 'language-lilypond',
	                    inside: null // see below
	                  }
	                }
	              },

	              rest: Prism.languages.scheme
	            }
	          },
	          punctuation: /#/
	        }
	      },
	      string: {
	        pattern: /"(?:[^"\\]|\\.)*"/,
	        greedy: true
	      },
	      'class-name': {
	        pattern: /(\\new\s+)[\w-]+/,
	        lookbehind: true
	      },
	      keyword: {
	        pattern: /\\[a-z][-\w]*/i,
	        inside: {
	          punctuation: /^\\/
	        }
	      },
	      operator: /[=|]|<<|>>/,
	      punctuation: {
	        pattern:
	          /(^|[a-z\d])(?:'+|,+|[_^]?-[_^]?(?:[-+^!>._]|(?=\d))|[_^]\.?|[.!])|[{}()[\]<>^~]|\\[()[\]<>\\!]|--|__/,
	        lookbehind: true
	      },
	      number: /\b\d+(?:\/\d+)?\b/
	    });
	    lilypond['embedded-scheme'].inside['scheme'].inside[
	      'embedded-lilypond'
	    ].inside['lilypond'].inside = lilypond;
	    Prism.languages.ly = lilypond;
	  })(Prism);
	}

	// @ts-nocheck
	liquid.displayName = 'liquid';
	liquid.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function liquid(Prism) {
	  Prism.register(markupTemplating);
	  Prism.languages.liquid = {
	    comment: {
	      pattern: /(^\{%\s*comment\s*%\})[\s\S]+(?=\{%\s*endcomment\s*%\}$)/,
	      lookbehind: true
	    },
	    delimiter: {
	      pattern: /^\{(?:\{\{|[%\{])-?|-?(?:\}\}|[%\}])\}$/,
	      alias: 'punctuation'
	    },
	    string: {
	      pattern: /"[^"]*"|'[^']*'/,
	      greedy: true
	    },
	    keyword:
	      /\b(?:as|assign|break|(?:end)?(?:capture|case|comment|for|form|if|paginate|raw|style|tablerow|unless)|continue|cycle|decrement|echo|else|elsif|in|include|increment|limit|liquid|offset|range|render|reversed|section|when|with)\b/,
	    object:
	      /\b(?:address|all_country_option_tags|article|block|blog|cart|checkout|collection|color|country|country_option_tags|currency|current_page|current_tags|customer|customer_address|date|discount_allocation|discount_application|external_video|filter|filter_value|font|forloop|fulfillment|generic_file|gift_card|group|handle|image|line_item|link|linklist|localization|location|measurement|media|metafield|model|model_source|order|page|page_description|page_image|page_title|part|policy|product|product_option|recommendations|request|robots|routes|rule|script|search|selling_plan|selling_plan_allocation|selling_plan_group|shipping_method|shop|shop_locale|sitemap|store_availability|tax_line|template|theme|transaction|unit_price_measurement|user_agent|variant|video|video_source)\b/,
	    function: [
	      {
	        pattern: /(\|\s*)\w+/,
	        lookbehind: true,
	        alias: 'filter'
	      },
	      {
	        // array functions
	        pattern: /(\.\s*)(?:first|last|size)/,
	        lookbehind: true
	      }
	    ],
	    boolean: /\b(?:false|nil|true)\b/,
	    range: {
	      pattern: /\.\./,
	      alias: 'operator'
	    },
	    // https://github.com/Shopify/liquid/blob/698f5e0d967423e013f6169d9111bd969bd78337/lib/liquid/lexer.rb#L21
	    number: /\b\d+(?:\.\d+)?\b/,
	    operator: /[!=]=|<>|[<>]=?|[|?:=-]|\b(?:and|contains(?=\s)|or)\b/,
	    punctuation: /[.,\[\]()]/,
	    empty: {
	      pattern: /\bempty\b/,
	      alias: 'keyword'
	    }
	  };
	  Prism.hooks.add('before-tokenize', function (env) {
	    var liquidPattern =
	      /\{%\s*comment\s*%\}[\s\S]*?\{%\s*endcomment\s*%\}|\{(?:%[\s\S]*?%|\{\{[\s\S]*?\}\}|\{[\s\S]*?\})\}/g;
	    var insideRaw = false;
	    Prism.languages['markup-templating'].buildPlaceholders(
	      env,
	      'liquid',
	      liquidPattern,
	      function (match) {
	        var tagMatch = /^\{%-?\s*(\w+)/.exec(match);
	        if (tagMatch) {
	          var tag = tagMatch[1];
	          if (tag === 'raw' && !insideRaw) {
	            insideRaw = true;
	            return true
	          } else if (tag === 'endraw') {
	            insideRaw = false;
	            return true
	          }
	        }
	        return !insideRaw
	      }
	    );
	  });
	  Prism.hooks.add('after-tokenize', function (env) {
	    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'liquid');
	  });
	}

	// @ts-nocheck
	lisp.displayName = 'lisp';
	lisp.aliases = ['elisp', 'emacs', 'emacs-lisp'];

	/** @type {import('../core.js').Syntax} */
	function lisp(Prism) {
	(function (Prism) {
	    /**
	     * Functions to construct regular expressions
	     * e.g. (interactive ... or (interactive)
	     *
	     * @param {string} name
	     * @returns {RegExp}
	     */
	    function simple_form(name) {
	      return RegExp(/(\()/.source + '(?:' + name + ')' + /(?=[\s\)])/.source)
	    }
	    /**
	     * booleans and numbers
	     *
	     * @param {string} pattern
	     * @returns {RegExp}
	     */
	    function primitive(pattern) {
	      return RegExp(
	        /([\s([])/.source + '(?:' + pattern + ')' + /(?=[\s)])/.source
	      )
	    }

	    // Patterns in regular expressions

	    // Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html
	    // & and : are excluded as they are usually used for special purposes
	    var symbol = /(?!\d)[-+*/~!@$%^=<>{}\w]+/.source;
	    // symbol starting with & used in function arguments
	    var marker = '&' + symbol;
	    // Open parenthesis for look-behind
	    var par = '(\\()';
	    var endpar = '(?=\\))';
	    // End the pattern with look-ahead space
	    var space = '(?=\\s)';
	    var nestedPar =
	      /(?:[^()]|\((?:[^()]|\((?:[^()]|\((?:[^()]|\((?:[^()]|\([^()]*\))*\))*\))*\))*\))*/
	        .source;
	    var language = {
	      // Three or four semicolons are considered a heading.
	      // See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html
	      heading: {
	        pattern: /;;;.*/,
	        alias: ['comment', 'title']
	      },
	      comment: /;.*/,
	      string: {
	        pattern: /"(?:[^"\\]|\\.)*"/,
	        greedy: true,
	        inside: {
	          argument: /[-A-Z]+(?=[.,\s])/,
	          symbol: RegExp('`' + symbol + "'")
	        }
	      },
	      'quoted-symbol': {
	        pattern: RegExp("#?'" + symbol),
	        alias: ['variable', 'symbol']
	      },
	      'lisp-property': {
	        pattern: RegExp(':' + symbol),
	        alias: 'property'
	      },
	      splice: {
	        pattern: RegExp(',@?' + symbol),
	        alias: ['symbol', 'variable']
	      },
	      keyword: [
	        {
	          pattern: RegExp(
	            par +
	              '(?:and|(?:cl-)?letf|cl-loop|cond|cons|error|if|(?:lexical-)?let\\*?|message|not|null|or|provide|require|setq|unless|use-package|when|while)' +
	              space
	          ),
	          lookbehind: true
	        },
	        {
	          pattern: RegExp(
	            par +
	              '(?:append|by|collect|concat|do|finally|for|in|return)' +
	              space
	          ),
	          lookbehind: true
	        }
	      ],
	      declare: {
	        pattern: simple_form(/declare/.source),
	        lookbehind: true,
	        alias: 'keyword'
	      },
	      interactive: {
	        pattern: simple_form(/interactive/.source),
	        lookbehind: true,
	        alias: 'keyword'
	      },
	      boolean: {
	        pattern: primitive(/nil|t/.source),
	        lookbehind: true
	      },
	      number: {
	        pattern: primitive(/[-+]?\d+(?:\.\d*)?/.source),
	        lookbehind: true
	      },
	      defvar: {
	        pattern: RegExp(par + 'def(?:const|custom|group|var)\\s+' + symbol),
	        lookbehind: true,
	        inside: {
	          keyword: /^def[a-z]+/,
	          variable: RegExp(symbol)
	        }
	      },
	      defun: {
	        pattern: RegExp(
	          par +
	            /(?:cl-)?(?:defmacro|defun\*?)\s+/.source +
	            symbol +
	            /\s+\(/.source +
	            nestedPar +
	            /\)/.source
	        ),
	        lookbehind: true,
	        greedy: true,
	        inside: {
	          keyword: /^(?:cl-)?def\S+/,
	          // See below, this property needs to be defined later so that it can
	          // reference the language object.
	          arguments: null,
	          function: {
	            pattern: RegExp('(^\\s)' + symbol),
	            lookbehind: true
	          },
	          punctuation: /[()]/
	        }
	      },
	      lambda: {
	        pattern: RegExp(
	          par +
	            'lambda\\s+\\(\\s*(?:&?' +
	            symbol +
	            '(?:\\s+&?' +
	            symbol +
	            ')*\\s*)?\\)'
	        ),
	        lookbehind: true,
	        greedy: true,
	        inside: {
	          keyword: /^lambda/,
	          // See below, this property needs to be defined later so that it can
	          // reference the language object.
	          arguments: null,
	          punctuation: /[()]/
	        }
	      },
	      car: {
	        pattern: RegExp(par + symbol),
	        lookbehind: true
	      },
	      punctuation: [
	        // open paren, brackets, and close paren
	        /(?:['`,]?\(|[)\[\]])/,
	        // cons
	        {
	          pattern: /(\s)\.(?=\s)/,
	          lookbehind: true
	        }
	      ]
	    };
	    var arg = {
	      'lisp-marker': RegExp(marker),
	      varform: {
	        pattern: RegExp(
	          /\(/.source + symbol + /\s+(?=\S)/.source + nestedPar + /\)/.source
	        ),
	        inside: language
	      },
	      argument: {
	        pattern: RegExp(/(^|[\s(])/.source + symbol),
	        lookbehind: true,
	        alias: 'variable'
	      },
	      rest: language
	    };
	    var forms = '\\S+(?:\\s+\\S+)*';
	    var arglist = {
	      pattern: RegExp(par + nestedPar + endpar),
	      lookbehind: true,
	      inside: {
	        'rest-vars': {
	          pattern: RegExp('&(?:body|rest)\\s+' + forms),
	          inside: arg
	        },
	        'other-marker-vars': {
	          pattern: RegExp('&(?:aux|optional)\\s+' + forms),
	          inside: arg
	        },
	        keys: {
	          pattern: RegExp('&key\\s+' + forms + '(?:\\s+&allow-other-keys)?'),
	          inside: arg
	        },
	        argument: {
	          pattern: RegExp(symbol),
	          alias: 'variable'
	        },
	        punctuation: /[()]/
	      }
	    };
	    language['lambda'].inside.arguments = arglist;
	    language['defun'].inside.arguments = Prism.util.clone(arglist);
	    language['defun'].inside.arguments.inside.sublist = arglist;
	    Prism.languages.lisp = language;
	    Prism.languages.elisp = language;
	    Prism.languages.emacs = language;
	    Prism.languages['emacs-lisp'] = language;
	  })(Prism);
	}

	// @ts-nocheck
	livescript.displayName = 'livescript';
	livescript.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function livescript(Prism) {
	  Prism.languages.livescript = {
	    comment: [
	      {
	        pattern: /(^|[^\\])\/\*[\s\S]*?\*\//,
	        lookbehind: true
	      },
	      {
	        pattern: /(^|[^\\])#.*/,
	        lookbehind: true
	      }
	    ],
	    'interpolated-string': {
	      /* Look-behind and look-ahead prevents wrong behavior of the greedy pattern
	       * forcing it to match """-quoted string when it would otherwise match "-quoted first. */
	      pattern: /(^|[^"])("""|")(?:\\[\s\S]|(?!\2)[^\\])*\2(?!")/,
	      lookbehind: true,
	      greedy: true,
	      inside: {
	        variable: {
	          pattern: /(^|[^\\])#[a-z_](?:-?[a-z]|[\d_])*/m,
	          lookbehind: true
	        },
	        interpolation: {
	          pattern: /(^|[^\\])#\{[^}]+\}/m,
	          lookbehind: true,
	          inside: {
	            'interpolation-punctuation': {
	              pattern: /^#\{|\}$/,
	              alias: 'variable'
	            }
	            // See rest below
	          }
	        },

	        string: /[\s\S]+/
	      }
	    },
	    string: [
	      {
	        pattern: /('''|')(?:\\[\s\S]|(?!\1)[^\\])*\1/,
	        greedy: true
	      },
	      {
	        pattern: /<\[[\s\S]*?\]>/,
	        greedy: true
	      },
	      /\\[^\s,;\])}]+/
	    ],
	    regex: [
	      {
	        pattern: /\/\/(?:\[[^\r\n\]]*\]|\\.|(?!\/\/)[^\\\[])+\/\/[gimyu]{0,5}/,
	        greedy: true,
	        inside: {
	          comment: {
	            pattern: /(^|[^\\])#.*/,
	            lookbehind: true
	          }
	        }
	      },
	      {
	        pattern: /\/(?:\[[^\r\n\]]*\]|\\.|[^/\\\r\n\[])+\/[gimyu]{0,5}/,
	        greedy: true
	      }
	    ],
	    keyword: {
	      pattern:
	        /(^|(?!-).)\b(?:break|case|catch|class|const|continue|default|do|else|extends|fallthrough|finally|for(?: ever)?|function|if|implements|it|let|loop|new|null|otherwise|own|return|super|switch|that|then|this|throw|try|unless|until|var|void|when|while|yield)(?!-)\b/m,
	      lookbehind: true
	    },
	    'keyword-operator': {
	      pattern:
	        /(^|[^-])\b(?:(?:delete|require|typeof)!|(?:and|by|delete|export|from|import(?: all)?|in|instanceof|is(?: not|nt)?|not|of|or|til|to|typeof|with|xor)(?!-)\b)/m,
	      lookbehind: true,
	      alias: 'operator'
	    },
	    boolean: {
	      pattern: /(^|[^-])\b(?:false|no|off|on|true|yes)(?!-)\b/m,
	      lookbehind: true
	    },
	    argument: {
	      // Don't match .&. nor &&
	      pattern: /(^|(?!\.&\.)[^&])&(?!&)\d*/m,
	      lookbehind: true,
	      alias: 'variable'
	    },
	    number: /\b(?:\d+~[\da-z]+|\d[\d_]*(?:\.\d[\d_]*)?(?:[a-z]\w*)?)/i,
	    identifier: /[a-z_](?:-?[a-z]|[\d_])*/i,
	    operator: [
	      // Spaced .
	      {
	        pattern: /( )\.(?= )/,
	        lookbehind: true
	      },
	      // Full list, in order:
	      // .= .~ .. ...
	      // .&. .^. .<<. .>>. .>>>.
	      // := :: ::=
	      // &&
	      // || |>
	      // < << <<< <<<<
	      // <- <-- <-! <--!
	      // <~ <~~ <~! <~~!
	      // <| <= <?
	      // > >> >= >?
	      // - -- -> -->
	      // + ++
	      // @ @@
	      // % %%
	      // * **
	      // ! != !~=
	      // !~> !~~>
	      // !-> !-->
	      // ~ ~> ~~> ~=
	      // = ==
	      // ^ ^^
	      // / ?
	      /\.(?:[=~]|\.\.?)|\.(?:[&|^]|<<|>>>?)\.|:(?:=|:=?)|&&|\|[|>]|<(?:<<?<?|--?!?|~~?!?|[|=?])?|>[>=?]?|-(?:->?|>)?|\+\+?|@@?|%%?|\*\*?|!(?:~?=|--?>|~?~>)?|~(?:~?>|=)?|==?|\^\^?|[\/?]/
	    ],
	    punctuation: /[(){}\[\]|.,:;`]/
	  };
	  Prism.languages.livescript['interpolated-string'].inside[
	    'interpolation'
	  ].inside.rest = Prism.languages.livescript;
	}

	// @ts-nocheck
	llvm.displayName = 'llvm';
	llvm.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function llvm(Prism) {
	(function (Prism) {
	    Prism.languages.llvm = {
	      comment: /;.*/,
	      string: {
	        pattern: /"[^"]*"/,
	        greedy: true
	      },
	      boolean: /\b(?:false|true)\b/,
	      variable: /[%@!#](?:(?!\d)(?:[-$.\w]|\\[a-f\d]{2})+|\d+)/i,
	      label: /(?!\d)(?:[-$.\w]|\\[a-f\d]{2})+:/i,
	      type: {
	        pattern:
	          /\b(?:double|float|fp128|half|i[1-9]\d*|label|metadata|ppc_fp128|token|void|x86_fp80|x86_mmx)\b/,
	        alias: 'class-name'
	      },
	      keyword: /\b[a-z_][a-z_0-9]*\b/,
	      number:
	        /[+-]?\b\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\b|\b0x[\dA-Fa-f]+\b|\b0xK[\dA-Fa-f]{20}\b|\b0x[ML][\dA-Fa-f]{32}\b|\b0xH[\dA-Fa-f]{4}\b/,
	      punctuation: /[{}[\];(),.!*=<>]/
	    };
	  })(Prism);
	}

	// @ts-nocheck
	log.displayName = 'log';
	log.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function log(Prism) {
	  // This is a language definition for generic log files.
	  // Since there is no one log format, this language definition has to support all formats to some degree.
	  //
	  // Based on https://github.com/MTDL9/vim-log-highlighting

	  Prism.languages.log = {
	    string: {
	      // Single-quoted strings must not be confused with plain text. E.g. Can't isn't Susan's Chris' toy
	      pattern: /"(?:[^"\\\r\n]|\\.)*"|'(?![st] | \w)(?:[^'\\\r\n]|\\.)*'/,
	      greedy: true
	    },
	    exception: {
	      pattern:
	        /(^|[^\w.])[a-z][\w.]*(?:Error|Exception):.*(?:(?:\r\n?|\n)[ \t]*(?:at[ \t].+|\.{3}.*|Caused by:.*))+(?:(?:\r\n?|\n)[ \t]*\.\.\. .*)?/,
	      lookbehind: true,
	      greedy: true,
	      alias: ['javastacktrace', 'language-javastacktrace'],
	      inside: Prism.languages['javastacktrace'] || {
	        keyword: /\bat\b/,
	        function: /[a-z_][\w$]*(?=\()/,
	        punctuation: /[.:()]/
	      }
	    },
	    level: [
	      {
	        pattern:
	          /\b(?:ALERT|CRIT|CRITICAL|EMERG|EMERGENCY|ERR|ERROR|FAILURE|FATAL|SEVERE)\b/,
	        alias: ['error', 'important']
	      },
	      {
	        pattern: /\b(?:WARN|WARNING|WRN)\b/,
	        alias: ['warning', 'important']
	      },
	      {
	        pattern: /\b(?:DISPLAY|INF|INFO|NOTICE|STATUS)\b/,
	        alias: ['info', 'keyword']
	      },
	      {
	        pattern: /\b(?:DBG|DEBUG|FINE)\b/,
	        alias: ['debug', 'keyword']
	      },
	      {
	        pattern: /\b(?:FINER|FINEST|TRACE|TRC|VERBOSE|VRB)\b/,
	        alias: ['trace', 'comment']
	      }
	    ],
	    property: {
	      pattern:
	        /((?:^|[\]|])[ \t]*)[a-z_](?:[\w-]|\b\/\b)*(?:[. ]\(?\w(?:[\w-]|\b\/\b)*\)?)*:(?=\s)/im,
	      lookbehind: true
	    },
	    separator: {
	      pattern: /(^|[^-+])-{3,}|={3,}|\*{3,}|- - /m,
	      lookbehind: true,
	      alias: 'comment'
	    },
	    url: /\b(?:file|ftp|https?):\/\/[^\s|,;'"]*[^\s|,;'">.]/,
	    email: {
	      pattern: /(^|\s)[-\w+.]+@[a-z][a-z0-9-]*(?:\.[a-z][a-z0-9-]*)+(?=\s)/,
	      lookbehind: true,
	      alias: 'url'
	    },
	    'ip-address': {
	      pattern: /\b(?:\d{1,3}(?:\.\d{1,3}){3})\b/,
	      alias: 'constant'
	    },
	    'mac-address': {
	      pattern: /\b[a-f0-9]{2}(?::[a-f0-9]{2}){5}\b/i,
	      alias: 'constant'
	    },
	    domain: {
	      pattern:
	        /(^|\s)[a-z][a-z0-9-]*(?:\.[a-z][a-z0-9-]*)*\.[a-z][a-z0-9-]+(?=\s)/,
	      lookbehind: true,
	      alias: 'constant'
	    },
	    uuid: {
	      pattern:
	        /\b[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\b/i,
	      alias: 'constant'
	    },
	    hash: {
	      pattern: /\b(?:[a-f0-9]{32}){1,2}\b/i,
	      alias: 'constant'
	    },
	    'file-path': {
	      pattern:
	        /\b[a-z]:[\\/][^\s|,;:(){}\[\]"']+|(^|[\s:\[\](>|])\.{0,2}\/\w[^\s|,;:(){}\[\]"']*/i,
	      lookbehind: true,
	      greedy: true,
	      alias: 'string'
	    },
	    date: {
	      pattern: RegExp(
	        /\b\d{4}[-/]\d{2}[-/]\d{2}(?:T(?=\d{1,2}:)|(?=\s\d{1,2}:))/.source +
	          '|' +
	          /\b\d{1,4}[-/ ](?:\d{1,2}|Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep)[-/ ]\d{2,4}T?\b/
	            .source +
	          '|' +
	          /\b(?:(?:Fri|Mon|Sat|Sun|Thu|Tue|Wed)(?:\s{1,2}(?:Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep))?|Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep)\s{1,2}\d{1,2}\b/
	            .source,
	        'i'
	      ),
	      alias: 'number'
	    },
	    time: {
	      pattern:
	        /\b\d{1,2}:\d{1,2}:\d{1,2}(?:[.,:]\d+)?(?:\s?[+-]\d{2}:?\d{2}|Z)?\b/,
	      alias: 'number'
	    },
	    boolean: /\b(?:false|null|true)\b/i,
	    number: {
	      pattern:
	        /(^|[^.\w])(?:0x[a-f0-9]+|0o[0-7]+|0b[01]+|v?\d[\da-f]*(?:\.\d+)*(?:e[+-]?\d+)?[a-z]{0,3}\b)\b(?!\.\w)/i,
	      lookbehind: true
	    },
	    operator: /[;:?<=>~/@!$%&+\-|^(){}*#]/,
	    punctuation: /[\[\].,]/
	  };
	}

	// @ts-nocheck
	lolcode.displayName = 'lolcode';
	lolcode.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function lolcode(Prism) {
	  Prism.languages.lolcode = {
	    comment: [/\bOBTW\s[\s\S]*?\sTLDR\b/, /\bBTW.+/],
	    string: {
	      pattern: /"(?::.|[^":])*"/,
	      inside: {
	        variable: /:\{[^}]+\}/,
	        symbol: [/:\([a-f\d]+\)/i, /:\[[^\]]+\]/, /:[)>o":]/]
	      },
	      greedy: true
	    },
	    number: /(?:\B-)?(?:\b\d+(?:\.\d*)?|\B\.\d+)/,
	    symbol: {
	      pattern: /(^|\s)(?:A )?(?:BUKKIT|NOOB|NUMBAR|NUMBR|TROOF|YARN)(?=\s|,|$)/,
	      lookbehind: true,
	      inside: {
	        keyword: /A(?=\s)/
	      }
	    },
	    label: {
	      pattern: /((?:^|\s)(?:IM IN YR|IM OUTTA YR) )[a-zA-Z]\w*/,
	      lookbehind: true,
	      alias: 'string'
	    },
	    function: {
	      pattern: /((?:^|\s)(?:HOW IZ I|I IZ|IZ) )[a-zA-Z]\w*/,
	      lookbehind: true
	    },
	    keyword: [
	      {
	        pattern:
	          /(^|\s)(?:AN|FOUND YR|GIMMEH|GTFO|HAI|HAS A|HOW IZ I|I HAS A|I IZ|IF U SAY SO|IM IN YR|IM OUTTA YR|IS NOW(?: A)?|ITZ(?: A)?|IZ|KTHX|KTHXBYE|LIEK(?: A)?|MAEK|MEBBE|MKAY|NERFIN|NO WAI|O HAI IM|O RLY\?|OIC|OMG|OMGWTF|R|SMOOSH|SRS|TIL|UPPIN|VISIBLE|WILE|WTF\?|YA RLY|YR)(?=\s|,|$)/,
	        lookbehind: true
	      },
	      /'Z(?=\s|,|$)/
	    ],
	    boolean: {
	      pattern: /(^|\s)(?:FAIL|WIN)(?=\s|,|$)/,
	      lookbehind: true
	    },
	    variable: {
	      pattern: /(^|\s)IT(?=\s|,|$)/,
	      lookbehind: true
	    },
	    operator: {
	      pattern:
	        /(^|\s)(?:NOT|BOTH SAEM|DIFFRINT|(?:ALL|ANY|BIGGR|BOTH|DIFF|EITHER|MOD|PRODUKT|QUOSHUNT|SMALLR|SUM|WON) OF)(?=\s|,|$)/,
	      lookbehind: true
	    },
	    punctuation: /\.{3}|…|,|!/
	  };
	}

	// @ts-nocheck
	magma.displayName = 'magma';
	magma.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function magma(Prism) {
	  Prism.languages.magma = {
	    output: {
	      pattern:
	        /^(>.*(?:\r(?:\n|(?!\n))|\n))(?!>)(?:.+|(?:\r(?:\n|(?!\n))|\n)(?!>).*)(?:(?:\r(?:\n|(?!\n))|\n)(?!>).*)*/m,
	      lookbehind: true,
	      greedy: true
	    },
	    comment: {
	      pattern: /\/\/.*|\/\*[\s\S]*?\*\//,
	      greedy: true
	    },
	    string: {
	      pattern: /(^|[^\\"])"(?:[^\r\n\\"]|\\.)*"/,
	      lookbehind: true,
	      greedy: true
	    },
	    // http://magma.maths.usyd.edu.au/magma/handbook/text/82
	    keyword:
	      /\b(?:_|adj|and|assert|assert2|assert3|assigned|break|by|case|cat|catch|clear|cmpeq|cmpne|continue|declare|default|delete|diff|div|do|elif|else|end|eq|error|eval|exists|exit|for|forall|forward|fprintf|freeze|function|ge|gt|if|iload|import|in|intrinsic|is|join|le|load|local|lt|meet|mod|ne|not|notadj|notin|notsubset|or|print|printf|procedure|quit|random|read|readi|repeat|require|requirege|requirerange|restore|return|save|sdiff|select|subset|then|time|to|try|until|vprint|vprintf|vtime|when|where|while|xor)\b/,
	    boolean: /\b(?:false|true)\b/,
	    generator: {
	      pattern: /\b[a-z_]\w*(?=\s*<)/i,
	      alias: 'class-name'
	    },
	    function: /\b[a-z_]\w*(?=\s*\()/i,
	    number: {
	      pattern:
	        /(^|[^\w.]|\.\.)(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)?(?:_[a-z]?)?(?=$|[^\w.]|\.\.)/,
	      lookbehind: true
	    },
	    operator: /->|[-+*/^~!|#=]|:=|\.\./,
	    punctuation: /[()[\]{}<>,;.:]/
	  };
	}

	// @ts-nocheck
	mata.displayName = 'mata';
	mata.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function mata(Prism) {
	(function (Prism) {
	    var orgType = /\b(?:(?:col|row)?vector|matrix|scalar)\b/.source;
	    var type =
	      /\bvoid\b|<org>|\b(?:complex|numeric|pointer(?:\s*\([^()]*\))?|real|string|(?:class|struct)\s+\w+|transmorphic)(?:\s*<org>)?/.source.replace(
	        /<org>/g,
	        orgType
	      );
	    Prism.languages.mata = {
	      comment: {
	        pattern:
	          /\/\/.*|\/\*(?:[^*/]|\*(?!\/)|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/)*\*\//,
	        greedy: true
	      },
	      string: {
	        pattern: /"[^"\r\n]*"|[‘`']".*?"[’`']/,
	        greedy: true
	      },
	      'class-name': {
	        pattern: /(\b(?:class|extends|struct)\s+)\w+(?=\s*(?:\{|\bextends\b))/,
	        lookbehind: true
	      },
	      type: {
	        pattern: RegExp(type),
	        alias: 'class-name',
	        inside: {
	          punctuation: /[()]/,
	          keyword: /\b(?:class|function|struct|void)\b/
	        }
	      },
	      keyword:
	        /\b(?:break|class|continue|do|else|end|extends|external|final|for|function|goto|if|pragma|private|protected|public|return|static|struct|unset|unused|version|virtual|while)\b/,
	      constant: /\bNULL\b/,
	      number: {
	        pattern:
	          /(^|[^\w.])(?:\d+(?:\.\d+)?(?:e[+-]?\d+)?|\d[a-f0-9]*(?:\.[a-f0-9]+)?x[+-]?\d+)i?(?![\w.])/i,
	        lookbehind: true
	      },
	      missing: {
	        pattern: /(^|[^\w.])(?:\.[a-z]?)(?![\w.])/,
	        lookbehind: true,
	        alias: 'symbol'
	      },
	      function: /\b[a-z_]\w*(?=\s*\()/i,
	      operator: /\.\.|\+\+|--|&&|\|\||:?(?:[!=<>]=|[+\-*/^<>&|:])|[!?=\\#’`']/,
	      punctuation: /[()[\]{},;.]/
	    };
	  })(Prism);
	}

	// @ts-nocheck
	matlab.displayName = 'matlab';
	matlab.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function matlab(Prism) {
	  Prism.languages.matlab = {
	    comment: [/%\{[\s\S]*?\}%/, /%.+/],
	    string: {
	      pattern: /\B'(?:''|[^'\r\n])*'/,
	      greedy: true
	    },
	    // FIXME We could handle imaginary numbers as a whole
	    number: /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[eE][+-]?\d+)?(?:[ij])?|\b[ij]\b/,
	    keyword:
	      /\b(?:NaN|break|case|catch|continue|else|elseif|end|for|function|if|inf|otherwise|parfor|pause|pi|return|switch|try|while)\b/,
	    function: /\b(?!\d)\w+(?=\s*\()/,
	    operator: /\.?[*^\/\\']|[+\-:@]|[<>=~]=?|&&?|\|\|?/,
	    punctuation: /\.{3}|[.,;\[\](){}!]/
	  };
	}

	// @ts-nocheck
	maxscript.displayName = 'maxscript';
	maxscript.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function maxscript(Prism) {
	(function (Prism) {
	    var keywords =
	      /\b(?:about|and|animate|as|at|attributes|by|case|catch|collect|continue|coordsys|do|else|exit|fn|for|from|function|global|if|in|local|macroscript|mapped|max|not|of|off|on|or|parameters|persistent|plugin|rcmenu|return|rollout|set|struct|then|throw|to|tool|try|undo|utility|when|where|while|with)\b/i;
	    Prism.languages.maxscript = {
	      comment: {
	        pattern: /\/\*[\s\S]*?(?:\*\/|$)|--.*/,
	        greedy: true
	      },
	      string: {
	        pattern: /(^|[^"\\@])(?:"(?:[^"\\]|\\[\s\S])*"|@"[^"]*")/,
	        lookbehind: true,
	        greedy: true
	      },
	      path: {
	        pattern: /\$(?:[\w/\\.*?]|'[^']*')*/,
	        greedy: true,
	        alias: 'string'
	      },
	      'function-call': {
	        pattern: RegExp(
	          '((?:' +
	            // start of line
	            (/^/.source +
	              '|' +
	              // operators and other language constructs
	              /[;=<>+\-*/^({\[]/.source +
	              '|' +
	              // keywords as part of statements
	              /\b(?:and|by|case|catch|collect|do|else|if|in|not|or|return|then|to|try|where|while|with)\b/
	                .source) +
	            ')[ \t]*)' +
	            '(?!' +
	            keywords.source +
	            ')' +
	            /[a-z_]\w*\b/.source +
	            '(?=[ \t]*(?:' +
	            // variable
	            ('(?!' +
	              keywords.source +
	              ')' +
	              /[a-z_]/.source +
	              '|' +
	              // number
	              /\d|-\.?\d/.source +
	              '|' +
	              // other expressions or literals
	              /[({'"$@#?]/.source) +
	            '))',
	          'im'
	        ),
	        lookbehind: true,
	        greedy: true,
	        alias: 'function'
	      },
	      'function-definition': {
	        pattern: /(\b(?:fn|function)\s+)\w+\b/i,
	        lookbehind: true,
	        alias: 'function'
	      },
	      argument: {
	        pattern: /\b[a-z_]\w*(?=:)/i,
	        alias: 'attr-name'
	      },
	      keyword: keywords,
	      boolean: /\b(?:false|true)\b/,
	      time: {
	        pattern:
	          /(^|[^\w.])(?:(?:(?:\d+(?:\.\d*)?|\.\d+)(?:[eEdD][+-]\d+|[LP])?[msft])+|\d+:\d+(?:\.\d*)?)(?![\w.:])/,
	        lookbehind: true,
	        alias: 'number'
	      },
	      number: [
	        {
	          pattern:
	            /(^|[^\w.])(?:(?:\d+(?:\.\d*)?|\.\d+)(?:[eEdD][+-]\d+|[LP])?|0x[a-fA-F0-9]+)(?![\w.:])/,
	          lookbehind: true
	        },
	        /\b(?:e|pi)\b/
	      ],
	      constant: /\b(?:dontcollect|ok|silentValue|undefined|unsupplied)\b/,
	      color: {
	        pattern: /\b(?:black|blue|brown|gray|green|orange|red|white|yellow)\b/i,
	        alias: 'constant'
	      },
	      operator: /[-+*/<>=!]=?|[&^?]|#(?!\()/,
	      punctuation: /[()\[\]{}.:,;]|#(?=\()|\\$/m
	    };
	  })(Prism);
	}

	// @ts-nocheck
	mel.displayName = 'mel';
	mel.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function mel(Prism) {
	  Prism.languages.mel = {
	    comment: {
	      pattern: /\/\/.*|\/\*[\s\S]*?\*\//,
	      greedy: true
	    },
	    code: {
	      pattern: /`(?:\\.|[^\\`])*`/,
	      greedy: true,
	      alias: 'italic',
	      inside: {
	        delimiter: {
	          pattern: /^`|`$/,
	          alias: 'punctuation'
	        },
	        statement: {
	          pattern: /[\s\S]+/,
	          inside: null // see below
	        }
	      }
	    },

	    string: {
	      pattern: /"(?:\\.|[^\\"\r\n])*"/,
	      greedy: true
	    },
	    variable: /\$\w+/,
	    number: /\b0x[\da-fA-F]+\b|\b\d+(?:\.\d*)?|\B\.\d+/,
	    flag: {
	      pattern: /-[^\d\W]\w*/,
	      alias: 'operator'
	    },
	    keyword:
	      /\b(?:break|case|continue|default|do|else|float|for|global|if|in|int|matrix|proc|return|string|switch|vector|while)\b/,
	    function: {
	      pattern:
	        /((?:^|[{;])[ \t]*)[a-z_]\w*\b(?!\s*(?:\.(?!\.)|[[{=]))|\b[a-z_]\w*(?=[ \t]*\()/im,
	      lookbehind: true,
	      greedy: true
	    },
	    'tensor-punctuation': {
	      pattern: /<<|>>/,
	      alias: 'punctuation'
	    },
	    operator: /\+[+=]?|-[-=]?|&&|\|\||[<>]=?|[*\/!=]=?|[%^]/,
	    punctuation: /[.,:;?\[\](){}]/
	  };
	  Prism.languages.mel['code'].inside['statement'].inside = Prism.languages.mel;
	}

	// @ts-nocheck
	mermaid.displayName = 'mermaid';
	mermaid.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function mermaid(Prism) {
	  Prism.languages.mermaid = {
	    comment: {
	      pattern: /%%.*/,
	      greedy: true
	    },
	    style: {
	      pattern:
	        /^([ \t]*(?:classDef|linkStyle|style)[ \t]+[\w$-]+[ \t]+)\w.*[^\s;]/m,
	      lookbehind: true,
	      inside: {
	        property: /\b\w[\w-]*(?=[ \t]*:)/,
	        operator: /:/,
	        punctuation: /,/
	      }
	    },
	    'inter-arrow-label': {
	      pattern:
	        /([^<>ox.=-])(?:-[-.]|==)(?![<>ox.=-])[ \t]*(?:"[^"\r\n]*"|[^\s".=-](?:[^\r\n.=-]*[^\s.=-])?)[ \t]*(?:\.+->?|--+[->]|==+[=>])(?![<>ox.=-])/,
	      lookbehind: true,
	      greedy: true,
	      inside: {
	        arrow: {
	          pattern: /(?:\.+->?|--+[->]|==+[=>])$/,
	          alias: 'operator'
	        },
	        label: {
	          pattern: /^([\s\S]{2}[ \t]*)\S(?:[\s\S]*\S)?/,
	          lookbehind: true,
	          alias: 'property'
	        },
	        'arrow-head': {
	          pattern: /^\S+/,
	          alias: ['arrow', 'operator']
	        }
	      }
	    },
	    arrow: [
	      // This might look complex but it really isn't.
	      // There are many possible arrows (see tests) and it's impossible to fit all of them into one pattern. The
	      // problem is that we only have one lookbehind per pattern. However, we cannot disallow too many arrow
	      // characters in the one lookbehind because that would create too many false negatives. So we have to split the
	      // arrows into different patterns.
	      {
	        // ER diagram
	        pattern: /(^|[^{}|o.-])[|}][|o](?:--|\.\.)[|o][|{](?![{}|o.-])/,
	        lookbehind: true,
	        alias: 'operator'
	      },
	      {
	        // flow chart
	        // (?:==+|--+|-\.*-)
	        pattern:
	          /(^|[^<>ox.=-])(?:[<ox](?:==+|--+|-\.*-)[>ox]?|(?:==+|--+|-\.*-)[>ox]|===+|---+|-\.+-)(?![<>ox.=-])/,
	        lookbehind: true,
	        alias: 'operator'
	      },
	      {
	        // sequence diagram
	        pattern:
	          /(^|[^<>()x-])(?:--?(?:>>|[x>)])(?![<>()x])|(?:<<|[x<(])--?(?!-))/,
	        lookbehind: true,
	        alias: 'operator'
	      },
	      {
	        // class diagram
	        pattern:
	          /(^|[^<>|*o.-])(?:[*o]--|--[*o]|<\|?(?:--|\.\.)|(?:--|\.\.)\|?>|--|\.\.)(?![<>|*o.-])/,
	        lookbehind: true,
	        alias: 'operator'
	      }
	    ],
	    label: {
	      pattern: /(^|[^|<])\|(?:[^\r\n"|]|"[^"\r\n]*")+\|/,
	      lookbehind: true,
	      greedy: true,
	      alias: 'property'
	    },
	    text: {
	      pattern: /(?:[(\[{]+|\b>)(?:[^\r\n"()\[\]{}]|"[^"\r\n]*")+(?:[)\]}]+|>)/,
	      alias: 'string'
	    },
	    string: {
	      pattern: /"[^"\r\n]*"/,
	      greedy: true
	    },
	    annotation: {
	      pattern:
	        /<<(?:abstract|choice|enumeration|fork|interface|join|service)>>|\[\[(?:choice|fork|join)\]\]/i,
	      alias: 'important'
	    },
	    keyword: [
	      // This language has both case-sensitive and case-insensitive keywords
	      {
	        pattern:
	          /(^[ \t]*)(?:action|callback|class|classDef|classDiagram|click|direction|erDiagram|flowchart|gantt|gitGraph|graph|journey|link|linkStyle|pie|requirementDiagram|sequenceDiagram|stateDiagram|stateDiagram-v2|style|subgraph)(?![\w$-])/m,
	        lookbehind: true,
	        greedy: true
	      },
	      {
	        pattern:
	          /(^[ \t]*)(?:activate|alt|and|as|autonumber|deactivate|else|end(?:[ \t]+note)?|loop|opt|par|participant|rect|state|note[ \t]+(?:over|(?:left|right)[ \t]+of))(?![\w$-])/im,
	        lookbehind: true,
	        greedy: true
	      }
	    ],
	    entity: /#[a-z0-9]+;/,
	    operator: {
	      pattern: /(\w[ \t]*)&(?=[ \t]*\w)|:::|:/,
	      lookbehind: true
	    },
	    punctuation: /[(){};]/
	  };
	}

	// @ts-nocheck
	metafont.displayName = 'metafont';
	metafont.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function metafont(Prism) {
	  Prism.languages.metafont = {
	    // Syntax of METAFONT with the added (public) elements of PlainMETAFONT. Except for internal quantities they are expected to be rarely redefined. Freely inspired by the syntax of Christophe Grandsire for the Crimson Editor.
	    comment: {
	      pattern: /%.*/,
	      greedy: true
	    },
	    string: {
	      pattern: /"[^\r\n"]*"/,
	      greedy: true
	    },
	    number: /\d*\.?\d+/,
	    boolean: /\b(?:false|true)\b/,
	    punctuation: [
	      /[,;()]/,
	      {
	        pattern: /(^|[^{}])(?:\{|\})(?![{}])/,
	        lookbehind: true
	      },
	      {
	        pattern: /(^|[^[])\[(?!\[)/,
	        lookbehind: true
	      },
	      {
	        pattern: /(^|[^\]])\](?!\])/,
	        lookbehind: true
	      }
	    ],
	    constant: [
	      {
	        pattern: /(^|[^!?])\?\?\?(?![!?])/,
	        lookbehind: true
	      },
	      {
	        pattern: /(^|[^/*\\])(?:\\|\\\\)(?![/*\\])/,
	        lookbehind: true
	      },
	      /\b(?:_|blankpicture|bp|cc|cm|dd|ditto|down|eps|epsilon|fullcircle|halfcircle|identity|in|infinity|left|mm|nullpen|nullpicture|origin|pc|penrazor|penspeck|pensquare|penstroke|proof|pt|quartercircle|relax|right|smoke|unitpixel|unitsquare|up)\b/
	    ],
	    quantity: {
	      pattern:
	        /\b(?:autorounding|blacker|boundarychar|charcode|chardp|chardx|chardy|charext|charht|charic|charwd|currentwindow|day|designsize|displaying|fillin|fontmaking|granularity|hppp|join_radius|month|o_correction|pausing|pen_(?:bot|lft|rt|top)|pixels_per_inch|proofing|showstopping|smoothing|time|tolerance|tracingcapsules|tracingchoices|tracingcommands|tracingedges|tracingequations|tracingmacros|tracingonline|tracingoutput|tracingpens|tracingrestores|tracingspecs|tracingstats|tracingtitles|turningcheck|vppp|warningcheck|xoffset|year|yoffset)\b/,
	      alias: 'keyword'
	    },
	    command: {
	      pattern:
	        /\b(?:addto|batchmode|charlist|cull|display|errhelp|errmessage|errorstopmode|everyjob|extensible|fontdimen|headerbyte|inner|interim|let|ligtable|message|newinternal|nonstopmode|numspecial|openwindow|outer|randomseed|save|scrollmode|shipout|show|showdependencies|showstats|showtoken|showvariable|special)\b/,
	      alias: 'builtin'
	    },
	    operator: [
	      {
	        pattern:
	          /(^|[^>=<:|])(?:<|<=|=|=:|\|=:|\|=:>|=:\|>|=:\||\|=:\||\|=:\|>|\|=:\|>>|>|>=|:|:=|<>|::|\|\|:)(?![>=<:|])/,
	        lookbehind: true
	      },
	      {
	        pattern: /(^|[^+-])(?:\+|\+\+|-{1,3}|\+-\+)(?![+-])/,
	        lookbehind: true
	      },
	      {
	        pattern: /(^|[^/*\\])(?:\*|\*\*|\/)(?![/*\\])/,
	        lookbehind: true
	      },
	      {
	        pattern: /(^|[^.])(?:\.{2,3})(?!\.)/,
	        lookbehind: true
	      },
	      {
	        pattern: /(^|[^@#&$])&(?![@#&$])/,
	        lookbehind: true
	      },
	      /\b(?:and|not|or)\b/
	    ],
	    macro: {
	      pattern:
	        /\b(?:abs|beginchar|bot|byte|capsule_def|ceiling|change_width|clear_pen_memory|clearit|clearpen|clearxy|counterclockwise|cullit|cutdraw|cutoff|decr|define_blacker_pixels|define_corrected_pixels|define_good_x_pixels|define_good_y_pixels|define_horizontal_corrected_pixels|define_pixels|define_whole_blacker_pixels|define_whole_pixels|define_whole_vertical_blacker_pixels|define_whole_vertical_pixels|dir|direction|directionpoint|div|dotprod|downto|draw|drawdot|endchar|erase|fill|filldraw|fix_units|flex|font_coding_scheme|font_extra_space|font_identifier|font_normal_shrink|font_normal_space|font_normal_stretch|font_quad|font_size|font_slant|font_x_height|gfcorners|gobble|gobbled|good\.(?:bot|lft|rt|top|x|y)|grayfont|hide|hround|imagerules|incr|interact|interpath|intersectionpoint|inverse|italcorr|killtext|labelfont|labels|lft|loggingall|lowres_fix|makegrid|makelabel(?:\.(?:bot|lft|rt|top)(?:\.nodot)?)?|max|min|mod|mode_def|mode_setup|nodisplays|notransforms|numtok|openit|penlabels|penpos|pickup|proofoffset|proofrule|proofrulethickness|range|reflectedabout|rotatedabout|rotatedaround|round|rt|savepen|screenchars|screenrule|screenstrokes|shipit|showit|slantfont|softjoin|solve|stop|superellipse|tensepath|thru|titlefont|top|tracingall|tracingnone|undraw|undrawdot|unfill|unfilldraw|upto|vround)\b/,
	      alias: 'function'
	    },
	    builtin:
	      /\b(?:ASCII|angle|char|cosd|decimal|directiontime|floor|hex|intersectiontimes|jobname|known|length|makepath|makepen|mexp|mlog|normaldeviate|oct|odd|pencircle|penoffset|point|postcontrol|precontrol|reverse|rotated|sind|sqrt|str|subpath|substring|totalweight|turningnumber|uniformdeviate|unknown|xpart|xxpart|xypart|ypart|yxpart|yypart)\b/,
	    keyword:
	      /\b(?:also|at|atleast|begingroup|charexists|contour|controls|curl|cycle|def|delimiters|doublepath|dropping|dump|else|elseif|end|enddef|endfor|endgroup|endinput|exitif|exitunless|expandafter|fi|for|forever|forsuffixes|from|if|input|inwindow|keeping|kern|of|primarydef|quote|readstring|scaled|scantokens|secondarydef|shifted|skipto|slanted|step|tension|tertiarydef|to|transformed|until|vardef|withpen|withweight|xscaled|yscaled|zscaled)\b/,
	    type: {
	      pattern:
	        /\b(?:boolean|expr|numeric|pair|path|pen|picture|primary|secondary|string|suffix|tertiary|text|transform)\b/,
	      alias: 'property'
	    },
	    variable: {
	      pattern:
	        /(^|[^@#&$])(?:@#|#@|#|@)(?![@#&$])|\b(?:aspect_ratio|currentpen|currentpicture|currenttransform|d|extra_beginchar|extra_endchar|extra_setup|h|localfont|mag|mode|screen_cols|screen_rows|w|whatever|x|y|z)\b/,
	      lookbehind: true
	    }
	  };
	}

	// @ts-nocheck
	mizar.displayName = 'mizar';
	mizar.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function mizar(Prism) {
	  Prism.languages.mizar = {
	    comment: /::.+/,
	    keyword:
	      /@proof\b|\b(?:according|aggregate|all|and|antonym|are|as|associativity|assume|asymmetry|attr|be|begin|being|by|canceled|case|cases|clusters?|coherence|commutativity|compatibility|connectedness|consider|consistency|constructors|contradiction|correctness|def|deffunc|define|definitions?|defpred|do|does|end|environ|equals|ex|exactly|existence|for|from|func|given|hence|hereby|holds|idempotence|identity|iff?|implies|involutiveness|irreflexivity|is|it|let|means|mode|non|not|notations?|now|of|or|otherwise|over|per|pred|prefix|projectivity|proof|provided|qua|reconsider|redefine|reduce|reducibility|reflexivity|registrations?|requirements|reserve|sch|schemes?|section|selector|set|sethood|st|struct|such|suppose|symmetry|synonym|take|that|the|then|theorems?|thesis|thus|to|transitivity|uniqueness|vocabular(?:ies|y)|when|where|with|wrt)\b/,
	    parameter: {
	      pattern: /\$(?:10|\d)/,
	      alias: 'variable'
	    },
	    variable: /\b\w+(?=:)/,
	    number: /(?:\b|-)\d+\b/,
	    operator: /\.\.\.|->|&|\.?=/,
	    punctuation: /\(#|#\)|[,:;\[\](){}]/
	  };
	}

	// @ts-nocheck
	mongodb.displayName = 'mongodb';
	mongodb.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function mongodb(Prism) {
	  Prism.register(javascript)
	  ;(function (Prism) {
	    var operators = [
	      // query and projection
	      '$eq',
	      '$gt',
	      '$gte',
	      '$in',
	      '$lt',
	      '$lte',
	      '$ne',
	      '$nin',
	      '$and',
	      '$not',
	      '$nor',
	      '$or',
	      '$exists',
	      '$type',
	      '$expr',
	      '$jsonSchema',
	      '$mod',
	      '$regex',
	      '$text',
	      '$where',
	      '$geoIntersects',
	      '$geoWithin',
	      '$near',
	      '$nearSphere',
	      '$all',
	      '$elemMatch',
	      '$size',
	      '$bitsAllClear',
	      '$bitsAllSet',
	      '$bitsAnyClear',
	      '$bitsAnySet',
	      '$comment',
	      '$elemMatch',
	      '$meta',
	      '$slice',
	      // update
	      '$currentDate',
	      '$inc',
	      '$min',
	      '$max',
	      '$mul',
	      '$rename',
	      '$set',
	      '$setOnInsert',
	      '$unset',
	      '$addToSet',
	      '$pop',
	      '$pull',
	      '$push',
	      '$pullAll',
	      '$each',
	      '$position',
	      '$slice',
	      '$sort',
	      '$bit',
	      // aggregation pipeline stages
	      '$addFields',
	      '$bucket',
	      '$bucketAuto',
	      '$collStats',
	      '$count',
	      '$currentOp',
	      '$facet',
	      '$geoNear',
	      '$graphLookup',
	      '$group',
	      '$indexStats',
	      '$limit',
	      '$listLocalSessions',
	      '$listSessions',
	      '$lookup',
	      '$match',
	      '$merge',
	      '$out',
	      '$planCacheStats',
	      '$project',
	      '$redact',
	      '$replaceRoot',
	      '$replaceWith',
	      '$sample',
	      '$set',
	      '$skip',
	      '$sort',
	      '$sortByCount',
	      '$unionWith',
	      '$unset',
	      '$unwind',
	      '$setWindowFields',
	      // aggregation pipeline operators
	      '$abs',
	      '$accumulator',
	      '$acos',
	      '$acosh',
	      '$add',
	      '$addToSet',
	      '$allElementsTrue',
	      '$and',
	      '$anyElementTrue',
	      '$arrayElemAt',
	      '$arrayToObject',
	      '$asin',
	      '$asinh',
	      '$atan',
	      '$atan2',
	      '$atanh',
	      '$avg',
	      '$binarySize',
	      '$bsonSize',
	      '$ceil',
	      '$cmp',
	      '$concat',
	      '$concatArrays',
	      '$cond',
	      '$convert',
	      '$cos',
	      '$dateFromParts',
	      '$dateToParts',
	      '$dateFromString',
	      '$dateToString',
	      '$dayOfMonth',
	      '$dayOfWeek',
	      '$dayOfYear',
	      '$degreesToRadians',
	      '$divide',
	      '$eq',
	      '$exp',
	      '$filter',
	      '$first',
	      '$floor',
	      '$function',
	      '$gt',
	      '$gte',
	      '$hour',
	      '$ifNull',
	      '$in',
	      '$indexOfArray',
	      '$indexOfBytes',
	      '$indexOfCP',
	      '$isArray',
	      '$isNumber',
	      '$isoDayOfWeek',
	      '$isoWeek',
	      '$isoWeekYear',
	      '$last',
	      '$last',
	      '$let',
	      '$literal',
	      '$ln',
	      '$log',
	      '$log10',
	      '$lt',
	      '$lte',
	      '$ltrim',
	      '$map',
	      '$max',
	      '$mergeObjects',
	      '$meta',
	      '$min',
	      '$millisecond',
	      '$minute',
	      '$mod',
	      '$month',
	      '$multiply',
	      '$ne',
	      '$not',
	      '$objectToArray',
	      '$or',
	      '$pow',
	      '$push',
	      '$radiansToDegrees',
	      '$range',
	      '$reduce',
	      '$regexFind',
	      '$regexFindAll',
	      '$regexMatch',
	      '$replaceOne',
	      '$replaceAll',
	      '$reverseArray',
	      '$round',
	      '$rtrim',
	      '$second',
	      '$setDifference',
	      '$setEquals',
	      '$setIntersection',
	      '$setIsSubset',
	      '$setUnion',
	      '$size',
	      '$sin',
	      '$slice',
	      '$split',
	      '$sqrt',
	      '$stdDevPop',
	      '$stdDevSamp',
	      '$strcasecmp',
	      '$strLenBytes',
	      '$strLenCP',
	      '$substr',
	      '$substrBytes',
	      '$substrCP',
	      '$subtract',
	      '$sum',
	      '$switch',
	      '$tan',
	      '$toBool',
	      '$toDate',
	      '$toDecimal',
	      '$toDouble',
	      '$toInt',
	      '$toLong',
	      '$toObjectId',
	      '$toString',
	      '$toLower',
	      '$toUpper',
	      '$trim',
	      '$trunc',
	      '$type',
	      '$week',
	      '$year',
	      '$zip',
	      '$count',
	      '$dateAdd',
	      '$dateDiff',
	      '$dateSubtract',
	      '$dateTrunc',
	      '$getField',
	      '$rand',
	      '$sampleRate',
	      '$setField',
	      '$unsetField',
	      // aggregation pipeline query modifiers
	      '$comment',
	      '$explain',
	      '$hint',
	      '$max',
	      '$maxTimeMS',
	      '$min',
	      '$orderby',
	      '$query',
	      '$returnKey',
	      '$showDiskLoc',
	      '$natural'
	    ];
	    var builtinFunctions = [
	      'ObjectId',
	      'Code',
	      'BinData',
	      'DBRef',
	      'Timestamp',
	      'NumberLong',
	      'NumberDecimal',
	      'MaxKey',
	      'MinKey',
	      'RegExp',
	      'ISODate',
	      'UUID'
	    ];
	    operators = operators.map(function (operator) {
	      return operator.replace('$', '\\$')
	    });
	    var operatorsSource = '(?:' + operators.join('|') + ')\\b';
	    Prism.languages.mongodb = Prism.languages.extend('javascript', {});
	    Prism.languages.insertBefore('mongodb', 'string', {
	      property: {
	        pattern:
	          /(?:(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)(?=\s*:)/,
	        greedy: true,
	        inside: {
	          keyword: RegExp('^([\'"])?' + operatorsSource + '(?:\\1)?$')
	        }
	      }
	    });
	    Prism.languages.mongodb.string.inside = {
	      url: {
	        // url pattern
	        pattern:
	          /https?:\/\/[-\w@:%.+~#=]{1,256}\.[a-z0-9()]{1,6}\b[-\w()@:%+.~#?&/=]*/i,
	        greedy: true
	      },
	      entity: {
	        // ipv4
	        pattern:
	          /\b(?:(?:[01]?\d\d?|2[0-4]\d|25[0-5])\.){3}(?:[01]?\d\d?|2[0-4]\d|25[0-5])\b/,
	        greedy: true
	      }
	    };
	    Prism.languages.insertBefore('mongodb', 'constant', {
	      builtin: {
	        pattern: RegExp('\\b(?:' + builtinFunctions.join('|') + ')\\b'),
	        alias: 'keyword'
	      }
	    });
	  })(Prism);
	}

	// @ts-nocheck
	monkey.displayName = 'monkey';
	monkey.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function monkey(Prism) {
	  Prism.languages.monkey = {
	    comment: {
	      pattern: /^#Rem\s[\s\S]*?^#End|'.+/im,
	      greedy: true
	    },
	    string: {
	      pattern: /"[^"\r\n]*"/,
	      greedy: true
	    },
	    preprocessor: {
	      pattern: /(^[ \t]*)#.+/m,
	      lookbehind: true,
	      greedy: true,
	      alias: 'property'
	    },
	    function: /\b\w+(?=\()/,
	    'type-char': {
	      pattern: /\b[?%#$]/,
	      alias: 'class-name'
	    },
	    number: {
	      pattern:
	        /((?:\.\.)?)(?:(?:\b|\B-\.?|\B\.)\d+(?:(?!\.\.)\.\d*)?|\$[\da-f]+)/i,
	      lookbehind: true
	    },
	    keyword:
	      /\b(?:Abstract|Array|Bool|Case|Catch|Class|Const|Continue|Default|Eachin|Else|ElseIf|End|EndIf|Exit|Extends|Extern|False|Field|Final|Float|For|Forever|Function|Global|If|Implements|Import|Inline|Int|Interface|Local|Method|Module|New|Next|Null|Object|Private|Property|Public|Repeat|Return|Select|Self|Step|Strict|String|Super|Then|Throw|To|True|Try|Until|Void|Wend|While)\b/i,
	    operator:
	      /\.\.|<[=>]?|>=?|:?=|(?:[+\-*\/&~|]|\b(?:Mod|Shl|Shr)\b)=?|\b(?:And|Not|Or)\b/i,
	    punctuation: /[.,:;()\[\]]/
	  };
	}

	// @ts-nocheck
	moonscript.displayName = 'moonscript';
	moonscript.aliases = ['moon'];

	/** @type {import('../core.js').Syntax} */
	function moonscript(Prism) {
	  Prism.languages.moonscript = {
	    comment: /--.*/,
	    string: [
	      {
	        pattern: /'[^']*'|\[(=*)\[[\s\S]*?\]\1\]/,
	        greedy: true
	      },
	      {
	        pattern: /"[^"]*"/,
	        greedy: true,
	        inside: {
	          interpolation: {
	            pattern: /#\{[^{}]*\}/,
	            inside: {
	              moonscript: {
	                pattern: /(^#\{)[\s\S]+(?=\})/,
	                lookbehind: true,
	                inside: null // see beow
	              },

	              'interpolation-punctuation': {
	                pattern: /#\{|\}/,
	                alias: 'punctuation'
	              }
	            }
	          }
	        }
	      }
	    ],
	    'class-name': [
	      {
	        pattern: /(\b(?:class|extends)[ \t]+)\w+/,
	        lookbehind: true
	      },
	      // class-like names start with a capital letter
	      /\b[A-Z]\w*/
	    ],
	    keyword:
	      /\b(?:class|continue|do|else|elseif|export|extends|for|from|if|import|in|local|nil|return|self|super|switch|then|unless|using|when|while|with)\b/,
	    variable: /@@?\w*/,
	    property: {
	      pattern: /\b(?!\d)\w+(?=:)|(:)(?!\d)\w+/,
	      lookbehind: true
	    },
	    function: {
	      pattern:
	        /\b(?:_G|_VERSION|assert|collectgarbage|coroutine\.(?:create|resume|running|status|wrap|yield)|debug\.(?:debug|getfenv|gethook|getinfo|getlocal|getmetatable|getregistry|getupvalue|setfenv|sethook|setlocal|setmetatable|setupvalue|traceback)|dofile|error|getfenv|getmetatable|io\.(?:close|flush|input|lines|open|output|popen|read|stderr|stdin|stdout|tmpfile|type|write)|ipairs|load|loadfile|loadstring|math\.(?:abs|acos|asin|atan|atan2|ceil|cos|cosh|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|pi|pow|rad|random|randomseed|sin|sinh|sqrt|tan|tanh)|module|next|os\.(?:clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)|package\.(?:cpath|loaded|loadlib|path|preload|seeall)|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|string\.(?:byte|char|dump|find|format|gmatch|gsub|len|lower|match|rep|reverse|sub|upper)|table\.(?:concat|insert|maxn|remove|sort)|tonumber|tostring|type|unpack|xpcall)\b/,
	      inside: {
	        punctuation: /\./
	      }
	    },
	    boolean: /\b(?:false|true)\b/,
	    number:
	      /(?:\B\.\d+|\b\d+\.\d+|\b\d+(?=[eE]))(?:[eE][-+]?\d+)?\b|\b(?:0x[a-fA-F\d]+|\d+)(?:U?LL)?\b/,
	    operator:
	      /\.{3}|[-=]>|~=|(?:[-+*/%<>!=]|\.\.)=?|[:#^]|\b(?:and|or)\b=?|\b(?:not)\b/,
	    punctuation: /[.,()[\]{}\\]/
	  };
	  Prism.languages.moonscript.string[1].inside.interpolation.inside.moonscript.inside =
	    Prism.languages.moonscript;
	  Prism.languages.moon = Prism.languages.moonscript;
	}

	// @ts-nocheck
	n1ql.displayName = 'n1ql';
	n1ql.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function n1ql(Prism) {
	  // https://docs.couchbase.com/server/current/n1ql/n1ql-language-reference/index.html

	  Prism.languages.n1ql = {
	    comment: {
	      pattern: /\/\*[\s\S]*?(?:$|\*\/)|--.*/,
	      greedy: true
	    },
	    string: {
	      pattern: /(["'])(?:\\[\s\S]|(?!\1)[^\\]|\1\1)*\1/,
	      greedy: true
	    },
	    identifier: {
	      pattern: /`(?:\\[\s\S]|[^\\`]|``)*`/,
	      greedy: true
	    },
	    parameter: /\$[\w.]+/,
	    // https://docs.couchbase.com/server/current/n1ql/n1ql-language-reference/reservedwords.html#n1ql-reserved-words
	    keyword:
	      /\b(?:ADVISE|ALL|ALTER|ANALYZE|AS|ASC|AT|BEGIN|BINARY|BOOLEAN|BREAK|BUCKET|BUILD|BY|CALL|CAST|CLUSTER|COLLATE|COLLECTION|COMMIT|COMMITTED|CONNECT|CONTINUE|CORRELATE|CORRELATED|COVER|CREATE|CURRENT|DATABASE|DATASET|DATASTORE|DECLARE|DECREMENT|DELETE|DERIVED|DESC|DESCRIBE|DISTINCT|DO|DROP|EACH|ELEMENT|EXCEPT|EXCLUDE|EXECUTE|EXPLAIN|FETCH|FILTER|FLATTEN|FLUSH|FOLLOWING|FOR|FORCE|FROM|FTS|FUNCTION|GOLANG|GRANT|GROUP|GROUPS|GSI|HASH|HAVING|IF|IGNORE|ILIKE|INCLUDE|INCREMENT|INDEX|INFER|INLINE|INNER|INSERT|INTERSECT|INTO|IS|ISOLATION|JAVASCRIPT|JOIN|KEY|KEYS|KEYSPACE|KNOWN|LANGUAGE|LAST|LEFT|LET|LETTING|LEVEL|LIMIT|LSM|MAP|MAPPING|MATCHED|MATERIALIZED|MERGE|MINUS|MISSING|NAMESPACE|NEST|NL|NO|NTH_VALUE|NULL|NULLS|NUMBER|OBJECT|OFFSET|ON|OPTION|OPTIONS|ORDER|OTHERS|OUTER|OVER|PARSE|PARTITION|PASSWORD|PATH|POOL|PRECEDING|PREPARE|PRIMARY|PRIVATE|PRIVILEGE|PROBE|PROCEDURE|PUBLIC|RANGE|RAW|REALM|REDUCE|RENAME|RESPECT|RETURN|RETURNING|REVOKE|RIGHT|ROLE|ROLLBACK|ROW|ROWS|SATISFIES|SAVEPOINT|SCHEMA|SCOPE|SELECT|SELF|SEMI|SET|SHOW|SOME|START|STATISTICS|STRING|SYSTEM|TIES|TO|TRAN|TRANSACTION|TRIGGER|TRUNCATE|UNBOUNDED|UNDER|UNION|UNIQUE|UNKNOWN|UNNEST|UNSET|UPDATE|UPSERT|USE|USER|USING|VALIDATE|VALUE|VALUES|VIA|VIEW|WHERE|WHILE|WINDOW|WITH|WORK|XOR)\b/i,
	    function: /\b[a-z_]\w*(?=\s*\()/i,
	    boolean: /\b(?:FALSE|TRUE)\b/i,
	    number: /(?:\b\d+\.|\B\.)\d+e[+\-]?\d+\b|\b\d+(?:\.\d*)?|\B\.\d+\b/i,
	    operator:
	      /[-+*\/%]|!=|==?|\|\||<[>=]?|>=?|\b(?:AND|ANY|ARRAY|BETWEEN|CASE|ELSE|END|EVERY|EXISTS|FIRST|IN|LIKE|NOT|OR|THEN|VALUED|WHEN|WITHIN)\b/i,
	    punctuation: /[;[\](),.{}:]/
	  };
	}

	// @ts-nocheck
	nand2tetrisHdl.displayName = 'nand2tetris-hdl';
	nand2tetrisHdl.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function nand2tetrisHdl(Prism) {
	  Prism.languages['nand2tetris-hdl'] = {
	    comment: /\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,
	    keyword: /\b(?:BUILTIN|CHIP|CLOCKED|IN|OUT|PARTS)\b/,
	    boolean: /\b(?:false|true)\b/,
	    function: /\b[A-Za-z][A-Za-z0-9]*(?=\()/,
	    number: /\b\d+\b/,
	    operator: /=|\.\./,
	    punctuation: /[{}[\];(),:]/
	  };
	}

	// @ts-nocheck
	naniscript.displayName = 'naniscript';
	naniscript.aliases = ['nani'];

	/** @type {import('../core.js').Syntax} */
	function naniscript(Prism) {
	(function (Prism) {
	    var expressionDef = /\{[^\r\n\[\]{}]*\}/;
	    var params = {
	      'quoted-string': {
	        pattern: /"(?:[^"\\]|\\.)*"/,
	        alias: 'operator'
	      },
	      'command-param-id': {
	        pattern: /(\s)\w+:/,
	        lookbehind: true,
	        alias: 'property'
	      },
	      'command-param-value': [
	        {
	          pattern: expressionDef,
	          alias: 'selector'
	        },
	        {
	          pattern: /([\t ])\S+/,
	          lookbehind: true,
	          greedy: true,
	          alias: 'operator'
	        },
	        {
	          pattern: /\S(?:.*\S)?/,
	          alias: 'operator'
	        }
	      ]
	    };
	    Prism.languages.naniscript = {
	      // ; ...
	      comment: {
	        pattern: /^([\t ]*);.*/m,
	        lookbehind: true
	      },
	      // > ...
	      // Define is a control line starting with '>' followed by a word, a space and a text.
	      define: {
	        pattern: /^>.+/m,
	        alias: 'tag',
	        inside: {
	          value: {
	            pattern: /(^>\w+[\t ]+)(?!\s)[^{}\r\n]+/,
	            lookbehind: true,
	            alias: 'operator'
	          },
	          key: {
	            pattern: /(^>)\w+/,
	            lookbehind: true
	          }
	        }
	      },
	      // # ...
	      label: {
	        pattern: /^([\t ]*)#[\t ]*\w+[\t ]*$/m,
	        lookbehind: true,
	        alias: 'regex'
	      },
	      command: {
	        pattern: /^([\t ]*)@\w+(?=[\t ]|$).*/m,
	        lookbehind: true,
	        alias: 'function',
	        inside: {
	          'command-name': /^@\w+/,
	          expression: {
	            pattern: expressionDef,
	            greedy: true,
	            alias: 'selector'
	          },
	          'command-params': {
	            pattern: /\s*\S[\s\S]*/,
	            inside: params
	          }
	        }
	      },
	      // Generic is any line that doesn't start with operators: ;>#@
	      'generic-text': {
	        pattern: /(^[ \t]*)[^#@>;\s].*/m,
	        lookbehind: true,
	        alias: 'punctuation',
	        inside: {
	          // \{ ... \} ... \[ ... \] ... \"
	          'escaped-char': /\\[{}\[\]"]/,
	          expression: {
	            pattern: expressionDef,
	            greedy: true,
	            alias: 'selector'
	          },
	          'inline-command': {
	            pattern: /\[[\t ]*\w[^\r\n\[\]]*\]/,
	            greedy: true,
	            alias: 'function',
	            inside: {
	              'command-params': {
	                pattern: /(^\[[\t ]*\w+\b)[\s\S]+(?=\]$)/,
	                lookbehind: true,
	                inside: params
	              },
	              'command-param-name': {
	                pattern: /^(\[[\t ]*)\w+/,
	                lookbehind: true,
	                alias: 'name'
	              },
	              'start-stop-char': /[\[\]]/
	            }
	          }
	        }
	      }
	    };
	    Prism.languages.nani = Prism.languages['naniscript'];

	    /** @typedef {InstanceType<import("./prism-core")["Token"]>} Token */

	    /**
	     * This hook is used to validate generic-text tokens for balanced brackets.
	     * Mark token as bad-line when contains not balanced brackets: {},[]
	     */
	    Prism.hooks.add('after-tokenize', function (env) {
	      /** @type {(Token | string)[]} */
	      var tokens = env.tokens;
	      tokens.forEach(function (token) {
	        if (typeof token !== 'string' && token.type === 'generic-text') {
	          var content = getTextContent(token);
	          if (!isBracketsBalanced(content)) {
	            token.type = 'bad-line';
	            token.content = content;
	          }
	        }
	      });
	    });

	    /**
	     * @param {string} input
	     * @returns {boolean}
	     */
	    function isBracketsBalanced(input) {
	      var brackets = '[]{}';
	      var stack = [];
	      for (var i = 0; i < input.length; i++) {
	        var bracket = input[i];
	        var bracketsIndex = brackets.indexOf(bracket);
	        if (bracketsIndex !== -1) {
	          if (bracketsIndex % 2 === 0) {
	            stack.push(bracketsIndex + 1);
	          } else if (stack.pop() !== bracketsIndex) {
	            return false
	          }
	        }
	      }
	      return stack.length === 0
	    }

	    /**
	     * @param {string | Token | (string | Token)[]} token
	     * @returns {string}
	     */
	    function getTextContent(token) {
	      if (typeof token === 'string') {
	        return token
	      } else if (Array.isArray(token)) {
	        return token.map(getTextContent).join('')
	      } else {
	        return getTextContent(token.content)
	      }
	    }
	  })(Prism);
	}

	// @ts-nocheck
	nasm.displayName = 'nasm';
	nasm.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function nasm(Prism) {
	  Prism.languages.nasm = {
	    comment: /;.*$/m,
	    string: /(["'`])(?:\\.|(?!\1)[^\\\r\n])*\1/,
	    label: {
	      pattern: /(^\s*)[A-Za-z._?$][\w.?$@~#]*:/m,
	      lookbehind: true,
	      alias: 'function'
	    },
	    keyword: [
	      /\[?BITS (?:16|32|64)\]?/,
	      {
	        pattern: /(^\s*)section\s*[a-z.]+:?/im,
	        lookbehind: true
	      },
	      /(?:extern|global)[^;\r\n]*/i,
	      /(?:CPU|DEFAULT|FLOAT).*$/m
	    ],
	    register: {
	      pattern:
	        /\b(?:st\d|[xyz]mm\d\d?|[cdt]r\d|r\d\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(?:bp|di|si|sp)|[cdefgs]s)\b/i,
	      alias: 'variable'
	    },
	    number:
	      /(?:\b|(?=\$))(?:0[hx](?:\.[\da-f]+|[\da-f]+(?:\.[\da-f]+)?)(?:p[+-]?\d+)?|\d[\da-f]+[hx]|\$\d[\da-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0[dt]\d+|(?:\d+(?:\.\d+)?|\.\d+)(?:\.?e[+-]?\d+)?[dt]?)\b/i,
	    operator: /[\[\]*+\-\/%<>=&|$!]/
	  };
	}

	// @ts-nocheck
	neon.displayName = 'neon';
	neon.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function neon(Prism) {
	  Prism.languages.neon = {
	    comment: {
	      pattern: /#.*/,
	      greedy: true
	    },
	    datetime: {
	      pattern:
	        /(^|[[{(=:,\s])\d\d\d\d-\d\d?-\d\d?(?:(?:[Tt]| +)\d\d?:\d\d:\d\d(?:\.\d*)? *(?:Z|[-+]\d\d?(?::?\d\d)?)?)?(?=$|[\]}),\s])/,
	      lookbehind: true,
	      alias: 'number'
	    },
	    key: {
	      pattern: /(^|[[{(,\s])[^,:=[\]{}()'"\s]+(?=\s*:(?:$|[\]}),\s])|\s*=)/,
	      lookbehind: true,
	      alias: 'property'
	    },
	    number: {
	      pattern:
	        /(^|[[{(=:,\s])[+-]?(?:0x[\da-fA-F]+|0o[0-7]+|0b[01]+|(?:\d+(?:\.\d*)?|\.?\d+)(?:[eE][+-]?\d+)?)(?=$|[\]}),:=\s])/,
	      lookbehind: true
	    },
	    boolean: {
	      pattern: /(^|[[{(=:,\s])(?:false|no|true|yes)(?=$|[\]}),:=\s])/i,
	      lookbehind: true
	    },
	    null: {
	      pattern: /(^|[[{(=:,\s])(?:null)(?=$|[\]}),:=\s])/i,
	      lookbehind: true,
	      alias: 'keyword'
	    },
	    string: {
	      pattern:
	        /(^|[[{(=:,\s])(?:('''|""")\r?\n(?:(?:[^\r\n]|\r?\n(?![\t ]*\2))*\r?\n)?[\t ]*\2|'[^'\r\n]*'|"(?:\\.|[^\\"\r\n])*")/,
	      lookbehind: true,
	      greedy: true
	    },
	    literal: {
	      pattern:
	        /(^|[[{(=:,\s])(?:[^#"',:=[\]{}()\s`-]|[:-][^"',=[\]{}()\s])(?:[^,:=\]})(\s]|:(?![\s,\]})]|$)|[ \t]+[^#,:=\]})(\s])*/,
	      lookbehind: true,
	      alias: 'string'
	    },
	    punctuation: /[,:=[\]{}()-]/
	  };
	}

	// @ts-nocheck
	nevod.displayName = 'nevod';
	nevod.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function nevod(Prism) {
	  Prism.languages.nevod = {
	    comment: /\/\/.*|(?:\/\*[\s\S]*?(?:\*\/|$))/,
	    string: {
	      pattern: /(?:"(?:""|[^"])*"(?!")|'(?:''|[^'])*'(?!'))!?\*?/,
	      greedy: true,
	      inside: {
	        'string-attrs': /!$|!\*$|\*$/
	      }
	    },
	    namespace: {
	      pattern: /(@namespace\s+)[a-zA-Z0-9\-.]+(?=\s*\{)/,
	      lookbehind: true
	    },
	    pattern: {
	      pattern:
	        /(@pattern\s+)?#?[a-zA-Z0-9\-.]+(?:\s*\(\s*(?:~\s*)?[a-zA-Z0-9\-.]+\s*(?:,\s*(?:~\s*)?[a-zA-Z0-9\-.]*)*\))?(?=\s*=)/,
	      lookbehind: true,
	      inside: {
	        'pattern-name': {
	          pattern: /^#?[a-zA-Z0-9\-.]+/,
	          alias: 'class-name'
	        },
	        fields: {
	          pattern: /\(.*\)/,
	          inside: {
	            'field-name': {
	              pattern: /[a-zA-Z0-9\-.]+/,
	              alias: 'variable'
	            },
	            punctuation: /[,()]/,
	            operator: {
	              pattern: /~/,
	              alias: 'field-hidden-mark'
	            }
	          }
	        }
	      }
	    },
	    search: {
	      pattern: /(@search\s+|#)[a-zA-Z0-9\-.]+(?:\.\*)?(?=\s*;)/,
	      alias: 'function',
	      lookbehind: true
	    },
	    keyword:
	      /@(?:having|inside|namespace|outside|pattern|require|search|where)\b/,
	    'standard-pattern': {
	      pattern:
	        /\b(?:Alpha|AlphaNum|Any|Blank|End|LineBreak|Num|NumAlpha|Punct|Space|Start|Symbol|Word|WordBreak)\b(?:\([a-zA-Z0-9\-.,\s+]*\))?/,
	      inside: {
	        'standard-pattern-name': {
	          pattern: /^[a-zA-Z0-9\-.]+/,
	          alias: 'builtin'
	        },
	        quantifier: {
	          pattern: /\b\d+(?:\s*\+|\s*-\s*\d+)?(?!\w)/,
	          alias: 'number'
	        },
	        'standard-pattern-attr': {
	          pattern: /[a-zA-Z0-9\-.]+/,
	          alias: 'builtin'
	        },
	        punctuation: /[,()]/
	      }
	    },
	    quantifier: {
	      pattern: /\b\d+(?:\s*\+|\s*-\s*\d+)?(?!\w)/,
	      alias: 'number'
	    },
	    operator: [
	      {
	        pattern: /=/,
	        alias: 'pattern-def'
	      },
	      {
	        pattern: /&/,
	        alias: 'conjunction'
	      },
	      {
	        pattern: /~/,
	        alias: 'exception'
	      },
	      {
	        pattern: /\?/,
	        alias: 'optionality'
	      },
	      {
	        pattern: /[[\]]/,
	        alias: 'repetition'
	      },
	      {
	        pattern: /[{}]/,
	        alias: 'variation'
	      },
	      {
	        pattern: /[+_]/,
	        alias: 'sequence'
	      },
	      {
	        pattern: /\.{2,3}/,
	        alias: 'span'
	      }
	    ],
	    'field-capture': [
	      {
	        pattern:
	          /([a-zA-Z0-9\-.]+\s*\()\s*[a-zA-Z0-9\-.]+\s*:\s*[a-zA-Z0-9\-.]+(?:\s*,\s*[a-zA-Z0-9\-.]+\s*:\s*[a-zA-Z0-9\-.]+)*(?=\s*\))/,
	        lookbehind: true,
	        inside: {
	          'field-name': {
	            pattern: /[a-zA-Z0-9\-.]+/,
	            alias: 'variable'
	          },
	          colon: /:/
	        }
	      },
	      {
	        pattern: /[a-zA-Z0-9\-.]+\s*:/,
	        inside: {
	          'field-name': {
	            pattern: /[a-zA-Z0-9\-.]+/,
	            alias: 'variable'
	          },
	          colon: /:/
	        }
	      }
	    ],
	    punctuation: /[:;,()]/,
	    name: /[a-zA-Z0-9\-.]+/
	  };
	}

	// @ts-nocheck
	nginx.displayName = 'nginx';
	nginx.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function nginx(Prism) {
	(function (Prism) {
	    var variable =
	      /\$(?:\w[a-z\d]*(?:_[^\x00-\x1F\s"'\\()$]*)?|\{[^}\s"'\\]+\})/i;
	    Prism.languages.nginx = {
	      comment: {
	        pattern: /(^|[\s{};])#.*/,
	        lookbehind: true,
	        greedy: true
	      },
	      directive: {
	        pattern:
	          /(^|\s)\w(?:[^;{}"'\\\s]|\\.|"(?:[^"\\]|\\.)*"|'(?:[^'\\]|\\.)*'|\s+(?:#.*(?!.)|(?![#\s])))*?(?=\s*[;{])/,
	        lookbehind: true,
	        greedy: true,
	        inside: {
	          string: {
	            pattern:
	              /((?:^|[^\\])(?:\\\\)*)(?:"(?:[^"\\]|\\.)*"|'(?:[^'\\]|\\.)*')/,
	            lookbehind: true,
	            greedy: true,
	            inside: {
	              escape: {
	                pattern: /\\["'\\nrt]/,
	                alias: 'entity'
	              },
	              variable: variable
	            }
	          },
	          comment: {
	            pattern: /(\s)#.*/,
	            lookbehind: true,
	            greedy: true
	          },
	          keyword: {
	            pattern: /^\S+/,
	            greedy: true
	          },
	          // other patterns

	          boolean: {
	            pattern: /(\s)(?:off|on)(?!\S)/,
	            lookbehind: true
	          },
	          number: {
	            pattern: /(\s)\d+[a-z]*(?!\S)/i,
	            lookbehind: true
	          },
	          variable: variable
	        }
	      },
	      punctuation: /[{};]/
	    };
	  })(Prism);
	}

	// @ts-nocheck
	nim.displayName = 'nim';
	nim.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function nim(Prism) {
	  Prism.languages.nim = {
	    comment: {
	      pattern: /#.*/,
	      greedy: true
	    },
	    string: {
	      // Double-quoted strings can be prefixed by an identifier (Generalized raw string literals)
	      pattern:
	        /(?:\b(?!\d)(?:\w|\\x[89a-fA-F][0-9a-fA-F])+)?(?:"""[\s\S]*?"""(?!")|"(?:\\[\s\S]|""|[^"\\])*")/,
	      greedy: true
	    },
	    char: {
	      // Character literals are handled specifically to prevent issues with numeric type suffixes
	      pattern: /'(?:\\(?:\d+|x[\da-fA-F]{0,2}|.)|[^'])'/,
	      greedy: true
	    },
	    function: {
	      pattern:
	        /(?:(?!\d)(?:\w|\\x[89a-fA-F][0-9a-fA-F])+|`[^`\r\n]+`)\*?(?:\[[^\]]+\])?(?=\s*\()/,
	      greedy: true,
	      inside: {
	        operator: /\*$/
	      }
	    },
	    // We don't want to highlight operators (and anything really) inside backticks
	    identifier: {
	      pattern: /`[^`\r\n]+`/,
	      greedy: true,
	      inside: {
	        punctuation: /`/
	      }
	    },
	    // The negative look ahead prevents wrong highlighting of the .. operator
	    number:
	      /\b(?:0[xXoObB][\da-fA-F_]+|\d[\d_]*(?:(?!\.\.)\.[\d_]*)?(?:[eE][+-]?\d[\d_]*)?)(?:'?[iuf]\d*)?/,
	    keyword:
	      /\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\b/,
	    operator: {
	      // Look behind and look ahead prevent wrong highlighting of punctuations [. .] {. .} (. .)
	      // but allow the slice operator .. to take precedence over them
	      // One can define his own operators in Nim so all combination of operators might be an operator.
	      pattern:
	        /(^|[({\[](?=\.\.)|(?![({\[]\.).)(?:(?:[=+\-*\/<>@$~&%|!?^:\\]|\.\.|\.(?![)}\]]))+|\b(?:and|div|in|is|isnot|mod|not|notin|of|or|shl|shr|xor)\b)/m,
	      lookbehind: true
	    },
	    punctuation: /[({\[]\.|\.[)}\]]|[`(){}\[\],:]/
	  };
	}

	// @ts-nocheck
	nix.displayName = 'nix';
	nix.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function nix(Prism) {
	  Prism.languages.nix = {
	    comment: {
	      pattern: /\/\*[\s\S]*?\*\/|#.*/,
	      greedy: true
	    },
	    string: {
	      pattern: /"(?:[^"\\]|\\[\s\S])*"|''(?:(?!'')[\s\S]|''(?:'|\\|\$\{))*''/,
	      greedy: true,
	      inside: {
	        interpolation: {
	          // The lookbehind ensures the ${} is not preceded by \ or ''
	          pattern: /(^|(?:^|(?!'').)[^\\])\$\{(?:[^{}]|\{[^}]*\})*\}/,
	          lookbehind: true,
	          inside: null // see below
	        }
	      }
	    },

	    url: [
	      /\b(?:[a-z]{3,7}:\/\/)[\w\-+%~\/.:#=?&]+/,
	      {
	        pattern:
	          /([^\/])(?:[\w\-+%~.:#=?&]*(?!\/\/)[\w\-+%~\/.:#=?&])?(?!\/\/)\/[\w\-+%~\/.:#=?&]*/,
	        lookbehind: true
	      }
	    ],
	    antiquotation: {
	      pattern: /\$(?=\{)/,
	      alias: 'important'
	    },
	    number: /\b\d+\b/,
	    keyword: /\b(?:assert|builtins|else|if|in|inherit|let|null|or|then|with)\b/,
	    function:
	      /\b(?:abort|add|all|any|attrNames|attrValues|baseNameOf|compareVersions|concatLists|currentSystem|deepSeq|derivation|dirOf|div|elem(?:At)?|fetch(?:Tarball|url)|filter(?:Source)?|fromJSON|genList|getAttr|getEnv|hasAttr|hashString|head|import|intersectAttrs|is(?:Attrs|Bool|Function|Int|List|Null|String)|length|lessThan|listToAttrs|map|mul|parseDrvName|pathExists|read(?:Dir|File)|removeAttrs|replaceStrings|seq|sort|stringLength|sub(?:string)?|tail|throw|to(?:File|JSON|Path|String|XML)|trace|typeOf)\b|\bfoldl'\B/,
	    boolean: /\b(?:false|true)\b/,
	    operator: /[=!<>]=?|\+\+?|\|\||&&|\/\/|->?|[?@]/,
	    punctuation: /[{}()[\].,:;]/
	  };
	  Prism.languages.nix.string.inside.interpolation.inside = Prism.languages.nix;
	}

	// @ts-nocheck
	nsis.displayName = 'nsis';
	nsis.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function nsis(Prism) {
	  /**
	   * Original by Jan T. Sott (http://github.com/idleberg)
	   *
	   * Includes all commands and plug-ins shipped with NSIS 3.08
	   */
	  Prism.languages.nsis = {
	    comment: {
	      pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|[#;].*)/,
	      lookbehind: true,
	      greedy: true
	    },
	    string: {
	      pattern: /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
	      greedy: true
	    },
	    keyword: {
	      pattern:
	        /(^[\t ]*)(?:Abort|Add(?:BrandingImage|Size)|AdvSplash|Allow(?:RootDirInstall|SkipFiles)|AutoCloseWindow|BG(?:Font|Gradient|Image)|Banner|BrandingText|BringToFront|CRCCheck|Call(?:InstDLL)?|Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|Create(?:Directory|Font|ShortCut)|Delete(?:INISec|INIStr|RegKey|RegValue)?|Detail(?:Print|sButtonText)|Dialer|Dir(?:Text|Var|Verify)|EnableWindow|Enum(?:RegKey|RegValue)|Exch|Exec(?:Shell(?:Wait)?|Wait)?|ExpandEnvStrings|File(?:BufSize|Close|ErrorText|Open|Read|ReadByte|ReadUTF16LE|ReadWord|Seek|Write|WriteByte|WriteUTF16LE|WriteWord)?|Find(?:Close|First|Next|Window)|FlushINI|Get(?:CurInstType|CurrentAddress|DLLVersion(?:Local)?|DlgItem|ErrorLevel|FileTime(?:Local)?|FullPathName|Function(?:Address|End)?|InstDirError|KnownFolderPath|LabelAddress|TempFileName|WinVer)|Goto|HideWindow|Icon|If(?:Abort|Errors|FileExists|RebootFlag|RtlLanguage|ShellVarContextAll|Silent)|InitPluginsDir|InstProgressFlags|Inst(?:Type(?:GetText|SetText)?)|Install(?:ButtonText|Colors|Dir(?:RegKey)?)|Int(?:64|Ptr)?CmpU?|Int(?:64)?Fmt|Int(?:Ptr)?Op|IsWindow|Lang(?:DLL|String)|License(?:BkColor|Data|ForceSelection|LangString|Text)|LoadLanguageFile|LockWindow|Log(?:Set|Text)|Manifest(?:DPIAware|SupportedOS)|Math|MessageBox|MiscButtonText|NSISdl|Name|Nop|OutFile|PE(?:DllCharacteristics|SubsysVer)|Page(?:Callbacks)?|Pop|Push|Quit|RMDir|Read(?:EnvStr|INIStr|RegDWORD|RegStr)|Reboot|RegDLL|Rename|RequestExecutionLevel|ReserveFile|Return|SearchPath|Section(?:End|GetFlags|GetInstTypes|GetSize|GetText|Group|In|SetFlags|SetInstTypes|SetSize|SetText)?|SendMessage|Set(?:AutoClose|BrandingImage|Compress|Compressor(?:DictSize)?|CtlColors|CurInstType|DatablockOptimize|DateSave|Details(?:Print|View)|ErrorLevel|Errors|FileAttributes|Font|OutPath|Overwrite|PluginUnload|RebootFlag|RegView|ShellVarContext|Silent)|Show(?:InstDetails|UninstDetails|Window)|Silent(?:Install|UnInstall)|Sleep|SpaceTexts|Splash|StartMenu|Str(?:CmpS?|Cpy|Len)|SubCaption|System|Target|UnRegDLL|Unicode|UninstPage|Uninstall(?:ButtonText|Caption|Icon|SubCaption|Text)|UserInfo|VI(?:AddVersionKey|FileVersion|ProductVersion)|VPatch|Var|WindowIcon|Write(?:INIStr|Reg(?:Bin|DWORD|ExpandStr|MultiStr|None|Str)|Uninstaller)|XPStyle|ns(?:Dialogs|Exec))\b/m,
	      lookbehind: true
	    },
	    property:
	      /\b(?:ARCHIVE|FILE_(?:ATTRIBUTE_ARCHIVE|ATTRIBUTE_NORMAL|ATTRIBUTE_OFFLINE|ATTRIBUTE_READONLY|ATTRIBUTE_SYSTEM|ATTRIBUTE_TEMPORARY)|HK(?:(?:CR|CU|LM)(?:32|64)?|DD|PD|U)|HKEY_(?:CLASSES_ROOT|CURRENT_CONFIG|CURRENT_USER|DYN_DATA|LOCAL_MACHINE|PERFORMANCE_DATA|USERS)|ID(?:ABORT|CANCEL|IGNORE|NO|OK|RETRY|YES)|MB_(?:ABORTRETRYIGNORE|DEFBUTTON1|DEFBUTTON2|DEFBUTTON3|DEFBUTTON4|ICONEXCLAMATION|ICONINFORMATION|ICONQUESTION|ICONSTOP|OK|OKCANCEL|RETRYCANCEL|RIGHT|RTLREADING|SETFOREGROUND|TOPMOST|USERICON|YESNO)|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SYSTEM|TEMPORARY|admin|all|auto|both|colored|false|force|hide|highest|lastused|leave|listonly|none|normal|notset|off|on|open|print|show|silent|silentlog|smooth|textonly|true|user)\b/,
	    constant: /\$\{[!\w\.:\^-]+\}|\$\([!\w\.:\^-]+\)/,
	    variable: /\$\w[\w\.]*/,
	    number: /\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/,
	    operator: /--?|\+\+?|<=?|>=?|==?=?|&&?|\|\|?|[?*\/~^%]/,
	    punctuation: /[{}[\];(),.:]/,
	    important: {
	      pattern:
	        /(^[\t ]*)!(?:addincludedir|addplugindir|appendfile|cd|define|delfile|echo|else|endif|error|execute|finalize|getdllversion|gettlbversion|if|ifdef|ifmacrodef|ifmacrondef|ifndef|include|insertmacro|macro|macroend|makensis|packhdr|pragma|searchparse|searchreplace|system|tempfile|undef|verbose|warning)\b/im,
	      lookbehind: true
	    }
	  };
	}

	// @ts-nocheck
	ocaml.displayName = 'ocaml';
	ocaml.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function ocaml(Prism) {
	  // https://ocaml.org/manual/lex.html

	  Prism.languages.ocaml = {
	    comment: {
	      pattern: /\(\*[\s\S]*?\*\)/,
	      greedy: true
	    },
	    char: {
	      pattern: /'(?:[^\\\r\n']|\\(?:.|[ox]?[0-9a-f]{1,3}))'/i,
	      greedy: true
	    },
	    string: [
	      {
	        pattern: /"(?:\\(?:[\s\S]|\r\n)|[^\\\r\n"])*"/,
	        greedy: true
	      },
	      {
	        pattern: /\{([a-z_]*)\|[\s\S]*?\|\1\}/,
	        greedy: true
	      }
	    ],
	    number: [
	      // binary and octal
	      /\b(?:0b[01][01_]*|0o[0-7][0-7_]*)\b/i,
	      // hexadecimal
	      /\b0x[a-f0-9][a-f0-9_]*(?:\.[a-f0-9_]*)?(?:p[+-]?\d[\d_]*)?(?!\w)/i,
	      // decimal
	      /\b\d[\d_]*(?:\.[\d_]*)?(?:e[+-]?\d[\d_]*)?(?!\w)/i
	    ],
	    directive: {
	      pattern: /\B#\w+/,
	      alias: 'property'
	    },
	    label: {
	      pattern: /\B~\w+/,
	      alias: 'property'
	    },
	    'type-variable': {
	      pattern: /\B'\w+/,
	      alias: 'function'
	    },
	    variant: {
	      pattern: /`\w+/,
	      alias: 'symbol'
	    },
	    // For the list of keywords and operators,
	    // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84
	    keyword:
	      /\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\b/,
	    boolean: /\b(?:false|true)\b/,
	    'operator-like-punctuation': {
	      pattern: /\[[<>|]|[>|]\]|\{<|>\}/,
	      alias: 'punctuation'
	    },
	    // Custom operators are allowed
	    operator:
	      /\.[.~]|:[=>]|[=<>@^|&+\-*\/$%!?~][!$%&*+\-.\/:<=>?@^|~]*|\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\b/,
	    punctuation: /;;|::|[(){}\[\].,:;#]|\b_\b/
	  };
	}

	// @ts-nocheck
	odin.displayName = 'odin';
	odin.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function odin(Prism) {
	(function (Prism) {
	    var escapes =
	      /\\(?:["'\\abefnrtv]|0[0-7]{2}|U[\dA-Fa-f]{6}|u[\dA-Fa-f]{4}|x[\dA-Fa-f]{2})/;
	    Prism.languages.odin = {
	      /**
	       * The current implementation supports only 1 level of nesting.
	       *
	       * @author Michael Schmidt
	       * @author edukisto
	       */
	      comment: [
	        {
	          pattern:
	            /\/\*(?:[^/*]|\/(?!\*)|\*(?!\/)|\/\*(?:\*(?!\/)|[^*])*(?:\*\/|$))*(?:\*\/|$)/,
	          greedy: true
	        },
	        {
	          pattern: /#![^\n\r]*/,
	          greedy: true
	        },
	        {
	          pattern: /\/\/[^\n\r]*/,
	          greedy: true
	        }
	      ],
	      /**
	       * Should be found before strings because of '"'"- and '`'`-like sequences.
	       */
	      char: {
	        pattern: /'(?:\\(?:.|[0Uux][0-9A-Fa-f]{1,6})|[^\n\r'\\])'/,
	        greedy: true,
	        inside: {
	          symbol: escapes
	        }
	      },
	      string: [
	        {
	          pattern: /`[^`]*`/,
	          greedy: true
	        },
	        {
	          pattern: /"(?:\\.|[^\n\r"\\])*"/,
	          greedy: true,
	          inside: {
	            symbol: escapes
	          }
	        }
	      ],
	      directive: {
	        pattern: /#\w+/,
	        alias: 'property'
	      },
	      number:
	        /\b0(?:b[01_]+|d[\d_]+|h_*(?:(?:(?:[\dA-Fa-f]_*){8}){1,2}|(?:[\dA-Fa-f]_*){4})|o[0-7_]+|x[\dA-F_a-f]+|z[\dAB_ab]+)\b|(?:\b\d+(?:\.(?!\.)\d*)?|\B\.\d+)(?:[Ee][+-]?\d*)?[ijk]?(?!\w)/,
	      discard: {
	        pattern: /\b_\b/,
	        alias: 'keyword'
	      },
	      'procedure-definition': {
	        pattern: /\b\w+(?=[ \t]*(?::\s*){2}proc\b)/,
	        alias: 'function'
	      },
	      keyword:
	        /\b(?:asm|auto_cast|bit_set|break|case|cast|context|continue|defer|distinct|do|dynamic|else|enum|fallthrough|for|foreign|if|import|in|map|matrix|not_in|or_else|or_return|package|proc|return|struct|switch|transmute|typeid|union|using|when|where)\b/,
	      /**
	       * false, nil, true can be used as procedure names. "_" and keywords can't.
	       */
	      'procedure-name': {
	        pattern: /\b\w+(?=[ \t]*\()/,
	        alias: 'function'
	      },
	      boolean: /\b(?:false|nil|true)\b/,
	      'constant-parameter-sign': {
	        pattern: /\$/,
	        alias: 'important'
	      },
	      undefined: {
	        pattern: /---/,
	        alias: 'operator'
	      },
	      arrow: {
	        pattern: /->/,
	        alias: 'punctuation'
	      },
	      operator: /\+\+|--|\.\.[<=]?|(?:&~|[-!*+/=~]|[%&<>|]{1,2})=?|[?^]/,
	      punctuation: /[(),.:;@\[\]{}]/
	    };
	  })(Prism);
	}

	// @ts-nocheck
	opencl.displayName = 'opencl';
	opencl.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function opencl(Prism) {
	  Prism.register(c$1)
	  ;(function (Prism) {
	    /* OpenCL kernel language */
	    Prism.languages.opencl = Prism.languages.extend('c', {
	      // Extracted from the official specs (2.0) and http://streamcomputing.eu/downloads/?opencl.lang (opencl-keywords, opencl-types) and http://sourceforge.net/tracker/?func=detail&aid=2957794&group_id=95717&atid=612384 (Words2, partly Words3)
	      keyword:
	        /\b(?:(?:__)?(?:constant|global|kernel|local|private|read_only|read_write|write_only)|__attribute__|auto|(?:bool|u?(?:char|int|long|short)|half|quad)(?:2|3|4|8|16)?|break|case|complex|const|continue|(?:double|float)(?:16(?:x(?:1|2|4|8|16))?|1x(?:1|2|4|8|16)|2(?:x(?:1|2|4|8|16))?|3|4(?:x(?:1|2|4|8|16))?|8(?:x(?:1|2|4|8|16))?)?|default|do|else|enum|extern|for|goto|if|imaginary|inline|packed|pipe|register|restrict|return|signed|sizeof|static|struct|switch|typedef|uniform|union|unsigned|void|volatile|while)\b/,
	      // Extracted from http://streamcomputing.eu/downloads/?opencl.lang (opencl-const)
	      // Math Constants: https://www.khronos.org/registry/OpenCL/sdk/2.1/docs/man/xhtml/mathConstants.html
	      // Macros and Limits: https://www.khronos.org/registry/OpenCL/sdk/2.1/docs/man/xhtml/macroLimits.html
	      number:
	        /(?:\b0x(?:[\da-f]+(?:\.[\da-f]*)?|\.[\da-f]+)(?:p[+-]?\d+)?|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)[fuhl]{0,4}/i,
	      boolean: /\b(?:false|true)\b/,
	      'constant-opencl-kernel': {
	        pattern:
	          /\b(?:CHAR_(?:BIT|MAX|MIN)|CLK_(?:ADDRESS_(?:CLAMP(?:_TO_EDGE)?|NONE|REPEAT)|FILTER_(?:LINEAR|NEAREST)|(?:GLOBAL|LOCAL)_MEM_FENCE|NORMALIZED_COORDS_(?:FALSE|TRUE))|CL_(?:BGRA|(?:HALF_)?FLOAT|INTENSITY|LUMINANCE|A?R?G?B?[Ax]?|(?:(?:UN)?SIGNED|[US]NORM)_(?:INT(?:8|16|32))|UNORM_(?:INT_101010|SHORT_(?:555|565)))|(?:DBL|FLT|HALF)_(?:DIG|EPSILON|(?:MAX|MIN)(?:(?:_10)?_EXP)?|MANT_DIG)|FLT_RADIX|HUGE_VALF?|(?:INT|LONG|SCHAR|SHRT)_(?:MAX|MIN)|INFINITY|MAXFLOAT|M_(?:[12]_PI|2_SQRTPI|E|LN(?:2|10)|LOG(?:2|10)E?|PI(?:_[24])?|SQRT(?:1_2|2))(?:_F|_H)?|NAN|(?:UCHAR|UINT|ULONG|USHRT)_MAX)\b/,
	        alias: 'constant'
	      }
	    });
	    Prism.languages.insertBefore('opencl', 'class-name', {
	      // https://www.khronos.org/registry/OpenCL/sdk/2.1/docs/man/xhtml/scalarDataTypes.html
	      // https://www.khronos.org/registry/OpenCL/sdk/2.1/docs/man/xhtml/otherDataTypes.html
	      'builtin-type': {
	        pattern:
	          /\b(?:_cl_(?:command_queue|context|device_id|event|kernel|mem|platform_id|program|sampler)|cl_(?:image_format|mem_fence_flags)|clk_event_t|event_t|image(?:1d_(?:array_|buffer_)?t|2d_(?:array_(?:depth_|msaa_depth_|msaa_)?|depth_|msaa_depth_|msaa_)?t|3d_t)|intptr_t|ndrange_t|ptrdiff_t|queue_t|reserve_id_t|sampler_t|size_t|uintptr_t)\b/,
	        alias: 'keyword'
	      }
	    });
	    var attributes = {
	      // Extracted from http://streamcomputing.eu/downloads/?opencl_host.lang (opencl-types and opencl-host)
	      'type-opencl-host': {
	        pattern:
	          /\b(?:cl_(?:GLenum|GLint|GLuin|addressing_mode|bitfield|bool|buffer_create_type|build_status|channel_(?:order|type)|(?:u?(?:char|int|long|short)|double|float)(?:2|3|4|8|16)?|command_(?:queue(?:_info|_properties)?|type)|context(?:_info|_properties)?|device_(?:exec_capabilities|fp_config|id|info|local_mem_type|mem_cache_type|type)|(?:event|sampler)(?:_info)?|filter_mode|half|image_info|kernel(?:_info|_work_group_info)?|map_flags|mem(?:_flags|_info|_object_type)?|platform_(?:id|info)|profiling_info|program(?:_build_info|_info)?))\b/,
	        alias: 'keyword'
	      },
	      'boolean-opencl-host': {
	        pattern: /\bCL_(?:FALSE|TRUE)\b/,
	        alias: 'boolean'
	      },
	      // Extracted from cl.h (2.0) and http://streamcomputing.eu/downloads/?opencl_host.lang (opencl-const)
	      'constant-opencl-host': {
	        pattern:
	          /\bCL_(?:A|ABGR|ADDRESS_(?:CLAMP(?:_TO_EDGE)?|MIRRORED_REPEAT|NONE|REPEAT)|ARGB|BGRA|BLOCKING|BUFFER_CREATE_TYPE_REGION|BUILD_(?:ERROR|IN_PROGRESS|NONE|PROGRAM_FAILURE|SUCCESS)|COMMAND_(?:ACQUIRE_GL_OBJECTS|BARRIER|COPY_(?:BUFFER(?:_RECT|_TO_IMAGE)?|IMAGE(?:_TO_BUFFER)?)|FILL_(?:BUFFER|IMAGE)|MAP(?:_BUFFER|_IMAGE)|MARKER|MIGRATE(?:_SVM)?_MEM_OBJECTS|NATIVE_KERNEL|NDRANGE_KERNEL|READ_(?:BUFFER(?:_RECT)?|IMAGE)|RELEASE_GL_OBJECTS|SVM_(?:FREE|MAP|MEMCPY|MEMFILL|UNMAP)|TASK|UNMAP_MEM_OBJECT|USER|WRITE_(?:BUFFER(?:_RECT)?|IMAGE))|COMPILER_NOT_AVAILABLE|COMPILE_PROGRAM_FAILURE|COMPLETE|CONTEXT_(?:DEVICES|INTEROP_USER_SYNC|NUM_DEVICES|PLATFORM|PROPERTIES|REFERENCE_COUNT)|DEPTH(?:_STENCIL)?|DEVICE_(?:ADDRESS_BITS|AFFINITY_DOMAIN_(?:L[1-4]_CACHE|NEXT_PARTITIONABLE|NUMA)|AVAILABLE|BUILT_IN_KERNELS|COMPILER_AVAILABLE|DOUBLE_FP_CONFIG|ENDIAN_LITTLE|ERROR_CORRECTION_SUPPORT|EXECUTION_CAPABILITIES|EXTENSIONS|GLOBAL_(?:MEM_(?:CACHELINE_SIZE|CACHE_SIZE|CACHE_TYPE|SIZE)|VARIABLE_PREFERRED_TOTAL_SIZE)|HOST_UNIFIED_MEMORY|IL_VERSION|IMAGE(?:2D_MAX_(?:HEIGHT|WIDTH)|3D_MAX_(?:DEPTH|HEIGHT|WIDTH)|_BASE_ADDRESS_ALIGNMENT|_MAX_ARRAY_SIZE|_MAX_BUFFER_SIZE|_PITCH_ALIGNMENT|_SUPPORT)|LINKER_AVAILABLE|LOCAL_MEM_SIZE|LOCAL_MEM_TYPE|MAX_(?:CLOCK_FREQUENCY|COMPUTE_UNITS|CONSTANT_ARGS|CONSTANT_BUFFER_SIZE|GLOBAL_VARIABLE_SIZE|MEM_ALLOC_SIZE|NUM_SUB_GROUPS|ON_DEVICE_(?:EVENTS|QUEUES)|PARAMETER_SIZE|PIPE_ARGS|READ_IMAGE_ARGS|READ_WRITE_IMAGE_ARGS|SAMPLERS|WORK_GROUP_SIZE|WORK_ITEM_DIMENSIONS|WORK_ITEM_SIZES|WRITE_IMAGE_ARGS)|MEM_BASE_ADDR_ALIGN|MIN_DATA_TYPE_ALIGN_SIZE|NAME|NATIVE_VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT)|NOT_(?:AVAILABLE|FOUND)|OPENCL_C_VERSION|PARENT_DEVICE|PARTITION_(?:AFFINITY_DOMAIN|BY_AFFINITY_DOMAIN|BY_COUNTS|BY_COUNTS_LIST_END|EQUALLY|FAILED|MAX_SUB_DEVICES|PROPERTIES|TYPE)|PIPE_MAX_(?:ACTIVE_RESERVATIONS|PACKET_SIZE)|PLATFORM|PREFERRED_(?:GLOBAL_ATOMIC_ALIGNMENT|INTEROP_USER_SYNC|LOCAL_ATOMIC_ALIGNMENT|PLATFORM_ATOMIC_ALIGNMENT|VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT))|PRINTF_BUFFER_SIZE|PROFILE|PROFILING_TIMER_RESOLUTION|QUEUE_(?:ON_(?:DEVICE_(?:MAX_SIZE|PREFERRED_SIZE|PROPERTIES)|HOST_PROPERTIES)|PROPERTIES)|REFERENCE_COUNT|SINGLE_FP_CONFIG|SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS|SVM_(?:ATOMICS|CAPABILITIES|COARSE_GRAIN_BUFFER|FINE_GRAIN_BUFFER|FINE_GRAIN_SYSTEM)|TYPE(?:_ACCELERATOR|_ALL|_CPU|_CUSTOM|_DEFAULT|_GPU)?|VENDOR(?:_ID)?|VERSION)|DRIVER_VERSION|EVENT_(?:COMMAND_(?:EXECUTION_STATUS|QUEUE|TYPE)|CONTEXT|REFERENCE_COUNT)|EXEC_(?:KERNEL|NATIVE_KERNEL|STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST)|FILTER_(?:LINEAR|NEAREST)|FLOAT|FP_(?:CORRECTLY_ROUNDED_DIVIDE_SQRT|DENORM|FMA|INF_NAN|ROUND_TO_INF|ROUND_TO_NEAREST|ROUND_TO_ZERO|SOFT_FLOAT)|GLOBAL|HALF_FLOAT|IMAGE_(?:ARRAY_SIZE|BUFFER|DEPTH|ELEMENT_SIZE|FORMAT|FORMAT_MISMATCH|FORMAT_NOT_SUPPORTED|HEIGHT|NUM_MIP_LEVELS|NUM_SAMPLES|ROW_PITCH|SLICE_PITCH|WIDTH)|INTENSITY|INVALID_(?:ARG_INDEX|ARG_SIZE|ARG_VALUE|BINARY|BUFFER_SIZE|BUILD_OPTIONS|COMMAND_QUEUE|COMPILER_OPTIONS|CONTEXT|DEVICE|DEVICE_PARTITION_COUNT|DEVICE_QUEUE|DEVICE_TYPE|EVENT|EVENT_WAIT_LIST|GLOBAL_OFFSET|GLOBAL_WORK_SIZE|GL_OBJECT|HOST_PTR|IMAGE_DESCRIPTOR|IMAGE_FORMAT_DESCRIPTOR|IMAGE_SIZE|KERNEL|KERNEL_ARGS|KERNEL_DEFINITION|KERNEL_NAME|LINKER_OPTIONS|MEM_OBJECT|MIP_LEVEL|OPERATION|PIPE_SIZE|PLATFORM|PROGRAM|PROGRAM_EXECUTABLE|PROPERTY|QUEUE_PROPERTIES|SAMPLER|VALUE|WORK_DIMENSION|WORK_GROUP_SIZE|WORK_ITEM_SIZE)|KERNEL_(?:ARG_(?:ACCESS_(?:NONE|QUALIFIER|READ_ONLY|READ_WRITE|WRITE_ONLY)|ADDRESS_(?:CONSTANT|GLOBAL|LOCAL|PRIVATE|QUALIFIER)|INFO_NOT_AVAILABLE|NAME|TYPE_(?:CONST|NAME|NONE|PIPE|QUALIFIER|RESTRICT|VOLATILE))|ATTRIBUTES|COMPILE_NUM_SUB_GROUPS|COMPILE_WORK_GROUP_SIZE|CONTEXT|EXEC_INFO_SVM_FINE_GRAIN_SYSTEM|EXEC_INFO_SVM_PTRS|FUNCTION_NAME|GLOBAL_WORK_SIZE|LOCAL_MEM_SIZE|LOCAL_SIZE_FOR_SUB_GROUP_COUNT|MAX_NUM_SUB_GROUPS|MAX_SUB_GROUP_SIZE_FOR_NDRANGE|NUM_ARGS|PREFERRED_WORK_GROUP_SIZE_MULTIPLE|PRIVATE_MEM_SIZE|PROGRAM|REFERENCE_COUNT|SUB_GROUP_COUNT_FOR_NDRANGE|WORK_GROUP_SIZE)|LINKER_NOT_AVAILABLE|LINK_PROGRAM_FAILURE|LOCAL|LUMINANCE|MAP_(?:FAILURE|READ|WRITE|WRITE_INVALIDATE_REGION)|MEM_(?:ALLOC_HOST_PTR|ASSOCIATED_MEMOBJECT|CONTEXT|COPY_HOST_PTR|COPY_OVERLAP|FLAGS|HOST_NO_ACCESS|HOST_PTR|HOST_READ_ONLY|HOST_WRITE_ONLY|KERNEL_READ_AND_WRITE|MAP_COUNT|OBJECT_(?:ALLOCATION_FAILURE|BUFFER|IMAGE1D|IMAGE1D_ARRAY|IMAGE1D_BUFFER|IMAGE2D|IMAGE2D_ARRAY|IMAGE3D|PIPE)|OFFSET|READ_ONLY|READ_WRITE|REFERENCE_COUNT|SIZE|SVM_ATOMICS|SVM_FINE_GRAIN_BUFFER|TYPE|USES_SVM_POINTER|USE_HOST_PTR|WRITE_ONLY)|MIGRATE_MEM_OBJECT_(?:CONTENT_UNDEFINED|HOST)|MISALIGNED_SUB_BUFFER_OFFSET|NONE|NON_BLOCKING|OUT_OF_(?:HOST_MEMORY|RESOURCES)|PIPE_(?:MAX_PACKETS|PACKET_SIZE)|PLATFORM_(?:EXTENSIONS|HOST_TIMER_RESOLUTION|NAME|PROFILE|VENDOR|VERSION)|PROFILING_(?:COMMAND_(?:COMPLETE|END|QUEUED|START|SUBMIT)|INFO_NOT_AVAILABLE)|PROGRAM_(?:BINARIES|BINARY_SIZES|BINARY_TYPE(?:_COMPILED_OBJECT|_EXECUTABLE|_LIBRARY|_NONE)?|BUILD_(?:GLOBAL_VARIABLE_TOTAL_SIZE|LOG|OPTIONS|STATUS)|CONTEXT|DEVICES|IL|KERNEL_NAMES|NUM_DEVICES|NUM_KERNELS|REFERENCE_COUNT|SOURCE)|QUEUED|QUEUE_(?:CONTEXT|DEVICE|DEVICE_DEFAULT|ON_DEVICE|ON_DEVICE_DEFAULT|OUT_OF_ORDER_EXEC_MODE_ENABLE|PROFILING_ENABLE|PROPERTIES|REFERENCE_COUNT|SIZE)|R|RA|READ_(?:ONLY|WRITE)_CACHE|RG|RGB|RGBA|RGBx|RGx|RUNNING|Rx|SAMPLER_(?:ADDRESSING_MODE|CONTEXT|FILTER_MODE|LOD_MAX|LOD_MIN|MIP_FILTER_MODE|NORMALIZED_COORDS|REFERENCE_COUNT)|(?:UN)?SIGNED_INT(?:8|16|32)|SNORM_INT(?:8|16)|SUBMITTED|SUCCESS|UNORM_INT(?:8|16|24|_101010|_101010_2)|UNORM_SHORT_(?:555|565)|VERSION_(?:1_0|1_1|1_2|2_0|2_1)|sBGRA|sRGB|sRGBA|sRGBx)\b/,
	        alias: 'constant'
	      },
	      // Extracted from cl.h (2.0) and http://streamcomputing.eu/downloads/?opencl_host.lang (opencl-host)
	      'function-opencl-host': {
	        pattern:
	          /\bcl(?:BuildProgram|CloneKernel|CompileProgram|Create(?:Buffer|CommandQueue(?:WithProperties)?|Context|ContextFromType|Image|Image2D|Image3D|Kernel|KernelsInProgram|Pipe|ProgramWith(?:Binary|BuiltInKernels|IL|Source)|Sampler|SamplerWithProperties|SubBuffer|SubDevices|UserEvent)|Enqueue(?:(?:Barrier|Marker)(?:WithWaitList)?|Copy(?:Buffer(?:Rect|ToImage)?|Image(?:ToBuffer)?)|(?:Fill|Map)(?:Buffer|Image)|MigrateMemObjects|NDRangeKernel|NativeKernel|(?:Read|Write)(?:Buffer(?:Rect)?|Image)|SVM(?:Free|Map|MemFill|Memcpy|MigrateMem|Unmap)|Task|UnmapMemObject|WaitForEvents)|Finish|Flush|Get(?:CommandQueueInfo|ContextInfo|Device(?:AndHostTimer|IDs|Info)|Event(?:Profiling)?Info|ExtensionFunctionAddress(?:ForPlatform)?|HostTimer|ImageInfo|Kernel(?:ArgInfo|Info|SubGroupInfo|WorkGroupInfo)|MemObjectInfo|PipeInfo|Platform(?:IDs|Info)|Program(?:Build)?Info|SamplerInfo|SupportedImageFormats)|LinkProgram|(?:Release|Retain)(?:CommandQueue|Context|Device|Event|Kernel|MemObject|Program|Sampler)|SVM(?:Alloc|Free)|Set(?:CommandQueueProperty|DefaultDeviceCommandQueue|EventCallback|Kernel|Kernel(?:Arg(?:SVMPointer)?|ExecInfo)|MemObjectDestructorCallback|UserEventStatus)|Unload(?:Platform)?Compiler|WaitForEvents)\b/,
	        alias: 'function'
	      }
	    };

	    /* OpenCL host API */
	    Prism.languages.insertBefore('c', 'keyword', attributes);

	    // C++ includes everything from the OpenCL C host API plus the classes defined in cl2.h
	    if (Prism.languages.cpp) {
	      // Extracted from doxygen class list http://github.khronos.org/OpenCL-CLHPP/annotated.html
	      attributes['type-opencl-host-cpp'] = {
	        pattern:
	          /\b(?:Buffer|BufferGL|BufferRenderGL|CommandQueue|Context|Device|DeviceCommandQueue|EnqueueArgs|Event|Image|Image1D|Image1DArray|Image1DBuffer|Image2D|Image2DArray|Image2DGL|Image3D|Image3DGL|ImageFormat|ImageGL|Kernel|KernelFunctor|LocalSpaceArg|Memory|NDRange|Pipe|Platform|Program|SVMAllocator|SVMTraitAtomic|SVMTraitCoarse|SVMTraitFine|SVMTraitReadOnly|SVMTraitReadWrite|SVMTraitWriteOnly|Sampler|UserEvent)\b/,
	        alias: 'keyword'
	      };
	      Prism.languages.insertBefore('cpp', 'keyword', attributes);
	    }
	  })(Prism);
	}

	// @ts-nocheck
	openqasm.displayName = 'openqasm';
	openqasm.aliases = ['qasm'];

	/** @type {import('../core.js').Syntax} */
	function openqasm(Prism) {
	  // https://qiskit.github.io/openqasm/grammar/index.html

	  Prism.languages.openqasm = {
	    comment: /\/\*[\s\S]*?\*\/|\/\/.*/,
	    string: {
	      pattern: /"[^"\r\n\t]*"|'[^'\r\n\t]*'/,
	      greedy: true
	    },
	    keyword:
	      /\b(?:CX|OPENQASM|U|barrier|boxas|boxto|break|const|continue|ctrl|def|defcal|defcalgrammar|delay|else|end|for|gate|gphase|if|in|include|inv|kernel|lengthof|let|measure|pow|reset|return|rotary|stretchinf|while)\b|#pragma\b/,
	    'class-name':
	      /\b(?:angle|bit|bool|creg|fixed|float|int|length|qreg|qubit|stretch|uint)\b/,
	    function: /\b(?:cos|exp|ln|popcount|rotl|rotr|sin|sqrt|tan)\b(?=\s*\()/,
	    constant: /\b(?:euler|pi|tau)\b|π|𝜏|ℇ/,
	    number: {
	      pattern:
	        /(^|[^.\w$])(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?(?:dt|ns|us|µs|ms|s)?/i,
	      lookbehind: true
	    },
	    operator: /->|>>=?|<<=?|&&|\|\||\+\+|--|[!=<>&|~^+\-*/%]=?|@/,
	    punctuation: /[(){}\[\];,:.]/
	  };
	  Prism.languages.qasm = Prism.languages.openqasm;
	}

	// @ts-nocheck
	oz.displayName = 'oz';
	oz.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function oz(Prism) {
	  Prism.languages.oz = {
	    comment: {
	      pattern: /\/\*[\s\S]*?\*\/|%.*/,
	      greedy: true
	    },
	    string: {
	      pattern: /"(?:[^"\\]|\\[\s\S])*"/,
	      greedy: true
	    },
	    atom: {
	      pattern: /'(?:[^'\\]|\\[\s\S])*'/,
	      greedy: true,
	      alias: 'builtin'
	    },
	    keyword:
	      /\$|\[\]|\b(?:_|at|attr|case|catch|choice|class|cond|declare|define|dis|else(?:case|if)?|end|export|fail|false|feat|finally|from|fun|functor|if|import|in|local|lock|meth|nil|not|of|or|prepare|proc|prop|raise|require|self|skip|then|thread|true|try|unit)\b/,
	    function: [
	      /\b[a-z][A-Za-z\d]*(?=\()/,
	      {
	        pattern: /(\{)[A-Z][A-Za-z\d]*\b/,
	        lookbehind: true
	      }
	    ],
	    number:
	      /\b(?:0[bx][\da-f]+|\d+(?:\.\d*)?(?:e~?\d+)?)\b|&(?:[^\\]|\\(?:\d{3}|.))/i,
	    variable: /`(?:[^`\\]|\\.)+`/,
	    'attr-name': /\b\w+(?=[ \t]*:(?![:=]))/,
	    operator:
	      /:(?:=|::?)|<[-:=]?|=(?:=|<?:?)|>=?:?|\\=:?|!!?|[|#+\-*\/,~^@]|\b(?:andthen|div|mod|orelse)\b/,
	    punctuation: /[\[\](){}.:;?]/
	  };
	}

	// @ts-nocheck
	parigp.displayName = 'parigp';
	parigp.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function parigp(Prism) {
	  Prism.languages.parigp = {
	    comment: /\/\*[\s\S]*?\*\/|\\\\.*/,
	    string: {
	      pattern: /"(?:[^"\\\r\n]|\\.)*"/,
	      greedy: true
	    },
	    // PARI/GP does not care about white spaces at all
	    // so let's process the keywords to build an appropriate regexp
	    // (e.g. "b *r *e *a *k", etc.)
	    keyword: (function () {
	      var keywords = [
	        'breakpoint',
	        'break',
	        'dbg_down',
	        'dbg_err',
	        'dbg_up',
	        'dbg_x',
	        'forcomposite',
	        'fordiv',
	        'forell',
	        'forpart',
	        'forprime',
	        'forstep',
	        'forsubgroup',
	        'forvec',
	        'for',
	        'iferr',
	        'if',
	        'local',
	        'my',
	        'next',
	        'return',
	        'until',
	        'while'
	      ];
	      keywords = keywords
	        .map(function (keyword) {
	          return keyword.split('').join(' *')
	        })
	        .join('|');
	      return RegExp('\\b(?:' + keywords + ')\\b')
	    })(),
	    function: /\b\w(?:[\w ]*\w)?(?= *\()/,
	    number: {
	      // The lookbehind and the negative lookahead prevent from breaking the .. operator
	      pattern:
	        /((?:\. *\. *)?)(?:\b\d(?: *\d)*(?: *(?!\. *\.)\.(?: *\d)*)?|\. *\d(?: *\d)*)(?: *e *(?:[+-] *)?\d(?: *\d)*)?/i,
	      lookbehind: true
	    },
	    operator:
	      /\. *\.|[*\/!](?: *=)?|%(?: *=|(?: *#)?(?: *')*)?|\+(?: *[+=])?|-(?: *[-=>])?|<(?: *>|(?: *<)?(?: *=)?)?|>(?: *>)?(?: *=)?|=(?: *=){0,2}|\\(?: *\/)?(?: *=)?|&(?: *&)?|\| *\||['#~^]/,
	    punctuation: /[\[\]{}().,:;|]/
	  };
	}

	// @ts-nocheck
	parser.displayName = 'parser';
	parser.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function parser(Prism) {
	  Prism.register(markup)
	  ;(function (Prism) {
	    var parser = (Prism.languages.parser = Prism.languages.extend('markup', {
	      keyword: {
	        pattern:
	          /(^|[^^])(?:\^(?:case|eval|for|if|switch|throw)\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\b)/,
	        lookbehind: true
	      },
	      variable: {
	        pattern: /(^|[^^])\B\$(?:\w+|(?=[.{]))(?:(?:\.|::?)\w+)*(?:\.|::?)?/,
	        lookbehind: true,
	        inside: {
	          punctuation: /\.|:+/
	        }
	      },
	      function: {
	        pattern: /(^|[^^])\B[@^]\w+(?:(?:\.|::?)\w+)*(?:\.|::?)?/,
	        lookbehind: true,
	        inside: {
	          keyword: {
	            pattern: /(^@)(?:GET_|SET_)/,
	            lookbehind: true
	          },
	          punctuation: /\.|:+/
	        }
	      },
	      escape: {
	        pattern: /\^(?:[$^;@()\[\]{}"':]|#[a-f\d]*)/i,
	        alias: 'builtin'
	      },
	      punctuation: /[\[\](){};]/
	    }));
	    parser = Prism.languages.insertBefore('parser', 'keyword', {
	      'parser-comment': {
	        pattern: /(\s)#.*/,
	        lookbehind: true,
	        alias: 'comment'
	      },
	      expression: {
	        // Allow for 3 levels of depth
	        pattern: /(^|[^^])\((?:[^()]|\((?:[^()]|\((?:[^()])*\))*\))*\)/,
	        greedy: true,
	        lookbehind: true,
	        inside: {
	          string: {
	            pattern: /(^|[^^])(["'])(?:(?!\2)[^^]|\^[\s\S])*\2/,
	            lookbehind: true
	          },
	          keyword: parser.keyword,
	          variable: parser.variable,
	          function: parser.function,
	          boolean: /\b(?:false|true)\b/,
	          number: /\b(?:0x[a-f\d]+|\d+(?:\.\d*)?(?:e[+-]?\d+)?)\b/i,
	          escape: parser.escape,
	          operator:
	            /[~+*\/\\%]|!(?:\|\|?|=)?|&&?|\|\|?|==|<[<=]?|>[>=]?|-[fd]?|\b(?:def|eq|ge|gt|in|is|le|lt|ne)\b/,
	          punctuation: parser.punctuation
	        }
	      }
	    });
	    Prism.languages.insertBefore(
	      'inside',
	      'punctuation',
	      {
	        expression: parser.expression,
	        keyword: parser.keyword,
	        variable: parser.variable,
	        function: parser.function,
	        escape: parser.escape,
	        'parser-punctuation': {
	          pattern: parser.punctuation,
	          alias: 'punctuation'
	        }
	      },
	      parser['tag'].inside['attr-value']
	    );
	  })(Prism);
	}

	// @ts-nocheck
	pascal.displayName = 'pascal';
	pascal.aliases = ['objectpascal'];

	/** @type {import('../core.js').Syntax} */
	function pascal(Prism) {
	  // Based on Free Pascal

	  /* TODO
	Support inline asm ?
	*/

	  Prism.languages.pascal = {
	    directive: {
	      pattern: /\{\$[\s\S]*?\}/,
	      greedy: true,
	      alias: ['marco', 'property']
	    },
	    comment: {
	      pattern: /\(\*[\s\S]*?\*\)|\{[\s\S]*?\}|\/\/.*/,
	      greedy: true
	    },
	    string: {
	      pattern: /(?:'(?:''|[^'\r\n])*'(?!')|#[&$%]?[a-f\d]+)+|\^[a-z]/i,
	      greedy: true
	    },
	    asm: {
	      pattern: /(\basm\b)[\s\S]+?(?=\bend\s*[;[])/i,
	      lookbehind: true,
	      greedy: true,
	      inside: null // see below
	    },

	    keyword: [
	      {
	        // Turbo Pascal
	        pattern:
	          /(^|[^&])\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\b/i,
	        lookbehind: true
	      },
	      {
	        // Free Pascal
	        pattern: /(^|[^&])\b(?:dispose|exit|false|new|true)\b/i,
	        lookbehind: true
	      },
	      {
	        // Object Pascal
	        pattern:
	          /(^|[^&])\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\b/i,
	        lookbehind: true
	      },
	      {
	        // Modifiers
	        pattern:
	          /(^|[^&])\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\b/i,
	        lookbehind: true
	      }
	    ],
	    number: [
	      // Hexadecimal, octal and binary
	      /(?:[&%]\d+|\$[a-f\d]+)/i,
	      // Decimal
	      /\b\d+(?:\.\d+)?(?:e[+-]?\d+)?/i
	    ],
	    operator: [
	      /\.\.|\*\*|:=|<[<=>]?|>[>=]?|[+\-*\/]=?|[@^=]/,
	      {
	        pattern:
	          /(^|[^&])\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\b/,
	        lookbehind: true
	      }
	    ],
	    punctuation: /\(\.|\.\)|[()\[\]:;,.]/
	  };
	  Prism.languages.pascal.asm.inside = Prism.languages.extend('pascal', {
	    asm: undefined,
	    keyword: undefined,
	    operator: undefined
	  });
	  Prism.languages.objectpascal = Prism.languages.pascal;
	}

	// @ts-nocheck
	pascaligo.displayName = 'pascaligo';
	pascaligo.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function pascaligo(Prism) {
	(function (Prism) {
	    // Pascaligo is a layer 2 smart contract language for the tezos blockchain

	    var braces = /\((?:[^()]|\((?:[^()]|\([^()]*\))*\))*\)/.source;
	    var type = /(?:\b\w+(?:<braces>)?|<braces>)/.source.replace(
	      /<braces>/g,
	      function () {
	        return braces
	      }
	    );
	    var pascaligo = (Prism.languages.pascaligo = {
	      comment: /\(\*[\s\S]+?\*\)|\/\/.*/,
	      string: {
	        pattern: /(["'`])(?:\\[\s\S]|(?!\1)[^\\])*\1|\^[a-z]/i,
	        greedy: true
	      },
	      'class-name': [
	        {
	          pattern: RegExp(
	            /(\btype\s+\w+\s+is\s+)<type>/.source.replace(
	              /<type>/g,
	              function () {
	                return type
	              }
	            ),
	            'i'
	          ),
	          lookbehind: true,
	          inside: null // see below
	        },
	        {
	          pattern: RegExp(
	            /<type>(?=\s+is\b)/.source.replace(/<type>/g, function () {
	              return type
	            }),
	            'i'
	          ),
	          inside: null // see below
	        },
	        {
	          pattern: RegExp(
	            /(:\s*)<type>/.source.replace(/<type>/g, function () {
	              return type
	            })
	          ),
	          lookbehind: true,
	          inside: null // see below
	        }
	      ],

	      keyword: {
	        pattern:
	          /(^|[^&])\b(?:begin|block|case|const|else|end|fail|for|from|function|if|is|nil|of|remove|return|skip|then|type|var|while|with)\b/i,
	        lookbehind: true
	      },
	      boolean: {
	        pattern: /(^|[^&])\b(?:False|True)\b/i,
	        lookbehind: true
	      },
	      builtin: {
	        pattern: /(^|[^&])\b(?:bool|int|list|map|nat|record|string|unit)\b/i,
	        lookbehind: true
	      },
	      function: /\b\w+(?=\s*\()/,
	      number: [
	        // Hexadecimal, octal and binary
	        /%[01]+|&[0-7]+|\$[a-f\d]+/i,
	        // Decimal
	        /\b\d+(?:\.\d+)?(?:e[+-]?\d+)?(?:mtz|n)?/i
	      ],
	      operator:
	        /->|=\/=|\.\.|\*\*|:=|<[<=>]?|>[>=]?|[+\-*\/]=?|[@^=|]|\b(?:and|mod|or)\b/,
	      punctuation: /\(\.|\.\)|[()\[\]:;,.{}]/
	    });
	    var classNameInside = [
	      'comment',
	      'keyword',
	      'builtin',
	      'operator',
	      'punctuation'
	    ].reduce(function (accum, key) {
	      accum[key] = pascaligo[key];
	      return accum
	    }, {});
	    pascaligo['class-name'].forEach(function (p) {
	      p.inside = classNameInside;
	    });
	  })(Prism);
	}

	// @ts-nocheck
	psl.displayName = 'psl';
	psl.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function psl(Prism) {
	  Prism.languages.psl = {
	    comment: {
	      pattern: /#.*/,
	      greedy: true
	    },
	    string: {
	      pattern: /"(?:\\.|[^\\"])*"/,
	      greedy: true,
	      inside: {
	        symbol: /\\[ntrbA-Z"\\]/
	      }
	    },
	    'heredoc-string': {
	      pattern: /<<<([a-zA-Z_]\w*)[\r\n](?:.*[\r\n])*?\1\b/,
	      alias: 'string',
	      greedy: true
	    },
	    keyword:
	      /\b(?:__multi|__single|case|default|do|else|elsif|exit|export|for|foreach|function|if|last|line|local|next|requires|return|switch|until|while|word)\b/,
	    constant:
	      /\b(?:ALARM|CHART_ADD_GRAPH|CHART_DELETE_GRAPH|CHART_DESTROY|CHART_LOAD|CHART_PRINT|EOF|OFFLINE|OK|PSL_PROF_LOG|R_CHECK_HORIZ|R_CHECK_VERT|R_CLICKER|R_COLUMN|R_FRAME|R_ICON|R_LABEL|R_LABEL_CENTER|R_LIST_MULTIPLE|R_LIST_MULTIPLE_ND|R_LIST_SINGLE|R_LIST_SINGLE_ND|R_MENU|R_POPUP|R_POPUP_SCROLLED|R_RADIO_HORIZ|R_RADIO_VERT|R_ROW|R_SCALE_HORIZ|R_SCALE_VERT|R_SEP_HORIZ|R_SEP_VERT|R_SPINNER|R_TEXT_FIELD|R_TEXT_FIELD_LABEL|R_TOGGLE|TRIM_LEADING|TRIM_LEADING_AND_TRAILING|TRIM_REDUNDANT|TRIM_TRAILING|VOID|WARN)\b/,
	    boolean: /\b(?:FALSE|False|NO|No|TRUE|True|YES|Yes|false|no|true|yes)\b/,
	    variable: /\b(?:PslDebug|errno|exit_status)\b/,
	    builtin: {
	      pattern:
	        /\b(?:PslExecute|PslFunctionCall|PslFunctionExists|PslSetOptions|_snmp_debug|acos|add_diary|annotate|annotate_get|ascii_to_ebcdic|asctime|asin|atan|atexit|batch_set|blackout|cat|ceil|chan_exists|change_state|close|code_cvt|cond_signal|cond_wait|console_type|convert_base|convert_date|convert_locale_date|cos|cosh|create|date|dcget_text|destroy|destroy_lock|dget_text|difference|dump_hist|ebcdic_to_ascii|encrypt|event_archive|event_catalog_get|event_check|event_query|event_range_manage|event_range_query|event_report|event_schedule|event_trigger|event_trigger2|execute|exists|exp|fabs|file|floor|fmod|fopen|fseek|ftell|full_discovery|get|get_chan_info|get_ranges|get_text|get_vars|getenv|gethostinfo|getpid|getpname|grep|history|history_get_retention|in_transition|index|int|internal|intersection|is_var|isnumber|join|kill|length|lines|lock|lock_info|log|log10|loge|matchline|msg_check|msg_get_format|msg_get_severity|msg_printf|msg_sprintf|ntharg|nthargf|nthline|nthlinef|num_bytes|num_consoles|pconfig|popen|poplines|pow|print|printf|proc_exists|process|random|read|readln|refresh_parameters|remote_check|remote_close|remote_event_query|remote_event_trigger|remote_file_send|remote_open|remove|replace|rindex|sec_check_priv|sec_store_get|sec_store_set|set|set_alarm_ranges|set_locale|share|sin|sinh|sleep|snmp_agent_config|snmp_agent_start|snmp_agent_stop|snmp_close|snmp_config|snmp_get|snmp_get_next|snmp_h_get|snmp_h_get_next|snmp_h_set|snmp_open|snmp_set|snmp_trap_ignore|snmp_trap_listen|snmp_trap_raise_std_trap|snmp_trap_receive|snmp_trap_register_im|snmp_trap_send|snmp_walk|sopen|sort|splitline|sprintf|sqrt|srandom|str_repeat|strcasecmp|subset|substr|system|tail|tan|tanh|text_domain|time|tmpnam|tolower|toupper|trace_psl_process|trim|union|unique|unlock|unset|va_arg|va_start|write)\b/,
	      alias: 'builtin-function'
	    },
	    'foreach-variable': {
	      pattern:
	        /(\bforeach\s+(?:(?:\w+\b|"(?:\\.|[^\\"])*")\s+){0,2})[_a-zA-Z]\w*(?=\s*\()/,
	      lookbehind: true,
	      greedy: true
	    },
	    function: /\b[_a-z]\w*\b(?=\s*\()/i,
	    number: /\b(?:0x[0-9a-f]+|\d+(?:\.\d+)?)\b/i,
	    operator: /--|\+\+|&&=?|\|\|=?|<<=?|>>=?|[=!]~|[-+*/%&|^!=<>]=?|\.|[:?]/,
	    punctuation: /[(){}\[\];,]/
	  };
	}

	// @ts-nocheck
	pcaxis.displayName = 'pcaxis';
	pcaxis.aliases = ['px'];

	/** @type {import('../core.js').Syntax} */
	function pcaxis(Prism) {
	  Prism.languages.pcaxis = {
	    string: /"[^"]*"/,
	    keyword: {
	      pattern:
	        /((?:^|;)\s*)[-A-Z\d]+(?:\s*\[[-\w]+\])?(?:\s*\("[^"]*"(?:,\s*"[^"]*")*\))?(?=\s*=)/,
	      lookbehind: true,
	      greedy: true,
	      inside: {
	        keyword: /^[-A-Z\d]+/,
	        language: {
	          pattern: /^(\s*)\[[-\w]+\]/,
	          lookbehind: true,
	          inside: {
	            punctuation: /^\[|\]$/,
	            property: /[-\w]+/
	          }
	        },
	        'sub-key': {
	          pattern: /^(\s*)\S[\s\S]*/,
	          lookbehind: true,
	          inside: {
	            parameter: {
	              pattern: /"[^"]*"/,
	              alias: 'property'
	            },
	            punctuation: /^\(|\)$|,/
	          }
	        }
	      }
	    },
	    operator: /=/,
	    tlist: {
	      pattern:
	        /TLIST\s*\(\s*\w+(?:(?:\s*,\s*"[^"]*")+|\s*,\s*"[^"]*"-"[^"]*")?\s*\)/,
	      greedy: true,
	      inside: {
	        function: /^TLIST/,
	        property: {
	          pattern: /^(\s*\(\s*)\w+/,
	          lookbehind: true
	        },
	        string: /"[^"]*"/,
	        punctuation: /[(),]/,
	        operator: /-/
	      }
	    },
	    punctuation: /[;,]/,
	    number: {
	      pattern: /(^|\s)\d+(?:\.\d+)?(?!\S)/,
	      lookbehind: true
	    },
	    boolean: /NO|YES/
	  };
	  Prism.languages.px = Prism.languages.pcaxis;
	}

	// @ts-nocheck
	peoplecode.displayName = 'peoplecode';
	peoplecode.aliases = ['pcode'];

	/** @type {import('../core.js').Syntax} */
	function peoplecode(Prism) {
	  Prism.languages.peoplecode = {
	    comment: RegExp(
	      [
	        // C-style multiline comments
	        /\/\*[\s\S]*?\*\//.source,
	        // REM comments
	        /\bREM[^;]*;/.source,
	        // Nested <* *> comments
	        /<\*(?:[^<*]|\*(?!>)|<(?!\*)|<\*(?:(?!\*>)[\s\S])*\*>)*\*>/.source,
	        // /+ +/ comments
	        /\/\+[\s\S]*?\+\//.source
	      ].join('|')
	    ),
	    string: {
	      pattern: /'(?:''|[^'\r\n])*'(?!')|"(?:""|[^"\r\n])*"(?!")/,
	      greedy: true
	    },
	    variable: /%\w+/,
	    'function-definition': {
	      pattern: /((?:^|[^\w-])(?:function|method)\s+)\w+/i,
	      lookbehind: true,
	      alias: 'function'
	    },
	    'class-name': {
	      pattern:
	        /((?:^|[^-\w])(?:as|catch|class|component|create|extends|global|implements|instance|local|of|property|returns)\s+)\w+(?::\w+)*/i,
	      lookbehind: true,
	      inside: {
	        punctuation: /:/
	      }
	    },
	    keyword:
	      /\b(?:abstract|alias|as|catch|class|component|constant|create|declare|else|end-(?:class|evaluate|for|function|get|if|method|set|try|while)|evaluate|extends|for|function|get|global|if|implements|import|instance|library|local|method|null|of|out|peopleCode|private|program|property|protected|readonly|ref|repeat|returns?|set|step|then|throw|to|try|until|value|when(?:-other)?|while)\b/i,
	    'operator-keyword': {
	      pattern: /\b(?:and|not|or)\b/i,
	      alias: 'operator'
	    },
	    function: /[_a-z]\w*(?=\s*\()/i,
	    boolean: /\b(?:false|true)\b/i,
	    number: /\b\d+(?:\.\d+)?\b/,
	    operator: /<>|[<>]=?|!=|\*\*|[-+*/|=@]/,
	    punctuation: /[:.;,()[\]]/
	  };
	  Prism.languages.pcode = Prism.languages.peoplecode;
	}

	// @ts-nocheck
	phpdoc.displayName = 'phpdoc';
	phpdoc.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function phpdoc(Prism) {
	  Prism.register(javadoclike);
	  Prism.register(php)
	  ;(function (Prism) {
	    var typeExpression = /(?:\b[a-zA-Z]\w*|[|\\[\]])+/.source;
	    Prism.languages.phpdoc = Prism.languages.extend('javadoclike', {
	      parameter: {
	        pattern: RegExp(
	          '(@(?:global|param|property(?:-read|-write)?|var)\\s+(?:' +
	            typeExpression +
	            '\\s+)?)\\$\\w+'
	        ),
	        lookbehind: true
	      }
	    });
	    Prism.languages.insertBefore('phpdoc', 'keyword', {
	      'class-name': [
	        {
	          pattern: RegExp(
	            '(@(?:global|package|param|property(?:-read|-write)?|return|subpackage|throws|var)\\s+)' +
	              typeExpression
	          ),
	          lookbehind: true,
	          inside: {
	            keyword:
	              /\b(?:array|bool|boolean|callback|double|false|float|int|integer|mixed|null|object|resource|self|string|true|void)\b/,
	            punctuation: /[|\\[\]()]/
	          }
	        }
	      ]
	    });
	    Prism.languages.javadoclike.addSupport('php', Prism.languages.phpdoc);
	  })(Prism);
	}

	// @ts-nocheck
	phpExtras.displayName = 'php-extras';
	phpExtras.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function phpExtras(Prism) {
	  Prism.register(php);
	  Prism.languages.insertBefore('php', 'variable', {
	    this: {
	      pattern: /\$this\b/,
	      alias: 'keyword'
	    },
	    global:
	      /\$(?:GLOBALS|HTTP_RAW_POST_DATA|_(?:COOKIE|ENV|FILES|GET|POST|REQUEST|SERVER|SESSION)|argc|argv|http_response_header|php_errormsg)\b/,
	    scope: {
	      pattern: /\b[\w\\]+::/,
	      inside: {
	        keyword: /\b(?:parent|self|static)\b/,
	        punctuation: /::|\\/
	      }
	    }
	  });
	}

	// @ts-nocheck
	plantUml.displayName = 'plant-uml';
	plantUml.aliases = ['plantuml'];

	/** @type {import('../core.js').Syntax} */
	function plantUml(Prism) {
	(function (Prism) {
	    var variable = /\$\w+|%[a-z]+%/;
	    var arrowAttr = /\[[^[\]]*\]/.source;
	    var arrowDirection = /(?:[drlu]|do|down|le|left|ri|right|up)/.source;
	    var arrowBody =
	      '(?:-+' +
	      arrowDirection +
	      '-+|\\.+' +
	      arrowDirection +
	      '\\.+|-+(?:' +
	      arrowAttr +
	      '-*)?|' +
	      arrowAttr +
	      '-+|\\.+(?:' +
	      arrowAttr +
	      '\\.*)?|' +
	      arrowAttr +
	      '\\.+)';
	    var arrowLeft = /(?:<{1,2}|\/{1,2}|\\{1,2}|<\||[#*^+}xo])/.source;
	    var arrowRight = /(?:>{1,2}|\/{1,2}|\\{1,2}|\|>|[#*^+{xo])/.source;
	    var arrowPrefix = /[[?]?[ox]?/.source;
	    var arrowSuffix = /[ox]?[\]?]?/.source;
	    var arrow =
	      arrowPrefix +
	      '(?:' +
	      arrowBody +
	      arrowRight +
	      '|' +
	      arrowLeft +
	      arrowBody +
	      '(?:' +
	      arrowRight +
	      ')?' +
	      ')' +
	      arrowSuffix;
	    Prism.languages['plant-uml'] = {
	      comment: {
	        pattern: /(^[ \t]*)(?:'.*|\/'[\s\S]*?'\/)/m,
	        lookbehind: true,
	        greedy: true
	      },
	      preprocessor: {
	        pattern: /(^[ \t]*)!.*/m,
	        lookbehind: true,
	        greedy: true,
	        alias: 'property',
	        inside: {
	          variable: variable
	        }
	      },
	      delimiter: {
	        pattern: /(^[ \t]*)@(?:end|start)uml\b/m,
	        lookbehind: true,
	        greedy: true,
	        alias: 'punctuation'
	      },
	      arrow: {
	        pattern: RegExp(
	          /(^|[^-.<>?|\\[\]ox])/.source + arrow + /(?![-.<>?|\\\]ox])/.source
	        ),
	        lookbehind: true,
	        greedy: true,
	        alias: 'operator',
	        inside: {
	          expression: {
	            pattern: /(\[)[^[\]]+(?=\])/,
	            lookbehind: true,
	            inside: null // see below
	          },

	          punctuation: /\[(?=$|\])|^\]/
	        }
	      },
	      string: {
	        pattern: /"[^"]*"/,
	        greedy: true
	      },
	      text: {
	        pattern: /(\[[ \t]*[\r\n]+(?![\r\n]))[^\]]*(?=\])/,
	        lookbehind: true,
	        greedy: true,
	        alias: 'string'
	      },
	      keyword: [
	        {
	          pattern:
	            /^([ \t]*)(?:abstract\s+class|end\s+(?:box|fork|group|merge|note|ref|split|title)|(?:fork|split)(?:\s+again)?|activate|actor|agent|alt|annotation|artifact|autoactivate|autonumber|backward|binary|boundary|box|break|caption|card|case|circle|class|clock|cloud|collections|component|concise|control|create|critical|database|deactivate|destroy|detach|diamond|else|elseif|end|end[hr]note|endif|endswitch|endwhile|entity|enum|file|folder|footer|frame|group|[hr]?note|header|hexagon|hide|if|interface|label|legend|loop|map|namespace|network|newpage|node|nwdiag|object|opt|package|page|par|participant|person|queue|rectangle|ref|remove|repeat|restore|return|robust|scale|set|show|skinparam|stack|start|state|stop|storage|switch|title|together|usecase|usecase\/|while)(?=\s|$)/m,
	          lookbehind: true,
	          greedy: true
	        },
	        /\b(?:elseif|equals|not|while)(?=\s*\()/,
	        /\b(?:as|is|then)\b/
	      ],
	      divider: {
	        pattern: /^==.+==$/m,
	        greedy: true,
	        alias: 'important'
	      },
	      time: {
	        pattern: /@(?:\d+(?:[:/]\d+){2}|[+-]?\d+|:[a-z]\w*(?:[+-]\d+)?)\b/i,
	        greedy: true,
	        alias: 'number'
	      },
	      color: {
	        pattern: /#(?:[a-z_]+|[a-fA-F0-9]+)\b/,
	        alias: 'symbol'
	      },
	      variable: variable,
	      punctuation: /[:,;()[\]{}]|\.{3}/
	    };
	    Prism.languages['plant-uml'].arrow.inside.expression.inside =
	      Prism.languages['plant-uml'];
	    Prism.languages['plantuml'] = Prism.languages['plant-uml'];
	  })(Prism);
	}

	// @ts-nocheck
	plsql.displayName = 'plsql';
	plsql.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function plsql(Prism) {
	  Prism.register(sql);
	  Prism.languages.plsql = Prism.languages.extend('sql', {
	    comment: {
	      pattern: /\/\*[\s\S]*?\*\/|--.*/,
	      greedy: true
	    },
	    // https://docs.oracle.com/en/database/oracle/oracle-database/21/lnpls/plsql-reserved-words-keywords.html
	    keyword:
	      /\b(?:A|ACCESSIBLE|ADD|AGENT|AGGREGATE|ALL|ALTER|AND|ANY|ARRAY|AS|ASC|AT|ATTRIBUTE|AUTHID|AVG|BEGIN|BETWEEN|BFILE_BASE|BINARY|BLOB_BASE|BLOCK|BODY|BOTH|BOUND|BULK|BY|BYTE|C|CALL|CALLING|CASCADE|CASE|CHAR|CHARACTER|CHARSET|CHARSETFORM|CHARSETID|CHAR_BASE|CHECK|CLOB_BASE|CLONE|CLOSE|CLUSTER|CLUSTERS|COLAUTH|COLLECT|COLUMNS|COMMENT|COMMIT|COMMITTED|COMPILED|COMPRESS|CONNECT|CONSTANT|CONSTRUCTOR|CONTEXT|CONTINUE|CONVERT|COUNT|CRASH|CREATE|CREDENTIAL|CURRENT|CURSOR|CUSTOMDATUM|DANGLING|DATA|DATE|DATE_BASE|DAY|DECLARE|DEFAULT|DEFINE|DELETE|DESC|DETERMINISTIC|DIRECTORY|DISTINCT|DOUBLE|DROP|DURATION|ELEMENT|ELSE|ELSIF|EMPTY|END|ESCAPE|EXCEPT|EXCEPTION|EXCEPTIONS|EXCLUSIVE|EXECUTE|EXISTS|EXIT|EXTERNAL|FETCH|FINAL|FIRST|FIXED|FLOAT|FOR|FORALL|FORCE|FROM|FUNCTION|GENERAL|GOTO|GRANT|GROUP|HASH|HAVING|HEAP|HIDDEN|HOUR|IDENTIFIED|IF|IMMEDIATE|IMMUTABLE|IN|INCLUDING|INDEX|INDEXES|INDICATOR|INDICES|INFINITE|INSERT|INSTANTIABLE|INT|INTERFACE|INTERSECT|INTERVAL|INTO|INVALIDATE|IS|ISOLATION|JAVA|LANGUAGE|LARGE|LEADING|LENGTH|LEVEL|LIBRARY|LIKE|LIKE2|LIKE4|LIKEC|LIMIT|LIMITED|LOCAL|LOCK|LONG|LOOP|MAP|MAX|MAXLEN|MEMBER|MERGE|MIN|MINUS|MINUTE|MOD|MODE|MODIFY|MONTH|MULTISET|MUTABLE|NAME|NAN|NATIONAL|NATIVE|NCHAR|NEW|NOCOMPRESS|NOCOPY|NOT|NOWAIT|NULL|NUMBER_BASE|OBJECT|OCICOLL|OCIDATE|OCIDATETIME|OCIDURATION|OCIINTERVAL|OCILOBLOCATOR|OCINUMBER|OCIRAW|OCIREF|OCIREFCURSOR|OCIROWID|OCISTRING|OCITYPE|OF|OLD|ON|ONLY|OPAQUE|OPEN|OPERATOR|OPTION|OR|ORACLE|ORADATA|ORDER|ORGANIZATION|ORLANY|ORLVARY|OTHERS|OUT|OVERLAPS|OVERRIDING|PACKAGE|PARALLEL_ENABLE|PARAMETER|PARAMETERS|PARENT|PARTITION|PASCAL|PERSISTABLE|PIPE|PIPELINED|PLUGGABLE|POLYMORPHIC|PRAGMA|PRECISION|PRIOR|PRIVATE|PROCEDURE|PUBLIC|RAISE|RANGE|RAW|READ|RECORD|REF|REFERENCE|RELIES_ON|REM|REMAINDER|RENAME|RESOURCE|RESULT|RESULT_CACHE|RETURN|RETURNING|REVERSE|REVOKE|ROLLBACK|ROW|SAMPLE|SAVE|SAVEPOINT|SB1|SB2|SB4|SECOND|SEGMENT|SELECT|SELF|SEPARATE|SEQUENCE|SERIALIZABLE|SET|SHARE|SHORT|SIZE|SIZE_T|SOME|SPARSE|SQL|SQLCODE|SQLDATA|SQLNAME|SQLSTATE|STANDARD|START|STATIC|STDDEV|STORED|STRING|STRUCT|STYLE|SUBMULTISET|SUBPARTITION|SUBSTITUTABLE|SUBTYPE|SUM|SYNONYM|TABAUTH|TABLE|TDO|THE|THEN|TIME|TIMESTAMP|TIMEZONE_ABBR|TIMEZONE_HOUR|TIMEZONE_MINUTE|TIMEZONE_REGION|TO|TRAILING|TRANSACTION|TRANSACTIONAL|TRUSTED|TYPE|UB1|UB2|UB4|UNDER|UNION|UNIQUE|UNPLUG|UNSIGNED|UNTRUSTED|UPDATE|USE|USING|VALIST|VALUE|VALUES|VARIABLE|VARIANCE|VARRAY|VARYING|VIEW|VIEWS|VOID|WHEN|WHERE|WHILE|WITH|WORK|WRAPPED|WRITE|YEAR|ZONE)\b/i,
	    // https://docs.oracle.com/en/database/oracle/oracle-database/21/lnpls/plsql-language-fundamentals.html#GUID-96A42F7C-7A71-4B90-8255-CA9C8BD9722E
	    operator: /:=?|=>|[<>^~!]=|\.\.|\|\||\*\*|[-+*/%<>=@]/
	  });
	  Prism.languages.insertBefore('plsql', 'operator', {
	    label: {
	      pattern: /<<\s*\w+\s*>>/,
	      alias: 'symbol'
	    }
	  });
	}

	// @ts-nocheck
	powerquery.displayName = 'powerquery';
	powerquery.aliases = ['mscript', 'pq'];

	/** @type {import('../core.js').Syntax} */
	function powerquery(Prism) {
	  // https://docs.microsoft.com/en-us/powerquery-m/power-query-m-language-specification

	  Prism.languages.powerquery = {
	    comment: {
	      pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,
	      lookbehind: true,
	      greedy: true
	    },
	    'quoted-identifier': {
	      pattern: /#"(?:[^"\r\n]|"")*"(?!")/,
	      greedy: true
	    },
	    string: {
	      pattern: /(?:#!)?"(?:[^"\r\n]|"")*"(?!")/,
	      greedy: true
	    },
	    constant: [
	      /\bDay\.(?:Friday|Monday|Saturday|Sunday|Thursday|Tuesday|Wednesday)\b/,
	      /\bTraceLevel\.(?:Critical|Error|Information|Verbose|Warning)\b/,
	      /\bOccurrence\.(?:All|First|Last)\b/,
	      /\bOrder\.(?:Ascending|Descending)\b/,
	      /\bRoundingMode\.(?:AwayFromZero|Down|ToEven|TowardZero|Up)\b/,
	      /\bMissingField\.(?:Error|Ignore|UseNull)\b/,
	      /\bQuoteStyle\.(?:Csv|None)\b/,
	      /\bJoinKind\.(?:FullOuter|Inner|LeftAnti|LeftOuter|RightAnti|RightOuter)\b/,
	      /\bGroupKind\.(?:Global|Local)\b/,
	      /\bExtraValues\.(?:Error|Ignore|List)\b/,
	      /\bJoinAlgorithm\.(?:Dynamic|LeftHash|LeftIndex|PairwiseHash|RightHash|RightIndex|SortMerge)\b/,
	      /\bJoinSide\.(?:Left|Right)\b/,
	      /\bPrecision\.(?:Decimal|Double)\b/,
	      /\bRelativePosition\.From(?:End|Start)\b/,
	      /\bTextEncoding\.(?:Ascii|BigEndianUnicode|Unicode|Utf16|Utf8|Windows)\b/,
	      /\b(?:Any|Binary|Date|DateTime|DateTimeZone|Duration|Function|Int16|Int32|Int64|Int8|List|Logical|None|Number|Record|Table|Text|Time)\.Type\b/,
	      /\bnull\b/
	    ],
	    boolean: /\b(?:false|true)\b/,
	    keyword:
	      /\b(?:and|as|each|else|error|if|in|is|let|meta|not|nullable|optional|or|otherwise|section|shared|then|try|type)\b|#(?:binary|date|datetime|datetimezone|duration|infinity|nan|sections|shared|table|time)\b/,
	    function: {
	      pattern: /(^|[^#\w.])[a-z_][\w.]*(?=\s*\()/i,
	      lookbehind: true
	    },
	    'data-type': {
	      pattern:
	        /\b(?:any|anynonnull|binary|date|datetime|datetimezone|duration|function|list|logical|none|number|record|table|text|time)\b/,
	      alias: 'class-name'
	    },
	    number: {
	      pattern:
	        /\b0x[\da-f]+\b|(?:[+-]?(?:\b\d+\.)?\b\d+|[+-]\.\d+|(^|[^.])\B\.\d+)(?:e[+-]?\d+)?\b/i,
	      lookbehind: true
	    },
	    operator: /[-+*\/&?@^]|<(?:=>?|>)?|>=?|=>?|\.\.\.?/,
	    punctuation: /[,;\[\](){}]/
	  };
	  Prism.languages.pq = Prism.languages['powerquery'];
	  Prism.languages.mscript = Prism.languages['powerquery'];
	}

	// @ts-nocheck
	powershell.displayName = 'powershell';
	powershell.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function powershell(Prism) {
	(function (Prism) {
	    var powershell = (Prism.languages.powershell = {
	      comment: [
	        {
	          pattern: /(^|[^`])<#[\s\S]*?#>/,
	          lookbehind: true
	        },
	        {
	          pattern: /(^|[^`])#.*/,
	          lookbehind: true
	        }
	      ],
	      string: [
	        {
	          pattern: /"(?:`[\s\S]|[^`"])*"/,
	          greedy: true,
	          inside: null // see below
	        },
	        {
	          pattern: /'(?:[^']|'')*'/,
	          greedy: true
	        }
	      ],
	      // Matches name spaces as well as casts, attribute decorators. Force starting with letter to avoid matching array indices
	      // Supports two levels of nested brackets (e.g. `[OutputType([System.Collections.Generic.List[int]])]`)
	      namespace: /\[[a-z](?:\[(?:\[[^\]]*\]|[^\[\]])*\]|[^\[\]])*\]/i,
	      boolean: /\$(?:false|true)\b/i,
	      variable: /\$\w+\b/,
	      // Cmdlets and aliases. Aliases should come last, otherwise "write" gets preferred over "write-host" for example
	      // Get-Command | ?{ $_.ModuleName -match "Microsoft.PowerShell.(Util|Core|Management)" }
	      // Get-Alias | ?{ $_.ReferencedCommand.Module.Name -match "Microsoft.PowerShell.(Util|Core|Management)" }
	      function: [
	        /\b(?:Add|Approve|Assert|Backup|Block|Checkpoint|Clear|Close|Compare|Complete|Compress|Confirm|Connect|Convert|ConvertFrom|ConvertTo|Copy|Debug|Deny|Disable|Disconnect|Dismount|Edit|Enable|Enter|Exit|Expand|Export|Find|ForEach|Format|Get|Grant|Group|Hide|Import|Initialize|Install|Invoke|Join|Limit|Lock|Measure|Merge|Move|New|Open|Optimize|Out|Ping|Pop|Protect|Publish|Push|Read|Receive|Redo|Register|Remove|Rename|Repair|Request|Reset|Resize|Resolve|Restart|Restore|Resume|Revoke|Save|Search|Select|Send|Set|Show|Skip|Sort|Split|Start|Step|Stop|Submit|Suspend|Switch|Sync|Tee|Test|Trace|Unblock|Undo|Uninstall|Unlock|Unprotect|Unpublish|Unregister|Update|Use|Wait|Watch|Where|Write)-[a-z]+\b/i,
	        /\b(?:ac|cat|chdir|clc|cli|clp|clv|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|ebp|echo|epal|epcsv|epsn|erase|fc|fl|ft|fw|gal|gbp|gc|gci|gcs|gdr|gi|gl|gm|gp|gps|group|gsv|gu|gv|gwmi|iex|ii|ipal|ipcsv|ipsn|irm|iwmi|iwr|kill|lp|ls|measure|mi|mount|move|mp|mv|nal|ndr|ni|nv|ogv|popd|ps|pushd|pwd|rbp|rd|rdr|ren|ri|rm|rmdir|rni|rnp|rp|rv|rvpa|rwmi|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls|sort|sp|spps|spsv|start|sv|swmi|tee|trcm|type|write)\b/i
	      ],
	      // per http://technet.microsoft.com/en-us/library/hh847744.aspx
	      keyword:
	        /\b(?:Begin|Break|Catch|Class|Continue|Data|Define|Do|DynamicParam|Else|ElseIf|End|Exit|Filter|Finally|For|ForEach|From|Function|If|InlineScript|Parallel|Param|Process|Return|Sequence|Switch|Throw|Trap|Try|Until|Using|Var|While|Workflow)\b/i,
	      operator: {
	        pattern:
	          /(^|\W)(?:!|-(?:b?(?:and|x?or)|as|(?:Not)?(?:Contains|In|Like|Match)|eq|ge|gt|is(?:Not)?|Join|le|lt|ne|not|Replace|sh[lr])\b|-[-=]?|\+[+=]?|[*\/%]=?)/i,
	        lookbehind: true
	      },
	      punctuation: /[|{}[\];(),.]/
	    });

	    // Variable interpolation inside strings, and nested expressions
	    powershell.string[0].inside = {
	      function: {
	        // Allow for one level of nesting
	        pattern: /(^|[^`])\$\((?:\$\([^\r\n()]*\)|(?!\$\()[^\r\n)])*\)/,
	        lookbehind: true,
	        inside: powershell
	      },
	      boolean: powershell.boolean,
	      variable: powershell.variable
	    };
	  })(Prism);
	}

	// @ts-nocheck
	processing.displayName = 'processing';
	processing.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function processing(Prism) {
	  Prism.register(clike);
	  Prism.languages.processing = Prism.languages.extend('clike', {
	    keyword:
	      /\b(?:break|case|catch|class|continue|default|else|extends|final|for|if|implements|import|new|null|private|public|return|static|super|switch|this|try|void|while)\b/,
	    // Spaces are allowed between function name and parenthesis
	    function: /\b\w+(?=\s*\()/,
	    operator: /<[<=]?|>[>=]?|&&?|\|\|?|[%?]|[!=+\-*\/]=?/
	  });
	  Prism.languages.insertBefore('processing', 'number', {
	    // Special case: XML is a type
	    constant: /\b(?!XML\b)[A-Z][A-Z\d_]+\b/,
	    type: {
	      pattern: /\b(?:boolean|byte|char|color|double|float|int|[A-Z]\w*)\b/,
	      alias: 'class-name'
	    }
	  });
	}

	// @ts-nocheck
	prolog.displayName = 'prolog';
	prolog.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function prolog(Prism) {
	  Prism.languages.prolog = {
	    // Syntax depends on the implementation
	    comment: {
	      pattern: /\/\*[\s\S]*?\*\/|%.*/,
	      greedy: true
	    },
	    // Depending on the implementation, strings may allow escaped newlines and quote-escape
	    string: {
	      pattern: /(["'])(?:\1\1|\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1(?!\1)/,
	      greedy: true
	    },
	    builtin: /\b(?:fx|fy|xf[xy]?|yfx?)\b/,
	    // FIXME: Should we list all null-ary predicates (not followed by a parenthesis) like halt, trace, etc.?
	    function: /\b[a-z]\w*(?:(?=\()|\/\d+)/,
	    number: /\b\d+(?:\.\d*)?/,
	    // Custom operators are allowed
	    operator: /[:\\=><\-?*@\/;+^|!$.]+|\b(?:is|mod|not|xor)\b/,
	    punctuation: /[(){}\[\],]/
	  };
	}

	// @ts-nocheck
	promql.displayName = 'promql';
	promql.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function promql(Prism) {
	(function (Prism) {
	    // PromQL Aggregation Operators
	    // (https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators)
	    var aggregations = [
	      'sum',
	      'min',
	      'max',
	      'avg',
	      'group',
	      'stddev',
	      'stdvar',
	      'count',
	      'count_values',
	      'bottomk',
	      'topk',
	      'quantile'
	    ];

	    // PromQL vector matching + the by and without clauses
	    // (https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching)
	    var vectorMatching = [
	      'on',
	      'ignoring',
	      'group_right',
	      'group_left',
	      'by',
	      'without'
	    ];

	    // PromQL offset modifier
	    // (https://prometheus.io/docs/prometheus/latest/querying/basics/#offset-modifier)
	    var offsetModifier = ['offset'];
	    var keywords = aggregations.concat(vectorMatching, offsetModifier);
	    Prism.languages.promql = {
	      comment: {
	        pattern: /(^[ \t]*)#.*/m,
	        lookbehind: true
	      },
	      'vector-match': {
	        // Match the comma-separated label lists inside vector matching:
	        pattern: new RegExp(
	          '((?:' + vectorMatching.join('|') + ')\\s*)\\([^)]*\\)'
	        ),
	        lookbehind: true,
	        inside: {
	          'label-key': {
	            pattern: /\b[^,]+\b/,
	            alias: 'attr-name'
	          },
	          punctuation: /[(),]/
	        }
	      },
	      'context-labels': {
	        pattern: /\{[^{}]*\}/,
	        inside: {
	          'label-key': {
	            pattern: /\b[a-z_]\w*(?=\s*(?:=|![=~]))/,
	            alias: 'attr-name'
	          },
	          'label-value': {
	            pattern: /(["'`])(?:\\[\s\S]|(?!\1)[^\\])*\1/,
	            greedy: true,
	            alias: 'attr-value'
	          },
	          punctuation: /\{|\}|=~?|![=~]|,/
	        }
	      },
	      'context-range': [
	        {
	          pattern: /\[[\w\s:]+\]/,
	          // [1m]
	          inside: {
	            punctuation: /\[|\]|:/,
	            'range-duration': {
	              pattern: /\b(?:\d+(?:[smhdwy]|ms))+\b/i,
	              alias: 'number'
	            }
	          }
	        },
	        {
	          pattern: /(\boffset\s+)\w+/,
	          // offset 1m
	          lookbehind: true,
	          inside: {
	            'range-duration': {
	              pattern: /\b(?:\d+(?:[smhdwy]|ms))+\b/i,
	              alias: 'number'
	            }
	          }
	        }
	      ],
	      keyword: new RegExp('\\b(?:' + keywords.join('|') + ')\\b', 'i'),
	      function: /\b[a-z_]\w*(?=\s*\()/i,
	      number:
	        /[-+]?(?:(?:\b\d+(?:\.\d+)?|\B\.\d+)(?:e[-+]?\d+)?\b|\b(?:0x[0-9a-f]+|nan|inf)\b)/i,
	      operator: /[\^*/%+-]|==|!=|<=|<|>=|>|\b(?:and|or|unless)\b/i,
	      punctuation: /[{};()`,.[\]]/
	    };
	  })(Prism);
	}

	// @ts-nocheck
	properties.displayName = 'properties';
	properties.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function properties(Prism) {
	  Prism.languages.properties = {
	    comment: /^[ \t]*[#!].*$/m,
	    value: {
	      pattern:
	        /(^[ \t]*(?:\\(?:\r\n|[\s\S])|[^\\\s:=])+(?: *[=:] *(?! )| ))(?:\\(?:\r\n|[\s\S])|[^\\\r\n])+/m,
	      lookbehind: true,
	      alias: 'attr-value'
	    },
	    key: {
	      pattern: /^[ \t]*(?:\\(?:\r\n|[\s\S])|[^\\\s:=])+(?= *[=:]| )/m,
	      alias: 'attr-name'
	    },
	    punctuation: /[=:]/
	  };
	}

	// @ts-nocheck
	protobuf.displayName = 'protobuf';
	protobuf.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function protobuf(Prism) {
	  Prism.register(clike)
	  ;(function (Prism) {
	    var builtinTypes =
	      /\b(?:bool|bytes|double|s?fixed(?:32|64)|float|[su]?int(?:32|64)|string)\b/;
	    Prism.languages.protobuf = Prism.languages.extend('clike', {
	      'class-name': [
	        {
	          pattern:
	            /(\b(?:enum|extend|message|service)\s+)[A-Za-z_]\w*(?=\s*\{)/,
	          lookbehind: true
	        },
	        {
	          pattern:
	            /(\b(?:rpc\s+\w+|returns)\s*\(\s*(?:stream\s+)?)\.?[A-Za-z_]\w*(?:\.[A-Za-z_]\w*)*(?=\s*\))/,
	          lookbehind: true
	        }
	      ],
	      keyword:
	        /\b(?:enum|extend|extensions|import|message|oneof|option|optional|package|public|repeated|required|reserved|returns|rpc(?=\s+\w)|service|stream|syntax|to)\b(?!\s*=\s*\d)/,
	      function: /\b[a-z_]\w*(?=\s*\()/i
	    });
	    Prism.languages.insertBefore('protobuf', 'operator', {
	      map: {
	        pattern: /\bmap<\s*[\w.]+\s*,\s*[\w.]+\s*>(?=\s+[a-z_]\w*\s*[=;])/i,
	        alias: 'class-name',
	        inside: {
	          punctuation: /[<>.,]/,
	          builtin: builtinTypes
	        }
	      },
	      builtin: builtinTypes,
	      'positional-class-name': {
	        pattern: /(?:\b|\B\.)[a-z_]\w*(?:\.[a-z_]\w*)*(?=\s+[a-z_]\w*\s*[=;])/i,
	        alias: 'class-name',
	        inside: {
	          punctuation: /\./
	        }
	      },
	      annotation: {
	        pattern: /(\[\s*)[a-z_]\w*(?=\s*=)/i,
	        lookbehind: true
	      }
	    });
	  })(Prism);
	}

	// @ts-nocheck
	stylus.displayName = 'stylus';
	stylus.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function stylus(Prism) {
	(function (Prism) {
	    var unit = {
	      pattern: /(\b\d+)(?:%|[a-z]+)/,
	      lookbehind: true
	    };
	    // 123 -123 .123 -.123 12.3 -12.3
	    var number = {
	      pattern: /(^|[^\w.-])-?(?:\d+(?:\.\d+)?|\.\d+)/,
	      lookbehind: true
	    };
	    var inside = {
	      comment: {
	        pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,
	        lookbehind: true
	      },
	      url: {
	        pattern: /\burl\((["']?).*?\1\)/i,
	        greedy: true
	      },
	      string: {
	        pattern: /("|')(?:(?!\1)[^\\\r\n]|\\(?:\r\n|[\s\S]))*\1/,
	        greedy: true
	      },
	      interpolation: null,
	      // See below
	      func: null,
	      // See below
	      important: /\B!(?:important|optional)\b/i,
	      keyword: {
	        pattern: /(^|\s+)(?:(?:else|for|if|return|unless)(?=\s|$)|@[\w-]+)/,
	        lookbehind: true
	      },
	      hexcode: /#[\da-f]{3,6}/i,
	      color: [
	        /\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\b/i,
	        {
	          pattern:
	            /\b(?:hsl|rgb)\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*\)\B|\b(?:hsl|rgb)a\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*,\s*(?:0|0?\.\d+|1)\s*\)\B/i,
	          inside: {
	            unit: unit,
	            number: number,
	            function: /[\w-]+(?=\()/,
	            punctuation: /[(),]/
	          }
	        }
	      ],
	      entity: /\\[\da-f]{1,8}/i,
	      unit: unit,
	      boolean: /\b(?:false|true)\b/,
	      operator: [
	        // We want non-word chars around "-" because it is
	        // accepted in property names.
	        /~|[+!\/%<>?=]=?|[-:]=|\*[*=]?|\.{2,3}|&&|\|\||\B-\B|\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\b/
	      ],
	      number: number,
	      punctuation: /[{}()\[\];:,]/
	    };
	    inside['interpolation'] = {
	      pattern: /\{[^\r\n}:]+\}/,
	      alias: 'variable',
	      inside: {
	        delimiter: {
	          pattern: /^\{|\}$/,
	          alias: 'punctuation'
	        },
	        rest: inside
	      }
	    };
	    inside['func'] = {
	      pattern: /[\w-]+\([^)]*\).*/,
	      inside: {
	        function: /^[^(]+/,
	        rest: inside
	      }
	    };
	    Prism.languages.stylus = {
	      'atrule-declaration': {
	        pattern: /(^[ \t]*)@.+/m,
	        lookbehind: true,
	        inside: {
	          atrule: /^@[\w-]+/,
	          rest: inside
	        }
	      },
	      'variable-declaration': {
	        pattern: /(^[ \t]*)[\w$-]+\s*.?=[ \t]*(?:\{[^{}]*\}|\S.*|$)/m,
	        lookbehind: true,
	        inside: {
	          variable: /^\S+/,
	          rest: inside
	        }
	      },
	      statement: {
	        pattern: /(^[ \t]*)(?:else|for|if|return|unless)[ \t].+/m,
	        lookbehind: true,
	        inside: {
	          keyword: /^\S+/,
	          rest: inside
	        }
	      },
	      // A property/value pair cannot end with a comma or a brace
	      // It cannot have indented content unless it ended with a semicolon
	      'property-declaration': {
	        pattern:
	          /((?:^|\{)([ \t]*))(?:[\w-]|\{[^}\r\n]+\})+(?:\s*:\s*|[ \t]+)(?!\s)[^{\r\n]*(?:;|[^{\r\n,]$(?!(?:\r?\n|\r)(?:\{|\2[ \t])))/m,
	        lookbehind: true,
	        inside: {
	          property: {
	            pattern: /^[^\s:]+/,
	            inside: {
	              interpolation: inside.interpolation
	            }
	          },
	          rest: inside
	        }
	      },
	      // A selector can contain parentheses only as part of a pseudo-element
	      // It can span multiple lines.
	      // It must end with a comma or an accolade or have indented content.
	      selector: {
	        pattern:
	          /(^[ \t]*)(?:(?=\S)(?:[^{}\r\n:()]|::?[\w-]+(?:\([^)\r\n]*\)|(?![\w-]))|\{[^}\r\n]+\})+)(?:(?:\r?\n|\r)(?:\1(?:(?=\S)(?:[^{}\r\n:()]|::?[\w-]+(?:\([^)\r\n]*\)|(?![\w-]))|\{[^}\r\n]+\})+)))*(?:,$|\{|(?=(?:\r?\n|\r)(?:\{|\1[ \t])))/m,
	        lookbehind: true,
	        inside: {
	          interpolation: inside.interpolation,
	          comment: inside.comment,
	          punctuation: /[{},]/
	        }
	      },
	      func: inside.func,
	      string: inside.string,
	      comment: {
	        pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,
	        lookbehind: true,
	        greedy: true
	      },
	      interpolation: inside.interpolation,
	      punctuation: /[{}()\[\];:.]/
	    };
	  })(Prism);
	}

	// @ts-nocheck
	twig.displayName = 'twig';
	twig.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function twig(Prism) {
	  Prism.register(markupTemplating);
	  Prism.languages.twig = {
	    comment: /^\{#[\s\S]*?#\}$/,
	    'tag-name': {
	      pattern: /(^\{%-?\s*)\w+/,
	      lookbehind: true,
	      alias: 'keyword'
	    },
	    delimiter: {
	      pattern: /^\{[{%]-?|-?[%}]\}$/,
	      alias: 'punctuation'
	    },
	    string: {
	      pattern: /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
	      inside: {
	        punctuation: /^['"]|['"]$/
	      }
	    },
	    keyword: /\b(?:even|if|odd)\b/,
	    boolean: /\b(?:false|null|true)\b/,
	    number: /\b0x[\dA-Fa-f]+|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee][-+]?\d+)?/,
	    operator: [
	      {
	        pattern:
	          /(\s)(?:and|b-and|b-or|b-xor|ends with|in|is|matches|not|or|same as|starts with)(?=\s)/,
	        lookbehind: true
	      },
	      /[=<>]=?|!=|\*\*?|\/\/?|\?:?|[-+~%|]/
	    ],
	    punctuation: /[()\[\]{}:.,]/
	  };
	  Prism.hooks.add('before-tokenize', function (env) {
	    if (env.language !== 'twig') {
	      return
	    }
	    var pattern = /\{(?:#[\s\S]*?#|%[\s\S]*?%|\{[\s\S]*?\})\}/g;
	    Prism.languages['markup-templating'].buildPlaceholders(env, 'twig', pattern);
	  });
	  Prism.hooks.add('after-tokenize', function (env) {
	    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'twig');
	  });
	}

	// @ts-nocheck
	pug.displayName = 'pug';
	pug.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function pug(Prism) {
	  Prism.register(javascript);
	  Prism.register(markup)
	  ;(function (Prism) {
	    // TODO:
	    // - Add CSS highlighting inside <style> tags
	    // - Add support for multi-line code blocks
	    // - Add support for interpolation #{} and !{}
	    // - Add support for tag interpolation #[]
	    // - Add explicit support for plain text using |
	    // - Add support for markup embedded in plain text

	    Prism.languages.pug = {
	      // Multiline stuff should appear before the rest

	      // This handles both single-line and multi-line comments
	      comment: {
	        pattern: /(^([\t ]*))\/\/.*(?:(?:\r?\n|\r)\2[\t ].+)*/m,
	        lookbehind: true
	      },
	      // All the tag-related part is in lookbehind
	      // so that it can be highlighted by the "tag" pattern
	      'multiline-script': {
	        pattern:
	          /(^([\t ]*)script\b.*\.[\t ]*)(?:(?:\r?\n|\r(?!\n))(?:\2[\t ].+|\s*?(?=\r?\n|\r)))+/m,
	        lookbehind: true,
	        inside: Prism.languages.javascript
	      },
	      // See at the end of the file for known filters
	      filter: {
	        pattern:
	          /(^([\t ]*)):.+(?:(?:\r?\n|\r(?!\n))(?:\2[\t ].+|\s*?(?=\r?\n|\r)))+/m,
	        lookbehind: true,
	        inside: {
	          'filter-name': {
	            pattern: /^:[\w-]+/,
	            alias: 'variable'
	          },
	          text: /\S[\s\S]*/
	        }
	      },
	      'multiline-plain-text': {
	        pattern:
	          /(^([\t ]*)[\w\-#.]+\.[\t ]*)(?:(?:\r?\n|\r(?!\n))(?:\2[\t ].+|\s*?(?=\r?\n|\r)))+/m,
	        lookbehind: true
	      },
	      markup: {
	        pattern: /(^[\t ]*)<.+/m,
	        lookbehind: true,
	        inside: Prism.languages.markup
	      },
	      doctype: {
	        pattern: /((?:^|\n)[\t ]*)doctype(?: .+)?/,
	        lookbehind: true
	      },
	      // This handle all conditional and loop keywords
	      'flow-control': {
	        pattern:
	          /(^[\t ]*)(?:case|default|each|else|if|unless|when|while)\b(?: .+)?/m,
	        lookbehind: true,
	        inside: {
	          each: {
	            pattern: /^each .+? in\b/,
	            inside: {
	              keyword: /\b(?:each|in)\b/,
	              punctuation: /,/
	            }
	          },
	          branch: {
	            pattern: /^(?:case|default|else|if|unless|when|while)\b/,
	            alias: 'keyword'
	          },
	          rest: Prism.languages.javascript
	        }
	      },
	      keyword: {
	        pattern: /(^[\t ]*)(?:append|block|extends|include|prepend)\b.+/m,
	        lookbehind: true
	      },
	      mixin: [
	        // Declaration
	        {
	          pattern: /(^[\t ]*)mixin .+/m,
	          lookbehind: true,
	          inside: {
	            keyword: /^mixin/,
	            function: /\w+(?=\s*\(|\s*$)/,
	            punctuation: /[(),.]/
	          }
	        },
	        // Usage
	        {
	          pattern: /(^[\t ]*)\+.+/m,
	          lookbehind: true,
	          inside: {
	            name: {
	              pattern: /^\+\w+/,
	              alias: 'function'
	            },
	            rest: Prism.languages.javascript
	          }
	        }
	      ],
	      script: {
	        pattern: /(^[\t ]*script(?:(?:&[^(]+)?\([^)]+\))*[\t ]).+/m,
	        lookbehind: true,
	        inside: Prism.languages.javascript
	      },
	      'plain-text': {
	        pattern:
	          /(^[\t ]*(?!-)[\w\-#.]*[\w\-](?:(?:&[^(]+)?\([^)]+\))*\/?[\t ]).+/m,
	        lookbehind: true
	      },
	      tag: {
	        pattern: /(^[\t ]*)(?!-)[\w\-#.]*[\w\-](?:(?:&[^(]+)?\([^)]+\))*\/?:?/m,
	        lookbehind: true,
	        inside: {
	          attributes: [
	            {
	              pattern: /&[^(]+\([^)]+\)/,
	              inside: Prism.languages.javascript
	            },
	            {
	              pattern: /\([^)]+\)/,
	              inside: {
	                'attr-value': {
	                  pattern: /(=\s*(?!\s))(?:\{[^}]*\}|[^,)\r\n]+)/,
	                  lookbehind: true,
	                  inside: Prism.languages.javascript
	                },
	                'attr-name': /[\w-]+(?=\s*!?=|\s*[,)])/,
	                punctuation: /[!=(),]+/
	              }
	            }
	          ],
	          punctuation: /:/,
	          'attr-id': /#[\w\-]+/,
	          'attr-class': /\.[\w\-]+/
	        }
	      },
	      code: [
	        {
	          pattern: /(^[\t ]*(?:-|!?=)).+/m,
	          lookbehind: true,
	          inside: Prism.languages.javascript
	        }
	      ],
	      punctuation: /[.\-!=|]+/
	    };
	    var filter_pattern =
	      /(^([\t ]*)):<filter_name>(?:(?:\r?\n|\r(?!\n))(?:\2[\t ].+|\s*?(?=\r?\n|\r)))+/
	        .source;

	    // Non exhaustive list of available filters and associated languages
	    var filters = [
	      {
	        filter: 'atpl',
	        language: 'twig'
	      },
	      {
	        filter: 'coffee',
	        language: 'coffeescript'
	      },
	      'ejs',
	      'handlebars',
	      'less',
	      'livescript',
	      'markdown',
	      {
	        filter: 'sass',
	        language: 'scss'
	      },
	      'stylus'
	    ];
	    var all_filters = {};
	    for (var i = 0, l = filters.length; i < l; i++) {
	      var filter = filters[i];
	      filter =
	        typeof filter === 'string'
	          ? {
	              filter: filter,
	              language: filter
	            }
	          : filter;
	      if (Prism.languages[filter.language]) {
	        all_filters['filter-' + filter.filter] = {
	          pattern: RegExp(
	            filter_pattern.replace('<filter_name>', function () {
	              return filter.filter
	            }),
	            'm'
	          ),
	          lookbehind: true,
	          inside: {
	            'filter-name': {
	              pattern: /^:[\w-]+/,
	              alias: 'variable'
	            },
	            text: {
	              pattern: /\S[\s\S]*/,
	              alias: [filter.language, 'language-' + filter.language],
	              inside: Prism.languages[filter.language]
	            }
	          }
	        };
	      }
	    }
	    Prism.languages.insertBefore('pug', 'filter', all_filters);
	  })(Prism);
	}

	// @ts-nocheck
	puppet.displayName = 'puppet';
	puppet.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function puppet(Prism) {
	(function (Prism) {
	    Prism.languages.puppet = {
	      heredoc: [
	        // Matches the content of a quoted heredoc string (subject to interpolation)
	        {
	          pattern:
	            /(@\("([^"\r\n\/):]+)"(?:\/[nrts$uL]*)?\).*(?:\r?\n|\r))(?:.*(?:\r?\n|\r(?!\n)))*?[ \t]*(?:\|[ \t]*)?(?:-[ \t]*)?\2/,
	          lookbehind: true,
	          alias: 'string',
	          inside: {
	            // Matches the end tag
	            punctuation: /(?=\S).*\S(?= *$)/
	            // See interpolation below
	          }
	        },
	        // Matches the content of an unquoted heredoc string (no interpolation)
	        {
	          pattern:
	            /(@\(([^"\r\n\/):]+)(?:\/[nrts$uL]*)?\).*(?:\r?\n|\r))(?:.*(?:\r?\n|\r(?!\n)))*?[ \t]*(?:\|[ \t]*)?(?:-[ \t]*)?\2/,
	          lookbehind: true,
	          greedy: true,
	          alias: 'string',
	          inside: {
	            // Matches the end tag
	            punctuation: /(?=\S).*\S(?= *$)/
	          }
	        },
	        // Matches the start tag of heredoc strings
	        {
	          pattern: /@\("?(?:[^"\r\n\/):]+)"?(?:\/[nrts$uL]*)?\)/,
	          alias: 'string',
	          inside: {
	            punctuation: {
	              pattern: /(\().+?(?=\))/,
	              lookbehind: true
	            }
	          }
	        }
	      ],
	      'multiline-comment': {
	        pattern: /(^|[^\\])\/\*[\s\S]*?\*\//,
	        lookbehind: true,
	        greedy: true,
	        alias: 'comment'
	      },
	      regex: {
	        // Must be prefixed with the keyword "node" or a non-word char
	        pattern:
	          /((?:\bnode\s+|[~=\(\[\{,]\s*|[=+]>\s*|^\s*))\/(?:[^\/\\]|\\[\s\S])+\/(?:[imx]+\b|\B)/,
	        lookbehind: true,
	        greedy: true,
	        inside: {
	          // Extended regexes must have the x flag. They can contain single-line comments.
	          'extended-regex': {
	            pattern: /^\/(?:[^\/\\]|\\[\s\S])+\/[im]*x[im]*$/,
	            inside: {
	              comment: /#.*/
	            }
	          }
	        }
	      },
	      comment: {
	        pattern: /(^|[^\\])#.*/,
	        lookbehind: true,
	        greedy: true
	      },
	      string: {
	        // Allow for one nested level of double quotes inside interpolation
	        pattern:
	          /(["'])(?:\$\{(?:[^'"}]|(["'])(?:(?!\2)[^\\]|\\[\s\S])*\2)+\}|\$(?!\{)|(?!\1)[^\\$]|\\[\s\S])*\1/,
	        greedy: true,
	        inside: {
	          'double-quoted': {
	            pattern: /^"[\s\S]*"$/,
	            inside: {
	              // See interpolation below
	            }
	          }
	        }
	      },
	      variable: {
	        pattern: /\$(?:::)?\w+(?:::\w+)*/,
	        inside: {
	          punctuation: /::/
	        }
	      },
	      'attr-name': /(?:\b\w+|\*)(?=\s*=>)/,
	      function: [
	        {
	          pattern: /(\.)(?!\d)\w+/,
	          lookbehind: true
	        },
	        /\b(?:contain|debug|err|fail|include|info|notice|realize|require|tag|warning)\b|\b(?!\d)\w+(?=\()/
	      ],
	      number: /\b(?:0x[a-f\d]+|\d+(?:\.\d+)?(?:e-?\d+)?)\b/i,
	      boolean: /\b(?:false|true)\b/,
	      // Includes words reserved for future use
	      keyword:
	        /\b(?:application|attr|case|class|consumes|default|define|else|elsif|function|if|import|inherits|node|private|produces|type|undef|unless)\b/,
	      datatype: {
	        pattern:
	          /\b(?:Any|Array|Boolean|Callable|Catalogentry|Class|Collection|Data|Default|Enum|Float|Hash|Integer|NotUndef|Numeric|Optional|Pattern|Regexp|Resource|Runtime|Scalar|String|Struct|Tuple|Type|Undef|Variant)\b/,
	        alias: 'symbol'
	      },
	      operator:
	        /=[=~>]?|![=~]?|<(?:<\|?|[=~|-])?|>[>=]?|->?|~>|\|>?>?|[*\/%+?]|\b(?:and|in|or)\b/,
	      punctuation: /[\[\]{}().,;]|:+/
	    };
	    var interpolation = [
	      {
	        // Allow for one nested level of braces inside interpolation
	        pattern:
	          /(^|[^\\])\$\{(?:[^'"{}]|\{[^}]*\}|(["'])(?:(?!\2)[^\\]|\\[\s\S])*\2)+\}/,
	        lookbehind: true,
	        inside: {
	          'short-variable': {
	            // Negative look-ahead prevent wrong highlighting of functions
	            pattern: /(^\$\{)(?!\w+\()(?:::)?\w+(?:::\w+)*/,
	            lookbehind: true,
	            alias: 'variable',
	            inside: {
	              punctuation: /::/
	            }
	          },
	          delimiter: {
	            pattern: /^\$/,
	            alias: 'variable'
	          },
	          rest: Prism.languages.puppet
	        }
	      },
	      {
	        pattern: /(^|[^\\])\$(?:::)?\w+(?:::\w+)*/,
	        lookbehind: true,
	        alias: 'variable',
	        inside: {
	          punctuation: /::/
	        }
	      }
	    ];
	    Prism.languages.puppet['heredoc'][0].inside.interpolation = interpolation;
	    Prism.languages.puppet['string'].inside[
	      'double-quoted'
	    ].inside.interpolation = interpolation;
	  })(Prism);
	}

	// @ts-nocheck
	pure.displayName = 'pure';
	pure.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function pure(Prism) {
	(function (Prism) {
	    // https://agraef.github.io/pure-docs/pure.html#lexical-matters

	    Prism.languages.pure = {
	      comment: [
	        {
	          pattern: /(^|[^\\])\/\*[\s\S]*?\*\//,
	          lookbehind: true
	        },
	        {
	          pattern: /(^|[^\\:])\/\/.*/,
	          lookbehind: true
	        },
	        /#!.+/
	      ],
	      'inline-lang': {
	        pattern: /%<[\s\S]+?%>/,
	        greedy: true,
	        inside: {
	          lang: {
	            pattern: /(^%< *)-\*-.+?-\*-/,
	            lookbehind: true,
	            alias: 'comment'
	          },
	          delimiter: {
	            pattern: /^%<.*|%>$/,
	            alias: 'punctuation'
	          }
	        }
	      },
	      string: {
	        pattern: /"(?:\\.|[^"\\\r\n])*"/,
	        greedy: true
	      },
	      number: {
	        // The look-behind prevents wrong highlighting of the .. operator
	        pattern:
	          /((?:\.\.)?)(?:\b(?:inf|nan)\b|\b0x[\da-f]+|(?:\b(?:0b)?\d+(?:\.\d+)?|\B\.\d+)(?:e[+-]?\d+)?L?)/i,
	        lookbehind: true
	      },
	      keyword:
	        /\b(?:NULL|ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\b/,
	      function:
	        /\b(?:abs|add_(?:addr|constdef|(?:fundef|interface|macdef|typedef)(?:_at)?|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_c?string(?:_pointer)?|byte_(?:matrix|pointer)|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|sentry|short|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\b/,
	      special: {
	        pattern: /\b__[a-z]+__\b/i,
	        alias: 'builtin'
	      },
	      // Any combination of operator chars can be an operator
	      // eslint-disable-next-line no-misleading-character-class
	      operator:
	        /(?:[!"#$%&'*+,\-.\/:<=>?@\\^`|~\u00a1-\u00bf\u00d7-\u00f7\u20d0-\u2bff]|\b_+\b)+|\b(?:and|div|mod|not|or)\b/,
	      // FIXME: How can we prevent | and , to be highlighted as operator when they are used alone?
	      punctuation: /[(){}\[\];,|]/
	    };
	    var inlineLanguages = [
	      'c',
	      {
	        lang: 'c++',
	        alias: 'cpp'
	      },
	      'fortran'
	    ];
	    var inlineLanguageRe = /%< *-\*- *<lang>\d* *-\*-[\s\S]+?%>/.source;
	    inlineLanguages.forEach(function (lang) {
	      var alias = lang;
	      if (typeof lang !== 'string') {
	        alias = lang.alias;
	        lang = lang.lang;
	      }
	      if (Prism.languages[alias]) {
	        var o = {};
	        o['inline-lang-' + alias] = {
	          pattern: RegExp(
	            inlineLanguageRe.replace(
	              '<lang>',
	              lang.replace(/([.+*?\/\\(){}\[\]])/g, '\\$1')
	            ),
	            'i'
	          ),
	          inside: Prism.util.clone(Prism.languages.pure['inline-lang'].inside)
	        };
	        o['inline-lang-' + alias].inside.rest = Prism.util.clone(
	          Prism.languages[alias]
	        );
	        Prism.languages.insertBefore('pure', 'inline-lang', o);
	      }
	    });

	    // C is the default inline language
	    if (Prism.languages.c) {
	      Prism.languages.pure['inline-lang'].inside.rest = Prism.util.clone(
	        Prism.languages.c
	      );
	    }
	  })(Prism);
	}

	// @ts-nocheck
	purebasic.displayName = 'purebasic';
	purebasic.aliases = ['pbfasm'];

	/** @type {import('../core.js').Syntax} */
	function purebasic(Prism) {
	  Prism.register(clike);
	  /*
	Original Code by Bas Groothedde
	!!MANY THANKS!! I never would have made this, regex and me will never be best friends ;)
	==> https://codepen.io/ImagineProgramming/details/JYydBy/
	slightly changed to pass all tests
	*/

	  // PureBasic support, steal stuff from ansi-c
	  Prism.languages.purebasic = Prism.languages.extend('clike', {
	    comment: /;.*/,
	    keyword:
	      /\b(?:align|and|as|break|calldebugger|case|compilercase|compilerdefault|compilerelse|compilerelseif|compilerendif|compilerendselect|compilererror|compilerif|compilerselect|continue|data|datasection|debug|debuglevel|declare|declarec|declarecdll|declaredll|declaremodule|default|define|dim|disableasm|disabledebugger|disableexplicit|else|elseif|enableasm|enabledebugger|enableexplicit|end|enddatasection|enddeclaremodule|endenumeration|endif|endimport|endinterface|endmacro|endmodule|endprocedure|endselect|endstructure|endstructureunion|endwith|enumeration|extends|fakereturn|for|foreach|forever|global|gosub|goto|if|import|importc|includebinary|includefile|includepath|interface|macro|module|newlist|newmap|next|not|or|procedure|procedurec|procedurecdll|proceduredll|procedurereturn|protected|prototype|prototypec|read|redim|repeat|restore|return|runtime|select|shared|static|step|structure|structureunion|swap|threaded|to|until|wend|while|with|xincludefile|xor)\b/i,
	    function: /\b\w+(?:\.\w+)?\s*(?=\()/,
	    number: /(?:\$[\da-f]+|\b-?(?:\d+(?:\.\d+)?|\.\d+)(?:e[+-]?\d+)?)\b/i,
	    operator:
	      /(?:@\*?|\?|\*)\w+\$?|-[>-]?|\+\+?|!=?|<<?=?|>>?=?|==?|&&?|\|?\||[~^%?*/@]/
	  });
	  Prism.languages.insertBefore('purebasic', 'keyword', {
	    tag: /#\w+\$?/,
	    asm: {
	      pattern: /(^[\t ]*)!.*/m,
	      lookbehind: true,
	      alias: 'tag',
	      inside: {
	        comment: /;.*/,
	        string: {
	          pattern: /(["'`])(?:\\.|(?!\1)[^\\\r\n])*\1/,
	          greedy: true
	        },
	        // Anonymous label references, i.e.: jmp @b
	        'label-reference-anonymous': {
	          pattern: /(!\s*j[a-z]+\s+)@[fb]/i,
	          lookbehind: true,
	          alias: 'fasm-label'
	        },
	        // Named label reference, i.e.: jne label1
	        'label-reference-addressed': {
	          pattern: /(!\s*j[a-z]+\s+)[A-Z._?$@][\w.?$@~#]*/i,
	          lookbehind: true,
	          alias: 'fasm-label'
	        },
	        keyword: [
	          /\b(?:extern|global)\b[^;\r\n]*/i,
	          /\b(?:CPU|DEFAULT|FLOAT)\b.*/
	        ],
	        function: {
	          pattern: /^([\t ]*!\s*)[\da-z]+(?=\s|$)/im,
	          lookbehind: true
	        },
	        'function-inline': {
	          pattern: /(:\s*)[\da-z]+(?=\s)/i,
	          lookbehind: true,
	          alias: 'function'
	        },
	        label: {
	          pattern: /^([\t ]*!\s*)[A-Za-z._?$@][\w.?$@~#]*(?=:)/m,
	          lookbehind: true,
	          alias: 'fasm-label'
	        },
	        register:
	          /\b(?:st\d|[xyz]mm\d\d?|[cdt]r\d|r\d\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(?:bp|di|si|sp)|[cdefgs]s|mm\d+)\b/i,
	        number:
	          /(?:\b|-|(?=\$))(?:0[hx](?:[\da-f]*\.)?[\da-f]+(?:p[+-]?\d+)?|\d[\da-f]+[hx]|\$\d[\da-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0[dt]\d+|(?:\d+(?:\.\d+)?|\.\d+)(?:\.?e[+-]?\d+)?[dt]?)\b/i,
	        operator: /[\[\]*+\-/%<>=&|$!,.:]/
	      }
	    }
	  });
	  delete Prism.languages.purebasic['class-name'];
	  delete Prism.languages.purebasic['boolean'];
	  Prism.languages.pbfasm = Prism.languages['purebasic'];
	}

	// @ts-nocheck
	purescript.displayName = 'purescript';
	purescript.aliases = ['purs'];

	/** @type {import('../core.js').Syntax} */
	function purescript(Prism) {
	  Prism.register(haskell);
	  Prism.languages.purescript = Prism.languages.extend('haskell', {
	    keyword:
	      /\b(?:ado|case|class|data|derive|do|else|forall|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\b|∀/,
	    'import-statement': {
	      // The imported or hidden names are not included in this import
	      // statement. This is because we want to highlight those exactly like
	      // we do for the names in the program.
	      pattern:
	        /(^[\t ]*)import\s+[A-Z][\w']*(?:\.[A-Z][\w']*)*(?:\s+as\s+[A-Z][\w']*(?:\.[A-Z][\w']*)*)?(?:\s+hiding\b)?/m,
	      lookbehind: true,
	      inside: {
	        keyword: /\b(?:as|hiding|import)\b/,
	        punctuation: /\./
	      }
	    },
	    // These are builtin functions only. Constructors are highlighted later as a constant.
	    builtin:
	      /\b(?:absurd|add|ap|append|apply|between|bind|bottom|clamp|compare|comparing|compose|conj|const|degree|discard|disj|div|eq|flap|flip|gcd|identity|ifM|join|lcm|liftA1|liftM1|map|max|mempty|min|mod|mul|negate|not|notEq|one|otherwise|recip|show|sub|top|unit|unless|unlessM|void|when|whenM|zero)\b/,
	    operator: [
	      // Infix operators
	      Prism.languages.haskell.operator[0],
	      // ASCII operators
	      Prism.languages.haskell.operator[2],
	      // All UTF16 Unicode operator symbols
	      // This regex is equivalent to /(?=[\x80-\uFFFF])[\p{gc=Math_Symbol}\p{gc=Currency_Symbol}\p{Modifier_Symbol}\p{Other_Symbol}]/u
	      // See https://github.com/PrismJS/prism/issues/3006 for more details.
	      /[\xa2-\xa6\xa8\xa9\xac\xae-\xb1\xb4\xb8\xd7\xf7\u02c2-\u02c5\u02d2-\u02df\u02e5-\u02eb\u02ed\u02ef-\u02ff\u0375\u0384\u0385\u03f6\u0482\u058d-\u058f\u0606-\u0608\u060b\u060e\u060f\u06de\u06e9\u06fd\u06fe\u07f6\u07fe\u07ff\u09f2\u09f3\u09fa\u09fb\u0af1\u0b70\u0bf3-\u0bfa\u0c7f\u0d4f\u0d79\u0e3f\u0f01-\u0f03\u0f13\u0f15-\u0f17\u0f1a-\u0f1f\u0f34\u0f36\u0f38\u0fbe-\u0fc5\u0fc7-\u0fcc\u0fce\u0fcf\u0fd5-\u0fd8\u109e\u109f\u1390-\u1399\u166d\u17db\u1940\u19de-\u19ff\u1b61-\u1b6a\u1b74-\u1b7c\u1fbd\u1fbf-\u1fc1\u1fcd-\u1fcf\u1fdd-\u1fdf\u1fed-\u1fef\u1ffd\u1ffe\u2044\u2052\u207a-\u207c\u208a-\u208c\u20a0-\u20bf\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211e-\u2123\u2125\u2127\u2129\u212e\u213a\u213b\u2140-\u2144\u214a-\u214d\u214f\u218a\u218b\u2190-\u2307\u230c-\u2328\u232b-\u2426\u2440-\u244a\u249c-\u24e9\u2500-\u2767\u2794-\u27c4\u27c7-\u27e5\u27f0-\u2982\u2999-\u29d7\u29dc-\u29fb\u29fe-\u2b73\u2b76-\u2b95\u2b97-\u2bff\u2ce5-\u2cea\u2e50\u2e51\u2e80-\u2e99\u2e9b-\u2ef3\u2f00-\u2fd5\u2ff0-\u2ffb\u3004\u3012\u3013\u3020\u3036\u3037\u303e\u303f\u309b\u309c\u3190\u3191\u3196-\u319f\u31c0-\u31e3\u3200-\u321e\u322a-\u3247\u3250\u3260-\u327f\u328a-\u32b0\u32c0-\u33ff\u4dc0-\u4dff\ua490-\ua4c6\ua700-\ua716\ua720\ua721\ua789\ua78a\ua828-\ua82b\ua836-\ua839\uaa77-\uaa79\uab5b\uab6a\uab6b\ufb29\ufbb2-\ufbc1\ufdfc\ufdfd\ufe62\ufe64-\ufe66\ufe69\uff04\uff0b\uff1c-\uff1e\uff3e\uff40\uff5c\uff5e\uffe0-\uffe6\uffe8-\uffee\ufffc\ufffd]/
	    ]
	  });
	  Prism.languages.purs = Prism.languages.purescript;
	}

	// @ts-nocheck
	qsharp.displayName = 'qsharp';
	qsharp.aliases = ['qs'];

	/** @type {import('../core.js').Syntax} */
	function qsharp(Prism) {
	  Prism.register(clike)
	  ;(function (Prism) {
	    /**
	     * Replaces all placeholders "<<n>>" of given pattern with the n-th replacement (zero based).
	     *
	     * Note: This is a simple text based replacement. Be careful when using backreferences!
	     *
	     * @param {string} pattern the given pattern.
	     * @param {string[]} replacements a list of replacement which can be inserted into the given pattern.
	     * @returns {string} the pattern with all placeholders replaced with their corresponding replacements.
	     * @example replace(/a<<0>>a/.source, [/b+/.source]) === /a(?:b+)a/.source
	     */
	    function replace(pattern, replacements) {
	      return pattern.replace(/<<(\d+)>>/g, function (m, index) {
	        return '(?:' + replacements[+index] + ')'
	      })
	    }
	    /**
	     * @param {string} pattern
	     * @param {string[]} replacements
	     * @param {string} [flags]
	     * @returns {RegExp}
	     */
	    function re(pattern, replacements, flags) {
	      return RegExp(replace(pattern, replacements), flags || '')
	    }

	    /**
	     * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.
	     *
	     * @param {string} pattern
	     * @param {number} depthLog2
	     * @returns {string}
	     */
	    function nested(pattern, depthLog2) {
	      for (var i = 0; i < depthLog2; i++) {
	        pattern = pattern.replace(/<<self>>/g, function () {
	          return '(?:' + pattern + ')'
	        });
	      }
	      return pattern.replace(/<<self>>/g, '[^\\s\\S]')
	    }

	    // https://docs.microsoft.com/en-us/azure/quantum/user-guide/language/typesystem/
	    // https://github.com/microsoft/qsharp-language/tree/main/Specifications/Language/5_Grammar
	    var keywordKinds = {
	      // keywords which represent a return or variable type
	      type: 'Adj BigInt Bool Ctl Double false Int One Pauli PauliI PauliX PauliY PauliZ Qubit Range Result String true Unit Zero',
	      // all other keywords
	      other:
	        'Adjoint adjoint apply as auto body borrow borrowing Controlled controlled distribute elif else fail fixup for function if in internal intrinsic invert is let mutable namespace new newtype open operation repeat return self set until use using while within'
	    };
	    // keywords
	    function keywordsToPattern(words) {
	      return '\\b(?:' + words.trim().replace(/ /g, '|') + ')\\b'
	    }
	    var keywords = RegExp(
	      keywordsToPattern(keywordKinds.type + ' ' + keywordKinds.other)
	    );

	    // types
	    var identifier = /\b[A-Za-z_]\w*\b/.source;
	    var qualifiedName = replace(/<<0>>(?:\s*\.\s*<<0>>)*/.source, [identifier]);
	    var typeInside = {
	      keyword: keywords,
	      punctuation: /[<>()?,.:[\]]/
	    };

	    // strings
	    var regularString = /"(?:\\.|[^\\"])*"/.source;
	    Prism.languages.qsharp = Prism.languages.extend('clike', {
	      comment: /\/\/.*/,
	      string: [
	        {
	          pattern: re(/(^|[^$\\])<<0>>/.source, [regularString]),
	          lookbehind: true,
	          greedy: true
	        }
	      ],
	      'class-name': [
	        {
	          // open Microsoft.Quantum.Canon;
	          // open Microsoft.Quantum.Canon as CN;
	          pattern: re(/(\b(?:as|open)\s+)<<0>>(?=\s*(?:;|as\b))/.source, [
	            qualifiedName
	          ]),
	          lookbehind: true,
	          inside: typeInside
	        },
	        {
	          // namespace Quantum.App1;
	          pattern: re(/(\bnamespace\s+)<<0>>(?=\s*\{)/.source, [qualifiedName]),
	          lookbehind: true,
	          inside: typeInside
	        }
	      ],
	      keyword: keywords,
	      number:
	        /(?:\b0(?:x[\da-f]+|b[01]+|o[0-7]+)|(?:\B\.\d+|\b\d+(?:\.\d*)?)(?:e[-+]?\d+)?)l?\b/i,
	      operator:
	        /\band=|\bor=|\band\b|\bnot\b|\bor\b|<[-=]|[-=]>|>>>=?|<<<=?|\^\^\^=?|\|\|\|=?|&&&=?|w\/=?|~~~|[*\/+\-^=!%]=?/,
	      punctuation: /::|[{}[\];(),.:]/
	    });
	    Prism.languages.insertBefore('qsharp', 'number', {
	      range: {
	        pattern: /\.\./,
	        alias: 'operator'
	      }
	    });

	    // single line
	    var interpolationExpr = nested(
	      replace(/\{(?:[^"{}]|<<0>>|<<self>>)*\}/.source, [regularString]),
	      2
	    );
	    Prism.languages.insertBefore('qsharp', 'string', {
	      'interpolation-string': {
	        pattern: re(/\$"(?:\\.|<<0>>|[^\\"{])*"/.source, [interpolationExpr]),
	        greedy: true,
	        inside: {
	          interpolation: {
	            pattern: re(/((?:^|[^\\])(?:\\\\)*)<<0>>/.source, [
	              interpolationExpr
	            ]),
	            lookbehind: true,
	            inside: {
	              punctuation: /^\{|\}$/,
	              expression: {
	                pattern: /[\s\S]+/,
	                alias: 'language-qsharp',
	                inside: Prism.languages.qsharp
	              }
	            }
	          },
	          string: /[\s\S]+/
	        }
	      }
	    });
	  })(Prism);
	  Prism.languages.qs = Prism.languages.qsharp;
	}

	// @ts-nocheck
	q.displayName = 'q';
	q.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function q(Prism) {
	  Prism.languages.q = {
	    string: /"(?:\\.|[^"\\\r\n])*"/,
	    comment: [
	      // From http://code.kx.com/wiki/Reference/Slash:
	      // When / is following a space (or a right parenthesis, bracket, or brace), it is ignored with the rest of the line.
	      {
	        pattern: /([\t )\]}])\/.*/,
	        lookbehind: true,
	        greedy: true
	      },
	      // From http://code.kx.com/wiki/Reference/Slash:
	      // A line which has / as its first character and contains at least one other non-whitespace character is a whole-line comment and is ignored entirely.
	      // A / on a line by itself begins a multiline comment which is terminated by the next \ on a line by itself.
	      // If a / is not matched by a \, the multiline comment is unterminated and continues to end of file.
	      // The / and \ must be the first char on the line, but may be followed by any amount of whitespace.
	      {
	        pattern:
	          /(^|\r?\n|\r)\/[\t ]*(?:(?:\r?\n|\r)(?:.*(?:\r?\n|\r(?!\n)))*?(?:\\(?=[\t ]*(?:\r?\n|\r))|$)|\S.*)/,
	        lookbehind: true,
	        greedy: true
	      },
	      // From http://code.kx.com/wiki/Reference/Slash:
	      // A \ on a line by itself with no preceding matching / will comment to end of file.
	      {
	        pattern: /^\\[\t ]*(?:\r?\n|\r)[\s\S]+/m,
	        greedy: true
	      },
	      {
	        pattern: /^#!.+/m,
	        greedy: true
	      }
	    ],
	    symbol: /`(?::\S+|[\w.]*)/,
	    datetime: {
	      pattern:
	        /0N[mdzuvt]|0W[dtz]|\d{4}\.\d\d(?:m|\.\d\d(?:T(?:\d\d(?::\d\d(?::\d\d(?:[.:]\d\d\d)?)?)?)?)?[dz]?)|\d\d:\d\d(?::\d\d(?:[.:]\d\d\d)?)?[uvt]?/,
	      alias: 'number'
	    },
	    // The negative look-ahead prevents bad highlighting
	    // of verbs 0: and 1:
	    number:
	      /\b(?![01]:)(?:0N[hje]?|0W[hj]?|0[wn]|0x[\da-fA-F]+|\d+(?:\.\d*)?(?:e[+-]?\d+)?[hjfeb]?)/,
	    keyword:
	      /\\\w+\b|\b(?:abs|acos|aj0?|all|and|any|asc|asin|asof|atan|attr|avgs?|binr?|by|ceiling|cols|cor|cos|count|cov|cross|csv|cut|delete|deltas|desc|dev|differ|distinct|div|do|dsave|ej|enlist|eval|except|exec|exit|exp|fby|fills|first|fkeys|flip|floor|from|get|getenv|group|gtime|hclose|hcount|hdel|hopen|hsym|iasc|identity|idesc|if|ij|in|insert|inter|inv|keys?|last|like|list|ljf?|load|log|lower|lsq|ltime|ltrim|mavg|maxs?|mcount|md5|mdev|med|meta|mins?|mmax|mmin|mmu|mod|msum|neg|next|not|null|or|over|parse|peach|pj|plist|prds?|prev|prior|rand|rank|ratios|raze|read0|read1|reciprocal|reval|reverse|rload|rotate|rsave|rtrim|save|scan|scov|sdev|select|set|setenv|show|signum|sin|sqrt|ssr?|string|sublist|sums?|sv|svar|system|tables|tan|til|trim|txf|type|uj|ungroup|union|update|upper|upsert|value|var|views?|vs|wavg|where|while|within|wj1?|wsum|ww|xasc|xbar|xcols?|xdesc|xexp|xgroup|xkey|xlog|xprev|xrank)\b/,
	    adverb: {
	      pattern: /['\/\\]:?|\beach\b/,
	      alias: 'function'
	    },
	    verb: {
	      pattern: /(?:\B\.\B|\b[01]:|<[=>]?|>=?|[:+\-*%,!?~=|$&#@^]):?|\b_\b:?/,
	      alias: 'operator'
	    },
	    punctuation: /[(){}\[\];.]/
	  };
	}

	// @ts-nocheck
	qml.displayName = 'qml';
	qml.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function qml(Prism) {
	  Prism.register(javascript)
	  ;(function (Prism) {
	    var jsString = /"(?:\\.|[^\\"\r\n])*"|'(?:\\.|[^\\'\r\n])*'/.source;
	    var jsComment = /\/\/.*(?!.)|\/\*(?:[^*]|\*(?!\/))*\*\//.source;
	    var jsExpr =
	      /(?:[^\\()[\]{}"'/]|<string>|\/(?![*/])|<comment>|\(<expr>*\)|\[<expr>*\]|\{<expr>*\}|\\[\s\S])/.source
	        .replace(/<string>/g, function () {
	          return jsString
	        })
	        .replace(/<comment>/g, function () {
	          return jsComment
	        });

	    // the pattern will blow up, so only a few iterations
	    for (var i = 0; i < 2; i++) {
	      jsExpr = jsExpr.replace(/<expr>/g, function () {
	        return jsExpr
	      });
	    }
	    jsExpr = jsExpr.replace(/<expr>/g, '[^\\s\\S]');
	    Prism.languages.qml = {
	      comment: {
	        pattern: /\/\/.*|\/\*[\s\S]*?\*\//,
	        greedy: true
	      },
	      'javascript-function': {
	        pattern: RegExp(
	          /((?:^|;)[ \t]*)function\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*\(<js>*\)\s*\{<js>*\}/.source.replace(
	            /<js>/g,
	            function () {
	              return jsExpr
	            }
	          ),
	          'm'
	        ),
	        lookbehind: true,
	        greedy: true,
	        alias: 'language-javascript',
	        inside: Prism.languages.javascript
	      },
	      'class-name': {
	        pattern: /((?:^|[:;])[ \t]*)(?!\d)\w+(?=[ \t]*\{|[ \t]+on\b)/m,
	        lookbehind: true
	      },
	      property: [
	        {
	          pattern: /((?:^|[;{])[ \t]*)(?!\d)\w+(?:\.\w+)*(?=[ \t]*:)/m,
	          lookbehind: true
	        },
	        {
	          pattern:
	            /((?:^|[;{])[ \t]*)property[ \t]+(?!\d)\w+(?:\.\w+)*[ \t]+(?!\d)\w+(?:\.\w+)*(?=[ \t]*:)/m,
	          lookbehind: true,
	          inside: {
	            keyword: /^property/,
	            property: /\w+(?:\.\w+)*/
	          }
	        }
	      ],
	      'javascript-expression': {
	        pattern: RegExp(
	          /(:[ \t]*)(?![\s;}[])(?:(?!$|[;}])<js>)+/.source.replace(
	            /<js>/g,
	            function () {
	              return jsExpr
	            }
	          ),
	          'm'
	        ),
	        lookbehind: true,
	        greedy: true,
	        alias: 'language-javascript',
	        inside: Prism.languages.javascript
	      },
	      string: {
	        pattern: /"(?:\\.|[^\\"\r\n])*"/,
	        greedy: true
	      },
	      keyword: /\b(?:as|import|on)\b/,
	      punctuation: /[{}[\]:;,]/
	    };
	  })(Prism);
	}

	// @ts-nocheck
	qore.displayName = 'qore';
	qore.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function qore(Prism) {
	  Prism.register(clike);
	  Prism.languages.qore = Prism.languages.extend('clike', {
	    comment: {
	      pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:\/\/|#).*)/,
	      lookbehind: true
	    },
	    // Overridden to allow unescaped multi-line strings
	    string: {
	      pattern: /("|')(?:\\[\s\S]|(?!\1)[^\\])*\1/,
	      greedy: true
	    },
	    keyword:
	      /\b(?:abstract|any|assert|binary|bool|boolean|break|byte|case|catch|char|class|code|const|continue|data|default|do|double|else|enum|extends|final|finally|float|for|goto|hash|if|implements|import|inherits|instanceof|int|interface|long|my|native|new|nothing|null|object|our|own|private|reference|rethrow|return|short|soft(?:bool|date|float|int|list|number|string)|static|strictfp|string|sub|super|switch|synchronized|this|throw|throws|transient|try|void|volatile|while)\b/,
	    boolean: /\b(?:false|true)\b/i,
	    function: /\$?\b(?!\d)\w+(?=\()/,
	    number:
	      /\b(?:0b[01]+|0x(?:[\da-f]*\.)?[\da-fp\-]+|(?:\d+(?:\.\d+)?|\.\d+)(?:e\d+)?[df]|(?:\d+(?:\.\d+)?|\.\d+))\b/i,
	    operator: {
	      pattern:
	        /(^|[^.])(?:\+[+=]?|-[-=]?|[!=](?:==?|~)?|>>?=?|<(?:=>?|<=?)?|&[&=]?|\|[|=]?|[*\/%^]=?|[~?])/,
	      lookbehind: true
	    },
	    variable: /\$(?!\d)\w+\b/
	  });
	}

	// @ts-nocheck
	racket.displayName = 'racket';
	racket.aliases = ['rkt'];

	/** @type {import('../core.js').Syntax} */
	function racket(Prism) {
	  Prism.register(scheme);
	  Prism.languages.racket = Prism.languages.extend('scheme', {
	    'lambda-parameter': {
	      // the racket lambda syntax is a lot more complex, so we won't even attempt to capture it.
	      // this will just prevent false positives of the `function` pattern
	      pattern: /([(\[]lambda\s+[(\[])[^()\[\]'\s]+/,
	      lookbehind: true
	    }
	  });
	  Prism.languages.insertBefore('racket', 'string', {
	    lang: {
	      pattern: /^#lang.+/m,
	      greedy: true,
	      alias: 'keyword'
	    }
	  });
	  Prism.languages.rkt = Prism.languages.racket;
	}

	// @ts-nocheck
	cshtml.displayName = 'cshtml';
	cshtml.aliases = ['razor'];

	/** @type {import('../core.js').Syntax} */
	function cshtml(Prism) {
	  Prism.register(csharp);
	  Prism.register(markup)
	  // Docs:
	  // https://docs.microsoft.com/en-us/aspnet/core/razor-pages/?view=aspnetcore-5.0&tabs=visual-studio
	  // https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-5.0

	  ;(function (Prism) {
	    var commentLike = /\/(?![/*])|\/\/.*[\r\n]|\/\*[^*]*(?:\*(?!\/)[^*]*)*\*\//
	      .source;
	    var stringLike =
	      /@(?!")|"(?:[^\r\n\\"]|\\.)*"|@"(?:[^\\"]|""|\\[\s\S])*"(?!")/.source +
	      '|' +
	      /'(?:(?:[^\r\n'\\]|\\.|\\[Uux][\da-fA-F]{1,8})'|(?=[^\\](?!')))/.source;

	    /**
	     * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.
	     *
	     * @param {string} pattern
	     * @param {number} depthLog2
	     * @returns {string}
	     */
	    function nested(pattern, depthLog2) {
	      for (var i = 0; i < depthLog2; i++) {
	        pattern = pattern.replace(/<self>/g, function () {
	          return '(?:' + pattern + ')'
	        });
	      }
	      return pattern
	        .replace(/<self>/g, '[^\\s\\S]')
	        .replace(/<str>/g, '(?:' + stringLike + ')')
	        .replace(/<comment>/g, '(?:' + commentLike + ')')
	    }
	    var round = nested(/\((?:[^()'"@/]|<str>|<comment>|<self>)*\)/.source, 2);
	    var square = nested(/\[(?:[^\[\]'"@/]|<str>|<comment>|<self>)*\]/.source, 1);
	    var curly = nested(/\{(?:[^{}'"@/]|<str>|<comment>|<self>)*\}/.source, 2);
	    var angle = nested(/<(?:[^<>'"@/]|<comment>|<self>)*>/.source, 1);
	    var inlineCs =
	      /@/.source +
	      /(?:await\b\s*)?/.source +
	      '(?:' +
	      /(?!await\b)\w+\b/.source +
	      '|' +
	      round +
	      ')' +
	      '(?:' +
	      /[?!]?\.\w+\b/.source +
	      '|' +
	      '(?:' +
	      angle +
	      ')?' +
	      round +
	      '|' +
	      square +
	      ')*' +
	      /(?![?!\.(\[]|<(?!\/))/.source;

	    // Note about the above bracket patterns:
	    // They all ignore HTML expressions that might be in the C# code. This is a problem because HTML (like strings and
	    // comments) is parsed differently. This is a huge problem because HTML might contain brackets and quotes which
	    // messes up the bracket and string counting implemented by the above patterns.
	    //
	    // This problem is not fixable because 1) HTML expression are highly context sensitive and very difficult to detect
	    // and 2) they require one capturing group at every nested level. See the `tagRegion` pattern to admire the
	    // complexity of an HTML expression.
	    //
	    // To somewhat alleviate the problem a bit, the patterns for characters (e.g. 'a') is very permissive, it also
	    // allows invalid characters to support HTML expressions like this: <p>That's it!</p>.

	    var tagAttrInlineCs = /@(?![\w()])/.source + '|' + inlineCs;
	    var tagAttrValue =
	      '(?:' +
	      /"[^"@]*"|'[^'@]*'|[^\s'"@>=]+(?=[\s>])/.source +
	      '|' +
	      '["\'][^"\'@]*(?:(?:' +
	      tagAttrInlineCs +
	      ')[^"\'@]*)+["\']' +
	      ')';
	    var tagAttrs =
	      /(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*<tagAttrValue>|(?=[\s/>])))+)?/.source.replace(
	        /<tagAttrValue>/,
	        tagAttrValue
	      );
	    var tagContent = /(?!\d)[^\s>\/=$<%]+/.source + tagAttrs + /\s*\/?>/.source;
	    var tagRegion =
	      /\B@?/.source +
	      '(?:' +
	      /<([a-zA-Z][\w:]*)/.source +
	      tagAttrs +
	      /\s*>/.source +
	      '(?:' +
	      (/[^<]/.source +
	        '|' +
	        // all tags that are not the start tag
	        // eslint-disable-next-line regexp/strict
	        /<\/?(?!\1\b)/.source +
	        tagContent +
	        '|' +
	        // nested start tag
	        nested(
	          // eslint-disable-next-line regexp/strict
	          /<\1/.source +
	            tagAttrs +
	            /\s*>/.source +
	            '(?:' +
	            (/[^<]/.source +
	              '|' +
	              // all tags that are not the start tag
	              // eslint-disable-next-line regexp/strict
	              /<\/?(?!\1\b)/.source +
	              tagContent +
	              '|' +
	              '<self>') +
	            ')*' +
	            // eslint-disable-next-line regexp/strict
	            /<\/\1\s*>/.source,
	          2
	        )) +
	      ')*' +
	      // eslint-disable-next-line regexp/strict
	      /<\/\1\s*>/.source +
	      '|' +
	      /</.source +
	      tagContent +
	      ')';

	    // Now for the actual language definition(s):
	    //
	    // Razor as a language has 2 parts:
	    //  1) CSHTML: A markup-like language that has been extended with inline C# code expressions and blocks.
	    //  2) C#+HTML: A variant of C# that can contain CSHTML tags as expressions.
	    //
	    // In the below code, both CSHTML and C#+HTML will be create as separate language definitions that reference each
	    // other. However, only CSHTML will be exported via `Prism.languages`.

	    Prism.languages.cshtml = Prism.languages.extend('markup', {});
	    var csharpWithHtml = Prism.languages.insertBefore(
	      'csharp',
	      'string',
	      {
	        html: {
	          pattern: RegExp(tagRegion),
	          greedy: true,
	          inside: Prism.languages.cshtml
	        }
	      },
	      {
	        csharp: Prism.languages.extend('csharp', {})
	      }
	    );
	    var cs = {
	      pattern: /\S[\s\S]*/,
	      alias: 'language-csharp',
	      inside: csharpWithHtml
	    };
	    var inlineValue = {
	      pattern: RegExp(/(^|[^@])/.source + inlineCs),
	      lookbehind: true,
	      greedy: true,
	      alias: 'variable',
	      inside: {
	        keyword: /^@/,
	        csharp: cs
	      }
	    };
	    Prism.languages.cshtml.tag.pattern = RegExp(/<\/?/.source + tagContent);
	    Prism.languages.cshtml.tag.inside['attr-value'].pattern = RegExp(
	      /=\s*/.source + tagAttrValue
	    );
	    Prism.languages.insertBefore(
	      'inside',
	      'punctuation',
	      {
	        value: inlineValue
	      },
	      Prism.languages.cshtml.tag.inside['attr-value']
	    );
	    Prism.languages.insertBefore('cshtml', 'prolog', {
	      'razor-comment': {
	        pattern: /@\*[\s\S]*?\*@/,
	        greedy: true,
	        alias: 'comment'
	      },
	      block: {
	        pattern: RegExp(
	          /(^|[^@])@/.source +
	            '(?:' +
	            [
	              // @{ ... }
	              curly,
	              // @code{ ... }
	              /(?:code|functions)\s*/.source + curly,
	              // @for (...) { ... }
	              /(?:for|foreach|lock|switch|using|while)\s*/.source +
	                round +
	                /\s*/.source +
	                curly,
	              // @do { ... } while (...);
	              /do\s*/.source +
	                curly +
	                /\s*while\s*/.source +
	                round +
	                /(?:\s*;)?/.source,
	              // @try { ... } catch (...) { ... } finally { ... }
	              /try\s*/.source +
	                curly +
	                /\s*catch\s*/.source +
	                round +
	                /\s*/.source +
	                curly +
	                /\s*finally\s*/.source +
	                curly,
	              // @if (...) {...} else if (...) {...} else {...}
	              /if\s*/.source +
	                round +
	                /\s*/.source +
	                curly +
	                '(?:' +
	                /\s*else/.source +
	                '(?:' +
	                /\s+if\s*/.source +
	                round +
	                ')?' +
	                /\s*/.source +
	                curly +
	                ')*',
	              // @helper Ident(params) { ... }
	              /helper\s+\w+\s*/.source + round + /\s*/.source + curly
	            ].join('|') +
	            ')'
	        ),
	        lookbehind: true,
	        greedy: true,
	        inside: {
	          keyword: /^@\w*/,
	          csharp: cs
	        }
	      },
	      directive: {
	        pattern:
	          /^([ \t]*)@(?:addTagHelper|attribute|implements|inherits|inject|layout|model|namespace|page|preservewhitespace|removeTagHelper|section|tagHelperPrefix|using)(?=\s).*/m,
	        lookbehind: true,
	        greedy: true,
	        inside: {
	          keyword: /^@\w+/,
	          csharp: cs
	        }
	      },
	      value: inlineValue,
	      'delegate-operator': {
	        pattern: /(^|[^@])@(?=<)/,
	        lookbehind: true,
	        alias: 'operator'
	      }
	    });
	    Prism.languages.razor = Prism.languages.cshtml;
	  })(Prism);
	}

	// @ts-nocheck
	jsx.displayName = 'jsx';
	jsx.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function jsx(Prism) {
	  Prism.register(javascript);
	  Prism.register(markup)
	  ;(function (Prism) {
	    var javascript = Prism.util.clone(Prism.languages.javascript);
	    var space = /(?:\s|\/\/.*(?!.)|\/\*(?:[^*]|\*(?!\/))\*\/)/.source;
	    var braces = /(?:\{(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])*\})/.source;
	    var spread = /(?:\{<S>*\.{3}(?:[^{}]|<BRACES>)*\})/.source;

	    /**
	     * @param {string} source
	     * @param {string} [flags]
	     */
	    function re(source, flags) {
	      source = source
	        .replace(/<S>/g, function () {
	          return space
	        })
	        .replace(/<BRACES>/g, function () {
	          return braces
	        })
	        .replace(/<SPREAD>/g, function () {
	          return spread
	        });
	      return RegExp(source, flags)
	    }
	    spread = re(spread).source;
	    Prism.languages.jsx = Prism.languages.extend('markup', javascript);
	    Prism.languages.jsx.tag.pattern = re(
	      /<\/?(?:[\w.:-]+(?:<S>+(?:[\w.:$-]+(?:=(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s{'"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\/?)?>/
	        .source
	    );
	    Prism.languages.jsx.tag.inside['tag'].pattern = /^<\/?[^\s>\/]*/;
	    Prism.languages.jsx.tag.inside['attr-value'].pattern =
	      /=(?!\{)(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s'">]+)/;
	    Prism.languages.jsx.tag.inside['tag'].inside['class-name'] =
	      /^[A-Z]\w*(?:\.[A-Z]\w*)*$/;
	    Prism.languages.jsx.tag.inside['comment'] = javascript['comment'];
	    Prism.languages.insertBefore(
	      'inside',
	      'attr-name',
	      {
	        spread: {
	          pattern: re(/<SPREAD>/.source),
	          inside: Prism.languages.jsx
	        }
	      },
	      Prism.languages.jsx.tag
	    );
	    Prism.languages.insertBefore(
	      'inside',
	      'special-attr',
	      {
	        script: {
	          // Allow for two levels of nesting
	          pattern: re(/=<BRACES>/.source),
	          alias: 'language-javascript',
	          inside: {
	            'script-punctuation': {
	              pattern: /^=(?=\{)/,
	              alias: 'punctuation'
	            },
	            rest: Prism.languages.jsx
	          }
	        }
	      },
	      Prism.languages.jsx.tag
	    );

	    // The following will handle plain text inside tags
	    var stringifyToken = function (token) {
	      if (!token) {
	        return ''
	      }
	      if (typeof token === 'string') {
	        return token
	      }
	      if (typeof token.content === 'string') {
	        return token.content
	      }
	      return token.content.map(stringifyToken).join('')
	    };
	    var walkTokens = function (tokens) {
	      var openedTags = [];
	      for (var i = 0; i < tokens.length; i++) {
	        var token = tokens[i];
	        var notTagNorBrace = false;
	        if (typeof token !== 'string') {
	          if (
	            token.type === 'tag' &&
	            token.content[0] &&
	            token.content[0].type === 'tag'
	          ) {
	            // We found a tag, now find its kind

	            if (token.content[0].content[0].content === '</') {
	              // Closing tag
	              if (
	                openedTags.length > 0 &&
	                openedTags[openedTags.length - 1].tagName ===
	                  stringifyToken(token.content[0].content[1])
	              ) {
	                // Pop matching opening tag
	                openedTags.pop();
	              }
	            } else {
	              if (token.content[token.content.length - 1].content === '/>') ; else {
	                // Opening tag
	                openedTags.push({
	                  tagName: stringifyToken(token.content[0].content[1]),
	                  openedBraces: 0
	                });
	              }
	            }
	          } else if (
	            openedTags.length > 0 &&
	            token.type === 'punctuation' &&
	            token.content === '{'
	          ) {
	            // Here we might have entered a JSX context inside a tag
	            openedTags[openedTags.length - 1].openedBraces++;
	          } else if (
	            openedTags.length > 0 &&
	            openedTags[openedTags.length - 1].openedBraces > 0 &&
	            token.type === 'punctuation' &&
	            token.content === '}'
	          ) {
	            // Here we might have left a JSX context inside a tag
	            openedTags[openedTags.length - 1].openedBraces--;
	          } else {
	            notTagNorBrace = true;
	          }
	        }
	        if (notTagNorBrace || typeof token === 'string') {
	          if (
	            openedTags.length > 0 &&
	            openedTags[openedTags.length - 1].openedBraces === 0
	          ) {
	            // Here we are inside a tag, and not inside a JSX context.
	            // That's plain text: drop any tokens matched.
	            var plainText = stringifyToken(token);

	            // And merge text with adjacent text
	            if (
	              i < tokens.length - 1 &&
	              (typeof tokens[i + 1] === 'string' ||
	                tokens[i + 1].type === 'plain-text')
	            ) {
	              plainText += stringifyToken(tokens[i + 1]);
	              tokens.splice(i + 1, 1);
	            }
	            if (
	              i > 0 &&
	              (typeof tokens[i - 1] === 'string' ||
	                tokens[i - 1].type === 'plain-text')
	            ) {
	              plainText = stringifyToken(tokens[i - 1]) + plainText;
	              tokens.splice(i - 1, 1);
	              i--;
	            }
	            tokens[i] = new Prism.Token(
	              'plain-text',
	              plainText,
	              null,
	              plainText
	            );
	          }
	        }
	        if (token.content && typeof token.content !== 'string') {
	          walkTokens(token.content);
	        }
	      }
	    };
	    Prism.hooks.add('after-tokenize', function (env) {
	      if (env.language !== 'jsx' && env.language !== 'tsx') {
	        return
	      }
	      walkTokens(env.tokens);
	    });
	  })(Prism);
	}

	// @ts-nocheck
	tsx.displayName = 'tsx';
	tsx.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function tsx(Prism) {
	  Prism.register(jsx);
	  Prism.register(typescript)
	  ;(function (Prism) {
	    var typescript = Prism.util.clone(Prism.languages.typescript);
	    Prism.languages.tsx = Prism.languages.extend('jsx', typescript);

	    // doesn't work with TS because TS is too complex
	    delete Prism.languages.tsx['parameter'];
	    delete Prism.languages.tsx['literal-property'];

	    // This will prevent collisions between TSX tags and TS generic types.
	    // Idea by https://github.com/karlhorky
	    // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928
	    var tag = Prism.languages.tsx.tag;
	    tag.pattern = RegExp(
	      /(^|[^\w$]|(?=<\/))/.source + '(?:' + tag.pattern.source + ')',
	      tag.pattern.flags
	    );
	    tag.lookbehind = true;
	  })(Prism);
	}

	// @ts-nocheck
	reason.displayName = 'reason';
	reason.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function reason(Prism) {
	  Prism.register(clike);
	  Prism.languages.reason = Prism.languages.extend('clike', {
	    string: {
	      pattern: /"(?:\\(?:\r\n|[\s\S])|[^\\\r\n"])*"/,
	      greedy: true
	    },
	    // 'class-name' must be matched *after* 'constructor' defined below
	    'class-name': /\b[A-Z]\w*/,
	    keyword:
	      /\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\b/,
	    operator:
	      /\.{3}|:[:=]|\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\-*\/]\.?|\b(?:asr|land|lor|lsl|lsr|lxor|mod)\b/
	  });
	  Prism.languages.insertBefore('reason', 'class-name', {
	    char: {
	      pattern: /'(?:\\x[\da-f]{2}|\\o[0-3][0-7][0-7]|\\\d{3}|\\.|[^'\\\r\n])'/,
	      greedy: true
	    },
	    // Negative look-ahead prevents from matching things like String.capitalize
	    constructor: /\b[A-Z]\w*\b(?!\s*\.)/,
	    label: {
	      pattern: /\b[a-z]\w*(?=::)/,
	      alias: 'symbol'
	    }
	  });

	  // We can't match functions property, so let's not even try.
	  delete Prism.languages.reason.function;
	}

	// @ts-nocheck
	rego.displayName = 'rego';
	rego.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function rego(Prism) {
	  // https://www.openpolicyagent.org/docs/latest/policy-reference/

	  Prism.languages.rego = {
	    comment: /#.*/,
	    property: {
	      pattern:
	        /(^|[^\\.])(?:"(?:\\.|[^\\"\r\n])*"|`[^`]*`|\b[a-z_]\w*\b)(?=\s*:(?!=))/i,
	      lookbehind: true,
	      greedy: true
	    },
	    string: {
	      pattern: /(^|[^\\])"(?:\\.|[^\\"\r\n])*"|`[^`]*`/,
	      lookbehind: true,
	      greedy: true
	    },
	    keyword:
	      /\b(?:as|default|else|import|not|null|package|set(?=\s*\()|some|with)\b/,
	    boolean: /\b(?:false|true)\b/,
	    function: {
	      pattern: /\b[a-z_]\w*\b(?:\s*\.\s*\b[a-z_]\w*\b)*(?=\s*\()/i,
	      inside: {
	        namespace: /\b\w+\b(?=\s*\.)/,
	        punctuation: /\./
	      }
	    },
	    number: /-?\b\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,
	    operator: /[-+*/%|&]|[<>:=]=?|!=|\b_\b/,
	    punctuation: /[,;.\[\]{}()]/
	  };
	}

	// @ts-nocheck
	renpy.displayName = 'renpy';
	renpy.aliases = ['rpy'];

	/** @type {import('../core.js').Syntax} */
	function renpy(Prism) {
	  Prism.languages.renpy = {
	    comment: {
	      pattern: /(^|[^\\])#.+/,
	      lookbehind: true
	    },
	    string: {
	      pattern:
	        /("""|''')[\s\S]+?\1|("|')(?:\\.|(?!\2)[^\\])*\2|(?:^#?(?:(?:[0-9a-fA-F]){3}|[0-9a-fA-F]{6})$)/m,
	      greedy: true
	    },
	    function: /\b[a-z_]\w*(?=\()/i,
	    property:
	      /\b(?:Update|UpdateVersion|action|activate_sound|adv_nvl_transition|after_load_transition|align|alpha|alt|anchor|antialias|area|auto|background|bar_invert|bar_resizing|bar_vertical|black_color|bold|bottom_bar|bottom_gutter|bottom_margin|bottom_padding|box_reverse|box_wrap|can_update|caret|child|color|crop|default_afm_enable|default_afm_time|default_fullscreen|default_text_cps|developer|directory_name|drag_handle|drag_joined|drag_name|drag_raise|draggable|dragged|drop_shadow|drop_shadow_color|droppable|dropped|easein|easeout|edgescroll|end_game_transition|end_splash_transition|enter_replay_transition|enter_sound|enter_transition|enter_yesno_transition|executable_name|exit_replay_transition|exit_sound|exit_transition|exit_yesno_transition|fadein|fadeout|first_indent|first_spacing|fit_first|focus|focus_mask|font|foreground|game_main_transition|get_installed_packages|google_play_key|google_play_salt|ground|has_music|has_sound|has_voice|height|help|hinting|hover|hover_background|hover_color|hover_sound|hovered|hyperlink_functions|idle|idle_color|image_style|include_update|insensitive|insensitive_background|insensitive_color|inside|intra_transition|italic|justify|kerning|keyboard_focus|language|layer_clipping|layers|layout|left_bar|left_gutter|left_margin|left_padding|length|line_leading|line_overlap_split|line_spacing|linear|main_game_transition|main_menu_music|maximum|min_width|minimum|minwidth|modal|mouse|mousewheel|name|narrator_menu|newline_indent|nvl_adv_transition|offset|order_reverse|outlines|overlay_functions|pos|position|prefix|radius|range|rest_indent|right_bar|right_gutter|right_margin|right_padding|rotate|rotate_pad|ruby_style|sample_sound|save_directory|say_attribute_transition|screen_height|screen_width|scrollbars|selected_hover|selected_hover_color|selected_idle|selected_idle_color|selected_insensitive|show_side_image|show_two_window|side_spacing|side_xpos|side_ypos|size|size_group|slow_cps|slow_cps_multiplier|spacing|strikethrough|subpixel|text_align|text_style|text_xpos|text_y_fudge|text_ypos|thumb|thumb_offset|thumb_shadow|thumbnail_height|thumbnail_width|time|top_bar|top_gutter|top_margin|top_padding|translations|underline|unscrollable|update|value|version|version_name|version_tuple|vertical|width|window_hide_transition|window_icon|window_left_padding|window_show_transition|window_title|windows_icon|xadjustment|xalign|xanchor|xanchoraround|xaround|xcenter|xfill|xinitial|xmargin|xmaximum|xminimum|xoffset|xofsset|xpadding|xpos|xsize|xzoom|yadjustment|yalign|yanchor|yanchoraround|yaround|ycenter|yfill|yinitial|ymargin|ymaximum|yminimum|yoffset|ypadding|ypos|ysize|ysizexysize|yzoom|zoom|zorder)\b/,
	    tag: /\b(?:bar|block|button|buttoscreenn|drag|draggroup|fixed|frame|grid|[hv]box|hotbar|hotspot|image|imagebutton|imagemap|input|key|label|menu|mm_menu_frame|mousearea|nvl|parallel|screen|self|side|tag|text|textbutton|timer|vbar|viewport|window)\b|\$/,
	    keyword:
	      /\b(?:None|add|adjustment|alignaround|allow|angle|animation|around|as|assert|behind|box_layout|break|build|cache|call|center|changed|child_size|choice|circles|class|clear|clicked|clipping|clockwise|config|contains|continue|corner1|corner2|counterclockwise|def|default|define|del|delay|disabled|disabled_text|dissolve|elif|else|event|except|exclude|exec|expression|fade|finally|for|from|function|global|gm_root|has|hide|id|if|import|in|init|is|jump|knot|lambda|left|less_rounded|mm_root|movie|music|null|on|onlayer|pass|pause|persistent|play|print|python|queue|raise|random|renpy|repeat|return|right|rounded_window|scene|scope|set|show|slow|slow_abortable|slow_done|sound|stop|store|style|style_group|substitute|suffix|theme|transform|transform_anchor|transpose|try|ui|unhovered|updater|use|voice|while|widget|widget_hover|widget_selected|widget_text|yield)\b/,
	    boolean: /\b(?:[Ff]alse|[Tt]rue)\b/,
	    number:
	      /(?:\b(?:0[bo])?(?:(?:\d|0x[\da-f])[\da-f]*(?:\.\d*)?)|\B\.\d+)(?:e[+-]?\d+)?j?/i,
	    operator:
	      /[-+%=]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]|\b(?:and|at|not|or|with)\b/,
	    punctuation: /[{}[\];(),.:]/
	  };
	  Prism.languages.rpy = Prism.languages.renpy;
	}

	// @ts-nocheck
	rescript.displayName = 'rescript';
	rescript.aliases = ['res'];

	/** @type {import('../core.js').Syntax} */
	function rescript(Prism) {
	  Prism.languages.rescript = {
	    comment: {
	      pattern: /\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,
	      greedy: true
	    },
	    char: {
	      pattern: /'(?:[^\r\n\\]|\\(?:.|\w+))'/,
	      greedy: true
	    },
	    string: {
	      pattern: /"(?:\\(?:\r\n|[\s\S])|[^\\\r\n"])*"/,
	      greedy: true
	    },
	    'class-name': /\b[A-Z]\w*|@[a-z.]*|#[A-Za-z]\w*|#\d/,
	    function: {
	      pattern: /[a-zA-Z]\w*(?=\()|(\.)[a-z]\w*/,
	      lookbehind: true
	    },
	    number:
	      /(?:\b0x(?:[\da-f]+(?:\.[\da-f]*)?|\.[\da-f]+)(?:p[+-]?\d+)?|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)[ful]{0,4}/i,
	    boolean: /\b(?:false|true)\b/,
	    'attr-value': /[A-Za-z]\w*(?==)/,
	    constant: {
	      pattern: /(\btype\s+)[a-z]\w*/,
	      lookbehind: true
	    },
	    tag: {
	      pattern: /(<)[a-z]\w*|(?:<\/)[a-z]\w*/,
	      lookbehind: true,
	      inside: {
	        operator: /<|>|\//
	      }
	    },
	    keyword:
	      /\b(?:and|as|assert|begin|bool|class|constraint|do|done|downto|else|end|exception|external|float|for|fun|function|if|in|include|inherit|initializer|int|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|string|switch|then|to|try|type|when|while|with)\b/,
	    operator:
	      /\.{3}|:[:=]?|\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\-*\/]\.?|\b(?:asr|land|lor|lsl|lsr|lxor|mod)\b/,
	    punctuation: /[(){}[\],;.]/
	  };
	  Prism.languages.insertBefore('rescript', 'string', {
	    'template-string': {
	      pattern:
	        /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,
	      greedy: true,
	      inside: {
	        'template-punctuation': {
	          pattern: /^`|`$/,
	          alias: 'string'
	        },
	        interpolation: {
	          pattern:
	            /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
	          lookbehind: true,
	          inside: {
	            'interpolation-punctuation': {
	              pattern: /^\$\{|\}$/,
	              alias: 'tag'
	            },
	            rest: Prism.languages.rescript
	          }
	        },
	        string: /[\s\S]+/
	      }
	    }
	  });
	  Prism.languages.res = Prism.languages.rescript;
	}

	// @ts-nocheck
	rest.displayName = 'rest';
	rest.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function rest(Prism) {
	  Prism.languages.rest = {
	    table: [
	      {
	        pattern:
	          /(^[\t ]*)(?:\+[=-]+)+\+(?:\r?\n|\r)(?:\1[+|].+[+|](?:\r?\n|\r))+\1(?:\+[=-]+)+\+/m,
	        lookbehind: true,
	        inside: {
	          punctuation: /\||(?:\+[=-]+)+\+/
	        }
	      },
	      {
	        pattern:
	          /(^[\t ]*)=+ [ =]*=(?:(?:\r?\n|\r)\1.+)+(?:\r?\n|\r)\1=+ [ =]*=(?=(?:\r?\n|\r){2}|\s*$)/m,
	        lookbehind: true,
	        inside: {
	          punctuation: /[=-]+/
	        }
	      }
	    ],
	    // Directive-like patterns

	    'substitution-def': {
	      pattern: /(^[\t ]*\.\. )\|(?:[^|\s](?:[^|]*[^|\s])?)\| [^:]+::/m,
	      lookbehind: true,
	      inside: {
	        substitution: {
	          pattern: /^\|(?:[^|\s]|[^|\s][^|]*[^|\s])\|/,
	          alias: 'attr-value',
	          inside: {
	            punctuation: /^\||\|$/
	          }
	        },
	        directive: {
	          pattern: /( )(?! )[^:]+::/,
	          lookbehind: true,
	          alias: 'function',
	          inside: {
	            punctuation: /::$/
	          }
	        }
	      }
	    },
	    'link-target': [
	      {
	        pattern: /(^[\t ]*\.\. )\[[^\]]+\]/m,
	        lookbehind: true,
	        alias: 'string',
	        inside: {
	          punctuation: /^\[|\]$/
	        }
	      },
	      {
	        pattern: /(^[\t ]*\.\. )_(?:`[^`]+`|(?:[^:\\]|\\.)+):/m,
	        lookbehind: true,
	        alias: 'string',
	        inside: {
	          punctuation: /^_|:$/
	        }
	      }
	    ],
	    directive: {
	      pattern: /(^[\t ]*\.\. )[^:]+::/m,
	      lookbehind: true,
	      alias: 'function',
	      inside: {
	        punctuation: /::$/
	      }
	    },
	    comment: {
	      // The two alternatives try to prevent highlighting of blank comments
	      pattern:
	        /(^[\t ]*\.\.)(?:(?: .+)?(?:(?:\r?\n|\r).+)+| .+)(?=(?:\r?\n|\r){2}|$)/m,
	      lookbehind: true
	    },
	    title: [
	      // Overlined and underlined
	      {
	        pattern:
	          /^(([!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~])\2+)(?:\r?\n|\r).+(?:\r?\n|\r)\1$/m,
	        inside: {
	          punctuation:
	            /^[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~]+|[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~]+$/,
	          important: /.+/
	        }
	      },
	      // Underlined only
	      {
	        pattern:
	          /(^|(?:\r?\n|\r){2}).+(?:\r?\n|\r)([!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~])\2+(?=\r?\n|\r|$)/,
	        lookbehind: true,
	        inside: {
	          punctuation: /[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~]+$/,
	          important: /.+/
	        }
	      }
	    ],
	    hr: {
	      pattern:
	        /((?:\r?\n|\r){2})([!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~])\2{3,}(?=(?:\r?\n|\r){2})/,
	      lookbehind: true,
	      alias: 'punctuation'
	    },
	    field: {
	      pattern: /(^[\t ]*):[^:\r\n]+:(?= )/m,
	      lookbehind: true,
	      alias: 'attr-name'
	    },
	    'command-line-option': {
	      pattern:
	        /(^[\t ]*)(?:[+-][a-z\d]|(?:--|\/)[a-z\d-]+)(?:[ =](?:[a-z][\w-]*|<[^<>]+>))?(?:, (?:[+-][a-z\d]|(?:--|\/)[a-z\d-]+)(?:[ =](?:[a-z][\w-]*|<[^<>]+>))?)*(?=(?:\r?\n|\r)? {2,}\S)/im,
	      lookbehind: true,
	      alias: 'symbol'
	    },
	    'literal-block': {
	      pattern: /::(?:\r?\n|\r){2}([ \t]+)(?![ \t]).+(?:(?:\r?\n|\r)\1.+)*/,
	      inside: {
	        'literal-block-punctuation': {
	          pattern: /^::/,
	          alias: 'punctuation'
	        }
	      }
	    },
	    'quoted-literal-block': {
	      pattern:
	        /::(?:\r?\n|\r){2}([!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~]).*(?:(?:\r?\n|\r)\1.*)*/,
	      inside: {
	        'literal-block-punctuation': {
	          pattern: /^(?:::|([!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~])\1*)/m,
	          alias: 'punctuation'
	        }
	      }
	    },
	    'list-bullet': {
	      pattern:
	        /(^[\t ]*)(?:[*+\-•‣⁃]|\(?(?:\d+|[a-z]|[ivxdclm]+)\)|(?:\d+|[a-z]|[ivxdclm]+)\.)(?= )/im,
	      lookbehind: true,
	      alias: 'punctuation'
	    },
	    'doctest-block': {
	      pattern: /(^[\t ]*)>>> .+(?:(?:\r?\n|\r).+)*/m,
	      lookbehind: true,
	      inside: {
	        punctuation: /^>>>/
	      }
	    },
	    inline: [
	      {
	        pattern:
	          /(^|[\s\-:\/'"<(\[{])(?::[^:]+:`.*?`|`.*?`:[^:]+:|(\*\*?|``?|\|)(?!\s)(?:(?!\2).)*\S\2(?=[\s\-.,:;!?\\\/'")\]}]|$))/m,
	        lookbehind: true,
	        inside: {
	          bold: {
	            pattern: /(^\*\*).+(?=\*\*$)/,
	            lookbehind: true
	          },
	          italic: {
	            pattern: /(^\*).+(?=\*$)/,
	            lookbehind: true
	          },
	          'inline-literal': {
	            pattern: /(^``).+(?=``$)/,
	            lookbehind: true,
	            alias: 'symbol'
	          },
	          role: {
	            pattern: /^:[^:]+:|:[^:]+:$/,
	            alias: 'function',
	            inside: {
	              punctuation: /^:|:$/
	            }
	          },
	          'interpreted-text': {
	            pattern: /(^`).+(?=`$)/,
	            lookbehind: true,
	            alias: 'attr-value'
	          },
	          substitution: {
	            pattern: /(^\|).+(?=\|$)/,
	            lookbehind: true,
	            alias: 'attr-value'
	          },
	          punctuation: /\*\*?|``?|\|/
	        }
	      }
	    ],
	    link: [
	      {
	        pattern: /\[[^\[\]]+\]_(?=[\s\-.,:;!?\\\/'")\]}]|$)/,
	        alias: 'string',
	        inside: {
	          punctuation: /^\[|\]_$/
	        }
	      },
	      {
	        pattern:
	          /(?:\b[a-z\d]+(?:[_.:+][a-z\d]+)*_?_|`[^`]+`_?_|_`[^`]+`)(?=[\s\-.,:;!?\\\/'")\]}]|$)/i,
	        alias: 'string',
	        inside: {
	          punctuation: /^_?`|`$|`?_?_$/
	        }
	      }
	    ],
	    // Line block start,
	    // quote attribution,
	    // explicit markup start,
	    // and anonymous hyperlink target shortcut (__)
	    punctuation: {
	      pattern: /(^[\t ]*)(?:\|(?= |$)|(?:---?|—|\.\.|__)(?= )|\.\.$)/m,
	      lookbehind: true
	    }
	  };
	}

	// @ts-nocheck
	rip.displayName = 'rip';
	rip.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function rip(Prism) {
	  Prism.languages.rip = {
	    comment: {
	      pattern: /#.*/,
	      greedy: true
	    },
	    char: {
	      pattern: /\B`[^\s`'",.:;#\/\\()<>\[\]{}]\b/,
	      greedy: true
	    },
	    string: {
	      pattern: /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
	      greedy: true
	    },
	    regex: {
	      pattern:
	        /(^|[^/])\/(?!\/)(?:\[[^\n\r\]]*\]|\\.|[^/\\\r\n\[])+\/(?=\s*(?:$|[\r\n,.;})]))/,
	      lookbehind: true,
	      greedy: true
	    },
	    keyword:
	      /(?:=>|->)|\b(?:case|catch|class|else|exit|finally|if|raise|return|switch|try)\b/,
	    builtin: /@|\bSystem\b/,
	    boolean: /\b(?:false|true)\b/,
	    date: /\b\d{4}-\d{2}-\d{2}\b/,
	    time: /\b\d{2}:\d{2}:\d{2}\b/,
	    datetime: /\b\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\b/,
	    symbol: /:[^\d\s`'",.:;#\/\\()<>\[\]{}][^\s`'",.:;#\/\\()<>\[\]{}]*/,
	    number: /[+-]?\b(?:\d+\.\d+|\d+)\b/,
	    punctuation: /(?:\.{2,3})|[`,.:;=\/\\()<>\[\]{}]/,
	    reference: /[^\d\s`'",.:;#\/\\()<>\[\]{}][^\s`'",.:;#\/\\()<>\[\]{}]*/
	  };
	}

	// @ts-nocheck
	roboconf.displayName = 'roboconf';
	roboconf.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function roboconf(Prism) {
	  Prism.languages.roboconf = {
	    comment: /#.*/,
	    keyword: {
	      pattern:
	        /(^|\s)(?:(?:external|import)\b|(?:facet|instance of)(?=[ \t]+[\w-]+[ \t]*\{))/,
	      lookbehind: true
	    },
	    component: {
	      pattern: /[\w-]+(?=[ \t]*\{)/,
	      alias: 'variable'
	    },
	    property: /[\w.-]+(?=[ \t]*:)/,
	    value: {
	      pattern: /(=[ \t]*(?![ \t]))[^,;]+/,
	      lookbehind: true,
	      alias: 'attr-value'
	    },
	    optional: {
	      pattern: /\(optional\)/,
	      alias: 'builtin'
	    },
	    wildcard: {
	      pattern: /(\.)\*/,
	      lookbehind: true,
	      alias: 'operator'
	    },
	    punctuation: /[{},.;:=]/
	  };
	}

	// @ts-nocheck
	robotframework.displayName = 'robotframework';
	robotframework.aliases = ['robot'];

	/** @type {import('../core.js').Syntax} */
	function robotframework(Prism) {
	(function (Prism) {
	    var comment = {
	      pattern: /(^[ \t]*| {2}|\t)#.*/m,
	      lookbehind: true,
	      greedy: true
	    };
	    var variable = {
	      pattern: /((?:^|[^\\])(?:\\{2})*)[$@&%]\{(?:[^{}\r\n]|\{[^{}\r\n]*\})*\}/,
	      lookbehind: true,
	      inside: {
	        punctuation: /^[$@&%]\{|\}$/
	      }
	    };
	    function createSection(name, inside) {
	      var extendecInside = {};
	      extendecInside['section-header'] = {
	        pattern: /^ ?\*{3}.+?\*{3}/,
	        alias: 'keyword'
	      };

	      // copy inside tokens
	      for (var token in inside) {
	        extendecInside[token] = inside[token];
	      }
	      extendecInside['tag'] = {
	        pattern: /([\r\n](?: {2}|\t)[ \t]*)\[[-\w]+\]/,
	        lookbehind: true,
	        inside: {
	          punctuation: /\[|\]/
	        }
	      };
	      extendecInside['variable'] = variable;
	      extendecInside['comment'] = comment;
	      return {
	        pattern: RegExp(
	          /^ ?\*{3}[ \t]*<name>[ \t]*\*{3}(?:.|[\r\n](?!\*{3}))*/.source.replace(
	            /<name>/g,
	            function () {
	              return name
	            }
	          ),
	          'im'
	        ),
	        alias: 'section',
	        inside: extendecInside
	      }
	    }
	    var docTag = {
	      pattern:
	        /(\[Documentation\](?: {2}|\t)[ \t]*)(?![ \t]|#)(?:.|(?:\r\n?|\n)[ \t]*\.{3})+/,
	      lookbehind: true,
	      alias: 'string'
	    };
	    var testNameLike = {
	      pattern: /([\r\n] ?)(?!#)(?:\S(?:[ \t]\S)*)+/,
	      lookbehind: true,
	      alias: 'function',
	      inside: {
	        variable: variable
	      }
	    };
	    var testPropertyLike = {
	      pattern: /([\r\n](?: {2}|\t)[ \t]*)(?!\[|\.{3}|#)(?:\S(?:[ \t]\S)*)+/,
	      lookbehind: true,
	      inside: {
	        variable: variable
	      }
	    };
	    Prism.languages['robotframework'] = {
	      settings: createSection('Settings', {
	        documentation: {
	          pattern:
	            /([\r\n] ?Documentation(?: {2}|\t)[ \t]*)(?![ \t]|#)(?:.|(?:\r\n?|\n)[ \t]*\.{3})+/,
	          lookbehind: true,
	          alias: 'string'
	        },
	        property: {
	          pattern: /([\r\n] ?)(?!\.{3}|#)(?:\S(?:[ \t]\S)*)+/,
	          lookbehind: true
	        }
	      }),
	      variables: createSection('Variables'),
	      'test-cases': createSection('Test Cases', {
	        'test-name': testNameLike,
	        documentation: docTag,
	        property: testPropertyLike
	      }),
	      keywords: createSection('Keywords', {
	        'keyword-name': testNameLike,
	        documentation: docTag,
	        property: testPropertyLike
	      }),
	      tasks: createSection('Tasks', {
	        'task-name': testNameLike,
	        documentation: docTag,
	        property: testPropertyLike
	      }),
	      comment: comment
	    };
	    Prism.languages.robot = Prism.languages['robotframework'];
	  })(Prism);
	}

	// @ts-nocheck
	sas.displayName = 'sas';
	sas.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function sas(Prism) {
	(function (Prism) {
	    var stringPattern = /(?:"(?:""|[^"])*"(?!")|'(?:''|[^'])*'(?!'))/.source;
	    var number = /\b(?:\d[\da-f]*x|\d+(?:\.\d+)?(?:e[+-]?\d+)?)\b/i;
	    var numericConstant = {
	      pattern: RegExp(stringPattern + '[bx]'),
	      alias: 'number'
	    };
	    var macroVariable = {
	      pattern: /&[a-z_]\w*/i
	    };
	    var macroKeyword = {
	      pattern:
	        /((?:^|\s|=|\())%(?:ABORT|BY|CMS|COPY|DISPLAY|DO|ELSE|END|EVAL|GLOBAL|GO|GOTO|IF|INC|INCLUDE|INDEX|INPUT|KTRIM|LENGTH|LET|LIST|LOCAL|PUT|QKTRIM|QSCAN|QSUBSTR|QSYSFUNC|QUPCASE|RETURN|RUN|SCAN|SUBSTR|SUPERQ|SYMDEL|SYMEXIST|SYMGLOBL|SYMLOCAL|SYSCALL|SYSEVALF|SYSEXEC|SYSFUNC|SYSGET|SYSRPUT|THEN|TO|TSO|UNQUOTE|UNTIL|UPCASE|WHILE|WINDOW)\b/i,
	      lookbehind: true,
	      alias: 'keyword'
	    };
	    var step = {
	      pattern: /(^|\s)(?:proc\s+\w+|data(?!=)|quit|run)\b/i,
	      alias: 'keyword',
	      lookbehind: true
	    };
	    var comment = [
	      /\/\*[\s\S]*?\*\//,
	      {
	        pattern: /(^[ \t]*|;\s*)\*[^;]*;/m,
	        lookbehind: true
	      }
	    ];
	    var string = {
	      pattern: RegExp(stringPattern),
	      greedy: true
	    };
	    var punctuation = /[$%@.(){}\[\];,\\]/;
	    var func = {
	      pattern: /%?\b\w+(?=\()/,
	      alias: 'keyword'
	    };
	    var args = {
	      function: func,
	      'arg-value': {
	        pattern: /(=\s*)[A-Z\.]+/i,
	        lookbehind: true
	      },
	      operator: /=/,
	      'macro-variable': macroVariable,
	      arg: {
	        pattern: /[A-Z]+/i,
	        alias: 'keyword'
	      },
	      number: number,
	      'numeric-constant': numericConstant,
	      punctuation: punctuation,
	      string: string
	    };
	    var format = {
	      pattern: /\b(?:format|put)\b=?[\w'$.]+/i,
	      inside: {
	        keyword: /^(?:format|put)(?==)/i,
	        equals: /=/,
	        format: {
	          pattern: /(?:\w|\$\d)+\.\d?/,
	          alias: 'number'
	        }
	      }
	    };
	    var altformat = {
	      pattern: /\b(?:format|put)\s+[\w']+(?:\s+[$.\w]+)+(?=;)/i,
	      inside: {
	        keyword: /^(?:format|put)/i,
	        format: {
	          pattern: /[\w$]+\.\d?/,
	          alias: 'number'
	        }
	      }
	    };
	    var globalStatements = {
	      pattern:
	        /((?:^|\s)=?)(?:catname|checkpoint execute_always|dm|endsas|filename|footnote|%include|libname|%list|lock|missing|options|page|resetline|%run|sasfile|skip|sysecho|title\d?)\b/i,
	      lookbehind: true,
	      alias: 'keyword'
	    };
	    var submitStatement = {
	      pattern: /(^|\s)(?:submit(?:\s+(?:load|norun|parseonly))?|endsubmit)\b/i,
	      lookbehind: true,
	      alias: 'keyword'
	    };
	    var actionSets =
	      /aStore|accessControl|aggregation|audio|autotune|bayesianNetClassifier|bioMedImage|boolRule|builtins|cardinality|cdm|clustering|conditionalRandomFields|configuration|copula|countreg|dataDiscovery|dataPreprocess|dataSciencePilot|dataStep|decisionTree|deduplication|deepLearn|deepNeural|deepRnn|ds2|ecm|entityRes|espCluster|explainModel|factmac|fastKnn|fcmpact|fedSql|freqTab|gVarCluster|gam|gleam|graphSemiSupLearn|hiddenMarkovModel|hyperGroup|ica|image|iml|kernalPca|langModel|ldaTopic|loadStreams|mbc|mixed|mlTools|modelPublishing|network|neuralNet|nmf|nonParametricBayes|nonlinear|optNetwork|optimization|panel|pca|percentile|phreg|pls|qkb|qlim|quantreg|recommend|regression|reinforcementLearn|robustPca|ruleMining|sampling|sandwich|sccasl|search(?:Analytics)?|sentimentAnalysis|sequence|session(?:Prop)?|severity|simSystem|simple|smartData|sparkEmbeddedProcess|sparseML|spatialreg|spc|stabilityMonitoring|svDataDescription|svm|table|text(?:Filters|Frequency|Mining|Parse|Rule(?:Develop|Score)|Topic|Util)|timeData|transpose|tsInfo|tsReconcile|uniTimeSeries|varReduce/
	        .source;
	    var casActions = {
	      pattern: RegExp(
	        /(^|\s)(?:action\s+)?(?:<act>)\.[a-z]+\b[^;]+/.source.replace(
	          /<act>/g,
	          function () {
	            return actionSets
	          }
	        ),
	        'i'
	      ),
	      lookbehind: true,
	      inside: {
	        keyword: RegExp(
	          /(?:<act>)\.[a-z]+\b/.source.replace(/<act>/g, function () {
	            return actionSets
	          }),
	          'i'
	        ),
	        action: {
	          pattern: /(?:action)/i,
	          alias: 'keyword'
	        },
	        comment: comment,
	        function: func,
	        'arg-value': args['arg-value'],
	        operator: args.operator,
	        argument: args.arg,
	        number: number,
	        'numeric-constant': numericConstant,
	        punctuation: punctuation,
	        string: string
	      }
	    };
	    var keywords = {
	      pattern:
	        /((?:^|\s)=?)(?:after|analysis|and|array|barchart|barwidth|begingraph|by|call|cas|cbarline|cfill|class(?:lev)?|close|column|computed?|contains|continue|data(?==)|define|delete|describe|document|do\s+over|do|dol|drop|dul|else|end(?:comp|source)?|entryTitle|eval(?:uate)?|exec(?:ute)?|exit|file(?:name)?|fill(?:attrs)?|flist|fnc|function(?:list)?|global|goto|group(?:by)?|headline|headskip|histogram|if|infile|keep|keylabel|keyword|label|layout|leave|legendlabel|length|libname|loadactionset|merge|midpoints|_?null_|name|noobs|nowd|ods|options|or|otherwise|out(?:put)?|over(?:lay)?|plot|print|put|raise|ranexp|rannor|rbreak|retain|return|select|session|sessref|set|source|statgraph|sum|summarize|table|temp|terminate|then\s+do|then|title\d?|to|var|when|where|xaxisopts|y2axisopts|yaxisopts)\b/i,
	      lookbehind: true
	    };
	    Prism.languages.sas = {
	      datalines: {
	        pattern: /^([ \t]*)(?:cards|(?:data)?lines);[\s\S]+?^[ \t]*;/im,
	        lookbehind: true,
	        alias: 'string',
	        inside: {
	          keyword: {
	            pattern: /^(?:cards|(?:data)?lines)/i
	          },
	          punctuation: /;/
	        }
	      },
	      'proc-sql': {
	        pattern:
	          /(^proc\s+(?:fed)?sql(?:\s+[\w|=]+)?;)[\s\S]+?(?=^(?:proc\s+\w+|data|quit|run);|(?![\s\S]))/im,
	        lookbehind: true,
	        inside: {
	          sql: {
	            pattern: RegExp(
	              /^[ \t]*(?:select|alter\s+table|(?:create|describe|drop)\s+(?:index|table(?:\s+constraints)?|view)|create\s+unique\s+index|insert\s+into|update)(?:<str>|[^;"'])+;/.source.replace(
	                /<str>/g,
	                function () {
	                  return stringPattern
	                }
	              ),
	              'im'
	            ),
	            alias: 'language-sql',
	            inside: Prism.languages.sql
	          },
	          'global-statements': globalStatements,
	          'sql-statements': {
	            pattern:
	              /(^|\s)(?:disconnect\s+from|begin|commit|exec(?:ute)?|reset|rollback|validate)\b/i,
	            lookbehind: true,
	            alias: 'keyword'
	          },
	          number: number,
	          'numeric-constant': numericConstant,
	          punctuation: punctuation,
	          string: string
	        }
	      },
	      'proc-groovy': {
	        pattern:
	          /(^proc\s+groovy(?:\s+[\w|=]+)?;)[\s\S]+?(?=^(?:proc\s+\w+|data|quit|run);|(?![\s\S]))/im,
	        lookbehind: true,
	        inside: {
	          comment: comment,
	          groovy: {
	            pattern: RegExp(
	              /(^[ \t]*submit(?:\s+(?:load|norun|parseonly))?)(?:<str>|[^"'])+?(?=endsubmit;)/.source.replace(
	                /<str>/g,
	                function () {
	                  return stringPattern
	                }
	              ),
	              'im'
	            ),
	            lookbehind: true,
	            alias: 'language-groovy',
	            inside: Prism.languages.groovy
	          },
	          keyword: keywords,
	          'submit-statement': submitStatement,
	          'global-statements': globalStatements,
	          number: number,
	          'numeric-constant': numericConstant,
	          punctuation: punctuation,
	          string: string
	        }
	      },
	      'proc-lua': {
	        pattern:
	          /(^proc\s+lua(?:\s+[\w|=]+)?;)[\s\S]+?(?=^(?:proc\s+\w+|data|quit|run);|(?![\s\S]))/im,
	        lookbehind: true,
	        inside: {
	          comment: comment,
	          lua: {
	            pattern: RegExp(
	              /(^[ \t]*submit(?:\s+(?:load|norun|parseonly))?)(?:<str>|[^"'])+?(?=endsubmit;)/.source.replace(
	                /<str>/g,
	                function () {
	                  return stringPattern
	                }
	              ),
	              'im'
	            ),
	            lookbehind: true,
	            alias: 'language-lua',
	            inside: Prism.languages.lua
	          },
	          keyword: keywords,
	          'submit-statement': submitStatement,
	          'global-statements': globalStatements,
	          number: number,
	          'numeric-constant': numericConstant,
	          punctuation: punctuation,
	          string: string
	        }
	      },
	      'proc-cas': {
	        pattern:
	          /(^proc\s+cas(?:\s+[\w|=]+)?;)[\s\S]+?(?=^(?:proc\s+\w+|quit|data);|(?![\s\S]))/im,
	        lookbehind: true,
	        inside: {
	          comment: comment,
	          'statement-var': {
	            pattern: /((?:^|\s)=?)saveresult\s[^;]+/im,
	            lookbehind: true,
	            inside: {
	              statement: {
	                pattern: /^saveresult\s+\S+/i,
	                inside: {
	                  keyword: /^(?:saveresult)/i
	                }
	              },
	              rest: args
	            }
	          },
	          'cas-actions': casActions,
	          statement: {
	            pattern:
	              /((?:^|\s)=?)(?:default|(?:un)?set|on|output|upload)[^;]+/im,
	            lookbehind: true,
	            inside: args
	          },
	          step: step,
	          keyword: keywords,
	          function: func,
	          format: format,
	          altformat: altformat,
	          'global-statements': globalStatements,
	          number: number,
	          'numeric-constant': numericConstant,
	          punctuation: punctuation,
	          string: string
	        }
	      },
	      'proc-args': {
	        pattern: RegExp(
	          /(^proc\s+\w+\s+)(?!\s)(?:[^;"']|<str>)+;/.source.replace(
	            /<str>/g,
	            function () {
	              return stringPattern
	            }
	          ),
	          'im'
	        ),
	        lookbehind: true,
	        inside: args
	      },
	      /*Special keywords within macros*/
	      'macro-keyword': macroKeyword,
	      'macro-variable': macroVariable,
	      'macro-string-functions': {
	        pattern:
	          /((?:^|\s|=))%(?:BQUOTE|NRBQUOTE|NRQUOTE|NRSTR|QUOTE|STR)\(.*?(?:[^%]\))/i,
	        lookbehind: true,
	        inside: {
	          function: {
	            pattern: /%(?:BQUOTE|NRBQUOTE|NRQUOTE|NRSTR|QUOTE|STR)/i,
	            alias: 'keyword'
	          },
	          'macro-keyword': macroKeyword,
	          'macro-variable': macroVariable,
	          'escaped-char': {
	            pattern: /%['"()<>=¬^~;,#]/
	          },
	          punctuation: punctuation
	        }
	      },
	      'macro-declaration': {
	        pattern: /^%macro[^;]+(?=;)/im,
	        inside: {
	          keyword: /%macro/i
	        }
	      },
	      'macro-end': {
	        pattern: /^%mend[^;]+(?=;)/im,
	        inside: {
	          keyword: /%mend/i
	        }
	      },
	      /*%_zscore(headcir, _lhc, _mhc, _shc, headcz, headcpct, _Fheadcz); */
	      macro: {
	        pattern: /%_\w+(?=\()/,
	        alias: 'keyword'
	      },
	      input: {
	        pattern: /\binput\s[-\w\s/*.$&]+;/i,
	        inside: {
	          input: {
	            alias: 'keyword',
	            pattern: /^input/i
	          },
	          comment: comment,
	          number: number,
	          'numeric-constant': numericConstant
	        }
	      },
	      'options-args': {
	        pattern: /(^options)[-'"|/\\<>*+=:()\w\s]*(?=;)/im,
	        lookbehind: true,
	        inside: args
	      },
	      'cas-actions': casActions,
	      comment: comment,
	      function: func,
	      format: format,
	      altformat: altformat,
	      'numeric-constant': numericConstant,
	      datetime: {
	        // '1jan2013'd, '9:25:19pm't, '18jan2003:9:27:05am'dt
	        pattern: RegExp(stringPattern + '(?:dt?|t)'),
	        alias: 'number'
	      },
	      string: string,
	      step: step,
	      keyword: keywords,
	      // In SAS Studio syntax highlighting, these operators are styled like keywords
	      'operator-keyword': {
	        pattern: /\b(?:eq|ge|gt|in|le|lt|ne|not)\b/i,
	        alias: 'operator'
	      },
	      // Decimal (1.2e23), hexadecimal (0c1x)
	      number: number,
	      operator: /\*\*?|\|\|?|!!?|¦¦?|<[>=]?|>[<=]?|[-+\/=&]|[~¬^]=?/,
	      punctuation: punctuation
	    };
	  })(Prism);
	}

	// @ts-nocheck
	shellSession.displayName = 'shell-session';
	shellSession.aliases = ['sh-session', 'shellsession'];

	/** @type {import('../core.js').Syntax} */
	function shellSession(Prism) {
	  Prism.register(bash)
	  ;(function (Prism) {
	    // CAREFUL!
	    // The following patterns are concatenated, so the group referenced by a back reference is non-obvious!

	    var strings = [
	      // normal string
	      /"(?:\\[\s\S]|\$\([^)]+\)|\$(?!\()|`[^`]+`|[^"\\`$])*"/.source,
	      /'[^']*'/.source,
	      /\$'(?:[^'\\]|\\[\s\S])*'/.source,
	      // here doc
	      // 2 capturing groups
	      /<<-?\s*(["']?)(\w+)\1\s[\s\S]*?[\r\n]\2/.source
	    ].join('|');
	    Prism.languages['shell-session'] = {
	      command: {
	        pattern: RegExp(
	          // user info
	          /^/.source +
	            '(?:' +
	            // <user> ":" ( <path> )?
	            (/[^\s@:$#%*!/\\]+@[^\r\n@:$#%*!/\\]+(?::[^\0-\x1F$#%*?"<>:;|]+)?/
	              .source +
	              '|' +
	              // <path>
	              // Since the path pattern is quite general, we will require it to start with a special character to
	              // prevent false positives.
	              /[/~.][^\0-\x1F$#%*?"<>@:;|]*/.source) +
	            ')?' +
	            // shell symbol
	            /[$#%](?=\s)/.source +
	            // bash command
	            /(?:[^\\\r\n \t'"<$]|[ \t](?:(?!#)|#.*$)|\\(?:[^\r]|\r\n?)|\$(?!')|<(?!<)|<<str>>)+/.source.replace(
	              /<<str>>/g,
	              function () {
	                return strings
	              }
	            ),
	          'm'
	        ),
	        greedy: true,
	        inside: {
	          info: {
	            // foo@bar:~/files$ exit
	            // foo@bar$ exit
	            // ~/files$ exit
	            pattern: /^[^#$%]+/,
	            alias: 'punctuation',
	            inside: {
	              user: /^[^\s@:$#%*!/\\]+@[^\r\n@:$#%*!/\\]+/,
	              punctuation: /:/,
	              path: /[\s\S]+/
	            }
	          },
	          bash: {
	            pattern: /(^[$#%]\s*)\S[\s\S]*/,
	            lookbehind: true,
	            alias: 'language-bash',
	            inside: Prism.languages.bash
	          },
	          'shell-symbol': {
	            pattern: /^[$#%]/,
	            alias: 'important'
	          }
	        }
	      },
	      output: /.(?:.*(?:[\r\n]|.$))*/
	    };
	    Prism.languages['sh-session'] = Prism.languages['shellsession'] =
	      Prism.languages['shell-session'];
	  })(Prism);
	}

	// @ts-nocheck
	smali.displayName = 'smali';
	smali.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function smali(Prism) {
	  // Test files for the parser itself:
	  // https://github.com/JesusFreke/smali/tree/master/smali/src/test/resources/LexerTest

	  Prism.languages.smali = {
	    comment: /#.*/,
	    string: {
	      pattern: /"(?:[^\r\n\\"]|\\.)*"|'(?:[^\r\n\\']|\\(?:.|u[\da-fA-F]{4}))'/,
	      greedy: true
	    },
	    'class-name': {
	      pattern:
	        /(^|[^L])L(?:(?:\w+|`[^`\r\n]*`)\/)*(?:[\w$]+|`[^`\r\n]*`)(?=\s*;)/,
	      lookbehind: true,
	      inside: {
	        'class-name': {
	          pattern: /(^L|\/)(?:[\w$]+|`[^`\r\n]*`)$/,
	          lookbehind: true
	        },
	        namespace: {
	          pattern: /^(L)(?:(?:\w+|`[^`\r\n]*`)\/)+/,
	          lookbehind: true,
	          inside: {
	            punctuation: /\//
	          }
	        },
	        builtin: /^L/
	      }
	    },
	    builtin: [
	      {
	        // Reference: https://github.com/JesusFreke/smali/wiki/TypesMethodsAndFields#types
	        pattern: /([();\[])[BCDFIJSVZ]+/,
	        lookbehind: true
	      },
	      {
	        // e.g. .field mWifiOnUid:I
	        pattern: /([\w$>]:)[BCDFIJSVZ]/,
	        lookbehind: true
	      }
	    ],
	    keyword: [
	      {
	        pattern: /(\.end\s+)[\w-]+/,
	        lookbehind: true
	      },
	      {
	        pattern: /(^|[^\w.-])\.(?!\d)[\w-]+/,
	        lookbehind: true
	      },
	      {
	        pattern:
	          /(^|[^\w.-])(?:abstract|annotation|bridge|constructor|enum|final|interface|private|protected|public|runtime|static|synthetic|system|transient)(?![\w.-])/,
	        lookbehind: true
	      }
	    ],
	    function: {
	      pattern: /(^|[^\w.-])(?:\w+|<[\w$-]+>)(?=\()/,
	      lookbehind: true
	    },
	    field: {
	      pattern: /[\w$]+(?=:)/,
	      alias: 'variable'
	    },
	    register: {
	      pattern: /(^|[^\w.-])[vp]\d(?![\w.-])/,
	      lookbehind: true,
	      alias: 'variable'
	    },
	    boolean: {
	      pattern: /(^|[^\w.-])(?:false|true)(?![\w.-])/,
	      lookbehind: true
	    },
	    number: {
	      pattern:
	        /(^|[^/\w.-])-?(?:NAN|INFINITY|0x(?:[\dA-F]+(?:\.[\dA-F]*)?|\.[\dA-F]+)(?:p[+-]?[\dA-F]+)?|(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?)[dflst]?(?![\w.-])/i,
	      lookbehind: true
	    },
	    label: {
	      pattern: /(:)\w+/,
	      lookbehind: true,
	      alias: 'property'
	    },
	    operator: /->|\.\.|[\[=]/,
	    punctuation: /[{}(),;:]/
	  };
	}

	// @ts-nocheck
	smalltalk.displayName = 'smalltalk';
	smalltalk.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function smalltalk(Prism) {
	  Prism.languages.smalltalk = {
	    comment: {
	      pattern: /"(?:""|[^"])*"/,
	      greedy: true
	    },
	    char: {
	      pattern: /\$./,
	      greedy: true
	    },
	    string: {
	      pattern: /'(?:''|[^'])*'/,
	      greedy: true
	    },
	    symbol: /#[\da-z]+|#(?:-|([+\/\\*~<>=@%|&?!])\1?)|#(?=\()/i,
	    'block-arguments': {
	      pattern: /(\[\s*):[^\[|]*\|/,
	      lookbehind: true,
	      inside: {
	        variable: /:[\da-z]+/i,
	        punctuation: /\|/
	      }
	    },
	    'temporary-variables': {
	      pattern: /\|[^|]+\|/,
	      inside: {
	        variable: /[\da-z]+/i,
	        punctuation: /\|/
	      }
	    },
	    keyword: /\b(?:new|nil|self|super)\b/,
	    boolean: /\b(?:false|true)\b/,
	    number: [
	      /\d+r-?[\dA-Z]+(?:\.[\dA-Z]+)?(?:e-?\d+)?/,
	      /\b\d+(?:\.\d+)?(?:e-?\d+)?/
	    ],
	    operator: /[<=]=?|:=|~[~=]|\/\/?|\\\\|>[>=]?|[!^+\-*&|,@]/,
	    punctuation: /[.;:?\[\](){}]/
	  };
	}

	// @ts-nocheck
	smarty.displayName = 'smarty';
	smarty.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function smarty(Prism) {
	  Prism.register(markupTemplating)
	  ;(function (Prism) {
	    Prism.languages.smarty = {
	      comment: {
	        pattern: /^\{\*[\s\S]*?\*\}/,
	        greedy: true
	      },
	      'embedded-php': {
	        pattern: /^\{php\}[\s\S]*?\{\/php\}/,
	        greedy: true,
	        inside: {
	          smarty: {
	            pattern: /^\{php\}|\{\/php\}$/,
	            inside: null // see below
	          },

	          php: {
	            pattern: /[\s\S]+/,
	            alias: 'language-php',
	            inside: Prism.languages.php
	          }
	        }
	      },
	      string: [
	        {
	          pattern: /"(?:\\.|[^"\\\r\n])*"/,
	          greedy: true,
	          inside: {
	            interpolation: {
	              pattern: /\{[^{}]*\}|`[^`]*`/,
	              inside: {
	                'interpolation-punctuation': {
	                  pattern: /^[{`]|[`}]$/,
	                  alias: 'punctuation'
	                },
	                expression: {
	                  pattern: /[\s\S]+/,
	                  inside: null // see below
	                }
	              }
	            },

	            variable: /\$\w+/
	          }
	        },
	        {
	          pattern: /'(?:\\.|[^'\\\r\n])*'/,
	          greedy: true
	        }
	      ],
	      keyword: {
	        pattern: /(^\{\/?)[a-z_]\w*\b(?!\()/i,
	        lookbehind: true,
	        greedy: true
	      },
	      delimiter: {
	        pattern: /^\{\/?|\}$/,
	        greedy: true,
	        alias: 'punctuation'
	      },
	      number: /\b0x[\dA-Fa-f]+|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee][-+]?\d+)?/,
	      variable: [
	        /\$(?!\d)\w+/,
	        /#(?!\d)\w+#/,
	        {
	          pattern: /(\.|->|\w\s*=)(?!\d)\w+\b(?!\()/,
	          lookbehind: true
	        },
	        {
	          pattern: /(\[)(?!\d)\w+(?=\])/,
	          lookbehind: true
	        }
	      ],
	      function: {
	        pattern: /(\|\s*)@?[a-z_]\w*|\b[a-z_]\w*(?=\()/i,
	        lookbehind: true
	      },
	      'attr-name': /\b[a-z_]\w*(?=\s*=)/i,
	      boolean: /\b(?:false|no|off|on|true|yes)\b/,
	      punctuation: /[\[\](){}.,:`]|->/,
	      operator: [
	        /[+\-*\/%]|==?=?|[!<>]=?|&&|\|\|?/,
	        /\bis\s+(?:not\s+)?(?:div|even|odd)(?:\s+by)?\b/,
	        /\b(?:and|eq|gt?e|gt|lt?e|lt|mod|neq?|not|or)\b/
	      ]
	    };
	    Prism.languages.smarty['embedded-php'].inside.smarty.inside =
	      Prism.languages.smarty;
	    Prism.languages.smarty.string[0].inside.interpolation.inside.expression.inside =
	      Prism.languages.smarty;
	    var string = /"(?:\\.|[^"\\\r\n])*"|'(?:\\.|[^'\\\r\n])*'/;
	    var smartyPattern = RegExp(
	      // comments
	      /\{\*[\s\S]*?\*\}/.source +
	        '|' +
	        // php tags
	        /\{php\}[\s\S]*?\{\/php\}/.source +
	        '|' +
	        // smarty blocks
	        /\{(?:[^{}"']|<str>|\{(?:[^{}"']|<str>|\{(?:[^{}"']|<str>)*\})*\})*\}/.source.replace(
	          /<str>/g,
	          function () {
	            return string.source
	          }
	        ),
	      'g'
	    );

	    // Tokenize all inline Smarty expressions
	    Prism.hooks.add('before-tokenize', function (env) {
	      var smartyLiteralStart = '{literal}';
	      var smartyLiteralEnd = '{/literal}';
	      var smartyLiteralMode = false;
	      Prism.languages['markup-templating'].buildPlaceholders(
	        env,
	        'smarty',
	        smartyPattern,
	        function (match) {
	          // Smarty tags inside {literal} block are ignored
	          if (match === smartyLiteralEnd) {
	            smartyLiteralMode = false;
	          }
	          if (!smartyLiteralMode) {
	            if (match === smartyLiteralStart) {
	              smartyLiteralMode = true;
	            }
	            return true
	          }
	          return false
	        }
	      );
	    });

	    // Re-insert the tokens after tokenizing
	    Prism.hooks.add('after-tokenize', function (env) {
	      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty');
	    });
	  })(Prism);
	}

	// @ts-nocheck
	sml.displayName = 'sml';
	sml.aliases = ['smlnj'];

	/** @type {import('../core.js').Syntax} */
	function sml(Prism) {
	(function (Prism) {
	    var keywords =
	      /\b(?:abstype|and|andalso|as|case|datatype|do|else|end|eqtype|exception|fn|fun|functor|handle|if|in|include|infix|infixr|let|local|nonfix|of|op|open|orelse|raise|rec|sharing|sig|signature|struct|structure|then|type|val|where|while|with|withtype)\b/i;
	    Prism.languages.sml = {
	      // allow one level of nesting
	      comment:
	        /\(\*(?:[^*(]|\*(?!\))|\((?!\*)|\(\*(?:[^*(]|\*(?!\))|\((?!\*))*\*\))*\*\)/,
	      string: {
	        pattern: /#?"(?:[^"\\]|\\.)*"/,
	        greedy: true
	      },
	      'class-name': [
	        {
	          // This is only an approximation since the real grammar is context-free
	          //
	          // Why the main loop so complex?
	          // The main loop is approximately the same as /(?:\s*(?:[*,]|->)\s*<TERMINAL>)*/ which is, obviously, a lot
	          // simpler. The difference is that if a comma is the last iteration of the loop, then the terminal must be
	          // followed by a long identifier.
	          pattern: RegExp(
	            /((?:^|[^:]):\s*)<TERMINAL>(?:\s*(?:(?:\*|->)\s*<TERMINAL>|,\s*<TERMINAL>(?:(?=<NOT-LAST>)|(?!<NOT-LAST>)\s+<LONG-ID>)))*/.source
	              .replace(/<NOT-LAST>/g, function () {
	                return /\s*(?:[*,]|->)/.source
	              })
	              .replace(/<TERMINAL>/g, function () {
	                return /(?:'[\w']*|<LONG-ID>|\((?:[^()]|\([^()]*\))*\)|\{(?:[^{}]|\{[^{}]*\})*\})(?:\s+<LONG-ID>)*/
	                  .source
	              })
	              .replace(/<LONG-ID>/g, function () {
	                return /(?!<KEYWORD>)[a-z\d_][\w'.]*/.source
	              })
	              .replace(/<KEYWORD>/g, function () {
	                return keywords.source
	              }),
	            'i'
	          ),
	          lookbehind: true,
	          greedy: true,
	          inside: null // see below
	        },
	        {
	          pattern:
	            /((?:^|[^\w'])(?:datatype|exception|functor|signature|structure|type)\s+)[a-z_][\w'.]*/i,
	          lookbehind: true
	        }
	      ],
	      function: {
	        pattern: /((?:^|[^\w'])fun\s+)[a-z_][\w'.]*/i,
	        lookbehind: true
	      },
	      keyword: keywords,
	      variable: {
	        pattern: /(^|[^\w'])'[\w']*/,
	        lookbehind: true
	      },
	      number: /~?\b(?:\d+(?:\.\d+)?(?:e~?\d+)?|0x[\da-f]+)\b/i,
	      word: {
	        pattern: /\b0w(?:\d+|x[\da-f]+)\b/i,
	        alias: 'constant'
	      },
	      boolean: /\b(?:false|true)\b/i,
	      operator: /\.\.\.|:[>=:]|=>?|->|[<>]=?|[!+\-*/^#|@~]/,
	      punctuation: /[(){}\[\].:,;]/
	    };
	    Prism.languages.sml['class-name'][0].inside = Prism.languages.sml;
	    Prism.languages.smlnj = Prism.languages.sml;
	  })(Prism);
	}

	// @ts-nocheck
	solidity.displayName = 'solidity';
	solidity.aliases = ['sol'];

	/** @type {import('../core.js').Syntax} */
	function solidity(Prism) {
	  Prism.register(clike);
	  Prism.languages.solidity = Prism.languages.extend('clike', {
	    'class-name': {
	      pattern:
	        /(\b(?:contract|enum|interface|library|new|struct|using)\s+)(?!\d)[\w$]+/,
	      lookbehind: true
	    },
	    keyword:
	      /\b(?:_|anonymous|as|assembly|assert|break|calldata|case|constant|constructor|continue|contract|default|delete|do|else|emit|enum|event|external|for|from|function|if|import|indexed|inherited|interface|internal|is|let|library|mapping|memory|modifier|new|payable|pragma|private|public|pure|require|returns?|revert|selfdestruct|solidity|storage|struct|suicide|switch|this|throw|using|var|view|while)\b/,
	    operator: /=>|->|:=|=:|\*\*|\+\+|--|\|\||&&|<<=?|>>=?|[-+*/%^&|<>!=]=?|[~?]/
	  });
	  Prism.languages.insertBefore('solidity', 'keyword', {
	    builtin:
	      /\b(?:address|bool|byte|u?int(?:8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?|string|bytes(?:[1-9]|[12]\d|3[0-2])?)\b/
	  });
	  Prism.languages.insertBefore('solidity', 'number', {
	    version: {
	      pattern: /([<>]=?|\^)\d+\.\d+\.\d+\b/,
	      lookbehind: true,
	      alias: 'number'
	    }
	  });
	  Prism.languages.sol = Prism.languages.solidity;
	}

	// @ts-nocheck
	solutionFile.displayName = 'solution-file';
	solutionFile.aliases = ['sln'];

	/** @type {import('../core.js').Syntax} */
	function solutionFile(Prism) {
	(function (Prism) {
	    var guid = {
	      // https://en.wikipedia.org/wiki/Universally_unique_identifier#Format
	      pattern: /\{[\da-f]{8}-[\da-f]{4}-[\da-f]{4}-[\da-f]{4}-[\da-f]{12}\}/i,
	      alias: 'constant',
	      inside: {
	        punctuation: /[{}]/
	      }
	    };
	    Prism.languages['solution-file'] = {
	      comment: {
	        pattern: /#.*/,
	        greedy: true
	      },
	      string: {
	        pattern: /"[^"\r\n]*"|'[^'\r\n]*'/,
	        greedy: true,
	        inside: {
	          guid: guid
	        }
	      },
	      object: {
	        // Foo
	        //   Bar("abs") = 9
	        //   EndBar
	        //   Prop = TRUE
	        // EndFoo
	        pattern:
	          /^([ \t]*)(?:([A-Z]\w*)\b(?=.*(?:\r\n?|\n)(?:\1[ \t].*(?:\r\n?|\n))*\1End\2(?=[ \t]*$))|End[A-Z]\w*(?=[ \t]*$))/m,
	        lookbehind: true,
	        greedy: true,
	        alias: 'keyword'
	      },
	      property: {
	        pattern: /^([ \t]*)(?!\s)[^\r\n"#=()]*[^\s"#=()](?=\s*=)/m,
	        lookbehind: true,
	        inside: {
	          guid: guid
	        }
	      },
	      guid: guid,
	      number: /\b\d+(?:\.\d+)*\b/,
	      boolean: /\b(?:FALSE|TRUE)\b/,
	      operator: /=/,
	      punctuation: /[(),]/
	    };
	    Prism.languages['sln'] = Prism.languages['solution-file'];
	  })(Prism);
	}

	// @ts-nocheck
	soy.displayName = 'soy';
	soy.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function soy(Prism) {
	  Prism.register(markupTemplating)
	  ;(function (Prism) {
	    var stringPattern = /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/;
	    var numberPattern = /\b\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\b|\b0x[\dA-F]+\b/;
	    Prism.languages.soy = {
	      comment: [
	        /\/\*[\s\S]*?\*\//,
	        {
	          pattern: /(\s)\/\/.*/,
	          lookbehind: true,
	          greedy: true
	        }
	      ],
	      'command-arg': {
	        pattern:
	          /(\{+\/?\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\s+)\.?[\w.]+/,
	        lookbehind: true,
	        alias: 'string',
	        inside: {
	          punctuation: /\./
	        }
	      },
	      parameter: {
	        pattern: /(\{+\/?\s*@?param\??\s+)\.?[\w.]+/,
	        lookbehind: true,
	        alias: 'variable'
	      },
	      keyword: [
	        {
	          pattern:
	            /(\{+\/?[^\S\r\n]*)(?:\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\??|rb|sp|switch|template|xid)/,
	          lookbehind: true
	        },
	        /\b(?:any|as|attributes|bool|css|float|html|in|int|js|list|map|null|number|string|uri)\b/
	      ],
	      delimiter: {
	        pattern: /^\{+\/?|\/?\}+$/,
	        alias: 'punctuation'
	      },
	      property: /\w+(?==)/,
	      variable: {
	        pattern: /\$[^\W\d]\w*(?:\??(?:\.\w+|\[[^\]]+\]))*/,
	        inside: {
	          string: {
	            pattern: stringPattern,
	            greedy: true
	          },
	          number: numberPattern,
	          punctuation: /[\[\].?]/
	        }
	      },
	      string: {
	        pattern: stringPattern,
	        greedy: true
	      },
	      function: [
	        /\w+(?=\()/,
	        {
	          pattern: /(\|[^\S\r\n]*)\w+/,
	          lookbehind: true
	        }
	      ],
	      boolean: /\b(?:false|true)\b/,
	      number: numberPattern,
	      operator: /\?:?|<=?|>=?|==?|!=|[+*/%-]|\b(?:and|not|or)\b/,
	      punctuation: /[{}()\[\]|.,:]/
	    };

	    // Tokenize all inline Soy expressions
	    Prism.hooks.add('before-tokenize', function (env) {
	      var soyPattern = /\{\{.+?\}\}|\{.+?\}|\s\/\/.*|\/\*[\s\S]*?\*\//g;
	      var soyLitteralStart = '{literal}';
	      var soyLitteralEnd = '{/literal}';
	      var soyLitteralMode = false;
	      Prism.languages['markup-templating'].buildPlaceholders(
	        env,
	        'soy',
	        soyPattern,
	        function (match) {
	          // Soy tags inside {literal} block are ignored
	          if (match === soyLitteralEnd) {
	            soyLitteralMode = false;
	          }
	          if (!soyLitteralMode) {
	            if (match === soyLitteralStart) {
	              soyLitteralMode = true;
	            }
	            return true
	          }
	          return false
	        }
	      );
	    });

	    // Re-insert the tokens after tokenizing
	    Prism.hooks.add('after-tokenize', function (env) {
	      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'soy');
	    });
	  })(Prism);
	}

	// @ts-nocheck
	turtle.displayName = 'turtle';
	turtle.aliases = ['trig'];

	/** @type {import('../core.js').Syntax} */
	function turtle(Prism) {
	  Prism.languages.turtle = {
	    comment: {
	      pattern: /#.*/,
	      greedy: true
	    },
	    'multiline-string': {
	      pattern:
	        /"""(?:(?:""?)?(?:[^"\\]|\\.))*"""|'''(?:(?:''?)?(?:[^'\\]|\\.))*'''/,
	      greedy: true,
	      alias: 'string',
	      inside: {
	        comment: /#.*/
	      }
	    },
	    string: {
	      pattern: /"(?:[^\\"\r\n]|\\.)*"|'(?:[^\\'\r\n]|\\.)*'/,
	      greedy: true
	    },
	    url: {
	      pattern:
	        /<(?:[^\x00-\x20<>"{}|^`\\]|\\(?:u[\da-fA-F]{4}|U[\da-fA-F]{8}))*>/,
	      greedy: true,
	      inside: {
	        punctuation: /[<>]/
	      }
	    },
	    function: {
	      pattern:
	        /(?:(?![-.\d\xB7])[-.\w\xB7\xC0-\uFFFD]+)?:(?:(?![-.])(?:[-.:\w\xC0-\uFFFD]|%[\da-f]{2}|\\.)+)?/i,
	      inside: {
	        'local-name': {
	          pattern: /([^:]*:)[\s\S]+/,
	          lookbehind: true
	        },
	        prefix: {
	          pattern: /[\s\S]+/,
	          inside: {
	            punctuation: /:/
	          }
	        }
	      }
	    },
	    number: /[+-]?\b\d+(?:\.\d*)?(?:e[+-]?\d+)?/i,
	    punctuation: /[{}.,;()[\]]|\^\^/,
	    boolean: /\b(?:false|true)\b/,
	    keyword: [/(?:\ba|@prefix|@base)\b|=/, /\b(?:base|graph|prefix)\b/i],
	    tag: {
	      pattern: /@[a-z]+(?:-[a-z\d]+)*/i,
	      inside: {
	        punctuation: /@/
	      }
	    }
	  };
	  Prism.languages.trig = Prism.languages['turtle'];
	}

	// @ts-nocheck
	sparql.displayName = 'sparql';
	sparql.aliases = ['rq'];

	/** @type {import('../core.js').Syntax} */
	function sparql(Prism) {
	  Prism.register(turtle);
	  Prism.languages.sparql = Prism.languages.extend('turtle', {
	    boolean: /\b(?:false|true)\b/i,
	    variable: {
	      pattern: /[?$]\w+/,
	      greedy: true
	    }
	  });
	  Prism.languages.insertBefore('sparql', 'punctuation', {
	    keyword: [
	      /\b(?:A|ADD|ALL|AS|ASC|ASK|BNODE|BY|CLEAR|CONSTRUCT|COPY|CREATE|DATA|DEFAULT|DELETE|DESC|DESCRIBE|DISTINCT|DROP|EXISTS|FILTER|FROM|GROUP|HAVING|INSERT|INTO|LIMIT|LOAD|MINUS|MOVE|NAMED|NOT|NOW|OFFSET|OPTIONAL|ORDER|RAND|REDUCED|SELECT|SEPARATOR|SERVICE|SILENT|STRUUID|UNION|USING|UUID|VALUES|WHERE)\b/i,
	      /\b(?:ABS|AVG|BIND|BOUND|CEIL|COALESCE|CONCAT|CONTAINS|COUNT|DATATYPE|DAY|ENCODE_FOR_URI|FLOOR|GROUP_CONCAT|HOURS|IF|IRI|isBLANK|isIRI|isLITERAL|isNUMERIC|isURI|LANG|LANGMATCHES|LCASE|MAX|MD5|MIN|MINUTES|MONTH|REGEX|REPLACE|ROUND|sameTerm|SAMPLE|SECONDS|SHA1|SHA256|SHA384|SHA512|STR|STRAFTER|STRBEFORE|STRDT|STRENDS|STRLANG|STRLEN|STRSTARTS|SUBSTR|SUM|TIMEZONE|TZ|UCASE|URI|YEAR)\b(?=\s*\()/i,
	      /\b(?:BASE|GRAPH|PREFIX)\b/i
	    ]
	  });
	  Prism.languages.rq = Prism.languages.sparql;
	}

	// @ts-nocheck
	splunkSpl.displayName = 'splunk-spl';
	splunkSpl.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function splunkSpl(Prism) {
	  Prism.languages['splunk-spl'] = {
	    comment: /`comment\("(?:\\.|[^\\"])*"\)`/,
	    string: {
	      pattern: /"(?:\\.|[^\\"])*"/,
	      greedy: true
	    },
	    // https://docs.splunk.com/Documentation/Splunk/7.3.0/SearchReference/ListOfSearchCommands
	    keyword:
	      /\b(?:abstract|accum|addcoltotals|addinfo|addtotals|analyzefields|anomalies|anomalousvalue|anomalydetection|append|appendcols|appendcsv|appendlookup|appendpipe|arules|associate|audit|autoregress|bin|bucket|bucketdir|chart|cluster|cofilter|collect|concurrency|contingency|convert|correlate|datamodel|dbinspect|dedup|delete|delta|diff|erex|eval|eventcount|eventstats|extract|fieldformat|fields|fieldsummary|filldown|fillnull|findtypes|folderize|foreach|format|from|gauge|gentimes|geom|geomfilter|geostats|head|highlight|history|iconify|input|inputcsv|inputlookup|iplocation|join|kmeans|kv|kvform|loadjob|localize|localop|lookup|makecontinuous|makemv|makeresults|map|mcollect|metadata|metasearch|meventcollect|mstats|multikv|multisearch|mvcombine|mvexpand|nomv|outlier|outputcsv|outputlookup|outputtext|overlap|pivot|predict|rangemap|rare|regex|relevancy|reltime|rename|replace|rest|return|reverse|rex|rtorder|run|savedsearch|script|scrub|search|searchtxn|selfjoin|sendemail|set|setfields|sichart|sirare|sistats|sitimechart|sitop|sort|spath|stats|strcat|streamstats|table|tags|tail|timechart|timewrap|top|transaction|transpose|trendline|tscollect|tstats|typeahead|typelearner|typer|union|uniq|untable|where|x11|xmlkv|xmlunescape|xpath|xyseries)\b/i,
	    'operator-word': {
	      pattern: /\b(?:and|as|by|not|or|xor)\b/i,
	      alias: 'operator'
	    },
	    function: /\b\w+(?=\s*\()/,
	    property: /\b\w+(?=\s*=(?!=))/,
	    date: {
	      // MM/DD/YYYY(:HH:MM:SS)?
	      pattern: /\b\d{1,2}\/\d{1,2}\/\d{1,4}(?:(?::\d{1,2}){3})?\b/,
	      alias: 'number'
	    },
	    number: /\b\d+(?:\.\d+)?\b/,
	    boolean: /\b(?:f|false|t|true)\b/i,
	    operator: /[<>=]=?|[-+*/%|]/,
	    punctuation: /[()[\],]/
	  };
	}

	// @ts-nocheck
	sqf.displayName = 'sqf';
	sqf.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function sqf(Prism) {
	  Prism.register(clike);
	  Prism.languages.sqf = Prism.languages.extend('clike', {
	    string: {
	      pattern: /"(?:(?:"")?[^"])*"(?!")|'(?:[^'])*'/,
	      greedy: true
	    },
	    keyword:
	      /\b(?:breakOut|breakTo|call|case|catch|default|do|echo|else|execFSM|execVM|exitWith|for|forEach|forEachMember|forEachMemberAgent|forEachMemberTeam|from|goto|if|nil|preprocessFile|preprocessFileLineNumbers|private|scopeName|spawn|step|switch|then|throw|to|try|while|with)\b/i,
	    boolean: /\b(?:false|true)\b/i,
	    function:
	      /\b(?:abs|accTime|acos|action|actionIDs|actionKeys|actionKeysImages|actionKeysNames|actionKeysNamesArray|actionName|actionParams|activateAddons|activatedAddons|activateKey|add3DENConnection|add3DENEventHandler|add3DENLayer|addAction|addBackpack|addBackpackCargo|addBackpackCargoGlobal|addBackpackGlobal|addCamShake|addCuratorAddons|addCuratorCameraArea|addCuratorEditableObjects|addCuratorEditingArea|addCuratorPoints|addEditorObject|addEventHandler|addForce|addForceGeneratorRTD|addGoggles|addGroupIcon|addHandgunItem|addHeadgear|addItem|addItemCargo|addItemCargoGlobal|addItemPool|addItemToBackpack|addItemToUniform|addItemToVest|addLiveStats|addMagazine|addMagazineAmmoCargo|addMagazineCargo|addMagazineCargoGlobal|addMagazineGlobal|addMagazinePool|addMagazines|addMagazineTurret|addMenu|addMenuItem|addMissionEventHandler|addMPEventHandler|addMusicEventHandler|addOwnedMine|addPlayerScores|addPrimaryWeaponItem|addPublicVariableEventHandler|addRating|addResources|addScore|addScoreSide|addSecondaryWeaponItem|addSwitchableUnit|addTeamMember|addToRemainsCollector|addTorque|addUniform|addVehicle|addVest|addWaypoint|addWeapon|addWeaponCargo|addWeaponCargoGlobal|addWeaponGlobal|addWeaponItem|addWeaponPool|addWeaponTurret|admin|agent|agents|AGLToASL|aimedAtTarget|aimPos|airDensityCurveRTD|airDensityRTD|airplaneThrottle|airportSide|AISFinishHeal|alive|all3DENEntities|allAirports|allControls|allCurators|allCutLayers|allDead|allDeadMen|allDisplays|allGroups|allMapMarkers|allMines|allMissionObjects|allow3DMode|allowCrewInImmobile|allowCuratorLogicIgnoreAreas|allowDamage|allowDammage|allowFileOperations|allowFleeing|allowGetIn|allowSprint|allPlayers|allSimpleObjects|allSites|allTurrets|allUnits|allUnitsUAV|allVariables|ammo|ammoOnPylon|animate|animateBay|animateDoor|animatePylon|animateSource|animationNames|animationPhase|animationSourcePhase|animationState|append|apply|armoryPoints|arrayIntersect|asin|ASLToAGL|ASLToATL|assert|assignAsCargo|assignAsCargoIndex|assignAsCommander|assignAsDriver|assignAsGunner|assignAsTurret|assignCurator|assignedCargo|assignedCommander|assignedDriver|assignedGunner|assignedItems|assignedTarget|assignedTeam|assignedVehicle|assignedVehicleRole|assignItem|assignTeam|assignToAirport|atan|atan2|atg|ATLToASL|attachedObject|attachedObjects|attachedTo|attachObject|attachTo|attackEnabled|backpack|backpackCargo|backpackContainer|backpackItems|backpackMagazines|backpackSpaceFor|behaviour|benchmark|binocular|blufor|boundingBox|boundingBoxReal|boundingCenter|briefingName|buildingExit|buildingPos|buldozer_EnableRoadDiag|buldozer_IsEnabledRoadDiag|buldozer_LoadNewRoads|buldozer_reloadOperMap|buttonAction|buttonSetAction|cadetMode|callExtension|camCommand|camCommit|camCommitPrepared|camCommitted|camConstuctionSetParams|camCreate|camDestroy|cameraEffect|cameraEffectEnableHUD|cameraInterest|cameraOn|cameraView|campaignConfigFile|camPreload|camPreloaded|camPrepareBank|camPrepareDir|camPrepareDive|camPrepareFocus|camPrepareFov|camPrepareFovRange|camPreparePos|camPrepareRelPos|camPrepareTarget|camSetBank|camSetDir|camSetDive|camSetFocus|camSetFov|camSetFovRange|camSetPos|camSetRelPos|camSetTarget|camTarget|camUseNVG|canAdd|canAddItemToBackpack|canAddItemToUniform|canAddItemToVest|cancelSimpleTaskDestination|canFire|canMove|canSlingLoad|canStand|canSuspend|canTriggerDynamicSimulation|canUnloadInCombat|canVehicleCargo|captive|captiveNum|cbChecked|cbSetChecked|ceil|channelEnabled|cheatsEnabled|checkAIFeature|checkVisibility|civilian|className|clear3DENAttribute|clear3DENInventory|clearAllItemsFromBackpack|clearBackpackCargo|clearBackpackCargoGlobal|clearForcesRTD|clearGroupIcons|clearItemCargo|clearItemCargoGlobal|clearItemPool|clearMagazineCargo|clearMagazineCargoGlobal|clearMagazinePool|clearOverlay|clearRadio|clearVehicleInit|clearWeaponCargo|clearWeaponCargoGlobal|clearWeaponPool|clientOwner|closeDialog|closeDisplay|closeOverlay|collapseObjectTree|collect3DENHistory|collectiveRTD|combatMode|commandArtilleryFire|commandChat|commander|commandFire|commandFollow|commandFSM|commandGetOut|commandingMenu|commandMove|commandRadio|commandStop|commandSuppressiveFire|commandTarget|commandWatch|comment|commitOverlay|compile|compileFinal|completedFSM|composeText|configClasses|configFile|configHierarchy|configName|configNull|configProperties|configSourceAddonList|configSourceMod|configSourceModList|confirmSensorTarget|connectTerminalToUAV|controlNull|controlsGroupCtrl|copyFromClipboard|copyToClipboard|copyWaypoints|cos|count|countEnemy|countFriendly|countSide|countType|countUnknown|create3DENComposition|create3DENEntity|createAgent|createCenter|createDialog|createDiaryLink|createDiaryRecord|createDiarySubject|createDisplay|createGearDialog|createGroup|createGuardedPoint|createLocation|createMarker|createMarkerLocal|createMenu|createMine|createMissionDisplay|createMPCampaignDisplay|createSimpleObject|createSimpleTask|createSite|createSoundSource|createTask|createTeam|createTrigger|createUnit|createVehicle|createVehicleCrew|createVehicleLocal|crew|ctAddHeader|ctAddRow|ctClear|ctCurSel|ctData|ctFindHeaderRows|ctFindRowHeader|ctHeaderControls|ctHeaderCount|ctRemoveHeaders|ctRemoveRows|ctrlActivate|ctrlAddEventHandler|ctrlAngle|ctrlAutoScrollDelay|ctrlAutoScrollRewind|ctrlAutoScrollSpeed|ctrlChecked|ctrlClassName|ctrlCommit|ctrlCommitted|ctrlCreate|ctrlDelete|ctrlEnable|ctrlEnabled|ctrlFade|ctrlHTMLLoaded|ctrlIDC|ctrlIDD|ctrlMapAnimAdd|ctrlMapAnimClear|ctrlMapAnimCommit|ctrlMapAnimDone|ctrlMapCursor|ctrlMapMouseOver|ctrlMapScale|ctrlMapScreenToWorld|ctrlMapWorldToScreen|ctrlModel|ctrlModelDirAndUp|ctrlModelScale|ctrlParent|ctrlParentControlsGroup|ctrlPosition|ctrlRemoveAllEventHandlers|ctrlRemoveEventHandler|ctrlScale|ctrlSetActiveColor|ctrlSetAngle|ctrlSetAutoScrollDelay|ctrlSetAutoScrollRewind|ctrlSetAutoScrollSpeed|ctrlSetBackgroundColor|ctrlSetChecked|ctrlSetDisabledColor|ctrlSetEventHandler|ctrlSetFade|ctrlSetFocus|ctrlSetFont|ctrlSetFontH1|ctrlSetFontH1B|ctrlSetFontH2|ctrlSetFontH2B|ctrlSetFontH3|ctrlSetFontH3B|ctrlSetFontH4|ctrlSetFontH4B|ctrlSetFontH5|ctrlSetFontH5B|ctrlSetFontH6|ctrlSetFontH6B|ctrlSetFontHeight|ctrlSetFontHeightH1|ctrlSetFontHeightH2|ctrlSetFontHeightH3|ctrlSetFontHeightH4|ctrlSetFontHeightH5|ctrlSetFontHeightH6|ctrlSetFontHeightSecondary|ctrlSetFontP|ctrlSetFontPB|ctrlSetFontSecondary|ctrlSetForegroundColor|ctrlSetModel|ctrlSetModelDirAndUp|ctrlSetModelScale|ctrlSetPixelPrecision|ctrlSetPosition|ctrlSetScale|ctrlSetStructuredText|ctrlSetText|ctrlSetTextColor|ctrlSetTextColorSecondary|ctrlSetTextSecondary|ctrlSetTooltip|ctrlSetTooltipColorBox|ctrlSetTooltipColorShade|ctrlSetTooltipColorText|ctrlShow|ctrlShown|ctrlText|ctrlTextHeight|ctrlTextSecondary|ctrlTextWidth|ctrlType|ctrlVisible|ctRowControls|ctRowCount|ctSetCurSel|ctSetData|ctSetHeaderTemplate|ctSetRowTemplate|ctSetValue|ctValue|curatorAddons|curatorCamera|curatorCameraArea|curatorCameraAreaCeiling|curatorCoef|curatorEditableObjects|curatorEditingArea|curatorEditingAreaType|curatorMouseOver|curatorPoints|curatorRegisteredObjects|curatorSelected|curatorWaypointCost|current3DENOperation|currentChannel|currentCommand|currentMagazine|currentMagazineDetail|currentMagazineDetailTurret|currentMagazineTurret|currentMuzzle|currentNamespace|currentTask|currentTasks|currentThrowable|currentVisionMode|currentWaypoint|currentWeapon|currentWeaponMode|currentWeaponTurret|currentZeroing|cursorObject|cursorTarget|customChat|customRadio|cutFadeOut|cutObj|cutRsc|cutText|damage|date|dateToNumber|daytime|deActivateKey|debriefingText|debugFSM|debugLog|deg|delete3DENEntities|deleteAt|deleteCenter|deleteCollection|deleteEditorObject|deleteGroup|deleteGroupWhenEmpty|deleteIdentity|deleteLocation|deleteMarker|deleteMarkerLocal|deleteRange|deleteResources|deleteSite|deleteStatus|deleteTeam|deleteVehicle|deleteVehicleCrew|deleteWaypoint|detach|detectedMines|diag_activeMissionFSMs|diag_activeScripts|diag_activeSQFScripts|diag_activeSQSScripts|diag_captureFrame|diag_captureFrameToFile|diag_captureSlowFrame|diag_codePerformance|diag_drawMode|diag_dynamicSimulationEnd|diag_enable|diag_enabled|diag_fps|diag_fpsMin|diag_frameNo|diag_lightNewLoad|diag_list|diag_log|diag_logSlowFrame|diag_mergeConfigFile|diag_recordTurretLimits|diag_setLightNew|diag_tickTime|diag_toggle|dialog|diarySubjectExists|didJIP|didJIPOwner|difficulty|difficultyEnabled|difficultyEnabledRTD|difficultyOption|direction|directSay|disableAI|disableCollisionWith|disableConversation|disableDebriefingStats|disableMapIndicators|disableNVGEquipment|disableRemoteSensors|disableSerialization|disableTIEquipment|disableUAVConnectability|disableUserInput|displayAddEventHandler|displayCtrl|displayNull|displayParent|displayRemoveAllEventHandlers|displayRemoveEventHandler|displaySetEventHandler|dissolveTeam|distance|distance2D|distanceSqr|distributionRegion|do3DENAction|doArtilleryFire|doFire|doFollow|doFSM|doGetOut|doMove|doorPhase|doStop|doSuppressiveFire|doTarget|doWatch|drawArrow|drawEllipse|drawIcon|drawIcon3D|drawLine|drawLine3D|drawLink|drawLocation|drawPolygon|drawRectangle|drawTriangle|driver|drop|dynamicSimulationDistance|dynamicSimulationDistanceCoef|dynamicSimulationEnabled|dynamicSimulationSystemEnabled|east|edit3DENMissionAttributes|editObject|editorSetEventHandler|effectiveCommander|emptyPositions|enableAI|enableAIFeature|enableAimPrecision|enableAttack|enableAudioFeature|enableAutoStartUpRTD|enableAutoTrimRTD|enableCamShake|enableCaustics|enableChannel|enableCollisionWith|enableCopilot|enableDebriefingStats|enableDiagLegend|enableDynamicSimulation|enableDynamicSimulationSystem|enableEndDialog|enableEngineArtillery|enableEnvironment|enableFatigue|enableGunLights|enableInfoPanelComponent|enableIRLasers|enableMimics|enablePersonTurret|enableRadio|enableReload|enableRopeAttach|enableSatNormalOnDetail|enableSaving|enableSentences|enableSimulation|enableSimulationGlobal|enableStamina|enableStressDamage|enableTeamSwitch|enableTraffic|enableUAVConnectability|enableUAVWaypoints|enableVehicleCargo|enableVehicleSensor|enableWeaponDisassembly|endl|endLoadingScreen|endMission|engineOn|enginesIsOnRTD|enginesPowerRTD|enginesRpmRTD|enginesTorqueRTD|entities|environmentEnabled|estimatedEndServerTime|estimatedTimeLeft|evalObjectArgument|everyBackpack|everyContainer|exec|execEditorScript|exp|expectedDestination|exportJIPMessages|eyeDirection|eyePos|face|faction|fadeMusic|fadeRadio|fadeSound|fadeSpeech|failMission|fillWeaponsFromPool|find|findCover|findDisplay|findEditorObject|findEmptyPosition|findEmptyPositionReady|findIf|findNearestEnemy|finishMissionInit|finite|fire|fireAtTarget|firstBackpack|flag|flagAnimationPhase|flagOwner|flagSide|flagTexture|fleeing|floor|flyInHeight|flyInHeightASL|fog|fogForecast|fogParams|forceAddUniform|forceAtPositionRTD|forcedMap|forceEnd|forceFlagTexture|forceFollowRoad|forceGeneratorRTD|forceMap|forceRespawn|forceSpeed|forceWalk|forceWeaponFire|forceWeatherChange|forgetTarget|format|formation|formationDirection|formationLeader|formationMembers|formationPosition|formationTask|formatText|formLeader|freeLook|fromEditor|fuel|fullCrew|gearIDCAmmoCount|gearSlotAmmoCount|gearSlotData|get3DENActionState|get3DENAttribute|get3DENCamera|get3DENConnections|get3DENEntity|get3DENEntityID|get3DENGrid|get3DENIconsVisible|get3DENLayerEntities|get3DENLinesVisible|get3DENMissionAttribute|get3DENMouseOver|get3DENSelected|getAimingCoef|getAllEnvSoundControllers|getAllHitPointsDamage|getAllOwnedMines|getAllSoundControllers|getAmmoCargo|getAnimAimPrecision|getAnimSpeedCoef|getArray|getArtilleryAmmo|getArtilleryComputerSettings|getArtilleryETA|getAssignedCuratorLogic|getAssignedCuratorUnit|getBackpackCargo|getBleedingRemaining|getBurningValue|getCameraViewDirection|getCargoIndex|getCenterOfMass|getClientState|getClientStateNumber|getCompatiblePylonMagazines|getConnectedUAV|getContainerMaxLoad|getCursorObjectParams|getCustomAimCoef|getDammage|getDescription|getDir|getDirVisual|getDLCAssetsUsage|getDLCAssetsUsageByName|getDLCs|getDLCUsageTime|getEditorCamera|getEditorMode|getEditorObjectScope|getElevationOffset|getEngineTargetRpmRTD|getEnvSoundController|getFatigue|getFieldManualStartPage|getForcedFlagTexture|getFriend|getFSMVariable|getFuelCargo|getGroupIcon|getGroupIconParams|getGroupIcons|getHideFrom|getHit|getHitIndex|getHitPointDamage|getItemCargo|getMagazineCargo|getMarkerColor|getMarkerPos|getMarkerSize|getMarkerType|getMass|getMissionConfig|getMissionConfigValue|getMissionDLCs|getMissionLayerEntities|getMissionLayers|getModelInfo|getMousePosition|getMusicPlayedTime|getNumber|getObjectArgument|getObjectChildren|getObjectDLC|getObjectMaterials|getObjectProxy|getObjectTextures|getObjectType|getObjectViewDistance|getOxygenRemaining|getPersonUsedDLCs|getPilotCameraDirection|getPilotCameraPosition|getPilotCameraRotation|getPilotCameraTarget|getPlateNumber|getPlayerChannel|getPlayerScores|getPlayerUID|getPlayerUIDOld|getPos|getPosASL|getPosASLVisual|getPosASLW|getPosATL|getPosATLVisual|getPosVisual|getPosWorld|getPylonMagazines|getRelDir|getRelPos|getRemoteSensorsDisabled|getRepairCargo|getResolution|getRotorBrakeRTD|getShadowDistance|getShotParents|getSlingLoad|getSoundController|getSoundControllerResult|getSpeed|getStamina|getStatValue|getSuppression|getTerrainGrid|getTerrainHeightASL|getText|getTotalDLCUsageTime|getTrimOffsetRTD|getUnitLoadout|getUnitTrait|getUserMFDText|getUserMFDValue|getVariable|getVehicleCargo|getWeaponCargo|getWeaponSway|getWingsOrientationRTD|getWingsPositionRTD|getWPPos|glanceAt|globalChat|globalRadio|goggles|group|groupChat|groupFromNetId|groupIconSelectable|groupIconsVisible|groupId|groupOwner|groupRadio|groupSelectedUnits|groupSelectUnit|grpNull|gunner|gusts|halt|handgunItems|handgunMagazine|handgunWeapon|handsHit|hasInterface|hasPilotCamera|hasWeapon|hcAllGroups|hcGroupParams|hcLeader|hcRemoveAllGroups|hcRemoveGroup|hcSelected|hcSelectGroup|hcSetGroup|hcShowBar|hcShownBar|headgear|hideBody|hideObject|hideObjectGlobal|hideSelection|hint|hintC|hintCadet|hintSilent|hmd|hostMission|htmlLoad|HUDMovementLevels|humidity|image|importAllGroups|importance|in|inArea|inAreaArray|incapacitatedState|independent|inflame|inflamed|infoPanel|infoPanelComponentEnabled|infoPanelComponents|infoPanels|inGameUISetEventHandler|inheritsFrom|initAmbientLife|inPolygon|inputAction|inRangeOfArtillery|insertEditorObject|intersect|is3DEN|is3DENMultiplayer|isAbleToBreathe|isAgent|isAimPrecisionEnabled|isArray|isAutoHoverOn|isAutonomous|isAutoStartUpEnabledRTD|isAutotest|isAutoTrimOnRTD|isBleeding|isBurning|isClass|isCollisionLightOn|isCopilotEnabled|isDamageAllowed|isDedicated|isDLCAvailable|isEngineOn|isEqualTo|isEqualType|isEqualTypeAll|isEqualTypeAny|isEqualTypeArray|isEqualTypeParams|isFilePatchingEnabled|isFlashlightOn|isFlatEmpty|isForcedWalk|isFormationLeader|isGroupDeletedWhenEmpty|isHidden|isInRemainsCollector|isInstructorFigureEnabled|isIRLaserOn|isKeyActive|isKindOf|isLaserOn|isLightOn|isLocalized|isManualFire|isMarkedForCollection|isMultiplayer|isMultiplayerSolo|isNil|isNull|isNumber|isObjectHidden|isObjectRTD|isOnRoad|isPipEnabled|isPlayer|isRealTime|isRemoteExecuted|isRemoteExecutedJIP|isServer|isShowing3DIcons|isSimpleObject|isSprintAllowed|isStaminaEnabled|isSteamMission|isStreamFriendlyUIEnabled|isStressDamageEnabled|isText|isTouchingGround|isTurnedOut|isTutHintsEnabled|isUAVConnectable|isUAVConnected|isUIContext|isUniformAllowed|isVehicleCargo|isVehicleRadarOn|isVehicleSensorEnabled|isWalking|isWeaponDeployed|isWeaponRested|itemCargo|items|itemsWithMagazines|join|joinAs|joinAsSilent|joinSilent|joinString|kbAddDatabase|kbAddDatabaseTargets|kbAddTopic|kbHasTopic|kbReact|kbRemoveTopic|kbTell|kbWasSaid|keyImage|keyName|knowsAbout|land|landAt|landResult|language|laserTarget|lbAdd|lbClear|lbColor|lbColorRight|lbCurSel|lbData|lbDelete|lbIsSelected|lbPicture|lbPictureRight|lbSelection|lbSetColor|lbSetColorRight|lbSetCurSel|lbSetData|lbSetPicture|lbSetPictureColor|lbSetPictureColorDisabled|lbSetPictureColorSelected|lbSetPictureRight|lbSetPictureRightColor|lbSetPictureRightColorDisabled|lbSetPictureRightColorSelected|lbSetSelectColor|lbSetSelectColorRight|lbSetSelected|lbSetText|lbSetTextRight|lbSetTooltip|lbSetValue|lbSize|lbSort|lbSortByValue|lbText|lbTextRight|lbValue|leader|leaderboardDeInit|leaderboardGetRows|leaderboardInit|leaderboardRequestRowsFriends|leaderboardRequestRowsGlobal|leaderboardRequestRowsGlobalAroundUser|leaderboardsRequestUploadScore|leaderboardsRequestUploadScoreKeepBest|leaderboardState|leaveVehicle|libraryCredits|libraryDisclaimers|lifeState|lightAttachObject|lightDetachObject|lightIsOn|lightnings|limitSpeed|linearConversion|lineBreak|lineIntersects|lineIntersectsObjs|lineIntersectsSurfaces|lineIntersectsWith|linkItem|list|listObjects|listRemoteTargets|listVehicleSensors|ln|lnbAddArray|lnbAddColumn|lnbAddRow|lnbClear|lnbColor|lnbColorRight|lnbCurSelRow|lnbData|lnbDeleteColumn|lnbDeleteRow|lnbGetColumnsPosition|lnbPicture|lnbPictureRight|lnbSetColor|lnbSetColorRight|lnbSetColumnsPos|lnbSetCurSelRow|lnbSetData|lnbSetPicture|lnbSetPictureColor|lnbSetPictureColorRight|lnbSetPictureColorSelected|lnbSetPictureColorSelectedRight|lnbSetPictureRight|lnbSetText|lnbSetTextRight|lnbSetValue|lnbSize|lnbSort|lnbSortByValue|lnbText|lnbTextRight|lnbValue|load|loadAbs|loadBackpack|loadFile|loadGame|loadIdentity|loadMagazine|loadOverlay|loadStatus|loadUniform|loadVest|local|localize|locationNull|locationPosition|lock|lockCameraTo|lockCargo|lockDriver|locked|lockedCargo|lockedDriver|lockedTurret|lockIdentity|lockTurret|lockWP|log|logEntities|logNetwork|logNetworkTerminate|lookAt|lookAtPos|magazineCargo|magazines|magazinesAllTurrets|magazinesAmmo|magazinesAmmoCargo|magazinesAmmoFull|magazinesDetail|magazinesDetailBackpack|magazinesDetailUniform|magazinesDetailVest|magazinesTurret|magazineTurretAmmo|mapAnimAdd|mapAnimClear|mapAnimCommit|mapAnimDone|mapCenterOnCamera|mapGridPosition|markAsFinishedOnSteam|markerAlpha|markerBrush|markerColor|markerDir|markerPos|markerShape|markerSize|markerText|markerType|max|members|menuAction|menuAdd|menuChecked|menuClear|menuCollapse|menuData|menuDelete|menuEnable|menuEnabled|menuExpand|menuHover|menuPicture|menuSetAction|menuSetCheck|menuSetData|menuSetPicture|menuSetValue|menuShortcut|menuShortcutText|menuSize|menuSort|menuText|menuURL|menuValue|min|mineActive|mineDetectedBy|missionConfigFile|missionDifficulty|missionName|missionNamespace|missionStart|missionVersion|modelToWorld|modelToWorldVisual|modelToWorldVisualWorld|modelToWorldWorld|modParams|moonIntensity|moonPhase|morale|move|move3DENCamera|moveInAny|moveInCargo|moveInCommander|moveInDriver|moveInGunner|moveInTurret|moveObjectToEnd|moveOut|moveTime|moveTo|moveToCompleted|moveToFailed|musicVolume|name|nameSound|nearEntities|nearestBuilding|nearestLocation|nearestLocations|nearestLocationWithDubbing|nearestObject|nearestObjects|nearestTerrainObjects|nearObjects|nearObjectsReady|nearRoads|nearSupplies|nearTargets|needReload|netId|netObjNull|newOverlay|nextMenuItemIndex|nextWeatherChange|nMenuItems|numberOfEnginesRTD|numberToDate|objectCurators|objectFromNetId|objectParent|objNull|objStatus|onBriefingGear|onBriefingGroup|onBriefingNotes|onBriefingPlan|onBriefingTeamSwitch|onCommandModeChanged|onDoubleClick|onEachFrame|onGroupIconClick|onGroupIconOverEnter|onGroupIconOverLeave|onHCGroupSelectionChanged|onMapSingleClick|onPlayerConnected|onPlayerDisconnected|onPreloadFinished|onPreloadStarted|onShowNewObject|onTeamSwitch|openCuratorInterface|openDLCPage|openDSInterface|openMap|openSteamApp|openYoutubeVideo|opfor|orderGetIn|overcast|overcastForecast|owner|param|params|parseNumber|parseSimpleArray|parseText|parsingNamespace|particlesQuality|pi|pickWeaponPool|pitch|pixelGrid|pixelGridBase|pixelGridNoUIScale|pixelH|pixelW|playableSlotsNumber|playableUnits|playAction|playActionNow|player|playerRespawnTime|playerSide|playersNumber|playGesture|playMission|playMove|playMoveNow|playMusic|playScriptedMission|playSound|playSound3D|position|positionCameraToWorld|posScreenToWorld|posWorldToScreen|ppEffectAdjust|ppEffectCommit|ppEffectCommitted|ppEffectCreate|ppEffectDestroy|ppEffectEnable|ppEffectEnabled|ppEffectForceInNVG|precision|preloadCamera|preloadObject|preloadSound|preloadTitleObj|preloadTitleRsc|primaryWeapon|primaryWeaponItems|primaryWeaponMagazine|priority|processDiaryLink|processInitCommands|productVersion|profileName|profileNamespace|profileNameSteam|progressLoadingScreen|progressPosition|progressSetPosition|publicVariable|publicVariableClient|publicVariableServer|pushBack|pushBackUnique|putWeaponPool|queryItemsPool|queryMagazinePool|queryWeaponPool|rad|radioChannelAdd|radioChannelCreate|radioChannelRemove|radioChannelSetCallSign|radioChannelSetLabel|radioVolume|rain|rainbow|random|rank|rankId|rating|rectangular|registeredTasks|registerTask|reload|reloadEnabled|remoteControl|remoteExec|remoteExecCall|remoteExecutedOwner|remove3DENConnection|remove3DENEventHandler|remove3DENLayer|removeAction|removeAll3DENEventHandlers|removeAllActions|removeAllAssignedItems|removeAllContainers|removeAllCuratorAddons|removeAllCuratorCameraAreas|removeAllCuratorEditingAreas|removeAllEventHandlers|removeAllHandgunItems|removeAllItems|removeAllItemsWithMagazines|removeAllMissionEventHandlers|removeAllMPEventHandlers|removeAllMusicEventHandlers|removeAllOwnedMines|removeAllPrimaryWeaponItems|removeAllWeapons|removeBackpack|removeBackpackGlobal|removeCuratorAddons|removeCuratorCameraArea|removeCuratorEditableObjects|removeCuratorEditingArea|removeDrawIcon|removeDrawLinks|removeEventHandler|removeFromRemainsCollector|removeGoggles|removeGroupIcon|removeHandgunItem|removeHeadgear|removeItem|removeItemFromBackpack|removeItemFromUniform|removeItemFromVest|removeItems|removeMagazine|removeMagazineGlobal|removeMagazines|removeMagazinesTurret|removeMagazineTurret|removeMenuItem|removeMissionEventHandler|removeMPEventHandler|removeMusicEventHandler|removeOwnedMine|removePrimaryWeaponItem|removeSecondaryWeaponItem|removeSimpleTask|removeSwitchableUnit|removeTeamMember|removeUniform|removeVest|removeWeapon|removeWeaponAttachmentCargo|removeWeaponCargo|removeWeaponGlobal|removeWeaponTurret|reportRemoteTarget|requiredVersion|resetCamShake|resetSubgroupDirection|resistance|resize|resources|respawnVehicle|restartEditorCamera|reveal|revealMine|reverse|reversedMouseY|roadAt|roadsConnectedTo|roleDescription|ropeAttachedObjects|ropeAttachedTo|ropeAttachEnabled|ropeAttachTo|ropeCreate|ropeCut|ropeDestroy|ropeDetach|ropeEndPosition|ropeLength|ropes|ropeUnwind|ropeUnwound|rotorsForcesRTD|rotorsRpmRTD|round|runInitScript|safeZoneH|safeZoneW|safeZoneWAbs|safeZoneX|safeZoneXAbs|safeZoneY|save3DENInventory|saveGame|saveIdentity|saveJoysticks|saveOverlay|saveProfileNamespace|saveStatus|saveVar|savingEnabled|say|say2D|say3D|score|scoreSide|screenshot|screenToWorld|scriptDone|scriptName|scriptNull|scudState|secondaryWeapon|secondaryWeaponItems|secondaryWeaponMagazine|select|selectBestPlaces|selectDiarySubject|selectedEditorObjects|selectEditorObject|selectionNames|selectionPosition|selectLeader|selectMax|selectMin|selectNoPlayer|selectPlayer|selectRandom|selectRandomWeighted|selectWeapon|selectWeaponTurret|sendAUMessage|sendSimpleCommand|sendTask|sendTaskResult|sendUDPMessage|serverCommand|serverCommandAvailable|serverCommandExecutable|serverName|serverTime|set|set3DENAttribute|set3DENAttributes|set3DENGrid|set3DENIconsVisible|set3DENLayer|set3DENLinesVisible|set3DENLogicType|set3DENMissionAttribute|set3DENMissionAttributes|set3DENModelsVisible|set3DENObjectType|set3DENSelected|setAccTime|setActualCollectiveRTD|setAirplaneThrottle|setAirportSide|setAmmo|setAmmoCargo|setAmmoOnPylon|setAnimSpeedCoef|setAperture|setApertureNew|setArmoryPoints|setAttributes|setAutonomous|setBehaviour|setBleedingRemaining|setBrakesRTD|setCameraInterest|setCamShakeDefParams|setCamShakeParams|setCamUseTI|setCaptive|setCenterOfMass|setCollisionLight|setCombatMode|setCompassOscillation|setConvoySeparation|setCuratorCameraAreaCeiling|setCuratorCoef|setCuratorEditingAreaType|setCuratorWaypointCost|setCurrentChannel|setCurrentTask|setCurrentWaypoint|setCustomAimCoef|setCustomWeightRTD|setDamage|setDammage|setDate|setDebriefingText|setDefaultCamera|setDestination|setDetailMapBlendPars|setDir|setDirection|setDrawIcon|setDriveOnPath|setDropInterval|setDynamicSimulationDistance|setDynamicSimulationDistanceCoef|setEditorMode|setEditorObjectScope|setEffectCondition|setEngineRpmRTD|setFace|setFaceAnimation|setFatigue|setFeatureType|setFlagAnimationPhase|setFlagOwner|setFlagSide|setFlagTexture|setFog|setForceGeneratorRTD|setFormation|setFormationTask|setFormDir|setFriend|setFromEditor|setFSMVariable|setFuel|setFuelCargo|setGroupIcon|setGroupIconParams|setGroupIconsSelectable|setGroupIconsVisible|setGroupId|setGroupIdGlobal|setGroupOwner|setGusts|setHideBehind|setHit|setHitIndex|setHitPointDamage|setHorizonParallaxCoef|setHUDMovementLevels|setIdentity|setImportance|setInfoPanel|setLeader|setLightAmbient|setLightAttenuation|setLightBrightness|setLightColor|setLightDayLight|setLightFlareMaxDistance|setLightFlareSize|setLightIntensity|setLightnings|setLightUseFlare|setLocalWindParams|setMagazineTurretAmmo|setMarkerAlpha|setMarkerAlphaLocal|setMarkerBrush|setMarkerBrushLocal|setMarkerColor|setMarkerColorLocal|setMarkerDir|setMarkerDirLocal|setMarkerPos|setMarkerPosLocal|setMarkerShape|setMarkerShapeLocal|setMarkerSize|setMarkerSizeLocal|setMarkerText|setMarkerTextLocal|setMarkerType|setMarkerTypeLocal|setMass|setMimic|setMousePosition|setMusicEffect|setMusicEventHandler|setName|setNameSound|setObjectArguments|setObjectMaterial|setObjectMaterialGlobal|setObjectProxy|setObjectTexture|setObjectTextureGlobal|setObjectViewDistance|setOvercast|setOwner|setOxygenRemaining|setParticleCircle|setParticleClass|setParticleFire|setParticleParams|setParticleRandom|setPilotCameraDirection|setPilotCameraRotation|setPilotCameraTarget|setPilotLight|setPiPEffect|setPitch|setPlateNumber|setPlayable|setPlayerRespawnTime|setPos|setPosASL|setPosASL2|setPosASLW|setPosATL|setPosition|setPosWorld|setPylonLoadOut|setPylonsPriority|setRadioMsg|setRain|setRainbow|setRandomLip|setRank|setRectangular|setRepairCargo|setRotorBrakeRTD|setShadowDistance|setShotParents|setSide|setSimpleTaskAlwaysVisible|setSimpleTaskCustomData|setSimpleTaskDescription|setSimpleTaskDestination|setSimpleTaskTarget|setSimpleTaskType|setSimulWeatherLayers|setSize|setSkill|setSlingLoad|setSoundEffect|setSpeaker|setSpeech|setSpeedMode|setStamina|setStaminaScheme|setStatValue|setSuppression|setSystemOfUnits|setTargetAge|setTaskMarkerOffset|setTaskResult|setTaskState|setTerrainGrid|setText|setTimeMultiplier|setTitleEffect|setToneMapping|setToneMappingParams|setTrafficDensity|setTrafficDistance|setTrafficGap|setTrafficSpeed|setTriggerActivation|setTriggerArea|setTriggerStatements|setTriggerText|setTriggerTimeout|setTriggerType|setType|setUnconscious|setUnitAbility|setUnitLoadout|setUnitPos|setUnitPosWeak|setUnitRank|setUnitRecoilCoefficient|setUnitTrait|setUnloadInCombat|setUserActionText|setUserMFDText|setUserMFDValue|setVariable|setVectorDir|setVectorDirAndUp|setVectorUp|setVehicleAmmo|setVehicleAmmoDef|setVehicleArmor|setVehicleCargo|setVehicleId|setVehicleInit|setVehicleLock|setVehiclePosition|setVehicleRadar|setVehicleReceiveRemoteTargets|setVehicleReportOwnPosition|setVehicleReportRemoteTargets|setVehicleTIPars|setVehicleVarName|setVelocity|setVelocityModelSpace|setVelocityTransformation|setViewDistance|setVisibleIfTreeCollapsed|setWantedRpmRTD|setWaves|setWaypointBehaviour|setWaypointCombatMode|setWaypointCompletionRadius|setWaypointDescription|setWaypointForceBehaviour|setWaypointFormation|setWaypointHousePosition|setWaypointLoiterRadius|setWaypointLoiterType|setWaypointName|setWaypointPosition|setWaypointScript|setWaypointSpeed|setWaypointStatements|setWaypointTimeout|setWaypointType|setWaypointVisible|setWeaponReloadingTime|setWind|setWindDir|setWindForce|setWindStr|setWingForceScaleRTD|setWPPos|show3DIcons|showChat|showCinemaBorder|showCommandingMenu|showCompass|showCuratorCompass|showGPS|showHUD|showLegend|showMap|shownArtilleryComputer|shownChat|shownCompass|shownCuratorCompass|showNewEditorObject|shownGPS|shownHUD|shownMap|shownPad|shownRadio|shownScoretable|shownUAVFeed|shownWarrant|shownWatch|showPad|showRadio|showScoretable|showSubtitles|showUAVFeed|showWarrant|showWatch|showWaypoint|showWaypoints|side|sideAmbientLife|sideChat|sideEmpty|sideEnemy|sideFriendly|sideLogic|sideRadio|sideUnknown|simpleTasks|simulationEnabled|simulCloudDensity|simulCloudOcclusion|simulInClouds|simulWeatherSync|sin|size|sizeOf|skill|skillFinal|skipTime|sleep|sliderPosition|sliderRange|sliderSetPosition|sliderSetRange|sliderSetSpeed|sliderSpeed|slingLoadAssistantShown|soldierMagazines|someAmmo|sort|soundVolume|speaker|speed|speedMode|splitString|sqrt|squadParams|stance|startLoadingScreen|stop|stopEngineRTD|stopped|str|sunOrMoon|supportInfo|suppressFor|surfaceIsWater|surfaceNormal|surfaceType|swimInDepth|switchableUnits|switchAction|switchCamera|switchGesture|switchLight|switchMove|synchronizedObjects|synchronizedTriggers|synchronizedWaypoints|synchronizeObjectsAdd|synchronizeObjectsRemove|synchronizeTrigger|synchronizeWaypoint|systemChat|systemOfUnits|tan|targetKnowledge|targets|targetsAggregate|targetsQuery|taskAlwaysVisible|taskChildren|taskCompleted|taskCustomData|taskDescription|taskDestination|taskHint|taskMarkerOffset|taskNull|taskParent|taskResult|taskState|taskType|teamMember|teamMemberNull|teamName|teams|teamSwitch|teamSwitchEnabled|teamType|terminate|terrainIntersect|terrainIntersectASL|terrainIntersectAtASL|text|textLog|textLogFormat|tg|time|timeMultiplier|titleCut|titleFadeOut|titleObj|titleRsc|titleText|toArray|toFixed|toLower|toString|toUpper|triggerActivated|triggerActivation|triggerArea|triggerAttachedVehicle|triggerAttachObject|triggerAttachVehicle|triggerDynamicSimulation|triggerStatements|triggerText|triggerTimeout|triggerTimeoutCurrent|triggerType|turretLocal|turretOwner|turretUnit|tvAdd|tvClear|tvCollapse|tvCollapseAll|tvCount|tvCurSel|tvData|tvDelete|tvExpand|tvExpandAll|tvPicture|tvPictureRight|tvSetColor|tvSetCurSel|tvSetData|tvSetPicture|tvSetPictureColor|tvSetPictureColorDisabled|tvSetPictureColorSelected|tvSetPictureRight|tvSetPictureRightColor|tvSetPictureRightColorDisabled|tvSetPictureRightColorSelected|tvSetSelectColor|tvSetText|tvSetTooltip|tvSetValue|tvSort|tvSortByValue|tvText|tvTooltip|tvValue|type|typeName|typeOf|UAVControl|uiNamespace|uiSleep|unassignCurator|unassignItem|unassignTeam|unassignVehicle|underwater|uniform|uniformContainer|uniformItems|uniformMagazines|unitAddons|unitAimPosition|unitAimPositionVisual|unitBackpack|unitIsUAV|unitPos|unitReady|unitRecoilCoefficient|units|unitsBelowHeight|unlinkItem|unlockAchievement|unregisterTask|updateDrawIcon|updateMenuItem|updateObjectTree|useAIOperMapObstructionTest|useAISteeringComponent|useAudioTimeForMoves|userInputDisabled|vectorAdd|vectorCos|vectorCrossProduct|vectorDiff|vectorDir|vectorDirVisual|vectorDistance|vectorDistanceSqr|vectorDotProduct|vectorFromTo|vectorMagnitude|vectorMagnitudeSqr|vectorModelToWorld|vectorModelToWorldVisual|vectorMultiply|vectorNormalized|vectorUp|vectorUpVisual|vectorWorldToModel|vectorWorldToModelVisual|vehicle|vehicleCargoEnabled|vehicleChat|vehicleRadio|vehicleReceiveRemoteTargets|vehicleReportOwnPosition|vehicleReportRemoteTargets|vehicles|vehicleVarName|velocity|velocityModelSpace|verifySignature|vest|vestContainer|vestItems|vestMagazines|viewDistance|visibleCompass|visibleGPS|visibleMap|visiblePosition|visiblePositionASL|visibleScoretable|visibleWatch|waitUntil|waves|waypointAttachedObject|waypointAttachedVehicle|waypointAttachObject|waypointAttachVehicle|waypointBehaviour|waypointCombatMode|waypointCompletionRadius|waypointDescription|waypointForceBehaviour|waypointFormation|waypointHousePosition|waypointLoiterRadius|waypointLoiterType|waypointName|waypointPosition|waypoints|waypointScript|waypointsEnabledUAV|waypointShow|waypointSpeed|waypointStatements|waypointTimeout|waypointTimeoutCurrent|waypointType|waypointVisible|weaponAccessories|weaponAccessoriesCargo|weaponCargo|weaponDirection|weaponInertia|weaponLowered|weapons|weaponsItems|weaponsItemsCargo|weaponState|weaponsTurret|weightRTD|west|WFSideText|wind|windDir|windRTD|windStr|wingsForcesRTD|worldName|worldSize|worldToModel|worldToModelVisual|worldToScreen)\b/i,
	    number:
	      /(?:\$|\b0x)[\da-f]+\b|(?:\B\.\d+|\b\d+(?:\.\d+)?)(?:e[+-]?\d+)?\b/i,
	    operator: /##|>>|&&|\|\||[!=<>]=?|[-+*/%#^]|\b(?:and|mod|not|or)\b/i,
	    'magic-variable': {
	      pattern:
	        /\b(?:this|thisList|thisTrigger|_exception|_fnc_scriptName|_fnc_scriptNameParent|_forEachIndex|_this|_thisEventHandler|_thisFSM|_thisScript|_x)\b/i,
	      alias: 'keyword'
	    },
	    constant: /\bDIK(?:_[a-z\d]+)+\b/i
	  });
	  Prism.languages.insertBefore('sqf', 'string', {
	    macro: {
	      pattern: /(^[ \t]*)#[a-z](?:[^\r\n\\]|\\(?:\r\n|[\s\S]))*/im,
	      lookbehind: true,
	      greedy: true,
	      alias: 'property',
	      inside: {
	        directive: {
	          pattern: /#[a-z]+\b/i,
	          alias: 'keyword'
	        },
	        comment: Prism.languages.sqf.comment
	      }
	    }
	  });
	  delete Prism.languages.sqf['class-name'];
	}

	// @ts-nocheck
	squirrel.displayName = 'squirrel';
	squirrel.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function squirrel(Prism) {
	  Prism.register(clike);
	  Prism.languages.squirrel = Prism.languages.extend('clike', {
	    comment: [
	      Prism.languages.clike['comment'][0],
	      {
	        pattern: /(^|[^\\:])(?:\/\/|#).*/,
	        lookbehind: true,
	        greedy: true
	      }
	    ],
	    string: {
	      pattern: /(^|[^\\"'@])(?:@"(?:[^"]|"")*"(?!")|"(?:[^\\\r\n"]|\\.)*")/,
	      lookbehind: true,
	      greedy: true
	    },
	    'class-name': {
	      pattern: /(\b(?:class|enum|extends|instanceof)\s+)\w+(?:\.\w+)*/,
	      lookbehind: true,
	      inside: {
	        punctuation: /\./
	      }
	    },
	    keyword:
	      /\b(?:__FILE__|__LINE__|base|break|case|catch|class|clone|const|constructor|continue|default|delete|else|enum|extends|for|foreach|function|if|in|instanceof|local|null|resume|return|static|switch|this|throw|try|typeof|while|yield)\b/,
	    number: /\b(?:0x[0-9a-fA-F]+|\d+(?:\.(?:\d+|[eE][+-]?\d+))?)\b/,
	    operator: /\+\+|--|<=>|<[-<]|>>>?|&&?|\|\|?|[-+*/%!=<>]=?|[~^]|::?/,
	    punctuation: /[(){}\[\],;.]/
	  });
	  Prism.languages.insertBefore('squirrel', 'string', {
	    char: {
	      pattern: /(^|[^\\"'])'(?:[^\\']|\\(?:[xuU][0-9a-fA-F]{0,8}|[\s\S]))'/,
	      lookbehind: true,
	      greedy: true
	    }
	  });
	  Prism.languages.insertBefore('squirrel', 'operator', {
	    'attribute-punctuation': {
	      pattern: /<\/|\/>/,
	      alias: 'important'
	    },
	    lambda: {
	      pattern: /@(?=\()/,
	      alias: 'operator'
	    }
	  });
	}

	// @ts-nocheck
	stan.displayName = 'stan';
	stan.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function stan(Prism) {
	(function (Prism) {
	    // https://mc-stan.org/docs/2_28/reference-manual/bnf-grammars.html

	    var higherOrderFunctions =
	      /\b(?:algebra_solver|algebra_solver_newton|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect|ode_(?:adams|bdf|ckrk|rk45)(?:_tol)?|ode_adjoint_tol_ctl|reduce_sum|reduce_sum_static)\b/;
	    Prism.languages.stan = {
	      comment: /\/\/.*|\/\*[\s\S]*?\*\/|#(?!include).*/,
	      string: {
	        // String literals can contain spaces and any printable ASCII characters except for " and \
	        // https://mc-stan.org/docs/2_24/reference-manual/print-statements-section.html#string-literals
	        pattern: /"[\x20\x21\x23-\x5B\x5D-\x7E]*"/,
	        greedy: true
	      },
	      directive: {
	        pattern: /^([ \t]*)#include\b.*/m,
	        lookbehind: true,
	        alias: 'property'
	      },
	      'function-arg': {
	        pattern: RegExp(
	          '(' +
	            higherOrderFunctions.source +
	            /\s*\(\s*/.source +
	            ')' +
	            /[a-zA-Z]\w*/.source
	        ),
	        lookbehind: true,
	        alias: 'function'
	      },
	      constraint: {
	        pattern: /(\b(?:int|matrix|real|row_vector|vector)\s*)<[^<>]*>/,
	        lookbehind: true,
	        inside: {
	          expression: {
	            pattern: /(=\s*)\S(?:\S|\s+(?!\s))*?(?=\s*(?:>$|,\s*\w+\s*=))/,
	            lookbehind: true,
	            inside: null // see below
	          },

	          property: /\b[a-z]\w*(?=\s*=)/i,
	          operator: /=/,
	          punctuation: /^<|>$|,/
	        }
	      },
	      keyword: [
	        {
	          pattern:
	            /\bdata(?=\s*\{)|\b(?:functions|generated|model|parameters|quantities|transformed)\b/,
	          alias: 'program-block'
	        },
	        /\b(?:array|break|cholesky_factor_corr|cholesky_factor_cov|complex|continue|corr_matrix|cov_matrix|data|else|for|if|in|increment_log_prob|int|matrix|ordered|positive_ordered|print|real|reject|return|row_vector|simplex|target|unit_vector|vector|void|while)\b/,
	        // these are functions that are known to take another function as their first argument.
	        higherOrderFunctions
	      ],
	      function: /\b[a-z]\w*(?=\s*\()/i,
	      number:
	        /(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)(?:E[+-]?\d+(?:_\d+)*)?i?(?!\w)/i,
	      boolean: /\b(?:false|true)\b/,
	      operator: /<-|\.[*/]=?|\|\|?|&&|[!=<>+\-*/]=?|['^%~?:]/,
	      punctuation: /[()\[\]{},;]/
	    };
	    Prism.languages.stan.constraint.inside.expression.inside =
	      Prism.languages.stan;
	  })(Prism);
	}

	// @ts-nocheck
	stata.displayName = 'stata';
	stata.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function stata(Prism) {
	  Prism.register(java);
	  Prism.register(mata);
	  Prism.register(python);
	  // https://www.stata.com/manuals/u.pdf
	  // https://www.stata.com/manuals/p.pdf

	  Prism.languages.stata = {
	    comment: [
	      {
	        pattern: /(^[ \t]*)\*.*/m,
	        lookbehind: true,
	        greedy: true
	      },
	      {
	        pattern: /(^|\s)\/\/.*|\/\*[\s\S]*?\*\//,
	        lookbehind: true,
	        greedy: true
	      }
	    ],
	    'string-literal': {
	      pattern: /"[^"\r\n]*"|[‘`']".*?"[’`']/,
	      greedy: true,
	      inside: {
	        interpolation: {
	          pattern: /\$\{[^{}]*\}|[‘`']\w[^’`'\r\n]*[’`']/,
	          inside: {
	            punctuation: /^\$\{|\}$/,
	            expression: {
	              pattern: /[\s\S]+/,
	              inside: null // see below
	            }
	          }
	        },

	        string: /[\s\S]+/
	      }
	    },
	    mata: {
	      pattern: /(^[ \t]*mata[ \t]*:)[\s\S]+?(?=^end\b)/m,
	      lookbehind: true,
	      greedy: true,
	      alias: 'language-mata',
	      inside: Prism.languages.mata
	    },
	    java: {
	      pattern: /(^[ \t]*java[ \t]*:)[\s\S]+?(?=^end\b)/m,
	      lookbehind: true,
	      greedy: true,
	      alias: 'language-java',
	      inside: Prism.languages.java
	    },
	    python: {
	      pattern: /(^[ \t]*python[ \t]*:)[\s\S]+?(?=^end\b)/m,
	      lookbehind: true,
	      greedy: true,
	      alias: 'language-python',
	      inside: Prism.languages.python
	    },
	    command: {
	      pattern:
	        /(^[ \t]*(?:\.[ \t]+)?(?:(?:bayes|bootstrap|by|bysort|capture|collect|fmm|fp|frame|jackknife|mfp|mi|nestreg|noisily|permute|quietly|rolling|simulate|statsby|stepwise|svy|version|xi)\b[^:\r\n]*:[ \t]*|(?:capture|noisily|quietly|version)[ \t]+)?)[a-zA-Z]\w*/m,
	      lookbehind: true,
	      greedy: true,
	      alias: 'keyword'
	    },
	    variable: /\$\w+|[‘`']\w[^’`'\r\n]*[’`']/,
	    keyword:
	      /\b(?:bayes|bootstrap|by|bysort|capture|clear|collect|fmm|fp|frame|if|in|jackknife|mi[ \t]+estimate|mfp|nestreg|noisily|of|permute|quietly|rolling|simulate|sort|statsby|stepwise|svy|varlist|version|xi)\b/,
	    boolean: /\b(?:off|on)\b/,
	    number: /\b\d+(?:\.\d+)?\b|\B\.\d+/,
	    function: /\b[a-z_]\w*(?=\()/i,
	    operator: /\+\+|--|##?|[<>!=~]=?|[+\-*^&|/]/,
	    punctuation: /[(){}[\],:]/
	  };
	  Prism.languages.stata[
	    'string-literal'
	  ].inside.interpolation.inside.expression.inside = Prism.languages.stata;
	}

	// @ts-nocheck
	iecst.displayName = 'iecst';
	iecst.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function iecst(Prism) {
	  Prism.languages.iecst = {
	    comment: [
	      {
	        pattern:
	          /(^|[^\\])(?:\/\*[\s\S]*?(?:\*\/|$)|\(\*[\s\S]*?(?:\*\)|$)|\{[\s\S]*?(?:\}|$))/,
	        lookbehind: true,
	        greedy: true
	      },
	      {
	        pattern: /(^|[^\\:])\/\/.*/,
	        lookbehind: true,
	        greedy: true
	      }
	    ],
	    string: {
	      pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
	      greedy: true
	    },
	    keyword: [
	      /\b(?:END_)?(?:PROGRAM|CONFIGURATION|INTERFACE|FUNCTION_BLOCK|FUNCTION|ACTION|TRANSITION|TYPE|STRUCT|(?:INITIAL_)?STEP|NAMESPACE|LIBRARY|CHANNEL|FOLDER|RESOURCE|VAR_(?:ACCESS|CONFIG|EXTERNAL|GLOBAL|INPUT|IN_OUT|OUTPUT|TEMP)|VAR|METHOD|PROPERTY)\b/i,
	      /\b(?:AT|BY|(?:END_)?(?:CASE|FOR|IF|REPEAT|WHILE)|CONSTANT|CONTINUE|DO|ELSE|ELSIF|EXIT|EXTENDS|FROM|GET|GOTO|IMPLEMENTS|JMP|NON_RETAIN|OF|PRIVATE|PROTECTED|PUBLIC|RETAIN|RETURN|SET|TASK|THEN|TO|UNTIL|USING|WITH|__CATCH|__ENDTRY|__FINALLY|__TRY)\b/
	    ],
	    'class-name':
	      /\b(?:ANY|ARRAY|BOOL|BYTE|U?(?:D|L|S)?INT|(?:D|L)?WORD|DATE(?:_AND_TIME)?|DT|L?REAL|POINTER|STRING|TIME(?:_OF_DAY)?|TOD)\b/,
	    address: {
	      pattern: /%[IQM][XBWDL][\d.]*|%[IQ][\d.]*/,
	      alias: 'symbol'
	    },
	    number:
	      /\b(?:16#[\da-f]+|2#[01_]+|0x[\da-f]+)\b|\b(?:D|DT|T|TOD)#[\d_shmd:]*|\b[A-Z]*#[\d.,_]*|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
	    boolean: /\b(?:FALSE|NULL|TRUE)\b/,
	    operator:
	      /S?R?:?=>?|&&?|\*\*?|<[=>]?|>=?|[-:^/+#]|\b(?:AND|EQ|EXPT|GE|GT|LE|LT|MOD|NE|NOT|OR|XOR)\b/,
	    function: /\b[a-z_]\w*(?=\s*\()/i,
	    punctuation: /[()[\].,;]/
	  };
	}

	// @ts-nocheck
	supercollider.displayName = 'supercollider';
	supercollider.aliases = ['sclang'];

	/** @type {import('../core.js').Syntax} */
	function supercollider(Prism) {
	  Prism.languages.supercollider = {
	    comment: {
	      pattern:
	        /\/\/.*|\/\*(?:[^*/]|\*(?!\/)|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/)*\*\//,
	      greedy: true
	    },
	    string: {
	      pattern: /(^|[^\\])"(?:[^"\\]|\\[\s\S])*"/,
	      lookbehind: true,
	      greedy: true
	    },
	    char: {
	      pattern: /\$(?:[^\\\r\n]|\\.)/,
	      greedy: true
	    },
	    symbol: {
	      pattern: /(^|[^\\])'(?:[^'\\]|\\[\s\S])*'|\\\w+/,
	      lookbehind: true,
	      greedy: true
	    },
	    keyword: /\b(?:_|arg|classvar|const|nil|var|while)\b/,
	    boolean: /\b(?:false|true)\b/,
	    label: {
	      pattern: /\b[a-z_]\w*(?=\s*:)/,
	      alias: 'property'
	    },
	    number:
	      /\b(?:inf|pi|0x[0-9a-fA-F]+|\d+(?:\.\d+)?(?:[eE][+-]?\d+)?(?:pi)?|\d+r[0-9a-zA-Z]+(?:\.[0-9a-zA-Z]+)?|\d+[sb]{1,4}\d*)\b/,
	    'class-name': /\b[A-Z]\w*\b/,
	    operator:
	      /\.{2,3}|#(?![[{])|&&|[!=]==?|\+>>|\+{1,3}|-[->]|=>|>>|\?\?|@\|?@|\|(?:@|[!=]=)?\||!\?|<[!=>]|\*{1,2}|<{2,3}\*?|[-!%&/<>?@|=`]/,
	    punctuation: /[{}()[\].:,;]|#[[{]/
	  };
	  Prism.languages.sclang = Prism.languages.supercollider;
	}

	// @ts-nocheck
	systemd.displayName = 'systemd';
	systemd.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function systemd(Prism) {
	(function (Prism) {
	    var comment = {
	      pattern: /^[;#].*/m,
	      greedy: true
	    };
	    var quotesSource = /"(?:[^\r\n"\\]|\\(?:[^\r]|\r\n?))*"(?!\S)/.source;
	    Prism.languages.systemd = {
	      comment: comment,
	      section: {
	        pattern: /^\[[^\n\r\[\]]*\](?=[ \t]*$)/m,
	        greedy: true,
	        inside: {
	          punctuation: /^\[|\]$/,
	          'section-name': {
	            pattern: /[\s\S]+/,
	            alias: 'selector'
	          }
	        }
	      },
	      key: {
	        pattern: /^[^\s=]+(?=[ \t]*=)/m,
	        greedy: true,
	        alias: 'attr-name'
	      },
	      value: {
	        // This pattern is quite complex because of two properties:
	        //  1) Quotes (strings) must be preceded by a space. Since we can't use lookbehinds, we have to "resolve"
	        //     the lookbehind. You will see this in the main loop where spaces are handled separately.
	        //  2) Line continuations.
	        //     After line continuations, empty lines and comments are ignored so we have to consume them.
	        pattern: RegExp(
	          /(=[ \t]*(?!\s))/.source +
	            // the value either starts with quotes or not
	            '(?:' +
	            quotesSource +
	            '|(?=[^"\r\n]))' +
	            // main loop
	            '(?:' +
	            (/[^\s\\]/.source +
	              // handle spaces separately because of quotes
	              '|' +
	              '[ \t]+(?:(?![ \t"])|' +
	              quotesSource +
	              ')' +
	              // line continuation
	              '|' +
	              /\\[\r\n]+(?:[#;].*[\r\n]+)*(?![#;])/.source) +
	            ')*'
	        ),
	        lookbehind: true,
	        greedy: true,
	        alias: 'attr-value',
	        inside: {
	          comment: comment,
	          quoted: {
	            pattern: RegExp(/(^|\s)/.source + quotesSource),
	            lookbehind: true,
	            greedy: true
	          },
	          punctuation: /\\$/m,
	          boolean: {
	            pattern: /^(?:false|no|off|on|true|yes)$/,
	            greedy: true
	          }
	        }
	      },
	      punctuation: /=/
	    };
	  })(Prism);
	}

	// @ts-nocheck
	t4Templating.displayName = 't4-templating';
	t4Templating.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function t4Templating(Prism) {
	(function (Prism) {
	    function createBlock(prefix, inside, contentAlias) {
	      return {
	        pattern: RegExp('<#' + prefix + '[\\s\\S]*?#>'),
	        alias: 'block',
	        inside: {
	          delimiter: {
	            pattern: RegExp('^<#' + prefix + '|#>$'),
	            alias: 'important'
	          },
	          content: {
	            pattern: /[\s\S]+/,
	            inside: inside,
	            alias: contentAlias
	          }
	        }
	      }
	    }
	    function createT4(insideLang) {
	      var grammar = Prism.languages[insideLang];
	      var className = 'language-' + insideLang;
	      return {
	        block: {
	          pattern: /<#[\s\S]+?#>/,
	          inside: {
	            directive: createBlock('@', {
	              'attr-value': {
	                pattern: /=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+)/,
	                inside: {
	                  punctuation: /^=|^["']|["']$/
	                }
	              },
	              keyword: /\b\w+(?=\s)/,
	              'attr-name': /\b\w+/
	            }),
	            expression: createBlock('=', grammar, className),
	            'class-feature': createBlock('\\+', grammar, className),
	            standard: createBlock('', grammar, className)
	          }
	        }
	      }
	    }
	    Prism.languages['t4-templating'] = Object.defineProperty({}, 'createT4', {
	      value: createT4
	    });
	  })(Prism);
	}

	// @ts-nocheck
	t4Cs.displayName = 't4-cs';
	t4Cs.aliases = ['t4'];

	/** @type {import('../core.js').Syntax} */
	function t4Cs(Prism) {
	  Prism.register(csharp);
	  Prism.register(t4Templating);
	  Prism.languages.t4 = Prism.languages['t4-cs'] =
	    Prism.languages['t4-templating'].createT4('csharp');
	}

	// @ts-nocheck
	t4Vb.displayName = 't4-vb';
	t4Vb.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function t4Vb(Prism) {
	  Prism.register(t4Templating);
	  Prism.register(vbnet);
	  Prism.languages['t4-vb'] = Prism.languages['t4-templating'].createT4('vbnet');
	}

	// @ts-nocheck
	tap.displayName = 'tap';
	tap.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function tap(Prism) {
	  Prism.register(yaml);
	  // https://en.wikipedia.org/wiki/Test_Anything_Protocol

	  Prism.languages.tap = {
	    fail: /not ok[^#{\n\r]*/,
	    pass: /ok[^#{\n\r]*/,
	    pragma: /pragma [+-][a-z]+/,
	    bailout: /bail out!.*/i,
	    version: /TAP version \d+/i,
	    plan: /\b\d+\.\.\d+(?: +#.*)?/,
	    subtest: {
	      pattern: /# Subtest(?:: .*)?/,
	      greedy: true
	    },
	    punctuation: /[{}]/,
	    directive: /#.*/,
	    yamlish: {
	      pattern: /(^[ \t]*)---[\s\S]*?[\r\n][ \t]*\.\.\.$/m,
	      lookbehind: true,
	      inside: Prism.languages.yaml,
	      alias: 'language-yaml'
	    }
	  };
	}

	// @ts-nocheck
	tcl.displayName = 'tcl';
	tcl.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function tcl(Prism) {
	  Prism.languages.tcl = {
	    comment: {
	      pattern: /(^|[^\\])#.*/,
	      lookbehind: true
	    },
	    string: {
	      pattern: /"(?:[^"\\\r\n]|\\(?:\r\n|[\s\S]))*"/,
	      greedy: true
	    },
	    variable: [
	      {
	        pattern: /(\$)(?:::)?(?:[a-zA-Z0-9]+::)*\w+/,
	        lookbehind: true
	      },
	      {
	        pattern: /(\$)\{[^}]+\}/,
	        lookbehind: true
	      },
	      {
	        pattern: /(^[\t ]*set[ \t]+)(?:::)?(?:[a-zA-Z0-9]+::)*\w+/m,
	        lookbehind: true
	      }
	    ],
	    function: {
	      pattern: /(^[\t ]*proc[ \t]+)\S+/m,
	      lookbehind: true
	    },
	    builtin: [
	      {
	        pattern:
	          /(^[\t ]*)(?:break|class|continue|error|eval|exit|for|foreach|if|proc|return|switch|while)\b/m,
	        lookbehind: true
	      },
	      /\b(?:else|elseif)\b/
	    ],
	    scope: {
	      pattern: /(^[\t ]*)(?:global|upvar|variable)\b/m,
	      lookbehind: true,
	      alias: 'constant'
	    },
	    keyword: {
	      pattern:
	        /(^[\t ]*|\[)(?:Safe_Base|Tcl|after|append|apply|array|auto_(?:execok|import|load|mkindex|qualify|reset)|automkindex_old|bgerror|binary|catch|cd|chan|clock|close|concat|dde|dict|encoding|eof|exec|expr|fblocked|fconfigure|fcopy|file(?:event|name)?|flush|gets|glob|history|http|incr|info|interp|join|lappend|lassign|lindex|linsert|list|llength|load|lrange|lrepeat|lreplace|lreverse|lsearch|lset|lsort|math(?:func|op)|memory|msgcat|namespace|open|package|parray|pid|pkg_mkIndex|platform|puts|pwd|re_syntax|read|refchan|regexp|registry|regsub|rename|scan|seek|set|socket|source|split|string|subst|tcl(?:_endOfWord|_findLibrary|startOf(?:Next|Previous)Word|test|vars|wordBreak(?:After|Before))|tell|time|tm|trace|unknown|unload|unset|update|uplevel|vwait)\b/m,
	      lookbehind: true
	    },
	    operator:
	      /!=?|\*\*?|==|&&?|\|\|?|<[=<]?|>[=>]?|[-+~\/%?^]|\b(?:eq|in|ne|ni)\b/,
	    punctuation: /[{}()\[\]]/
	  };
	}

	// @ts-nocheck
	tt2.displayName = 'tt2';
	tt2.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function tt2(Prism) {
	  Prism.register(clike);
	  Prism.register(markupTemplating)
	  ;(function (Prism) {
	    Prism.languages.tt2 = Prism.languages.extend('clike', {
	      comment: /#.*|\[%#[\s\S]*?%\]/,
	      keyword:
	        /\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|SWITCH|TAGS|THROW|TRY|UNLESS|USE|WHILE|WRAPPER)\b/,
	      punctuation: /[[\]{},()]/
	    });
	    Prism.languages.insertBefore('tt2', 'number', {
	      operator: /=[>=]?|!=?|<=?|>=?|&&|\|\|?|\b(?:and|not|or)\b/,
	      variable: {
	        pattern: /\b[a-z]\w*(?:\s*\.\s*(?:\d+|\$?[a-z]\w*))*\b/i
	      }
	    });
	    Prism.languages.insertBefore('tt2', 'keyword', {
	      delimiter: {
	        pattern: /^(?:\[%|%%)-?|-?%\]$/,
	        alias: 'punctuation'
	      }
	    });
	    Prism.languages.insertBefore('tt2', 'string', {
	      'single-quoted-string': {
	        pattern: /'[^\\']*(?:\\[\s\S][^\\']*)*'/,
	        greedy: true,
	        alias: 'string'
	      },
	      'double-quoted-string': {
	        pattern: /"[^\\"]*(?:\\[\s\S][^\\"]*)*"/,
	        greedy: true,
	        alias: 'string',
	        inside: {
	          variable: {
	            pattern: /\$(?:[a-z]\w*(?:\.(?:\d+|\$?[a-z]\w*))*)/i
	          }
	        }
	      }
	    });

	    // The different types of TT2 strings "replace" the C-like standard string
	    delete Prism.languages.tt2.string;
	    Prism.hooks.add('before-tokenize', function (env) {
	      var tt2Pattern = /\[%[\s\S]+?%\]/g;
	      Prism.languages['markup-templating'].buildPlaceholders(
	        env,
	        'tt2',
	        tt2Pattern
	      );
	    });
	    Prism.hooks.add('after-tokenize', function (env) {
	      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'tt2');
	    });
	  })(Prism);
	}

	// @ts-nocheck
	toml.displayName = 'toml';
	toml.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function toml(Prism) {
	(function (Prism) {
	    var key = /(?:[\w-]+|'[^'\n\r]*'|"(?:\\.|[^\\"\r\n])*")/.source;

	    /**
	     * @param {string} pattern
	     */
	    function insertKey(pattern) {
	      return pattern.replace(/__/g, function () {
	        return key
	      })
	    }
	    Prism.languages.toml = {
	      comment: {
	        pattern: /#.*/,
	        greedy: true
	      },
	      table: {
	        pattern: RegExp(
	          insertKey(
	            /(^[\t ]*\[\s*(?:\[\s*)?)__(?:\s*\.\s*__)*(?=\s*\])/.source
	          ),
	          'm'
	        ),
	        lookbehind: true,
	        greedy: true,
	        alias: 'class-name'
	      },
	      key: {
	        pattern: RegExp(
	          insertKey(/(^[\t ]*|[{,]\s*)__(?:\s*\.\s*__)*(?=\s*=)/.source),
	          'm'
	        ),
	        lookbehind: true,
	        greedy: true,
	        alias: 'property'
	      },
	      string: {
	        pattern:
	          /"""(?:\\[\s\S]|[^\\])*?"""|'''[\s\S]*?'''|'[^'\n\r]*'|"(?:\\.|[^\\"\r\n])*"/,
	        greedy: true
	      },
	      date: [
	        {
	          // Offset Date-Time, Local Date-Time, Local Date
	          pattern:
	            /\b\d{4}-\d{2}-\d{2}(?:[T\s]\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:Z|[+-]\d{2}:\d{2})?)?\b/i,
	          alias: 'number'
	        },
	        {
	          // Local Time
	          pattern: /\b\d{2}:\d{2}:\d{2}(?:\.\d+)?\b/,
	          alias: 'number'
	        }
	      ],
	      number:
	        /(?:\b0(?:x[\da-zA-Z]+(?:_[\da-zA-Z]+)*|o[0-7]+(?:_[0-7]+)*|b[10]+(?:_[10]+)*))\b|[-+]?\b\d+(?:_\d+)*(?:\.\d+(?:_\d+)*)?(?:[eE][+-]?\d+(?:_\d+)*)?\b|[-+]?\b(?:inf|nan)\b/,
	      boolean: /\b(?:false|true)\b/,
	      punctuation: /[.,=[\]{}]/
	    };
	  })(Prism);
	}

	// @ts-nocheck
	tremor.displayName = 'tremor';
	tremor.aliases = ['trickle', 'troy'];

	/** @type {import('../core.js').Syntax} */
	function tremor(Prism) {
	(function (Prism) {
	    Prism.languages.tremor = {
	      comment: {
	        pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:--|\/\/|#).*)/,
	        lookbehind: true
	      },
	      'interpolated-string': null,
	      // see below
	      extractor: {
	        pattern: /\b[a-z_]\w*\|(?:[^\r\n\\|]|\\(?:\r\n|[\s\S]))*\|/i,
	        greedy: true,
	        inside: {
	          regex: {
	            pattern: /(^re)\|[\s\S]+/,
	            lookbehind: true
	          },
	          function: /^\w+/,
	          value: /\|[\s\S]+/
	        }
	      },
	      identifier: {
	        pattern: /`[^`]*`/,
	        greedy: true
	      },
	      function: /\b[a-z_]\w*(?=\s*(?:::\s*<|\())\b/,
	      keyword:
	        /\b(?:args|as|by|case|config|connect|connector|const|copy|create|default|define|deploy|drop|each|emit|end|erase|event|flow|fn|for|from|group|having|insert|into|intrinsic|let|links|match|merge|mod|move|of|operator|patch|pipeline|recur|script|select|set|sliding|state|stream|to|tumbling|update|use|when|where|window|with)\b/,
	      boolean: /\b(?:false|null|true)\b/i,
	      number:
	        /\b(?:0b[01_]*|0x[0-9a-fA-F_]*|\d[\d_]*(?:\.\d[\d_]*)?(?:[Ee][+-]?[\d_]+)?)\b/,
	      'pattern-punctuation': {
	        pattern: /%(?=[({[])/,
	        alias: 'punctuation'
	      },
	      operator:
	        /[-+*\/%~!^]=?|=[=>]?|&[&=]?|\|[|=]?|<<?=?|>>?>?=?|(?:absent|and|not|or|present|xor)\b/,
	      punctuation: /::|[;\[\]()\{\},.:]/
	    };
	    var interpolationPattern =
	      /#\{(?:[^"{}]|\{[^{}]*\}|"(?:[^"\\\r\n]|\\(?:\r\n|[\s\S]))*")*\}/.source;
	    Prism.languages.tremor['interpolated-string'] = {
	      pattern: RegExp(
	        /(^|[^\\])/.source +
	          '(?:' +
	          '"""(?:' +
	          /[^"\\#]|\\[\s\S]|"(?!"")|#(?!\{)/.source +
	          '|' +
	          interpolationPattern +
	          ')*"""' +
	          '|' +
	          '"(?:' +
	          /[^"\\\r\n#]|\\(?:\r\n|[\s\S])|#(?!\{)/.source +
	          '|' +
	          interpolationPattern +
	          ')*"' +
	          ')'
	      ),
	      lookbehind: true,
	      greedy: true,
	      inside: {
	        interpolation: {
	          pattern: RegExp(interpolationPattern),
	          inside: {
	            punctuation: /^#\{|\}$/,
	            expression: {
	              pattern: /[\s\S]+/,
	              inside: Prism.languages.tremor
	            }
	          }
	        },
	        string: /[\s\S]+/
	      }
	    };
	    Prism.languages.troy = Prism.languages['tremor'];
	    Prism.languages.trickle = Prism.languages['tremor'];
	  })(Prism);
	}

	// @ts-nocheck
	typoscript.displayName = 'typoscript';
	typoscript.aliases = ['tsconfig'];

	/** @type {import('../core.js').Syntax} */
	function typoscript(Prism) {
	(function (Prism) {
	    var keywords =
	      /\b(?:ACT|ACTIFSUB|CARRAY|CASE|CLEARGIF|COA|COA_INT|CONSTANTS|CONTENT|CUR|EDITPANEL|EFFECT|EXT|FILE|FLUIDTEMPLATE|FORM|FRAME|FRAMESET|GIFBUILDER|GMENU|GMENU_FOLDOUT|GMENU_LAYERS|GP|HMENU|HRULER|HTML|IENV|IFSUB|IMAGE|IMGMENU|IMGMENUITEM|IMGTEXT|IMG_RESOURCE|INCLUDE_TYPOSCRIPT|JSMENU|JSMENUITEM|LLL|LOAD_REGISTER|NO|PAGE|RECORDS|RESTORE_REGISTER|TEMPLATE|TEXT|TMENU|TMENUITEM|TMENU_LAYERS|USER|USER_INT|_GIFBUILDER|global|globalString|globalVar)\b/;
	    Prism.languages.typoscript = {
	      comment: [
	        {
	          // multiline comments /* */
	          pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
	          lookbehind: true
	        },
	        {
	          // double-slash comments - ignored when backslashes or colon is found in front
	          // also ignored whenever directly after an equal-sign, because it would probably be an url without protocol
	          pattern: /(^|[^\\:= \t]|(?:^|[^= \t])[ \t]+)\/\/.*/,
	          lookbehind: true,
	          greedy: true
	        },
	        {
	          // hash comments - ignored when leading quote is found for hex colors in strings
	          pattern: /(^|[^"'])#.*/,
	          lookbehind: true,
	          greedy: true
	        }
	      ],
	      function: [
	        {
	          // old include style
	          pattern:
	            /<INCLUDE_TYPOSCRIPT:\s*source\s*=\s*(?:"[^"\r\n]*"|'[^'\r\n]*')\s*>/,
	          inside: {
	            string: {
	              pattern: /"[^"\r\n]*"|'[^'\r\n]*'/,
	              inside: {
	                keyword: keywords
	              }
	            },
	            keyword: {
	              pattern: /INCLUDE_TYPOSCRIPT/
	            }
	          }
	        },
	        {
	          // new include style
	          pattern: /@import\s*(?:"[^"\r\n]*"|'[^'\r\n]*')/,
	          inside: {
	            string: /"[^"\r\n]*"|'[^'\r\n]*'/
	          }
	        }
	      ],
	      string: {
	        pattern: /^([^=]*=[< ]?)(?:(?!\]\n).)*/,
	        lookbehind: true,
	        inside: {
	          function: /\{\$.*\}/,
	          // constants include
	          keyword: keywords,
	          number: /^\d+$/,
	          punctuation: /[,|:]/
	        }
	      },
	      keyword: keywords,
	      number: {
	        // special highlighting for indexes of arrays in tags
	        pattern: /\b\d+\s*[.{=]/,
	        inside: {
	          operator: /[.{=]/
	        }
	      },
	      tag: {
	        pattern: /\.?[-\w\\]+\.?/,
	        inside: {
	          punctuation: /\./
	        }
	      },
	      punctuation: /[{}[\];(),.:|]/,
	      operator: /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/
	    };
	    Prism.languages.tsconfig = Prism.languages.typoscript;
	  })(Prism);
	}

	// @ts-nocheck
	unrealscript.displayName = 'unrealscript';
	unrealscript.aliases = ['uc', 'uscript'];

	/** @type {import('../core.js').Syntax} */
	function unrealscript(Prism) {
	  Prism.languages.unrealscript = {
	    comment: /\/\/.*|\/\*[\s\S]*?\*\//,
	    string: {
	      pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
	      greedy: true
	    },
	    category: {
	      pattern:
	        /(\b(?:(?:autoexpand|hide|show)categories|var)\s*\()[^()]+(?=\))/,
	      lookbehind: true,
	      greedy: true,
	      alias: 'property'
	    },
	    metadata: {
	      pattern: /(\w\s*)<\s*\w+\s*=[^<>|=\r\n]+(?:\|\s*\w+\s*=[^<>|=\r\n]+)*>/,
	      lookbehind: true,
	      greedy: true,
	      inside: {
	        property: /\b\w+(?=\s*=)/,
	        operator: /=/,
	        punctuation: /[<>|]/
	      }
	    },
	    macro: {
	      pattern: /`\w+/,
	      alias: 'property'
	    },
	    'class-name': {
	      pattern:
	        /(\b(?:class|enum|extends|interface|state(?:\(\))?|struct|within)\s+)\w+/,
	      lookbehind: true
	    },
	    keyword:
	      /\b(?:abstract|actor|array|auto|autoexpandcategories|bool|break|byte|case|class|classgroup|client|coerce|collapsecategories|config|const|continue|default|defaultproperties|delegate|dependson|deprecated|do|dontcollapsecategories|editconst|editinlinenew|else|enum|event|exec|export|extends|final|float|for|forcescriptorder|foreach|function|goto|guid|hidecategories|hidedropdown|if|ignores|implements|inherits|input|int|interface|iterator|latent|local|material|name|native|nativereplication|noexport|nontransient|noteditinlinenew|notplaceable|operator|optional|out|pawn|perobjectconfig|perobjectlocalized|placeable|postoperator|preoperator|private|protected|reliable|replication|return|server|showcategories|simulated|singular|state|static|string|struct|structdefault|structdefaultproperties|switch|texture|transient|travel|unreliable|until|var|vector|while|within)\b/,
	    function: /\b[a-z_]\w*(?=\s*\()/i,
	    boolean: /\b(?:false|true)\b/,
	    number: /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
	    // https://docs.unrealengine.com/udk/Three/UnrealScriptExpressions.html
	    operator:
	      />>|<<|--|\+\+|\*\*|[-+*/~!=<>$@]=?|&&?|\|\|?|\^\^?|[?:%]|\b(?:ClockwiseFrom|Cross|Dot)\b/,
	    punctuation: /[()[\]{};,.]/
	  };
	  Prism.languages.uc = Prism.languages.uscript = Prism.languages.unrealscript;
	}

	// @ts-nocheck
	uorazor.displayName = 'uorazor';
	uorazor.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function uorazor(Prism) {
	  Prism.languages.uorazor = {
	    'comment-hash': {
	      pattern: /#.*/,
	      alias: 'comment',
	      greedy: true
	    },
	    'comment-slash': {
	      pattern: /\/\/.*/,
	      alias: 'comment',
	      greedy: true
	    },
	    string: {
	      pattern: /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
	      inside: {
	        punctuation: /^['"]|['"]$/
	      },
	      greedy: true
	    },
	    'source-layers': {
	      pattern:
	        /\b(?:arms|backpack|blue|bracelet|cancel|clear|cloak|criminal|earrings|enemy|facialhair|friend|friendly|gloves|gray|grey|ground|hair|head|innerlegs|innertorso|innocent|lefthand|middletorso|murderer|neck|nonfriendly|onehandedsecondary|outerlegs|outertorso|pants|red|righthand|ring|self|shirt|shoes|talisman|waist)\b/i,
	      alias: 'function'
	    },
	    'source-commands': {
	      pattern:
	        /\b(?:alliance|attack|cast|clearall|clearignore|clearjournal|clearlist|clearsysmsg|createlist|createtimer|dclick|dclicktype|dclickvar|dress|dressconfig|drop|droprelloc|emote|getlabel|guild|gumpclose|gumpresponse|hotkey|ignore|lasttarget|lift|lifttype|menu|menuresponse|msg|org|organize|organizer|overhead|pause|poplist|potion|promptresponse|pushlist|removelist|removetimer|rename|restock|say|scav|scavenger|script|setability|setlasttarget|setskill|settimer|setvar|sysmsg|target|targetloc|targetrelloc|targettype|undress|unignore|unsetvar|useobject|useonce|useskill|usetype|virtue|wait|waitforgump|waitformenu|waitforprompt|waitforstat|waitforsysmsg|waitfortarget|walk|wfsysmsg|wft|whisper|yell)\b/,
	      alias: 'function'
	    },
	    'tag-name': {
	      pattern: /(^\{%-?\s*)\w+/,
	      lookbehind: true,
	      alias: 'keyword'
	    },
	    delimiter: {
	      pattern: /^\{[{%]-?|-?[%}]\}$/,
	      alias: 'punctuation'
	    },
	    function:
	      /\b(?:atlist|close|closest|count|counter|counttype|dead|dex|diffhits|diffmana|diffstam|diffweight|find|findbuff|finddebuff|findlayer|findtype|findtypelist|followers|gumpexists|hidden|hits|hp|hue|human|humanoid|ingump|inlist|insysmessage|insysmsg|int|invul|lhandempty|list|listexists|mana|maxhits|maxhp|maxmana|maxstam|maxweight|monster|mounted|name|next|noto|paralyzed|poisoned|position|prev|previous|queued|rand|random|rhandempty|skill|stam|str|targetexists|timer|timerexists|varexist|warmode|weight)\b/,
	    keyword:
	      /\b(?:and|as|break|continue|else|elseif|endfor|endif|endwhile|for|if|loop|not|or|replay|stop|while)\b/,
	    boolean: /\b(?:false|null|true)\b/,
	    number: /\b0x[\dA-Fa-f]+|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee][-+]?\d+)?/,
	    operator: [
	      {
	        pattern:
	          /(\s)(?:and|b-and|b-or|b-xor|ends with|in|is|matches|not|or|same as|starts with)(?=\s)/,
	        lookbehind: true
	      },
	      /[=<>]=?|!=|\*\*?|\/\/?|\?:?|[-+~%|]/
	    ],
	    punctuation: /[()\[\]{}:.,]/
	  };
	}

	// @ts-nocheck
	v.displayName = 'v';
	v.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function v(Prism) {
	  Prism.register(clike)
	  ;(function (Prism) {
	    var interpolationExpr = {
	      pattern: /[\s\S]+/,
	      inside: null
	    };
	    Prism.languages.v = Prism.languages.extend('clike', {
	      string: {
	        pattern: /r?(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
	        alias: 'quoted-string',
	        greedy: true,
	        inside: {
	          interpolation: {
	            pattern:
	              /((?:^|[^\\])(?:\\{2})*)\$(?:\{[^{}]*\}|\w+(?:\.\w+(?:\([^\(\)]*\))?|\[[^\[\]]+\])*)/,
	            lookbehind: true,
	            inside: {
	              'interpolation-variable': {
	                pattern: /^\$\w[\s\S]*$/,
	                alias: 'variable'
	              },
	              'interpolation-punctuation': {
	                pattern: /^\$\{|\}$/,
	                alias: 'punctuation'
	              },
	              'interpolation-expression': interpolationExpr
	            }
	          }
	        }
	      },
	      'class-name': {
	        pattern: /(\b(?:enum|interface|struct|type)\s+)(?:C\.)?\w+/,
	        lookbehind: true
	      },
	      keyword:
	        /(?:\b(?:__global|as|asm|assert|atomic|break|chan|const|continue|defer|else|embed|enum|fn|for|go(?:to)?|if|import|in|interface|is|lock|match|module|mut|none|or|pub|return|rlock|select|shared|sizeof|static|struct|type(?:of)?|union|unsafe)|\$(?:else|for|if)|#(?:flag|include))\b/,
	      number:
	        /\b(?:0x[a-f\d]+(?:_[a-f\d]+)*|0b[01]+(?:_[01]+)*|0o[0-7]+(?:_[0-7]+)*|\d+(?:_\d+)*(?:\.\d+(?:_\d+)*)?)\b/i,
	      operator:
	        /~|\?|[*\/%^!=]=?|\+[=+]?|-[=-]?|\|[=|]?|&(?:=|&|\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\.\.\.?/,
	      builtin:
	        /\b(?:any(?:_float|_int)?|bool|byte(?:ptr)?|charptr|f(?:32|64)|i(?:8|16|64|128|nt)|rune|size_t|string|u(?:16|32|64|128)|voidptr)\b/
	    });
	    interpolationExpr.inside = Prism.languages.v;
	    Prism.languages.insertBefore('v', 'string', {
	      char: {
	        pattern: /`(?:\\`|\\?[^`]{1,2})`/,
	        // using {1,2} instead of `u` flag for compatibility
	        alias: 'rune'
	      }
	    });
	    Prism.languages.insertBefore('v', 'operator', {
	      attribute: {
	        pattern:
	          /(^[\t ]*)\[(?:deprecated|direct_array_access|flag|inline|live|ref_only|typedef|unsafe_fn|windows_stdcall)\]/m,
	        lookbehind: true,
	        alias: 'annotation',
	        inside: {
	          punctuation: /[\[\]]/,
	          keyword: /\w+/
	        }
	      },
	      generic: {
	        pattern: /<\w+>(?=\s*[\)\{])/,
	        inside: {
	          punctuation: /[<>]/,
	          'class-name': /\w+/
	        }
	      }
	    });
	    Prism.languages.insertBefore('v', 'function', {
	      'generic-function': {
	        // e.g. foo<T>( ...
	        pattern: /\b\w+\s*<\w+>(?=\()/,
	        inside: {
	          function: /^\w+/,
	          generic: {
	            pattern: /<\w+>/,
	            inside: Prism.languages.v.generic.inside
	          }
	        }
	      }
	    });
	  })(Prism);
	}

	// @ts-nocheck
	vala.displayName = 'vala';
	vala.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function vala(Prism) {
	  Prism.register(clike);
	  Prism.languages.vala = Prism.languages.extend('clike', {
	    // Classes copied from prism-csharp
	    'class-name': [
	      {
	        // (Foo bar, Bar baz)
	        pattern: /\b[A-Z]\w*(?:\.\w+)*\b(?=(?:\?\s+|\*?\s+\*?)\w)/,
	        inside: {
	          punctuation: /\./
	        }
	      },
	      {
	        // [Foo]
	        pattern: /(\[)[A-Z]\w*(?:\.\w+)*\b/,
	        lookbehind: true,
	        inside: {
	          punctuation: /\./
	        }
	      },
	      {
	        // class Foo : Bar
	        pattern:
	          /(\b(?:class|interface)\s+[A-Z]\w*(?:\.\w+)*\s*:\s*)[A-Z]\w*(?:\.\w+)*\b/,
	        lookbehind: true,
	        inside: {
	          punctuation: /\./
	        }
	      },
	      {
	        // class Foo
	        pattern:
	          /((?:\b(?:class|enum|interface|new|struct)\s+)|(?:catch\s+\())[A-Z]\w*(?:\.\w+)*\b/,
	        lookbehind: true,
	        inside: {
	          punctuation: /\./
	        }
	      }
	    ],
	    keyword:
	      /\b(?:abstract|as|assert|async|base|bool|break|case|catch|char|class|const|construct|continue|default|delegate|delete|do|double|dynamic|else|ensures|enum|errordomain|extern|finally|float|for|foreach|get|if|in|inline|int|int16|int32|int64|int8|interface|internal|is|lock|long|namespace|new|null|out|override|owned|params|private|protected|public|ref|requires|return|set|short|signal|sizeof|size_t|ssize_t|static|string|struct|switch|this|throw|throws|try|typeof|uchar|uint|uint16|uint32|uint64|uint8|ulong|unichar|unowned|ushort|using|value|var|virtual|void|volatile|weak|while|yield)\b/i,
	    function: /\b\w+(?=\s*\()/,
	    number:
	      /(?:\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)(?:f|u?l?)?/i,
	    operator:
	      /\+\+|--|&&|\|\||<<=?|>>=?|=>|->|~|[+\-*\/%&^|=!<>]=?|\?\??|\.\.\./,
	    punctuation: /[{}[\];(),.:]/,
	    constant: /\b[A-Z0-9_]+\b/
	  });
	  Prism.languages.insertBefore('vala', 'string', {
	    'raw-string': {
	      pattern: /"""[\s\S]*?"""/,
	      greedy: true,
	      alias: 'string'
	    },
	    'template-string': {
	      pattern: /@"[\s\S]*?"/,
	      greedy: true,
	      inside: {
	        interpolation: {
	          pattern: /\$(?:\([^)]*\)|[a-zA-Z]\w*)/,
	          inside: {
	            delimiter: {
	              pattern: /^\$\(?|\)$/,
	              alias: 'punctuation'
	            },
	            rest: Prism.languages.vala
	          }
	        },
	        string: /[\s\S]+/
	      }
	    }
	  });
	  Prism.languages.insertBefore('vala', 'keyword', {
	    regex: {
	      pattern:
	        /\/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[imsx]{0,4}(?=\s*(?:$|[\r\n,.;})\]]))/,
	      greedy: true,
	      inside: {
	        'regex-source': {
	          pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
	          lookbehind: true,
	          alias: 'language-regex',
	          inside: Prism.languages.regex
	        },
	        'regex-delimiter': /^\//,
	        'regex-flags': /^[a-z]+$/
	      }
	    }
	  });
	}

	// @ts-nocheck
	velocity.displayName = 'velocity';
	velocity.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function velocity(Prism) {
	  Prism.register(markup)
	  ;(function (Prism) {
	    Prism.languages.velocity = Prism.languages.extend('markup', {});
	    var velocity = {
	      variable: {
	        pattern:
	          /(^|[^\\](?:\\\\)*)\$!?(?:[a-z][\w-]*(?:\([^)]*\))?(?:\.[a-z][\w-]*(?:\([^)]*\))?|\[[^\]]+\])*|\{[^}]+\})/i,
	        lookbehind: true,
	        inside: {} // See below
	      },

	      string: {
	        pattern: /"[^"]*"|'[^']*'/,
	        greedy: true
	      },
	      number: /\b\d+\b/,
	      boolean: /\b(?:false|true)\b/,
	      operator:
	        /[=!<>]=?|[+*/%-]|&&|\|\||\.\.|\b(?:eq|g[et]|l[et]|n(?:e|ot))\b/,
	      punctuation: /[(){}[\]:,.]/
	    };
	    velocity.variable.inside = {
	      string: velocity['string'],
	      function: {
	        pattern: /([^\w-])[a-z][\w-]*(?=\()/,
	        lookbehind: true
	      },
	      number: velocity['number'],
	      boolean: velocity['boolean'],
	      punctuation: velocity['punctuation']
	    };
	    Prism.languages.insertBefore('velocity', 'comment', {
	      unparsed: {
	        pattern: /(^|[^\\])#\[\[[\s\S]*?\]\]#/,
	        lookbehind: true,
	        greedy: true,
	        inside: {
	          punctuation: /^#\[\[|\]\]#$/
	        }
	      },
	      'velocity-comment': [
	        {
	          pattern: /(^|[^\\])#\*[\s\S]*?\*#/,
	          lookbehind: true,
	          greedy: true,
	          alias: 'comment'
	        },
	        {
	          pattern: /(^|[^\\])##.*/,
	          lookbehind: true,
	          greedy: true,
	          alias: 'comment'
	        }
	      ],
	      directive: {
	        pattern:
	          /(^|[^\\](?:\\\\)*)#@?(?:[a-z][\w-]*|\{[a-z][\w-]*\})(?:\s*\((?:[^()]|\([^()]*\))*\))?/i,
	        lookbehind: true,
	        inside: {
	          keyword: {
	            pattern: /^#@?(?:[a-z][\w-]*|\{[a-z][\w-]*\})|\bin\b/,
	            inside: {
	              punctuation: /[{}]/
	            }
	          },
	          rest: velocity
	        }
	      },
	      variable: velocity['variable']
	    });
	    Prism.languages.velocity['tag'].inside['attr-value'].inside.rest =
	      Prism.languages.velocity;
	  })(Prism);
	}

	// @ts-nocheck
	verilog.displayName = 'verilog';
	verilog.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function verilog(Prism) {
	  Prism.languages.verilog = {
	    comment: {
	      pattern: /\/\/.*|\/\*[\s\S]*?\*\//,
	      greedy: true
	    },
	    string: {
	      pattern: /"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,
	      greedy: true
	    },
	    'kernel-function': {
	      // support for any kernel function (ex: $display())
	      pattern: /\B\$\w+\b/,
	      alias: 'property'
	    },
	    // support for user defined constants (ex: `define)
	    constant: /\B`\w+\b/,
	    function: /\b\w+(?=\()/,
	    // support for verilog and system verilog keywords
	    keyword:
	      /\b(?:alias|and|assert|assign|assume|automatic|before|begin|bind|bins|binsof|bit|break|buf|bufif0|bufif1|byte|case|casex|casez|cell|chandle|class|clocking|cmos|config|const|constraint|context|continue|cover|covergroup|coverpoint|cross|deassign|default|defparam|design|disable|dist|do|edge|else|end|endcase|endclass|endclocking|endconfig|endfunction|endgenerate|endgroup|endinterface|endmodule|endpackage|endprimitive|endprogram|endproperty|endsequence|endspecify|endtable|endtask|enum|event|expect|export|extends|extern|final|first_match|for|force|foreach|forever|fork|forkjoin|function|generate|genvar|highz0|highz1|if|iff|ifnone|ignore_bins|illegal_bins|import|incdir|include|initial|inout|input|inside|instance|int|integer|interface|intersect|join|join_any|join_none|large|liblist|library|local|localparam|logic|longint|macromodule|matches|medium|modport|module|nand|negedge|new|nmos|nor|noshowcancelled|not|notif0|notif1|null|or|output|package|packed|parameter|pmos|posedge|primitive|priority|program|property|protected|pull0|pull1|pulldown|pullup|pulsestyle_ondetect|pulsestyle_onevent|pure|rand|randc|randcase|randsequence|rcmos|real|realtime|ref|reg|release|repeat|return|rnmos|rpmos|rtran|rtranif0|rtranif1|scalared|sequence|shortint|shortreal|showcancelled|signed|small|solve|specify|specparam|static|string|strong0|strong1|struct|super|supply0|supply1|table|tagged|task|this|throughout|time|timeprecision|timeunit|tran|tranif0|tranif1|tri|tri0|tri1|triand|trior|trireg|type|typedef|union|unique|unsigned|use|uwire|var|vectored|virtual|void|wait|wait_order|wand|weak0|weak1|while|wildcard|wire|with|within|wor|xnor|xor)\b/,
	    // bold highlighting for all verilog and system verilog logic blocks
	    important: /\b(?:always|always_comb|always_ff|always_latch)\b(?: *@)?/,
	    // support for time ticks, vectors, and real numbers
	    number:
	      /\B##?\d+|(?:\b\d+)?'[odbh] ?[\da-fzx_?]+|\b(?:\d*[._])?\d+(?:e[-+]?\d+)?/i,
	    operator: /[-+{}^~%*\/?=!<>&|]+/,
	    punctuation: /[[\];(),.:]/
	  };
	}

	// @ts-nocheck
	vhdl.displayName = 'vhdl';
	vhdl.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function vhdl(Prism) {
	  Prism.languages.vhdl = {
	    comment: /--.+/,
	    // support for all logic vectors
	    'vhdl-vectors': {
	      pattern: /\b[oxb]"[\da-f_]+"|"[01uxzwlh-]+"/i,
	      alias: 'number'
	    },
	    // support for operator overloading included
	    'quoted-function': {
	      pattern: /"\S+?"(?=\()/,
	      alias: 'function'
	    },
	    string: /"(?:[^\\"\r\n]|\\(?:\r\n|[\s\S]))*"/,
	    attribute: {
	      pattern: /\b'\w+/,
	      alias: 'attr-name'
	    },
	    // support for predefined attributes included
	    keyword:
	      /\b(?:access|after|alias|all|architecture|array|assert|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|disconnect|downto|else|elsif|end|entity|exit|file|for|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|new|next|null|of|on|open|others|out|package|port|postponed|private|procedure|process|pure|range|record|register|reject|report|return|select|severity|shared|signal|subtype|then|to|transport|type|unaffected|units|until|use|variable|view|wait|when|while|with)\b/i,
	    boolean: /\b(?:false|true)\b/i,
	    function: /\w+(?=\()/,
	    // decimal, based, physical, and exponential numbers supported
	    number: /'[01uxzwlh-]'|\b(?:\d+#[\da-f_.]+#|\d[\d_.]*)(?:e[-+]?\d+)?/i,
	    operator:
	      /[<>]=?|:=|[-+*/&=]|\b(?:abs|and|mod|nand|nor|not|or|rem|rol|ror|sla|sll|sra|srl|xnor|xor)\b/i,
	    punctuation: /[{}[\];(),.:]/
	  };
	}

	// @ts-nocheck
	vim.displayName = 'vim';
	vim.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function vim(Prism) {
	  Prism.languages.vim = {
	    string: /"(?:[^"\\\r\n]|\\.)*"|'(?:[^'\r\n]|'')*'/,
	    comment: /".*/,
	    function: /\b\w+(?=\()/,
	    keyword:
	      /\b(?:N|Next|P|Print|X|XMLent|XMLns|ab|abbreviate|abc|abclear|abo|aboveleft|al|all|ar|arga|argadd|argd|argdelete|argdo|arge|argedit|argg|argglobal|argl|arglocal|args|argu|argument|as|ascii|b|bN|bNext|ba|bad|badd|ball|bd|bdelete|be|bel|belowright|bf|bfirst|bl|blast|bm|bmodified|bn|bnext|bo|botright|bp|bprevious|br|brea|break|breaka|breakadd|breakd|breakdel|breakl|breaklist|brewind|bro|browse|bufdo|buffer|buffers|bun|bunload|bw|bwipeout|c|cN|cNext|cNfcNfile|ca|cabbrev|cabc|cabclear|cad|caddb|caddbuffer|caddexpr|caddf|caddfile|cal|call|cat|catch|cb|cbuffer|cc|ccl|cclose|cd|ce|center|cex|cexpr|cf|cfile|cfir|cfirst|cg|cgetb|cgetbuffer|cgete|cgetexpr|cgetfile|change|changes|chd|chdir|che|checkpath|checkt|checktime|cl|cla|clast|clist|clo|close|cmapc|cmapclear|cn|cnew|cnewer|cnext|cnf|cnfile|cnorea|cnoreabbrev|co|col|colder|colo|colorscheme|comc|comclear|comp|compiler|con|conf|confirm|continue|cope|copen|copy|cp|cpf|cpfile|cprevious|cq|cquit|cr|crewind|cu|cuna|cunabbrev|cunmap|cw|cwindow|d|debugg|debuggreedy|delc|delcommand|delete|delf|delfunction|delm|delmarks|di|diffg|diffget|diffoff|diffpatch|diffpu|diffput|diffsplit|diffthis|diffu|diffupdate|dig|digraphs|display|dj|djump|dl|dlist|dr|drop|ds|dsearch|dsp|dsplit|e|earlier|echoe|echoerr|echom|echomsg|echon|edit|el|else|elsei|elseif|em|emenu|en|endf|endfo|endfor|endfun|endfunction|endif|endt|endtry|endw|endwhile|ene|enew|ex|exi|exit|exu|exusage|f|file|files|filetype|fin|fina|finally|find|fini|finish|fir|first|fix|fixdel|fo|fold|foldc|foldclose|foldd|folddoc|folddoclosed|folddoopen|foldo|foldopen|for|fu|fun|function|go|goto|gr|grep|grepa|grepadd|h|ha|hardcopy|help|helpf|helpfind|helpg|helpgrep|helpt|helptags|hid|hide|his|history|ia|iabbrev|iabc|iabclear|if|ij|ijump|il|ilist|imapc|imapclear|in|inorea|inoreabbrev|isearch|isp|isplit|iu|iuna|iunabbrev|iunmap|j|join|ju|jumps|k|kee|keepalt|keepj|keepjumps|keepmarks|l|lN|lNext|lNf|lNfile|la|lad|laddb|laddbuffer|laddexpr|laddf|laddfile|lan|language|last|later|lb|lbuffer|lc|lcd|lch|lchdir|lcl|lclose|left|lefta|leftabove|let|lex|lexpr|lf|lfile|lfir|lfirst|lg|lgetb|lgetbuffer|lgete|lgetexpr|lgetfile|lgr|lgrep|lgrepa|lgrepadd|lh|lhelpgrep|list|ll|lla|llast|lli|llist|lm|lmak|lmake|lmap|lmapc|lmapclear|ln|lne|lnew|lnewer|lnext|lnf|lnfile|lnoremap|lo|loadview|loc|lockmarks|lockv|lockvar|lol|lolder|lop|lopen|lp|lpf|lpfile|lprevious|lr|lrewind|ls|lt|ltag|lu|lunmap|lv|lvimgrep|lvimgrepa|lvimgrepadd|lw|lwindow|m|ma|mak|make|mark|marks|mat|match|menut|menutranslate|mk|mkexrc|mks|mksession|mksp|mkspell|mkv|mkvie|mkview|mkvimrc|mod|mode|move|mz|mzf|mzfile|mzscheme|n|nbkey|new|next|nmapc|nmapclear|noh|nohlsearch|norea|noreabbrev|nu|number|nun|nunmap|o|omapc|omapclear|on|only|open|opt|options|ou|ounmap|p|pc|pclose|pe|ped|pedit|perl|perld|perldo|po|pop|popu|popup|pp|ppop|pre|preserve|prev|previous|print|prof|profd|profdel|profile|promptf|promptfind|promptr|promptrepl|ps|psearch|ptN|ptNext|pta|ptag|ptf|ptfirst|ptj|ptjump|ptl|ptlast|ptn|ptnext|ptp|ptprevious|ptr|ptrewind|pts|ptselect|pu|put|pw|pwd|py|pyf|pyfile|python|q|qa|qall|quit|quita|quitall|r|read|rec|recover|red|redi|redir|redo|redr|redraw|redraws|redrawstatus|reg|registers|res|resize|ret|retab|retu|return|rew|rewind|ri|right|rightb|rightbelow|ru|rub|ruby|rubyd|rubydo|rubyf|rubyfile|runtime|rv|rviminfo|sN|sNext|sa|sal|sall|san|sandbox|sargument|sav|saveas|sb|sbN|sbNext|sba|sball|sbf|sbfirst|sbl|sblast|sbm|sbmodified|sbn|sbnext|sbp|sbprevious|sbr|sbrewind|sbuffer|scrip|scripte|scriptencoding|scriptnames|se|set|setf|setfiletype|setg|setglobal|setl|setlocal|sf|sfind|sfir|sfirst|sh|shell|sign|sil|silent|sim|simalt|sl|sla|slast|sleep|sm|smagic|smap|smapc|smapclear|sme|smenu|sn|snext|sni|sniff|sno|snomagic|snor|snoremap|snoreme|snoremenu|so|sor|sort|source|sp|spe|spelld|spelldump|spellgood|spelli|spellinfo|spellr|spellrepall|spellu|spellundo|spellw|spellwrong|split|spr|sprevious|sre|srewind|st|sta|stag|star|startg|startgreplace|startinsert|startr|startreplace|stj|stjump|stop|stopi|stopinsert|sts|stselect|sun|sunhide|sunm|sunmap|sus|suspend|sv|sview|syncbind|t|tN|tNext|ta|tab|tabN|tabNext|tabc|tabclose|tabd|tabdo|tabe|tabedit|tabf|tabfind|tabfir|tabfirst|tabl|tablast|tabm|tabmove|tabn|tabnew|tabnext|tabo|tabonly|tabp|tabprevious|tabr|tabrewind|tabs|tag|tags|tc|tcl|tcld|tcldo|tclf|tclfile|te|tearoff|tf|tfirst|th|throw|tj|tjump|tl|tlast|tm|tmenu|tn|tnext|to|topleft|tp|tprevious|tr|trewind|try|ts|tselect|tu|tunmenu|u|una|unabbreviate|undo|undoj|undojoin|undol|undolist|unh|unhide|unlet|unlo|unlockvar|unm|unmap|up|update|ve|verb|verbose|version|vert|vertical|vi|vie|view|vim|vimgrep|vimgrepa|vimgrepadd|visual|viu|viusage|vmapc|vmapclear|vne|vnew|vs|vsplit|vu|vunmap|w|wN|wNext|wa|wall|wh|while|win|winc|wincmd|windo|winp|winpos|winsize|wn|wnext|wp|wprevious|wq|wqa|wqall|write|ws|wsverb|wv|wviminfo|x|xa|xall|xit|xm|xmap|xmapc|xmapclear|xme|xmenu|xn|xnoremap|xnoreme|xnoremenu|xu|xunmap|y|yank)\b/,
	    builtin:
	      /\b(?:acd|ai|akm|aleph|allowrevins|altkeymap|ambiwidth|ambw|anti|antialias|arab|arabic|arabicshape|ari|arshape|autochdir|autocmd|autoindent|autoread|autowrite|autowriteall|aw|awa|background|backspace|backup|backupcopy|backupdir|backupext|backupskip|balloondelay|ballooneval|balloonexpr|bdir|bdlay|beval|bex|bexpr|bg|bh|bin|binary|biosk|bioskey|bk|bkc|bomb|breakat|brk|browsedir|bs|bsdir|bsk|bt|bufhidden|buflisted|buftype|casemap|ccv|cdpath|cedit|cfu|ch|charconvert|ci|cin|cindent|cink|cinkeys|cino|cinoptions|cinw|cinwords|clipboard|cmdheight|cmdwinheight|cmp|cms|columns|com|comments|commentstring|compatible|complete|completefunc|completeopt|consk|conskey|copyindent|cot|cpo|cpoptions|cpt|cscopepathcomp|cscopeprg|cscopequickfix|cscopetag|cscopetagorder|cscopeverbose|cspc|csprg|csqf|cst|csto|csverb|cuc|cul|cursorcolumn|cursorline|cwh|debug|deco|def|define|delcombine|dex|dg|dict|dictionary|diff|diffexpr|diffopt|digraph|dip|dir|directory|dy|ea|ead|eadirection|eb|ed|edcompatible|ef|efm|ei|ek|enc|encoding|endofline|eol|ep|equalalways|equalprg|errorbells|errorfile|errorformat|esckeys|et|eventignore|expandtab|exrc|fcl|fcs|fdc|fde|fdi|fdl|fdls|fdm|fdn|fdo|fdt|fen|fenc|fencs|fex|ff|ffs|fileencoding|fileencodings|fileformat|fileformats|fillchars|fk|fkmap|flp|fml|fmr|foldcolumn|foldenable|foldexpr|foldignore|foldlevel|foldlevelstart|foldmarker|foldmethod|foldminlines|foldnestmax|foldtext|formatexpr|formatlistpat|formatoptions|formatprg|fp|fs|fsync|ft|gcr|gd|gdefault|gfm|gfn|gfs|gfw|ghr|gp|grepformat|grepprg|gtl|gtt|guicursor|guifont|guifontset|guifontwide|guiheadroom|guioptions|guipty|guitablabel|guitabtooltip|helpfile|helpheight|helplang|hf|hh|hi|hidden|highlight|hk|hkmap|hkmapp|hkp|hl|hlg|hls|hlsearch|ic|icon|iconstring|ignorecase|im|imactivatekey|imak|imc|imcmdline|imd|imdisable|imi|iminsert|ims|imsearch|inc|include|includeexpr|incsearch|inde|indentexpr|indentkeys|indk|inex|inf|infercase|insertmode|invacd|invai|invakm|invallowrevins|invaltkeymap|invanti|invantialias|invar|invarab|invarabic|invarabicshape|invari|invarshape|invautochdir|invautoindent|invautoread|invautowrite|invautowriteall|invaw|invawa|invbackup|invballooneval|invbeval|invbin|invbinary|invbiosk|invbioskey|invbk|invbl|invbomb|invbuflisted|invcf|invci|invcin|invcindent|invcompatible|invconfirm|invconsk|invconskey|invcopyindent|invcp|invcscopetag|invcscopeverbose|invcst|invcsverb|invcuc|invcul|invcursorcolumn|invcursorline|invdeco|invdelcombine|invdg|invdiff|invdigraph|invdisable|invea|inveb|inved|invedcompatible|invek|invendofline|inveol|invequalalways|inverrorbells|invesckeys|invet|invex|invexpandtab|invexrc|invfen|invfk|invfkmap|invfoldenable|invgd|invgdefault|invguipty|invhid|invhidden|invhk|invhkmap|invhkmapp|invhkp|invhls|invhlsearch|invic|invicon|invignorecase|invim|invimc|invimcmdline|invimd|invincsearch|invinf|invinfercase|invinsertmode|invis|invjoinspaces|invjs|invlazyredraw|invlbr|invlinebreak|invlisp|invlist|invloadplugins|invlpl|invlz|invma|invmacatsui|invmagic|invmh|invml|invmod|invmodeline|invmodifiable|invmodified|invmore|invmousef|invmousefocus|invmousehide|invnu|invnumber|invodev|invopendevice|invpaste|invpi|invpreserveindent|invpreviewwindow|invprompt|invpvw|invreadonly|invremap|invrestorescreen|invrevins|invri|invrightleft|invrightleftcmd|invrl|invrlc|invro|invrs|invru|invruler|invsb|invsc|invscb|invscrollbind|invscs|invsecure|invsft|invshellslash|invshelltemp|invshiftround|invshortname|invshowcmd|invshowfulltag|invshowmatch|invshowmode|invsi|invsm|invsmartcase|invsmartindent|invsmarttab|invsmd|invsn|invsol|invspell|invsplitbelow|invsplitright|invspr|invsr|invssl|invsta|invstartofline|invstmp|invswapfile|invswf|invta|invtagbsearch|invtagrelative|invtagstack|invtbi|invtbidi|invtbs|invtermbidi|invterse|invtextauto|invtextmode|invtf|invtgst|invtildeop|invtimeout|invtitle|invto|invtop|invtr|invttimeout|invttybuiltin|invttyfast|invtx|invvb|invvisualbell|invwa|invwarn|invwb|invweirdinvert|invwfh|invwfw|invwildmenu|invwinfixheight|invwinfixwidth|invwiv|invwmnu|invwrap|invwrapscan|invwrite|invwriteany|invwritebackup|invws|isf|isfname|isi|isident|isk|iskeyword|isprint|joinspaces|js|key|keymap|keymodel|keywordprg|km|kmp|kp|langmap|langmenu|laststatus|lazyredraw|lbr|lcs|linebreak|lines|linespace|lisp|lispwords|listchars|loadplugins|lpl|lsp|lz|macatsui|magic|makeef|makeprg|matchpairs|matchtime|maxcombine|maxfuncdepth|maxmapdepth|maxmem|maxmempattern|maxmemtot|mco|mef|menuitems|mfd|mh|mis|mkspellmem|ml|mls|mm|mmd|mmp|mmt|modeline|modelines|modifiable|modified|more|mouse|mousef|mousefocus|mousehide|mousem|mousemodel|mouses|mouseshape|mouset|mousetime|mp|mps|msm|mzq|mzquantum|nf|noacd|noai|noakm|noallowrevins|noaltkeymap|noanti|noantialias|noar|noarab|noarabic|noarabicshape|noari|noarshape|noautochdir|noautoindent|noautoread|noautowrite|noautowriteall|noaw|noawa|nobackup|noballooneval|nobeval|nobin|nobinary|nobiosk|nobioskey|nobk|nobl|nobomb|nobuflisted|nocf|noci|nocin|nocindent|nocompatible|noconfirm|noconsk|noconskey|nocopyindent|nocp|nocscopetag|nocscopeverbose|nocst|nocsverb|nocuc|nocul|nocursorcolumn|nocursorline|nodeco|nodelcombine|nodg|nodiff|nodigraph|nodisable|noea|noeb|noed|noedcompatible|noek|noendofline|noeol|noequalalways|noerrorbells|noesckeys|noet|noex|noexpandtab|noexrc|nofen|nofk|nofkmap|nofoldenable|nogd|nogdefault|noguipty|nohid|nohidden|nohk|nohkmap|nohkmapp|nohkp|nohls|noic|noicon|noignorecase|noim|noimc|noimcmdline|noimd|noincsearch|noinf|noinfercase|noinsertmode|nois|nojoinspaces|nojs|nolazyredraw|nolbr|nolinebreak|nolisp|nolist|noloadplugins|nolpl|nolz|noma|nomacatsui|nomagic|nomh|noml|nomod|nomodeline|nomodifiable|nomodified|nomore|nomousef|nomousefocus|nomousehide|nonu|nonumber|noodev|noopendevice|nopaste|nopi|nopreserveindent|nopreviewwindow|noprompt|nopvw|noreadonly|noremap|norestorescreen|norevins|nori|norightleft|norightleftcmd|norl|norlc|noro|nors|noru|noruler|nosb|nosc|noscb|noscrollbind|noscs|nosecure|nosft|noshellslash|noshelltemp|noshiftround|noshortname|noshowcmd|noshowfulltag|noshowmatch|noshowmode|nosi|nosm|nosmartcase|nosmartindent|nosmarttab|nosmd|nosn|nosol|nospell|nosplitbelow|nosplitright|nospr|nosr|nossl|nosta|nostartofline|nostmp|noswapfile|noswf|nota|notagbsearch|notagrelative|notagstack|notbi|notbidi|notbs|notermbidi|noterse|notextauto|notextmode|notf|notgst|notildeop|notimeout|notitle|noto|notop|notr|nottimeout|nottybuiltin|nottyfast|notx|novb|novisualbell|nowa|nowarn|nowb|noweirdinvert|nowfh|nowfw|nowildmenu|nowinfixheight|nowinfixwidth|nowiv|nowmnu|nowrap|nowrapscan|nowrite|nowriteany|nowritebackup|nows|nrformats|numberwidth|nuw|odev|oft|ofu|omnifunc|opendevice|operatorfunc|opfunc|osfiletype|pa|para|paragraphs|paste|pastetoggle|patchexpr|patchmode|path|pdev|penc|pex|pexpr|pfn|ph|pheader|pi|pm|pmbcs|pmbfn|popt|preserveindent|previewheight|previewwindow|printdevice|printencoding|printexpr|printfont|printheader|printmbcharset|printmbfont|printoptions|prompt|pt|pumheight|pvh|pvw|qe|quoteescape|readonly|remap|report|restorescreen|revins|rightleft|rightleftcmd|rl|rlc|ro|rs|rtp|ruf|ruler|rulerformat|runtimepath|sbo|sc|scb|scr|scroll|scrollbind|scrolljump|scrolloff|scrollopt|scs|sect|sections|secure|sel|selection|selectmode|sessionoptions|sft|shcf|shellcmdflag|shellpipe|shellquote|shellredir|shellslash|shelltemp|shelltype|shellxquote|shiftround|shiftwidth|shm|shortmess|shortname|showbreak|showcmd|showfulltag|showmatch|showmode|showtabline|shq|si|sidescroll|sidescrolloff|siso|sj|slm|smartcase|smartindent|smarttab|smc|smd|softtabstop|sol|spc|spell|spellcapcheck|spellfile|spelllang|spellsuggest|spf|spl|splitbelow|splitright|sps|sr|srr|ss|ssl|ssop|stal|startofline|statusline|stl|stmp|su|sua|suffixes|suffixesadd|sw|swapfile|swapsync|swb|swf|switchbuf|sws|sxq|syn|synmaxcol|syntax|t_AB|t_AF|t_AL|t_CS|t_CV|t_Ce|t_Co|t_Cs|t_DL|t_EI|t_F1|t_F2|t_F3|t_F4|t_F5|t_F6|t_F7|t_F8|t_F9|t_IE|t_IS|t_K1|t_K3|t_K4|t_K5|t_K6|t_K7|t_K8|t_K9|t_KA|t_KB|t_KC|t_KD|t_KE|t_KF|t_KG|t_KH|t_KI|t_KJ|t_KK|t_KL|t_RI|t_RV|t_SI|t_Sb|t_Sf|t_WP|t_WS|t_ZH|t_ZR|t_al|t_bc|t_cd|t_ce|t_cl|t_cm|t_cs|t_da|t_db|t_dl|t_fs|t_k1|t_k2|t_k3|t_k4|t_k5|t_k6|t_k7|t_k8|t_k9|t_kB|t_kD|t_kI|t_kN|t_kP|t_kb|t_kd|t_ke|t_kh|t_kl|t_kr|t_ks|t_ku|t_le|t_mb|t_md|t_me|t_mr|t_ms|t_nd|t_op|t_se|t_so|t_sr|t_te|t_ti|t_ts|t_ue|t_us|t_ut|t_vb|t_ve|t_vi|t_vs|t_xs|tabline|tabpagemax|tabstop|tagbsearch|taglength|tagrelative|tagstack|tal|tb|tbi|tbidi|tbis|tbs|tenc|term|termbidi|termencoding|terse|textauto|textmode|textwidth|tgst|thesaurus|tildeop|timeout|timeoutlen|title|titlelen|titleold|titlestring|toolbar|toolbariconsize|top|tpm|tsl|tsr|ttimeout|ttimeoutlen|ttm|tty|ttybuiltin|ttyfast|ttym|ttymouse|ttyscroll|ttytype|tw|tx|uc|ul|undolevels|updatecount|updatetime|ut|vb|vbs|vdir|verbosefile|vfile|viewdir|viewoptions|viminfo|virtualedit|visualbell|vop|wak|warn|wb|wc|wcm|wd|weirdinvert|wfh|wfw|whichwrap|wi|wig|wildchar|wildcharm|wildignore|wildmenu|wildmode|wildoptions|wim|winaltkeys|window|winfixheight|winfixwidth|winheight|winminheight|winminwidth|winwidth|wiv|wiw|wm|wmh|wmnu|wmw|wop|wrap|wrapmargin|wrapscan|writeany|writebackup|writedelay|ww)\b/,
	    number: /\b(?:0x[\da-f]+|\d+(?:\.\d+)?)\b/i,
	    operator:
	      /\|\||&&|[-+.]=?|[=!](?:[=~][#?]?)?|[<>]=?[#?]?|[*\/%?]|\b(?:is(?:not)?)\b/,
	    punctuation: /[{}[\](),;:]/
	  };
	}

	// @ts-nocheck
	visualBasic.displayName = 'visual-basic';
	visualBasic.aliases = ['vb', 'vba'];

	/** @type {import('../core.js').Syntax} */
	function visualBasic(Prism) {
	  Prism.languages['visual-basic'] = {
	    comment: {
	      pattern: /(?:['‘’]|REM\b)(?:[^\r\n_]|_(?:\r\n?|\n)?)*/i,
	      inside: {
	        keyword: /^REM/i
	      }
	    },
	    directive: {
	      pattern:
	        /#(?:Const|Else|ElseIf|End|ExternalChecksum|ExternalSource|If|Region)(?:\b_[ \t]*(?:\r\n?|\n)|.)+/i,
	      alias: 'property',
	      greedy: true
	    },
	    string: {
	      pattern: /\$?["“”](?:["“”]{2}|[^"“”])*["“”]C?/i,
	      greedy: true
	    },
	    date: {
	      pattern:
	        /#[ \t]*(?:\d+([/-])\d+\1\d+(?:[ \t]+(?:\d+[ \t]*(?:AM|PM)|\d+:\d+(?::\d+)?(?:[ \t]*(?:AM|PM))?))?|\d+[ \t]*(?:AM|PM)|\d+:\d+(?::\d+)?(?:[ \t]*(?:AM|PM))?)[ \t]*#/i,
	      alias: 'number'
	    },
	    number:
	      /(?:(?:\b\d+(?:\.\d+)?|\.\d+)(?:E[+-]?\d+)?|&[HO][\dA-F]+)(?:[FRD]|U?[ILS])?/i,
	    boolean: /\b(?:False|Nothing|True)\b/i,
	    keyword:
	      /\b(?:AddHandler|AddressOf|Alias|And(?:Also)?|As|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|C(?:Bool|Byte|Char|Date|Dbl|Dec|Int|Lng|Obj|SByte|Short|Sng|Str|Type|UInt|ULng|UShort)|Char|Class|Const|Continue|Currency|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else(?:If)?|End(?:If)?|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get(?:Type|XMLNamespace)?|Global|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|IsNot|Let|Lib|Like|Long|Loop|Me|Mod|Module|Must(?:Inherit|Override)|My(?:Base|Class)|Namespace|Narrowing|New|Next|Not(?:Inheritable|Overridable)?|Object|Of|On|Operator|Option(?:al)?|Or(?:Else)?|Out|Overloads|Overridable|Overrides|ParamArray|Partial|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|SByte|Select|Set|Shadows|Shared|short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TryCast|Type|TypeOf|U(?:Integer|Long|Short)|Until|Using|Variant|Wend|When|While|Widening|With(?:Events)?|WriteOnly|Xor)\b/i,
	    operator: /[+\-*/\\^<=>&#@$%!]|\b_(?=[ \t]*[\r\n])/,
	    punctuation: /[{}().,:?]/
	  };
	  Prism.languages.vb = Prism.languages['visual-basic'];
	  Prism.languages.vba = Prism.languages['visual-basic'];
	}

	// @ts-nocheck
	warpscript.displayName = 'warpscript';
	warpscript.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function warpscript(Prism) {
	  Prism.languages.warpscript = {
	    comment: /#.*|\/\/.*|\/\*[\s\S]*?\*\//,
	    string: {
	      pattern:
	        /"(?:[^"\\\r\n]|\\.)*"|'(?:[^'\\\r\n]|\\.)*'|<'(?:[^\\']|'(?!>)|\\.)*'>/,
	      greedy: true
	    },
	    variable: /\$\S+/,
	    macro: {
	      pattern: /@\S+/,
	      alias: 'property'
	    },
	    // WarpScript doesn't have any keywords, these are all functions under the control category
	    // https://www.warp10.io/tags/control
	    keyword:
	      /\b(?:BREAK|CHECKMACRO|CONTINUE|CUDF|DEFINED|DEFINEDMACRO|EVAL|FAIL|FOR|FOREACH|FORSTEP|IFT|IFTE|MSGFAIL|NRETURN|RETHROW|RETURN|SWITCH|TRY|UDF|UNTIL|WHILE)\b/,
	    number:
	      /[+-]?\b(?:NaN|Infinity|\d+(?:\.\d*)?(?:[Ee][+-]?\d+)?|0x[\da-fA-F]+|0b[01]+)\b/,
	    boolean: /\b(?:F|T|false|true)\b/,
	    punctuation: /<%|%>|[{}[\]()]/,
	    // Some operators from the "operators" category
	    // https://www.warp10.io/tags/operators
	    operator:
	      /==|&&?|\|\|?|\*\*?|>>>?|<<|[<>!~]=?|[-/%^]|\+!?|\b(?:AND|NOT|OR)\b/
	  };
	}

	// @ts-nocheck
	wasm.displayName = 'wasm';
	wasm.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function wasm(Prism) {
	  Prism.languages.wasm = {
	    comment: [
	      /\(;[\s\S]*?;\)/,
	      {
	        pattern: /;;.*/,
	        greedy: true
	      }
	    ],
	    string: {
	      pattern: /"(?:\\[\s\S]|[^"\\])*"/,
	      greedy: true
	    },
	    keyword: [
	      {
	        pattern: /\b(?:align|offset)=/,
	        inside: {
	          operator: /=/
	        }
	      },
	      {
	        pattern:
	          /\b(?:(?:f32|f64|i32|i64)(?:\.(?:abs|add|and|ceil|clz|const|convert_[su]\/i(?:32|64)|copysign|ctz|demote\/f64|div(?:_[su])?|eqz?|extend_[su]\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|neg?|nearest|or|popcnt|promote\/f32|reinterpret\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|sqrt|store(?:8|16|32)?|sub|trunc(?:_[su]\/f(?:32|64))?|wrap\/i64|xor))?|memory\.(?:grow|size))\b/,
	        inside: {
	          punctuation: /\./
	        }
	      },
	      /\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\b/
	    ],
	    variable: /\$[\w!#$%&'*+\-./:<=>?@\\^`|~]+/,
	    number:
	      /[+-]?\b(?:\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:[eE][+-]?\d(?:_?\d)*)?|0x[\da-fA-F](?:_?[\da-fA-F])*(?:\.[\da-fA-F](?:_?[\da-fA-D])*)?(?:[pP][+-]?\d(?:_?\d)*)?)\b|\binf\b|\bnan(?::0x[\da-fA-F](?:_?[\da-fA-D])*)?\b/,
	    punctuation: /[()]/
	  };
	}

	// @ts-nocheck
	webIdl.displayName = 'web-idl';
	webIdl.aliases = ['webidl'];

	/** @type {import('../core.js').Syntax} */
	function webIdl(Prism) {
	(function (Prism) {
	    var id = /(?:\B-|\b_|\b)[A-Za-z][\w-]*(?![\w-])/.source;
	    var type =
	      '(?:' +
	      /\b(?:unsigned\s+)?long\s+long(?![\w-])/.source +
	      '|' +
	      /\b(?:unrestricted|unsigned)\s+[a-z]+(?![\w-])/.source +
	      '|' +
	      /(?!(?:unrestricted|unsigned)\b)/.source +
	      id +
	      /(?:\s*<(?:[^<>]|<[^<>]*>)*>)?/.source +
	      ')' +
	      /(?:\s*\?)?/.source;
	    var typeInside = {};
	    Prism.languages['web-idl'] = {
	      comment: {
	        pattern: /\/\/.*|\/\*[\s\S]*?\*\//,
	        greedy: true
	      },
	      string: {
	        pattern: /"[^"]*"/,
	        greedy: true
	      },
	      namespace: {
	        pattern: RegExp(/(\bnamespace\s+)/.source + id),
	        lookbehind: true
	      },
	      'class-name': [
	        {
	          pattern:
	            /(^|[^\w-])(?:iterable|maplike|setlike)\s*<(?:[^<>]|<[^<>]*>)*>/,
	          lookbehind: true,
	          inside: typeInside
	        },
	        {
	          pattern: RegExp(
	            /(\b(?:attribute|const|deleter|getter|optional|setter)\s+)/.source +
	              type
	          ),
	          lookbehind: true,
	          inside: typeInside
	        },
	        {
	          // callback return type
	          pattern: RegExp(
	            '(' + /\bcallback\s+/.source + id + /\s*=\s*/.source + ')' + type
	          ),
	          lookbehind: true,
	          inside: typeInside
	        },
	        {
	          // typedef
	          pattern: RegExp(/(\btypedef\b\s*)/.source + type),
	          lookbehind: true,
	          inside: typeInside
	        },
	        {
	          pattern: RegExp(
	            /(\b(?:callback|dictionary|enum|interface(?:\s+mixin)?)\s+)(?!(?:interface|mixin)\b)/
	              .source + id
	          ),
	          lookbehind: true
	        },
	        {
	          // inheritance
	          pattern: RegExp(/(:\s*)/.source + id),
	          lookbehind: true
	        },
	        // includes and implements
	        RegExp(id + /(?=\s+(?:implements|includes)\b)/.source),
	        {
	          pattern: RegExp(/(\b(?:implements|includes)\s+)/.source + id),
	          lookbehind: true
	        },
	        {
	          // function return type, parameter types, and dictionary members
	          pattern: RegExp(
	            type +
	              '(?=' +
	              /\s*(?:\.{3}\s*)?/.source +
	              id +
	              /\s*[(),;=]/.source +
	              ')'
	          ),
	          inside: typeInside
	        }
	      ],
	      builtin:
	        /\b(?:ArrayBuffer|BigInt64Array|BigUint64Array|ByteString|DOMString|DataView|Float32Array|Float64Array|FrozenArray|Int16Array|Int32Array|Int8Array|ObservableArray|Promise|USVString|Uint16Array|Uint32Array|Uint8Array|Uint8ClampedArray)\b/,
	      keyword: [
	        /\b(?:async|attribute|callback|const|constructor|deleter|dictionary|enum|getter|implements|includes|inherit|interface|mixin|namespace|null|optional|or|partial|readonly|required|setter|static|stringifier|typedef|unrestricted)\b/,
	        // type keywords
	        /\b(?:any|bigint|boolean|byte|double|float|iterable|long|maplike|object|octet|record|sequence|setlike|short|symbol|undefined|unsigned|void)\b/
	      ],
	      boolean: /\b(?:false|true)\b/,
	      number: {
	        pattern:
	          /(^|[^\w-])-?(?:0x[0-9a-f]+|(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?|NaN|Infinity)(?![\w-])/i,
	        lookbehind: true
	      },
	      operator: /\.{3}|[=:?<>-]/,
	      punctuation: /[(){}[\].,;]/
	    };
	    for (var key in Prism.languages['web-idl']) {
	      if (key !== 'class-name') {
	        typeInside[key] = Prism.languages['web-idl'][key];
	      }
	    }
	    Prism.languages['webidl'] = Prism.languages['web-idl'];
	  })(Prism);
	}

	// @ts-nocheck
	wgsl.displayName = 'wgsl';
	wgsl.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function wgsl(Prism) {
	  Prism.languages.wgsl = {
	    comment: {
	      pattern: /\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,
	      greedy: true
	    },
	    'builtin-attribute': {
	      pattern: /(@)builtin\(.*?\)/,
	      lookbehind: true,
	      inside: {
	        attribute: {
	          pattern: /^builtin/,
	          alias: 'attr-name'
	        },
	        punctuation: /[(),]/,
	        'built-in-values': {
	          pattern:
	            /\b(?:frag_depth|front_facing|global_invocation_id|instance_index|local_invocation_id|local_invocation_index|num_workgroups|position|sample_index|sample_mask|vertex_index|workgroup_id)\b/,
	          alias: 'attr-value'
	        }
	      }
	    },
	    attributes: {
	      pattern:
	        /(@)(?:align|binding|compute|const|fragment|group|id|interpolate|invariant|location|size|vertex|workgroup_size)/i,
	      lookbehind: true,
	      alias: 'attr-name'
	    },
	    functions: {
	      pattern: /\b(fn\s+)[_a-zA-Z]\w*(?=[(<])/,
	      lookbehind: true,
	      alias: 'function'
	    },
	    keyword:
	      /\b(?:bitcast|break|case|const|continue|continuing|default|discard|else|enable|fallthrough|fn|for|function|if|let|loop|private|return|storage|struct|switch|type|uniform|var|while|workgroup)\b/,
	    builtin:
	      /\b(?:abs|acos|acosh|all|any|array|asin|asinh|atan|atan2|atanh|atomic|atomicAdd|atomicAnd|atomicCompareExchangeWeak|atomicExchange|atomicLoad|atomicMax|atomicMin|atomicOr|atomicStore|atomicSub|atomicXor|bool|ceil|clamp|cos|cosh|countLeadingZeros|countOneBits|countTrailingZeros|cross|degrees|determinant|distance|dot|dpdx|dpdxCoarse|dpdxFine|dpdy|dpdyCoarse|dpdyFine|exp|exp2|extractBits|f32|f64|faceForward|firstLeadingBit|floor|fma|fract|frexp|fwidth|fwidthCoarse|fwidthFine|i32|i64|insertBits|inverseSqrt|ldexp|length|log|log2|mat[2-4]x[2-4]|max|min|mix|modf|normalize|override|pack2x16float|pack2x16snorm|pack2x16unorm|pack4x8snorm|pack4x8unorm|pow|ptr|quantizeToF16|radians|reflect|refract|reverseBits|round|sampler|sampler_comparison|select|shiftLeft|shiftRight|sign|sin|sinh|smoothstep|sqrt|staticAssert|step|storageBarrier|tan|tanh|textureDimensions|textureGather|textureGatherCompare|textureLoad|textureNumLayers|textureNumLevels|textureNumSamples|textureSample|textureSampleBias|textureSampleCompare|textureSampleCompareLevel|textureSampleGrad|textureSampleLevel|textureStore|texture_1d|texture_2d|texture_2d_array|texture_3d|texture_cube|texture_cube_array|texture_depth_2d|texture_depth_2d_array|texture_depth_cube|texture_depth_cube_array|texture_depth_multisampled_2d|texture_multisampled_2d|texture_storage_1d|texture_storage_2d|texture_storage_2d_array|texture_storage_3d|transpose|trunc|u32|u64|unpack2x16float|unpack2x16snorm|unpack2x16unorm|unpack4x8snorm|unpack4x8unorm|vec[2-4]|workgroupBarrier)\b/,
	    'function-calls': {
	      pattern: /\b[_a-z]\w*(?=\()/i,
	      alias: 'function'
	    },
	    'class-name': /\b(?:[A-Z][A-Za-z0-9]*)\b/,
	    'bool-literal': {
	      pattern: /\b(?:false|true)\b/,
	      alias: 'boolean'
	    },
	    'hex-int-literal': {
	      pattern: /\b0[xX][0-9a-fA-F]+[iu]?\b(?![.pP])/,
	      alias: 'number'
	    },
	    'hex-float-literal': {
	      pattern: /\b0[xX][0-9a-fA-F]*(?:\.[0-9a-fA-F]*)?(?:[pP][+-]?\d+[fh]?)?/,
	      alias: 'number'
	    },
	    'decimal-float-literal': [
	      {
	        pattern: /\d*\.\d+(?:[eE](?:\+|-)?\d+)?[fh]?/,
	        alias: 'number'
	      },
	      {
	        pattern: /\d+\.\d*(?:[eE](?:\+|-)?\d+)?[fh]?/,
	        alias: 'number'
	      },
	      {
	        pattern: /\d+[eE](?:\+|-)?\d+[fh]?/,
	        alias: 'number'
	      },
	      {
	        pattern: /\b\d+[fh]\b/,
	        alias: 'number'
	      }
	    ],
	    'int-literal': {
	      pattern: /\b\d+[iu]?\b/,
	      alias: 'number'
	    },
	    operator: [
	      {
	        pattern: /(?:\^|~|\|(?!\|)|\|\||&&|<<|>>|!)(?!=)/
	      },
	      {
	        pattern: /&(?![&=])/
	      },
	      {
	        pattern: /(?:\+=|-=|\*=|\/=|%=|\^=|&=|\|=|<<=|>>=)/
	      },
	      {
	        pattern: /(^|[^<>=!])=(?![=>])/,
	        lookbehind: true
	      },
	      {
	        pattern: /(?:==|!=|<=|\+\+|--|(^|[^=])>=)/,
	        lookbehind: true
	      },
	      {
	        pattern: /(?:(?:[+%]|(?:\*(?!\w)))(?!=))|(?:-(?!>))|(?:\/(?!\/))/
	      },
	      {
	        pattern: /->/
	      }
	    ],
	    punctuation: /[@(){}[\],;<>:.]/
	  };
	}

	// @ts-nocheck
	wiki.displayName = 'wiki';
	wiki.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function wiki(Prism) {
	  Prism.register(markup);
	  Prism.languages.wiki = Prism.languages.extend('markup', {
	    'block-comment': {
	      pattern: /(^|[^\\])\/\*[\s\S]*?\*\//,
	      lookbehind: true,
	      alias: 'comment'
	    },
	    heading: {
	      pattern: /^(=+)[^=\r\n].*?\1/m,
	      inside: {
	        punctuation: /^=+|=+$/,
	        important: /.+/
	      }
	    },
	    emphasis: {
	      // TODO Multi-line
	      pattern: /('{2,5}).+?\1/,
	      inside: {
	        'bold-italic': {
	          pattern: /(''''').+?(?=\1)/,
	          lookbehind: true,
	          alias: ['bold', 'italic']
	        },
	        bold: {
	          pattern: /(''')[^'](?:.*?[^'])?(?=\1)/,
	          lookbehind: true
	        },
	        italic: {
	          pattern: /('')[^'](?:.*?[^'])?(?=\1)/,
	          lookbehind: true
	        },
	        punctuation: /^''+|''+$/
	      }
	    },
	    hr: {
	      pattern: /^-{4,}/m,
	      alias: 'punctuation'
	    },
	    url: [
	      /ISBN +(?:97[89][ -]?)?(?:\d[ -]?){9}[\dx]\b|(?:PMID|RFC) +\d+/i,
	      /\[\[.+?\]\]|\[.+?\]/
	    ],
	    variable: [
	      /__[A-Z]+__/,
	      // FIXME Nested structures should be handled
	      // {{formatnum:{{#expr:{{{3}}}}}}}
	      /\{{3}.+?\}{3}/,
	      /\{\{.+?\}\}/
	    ],
	    symbol: [/^#redirect/im, /~{3,5}/],
	    // Handle table attrs:
	    // {|
	    // ! style="text-align:left;"| Item
	    // |}
	    'table-tag': {
	      pattern: /((?:^|[|!])[|!])[^|\r\n]+\|(?!\|)/m,
	      lookbehind: true,
	      inside: {
	        'table-bar': {
	          pattern: /\|$/,
	          alias: 'punctuation'
	        },
	        rest: Prism.languages.markup['tag'].inside
	      }
	    },
	    punctuation: /^(?:\{\||\|\}|\|-|[*#:;!|])|\|\||!!/m
	  });
	  Prism.languages.insertBefore('wiki', 'tag', {
	    // Prevent highlighting inside <nowiki>, <source> and <pre> tags
	    nowiki: {
	      pattern: /<(nowiki|pre|source)\b[^>]*>[\s\S]*?<\/\1>/i,
	      inside: {
	        tag: {
	          pattern: /<(?:nowiki|pre|source)\b[^>]*>|<\/(?:nowiki|pre|source)>/i,
	          inside: Prism.languages.markup['tag'].inside
	        }
	      }
	    }
	  });
	}

	// @ts-nocheck
	wolfram.displayName = 'wolfram';
	wolfram.aliases = ['mathematica', 'nb', 'wl'];

	/** @type {import('../core.js').Syntax} */
	function wolfram(Prism) {
	  Prism.languages.wolfram = {
	    comment:
	      // Allow one level of nesting - note: regex taken from applescipt
	      /\(\*(?:\(\*(?:[^*]|\*(?!\)))*\*\)|(?!\(\*)[\s\S])*?\*\)/,
	    string: {
	      pattern: /"(?:\\.|[^"\\\r\n])*"/,
	      greedy: true
	    },
	    keyword:
	      /\b(?:Abs|AbsArg|Accuracy|Block|Do|For|Function|If|Manipulate|Module|Nest|NestList|None|Return|Switch|Table|Which|While)\b/,
	    context: {
	      pattern: /\b\w+`+\w*/,
	      alias: 'class-name'
	    },
	    blank: {
	      pattern: /\b\w+_\b/,
	      alias: 'regex'
	    },
	    'global-variable': {
	      pattern: /\$\w+/,
	      alias: 'variable'
	    },
	    boolean: /\b(?:False|True)\b/,
	    number:
	      /(?:\b(?=\d)|\B(?=\.))(?:0[bo])?(?:(?:\d|0x[\da-f])[\da-f]*(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?j?\b/i,
	    operator:
	      /\/\.|;|=\.|\^=|\^:=|:=|<<|>>|<\||\|>|:>|\|->|->|<-|@@@|@@|@|\/@|=!=|===|==|=|\+|-|\[\/-+%=\]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,
	    punctuation: /[{}[\];(),.:]/
	  };
	  Prism.languages.mathematica = Prism.languages.wolfram;
	  Prism.languages.wl = Prism.languages.wolfram;
	  Prism.languages.nb = Prism.languages.wolfram;
	}

	// @ts-nocheck
	wren.displayName = 'wren';
	wren.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function wren(Prism) {
	  // https://wren.io/

	  Prism.languages.wren = {
	    // Multiline comments in Wren can have nested multiline comments
	    // Comments: // and /* */
	    comment: [
	      {
	        // support 3 levels of nesting
	        // regex: \/\*(?:[^*/]|\*(?!\/)|\/(?!\*)|<self>)*\*\/
	        pattern:
	          /\/\*(?:[^*/]|\*(?!\/)|\/(?!\*)|\/\*(?:[^*/]|\*(?!\/)|\/(?!\*)|\/\*(?:[^*/]|\*(?!\/)|\/(?!\*))*\*\/)*\*\/)*\*\//,
	        greedy: true
	      },
	      {
	        pattern: /(^|[^\\:])\/\/.*/,
	        lookbehind: true,
	        greedy: true
	      }
	    ],
	    // Triple quoted strings are multiline but cannot have interpolation (raw strings)
	    // Based on prism-python.js
	    'triple-quoted-string': {
	      pattern: /"""[\s\S]*?"""/,
	      greedy: true,
	      alias: 'string'
	    },
	    // see below
	    'string-literal': null,
	    // #!/usr/bin/env wren on the first line
	    hashbang: {
	      pattern: /^#!\/.+/,
	      greedy: true,
	      alias: 'comment'
	    },
	    // Attributes are special keywords to add meta data to classes
	    attribute: {
	      // #! attributes are stored in class properties
	      // #!myvar = true
	      // #attributes are not stored and dismissed at compilation
	      pattern: /#!?[ \t\u3000]*\w+/,
	      alias: 'keyword'
	    },
	    'class-name': [
	      {
	        // class definition
	        // class Meta {}
	        pattern: /(\bclass\s+)\w+/,
	        lookbehind: true
	      },
	      // A class must always start with an uppercase.
	      // File.read
	      /\b[A-Z][a-z\d_]*\b/
	    ],
	    // A constant can be a variable, class, property or method. Just named in all uppercase letters
	    constant: /\b[A-Z][A-Z\d_]*\b/,
	    null: {
	      pattern: /\bnull\b/,
	      alias: 'keyword'
	    },
	    keyword:
	      /\b(?:as|break|class|construct|continue|else|for|foreign|if|import|in|is|return|static|super|this|var|while)\b/,
	    boolean: /\b(?:false|true)\b/,
	    number: /\b(?:0x[\da-f]+|\d+(?:\.\d+)?(?:e[+-]?\d+)?)\b/i,
	    // Functions can be Class.method()
	    function: /\b[a-z_]\w*(?=\s*[({])/i,
	    operator: /<<|>>|[=!<>]=?|&&|\|\||[-+*/%~^&|?:]|\.{2,3}/,
	    punctuation: /[\[\](){}.,;]/
	  };
	  Prism.languages.wren['string-literal'] = {
	    // A single quote string is multiline and can have interpolation (similar to JS backticks ``)
	    pattern:
	      /(^|[^\\"])"(?:[^\\"%]|\\[\s\S]|%(?!\()|%\((?:[^()]|\((?:[^()]|\([^)]*\))*\))*\))*"/,
	    lookbehind: true,
	    greedy: true,
	    inside: {
	      interpolation: {
	        // "%(interpolation)"
	        pattern:
	          /((?:^|[^\\])(?:\\{2})*)%\((?:[^()]|\((?:[^()]|\([^)]*\))*\))*\)/,
	        lookbehind: true,
	        inside: {
	          expression: {
	            pattern: /^(%\()[\s\S]+(?=\)$)/,
	            lookbehind: true,
	            inside: Prism.languages.wren
	          },
	          'interpolation-punctuation': {
	            pattern: /^%\(|\)$/,
	            alias: 'punctuation'
	          }
	        }
	      },
	      string: /[\s\S]+/
	    }
	  };
	}

	// @ts-nocheck
	xeora.displayName = 'xeora';
	xeora.aliases = ['xeoracube'];

	/** @type {import('../core.js').Syntax} */
	function xeora(Prism) {
	  Prism.register(markup)
	  ;(function (Prism) {
	    Prism.languages.xeora = Prism.languages.extend('markup', {
	      constant: {
	        pattern: /\$(?:DomainContents|PageRenderDuration)\$/,
	        inside: {
	          punctuation: {
	            pattern: /\$/
	          }
	        }
	      },
	      variable: {
	        pattern: /\$@?(?:#+|[-+*~=^])?[\w.]+\$/,
	        inside: {
	          punctuation: {
	            pattern: /[$.]/
	          },
	          operator: {
	            pattern: /#+|[-+*~=^@]/
	          }
	        }
	      },
	      'function-inline': {
	        pattern:
	          /\$F:[-\w.]+\?[-\w.]+(?:,(?:(?:@[-#]*\w+\.[\w+.]\.*)*\|)*(?:(?:[\w+]|[-#*.~^]+[\w+]|=\S)(?:[^$=]|=+[^=])*=*|(?:@[-#]*\w+\.[\w+.]\.*)+(?:(?:[\w+]|[-#*~^][-#*.~^]*[\w+]|=\S)(?:[^$=]|=+[^=])*=*)?)?)?\$/,
	        inside: {
	          variable: {
	            pattern: /(?:[,|])@?(?:#+|[-+*~=^])?[\w.]+/,
	            inside: {
	              punctuation: {
	                pattern: /[,.|]/
	              },
	              operator: {
	                pattern: /#+|[-+*~=^@]/
	              }
	            }
	          },
	          punctuation: {
	            pattern: /\$\w:|[$:?.,|]/
	          }
	        },
	        alias: 'function'
	      },
	      'function-block': {
	        pattern:
	          /\$XF:\{[-\w.]+\?[-\w.]+(?:,(?:(?:@[-#]*\w+\.[\w+.]\.*)*\|)*(?:(?:[\w+]|[-#*.~^]+[\w+]|=\S)(?:[^$=]|=+[^=])*=*|(?:@[-#]*\w+\.[\w+.]\.*)+(?:(?:[\w+]|[-#*~^][-#*.~^]*[\w+]|=\S)(?:[^$=]|=+[^=])*=*)?)?)?\}:XF\$/,
	        inside: {
	          punctuation: {
	            pattern: /[$:{}?.,|]/
	          }
	        },
	        alias: 'function'
	      },
	      'directive-inline': {
	        pattern: /\$\w(?:#\d+\+?)?(?:\[[-\w.]+\])?:[-\/\w.]+\$/,
	        inside: {
	          punctuation: {
	            pattern: /\$(?:\w:|C(?:\[|#\d))?|[:{[\]]/,
	            inside: {
	              tag: {
	                pattern: /#\d/
	              }
	            }
	          }
	        },
	        alias: 'function'
	      },
	      'directive-block-open': {
	        pattern:
	          /\$\w+:\{|\$\w(?:#\d+\+?)?(?:\[[-\w.]+\])?:[-\w.]+:\{(?:![A-Z]+)?/,
	        inside: {
	          punctuation: {
	            pattern: /\$(?:\w:|C(?:\[|#\d))?|[:{[\]]/,
	            inside: {
	              tag: {
	                pattern: /#\d/
	              }
	            }
	          },
	          attribute: {
	            pattern: /![A-Z]+$/,
	            inside: {
	              punctuation: {
	                pattern: /!/
	              }
	            },
	            alias: 'keyword'
	          }
	        },
	        alias: 'function'
	      },
	      'directive-block-separator': {
	        pattern: /\}:[-\w.]+:\{/,
	        inside: {
	          punctuation: {
	            pattern: /[:{}]/
	          }
	        },
	        alias: 'function'
	      },
	      'directive-block-close': {
	        pattern: /\}:[-\w.]+\$/,
	        inside: {
	          punctuation: {
	            pattern: /[:{}$]/
	          }
	        },
	        alias: 'function'
	      }
	    });
	    Prism.languages.insertBefore(
	      'inside',
	      'punctuation',
	      {
	        variable: Prism.languages.xeora['function-inline'].inside['variable']
	      },
	      Prism.languages.xeora['function-block']
	    );
	    Prism.languages.xeoracube = Prism.languages.xeora;
	  })(Prism);
	}

	// @ts-nocheck
	xmlDoc.displayName = 'xml-doc';
	xmlDoc.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function xmlDoc(Prism) {
	  Prism.register(markup)
	  ;(function (Prism) {
	    /**
	     * If the given language is present, it will insert the given doc comment grammar token into it.
	     *
	     * @param {string} lang
	     * @param {any} docComment
	     */
	    function insertDocComment(lang, docComment) {
	      if (Prism.languages[lang]) {
	        Prism.languages.insertBefore(lang, 'comment', {
	          'doc-comment': docComment
	        });
	      }
	    }
	    var tag = Prism.languages.markup.tag;
	    var slashDocComment = {
	      pattern: /\/\/\/.*/,
	      greedy: true,
	      alias: 'comment',
	      inside: {
	        tag: tag
	      }
	    };
	    var tickDocComment = {
	      pattern: /'''.*/,
	      greedy: true,
	      alias: 'comment',
	      inside: {
	        tag: tag
	      }
	    };
	    insertDocComment('csharp', slashDocComment);
	    insertDocComment('fsharp', slashDocComment);
	    insertDocComment('vbnet', tickDocComment);
	  })(Prism);
	}

	// @ts-nocheck
	xojo.displayName = 'xojo';
	xojo.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function xojo(Prism) {
	  Prism.languages.xojo = {
	    comment: {
	      pattern: /(?:'|\/\/|Rem\b).+/i,
	      greedy: true
	    },
	    string: {
	      pattern: /"(?:""|[^"])*"/,
	      greedy: true
	    },
	    number: [/(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:E[+-]?\d+)?/i, /&[bchou][a-z\d]+/i],
	    directive: {
	      pattern: /#(?:Else|ElseIf|Endif|If|Pragma)\b/i,
	      alias: 'property'
	    },
	    keyword:
	      /\b(?:AddHandler|App|Array|As(?:signs)?|Auto|Boolean|Break|By(?:Ref|Val)|Byte|Call|Case|Catch|CFStringRef|CGFloat|Class|Color|Const|Continue|CString|Currency|CurrentMethodName|Declare|Delegate|Dim|Do(?:uble|wnTo)?|Each|Else(?:If)?|End|Enumeration|Event|Exception|Exit|Extends|False|Finally|For|Function|Get|GetTypeInfo|Global|GOTO|If|Implements|In|Inherits|Int(?:8|16|32|64|eger|erface)?|Lib|Loop|Me|Module|Next|Nil|Object|Optional|OSType|ParamArray|Private|Property|Protected|PString|Ptr|Raise(?:Event)?|ReDim|RemoveHandler|Return|Select(?:or)?|Self|Set|Shared|Short|Single|Soft|Static|Step|String|Sub|Super|Text|Then|To|True|Try|Ubound|UInt(?:8|16|32|64|eger)?|Until|Using|Var(?:iant)?|Wend|While|WindowPtr|WString)\b/i,
	    operator:
	      /<[=>]?|>=?|[+\-*\/\\^=]|\b(?:AddressOf|And|Ctype|IsA?|Mod|New|Not|Or|WeakAddressOf|Xor)\b/i,
	    punctuation: /[.,;:()]/
	  };
	}

	// @ts-nocheck
	xquery.displayName = 'xquery';
	xquery.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function xquery(Prism) {
	  Prism.register(markup)
	  ;(function (Prism) {
	    Prism.languages.xquery = Prism.languages.extend('markup', {
	      'xquery-comment': {
	        pattern: /\(:[\s\S]*?:\)/,
	        greedy: true,
	        alias: 'comment'
	      },
	      string: {
	        pattern: /(["'])(?:\1\1|(?!\1)[\s\S])*\1/,
	        greedy: true
	      },
	      extension: {
	        pattern: /\(#.+?#\)/,
	        alias: 'symbol'
	      },
	      variable: /\$[-\w:]+/,
	      axis: {
	        pattern:
	          /(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,
	        lookbehind: true,
	        alias: 'operator'
	      },
	      'keyword-operator': {
	        pattern:
	          /(^|[^:-])\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\b(?=$|[^:-])/,
	        lookbehind: true,
	        alias: 'operator'
	      },
	      keyword: {
	        pattern:
	          /(^|[^:-])\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\b(?=$|[^:-])/,
	        lookbehind: true
	      },
	      function: /[\w-]+(?::[\w-]+)*(?=\s*\()/,
	      'xquery-element': {
	        pattern: /(element\s+)[\w-]+(?::[\w-]+)*/,
	        lookbehind: true,
	        alias: 'tag'
	      },
	      'xquery-attribute': {
	        pattern: /(attribute\s+)[\w-]+(?::[\w-]+)*/,
	        lookbehind: true,
	        alias: 'attr-name'
	      },
	      builtin: {
	        pattern:
	          /(^|[^:-])\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:ENTITIES|ENTITY|ID|IDREFS?|NCName|NMTOKENS?|NOTATION|Name|QName|anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|int|integer|language|long|negativeInteger|nonNegativeInteger|nonPositiveInteger|normalizedString|positiveInteger|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\b(?=$|[^:-])/,
	        lookbehind: true
	      },
	      number: /\b\d+(?:\.\d+)?(?:E[+-]?\d+)?/,
	      operator: [
	        /[+*=?|@]|\.\.?|:=|!=|<[=<]?|>[=>]?/,
	        {
	          pattern: /(\s)-(?=\s)/,
	          lookbehind: true
	        }
	      ],
	      punctuation: /[[\](){},;:/]/
	    });
	    Prism.languages.xquery.tag.pattern =
	      /<\/?(?!\d)[^\s>\/=$<%]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\[\s\S]|\{(?!\{)(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])+\}|(?!\1)[^\\])*\1|[^\s'">=]+))?)*\s*\/?>/;
	    Prism.languages.xquery['tag'].inside['attr-value'].pattern =
	      /=(?:("|')(?:\\[\s\S]|\{(?!\{)(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])+\}|(?!\1)[^\\])*\1|[^\s'">=]+)/;
	    Prism.languages.xquery['tag'].inside['attr-value'].inside['punctuation'] =
	      /^="|"$/;
	    Prism.languages.xquery['tag'].inside['attr-value'].inside['expression'] = {
	      // Allow for two levels of nesting
	      pattern: /\{(?!\{)(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])+\}/,
	      inside: Prism.languages.xquery,
	      alias: 'language-xquery'
	    };

	    // The following will handle plain text inside tags
	    var stringifyToken = function (token) {
	      if (typeof token === 'string') {
	        return token
	      }
	      if (typeof token.content === 'string') {
	        return token.content
	      }
	      return token.content.map(stringifyToken).join('')
	    };
	    var walkTokens = function (tokens) {
	      var openedTags = [];
	      for (var i = 0; i < tokens.length; i++) {
	        var token = tokens[i];
	        var notTagNorBrace = false;
	        if (typeof token !== 'string') {
	          if (
	            token.type === 'tag' &&
	            token.content[0] &&
	            token.content[0].type === 'tag'
	          ) {
	            // We found a tag, now find its kind

	            if (token.content[0].content[0].content === '</') {
	              // Closing tag
	              if (
	                openedTags.length > 0 &&
	                openedTags[openedTags.length - 1].tagName ===
	                  stringifyToken(token.content[0].content[1])
	              ) {
	                // Pop matching opening tag
	                openedTags.pop();
	              }
	            } else {
	              if (token.content[token.content.length - 1].content === '/>') ; else {
	                // Opening tag
	                openedTags.push({
	                  tagName: stringifyToken(token.content[0].content[1]),
	                  openedBraces: 0
	                });
	              }
	            }
	          } else if (
	            openedTags.length > 0 &&
	            token.type === 'punctuation' &&
	            token.content === '{' &&
	            // Ignore `{{`
	            (!tokens[i + 1] ||
	              tokens[i + 1].type !== 'punctuation' ||
	              tokens[i + 1].content !== '{') &&
	            (!tokens[i - 1] ||
	              tokens[i - 1].type !== 'plain-text' ||
	              tokens[i - 1].content !== '{')
	          ) {
	            // Here we might have entered an XQuery expression inside a tag
	            openedTags[openedTags.length - 1].openedBraces++;
	          } else if (
	            openedTags.length > 0 &&
	            openedTags[openedTags.length - 1].openedBraces > 0 &&
	            token.type === 'punctuation' &&
	            token.content === '}'
	          ) {
	            // Here we might have left an XQuery expression inside a tag
	            openedTags[openedTags.length - 1].openedBraces--;
	          } else if (token.type !== 'comment') {
	            notTagNorBrace = true;
	          }
	        }
	        if (notTagNorBrace || typeof token === 'string') {
	          if (
	            openedTags.length > 0 &&
	            openedTags[openedTags.length - 1].openedBraces === 0
	          ) {
	            // Here we are inside a tag, and not inside an XQuery expression.
	            // That's plain text: drop any tokens matched.
	            var plainText = stringifyToken(token);

	            // And merge text with adjacent text
	            if (
	              i < tokens.length - 1 &&
	              (typeof tokens[i + 1] === 'string' ||
	                tokens[i + 1].type === 'plain-text')
	            ) {
	              plainText += stringifyToken(tokens[i + 1]);
	              tokens.splice(i + 1, 1);
	            }
	            if (
	              i > 0 &&
	              (typeof tokens[i - 1] === 'string' ||
	                tokens[i - 1].type === 'plain-text')
	            ) {
	              plainText = stringifyToken(tokens[i - 1]) + plainText;
	              tokens.splice(i - 1, 1);
	              i--;
	            }
	            if (/^\s+$/.test(plainText)) {
	              tokens[i] = plainText;
	            } else {
	              tokens[i] = new Prism.Token(
	                'plain-text',
	                plainText,
	                null,
	                plainText
	              );
	            }
	          }
	        }
	        if (token.content && typeof token.content !== 'string') {
	          walkTokens(token.content);
	        }
	      }
	    };
	    Prism.hooks.add('after-tokenize', function (env) {
	      if (env.language !== 'xquery') {
	        return
	      }
	      walkTokens(env.tokens);
	    });
	  })(Prism);
	}

	// @ts-nocheck
	yang.displayName = 'yang';
	yang.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function yang(Prism) {
	  Prism.languages.yang = {
	    // https://tools.ietf.org/html/rfc6020#page-34
	    // http://www.yang-central.org/twiki/bin/view/Main/YangExamples
	    comment: /\/\*[\s\S]*?\*\/|\/\/.*/,
	    string: {
	      pattern: /"(?:[^\\"]|\\.)*"|'[^']*'/,
	      greedy: true
	    },
	    keyword: {
	      pattern: /(^|[{};\r\n][ \t]*)[a-z_][\w.-]*/i,
	      lookbehind: true
	    },
	    namespace: {
	      pattern: /(\s)[a-z_][\w.-]*(?=:)/i,
	      lookbehind: true
	    },
	    boolean: /\b(?:false|true)\b/,
	    operator: /\+/,
	    punctuation: /[{};:]/
	  };
	}

	// @ts-nocheck
	zig.displayName = 'zig';
	zig.aliases = [];

	/** @type {import('../core.js').Syntax} */
	function zig(Prism) {
	(function (Prism) {
	    function literal(str) {
	      return function () {
	        return str
	      }
	    }
	    var keyword =
	      /\b(?:align|allowzero|and|anyframe|anytype|asm|async|await|break|cancel|catch|comptime|const|continue|defer|else|enum|errdefer|error|export|extern|fn|for|if|inline|linksection|nakedcc|noalias|nosuspend|null|or|orelse|packed|promise|pub|resume|return|stdcallcc|struct|suspend|switch|test|threadlocal|try|undefined|union|unreachable|usingnamespace|var|volatile|while)\b/;
	    var IDENTIFIER = '\\b(?!' + keyword.source + ')(?!\\d)\\w+\\b';
	    var ALIGN = /align\s*\((?:[^()]|\([^()]*\))*\)/.source;
	    var PREFIX_TYPE_OP =
	      /(?:\?|\bpromise->|(?:\[[^[\]]*\]|\*(?!\*)|\*\*)(?:\s*<ALIGN>|\s*const\b|\s*volatile\b|\s*allowzero\b)*)/.source.replace(
	        /<ALIGN>/g,
	        literal(ALIGN)
	      );
	    var SUFFIX_EXPR =
	      /(?:\bpromise\b|(?:\berror\.)?<ID>(?:\.<ID>)*(?!\s+<ID>))/.source.replace(
	        /<ID>/g,
	        literal(IDENTIFIER)
	      );
	    var TYPE =
	      '(?!\\s)(?:!?\\s*(?:' + PREFIX_TYPE_OP + '\\s*)*' + SUFFIX_EXPR + ')+';

	    /*
	     * A simplified grammar for Zig compile time type literals:
	     *
	     * TypeExpr = ( "!"? PREFIX_TYPE_OP* SUFFIX_EXPR )+
	     *
	     * SUFFIX_EXPR = ( \b "promise" \b | ( \b "error" "." )? IDENTIFIER ( "." IDENTIFIER )* (?! \s+ IDENTIFIER ) )
	     *
	     * PREFIX_TYPE_OP = "?"
	     *                | \b "promise" "->"
	     *                | ( "[" [^\[\]]* "]" | "*" | "**" ) ( ALIGN | "const" \b | "volatile" \b | "allowzero" \b )*
	     *
	     * ALIGN = "align" "(" ( [^()] | "(" [^()]* ")" )* ")"
	     *
	     * IDENTIFIER = \b (?! KEYWORD ) [a-zA-Z_] \w* \b
	     *
	     */

	    Prism.languages.zig = {
	      comment: [
	        {
	          pattern: /\/\/[/!].*/,
	          alias: 'doc-comment'
	        },
	        /\/{2}.*/
	      ],
	      string: [
	        {
	          // "string" and c"string"
	          pattern: /(^|[^\\@])c?"(?:[^"\\\r\n]|\\.)*"/,
	          lookbehind: true,
	          greedy: true
	        },
	        {
	          // multiline strings and c-strings
	          pattern: /([\r\n])([ \t]+c?\\{2}).*(?:(?:\r\n?|\n)\2.*)*/,
	          lookbehind: true,
	          greedy: true
	        }
	      ],
	      char: {
	        // characters 'a', '\n', '\xFF', '\u{10FFFF}'
	        pattern:
	          /(^|[^\\])'(?:[^'\\\r\n]|[\uD800-\uDFFF]{2}|\\(?:.|x[a-fA-F\d]{2}|u\{[a-fA-F\d]{1,6}\}))'/,
	        lookbehind: true,
	        greedy: true
	      },
	      builtin: /\B@(?!\d)\w+(?=\s*\()/,
	      label: {
	        pattern:
	          /(\b(?:break|continue)\s*:\s*)\w+\b|\b(?!\d)\w+\b(?=\s*:\s*(?:\{|while\b))/,
	        lookbehind: true
	      },
	      'class-name': [
	        // const Foo = struct {};
	        /\b(?!\d)\w+(?=\s*=\s*(?:(?:extern|packed)\s+)?(?:enum|struct|union)\s*[({])/,
	        {
	          // const x: i32 = 9;
	          // var x: Bar;
	          // fn foo(x: bool, y: f32) void {}
	          pattern: RegExp(
	            /(:\s*)<TYPE>(?=\s*(?:<ALIGN>\s*)?[=;,)])|<TYPE>(?=\s*(?:<ALIGN>\s*)?\{)/.source
	              .replace(/<TYPE>/g, literal(TYPE))
	              .replace(/<ALIGN>/g, literal(ALIGN))
	          ),
	          lookbehind: true,
	          inside: null // see below
	        },
	        {
	          // extern fn foo(x: f64) f64; (optional alignment)
	          pattern: RegExp(
	            /(\)\s*)<TYPE>(?=\s*(?:<ALIGN>\s*)?;)/.source
	              .replace(/<TYPE>/g, literal(TYPE))
	              .replace(/<ALIGN>/g, literal(ALIGN))
	          ),
	          lookbehind: true,
	          inside: null // see below
	        }
	      ],

	      'builtin-type': {
	        pattern:
	          /\b(?:anyerror|bool|c_u?(?:int|long|longlong|short)|c_longdouble|c_void|comptime_(?:float|int)|f(?:16|32|64|128)|[iu](?:8|16|32|64|128|size)|noreturn|type|void)\b/,
	        alias: 'keyword'
	      },
	      keyword: keyword,
	      function: /\b(?!\d)\w+(?=\s*\()/,
	      number:
	        /\b(?:0b[01]+|0o[0-7]+|0x[a-fA-F\d]+(?:\.[a-fA-F\d]*)?(?:[pP][+-]?[a-fA-F\d]+)?|\d+(?:\.\d*)?(?:[eE][+-]?\d+)?)\b/,
	      boolean: /\b(?:false|true)\b/,
	      operator:
	        /\.[*?]|\.{2,3}|[-=]>|\*\*|\+\+|\|\||(?:<<|>>|[-+*]%|[-+*/%^&|<>!=])=?|[?~]/,
	      punctuation: /[.:,;(){}[\]]/
	    };
	    Prism.languages.zig['class-name'].forEach(function (obj) {
	      if (obj.inside === null) {
	        obj.inside = Prism.languages.zig;
	      }
	    });
	  })(Prism);
	}

	/**
	 * @typedef {import('./core.js').RefractorRoot} RefractorRoot
	 * @typedef {import('./core.js').RefractorElement} RefractorElement
	 * @typedef {import('./core.js').Text} Text
	 * @typedef {import('./core.js').Grammar} Grammar
	 * @typedef {import('./core.js').Syntax} Syntax
	 */

	refractor.register(markup);
	refractor.register(css);
	refractor.register(clike);
	refractor.register(regex$1);
	refractor.register(javascript);
	refractor.register(abap);
	refractor.register(abnf);
	refractor.register(actionscript);
	refractor.register(ada);
	refractor.register(agda);
	refractor.register(al);
	refractor.register(antlr4);
	refractor.register(apacheconf);
	refractor.register(sql);
	refractor.register(apex);
	refractor.register(apl);
	refractor.register(applescript);
	refractor.register(aql);
	refractor.register(c$1);
	refractor.register(cpp);
	refractor.register(arduino);
	refractor.register(arff);
	refractor.register(armasm);
	refractor.register(bash);
	refractor.register(yaml);
	refractor.register(markdown);
	refractor.register(arturo);
	refractor.register(asciidoc);
	refractor.register(csharp);
	refractor.register(aspnet);
	refractor.register(asm6502);
	refractor.register(asmatmel);
	refractor.register(autohotkey);
	refractor.register(autoit);
	refractor.register(avisynth);
	refractor.register(avroIdl);
	refractor.register(awk);
	refractor.register(basic);
	refractor.register(batch);
	refractor.register(bbcode);
	refractor.register(bbj);
	refractor.register(bicep);
	refractor.register(birb);
	refractor.register(bison);
	refractor.register(bnf);
	refractor.register(bqn);
	refractor.register(brainfuck);
	refractor.register(brightscript);
	refractor.register(bro);
	refractor.register(bsl);
	refractor.register(cfscript);
	refractor.register(chaiscript);
	refractor.register(cil);
	refractor.register(cilkc);
	refractor.register(cilkcpp);
	refractor.register(clojure);
	refractor.register(cmake);
	refractor.register(cobol);
	refractor.register(coffeescript);
	refractor.register(concurnas);
	refractor.register(csp);
	refractor.register(cooklang);
	refractor.register(coq);
	refractor.register(ruby);
	refractor.register(crystal);
	refractor.register(cssExtras);
	refractor.register(csv);
	refractor.register(cue);
	refractor.register(cypher);
	refractor.register(d);
	refractor.register(dart);
	refractor.register(dataweave);
	refractor.register(dax);
	refractor.register(dhall);
	refractor.register(diff);
	refractor.register(markupTemplating);
	refractor.register(django);
	refractor.register(dnsZoneFile);
	refractor.register(docker);
	refractor.register(dot);
	refractor.register(ebnf);
	refractor.register(editorconfig);
	refractor.register(eiffel);
	refractor.register(ejs);
	refractor.register(elixir);
	refractor.register(elm);
	refractor.register(lua);
	refractor.register(etlua);
	refractor.register(erb);
	refractor.register(erlang);
	refractor.register(excelFormula);
	refractor.register(fsharp);
	refractor.register(factor);
	refractor.register($false);
	refractor.register(firestoreSecurityRules);
	refractor.register(flow);
	refractor.register(fortran);
	refractor.register(ftl);
	refractor.register(gml);
	refractor.register(gap);
	refractor.register(gcode);
	refractor.register(gdscript);
	refractor.register(gedcom);
	refractor.register(gettext);
	refractor.register(gherkin);
	refractor.register(git);
	refractor.register(glsl);
	refractor.register(gn);
	refractor.register(linkerScript);
	refractor.register(go);
	refractor.register(goModule);
	refractor.register(gradle);
	refractor.register(graphql);
	refractor.register(groovy);
	refractor.register(less);
	refractor.register(scss);
	refractor.register(textile);
	refractor.register(haml);
	refractor.register(handlebars);
	refractor.register(haskell);
	refractor.register(haxe);
	refractor.register(hcl);
	refractor.register(hlsl);
	refractor.register(hoon);
	refractor.register(hpkp);
	refractor.register(hsts);
	refractor.register(json);
	refractor.register(uri);
	refractor.register(http);
	refractor.register(ichigojam);
	refractor.register(icon);
	refractor.register(icuMessageFormat);
	refractor.register(idris);
	refractor.register(ignore);
	refractor.register(inform7);
	refractor.register(ini);
	refractor.register(io);
	refractor.register(j);
	refractor.register(java);
	refractor.register(php);
	refractor.register(javadoclike);
	refractor.register(scala);
	refractor.register(javadoc);
	refractor.register(javastacktrace);
	refractor.register(jexl);
	refractor.register(jolie);
	refractor.register(jq);
	refractor.register(jsTemplates);
	refractor.register(typescript);
	refractor.register(jsdoc);
	refractor.register(n4js);
	refractor.register(jsExtras);
	refractor.register(json5);
	refractor.register(jsonp);
	refractor.register(jsstacktrace);
	refractor.register(julia);
	refractor.register(keepalived);
	refractor.register(keyman);
	refractor.register(kotlin);
	refractor.register(kumir);
	refractor.register(kusto);
	refractor.register(latex);
	refractor.register(latte);
	refractor.register(scheme);
	refractor.register(lilypond);
	refractor.register(liquid);
	refractor.register(lisp);
	refractor.register(livescript);
	refractor.register(llvm);
	refractor.register(log);
	refractor.register(lolcode);
	refractor.register(magma);
	refractor.register(makefile);
	refractor.register(mata);
	refractor.register(matlab);
	refractor.register(maxscript);
	refractor.register(mel);
	refractor.register(mermaid);
	refractor.register(metafont);
	refractor.register(mizar);
	refractor.register(mongodb);
	refractor.register(monkey);
	refractor.register(moonscript);
	refractor.register(n1ql);
	refractor.register(nand2tetrisHdl);
	refractor.register(naniscript);
	refractor.register(nasm);
	refractor.register(neon);
	refractor.register(nevod);
	refractor.register(nginx);
	refractor.register(nim);
	refractor.register(nix);
	refractor.register(nsis);
	refractor.register(objectivec);
	refractor.register(ocaml);
	refractor.register(odin);
	refractor.register(opencl);
	refractor.register(openqasm);
	refractor.register(oz);
	refractor.register(parigp);
	refractor.register(parser);
	refractor.register(pascal);
	refractor.register(pascaligo);
	refractor.register(psl);
	refractor.register(pcaxis);
	refractor.register(peoplecode);
	refractor.register(perl);
	refractor.register(phpdoc);
	refractor.register(phpExtras);
	refractor.register(plantUml);
	refractor.register(plsql);
	refractor.register(powerquery);
	refractor.register(powershell);
	refractor.register(processing);
	refractor.register(prolog);
	refractor.register(promql);
	refractor.register(properties);
	refractor.register(protobuf);
	refractor.register(stylus);
	refractor.register(twig);
	refractor.register(pug);
	refractor.register(puppet);
	refractor.register(pure);
	refractor.register(purebasic);
	refractor.register(purescript);
	refractor.register(python);
	refractor.register(qsharp);
	refractor.register(q);
	refractor.register(qml);
	refractor.register(qore);
	refractor.register(r);
	refractor.register(racket);
	refractor.register(cshtml);
	refractor.register(jsx);
	refractor.register(tsx);
	refractor.register(reason);
	refractor.register(rego);
	refractor.register(renpy);
	refractor.register(rescript);
	refractor.register(rest);
	refractor.register(rip);
	refractor.register(roboconf);
	refractor.register(robotframework);
	refractor.register(rust);
	refractor.register(sas);
	refractor.register(sass);
	refractor.register(shellSession);
	refractor.register(smali);
	refractor.register(smalltalk);
	refractor.register(smarty);
	refractor.register(sml);
	refractor.register(solidity);
	refractor.register(solutionFile);
	refractor.register(soy);
	refractor.register(turtle);
	refractor.register(sparql);
	refractor.register(splunkSpl);
	refractor.register(sqf);
	refractor.register(squirrel);
	refractor.register(stan);
	refractor.register(stata);
	refractor.register(iecst);
	refractor.register(supercollider);
	refractor.register(swift);
	refractor.register(systemd);
	refractor.register(t4Templating);
	refractor.register(t4Cs);
	refractor.register(vbnet);
	refractor.register(t4Vb);
	refractor.register(tap);
	refractor.register(tcl);
	refractor.register(tt2);
	refractor.register(toml);
	refractor.register(tremor);
	refractor.register(typoscript);
	refractor.register(unrealscript);
	refractor.register(uorazor);
	refractor.register(v);
	refractor.register(vala);
	refractor.register(velocity);
	refractor.register(verilog);
	refractor.register(vhdl);
	refractor.register(vim);
	refractor.register(visualBasic);
	refractor.register(warpscript);
	refractor.register(wasm);
	refractor.register(webIdl);
	refractor.register(wgsl);
	refractor.register(wiki);
	refractor.register(wolfram);
	refractor.register(wren);
	refractor.register(xeora);
	refractor.register(xmlDoc);
	refractor.register(xojo);
	refractor.register(xquery);
	refractor.register(yang);
	refractor.register(zig);

	function a(){a=function(e,r){return new t(e,void 0,r)};var e=RegExp.prototype,r=new WeakMap;function t(e,n,i){var o=new RegExp(e,n);return r.set(o,i||r.get(e)),l(o,t.prototype)}function n(e,t){var n=r.get(t);return Object.keys(n).reduce(function(r,t){var i=n[t];if("number"==typeof i)r[t]=e[i];else {for(var o=0;void 0===e[i[o]]&&o+1<i.length;)o++;r[t]=e[i[o]];}return r},Object.create(null))}return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(r&&r.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),r&&l(e,r);}(t,RegExp),t.prototype.exec=function(r){var t=e.exec.call(this,r);if(t){t.groups=n(t,this);var i=t.indices;i&&(i.groups=n(i,this));}return t},t.prototype[Symbol.replace]=function(t,i){if("string"==typeof i){var o=r.get(this);return e[Symbol.replace].call(this,t,i.replace(/\$<([^>]+)>/g,function(e,r){var t=o[r];return "$"+(Array.isArray(t)?t.join("$"):t)}))}if("function"==typeof i){var a=this;return e[Symbol.replace].call(this,t,function(){var e=arguments;return "object"!=typeof e[e.length-1]&&(e=[].slice.call(e)).push(n(e,a)),i.apply(this,e)})}return e[Symbol.replace].call(this,t,i)},a.apply(this,arguments)}function l(e,r){return l=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,r){return e.__proto__=r,e},l(e,r)}function s(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,n=new Array(r);t<r;t++)n[t]=e[t];return n}function u(e,r){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(t)return (t=t.call(e)).next.bind(t);if(Array.isArray(e)||(t=function(e,r){if(e){if("string"==typeof e)return s(e,r);var t=Object.prototype.toString.call(e).slice(8,-1);return "Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?s(e,r):void 0}}(e))||r&&e&&"number"==typeof e.length){t&&(e=t);var n=0;return function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var c=function(i){return function(o){return void 0===o&&(o={}),function(e,r){if(r&&!e.registered(r))throw new Error('The default language "'+r+'" is not registered with refractor.')}(i,o.defaultLanguage),function(r){visit(r,"element",l);};function l(e,l,s){var c,p;if(s&&"pre"===s.tagName&&"code"===e.tagName){var f=(null==e||null==(c=e.data)?void 0:c.meta)||(null==e||null==(p=e.properties)?void 0:p.metastring)||"";e.properties.className?"boolean"==typeof e.properties.className?e.properties.className=[]:Array.isArray(e.properties.className)||(e.properties.className=[e.properties.className]):e.properties.className=[];var m,h,d=function(e){for(var r,t=u(e.properties.className);!(r=t()).done;){var n=r.value;if("language-"===n.slice(0,9))return n.slice(9).toLowerCase()}return null}(e);if(!d&&o.defaultLanguage&&e.properties.className.push("language-"+(d=o.defaultLanguage)),e.properties.className.push("code-highlight"),d)try{var g,v;v=null!=(g=d)&&g.includes("diff-")?d.split("-")[1]:d,m=i.highlight(toString$1(e),v),s.properties.className=(s.properties.className||[]).concat("language-"+v);}catch(r){if(!o.ignoreMissing||!/Unknown language/.test(r.message))throw r;m=e;}else m=e;m.children=(h=1,function e(r){return r.reduce(function(r,t){if("text"===t.type){var n=t.value,i=(n.match(/\n/g)||"").length;if(0===i)t.position={start:{line:h,column:1},end:{line:h,column:1}},r.push(t);else for(var o,a=n.split("\n"),l=u(a.entries());!(o=l()).done;){var s=o.value,c=s[0],p=s[1];r.push({type:"text",value:c===a.length-1?p:p+"\n",position:{start:{line:h+c,column:1},end:{line:h+c,column:1}}});}return h+=i,r}if(Object.prototype.hasOwnProperty.call(t,"children")){var f=h;return t.children=e(t.children),r.push(t),t.position={start:{line:f,column:1},end:{line:h,column:1}},r}return r.push(t),r},[])})(m.children),m.position=m.children.length>0?{start:{line:m.children[0].position.start.line,column:0},end:{line:m.children[m.children.length-1].position.end.line,column:0}}:{start:{line:0,column:0},end:{line:0,column:0}};for(var y,b=function(e){var r=/{([\d,-]+)}/,t=e.split(",").map(function(e){return e.trim()}).join();if(r.test(t)){var i=r.exec(t)[1],o=n(i);return function(e){return o.includes(e+1)}}return function(){return !1}}(f),w=function(e){var r=/*#__PURE__*/a(/showLineNumbers=(\d+)/i,{lines:1});if(r.test(e)){var t=r.exec(e);return Number(t.groups.lines)}return 1}(f),N=function(e){for(var r=new Array(e),t=0;t<e;t++)r[t]={type:"element",tagName:"span",properties:{className:[]},children:[]};return r}(m.position.end.line),j=["showlinenumbers=false",'showlinenumbers="false"',"showlinenumbers={false}"],x=function(){var e,n,i=y.value,a=i[0],l=i[1];l.properties.className=["code-line"];var s=filter(m,function(e){return e.position.start.line<=a+1&&e.position.end.line>=a+1});l.children=s.children,!f.toLowerCase().includes("showLineNumbers".toLowerCase())&&!o.showLineNumbers||j.some(function(e){return f.toLowerCase().includes(e)})||(l.properties.line=[(a+w).toString()],l.properties.className.push("line-number")),b(a)&&l.properties.className.push("highlight-line"),("diff"===d||null!=(e=d)&&e.includes("diff-"))&&"-"===toString$1(l).substring(0,1)?l.properties.className.push("deleted"):("diff"===d||null!=(n=d)&&n.includes("diff-"))&&"+"===toString$1(l).substring(0,1)&&l.properties.className.push("inserted");},O=u(N.entries());!(y=O()).done;)x();N.length>0&&""===toString$1(N[N.length-1]).trim()&&N.pop(),e.children=N;}}}},f=c(refractor);

	var emptyMulticharIndex = {};
	var emptyRegularIndex = {};
	function extendIndex(item, index) {
	    var currentIndex = index;
	    for (var pos = 0; pos < item.length; pos++) {
	        var isLast = pos === item.length - 1;
	        var char = item.charAt(pos);
	        var charIndex = currentIndex[char] || (currentIndex[char] = { chars: {} });
	        if (isLast) {
	            charIndex.self = item;
	        }
	        currentIndex = charIndex.chars;
	    }
	}
	function createMulticharIndex(items) {
	    if (items.length === 0) {
	        return emptyMulticharIndex;
	    }
	    var index = {};
	    for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
	        var item = items_1[_i];
	        extendIndex(item, index);
	    }
	    return index;
	}
	function createRegularIndex(items) {
	    if (items.length === 0) {
	        return emptyRegularIndex;
	    }
	    var result = {};
	    for (var _i = 0, items_2 = items; _i < items_2.length; _i++) {
	        var item = items_2[_i];
	        result[item] = true;
	    }
	    return result;
	}

	var emptyPseudoSignatures = {};
	var defaultPseudoSignature = {
	    type: 'String',
	    optional: true
	};
	function calculatePseudoSignature(types) {
	    var result = {
	        type: 'NoArgument',
	        optional: false
	    };
	    function setResultType(type) {
	        if (result.type && result.type !== type && result.type !== 'NoArgument') {
	            throw new Error("Conflicting pseudo-class argument type: \"".concat(result.type, "\" vs \"").concat(type, "\"."));
	        }
	        result.type = type;
	    }
	    for (var _i = 0, types_1 = types; _i < types_1.length; _i++) {
	        var type = types_1[_i];
	        if (type === 'NoArgument') {
	            result.optional = true;
	        }
	        if (type === 'Formula') {
	            setResultType('Formula');
	        }
	        if (type === 'FormulaOfSelector') {
	            setResultType('Formula');
	            result.ofSelector = true;
	        }
	        if (type === 'String') {
	            setResultType('String');
	        }
	        if (type === 'Selector') {
	            setResultType('Selector');
	        }
	    }
	    return result;
	}
	function inverseCategories(obj) {
	    var result = {};
	    for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {
	        var category = _a[_i];
	        var items = obj[category];
	        if (items) {
	            for (var _b = 0, _c = items; _b < _c.length; _b++) {
	                var item = _c[_b];
	                (result[item] || (result[item] = [])).push(category);
	            }
	        }
	    }
	    return result;
	}
	function calculatePseudoSignatures(definitions) {
	    var pseudoClassesToArgumentTypes = inverseCategories(definitions);
	    var result = {};
	    for (var _i = 0, _a = Object.keys(pseudoClassesToArgumentTypes); _i < _a.length; _i++) {
	        var pseudoClass = _a[_i];
	        var argumentTypes = pseudoClassesToArgumentTypes[pseudoClass];
	        if (argumentTypes) {
	            result[pseudoClass] = calculatePseudoSignature(argumentTypes);
	        }
	    }
	    return result;
	}

	var __assign$1 = (undefined && undefined.__assign) || function () {
	    __assign$1 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1.apply(this, arguments);
	};
	var emptyXmlOptions = {};
	var defaultXmlOptions = { wildcard: true };
	function getXmlOptions(param) {
	    if (param) {
	        if (typeof param === 'boolean') {
	            return defaultXmlOptions;
	        }
	        else {
	            return param;
	        }
	    }
	    else {
	        return emptyXmlOptions;
	    }
	}
	function withMigration(migration, merge) {
	    return function (base, extension) { return merge(migration(base), migration(extension)); };
	}
	function withNoNegative(merge) {
	    return function (base, extension) {
	        var result = merge(base, extension);
	        if (!result) {
	            throw new Error("Syntax definition cannot be null or undefined.");
	        }
	        return result;
	    };
	}
	function withPositive(positive, merge) {
	    return function (base, extension) {
	        if (extension === true) {
	            return positive;
	        }
	        return merge(base === true ? positive : base, extension);
	    };
	}
	function mergeSection(values) {
	    return function (base, extension) {
	        if (!extension || !base) {
	            return extension;
	        }
	        if (typeof extension !== 'object' || extension === null) {
	            throw new Error("Unexpected syntax definition extension type: ".concat(extension, "."));
	        }
	        var result = __assign$1({}, base);
	        for (var _i = 0, _a = Object.entries(extension); _i < _a.length; _i++) {
	            var _b = _a[_i], key = _b[0], value = _b[1];
	            var mergeSchema = values[key];
	            result[key] = mergeSchema(base[key], value);
	        }
	        return result;
	    };
	}
	function replaceValueIfSpecified(base, extension) {
	    if (extension !== undefined) {
	        return extension;
	    }
	    return base;
	}
	function concatArray(base, extension) {
	    if (!extension) {
	        return base;
	    }
	    if (!base) {
	        return extension;
	    }
	    return base.concat(extension);
	}
	function mergeDefinitions(base, extension) {
	    if (!extension) {
	        return base;
	    }
	    if (!base) {
	        return extension;
	    }
	    var result = __assign$1({}, base);
	    for (var _i = 0, _a = Object.entries(extension); _i < _a.length; _i++) {
	        var _b = _a[_i], key = _b[0], value = _b[1];
	        if (!value) {
	            delete result[key];
	            continue;
	        }
	        var baseValue = base[key];
	        if (!baseValue) {
	            result[key] = value;
	            continue;
	        }
	        result[key] = baseValue.concat(value);
	    }
	    return result;
	}
	var extendSyntaxDefinition = withNoNegative(mergeSection({
	    baseSyntax: replaceValueIfSpecified,
	    tag: withPositive(defaultXmlOptions, mergeSection({
	        wildcard: replaceValueIfSpecified
	    })),
	    ids: replaceValueIfSpecified,
	    classNames: replaceValueIfSpecified,
	    namespace: withPositive(defaultXmlOptions, mergeSection({
	        wildcard: replaceValueIfSpecified
	    })),
	    combinators: concatArray,
	    attributes: mergeSection({
	        operators: concatArray,
	        caseSensitivityModifiers: concatArray,
	        unknownCaseSensitivityModifiers: replaceValueIfSpecified
	    }),
	    pseudoClasses: mergeSection({
	        unknown: replaceValueIfSpecified,
	        definitions: mergeDefinitions
	    }),
	    pseudoElements: mergeSection({
	        unknown: replaceValueIfSpecified,
	        notation: replaceValueIfSpecified,
	        definitions: withMigration(function (definitions) { return (Array.isArray(definitions) ? { NoArgument: definitions } : definitions); }, mergeDefinitions)
	    })
	}));
	var css1SyntaxDefinition = {
	    tag: {},
	    ids: true,
	    classNames: true,
	    combinators: [],
	    pseudoElements: {
	        unknown: 'reject',
	        notation: 'singleColon',
	        definitions: ['first-letter', 'first-line']
	    },
	    pseudoClasses: {
	        unknown: 'reject',
	        definitions: {
	            NoArgument: ['link', 'visited', 'active']
	        }
	    }
	};
	var css2SyntaxDefinition = extendSyntaxDefinition(css1SyntaxDefinition, {
	    tag: { wildcard: true },
	    combinators: ['>', '+'],
	    attributes: {
	        unknownCaseSensitivityModifiers: 'reject',
	        operators: ['=', '~=', '|=']
	    },
	    pseudoElements: {
	        definitions: ['before', 'after']
	    },
	    pseudoClasses: {
	        unknown: 'reject',
	        definitions: {
	            NoArgument: ['hover', 'focus', 'first-child'],
	            String: ['lang']
	        }
	    }
	});
	var selectors3SyntaxDefinition = extendSyntaxDefinition(css2SyntaxDefinition, {
	    namespace: {
	        wildcard: true
	    },
	    combinators: ['~'],
	    attributes: {
	        operators: ['^=', '$=', '*=']
	    },
	    pseudoElements: {
	        notation: 'both'
	    },
	    pseudoClasses: {
	        definitions: {
	            NoArgument: [
	                'root',
	                'last-child',
	                'first-of-type',
	                'last-of-type',
	                'only-child',
	                'only-of-type',
	                'empty',
	                'target',
	                'enabled',
	                'disabled',
	                'checked',
	                'indeterminate'
	            ],
	            Formula: ['nth-child', 'nth-last-child', 'nth-of-type', 'nth-last-of-type'],
	            Selector: ['not']
	        }
	    }
	});
	var selectors4SyntaxDefinition = extendSyntaxDefinition(selectors3SyntaxDefinition, {
	    combinators: ['||'],
	    attributes: {
	        caseSensitivityModifiers: ['i', 'I', 's', 'S']
	    },
	    pseudoClasses: {
	        definitions: {
	            NoArgument: [
	                'any-link',
	                'local-link',
	                'target-within',
	                'scope',
	                'current',
	                'past',
	                'future',
	                'focus-within',
	                'focus-visible',
	                'read-write',
	                'read-only',
	                'placeholder-shown',
	                'default',
	                'valid',
	                'invalid',
	                'in-range',
	                'out-of-range',
	                'required',
	                'optional',
	                'blank',
	                'user-invalid'
	            ],
	            Formula: ['nth-col', 'nth-last-col'],
	            String: ['dir'],
	            FormulaOfSelector: ['nth-child', 'nth-last-child'],
	            Selector: ['current', 'is', 'where', 'has']
	        }
	    }
	});
	var progressiveSyntaxDefinition = extendSyntaxDefinition(selectors4SyntaxDefinition, {
	    pseudoElements: {
	        unknown: 'accept'
	    },
	    pseudoClasses: {
	        unknown: 'accept'
	    },
	    attributes: {
	        unknownCaseSensitivityModifiers: 'accept'
	    }
	});
	var cssSyntaxDefinitions = {
	    css1: css1SyntaxDefinition,
	    css2: css2SyntaxDefinition,
	    css3: selectors3SyntaxDefinition,
	    'selectors-3': selectors3SyntaxDefinition,
	    'selectors-4': selectors4SyntaxDefinition,
	    latest: selectors4SyntaxDefinition,
	    progressive: progressiveSyntaxDefinition
	};

	function isIdentStart(c) {
	    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c === '-' || c === '_' || c === '\\' || c >= '\u00a0';
	}
	function isIdent(c) {
	    return ((c >= 'a' && c <= 'z') ||
	        (c >= 'A' && c <= 'Z') ||
	        (c >= '0' && c <= '9') ||
	        c === '-' ||
	        c === '_' ||
	        c >= '\u00a0');
	}
	function isHex(c) {
	    return (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F') || (c >= '0' && c <= '9');
	}
	var whitespaceChars = {
	    ' ': true,
	    '\t': true,
	    '\n': true,
	    '\r': true,
	    '\f': true
	};
	var quoteChars = {
	    '"': true,
	    "'": true
	};
	var digitsChars = {
	    0: true,
	    1: true,
	    2: true,
	    3: true,
	    4: true,
	    5: true,
	    6: true,
	    7: true,
	    8: true,
	    9: true
	};
	var maxHexLength = 6;

	var errorPrefix = "css-selector-parser parse error: ";
	/**
	 * Creates a parse function to be used later to parse CSS selectors.
	 */
	function createParser(options) {
	    if (options === void 0) { options = {}; }
	    var _a = options.syntax, syntax = _a === void 0 ? 'latest' : _a, substitutes = options.substitutes, _b = options.strict, strict = _b === void 0 ? true : _b;
	    var syntaxDefinition = typeof syntax === 'object' ? syntax : cssSyntaxDefinitions[syntax];
	    if (syntaxDefinition.baseSyntax) {
	        syntaxDefinition = extendSyntaxDefinition(cssSyntaxDefinitions[syntaxDefinition.baseSyntax], syntaxDefinition);
	    }
	    var _c = syntaxDefinition.tag
	        ? [true, Boolean(getXmlOptions(syntaxDefinition.tag).wildcard)]
	        : [false, false], tagNameEnabled = _c[0], tagNameWildcardEnabled = _c[1];
	    var idEnabled = Boolean(syntaxDefinition.ids);
	    var classNamesEnabled = Boolean(syntaxDefinition.classNames);
	    var namespaceEnabled = Boolean(syntaxDefinition.namespace);
	    var namespaceWildcardEnabled = syntaxDefinition.namespace &&
	        (syntaxDefinition.namespace === true || syntaxDefinition.namespace.wildcard === true);
	    if (namespaceEnabled && !tagNameEnabled) {
	        throw new Error("".concat(errorPrefix, "Namespaces cannot be enabled while tags are disabled."));
	    }
	    var substitutesEnabled = Boolean(substitutes);
	    var combinatorsIndex = syntaxDefinition.combinators
	        ? createMulticharIndex(syntaxDefinition.combinators)
	        : emptyMulticharIndex;
	    var _d = syntaxDefinition.attributes
	        ? [
	            true,
	            syntaxDefinition.attributes.operators
	                ? createMulticharIndex(syntaxDefinition.attributes.operators)
	                : emptyMulticharIndex,
	            syntaxDefinition.attributes.caseSensitivityModifiers
	                ? createRegularIndex(syntaxDefinition.attributes.caseSensitivityModifiers)
	                : emptyRegularIndex,
	            syntaxDefinition.attributes.unknownCaseSensitivityModifiers === 'accept'
	        ]
	        : [false, emptyMulticharIndex, emptyRegularIndex, false], attributesEnabled = _d[0], attributesOperatorsIndex = _d[1], attributesCaseSensitivityModifiers = _d[2], attributesAcceptUnknownCaseSensitivityModifiers = _d[3];
	    var attributesCaseSensitivityModifiersEnabled = attributesAcceptUnknownCaseSensitivityModifiers || Object.keys(attributesCaseSensitivityModifiers).length > 0;
	    var _e = syntaxDefinition.pseudoClasses
	        ? [
	            true,
	            syntaxDefinition.pseudoClasses.definitions
	                ? calculatePseudoSignatures(syntaxDefinition.pseudoClasses.definitions)
	                : emptyPseudoSignatures,
	            syntaxDefinition.pseudoClasses.unknown === 'accept'
	        ]
	        : [false, emptyPseudoSignatures, false], pseudoClassesEnabled = _e[0], pseudoClassesDefinitions = _e[1], pseudoClassesAcceptUnknown = _e[2];
	    var _f = syntaxDefinition.pseudoElements
	        ? [
	            true,
	            syntaxDefinition.pseudoElements.notation === 'singleColon' ||
	                syntaxDefinition.pseudoElements.notation === 'both',
	            !syntaxDefinition.pseudoElements.notation ||
	                syntaxDefinition.pseudoElements.notation === 'doubleColon' ||
	                syntaxDefinition.pseudoElements.notation === 'both',
	            syntaxDefinition.pseudoElements.definitions
	                ? calculatePseudoSignatures(Array.isArray(syntaxDefinition.pseudoElements.definitions)
	                    ? { NoArgument: syntaxDefinition.pseudoElements.definitions }
	                    : syntaxDefinition.pseudoElements.definitions)
	                : emptyPseudoSignatures,
	            syntaxDefinition.pseudoElements.unknown === 'accept'
	        ]
	        : [false, false, false, emptyPseudoSignatures, false], pseudoElementsEnabled = _f[0], pseudoElementsSingleColonNotationEnabled = _f[1], pseudoElementsDoubleColonNotationEnabled = _f[2], pseudoElementsDefinitions = _f[3], pseudoElementsAcceptUnknown = _f[4];
	    var str = '';
	    var l = str.length;
	    var pos = 0;
	    var chr = '';
	    var is = function (comparison) { return chr === comparison; };
	    var isTagStart = function () { return is('*') || isIdentStart(chr); };
	    var rewind = function (newPos) {
	        pos = newPos;
	        chr = str.charAt(pos);
	    };
	    var next = function () {
	        pos++;
	        chr = str.charAt(pos);
	    };
	    var readAndNext = function () {
	        var current = chr;
	        pos++;
	        chr = str.charAt(pos);
	        return current;
	    };
	    /** @throws ParserError */
	    function fail(errorMessage) {
	        var position = Math.min(l - 1, pos);
	        var error = new Error("".concat(errorPrefix).concat(errorMessage, " Pos: ").concat(position, "."));
	        error.position = position;
	        error.name = 'ParserError';
	        throw error;
	    }
	    function assert(condition, errorMessage) {
	        if (!condition) {
	            return fail(errorMessage);
	        }
	    }
	    var assertNonEof = function () {
	        assert(pos < l, 'Unexpected end of input.');
	    };
	    var isEof = function () { return pos >= l; };
	    var pass = function (character) {
	        assert(pos < l, "Expected \"".concat(character, "\" but end of input reached."));
	        assert(chr === character, "Expected \"".concat(character, "\" but \"").concat(chr, "\" found."));
	        pos++;
	        chr = str.charAt(pos);
	    };
	    function matchMulticharIndex(index) {
	        var match = matchMulticharIndexPos(index, pos);
	        if (match) {
	            pos += match.length;
	            chr = str.charAt(pos);
	            return match;
	        }
	    }
	    function matchMulticharIndexPos(index, subPos) {
	        var char = str.charAt(subPos);
	        var charIndex = index[char];
	        if (charIndex) {
	            var subMatch = matchMulticharIndexPos(charIndex.chars, subPos + 1);
	            if (subMatch) {
	                return subMatch;
	            }
	            if (charIndex.self) {
	                return charIndex.self;
	            }
	        }
	    }
	    /**
	     * @see https://www.w3.org/TR/css-syntax/#hex-digit-diagram
	     */
	    function parseHex() {
	        var hex = readAndNext();
	        var count = 1;
	        while (isHex(chr) && count < maxHexLength) {
	            hex += readAndNext();
	            count++;
	        }
	        skipSingleWhitespace();
	        return String.fromCharCode(parseInt(hex, 16));
	    }
	    /**
	     * @see https://www.w3.org/TR/css-syntax/#string-token-diagram
	     */
	    function parseString(quote) {
	        var result = '';
	        pass(quote);
	        while (pos < l) {
	            if (is(quote)) {
	                next();
	                return result;
	            }
	            else if (is('\\')) {
	                next();
	                if (is(quote)) {
	                    result += quote;
	                    next();
	                }
	                else if (chr === '\n' || chr === '\f') {
	                    next();
	                }
	                else if (chr === '\r') {
	                    next();
	                    if (is('\n')) {
	                        next();
	                    }
	                }
	                else if (isHex(chr)) {
	                    result += parseHex();
	                }
	                else {
	                    result += chr;
	                    next();
	                }
	            }
	            else {
	                result += chr;
	                next();
	            }
	        }
	        return result;
	    }
	    /**
	     * @see https://www.w3.org/TR/css-syntax/#ident-token-diagram
	     */
	    function parseIdentifier() {
	        if (!isIdentStart(chr)) {
	            return null;
	        }
	        var result = '';
	        while (is('-')) {
	            result += chr;
	            next();
	        }
	        if (strict && result.length >= 2) {
	            // Checking this only for strict mode since browsers work fine with these identifiers.
	            fail('Identifiers cannot start with two hyphens with strict mode on.');
	        }
	        if (digitsChars[chr]) {
	            fail('Identifiers cannot start with hyphens followed by digits.');
	        }
	        while (pos < l) {
	            if (isIdent(chr)) {
	                result += readAndNext();
	            }
	            else if (is('\\')) {
	                next();
	                assertNonEof();
	                if (isHex(chr)) {
	                    result += parseHex();
	                }
	                else {
	                    result += readAndNext();
	                }
	            }
	            else {
	                break;
	            }
	        }
	        return result;
	    }
	    function parsePseudoClassString() {
	        var result = '';
	        while (pos < l) {
	            if (is(')')) {
	                break;
	            }
	            else if (is('\\')) {
	                next();
	                if (isEof() && !strict) {
	                    return (result + '\\').trim();
	                }
	                assertNonEof();
	                if (isHex(chr)) {
	                    result += parseHex();
	                }
	                else {
	                    result += readAndNext();
	                }
	            }
	            else {
	                result += readAndNext();
	            }
	        }
	        return result.trim();
	    }
	    function skipSingleWhitespace() {
	        if (chr === ' ' || chr === '\t' || chr === '\f' || chr === '\n') {
	            next();
	            return;
	        }
	        if (chr === '\r') {
	            next();
	        }
	        if (chr === '\n') {
	            next();
	        }
	    }
	    function skipWhitespace() {
	        while (whitespaceChars[chr]) {
	            next();
	        }
	    }
	    function parseSelector(relative) {
	        if (relative === void 0) { relative = false; }
	        skipWhitespace();
	        var rules = [parseRule(relative)];
	        while (is(',')) {
	            next();
	            skipWhitespace();
	            rules.push(parseRule(relative));
	        }
	        return {
	            type: 'Selector',
	            rules: rules
	        };
	    }
	    function parseAttribute() {
	        pass('[');
	        skipWhitespace();
	        var attr;
	        if (is('|')) {
	            assert(namespaceEnabled, 'Namespaces are not enabled.');
	            next();
	            var name_1 = parseIdentifier();
	            assert(name_1, 'Expected attribute name.');
	            attr = {
	                type: 'Attribute',
	                name: name_1,
	                namespace: { type: 'NoNamespace' }
	            };
	        }
	        else if (is('*')) {
	            assert(namespaceEnabled, 'Namespaces are not enabled.');
	            assert(namespaceWildcardEnabled, 'Wildcard namespace is not enabled.');
	            next();
	            pass('|');
	            var name_2 = parseIdentifier();
	            assert(name_2, 'Expected attribute name.');
	            attr = {
	                type: 'Attribute',
	                name: name_2,
	                namespace: { type: 'WildcardNamespace' }
	            };
	        }
	        else {
	            var identifier = parseIdentifier();
	            assert(identifier, 'Expected attribute name.');
	            attr = {
	                type: 'Attribute',
	                name: identifier
	            };
	            if (is('|')) {
	                var savedPos = pos;
	                next();
	                if (isIdentStart(chr)) {
	                    assert(namespaceEnabled, 'Namespaces are not enabled.');
	                    var name_3 = parseIdentifier();
	                    assert(name_3, 'Expected attribute name.');
	                    attr = {
	                        type: 'Attribute',
	                        name: name_3,
	                        namespace: { type: 'NamespaceName', name: identifier }
	                    };
	                }
	                else {
	                    rewind(savedPos);
	                }
	            }
	        }
	        assert(attr.name, 'Expected attribute name.');
	        skipWhitespace();
	        if (isEof() && !strict) {
	            return attr;
	        }
	        if (is(']')) {
	            next();
	        }
	        else {
	            attr.operator = matchMulticharIndex(attributesOperatorsIndex);
	            assert(attr.operator, 'Expected a valid attribute selector operator.');
	            skipWhitespace();
	            assertNonEof();
	            if (quoteChars[chr]) {
	                attr.value = {
	                    type: 'String',
	                    value: parseString(chr)
	                };
	            }
	            else if (substitutesEnabled && is('$')) {
	                next();
	                var name_4 = parseIdentifier();
	                assert(name_4, 'Expected substitute name.');
	                attr.value = {
	                    type: 'Substitution',
	                    name: name_4
	                };
	            }
	            else {
	                var value = parseIdentifier();
	                assert(value, 'Expected attribute value.');
	                attr.value = {
	                    type: 'String',
	                    value: value
	                };
	            }
	            skipWhitespace();
	            if (isEof() && !strict) {
	                return attr;
	            }
	            if (!is(']')) {
	                var caseSensitivityModifier = parseIdentifier();
	                assert(caseSensitivityModifier, 'Expected end of attribute selector.');
	                attr.caseSensitivityModifier = caseSensitivityModifier;
	                assert(attributesCaseSensitivityModifiersEnabled, 'Attribute case sensitivity modifiers are not enabled.');
	                assert(attributesAcceptUnknownCaseSensitivityModifiers ||
	                    attributesCaseSensitivityModifiers[attr.caseSensitivityModifier], 'Unknown attribute case sensitivity modifier.');
	                skipWhitespace();
	                if (isEof() && !strict) {
	                    return attr;
	                }
	            }
	            pass(']');
	        }
	        return attr;
	    }
	    function parseNumber() {
	        var result = '';
	        while (digitsChars[chr]) {
	            result += readAndNext();
	        }
	        assert(result !== '', 'Formula parse error.');
	        return parseInt(result);
	    }
	    var isNumberStart = function () { return is('-') || is('+') || digitsChars[chr]; };
	    function parseFormula() {
	        if (is('e') || is('o')) {
	            var ident = parseIdentifier();
	            if (ident === 'even') {
	                skipWhitespace();
	                return [2, 0];
	            }
	            if (ident === 'odd') {
	                skipWhitespace();
	                return [2, 1];
	            }
	        }
	        var firstNumber = null;
	        var firstNumberMultiplier = 1;
	        if (is('-')) {
	            next();
	            firstNumberMultiplier = -1;
	        }
	        if (isNumberStart()) {
	            if (is('+')) {
	                next();
	            }
	            firstNumber = parseNumber();
	            if (!is('\\') && !is('n')) {
	                return [0, firstNumber * firstNumberMultiplier];
	            }
	        }
	        if (firstNumber === null) {
	            firstNumber = 1;
	        }
	        firstNumber *= firstNumberMultiplier;
	        var identifier;
	        if (is('\\')) {
	            next();
	            if (isHex(chr)) {
	                identifier = parseHex();
	            }
	            else {
	                identifier = readAndNext();
	            }
	        }
	        else {
	            identifier = readAndNext();
	        }
	        assert(identifier === 'n', 'Formula parse error: expected "n".');
	        skipWhitespace();
	        if (is('+') || is('-')) {
	            var sign = is('+') ? 1 : -1;
	            next();
	            skipWhitespace();
	            return [firstNumber, sign * parseNumber()];
	        }
	        else {
	            return [firstNumber, 0];
	        }
	    }
	    function parsePseudoArgument(pseudoName, type, signature) {
	        var argument;
	        if (is('(')) {
	            next();
	            skipWhitespace();
	            if (substitutesEnabled && is('$')) {
	                next();
	                var name_5 = parseIdentifier();
	                assert(name_5, 'Expected substitute name.');
	                argument = {
	                    type: 'Substitution',
	                    name: name_5
	                };
	            }
	            else if (signature.type === 'String') {
	                argument = {
	                    type: 'String',
	                    value: parsePseudoClassString()
	                };
	                assert(argument.value, "Expected ".concat(type, " argument value."));
	            }
	            else if (signature.type === 'Selector') {
	                argument = parseSelector(true);
	            }
	            else if (signature.type === 'Formula') {
	                var _a = parseFormula(), a = _a[0], b = _a[1];
	                argument = {
	                    type: 'Formula',
	                    a: a,
	                    b: b
	                };
	                if (signature.ofSelector) {
	                    skipWhitespace();
	                    if (is('o') || is('\\')) {
	                        var ident = parseIdentifier();
	                        assert(ident === 'of', 'Formula of selector parse error.');
	                        skipWhitespace();
	                        argument = {
	                            type: 'FormulaOfSelector',
	                            a: a,
	                            b: b,
	                            selector: parseRule()
	                        };
	                    }
	                }
	            }
	            else {
	                return fail("Invalid ".concat(type, " signature."));
	            }
	            skipWhitespace();
	            if (isEof() && !strict) {
	                return argument;
	            }
	            pass(')');
	        }
	        else {
	            assert(signature.optional, "Argument is required for ".concat(type, " \"").concat(pseudoName, "\"."));
	        }
	        return argument;
	    }
	    function parseTagName() {
	        if (is('*')) {
	            assert(tagNameWildcardEnabled, 'Wildcard tag name is not enabled.');
	            next();
	            return { type: 'WildcardTag' };
	        }
	        else if (isIdentStart(chr)) {
	            assert(tagNameEnabled, 'Tag names are not enabled.');
	            var name_6 = parseIdentifier();
	            assert(name_6, 'Expected tag name.');
	            return {
	                type: 'TagName',
	                name: name_6
	            };
	        }
	        else {
	            return fail('Expected tag name.');
	        }
	    }
	    function parseTagNameWithNamespace() {
	        if (is('*')) {
	            var savedPos = pos;
	            next();
	            if (!is('|')) {
	                rewind(savedPos);
	                return parseTagName();
	            }
	            next();
	            if (!isTagStart()) {
	                rewind(savedPos);
	                return parseTagName();
	            }
	            assert(namespaceEnabled, 'Namespaces are not enabled.');
	            assert(namespaceWildcardEnabled, 'Wildcard namespace is not enabled.');
	            var tagName = parseTagName();
	            tagName.namespace = { type: 'WildcardNamespace' };
	            return tagName;
	        }
	        else if (is('|')) {
	            assert(namespaceEnabled, 'Namespaces are not enabled.');
	            next();
	            var tagName = parseTagName();
	            tagName.namespace = { type: 'NoNamespace' };
	            return tagName;
	        }
	        else if (isIdentStart(chr)) {
	            var identifier = parseIdentifier();
	            assert(identifier, 'Expected tag name.');
	            if (!is('|')) {
	                assert(tagNameEnabled, 'Tag names are not enabled.');
	                return {
	                    type: 'TagName',
	                    name: identifier
	                };
	            }
	            var savedPos = pos;
	            next();
	            if (!isTagStart()) {
	                rewind(savedPos);
	                return {
	                    type: 'TagName',
	                    name: identifier
	                };
	            }
	            assert(namespaceEnabled, 'Namespaces are not enabled.');
	            var tagName = parseTagName();
	            tagName.namespace = { type: 'NamespaceName', name: identifier };
	            return tagName;
	        }
	        else {
	            return fail('Expected tag name.');
	        }
	    }
	    function parseRule(relative) {
	        var _a, _b;
	        if (relative === void 0) { relative = false; }
	        var rule = { type: 'Rule', items: [] };
	        if (relative) {
	            var combinator = matchMulticharIndex(combinatorsIndex);
	            if (combinator) {
	                rule.combinator = combinator;
	                skipWhitespace();
	            }
	        }
	        while (pos < l) {
	            if (isTagStart()) {
	                assert(rule.items.length === 0, 'Unexpected tag/namespace start.');
	                rule.items.push(parseTagNameWithNamespace());
	            }
	            else if (is('|')) {
	                var savedPos = pos;
	                next();
	                if (isTagStart()) {
	                    assert(rule.items.length === 0, 'Unexpected tag/namespace start.');
	                    rewind(savedPos);
	                    rule.items.push(parseTagNameWithNamespace());
	                }
	                else {
	                    rewind(savedPos);
	                    break;
	                }
	            }
	            else if (is('.')) {
	                assert(classNamesEnabled, 'Class names are not enabled.');
	                next();
	                var className = parseIdentifier();
	                assert(className, 'Expected class name.');
	                rule.items.push({ type: 'ClassName', name: className });
	            }
	            else if (is('#')) {
	                assert(idEnabled, 'IDs are not enabled.');
	                next();
	                var idName = parseIdentifier();
	                assert(idName, 'Expected ID name.');
	                rule.items.push({ type: 'Id', name: idName });
	            }
	            else if (is('[')) {
	                assert(attributesEnabled, 'Attributes are not enabled.');
	                rule.items.push(parseAttribute());
	            }
	            else if (is(':')) {
	                var isDoubleColon = false;
	                var isPseudoElement = false;
	                next();
	                if (is(':')) {
	                    assert(pseudoElementsEnabled, 'Pseudo elements are not enabled.');
	                    assert(pseudoElementsDoubleColonNotationEnabled, 'Pseudo elements double colon notation is not enabled.');
	                    isDoubleColon = true;
	                    next();
	                }
	                var pseudoName = parseIdentifier();
	                assert(isDoubleColon || pseudoName, 'Expected pseudo-class name.');
	                assert(!isDoubleColon || pseudoName, 'Expected pseudo-element name.');
	                assert(pseudoName, 'Expected pseudo-class name.');
	                assert(!isDoubleColon ||
	                    pseudoElementsAcceptUnknown ||
	                    Object.prototype.hasOwnProperty.call(pseudoElementsDefinitions, pseudoName), "Unknown pseudo-element \"".concat(pseudoName, "\"."));
	                isPseudoElement =
	                    pseudoElementsEnabled &&
	                        (isDoubleColon ||
	                            (!isDoubleColon &&
	                                pseudoElementsSingleColonNotationEnabled &&
	                                Object.prototype.hasOwnProperty.call(pseudoElementsDefinitions, pseudoName)));
	                if (isPseudoElement) {
	                    var signature = (_a = pseudoElementsDefinitions[pseudoName]) !== null && _a !== void 0 ? _a : (pseudoElementsAcceptUnknown && defaultPseudoSignature);
	                    var pseudoElement = {
	                        type: 'PseudoElement',
	                        name: pseudoName
	                    };
	                    var argument = parsePseudoArgument(pseudoName, 'pseudo-element', signature);
	                    if (argument) {
	                        assert(argument.type !== 'Formula' && argument.type !== 'FormulaOfSelector', 'Pseudo-elements cannot have formula argument.');
	                        pseudoElement.argument = argument;
	                    }
	                    rule.items.push(pseudoElement);
	                }
	                else {
	                    assert(pseudoClassesEnabled, 'Pseudo-classes are not enabled.');
	                    var signature = (_b = pseudoClassesDefinitions[pseudoName]) !== null && _b !== void 0 ? _b : (pseudoClassesAcceptUnknown && defaultPseudoSignature);
	                    assert(signature, "Unknown pseudo-class: \"".concat(pseudoName, "\"."));
	                    var argument = parsePseudoArgument(pseudoName, 'pseudo-class', signature);
	                    var pseudoClass = {
	                        type: 'PseudoClass',
	                        name: pseudoName
	                    };
	                    if (argument) {
	                        pseudoClass.argument = argument;
	                    }
	                    rule.items.push(pseudoClass);
	                }
	            }
	            else {
	                break;
	            }
	        }
	        if (rule.items.length === 0) {
	            if (isEof()) {
	                return fail('Expected rule but end of input reached.');
	            }
	            else {
	                return fail("Expected rule but \"".concat(chr, "\" found."));
	            }
	        }
	        skipWhitespace();
	        if (!isEof() && !is(',') && !is(')')) {
	            var combinator = matchMulticharIndex(combinatorsIndex);
	            skipWhitespace();
	            rule.nestedRule = parseRule();
	            rule.nestedRule.combinator = combinator;
	        }
	        return rule;
	    }
	    return function (input) {
	        // noinspection SuspiciousTypeOfGuard
	        if (typeof input !== 'string') {
	            throw new Error("".concat(errorPrefix, "Expected string input."));
	        }
	        str = input;
	        l = str.length;
	        pos = 0;
	        chr = str.charAt(0);
	        return parseSelector();
	    };
	}

	var __assign = (undefined && undefined.__assign) || function () {
	    __assign = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign.apply(this, arguments);
	};
	function astMethods(type) {
	    return function (generatorName, checkerName) {
	        var _a;
	        return (_a = {},
	            _a[generatorName] = function (props) { return (__assign({ type: type }, props)); },
	            _a[checkerName] = function (entity) {
	                return typeof entity === 'object' && entity !== null && entity.type === type;
	            },
	            _a);
	    };
	}
	/**
	 * AST structure generators and matchers.
	 * For instance, `ast.selector({rules: [...]})` creates AstSelector and `ast.isSelector(...)` checks if
	 * AstSelector was specified.
	 *
	 * @example
	 *
	 * // Represents CSS selector: ns|div#user-34.user.user-active[role="button"]:lang(en)::before > *
	 * const selector = ast.selector({
	 *     rules: [
	 *         ast.rule({
	 *             items: [
	 *                 ast.tagName({name: 'div', namespace: ast.namespaceName({name: 'ns'})}),
	 *                 ast.id({name: 'user-34'}),
	 *                 ast.className({name: 'user'}),
	 *                 ast.className({name: 'user-active'}),
	 *                 ast.attribute({
	 *                     name: 'role',
	 *                     operator: '=',
	 *                     value: ast.string({value: 'button'})
	 *                 }),
	 *                 ast.pseudoClass({
	 *                     name: 'lang',
	 *                     argument: ast.string({value: 'en'})
	 *                 }),
	 *                 ast.pseudoElement({name: 'before'})
	 *             ],
	 *             nestedRule: ast.rule({combinator: '>', items: [ast.wildcardTag()]})
	 *         })
	 *     ]
	 * });
	 * console.log(ast.isSelector(selector)); // prints true
	 * console.log(ast.isRule(selector)); // prints false
	 */
	__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, astMethods('Selector')('selector', 'isSelector')), astMethods('Rule')('rule', 'isRule')), astMethods('TagName')('tagName', 'isTagName')), astMethods('Id')('id', 'isId')), astMethods('ClassName')('className', 'isClassName')), astMethods('WildcardTag')('wildcardTag', 'isWildcardTag')), astMethods('NamespaceName')('namespaceName', 'isNamespaceName')), astMethods('WildcardNamespace')('wildcardNamespace', 'isWildcardNamespace')), astMethods('NoNamespace')('noNamespace', 'isNoNamespace')), astMethods('Attribute')('attribute', 'isAttribute')), astMethods('PseudoClass')('pseudoClass', 'isPseudoClass')), astMethods('PseudoElement')('pseudoElement', 'isPseudoElement')), astMethods('String')('string', 'isString')), astMethods('Formula')('formula', 'isFormula')), astMethods('FormulaOfSelector')('formulaOfSelector', 'isFormulaOfSelector')), astMethods('Substitution')('substitution', 'isSubstitution'));

	/**
	 * @typedef {import('css-selector-parser').AstSelector} AstSelector
	 */


	const cssSelectorParse = createParser({syntax: 'selectors-4'});

	/**
	 * @param {string} selector
	 *   Selector to parse.
	 * @returns {AstSelector}
	 *   Parsed selector.
	 */
	function parse$1(selector) {
	  if (typeof selector !== 'string') {
	    throw new TypeError('Expected `string` as selector, not `' + selector + '`')
	  }

	  return cssSelectorParse(selector)
	}

	const rtlRange = '\u0591-\u07FF\uFB1D-\uFDFD\uFE70-\uFEFC';
	const ltrRange =
	  'A-Za-z\u00C0-\u00D6\u00D8-\u00F6' +
	  '\u00F8-\u02B8\u0300-\u0590\u0800-\u1FFF\u200E\u2C00-\uFB1C' +
	  '\uFE00-\uFE6F\uFEFD-\uFFFF';

	/* eslint-disable no-misleading-character-class */
	const rtl = new RegExp('^[^' + ltrRange + ']*[' + rtlRange + ']');
	const ltr = new RegExp('^[^' + rtlRange + ']*[' + ltrRange + ']');
	/* eslint-enable no-misleading-character-class */

	/**
	 * Detect the direction of text: left-to-right, right-to-left, or neutral
	 *
	 * @param {string} value
	 * @returns {'rtl'|'ltr'|'neutral'}
	 */
	function direction(value) {
	  const source = String(value || '');
	  return rtl.test(source) ? 'rtl' : ltr.test(source) ? 'ltr' : 'neutral'
	}

	/**
	 * @typedef {import('hast').Nodes} Nodes
	 * @typedef {import('hast').Parents} Parents
	 */

	/**
	 * Get the plain-text value of a hast node.
	 *
	 * @param {Nodes} node
	 *   Node to serialize.
	 * @returns {string}
	 *   Serialized node.
	 */
	function toString(node) {
	  // “The concatenation of data of all the Text node descendants of the context
	  // object, in tree order.”
	  if ('children' in node) {
	    return all$2(node)
	  }

	  // “Context object’s data.”
	  return 'value' in node ? node.value : ''
	}

	/**
	 * @param {Nodes} node
	 *   Node.
	 * @returns {string}
	 *   Serialized node.
	 */
	function one$2(node) {
	  if (node.type === 'text') {
	    return node.value
	  }

	  return 'children' in node ? all$2(node) : ''
	}

	/**
	 * @param {Parents} node
	 *   Node.
	 * @returns {string}
	 *   Serialized node.
	 */
	function all$2(node) {
	  let index = -1;
	  /** @type {Array<string>} */
	  const result = [];

	  while (++index < node.children.length) {
	    result[index] = one$2(node.children[index]);
	  }

	  return result.join('')
	}

	/**
	 * @typedef {import('hast').ElementContent} ElementContent
	 * @typedef {import('hast').Nodes} Nodes
	 *
	 * @typedef {import('unist-util-visit').Visitor<ElementContent>} Visitor
	 *
	 * @typedef {import('./index.js').Direction} Direction
	 * @typedef {import('./index.js').State} State
	 */


	/**
	 * Enter a node.
	 *
	 * The caller is responsible for calling the return value `exit`.
	 *
	 * @param {State} state
	 *   Current state.
	 *
	 *   Will be mutated: `exit` undos the changes.
	 * @param {Nodes} node
	 *   Node to enter.
	 * @returns {() => undefined}
	 *   Call to exit.
	 */
	// eslint-disable-next-line complexity
	function enterState(state, node) {
	  const schema = state.schema;
	  const language = state.language;
	  const currentDirection = state.direction;
	  const editableOrEditingHost = state.editableOrEditingHost;
	  /** @type {Direction | undefined} */
	  let dirInferred;

	  if (node.type === 'element') {
	    const lang = node.properties.xmlLang || node.properties.lang;
	    const type = node.properties.type || 'text';
	    const dir = dirProperty(node);

	    if (lang !== null && lang !== undefined) {
	      state.language = String(lang);
	    }

	    if (schema && schema.space === 'html') {
	      if (node.properties.contentEditable === 'true') {
	        state.editableOrEditingHost = true;
	      }

	      if (node.tagName === 'svg') {
	        state.schema = svg;
	      }

	      // See: <https://html.spec.whatwg.org/#the-directionality>.
	      // Explicit `[dir=rtl]`.
	      if (dir === 'rtl') {
	        dirInferred = dir;
	      } else if (
	        // Explicit `[dir=ltr]`.
	        dir === 'ltr' ||
	        // HTML with an invalid or no `[dir]`.
	        (dir !== 'auto' && node.tagName === 'html') ||
	        // `input[type=tel]` with an invalid or no `[dir]`.
	        (dir !== 'auto' && node.tagName === 'input' && type === 'tel')
	      ) {
	        dirInferred = 'ltr';
	        // `[dir=auto]` or `bdi` with an invalid or no `[dir]`.
	      } else if (dir === 'auto' || node.tagName === 'bdi') {
	        if (node.tagName === 'textarea') {
	          // Check contents of `<textarea>`.
	          dirInferred = dirBidi(toString(node));
	        } else if (
	          node.tagName === 'input' &&
	          (type === 'email' ||
	            type === 'search' ||
	            type === 'tel' ||
	            type === 'text')
	        ) {
	          // Check value of `<input>`.
	          dirInferred = node.properties.value
	            ? dirBidi(String(node.properties.value))
	            : 'ltr';
	        } else {
	          // Check text nodes in `node`.
	          visit$1(node, inferDirectionality);
	        }
	      }

	      if (dirInferred) {
	        state.direction = dirInferred;
	      }
	    }
	    // Turn off editing mode in non-HTML spaces.
	    else if (state.editableOrEditingHost) {
	      state.editableOrEditingHost = false;
	    }
	  }

	  return reset

	  /**
	   * @returns {undefined}
	   *   Nothing.
	   */
	  function reset() {
	    state.schema = schema;
	    state.language = language;
	    state.direction = currentDirection;
	    state.editableOrEditingHost = editableOrEditingHost;
	  }

	  /** @type {Visitor} */
	  function inferDirectionality(child) {
	    if (child.type === 'text') {
	      dirInferred = dirBidi(child.value);
	      return dirInferred ? EXIT$1 : undefined
	    }

	    if (
	      child !== node &&
	      child.type === 'element' &&
	      (child.tagName === 'bdi' ||
	        child.tagName === 'script' ||
	        child.tagName === 'style' ||
	        child.tagName === 'textare' ||
	        dirProperty(child))
	    ) {
	      return SKIP$1
	    }
	  }
	}

	/**
	 * See `wooorm/direction`.
	 *
	 * @param {string} value
	 *   Value to check.
	 * @returns {Exclude<Direction, 'auto'> | undefined}
	 *   Directionality.
	 */
	function dirBidi(value) {
	  const result = direction(value);
	  return result === 'neutral' ? undefined : result
	}

	/**
	 * @param {ElementContent} node
	 *   Node to check.
	 * @returns {Direction | undefined}
	 *   Directionality.
	 */
	function dirProperty(node) {
	  const value =
	    node.type === 'element' && typeof node.properties.dir === 'string'
	      ? node.properties.dir.toLowerCase()
	      : undefined;

	  return value === 'auto' || value === 'ltr' || value === 'rtl'
	    ? value
	    : undefined
	}

	/**
	 * @typedef {import('css-selector-parser').AstAttribute} AstAttribute
	 *
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').Properties} Properties
	 *
	 * @typedef {import('property-information').Info} Info
	 * @typedef {import('property-information').Schema} Schema
	 */


	/**
	 * @param {AstAttribute} query
	 *   Query.
	 * @param {Element} element
	 *   Element.
	 * @param {Schema} schema
	 *   Schema of element.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function attribute(query, element, schema) {
	  const info = find(schema, query.name);
	  const propertyValue = element.properties[info.property];
	  let value = normalizeValue(propertyValue, info);

	  // Exists.
	  if (!query.value) {
	    return value !== undefined
	  }

	  ok$3(query.value.type === 'String');
	  let key = query.value.value;

	  // Case-sensitivity.
	  if (query.caseSensitivityModifier === 'i') {
	    key = key.toLowerCase();

	    if (value) {
	      value = value.toLowerCase();
	    }
	  }

	  if (value !== undefined) {
	    switch (query.operator) {
	      // Exact.
	      case '=': {
	        return key === value
	      }

	      // Ends.
	      case '$=': {
	        return key === value.slice(-key.length)
	      }

	      // Contains.
	      case '*=': {
	        return value.includes(key)
	      }

	      // Begins.
	      case '^=': {
	        return key === value.slice(0, key.length)
	      }

	      // Exact or prefix.
	      case '|=': {
	        return (
	          key === value ||
	          (key === value.slice(0, key.length) &&
	            value.charAt(key.length) === '-')
	        )
	      }

	      // Space-separated list.
	      case '~=': {
	        return (
	          // For all other values (including comma-separated lists), return whether this
	          // is an exact match.
	          key === value ||
	          // If this is a space-separated list, and the query is contained in it, return
	          // true.
	          parse$4(value).includes(key)
	        )
	      }
	      // Other values are not yet supported by CSS.
	      // No default
	    }
	  }

	  return false
	}

	/**
	 *
	 * @param {Properties[keyof Properties]} value
	 * @param {Info} info
	 * @returns {string | undefined}
	 */
	function normalizeValue(value, info) {
	  if (value === null || value === undefined) ; else if (typeof value === 'boolean') {
	    if (value) {
	      return info.attribute
	    }
	  } else if (Array.isArray(value)) {
	    if (value.length > 0) {
	      return (info.commaSeparated ? stringify$2 : stringify$1)(value)
	    }
	  } else {
	    return String(value)
	  }
	}

	/**
	 * @typedef {import('css-selector-parser').AstClassName} AstClassName
	 * @typedef {import('hast').Element} Element
	 */

	/** @type {Array<never>} */
	const emptyClassNames = [];

	/**
	 * Check whether an element has all class names.
	 *
	 * @param {AstClassName} query
	 *   AST rule (with `classNames`).
	 * @param {Element} element
	 *   Element.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function className(query, element) {
	  // Assume array.
	  const value = /** @type {Readonly<Array<string>>} */ (
	    element.properties.className || emptyClassNames
	  );

	  return value.includes(query.name)
	}

	/**
	 * @typedef {import('css-selector-parser').AstId} AstId
	 *
	 * @typedef {import('hast').Element} Element
	 */


	/**
	 * Check whether an element has an ID.
	 *
	 * @param {AstId} query
	 *   AST rule (with `ids`).
	 * @param {Element} element
	 *   Element.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function id(query, element) {
	  return element.properties.id === query.name
	}

	/**
	 * @typedef {import('css-selector-parser').AstTagName} AstTagName
	 *
	 * @typedef {import('hast').Element} Element
	 */


	/**
	 * Check whether an element has a tag name.
	 *
	 * @param {AstTagName} query
	 *   AST rule (with `tag`).
	 * @param {Element} element
	 *   Element.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function name(query, element) {
	  return query.name === element.tagName
	}

	/**
	 * See <https://tools.ietf.org/html/rfc4647#section-3.1>
	 * for more info on the algorithms.
	 */

	/**
	 * @typedef {string} Tag
	 *   BCP-47 tag.
	 * @typedef {Array<Tag>} Tags
	 *   List of BCP-47 tags.
	 * @typedef {string} Range
	 *   RFC 4647 range.
	 * @typedef {Array<Range>} Ranges
	 *   List of RFC 4647 range.
	 *
	 * @callback Check
	 *   An internal check.
	 * @param {Tag} tag
	 *   BCP-47 tag.
	 * @param {Range} range
	 *   RFC 4647 range.
	 * @returns {boolean}
	 *   Whether the range matches the tag.
	 *
	 * @typedef {FilterOrLookup<true>} Filter
	 *   Filter: yields all tags that match a range.
	 * @typedef {FilterOrLookup<false>} Lookup
	 *   Lookup: yields the best tag that matches a range.
	 */

	/**
	 * @template {boolean} IsFilter
	 *   Whether to filter or perform a lookup.
	 * @callback FilterOrLookup
	 *   A check.
	 * @param {Tag|Tags} tags
	 *   One or more BCP-47 tags.
	 * @param {Range|Ranges|undefined} [ranges='*']
	 *   One or more RFC 4647 ranges.
	 * @returns {IsFilter extends true ? Tags : Tag|undefined}
	 *   Result.
	 */

	/**
	 * Factory to perform a filter or a lookup.
	 *
	 * This factory creates a function that accepts a list of tags and a list of
	 * ranges, and contains logic to exit early for lookups.
	 * `check` just has to deal with one tag and one range.
	 * This match function iterates over ranges, and for each range,
	 * iterates over tags.
	 * That way, earlier ranges matching any tag have precedence over later ranges.
	 *
	 * @template {boolean} IsFilter
	 * @param {Check} check
	 *   A check.
	 * @param {IsFilter} filter
	 *   Whether to filter or perform a lookup.
	 * @returns {FilterOrLookup<IsFilter>}
	 *   Filter or lookup.
	 */
	function factory(check, filter) {
	  /**
	   * @param {Tag|Tags} tags
	   *   One or more BCP-47 tags.
	   * @param {Range|Ranges|undefined} [ranges='*']
	   *   One or more RFC 4647 ranges.
	   * @returns {IsFilter extends true ? Tags : Tag|undefined}
	   *   Result.
	   */
	  return function (tags, ranges) {
	    let left = cast(tags, 'tag');
	    const right = cast(
	      ranges === null || ranges === undefined ? '*' : ranges,
	      'range'
	    );
	    /** @type {Tags} */
	    const matches = [];
	    let rightIndex = -1;

	    while (++rightIndex < right.length) {
	      const range = right[rightIndex].toLowerCase();

	      // Ignore wildcards in lookup mode.
	      if (!filter && range === '*') continue

	      let leftIndex = -1;
	      /** @type {Tags} */
	      const next = [];

	      while (++leftIndex < left.length) {
	        if (check(left[leftIndex].toLowerCase(), range)) {
	          // Exit if this is a lookup and we have a match.
	          if (!filter) {
	            return /** @type {IsFilter extends true ? Tags : Tag|undefined} */ (
	              left[leftIndex]
	            )
	          }

	          matches.push(left[leftIndex]);
	        } else {
	          next.push(left[leftIndex]);
	        }
	      }

	      left = next;
	    }

	    // If this is a filter, return the list.  If it’s a lookup, we didn’t find
	    // a match, so return `undefined`.
	    return /** @type {IsFilter extends true ? Tags : Tag|undefined} */ (
	      filter ? matches : undefined
	    )
	  }
	}

	/**
	 * Extended Filtering (Section 3.3.2) matches a language priority list
	 * consisting of extended language ranges (Section 2.2) to sets of language
	 * tags.
	 *
	 * @param {Tag|Tags} tags
	 *   One or more BCP-47 tags.
	 * @param {Range|Ranges|undefined} [ranges='*']
	 *   One or more RFC 4647 ranges.
	 * @returns {Tags}
	 *   List of BCP-47 tags.
	 */
	const extendedFilter = factory(function (tag, range) {
	  // 3.3.2.1
	  const left = tag.split('-');
	  const right = range.split('-');
	  let leftIndex = 0;
	  let rightIndex = 0;

	  // 3.3.2.2
	  if (right[rightIndex] !== '*' && left[leftIndex] !== right[rightIndex]) {
	    return false
	  }

	  leftIndex++;
	  rightIndex++;

	  // 3.3.2.3
	  while (rightIndex < right.length) {
	    // 3.3.2.3.A
	    if (right[rightIndex] === '*') {
	      rightIndex++;
	      continue
	    }

	    // 3.3.2.3.B
	    if (!left[leftIndex]) return false

	    // 3.3.2.3.C
	    if (left[leftIndex] === right[rightIndex]) {
	      leftIndex++;
	      rightIndex++;
	      continue
	    }

	    // 3.3.2.3.D
	    if (left[leftIndex].length === 1) return false

	    // 3.3.2.3.E
	    leftIndex++;
	  }

	  // 3.3.2.4
	  return true
	}, true);

	/**
	 * Validate tags or ranges, and cast them to arrays.
	 *
	 * @param {string|Array<string>} values
	 * @param {string} name
	 * @returns {Array<string>}
	 */
	function cast(values, name) {
	  const value = values && typeof values === 'string' ? [values] : values;

	  if (!value || typeof value !== 'object' || !('length' in value)) {
	    throw new Error(
	      'Invalid ' + name + ' `' + value + '`, expected non-empty string'
	    )
	  }

	  return value
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').Nodes} Nodes
	 */

	const own$3 = {}.hasOwnProperty;

	/**
	 * Check if `node` is an element and has a `name` property.
	 *
	 * @template {string} Key
	 *   Type of key.
	 * @param {Nodes} node
	 *   Node to check (typically `Element`).
	 * @param {Key} name
	 *   Property name to check.
	 * @returns {node is Element & {properties: Record<Key, Array<number | string> | number | string | true>}}}
	 *   Whether `node` is an element that has a `name` property.
	 *
	 *   Note: see <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/27c9274/types/hast/index.d.ts#L37C29-L37C98>.
	 */
	function hasProperty(node, name) {
	  const value =
	    node.type === 'element' &&
	    own$3.call(node.properties, name) &&
	    node.properties[name];

	  return value !== null && value !== undefined && value !== false
	}

	// Following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo
	// Whitespace as per https://www.w3.org/TR/selectors-3/#lex is " \t\r\n\f"
	const whitespace = new Set([9, 10, 12, 13, 32]);
	const ZERO = "0".charCodeAt(0);
	const NINE = "9".charCodeAt(0);
	/**
	 * Parses an expression.
	 *
	 * @throws An `Error` if parsing fails.
	 * @returns An array containing the integer step size and the integer offset of the nth rule.
	 * @example nthCheck.parse("2n+3"); // returns [2, 3]
	 */
	function parse(formula) {
	    formula = formula.trim().toLowerCase();
	    if (formula === "even") {
	        return [2, 0];
	    }
	    else if (formula === "odd") {
	        return [2, 1];
	    }
	    // Parse [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?
	    let idx = 0;
	    let a = 0;
	    let sign = readSign();
	    let number = readNumber();
	    if (idx < formula.length && formula.charAt(idx) === "n") {
	        idx++;
	        a = sign * (number !== null && number !== void 0 ? number : 1);
	        skipWhitespace();
	        if (idx < formula.length) {
	            sign = readSign();
	            skipWhitespace();
	            number = readNumber();
	        }
	        else {
	            sign = number = 0;
	        }
	    }
	    // Throw if there is anything else
	    if (number === null || idx < formula.length) {
	        throw new Error(`n-th rule couldn't be parsed ('${formula}')`);
	    }
	    return [a, sign * number];
	    function readSign() {
	        if (formula.charAt(idx) === "-") {
	            idx++;
	            return -1;
	        }
	        if (formula.charAt(idx) === "+") {
	            idx++;
	        }
	        return 1;
	    }
	    function readNumber() {
	        const start = idx;
	        let value = 0;
	        while (idx < formula.length &&
	            formula.charCodeAt(idx) >= ZERO &&
	            formula.charCodeAt(idx) <= NINE) {
	            value = value * 10 + (formula.charCodeAt(idx) - ZERO);
	            idx++;
	        }
	        // Return `null` if we didn't read anything.
	        return idx === start ? null : value;
	    }
	    function skipWhitespace() {
	        while (idx < formula.length &&
	            whitespace.has(formula.charCodeAt(idx))) {
	            idx++;
	        }
	    }
	}

	var boolbase = {
		trueFunc: function trueFunc(){
			return true;
		},
		falseFunc: function falseFunc(){
			return false;
		}
	};

	const boolbase$1 = /*@__PURE__*/getDefaultExportFromCjs(boolbase);

	/**
	 * Returns a function that checks if an elements index matches the given rule
	 * highly optimized to return the fastest solution.
	 *
	 * @param parsed A tuple [a, b], as returned by `parse`.
	 * @returns A highly optimized function that returns whether an index matches the nth-check.
	 * @example
	 *
	 * ```js
	 * const check = nthCheck.compile([2, 3]);
	 *
	 * check(0); // `false`
	 * check(1); // `false`
	 * check(2); // `true`
	 * check(3); // `false`
	 * check(4); // `true`
	 * check(5); // `false`
	 * check(6); // `true`
	 * ```
	 */
	function compile(parsed) {
	    const a = parsed[0];
	    // Subtract 1 from `b`, to convert from one- to zero-indexed.
	    const b = parsed[1] - 1;
	    /*
	     * When `b <= 0`, `a * n` won't be lead to any matches for `a < 0`.
	     * Besides, the specification states that no elements are
	     * matched when `a` and `b` are 0.
	     *
	     * `b < 0` here as we subtracted 1 from `b` above.
	     */
	    if (b < 0 && a <= 0)
	        return boolbase$1.falseFunc;
	    // When `a` is in the range -1..1, it matches any element (so only `b` is checked).
	    if (a === -1)
	        return (index) => index <= b;
	    if (a === 0)
	        return (index) => index === b;
	    // When `b <= 0` and `a === 1`, they match any element.
	    if (a === 1)
	        return b < 0 ? boolbase$1.trueFunc : (index) => index >= b;
	    /*
	     * Otherwise, modulo can be used to check if there is a match.
	     *
	     * Modulo doesn't care about the sign, so let's use `a`s absolute value.
	     */
	    const absA = Math.abs(a);
	    // Get `b mod a`, + a if this is negative.
	    const bMod = ((b % absA) + absA) % absA;
	    return a > 1
	        ? (index) => index >= b && index % absA === bMod
	        : (index) => index <= b && index % absA === bMod;
	}

	/**
	 * Parses and compiles a formula to a highly optimized function.
	 * Combination of {@link parse} and {@link compile}.
	 *
	 * If the formula doesn't match any elements,
	 * it returns [`boolbase`](https://github.com/fb55/boolbase)'s `falseFunc`.
	 * Otherwise, a function accepting an _index_ is returned, which returns
	 * whether or not the passed _index_ matches the formula.
	 *
	 * Note: The nth-rule starts counting at `1`, the returned function at `0`.
	 *
	 * @param formula The formula to compile.
	 * @example
	 * const check = nthCheck("2n+3");
	 *
	 * check(0); // `false`
	 * check(1); // `false`
	 * check(2); // `true`
	 * check(3); // `false`
	 * check(4); // `true`
	 * check(5); // `false`
	 * check(6); // `true`
	 */
	function nthCheck$1(formula) {
	    return compile(parse(formula));
	}

	/**
	 * @typedef {import('css-selector-parser').AstPseudoClass} AstPseudoClass
	 *
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').ElementContent} ElementContent
	 * @typedef {import('hast').Parents} Parents
	 *
	 * @typedef {import('./index.js').State} State
	 */


	/** @type {import('nth-check').default} */
	// @ts-expect-error: types are broken.
	const nthCheck = nthCheck$1.default || nthCheck$1;

	/** @type {(rule: AstPseudoClass, element: Element, index: number | undefined, parent: Parents | undefined, state: State) => boolean} */
	const pseudo = zwitch('name', {
	  handlers: {
	    'any-link': anyLink,
	    blank,
	    checked,
	    dir,
	    disabled,
	    empty: empty$1,
	    enabled,
	    'first-child': firstChild,
	    'first-of-type': firstOfType,
	    has,
	    is,
	    lang,
	    'last-child': lastChild,
	    'last-of-type': lastOfType,
	    not,
	    'nth-child': nthChild,
	    'nth-last-child': nthLastChild,
	    'nth-last-of-type': nthLastOfType,
	    'nth-of-type': nthOfType,
	    'only-child': onlyChild,
	    'only-of-type': onlyOfType,
	    optional,
	    'read-only': readOnly,
	    'read-write': readWrite,
	    required,
	    root: root$2,
	    scope
	  },
	  invalid: invalidPseudo,
	  unknown: unknownPseudo
	});

	/**
	 * Check whether an element matches an `:any-link` pseudo.
	 *
	 * @param {AstPseudoClass} _
	 *   Query.
	 * @param {Element} element
	 *   Element.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function anyLink(_, element) {
	  return (
	    (element.tagName === 'a' ||
	      element.tagName === 'area' ||
	      element.tagName === 'link') &&
	    hasProperty(element, 'href')
	  )
	}

	/**
	 * @param {State} state
	 *   State.
	 * @param {AstPseudoClass} query
	 *   Query.
	 */
	function assertDeep(state, query) {
	  if (state.shallow) {
	    throw new Error('Cannot use `:' + query.name + '` without parent')
	  }
	}

	/**
	 * Check whether an element matches a `:blank` pseudo.
	 *
	 * @param {AstPseudoClass} _
	 *   Query.
	 * @param {Element} element
	 *   Element.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function blank(_, element) {
	  return !someChildren(element, check)

	  /**
	   * @param {ElementContent} child
	   * @returns {boolean}
	   */
	  function check(child) {
	    return (
	      child.type === 'element' || (child.type === 'text' && !whitespace$1(child))
	    )
	  }
	}

	/**
	 * Check whether an element matches a `:checked` pseudo.
	 *
	 * @param {AstPseudoClass} _
	 *   Query.
	 * @param {Element} element
	 *   Element.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function checked(_, element) {
	  if (element.tagName === 'input' || element.tagName === 'menuitem') {
	    return Boolean(
	      (element.properties.type === 'checkbox' ||
	        element.properties.type === 'radio') &&
	        hasProperty(element, 'checked')
	    )
	  }

	  if (element.tagName === 'option') {
	    return hasProperty(element, 'selected')
	  }

	  return false
	}

	/**
	 * Check whether an element matches a `:dir()` pseudo.
	 *
	 * @param {AstPseudoClass} query
	 *   Query.
	 * @param {Element} _1
	 *   Element.
	 * @param {number | undefined} _2
	 *   Index of `element` in `parent`.
	 * @param {Parents | undefined} _3
	 *   Parent of `element`.
	 * @param {State} state
	 *   State.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function dir(query, _1, _2, _3, state) {
	  ok$3(query.argument);
	  ok$3(query.argument.type === 'String');
	  return state.direction === query.argument.value
	}

	/**
	 * Check whether an element matches a `:disabled` pseudo.
	 *
	 * @param {AstPseudoClass} _
	 *   Query.
	 * @param {Element} element
	 *   Element.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function disabled(_, element) {
	  return (
	    (element.tagName === 'button' ||
	      element.tagName === 'input' ||
	      element.tagName === 'select' ||
	      element.tagName === 'textarea' ||
	      element.tagName === 'optgroup' ||
	      element.tagName === 'option' ||
	      element.tagName === 'menuitem' ||
	      element.tagName === 'fieldset') &&
	    hasProperty(element, 'disabled')
	  )
	}

	/**
	 * Check whether an element matches an `:empty` pseudo.
	 *
	 * @param {AstPseudoClass} _
	 *   Query.
	 * @param {Element} element
	 *   Element.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function empty$1(_, element) {
	  return !someChildren(element, check)

	  /**
	   * @param {ElementContent} child
	   * @returns {boolean}
	   */
	  function check(child) {
	    return child.type === 'element' || child.type === 'text'
	  }
	}

	/**
	 * Check whether an element matches an `:enabled` pseudo.
	 *
	 * @param {AstPseudoClass} query
	 *   Query.
	 * @param {Element} element
	 *   Element.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function enabled(query, element) {
	  return !disabled(query, element)
	}

	/**
	 * Check whether an element matches a `:first-child` pseudo.
	 *
	 * @param {AstPseudoClass} query
	 *   Query.
	 * @param {Element} _1
	 *   Element.
	 * @param {number | undefined} _2
	 *   Index of `element` in `parent`.
	 * @param {Parents | undefined} _3
	 *   Parent of `element`.
	 * @param {State} state
	 *   State.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function firstChild(query, _1, _2, _3, state) {
	  assertDeep(state, query);
	  return state.elementIndex === 0
	}

	/**
	 * Check whether an element matches a `:first-of-type` pseudo.
	 *
	 * @param {AstPseudoClass} query
	 *   Query.
	 * @param {Element} _1
	 *   Element.
	 * @param {number | undefined} _2
	 *   Index of `element` in `parent`.
	 * @param {Parents | undefined} _3
	 *   Parent of `element`.
	 * @param {State} state
	 *   State.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function firstOfType(query, _1, _2, _3, state) {
	  assertDeep(state, query);
	  return state.typeIndex === 0
	}

	/**
	 * @param {AstPseudoClass} query
	 *   Query.
	 * @returns {(value: number) => boolean}
	 *   N.
	 */
	function getCachedNthCheck(query) {
	  /** @type {(value: number) => boolean} */
	  // @ts-expect-error: cache.
	  let fn = query._cachedFn;

	  if (!fn) {
	    const value = query.argument;

	    if (value.type !== 'Formula') {
	      throw new Error(
	        'Expected `nth` formula, such as `even` or `2n+1` (`of` is not yet supported)'
	      )
	    }

	    fn = nthCheck(value.a + 'n+' + value.b);
	    // @ts-expect-error: cache.
	    query._cachedFn = fn;
	  }

	  return fn
	}

	/**
	 * @param {AstPseudoClass} query
	 *   Query.
	 * @param {Element} element
	 *   Element.
	 * @param {number | undefined} _1
	 *   Index of `element` in `parent`.
	 * @param {Parents | undefined} _2
	 *   Parent of `element`.
	 * @param {State} state
	 *   State.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function has(query, element, _1, _2, state) {
	  ok$3(query.argument);
	  ok$3(query.argument.type === 'Selector');

	  /** @type {State} */
	  const childState = {
	    ...state,
	    // Not found yet.
	    found: false,
	    // One result is enough.
	    one: true,
	    results: [],
	    rootQuery: query.argument,
	    scopeElements: [element],
	    // Do walk deep.
	    shallow: false
	  };

	  walk(childState, {type: 'root', children: element.children});

	  return childState.results.length > 0
	}

	// Shouldn’t be called, parser gives correct data.
	/* c8 ignore next 3 */
	function invalidPseudo() {
	}

	/**
	 * Check whether an element `:is` further selectors.
	 *
	 * @param {AstPseudoClass} query
	 *   Query.
	 * @param {Element} element
	 *   Element.
	 * @param {number | undefined} _1
	 *   Index of `element` in `parent`.
	 * @param {Parents | undefined} _2
	 *   Parent of `element`.
	 * @param {State} state
	 *   State.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function is(query, element, _1, _2, state) {
	  ok$3(query.argument);
	  ok$3(query.argument.type === 'Selector');

	  /** @type {State} */
	  const childState = {
	    ...state,
	    // Not found yet.
	    found: false,
	    // One result is enough.
	    one: true,
	    results: [],
	    rootQuery: query.argument,
	    scopeElements: [element],
	    // Do walk deep.
	    shallow: false
	  };

	  walk(childState, element);

	  return childState.results[0] === element
	}

	/**
	 * Check whether an element matches a `:lang()` pseudo.
	 *
	 * @param {AstPseudoClass} query
	 *   Query.
	 * @param {Element} _1
	 *   Element.
	 * @param {number | undefined} _2
	 *   Index of `element` in `parent`.
	 * @param {Parents | undefined} _3
	 *   Parent of `element`.
	 * @param {State} state
	 *   State.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function lang(query, _1, _2, _3, state) {
	  ok$3(query.argument);
	  ok$3(query.argument.type === 'String');

	  return (
	    state.language !== '' &&
	    state.language !== undefined &&
	    extendedFilter(state.language, parse$5(query.argument.value)).length > 0
	  )
	}

	/**
	 * Check whether an element matches a `:last-child` pseudo.
	 *
	 * @param {AstPseudoClass} query
	 *   Query.
	 * @param {Element} _1
	 *   Element.
	 * @param {number | undefined} _2
	 *   Index of `element` in `parent`.
	 * @param {Parents | undefined} _3
	 *   Parent of `element`.
	 * @param {State} state
	 *   State.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function lastChild(query, _1, _2, _3, state) {
	  assertDeep(state, query);
	  return Boolean(
	    state.elementCount && state.elementIndex === state.elementCount - 1
	  )
	}

	/**
	 * Check whether an element matches a `:last-of-type` pseudo.
	 *
	 * @param {AstPseudoClass} query
	 *   Query.
	 * @param {Element} _1
	 *   Element.
	 * @param {number | undefined} _2
	 *   Index of `element` in `parent`.
	 * @param {Parents | undefined} _3
	 *   Parent of `element`.
	 * @param {State} state
	 *   State.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function lastOfType(query, _1, _2, _3, state) {
	  assertDeep(state, query);
	  return (
	    typeof state.typeIndex === 'number' &&
	    typeof state.typeCount === 'number' &&
	    state.typeIndex === state.typeCount - 1
	  )
	}

	/**
	 * Check whether an element does `:not` match further selectors.
	 *
	 * @param {AstPseudoClass} query
	 *   Query.
	 * @param {Element} element
	 *   Element.
	 * @param {number | undefined} index
	 *   Index of `element` in `parent`.
	 * @param {Parents | undefined} parent
	 *   Parent of `element`.
	 * @param {State} state
	 *   State.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function not(query, element, index, parent, state) {
	  return !is(query, element, index, parent, state)
	}

	/**
	 * Check whether an element matches an `:nth-child` pseudo.
	 *
	 * @param {AstPseudoClass} query
	 *   Query.
	 * @param {Element} _1
	 *   Element.
	 * @param {number | undefined} _2
	 *   Index of `element` in `parent`.
	 * @param {Parents | undefined} _3
	 *   Parent of `element`.
	 * @param {State} state
	 *   State.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function nthChild(query, _1, _2, _3, state) {
	  const fn = getCachedNthCheck(query);
	  assertDeep(state, query);
	  return typeof state.elementIndex === 'number' && fn(state.elementIndex)
	}

	/**
	 * Check whether an element matches an `:nth-last-child` pseudo.
	 *
	 * @param {AstPseudoClass} query
	 *   Query.
	 * @param {Element} _1
	 *   Element.
	 * @param {number | undefined} _2
	 *   Index of `element` in `parent`.
	 * @param {Parents | undefined} _3
	 *   Parent of `element`.
	 * @param {State} state
	 *   State.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function nthLastChild(query, _1, _2, _3, state) {
	  const fn = getCachedNthCheck(query);
	  assertDeep(state, query);
	  return Boolean(
	    typeof state.elementCount === 'number' &&
	      typeof state.elementIndex === 'number' &&
	      fn(state.elementCount - state.elementIndex - 1)
	  )
	}

	/**
	 * Check whether an element matches a `:nth-last-of-type` pseudo.
	 *
	 * @param {AstPseudoClass} query
	 *   Query.
	 * @param {Element} _1
	 *   Element.
	 * @param {number | undefined} _2
	 *   Index of `element` in `parent`.
	 * @param {Parents | undefined} _3
	 *   Parent of `element`.
	 * @param {State} state
	 *   State.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function nthLastOfType(query, _1, _2, _3, state) {
	  const fn = getCachedNthCheck(query);
	  assertDeep(state, query);
	  return (
	    typeof state.typeCount === 'number' &&
	    typeof state.typeIndex === 'number' &&
	    fn(state.typeCount - 1 - state.typeIndex)
	  )
	}

	/**
	 * Check whether an element matches an `:nth-of-type` pseudo.
	 *
	 * @param {AstPseudoClass} query
	 *   Query.
	 * @param {Element} _1
	 *   Element.
	 * @param {number | undefined} _2
	 *   Index of `element` in `parent`.
	 * @param {Parents | undefined} _3
	 *   Parent of `element`.
	 * @param {State} state
	 *   State.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function nthOfType(query, _1, _2, _3, state) {
	  const fn = getCachedNthCheck(query);
	  assertDeep(state, query);
	  return typeof state.typeIndex === 'number' && fn(state.typeIndex)
	}

	/**
	 * Check whether an element matches an `:only-child` pseudo.
	 *
	 * @param {AstPseudoClass} query
	 *   Query.
	 * @param {Element} _1
	 *   Element.
	 * @param {number | undefined} _2
	 *   Index of `element` in `parent`.
	 * @param {Parents | undefined} _3
	 *   Parent of `element`.
	 * @param {State} state
	 *   State.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function onlyChild(query, _1, _2, _3, state) {
	  assertDeep(state, query);
	  return state.elementCount === 1
	}

	/**
	 * Check whether an element matches an `:only-of-type` pseudo.
	 *
	 * @param {AstPseudoClass} query
	 *   Query.
	 * @param {Element} _1
	 *   Element.
	 * @param {number | undefined} _2
	 *   Index of `element` in `parent`.
	 * @param {Parents | undefined} _3
	 *   Parent of `element`.
	 * @param {State} state
	 *   State.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function onlyOfType(query, _1, _2, _3, state) {
	  assertDeep(state, query);
	  return state.typeCount === 1
	}

	/**
	 * Check whether an element matches an `:optional` pseudo.
	 *
	 * @param {AstPseudoClass} query
	 *   Query.
	 * @param {Element} element
	 *   Element.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function optional(query, element) {
	  return !required(query, element)
	}

	/**
	 * Check whether an element matches a `:read-only` pseudo.
	 *
	 * @param {AstPseudoClass} query
	 *   Query.
	 * @param {Element} element
	 *   Element.
	 * @param {number | undefined} index
	 *   Index of `element` in `parent`.
	 * @param {Parents | undefined} parent
	 *   Parent of `element`.
	 * @param {State} state
	 *   State.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function readOnly(query, element, index, parent, state) {
	  return !readWrite(query, element, index, parent, state)
	}

	/**
	 * Check whether an element matches a `:read-write` pseudo.
	 *
	 * @param {AstPseudoClass} _
	 *   Query.
	 * @param {Element} element
	 *   Element.
	 * @param {number | undefined} _1
	 *   Index of `element` in `parent`.
	 * @param {Parents | undefined} _2
	 *   Parent of `element`.
	 * @param {State} state
	 *   State.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function readWrite(_, element, _1, _2, state) {
	  return element.tagName === 'input' || element.tagName === 'textarea'
	    ? !hasProperty(element, 'readOnly') && !hasProperty(element, 'disabled')
	    : Boolean(state.editableOrEditingHost)
	}

	/**
	 * Check whether an element matches a `:required` pseudo.
	 *
	 * @param {AstPseudoClass} _
	 *   Query.
	 * @param {Element} element
	 *   Element.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function required(_, element) {
	  return (
	    (element.tagName === 'input' ||
	      element.tagName === 'textarea' ||
	      element.tagName === 'select') &&
	    hasProperty(element, 'required')
	  )
	}

	/**
	 * Check whether an element matches a `:root` pseudo.
	 *
	 * @param {AstPseudoClass} _1
	 *   Query.
	 * @param {Element} element
	 *   Element.
	 * @param {number | undefined} _2
	 *   Index of `element` in `parent`.
	 * @param {Parents | undefined} parent
	 *   Parent of `element`.
	 * @param {State} state
	 *   State.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function root$2(_1, element, _2, parent, state) {
	  return Boolean(
	    (!parent || parent.type === 'root') &&
	      state.schema &&
	      (state.schema.space === 'html' || state.schema.space === 'svg') &&
	      (element.tagName === 'html' || element.tagName === 'svg')
	  )
	}

	/**
	 * Check whether an element matches a `:scope` pseudo.
	 *
	 * @param {AstPseudoClass} _1
	 *   Query.
	 * @param {Element} element
	 *   Element.
	 * @param {number | undefined} _2
	 *   Index of `element` in `parent`.
	 * @param {Parents | undefined} _3
	 *   Parent of `element`.
	 * @param {State} state
	 *   State.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function scope(_1, element, _2, _3, state) {
	  return state.scopeElements.includes(element)
	}

	/**
	 * Check children.
	 *
	 * @param {Element} element
	 *   Element.
	 * @param {(child: ElementContent) => boolean} check
	 *   Check.
	 * @returns {boolean}
	 *   Whether a child of `element` matches `check`.
	 */
	function someChildren(element, check) {
	  const children = element.children;
	  let index = -1;

	  while (++index < children.length) {
	    if (check(children[index])) return true
	  }

	  return false
	}

	/**
	 * @param {unknown} query_
	 *   Query-like value.
	 * @returns {never}
	 *   Nothing.
	 * @throws
	 *   Exception.
	 */
	function unknownPseudo(query_) {
	  // Runtime JS guarantees it has a `name`.
	  const query = /** @type {AstPseudoClass} */ (query_);
	  throw new Error('Unknown pseudo-selector `' + query.name + '`')
	}

	/**
	 * @typedef {import('css-selector-parser').AstRule} AstRule
	 *
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').Parents} Parents
	 *
	 * @typedef {import('./index.js').State} State
	 */


	/**
	 * Test a rule.
	 *
	 * @param {AstRule} query
	 *   AST rule (with `pseudoClasses`).
	 * @param {Element} element
	 *   Element.
	 * @param {number | undefined} index
	 *   Index of `element` in `parent`.
	 * @param {Parents | undefined} parent
	 *   Parent of `element`.
	 * @param {State} state
	 *   State.
	 * @returns {boolean}
	 *   Whether `element` matches `query`.
	 */
	function test(query, element, index, parent, state) {
	  for (const item of query.items) {
	    // eslint-disable-next-line unicorn/prefer-switch
	    if (item.type === 'Attribute') {
	      if (!attribute(item, element, state.schema)) return false
	    } else if (item.type === 'Id') {
	      if (!id(item, element)) return false
	    } else if (item.type === 'ClassName') {
	      if (!className(item, element)) return false
	    } else if (item.type === 'PseudoClass') {
	      if (!pseudo(item, element, index, parent, state)) return false
	    } else if (item.type === 'PseudoElement') {
	      throw new Error('Invalid selector: `::' + item.name + '`')
	    } else if (item.type === 'TagName') {
	      if (!name(item, element)) return false
	    } else ;
	  }

	  return true
	}

	/**
	 * @typedef {import('css-selector-parser').AstRule} AstRule
	 *
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').Nodes} Nodes
	 * @typedef {import('hast').Parents} Parents
	 *
	 * @typedef {import('./index.js').State} State
	 */


	/** @type {Array<never>} */
	const empty = [];

	/**
	 * Walk a tree.
	 *
	 * @param {State} state
	 *   State.
	 * @param {Nodes | undefined} tree
	 *   Tree.
	 */
	function walk(state, tree) {
	  if (tree) {
	    one$1(state, [], tree, undefined, undefined, tree);
	  }
	}

	/**
	 * Add a rule to a nesting map.
	 *
	 * @param {Nest} nest
	 *   Nesting.
	 * @param {keyof Nest} field
	 *   Field.
	 * @param {AstRule} rule
	 *   Rule.
	 */
	function add(nest, field, rule) {
	  const list = nest[field];
	  if (list) {
	    list.push(rule);
	  } else {
	    nest[field] = [rule];
	  }
	}

	/**
	 * Check in a parent.
	 *
	 * @param {State} state
	 *   State.
	 * @param {Nest} nest
	 *   Nesting.
	 * @param {Parents} node
	 *   Parent.
	 * @param {Nodes} tree
	 *   Tree.
	 * @returns {undefined}
	 *   Nothing.
	 */
	function all$1(state, nest, node, tree) {
	  const fromParent = combine(nest.descendant, nest.directChild);
	  /** @type {Array<AstRule> | undefined} */
	  let fromSibling;
	  let index = -1;
	  /**
	   * Total counts.
	   * @type {Counts}
	   */
	  const total = {count: 0, types: new Map()};
	  /**
	   * Counts of previous siblings.
	   * @type {Counts}
	   */
	  const before = {count: 0, types: new Map()};

	  while (++index < node.children.length) {
	    count(total, node.children[index]);
	  }

	  index = -1;

	  while (++index < node.children.length) {
	    const child = node.children[index];
	    // Uppercase to prevent prototype polution, injecting `constructor` or so.
	    // Normalize because HTML is insensitive.
	    const name =
	      child.type === 'element' ? child.tagName.toUpperCase() : undefined;
	    // Before counting further elements:
	    state.elementIndex = before.count;
	    state.typeIndex = name ? before.types.get(name) || 0 : 0;
	    // After counting all elements.
	    state.elementCount = total.count;
	    state.typeCount = name ? total.types.get(name) : 0;

	    // Only apply if this is a parent, this should be an element, but we check
	    // for parents so that we delve into custom nodes too.
	    if ('children' in child) {
	      const forSibling = combine(fromParent, fromSibling);
	      const nest = one$1(
	        state,
	        forSibling,
	        node.children[index],
	        index,
	        node,
	        tree
	      );
	      fromSibling = combine(nest.generalSibling, nest.adjacentSibling);
	    }

	    // We found one thing, and one is enough.
	    if (state.one && state.found) {
	      break
	    }

	    count(before, node.children[index]);
	  }
	}

	/**
	 * Apply selectors to an element.
	 *
	 * @param {State} state
	 *   Current state.
	 * @param {Array<AstRule>} rules
	 *   Rules to apply.
	 * @param {Element} node
	 *   Element to apply rules to.
	 * @param {number | undefined} index
	 *   Index of `node` in `parent`.
	 * @param {Parents | undefined} parent
	 *   Parent of `node`.
	 * @returns {Nest}
	 *   Further rules.
	 */
	function applySelectors(state, rules, node, index, parent) {
	  /** @type {Nest} */
	  const nestResult = {
	    adjacentSibling: undefined,
	    descendant: undefined,
	    directChild: undefined,
	    generalSibling: undefined
	  };
	  let selectorIndex = -1;

	  while (++selectorIndex < rules.length) {
	    const rule = rules[selectorIndex];

	    // We found one thing, and one is enough.
	    if (state.one && state.found) {
	      break
	    }

	    // When shallow, we don’t allow nested rules.
	    // Idea: we could allow a stack of parents?
	    // Might get quite complex though.
	    if (state.shallow && rule.nestedRule) {
	      throw new Error('Expected selector without nesting')
	    }

	    // If this rule matches:
	    if (test(rule, node, index, parent, state)) {
	      const nest = rule.nestedRule;

	      // Are there more?
	      if (nest) {
	        /** @type {keyof Nest} */
	        const label =
	          nest.combinator === '+'
	            ? 'adjacentSibling'
	            : nest.combinator === '~'
	            ? 'generalSibling'
	            : nest.combinator === '>'
	            ? 'directChild'
	            : 'descendant';
	        add(nestResult, label, nest);
	      } else {
	        // We have a match!
	        state.found = true;

	        if (!state.results.includes(node)) {
	          state.results.push(node);
	        }
	      }
	    }

	    // Descendant.
	    if (rule.combinator === undefined) {
	      add(nestResult, 'descendant', rule);
	    }
	    // Adjacent.
	    else if (rule.combinator === '~') {
	      add(nestResult, 'generalSibling', rule);
	    }
	    // Drop direct child (`>`), adjacent sibling (`+`).
	  }

	  return nestResult
	}

	/**
	 * Combine two lists, if needed.
	 *
	 * This is optimized to create as few lists as possible.
	 *
	 * @param {Array<AstRule> | undefined} left
	 *   Rules.
	 * @param {Array<AstRule> | undefined} right
	 *   Rules.
	 * @returns {Array<AstRule>}
	 *   Rules.
	 */
	function combine(left, right) {
	  return left && right && left.length > 0 && right.length > 0
	    ? [...left, ...right]
	    : left && left.length > 0
	    ? left
	    : right && right.length > 0
	    ? right
	    : empty
	}

	/**
	 * Count a node.
	 *
	 * @param {Counts} counts
	 *   Counts.
	 * @param {Nodes} node
	 *   Node (we’re looking for elements).
	 * @returns {undefined}
	 *   Nothing.
	 */
	function count(counts, node) {
	  if (node.type === 'element') {
	    // Uppercase to prevent prototype polution, injecting `constructor` or so.
	    // Normalize because HTML is insensitive.
	    const name = node.tagName.toUpperCase();
	    const count = (counts.types.get(name) || 0) + 1;
	    counts.count++;
	    counts.types.set(name, count);
	  }
	}

	/**
	 * Check a node.
	 *
	 * @param {State} state
	 *   State.
	 * @param {Array<AstRule>} currentRules
	 *   Rules.
	 * @param {Nodes} node
	 *   Node.
	 * @param {number | undefined} index
	 *   Index of `node` in `parent`.
	 * @param {Parents | undefined} parent
	 *   Parent of `node`.
	 * @param {Nodes} tree
	 *   Tree.
	 * @returns {Nest}
	 *   Nesting.
	 */
	function one$1(state, currentRules, node, index, parent, tree) {
	  /** @type {Nest} */
	  let nestResult = {
	    adjacentSibling: undefined,
	    descendant: undefined,
	    directChild: undefined,
	    generalSibling: undefined
	  };

	  const exit = enterState(state, node);

	  if (node.type === 'element') {
	    let rootRules = state.rootQuery.rules;

	    // Remove direct child rules if this is the root.
	    // This only happens for a `:has()` rule, which can be like
	    // `a:has(> b)`.
	    if (parent && parent !== tree) {
	      rootRules = state.rootQuery.rules.filter(
	        (d) =>
	          d.combinator === undefined ||
	          (d.combinator === '>' && parent === tree)
	      );
	    }

	    nestResult = applySelectors(
	      state,
	      // Try the root rules for this element too.
	      combine(currentRules, rootRules),
	      node,
	      index,
	      parent
	    );
	  }

	  // If this is a parent, and we want to delve into them, and we haven’t found
	  // our single result yet.
	  if ('children' in node && !state.shallow && !(state.one && state.found)) {
	    all$1(state, nestResult, node, tree);
	  }

	  exit();

	  return nestResult
	}

	/**
	 * @typedef {import('css-selector-parser').AstSelector} AstSelector
	 *
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').Nodes} Nodes
	 * @typedef {import('hast').RootContent} RootContent
	 *
	 * @typedef {import('property-information').Schema} Schema
	 */


	/**
	 * Select all elements that match `selector` in the given `tree`.
	 * Searches the tree in *preorder*.
	 *
	 * @param {string} selector
	 *   CSS selector, such as (`h1`, `a, b`).
	 * @param {Nodes | null | undefined} [tree]
	 *   Tree to search (optional).
	 * @param {Space | null | undefined} [space='html']
	 *   Name of namespace (default: `'html'`).
	 * @returns {Array<Element>}
	 *   Elements in `tree` that match `selector`.
	 *   This could include `tree` itself.
	 */
	function selectAll(selector, tree, space) {
	  const state = createState(selector, tree, space);
	  walk(state, tree || undefined);
	  return state.results
	}

	/**
	 * @param {string} selector
	 *   CSS selector, such as (`h1`, `a, b`).
	 * @param {Nodes | null | undefined} [tree]
	 *   Tree to search (optional).
	 * @param {Space | null | undefined} [space='html']
	 *   Name of namespace (default: `'html'`).
	 * @returns {State} State
	 *   State.
	 */
	function createState(selector, tree, space) {
	  return {
	    direction: 'ltr',
	    editableOrEditingHost: false,
	    elementCount: undefined,
	    elementIndex: undefined,
	    found: false,
	    language: undefined,
	    one: false,
	    // State of the query.
	    results: [],
	    rootQuery: parse$1(selector),
	    schema: space === 'svg' ? svg : html$4,
	    scopeElements: tree ? (tree.type === 'root' ? tree.children : [tree]) : [],
	    shallow: false,
	    typeIndex: undefined,
	    typeCount: undefined
	  }
	}

	/** Get the node tree source code string */
	const getCodeString = (data = [], code = '') => {
	    data.forEach((node) => {
	        if (node.type === 'text') {
	            code += node.value;
	        }
	        else if (node.type === 'element' && node.children && Array.isArray(node.children)) {
	            code += getCodeString(node.children);
	        }
	    });
	    return code;
	};
	const remarkRewrite = (options) => {
	    const { selector, rewrite } = options || {};
	    return (tree) => {
	        if (!rewrite || typeof rewrite !== 'function')
	            return;
	        if (selector && typeof selector === 'string') {
	            const selected = selectAll(selector, tree);
	            if (selected && selected.length > 0) {
	                visit$1(tree, selected, (node, index, parent) => {
	                    rewrite(node, index, parent);
	                });
	            }
	            return;
	        }
	        visit$1(tree, (node, index, parent) => {
	            rewrite(node, index, parent);
	        });
	    };
	};
	const rehypeRewrite = remarkRewrite;

	const getURLParameters = (url = '') => (url.match(/([^?=&]+)(=([^&]*))/g) || []).reduce((a, v) => ((a[v.slice(0, v.indexOf('='))] = v.slice(v.indexOf('=') + 1)), a), {});
	const prevChild = (data = [], index) => {
	    let i = index;
	    while (i > -1) {
	        i--;
	        if (!data[i])
	            return;
	        if ((data[i] && data[i].value && data[i].value.replace(/(\n|\s)/g, '') !== '') || data[i].type !== 'text') {
	            if (!/^rehype:/.test(data[i].value) || data[i].type !== 'comment')
	                return;
	            return data[i];
	        }
	    }
	    return;
	};
	const nextChild = (data = [], index, tagName, codeBlockParames) => {
	    let i = index;
	    while (i < data.length) {
	        i++;
	        if (tagName) {
	            const element = data[i];
	            if (element && element.value && element.value.replace(/(\n|\s)/g, '') !== '' || data[i] && data[i].type === 'element') {
	                return element.tagName === tagName ? element : undefined;
	            }
	        }
	        else {
	            const element = data[i];
	            if (!element || element.type === 'element')
	                return;
	            if (element.type === 'text' && element.value.replace(/(\n|\s)/g, '') !== '')
	                return;
	            if (element.type && /^(comment|raw)$/ig.test(element.type)) {
	                if (element.value && !/^rehype:/.test(element.value.replace(/^(\s+)?<!--(.*?)-->/, '$2') || '')) {
	                    return;
	                }
	                if (codeBlockParames) {
	                    const nextNode = nextChild(data, i, 'pre', codeBlockParames);
	                    if (nextNode)
	                        return;
	                    element.value = (element.value || '').replace(/^(\n|\s)+/, '');
	                    return element;
	                }
	                else {
	                    element.value = (element.value || '').replace(/^(\n|\s)+/, '');
	                    return element;
	                }
	            }
	        }
	    }
	    return;
	};
	/**
	 * 获取代码注视的位置
	 * @param data 数据
	 * @param index 当前数据所在的位置
	 * @returns 返回 当前参数数据 Object，`{}`
	 */
	const getCommentObject = ({ value = '' }) => {
	    const param = getURLParameters(value.replace(/^<!--(.*?)-->/, '$1').replace(/^rehype:/, ''));
	    Object.keys(param).forEach((keyName) => {
	        if (param[keyName] === 'true') {
	            param[keyName] = true;
	        }
	        if (param[keyName] === 'false') {
	            param[keyName] = false;
	        }
	        if (typeof param[keyName] === 'string' && !/^0/.test(param[keyName]) && !isNaN(+param[keyName])) {
	            param[keyName] = +param[keyName];
	        }
	    });
	    return param;
	};
	const propertiesHandle = (defaultAttrs, attrs, type) => {
	    if (type === 'string') {
	        return { ...defaultAttrs, 'data-config': JSON.stringify({ ...attrs, rehyp: true }) };
	    }
	    else if (type === 'attr') {
	        return { ...defaultAttrs, ...attrs };
	    }
	    return { ...defaultAttrs, 'data-config': { ...attrs, rehyp: true } };
	};

	const rehypeAttrs = (options = {}) => {
	    const { properties = 'data', codeBlockParames = true } = options;
	    return (tree) => {
	        visit$1(tree, 'element', (node, index, parent) => {
	            if (codeBlockParames && node.tagName === 'pre' && node && Array.isArray(node.children) && parent && Array.isArray(parent.children) && parent.children.length > 1) {
	                const firstChild = node.children[0];
	                if (firstChild && firstChild.tagName === 'code' && typeof index === 'number') {
	                    const child = prevChild(parent.children, index);
	                    if (child) {
	                        const attr = getCommentObject(child);
	                        if (Object.keys(attr).length > 0) {
	                            node.properties = { ...node.properties, ...{ 'data-type': 'rehyp' } };
	                            firstChild.properties = propertiesHandle(firstChild.properties, attr, properties);
	                        }
	                    }
	                }
	            }
	            if (/^(em|strong|b|a|i|p|pre|kbd|blockquote|h(1|2|3|4|5|6)|code|table|img|del|ul|ol)$/.test(node.tagName) && parent && Array.isArray(parent.children) && typeof index === 'number') {
	                const child = nextChild(parent.children, index, '', codeBlockParames);
	                if (child) {
	                    const attr = getCommentObject(child);
	                    if (Object.keys(attr).length > 0) {
	                        node.properties = propertiesHandle(node.properties, attr, properties);
	                    }
	                }
	            }
	        });
	    };
	};
	const rehypeAttrs$1 = rehypeAttrs;

	var reservedMeta = function reservedMeta(options) {
	  return tree => {
	    visit$1(tree, node => {
	      if (node.type === 'element' && node.tagName === 'code' && node.data && node.data.meta) {
	        node.properties = _extends({}, node.properties, {
	          'data-meta': String(node.data.meta)
	        });
	      }
	    });
	  };
	};

	var retrieveMeta = function retrieveMeta(options) {
	  return tree => {
	    visit$1(tree, node => {
	      if (node.type === 'element' && node.tagName === 'code' && node.properties && node.properties['dataMeta']) {
	        if (!node.data) {
	          node.data = {};
	        }
	        node.data.meta = node.properties['dataMeta'];
	        delete node.properties['dataMeta'];
	      }
	    });
	  };
	};

	// This module is generated by `script/`.
	/* eslint-disable no-control-regex, no-misleading-character-class, no-useless-escape */
	const regex = /[\0-\x1F!-,\.\/:-@\[-\^`\{-\xA9\xAB-\xB4\xB6-\xB9\xBB-\xBF\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0378\u0379\u037E\u0380-\u0385\u0387\u038B\u038D\u03A2\u03F6\u0482\u0530\u0557\u0558\u055A-\u055F\u0589-\u0590\u05BE\u05C0\u05C3\u05C6\u05C8-\u05CF\u05EB-\u05EE\u05F3-\u060F\u061B-\u061F\u066A-\u066D\u06D4\u06DD\u06DE\u06E9\u06FD\u06FE\u0700-\u070F\u074B\u074C\u07B2-\u07BF\u07F6-\u07F9\u07FB\u07FC\u07FE\u07FF\u082E-\u083F\u085C-\u085F\u086B-\u089F\u08B5\u08C8-\u08D2\u08E2\u0964\u0965\u0970\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09F2-\u09FB\u09FD\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A76-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF0-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B54\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B70\u0B72-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BF0-\u0BFF\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C7F\u0C84\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D0D\u0D11\u0D45\u0D49\u0D4F-\u0D53\u0D58-\u0D5E\u0D64\u0D65\u0D70-\u0D79\u0D80\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF4-\u0E00\u0E3B-\u0E3F\u0E4F\u0E5A-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F01-\u0F17\u0F1A-\u0F1F\u0F2A-\u0F34\u0F36\u0F38\u0F3A-\u0F3D\u0F48\u0F6D-\u0F70\u0F85\u0F98\u0FBD-\u0FC5\u0FC7-\u0FFF\u104A-\u104F\u109E\u109F\u10C6\u10C8-\u10CC\u10CE\u10CF\u10FB\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u1360-\u137F\u1390-\u139F\u13F6\u13F7\u13FE-\u1400\u166D\u166E\u1680\u169B-\u169F\u16EB-\u16ED\u16F9-\u16FF\u170D\u1715-\u171F\u1735-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17D4-\u17D6\u17D8-\u17DB\u17DE\u17DF\u17EA-\u180A\u180E\u180F\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u1945\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DA-\u19FF\u1A1C-\u1A1F\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1AA6\u1AA8-\u1AAF\u1AC1-\u1AFF\u1B4C-\u1B4F\u1B5A-\u1B6A\u1B74-\u1B7F\u1BF4-\u1BFF\u1C38-\u1C3F\u1C4A-\u1C4C\u1C7E\u1C7F\u1C89-\u1C8F\u1CBB\u1CBC\u1CC0-\u1CCF\u1CD3\u1CFB-\u1CFF\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FBD\u1FBF-\u1FC1\u1FC5\u1FCD-\u1FCF\u1FD4\u1FD5\u1FDC-\u1FDF\u1FED-\u1FF1\u1FF5\u1FFD-\u203E\u2041-\u2053\u2055-\u2070\u2072-\u207E\u2080-\u208F\u209D-\u20CF\u20F1-\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F-\u215F\u2189-\u24B5\u24EA-\u2BFF\u2C2F\u2C5F\u2CE5-\u2CEA\u2CF4-\u2CFF\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D70-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E00-\u2E2E\u2E30-\u3004\u3008-\u3020\u3030\u3036\u3037\u303D-\u3040\u3097\u3098\u309B\u309C\u30A0\u30FB\u3100-\u3104\u3130\u318F-\u319F\u31C0-\u31EF\u3200-\u33FF\u4DC0-\u4DFF\u9FFD-\u9FFF\uA48D-\uA4CF\uA4FE\uA4FF\uA60D-\uA60F\uA62C-\uA63F\uA673\uA67E\uA6F2-\uA716\uA720\uA721\uA789\uA78A\uA7C0\uA7C1\uA7CB-\uA7F4\uA828-\uA82B\uA82D-\uA83F\uA874-\uA87F\uA8C6-\uA8CF\uA8DA-\uA8DF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA954-\uA95F\uA97D-\uA97F\uA9C1-\uA9CE\uA9DA-\uA9DF\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A-\uAA5F\uAA77-\uAA79\uAAC3-\uAADA\uAADE\uAADF\uAAF0\uAAF1\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB5B\uAB6A-\uAB6F\uABEB\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uE000-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB29\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBB2-\uFBD2\uFD3E-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFC-\uFDFF\uFE10-\uFE1F\uFE30-\uFE32\uFE35-\uFE4C\uFE50-\uFE6F\uFE75\uFEFD-\uFF0F\uFF1A-\uFF20\uFF3B-\uFF3E\uFF40\uFF5B-\uFF65\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFFF]|\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDD3F\uDD75-\uDDFC\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEE1-\uDEFF\uDF20-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDF9F\uDFC4-\uDFC7\uDFD0\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56-\uDC5F\uDC77-\uDC7F\uDC9F-\uDCDF\uDCF3\uDCF6-\uDCFF\uDD16-\uDD1F\uDD3A-\uDD7F\uDDB8-\uDDBD\uDDC0-\uDDFF\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE40-\uDE5F\uDE7D-\uDE7F\uDE9D-\uDEBF\uDEC8\uDEE7-\uDEFF\uDF36-\uDF3F\uDF56-\uDF5F\uDF73-\uDF7F\uDF92-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCFF\uDD28-\uDD2F\uDD3A-\uDE7F\uDEAA\uDEAD-\uDEAF\uDEB2-\uDEFF\uDF1D-\uDF26\uDF28-\uDF2F\uDF51-\uDFAF\uDFC5-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC47-\uDC65\uDC70-\uDC7E\uDCBB-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD40-\uDD43\uDD48-\uDD4F\uDD74\uDD75\uDD77-\uDD7F\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDFF\uDE12\uDE38-\uDE3D\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEA9-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC4B-\uDC4F\uDC5A-\uDC5D\uDC62-\uDC7F\uDCC6\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDC1-\uDDD7\uDDDE-\uDDFF\uDE41-\uDE43\uDE45-\uDE4F\uDE5A-\uDE7F\uDEB9-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF3A-\uDFFF]|\uD806[\uDC3B-\uDC9F\uDCEA-\uDCFE\uDD07\uDD08\uDD0A\uDD0B\uDD14\uDD17\uDD36\uDD39\uDD3A\uDD44-\uDD4F\uDD5A-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE2\uDDE5-\uDDFF\uDE3F-\uDE46\uDE48-\uDE4F\uDE9A-\uDE9C\uDE9E-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC41-\uDC4F\uDC5A-\uDC71\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF7-\uDFAF\uDFB1-\uDFFF]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD824-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83D\uD83F\uD87B-\uD87D\uD87F\uD885-\uDB3F\uDB41-\uDBFF][\uDC00-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDECF\uDEEE\uDEEF\uDEF5-\uDEFF\uDF37-\uDF3F\uDF44-\uDF4F\uDF5A-\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE80-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE2\uDFE5-\uDFEF\uDFF2-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD823[\uDCD6-\uDCFF\uDD09-\uDFFF]|\uD82C[\uDD1F-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A-\uDC9C\uDC9F-\uDFFF]|\uD834[\uDC00-\uDD64\uDD6A-\uDD6C\uDD73-\uDD7A\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDE41\uDE45-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3\uDFCC\uDFCD]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD4F-\uDEBF\uDEFA-\uDFFF]|\uD83A[\uDCC5-\uDCCF\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDFFF]|\uD83B[\uDC00-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDFFF]|\uD83C[\uDC00-\uDD2F\uDD4A-\uDD4F\uDD6A-\uDD6F\uDD8A-\uDFFF]|\uD83E[\uDC00-\uDFEF\uDFFA-\uDFFF]|\uD869[\uDEDE-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD884[\uDF4B-\uDFFF]|\uDB40[\uDC00-\uDCFF\uDDF0-\uDFFF]/g;

	const own$2 = Object.hasOwnProperty;

	/**
	 * Slugger.
	 */
	class BananaSlug {
	  /**
	   * Create a new slug class.
	   */
	  constructor () {
	    /** @type {Record<string, number>} */
	    // eslint-disable-next-line no-unused-expressions
	    this.occurrences;

	    this.reset();
	  }

	  /**
	   * Generate a unique slug.
	  *
	  * Tracks previously generated slugs: repeated calls with the same value
	  * will result in different slugs.
	  * Use the `slug` function to get same slugs.
	   *
	   * @param  {string} value
	   *   String of text to slugify
	   * @param  {boolean} [maintainCase=false]
	   *   Keep the current case, otherwise make all lowercase
	   * @return {string}
	   *   A unique slug string
	   */
	  slug (value, maintainCase) {
	    const self = this;
	    let result = slug(value, maintainCase === true);
	    const originalSlug = result;

	    while (own$2.call(self.occurrences, result)) {
	      self.occurrences[originalSlug]++;
	      result = originalSlug + '-' + self.occurrences[originalSlug];
	    }

	    self.occurrences[result] = 0;

	    return result
	  }

	  /**
	   * Reset - Forget all previous slugs
	   *
	   * @return void
	   */
	  reset () {
	    this.occurrences = Object.create(null);
	  }
	}

	/**
	 * Generate a slug.
	 *
	 * Does not track previously generated slugs: repeated calls with the same value
	 * will result in the exact same slug.
	 * Use the `GithubSlugger` class to get unique slugs.
	 *
	 * @param  {string} value
	 *   String of text to slugify
	 * @param  {boolean} [maintainCase=false]
	 *   Keep the current case, otherwise make all lowercase
	 * @return {string}
	 *   A unique slug string
	 */
	function slug (value, maintainCase) {
	  if (typeof value !== 'string') return ''
	  if (!maintainCase) value = value.toLowerCase();
	  return value.replace(regex, '').replace(/ /g, '-')
	}

	/**
	 * @typedef {import('hast').Nodes} Nodes
	 */

	/**
	 * Get the rank (`1` to `6`) of headings (`h1` to `h6`).
	 *
	 * @param {Nodes} node
	 *   Node to check.
	 * @returns {number | undefined}
	 *   Rank of the heading or `undefined` if not a heading.
	 */
	function headingRank(node) {
	  const name = node.type === 'element' ? node.tagName.toLowerCase() : '';
	  const code =
	    name.length === 2 && name.charCodeAt(0) === 104 /* `h` */
	      ? name.charCodeAt(1)
	      : 0;
	  return code > 48 /* `0` */ && code < 55 /* `7` */
	    ? code - 48 /* `0` */
	    : undefined
	}

	/**
	 * @typedef {import('hast').Root} Root
	 */


	/** @type {Options} */
	const emptyOptions$3 = {};
	const slugs = new BananaSlug();

	/**
	 * Add `id`s to headings.
	 *
	 * @param {Options | null | undefined} [options]
	 *   Configuration (optional).
	 * @returns
	 *   Transform.
	 */
	function rehypeSlug(options) {
	  const settings = options || emptyOptions$3;
	  const prefix = settings.prefix || '';

	  /**
	   * @param {Root} tree
	   *   Tree.
	   * @returns {undefined}
	   *   Nothing.
	   */
	  return function (tree) {
	    slugs.reset();

	    visit$1(tree, 'element', function (node) {
	      if (headingRank(node) && !node.properties.id) {
	        node.properties.id = prefix + slugs.slug(toString(node));
	      }
	    });
	  }
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').Parents} Parents
	 */


	/**
	 * Generate a check from a test.
	 *
	 * Useful if you’re going to test many nodes, for example when creating a
	 * utility where something else passes a compatible test.
	 *
	 * The created function is a bit faster because it expects valid input only:
	 * an `element`, `index`, and `parent`.
	 *
	 * @param test
	 *   A test for a specific element.
	 * @returns
	 *   A check.
	 */
	const convertElement =
	  // Note: overloads in JSDoc can’t yet use different `@template`s.
	  /**
	   * @type {(
	   *   (<Condition extends TestFunction>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & Predicate<Condition, Element>) &
	   *   (<Condition extends string>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & {tagName: Condition}) &
	   *   ((test?: null | undefined) => (element?: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element) &
	   *   ((test?: Test) => Check)
	   * )}
	   */
	  (
	    /**
	     * @param {Test | null | undefined} [test]
	     * @returns {Check}
	     */
	    function (test) {
	      if (test === null || test === undefined) {
	        return element$1
	      }

	      if (typeof test === 'string') {
	        return tagNameFactory(test)
	      }

	      // Assume array.
	      if (typeof test === 'object') {
	        return anyFactory(test)
	      }

	      if (typeof test === 'function') {
	        return castFactory(test)
	      }

	      throw new Error('Expected function, string, or array as `test`')
	    }
	  );

	/**
	 * Handle multiple tests.
	 *
	 * @param {Array<TestFunction | string>} tests
	 * @returns {Check}
	 */
	function anyFactory(tests) {
	  /** @type {Array<Check>} */
	  const checks = [];
	  let index = -1;

	  while (++index < tests.length) {
	    checks[index] = convertElement(tests[index]);
	  }

	  return castFactory(any)

	  /**
	   * @this {unknown}
	   * @type {TestFunction}
	   */
	  function any(...parameters) {
	    let index = -1;

	    while (++index < checks.length) {
	      if (checks[index].apply(this, parameters)) return true
	    }

	    return false
	  }
	}

	/**
	 * Turn a string into a test for an element with a certain type.
	 *
	 * @param {string} check
	 * @returns {Check}
	 */
	function tagNameFactory(check) {
	  return castFactory(tagName)

	  /**
	   * @param {Element} element
	   * @returns {boolean}
	   */
	  function tagName(element) {
	    return element.tagName === check
	  }
	}

	/**
	 * Turn a custom test into a test for an element that passes that test.
	 *
	 * @param {TestFunction} testFunction
	 * @returns {Check}
	 */
	function castFactory(testFunction) {
	  return check

	  /**
	   * @this {unknown}
	   * @type {Check}
	   */
	  function check(value, index, parent) {
	    return Boolean(
	      looksLikeAnElement(value) &&
	        testFunction.call(
	          this,
	          value,
	          typeof index === 'number' ? index : undefined,
	          parent || undefined
	        )
	    )
	  }
	}

	/**
	 * Make sure something is an element.
	 *
	 * @param {unknown} element
	 * @returns {element is Element}
	 */
	function element$1(element) {
	  return Boolean(
	    element &&
	      typeof element === 'object' &&
	      'type' in element &&
	      element.type === 'element' &&
	      'tagName' in element &&
	      typeof element.tagName === 'string'
	  )
	}

	/**
	 * @param {unknown} value
	 * @returns {value is Element}
	 */
	function looksLikeAnElement(value) {
	  return (
	    value !== null &&
	    typeof value === 'object' &&
	    'type' in value &&
	    'tagName' in value
	  )
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').ElementContent} ElementContent
	 * @typedef {import('hast').Properties} Properties
	 * @typedef {import('hast').Root} Root
	 *
	 * @typedef {import('hast-util-is-element').Test} Test
	 */


	/** @type {Element} */
	const contentDefaults = {
	  type: 'element',
	  tagName: 'span',
	  properties: {className: ['icon', 'icon-link']},
	  children: []
	};

	/** @type {Options} */
	const emptyOptions$2 = {};

	/**
	 * Add links from headings back to themselves.
	 *
	 * ###### Notes
	 *
	 * This plugin only applies to headings with `id`s.
	 * Use `rehype-slug` to generate `id`s for headings that don’t have them.
	 *
	 * Several behaviors are supported:
	 *
	 * *   `'prepend'` (default) — inject link before the heading text
	 * *   `'append'` — inject link after the heading text
	 * *   `'wrap'` — wrap the whole heading text with the link
	 * *   `'before'` — insert link before the heading
	 * *   `'after'` — insert link after the heading
	 *
	 * @param {Readonly<Options> | null | undefined} [options]
	 *   Configuration (optional).
	 * @returns
	 *   Transform.
	 */
	function rehypeAutolinkHeadings(options) {
	  const settings = options || emptyOptions$2;
	  let properties = settings.properties;
	  const headingOroperties = settings.headingProperties;
	  const behavior = settings.behavior || 'prepend';
	  const content = settings.content;
	  const group = settings.group;
	  const is = convertElement(settings.test);

	  /** @type {import('unist-util-visit').Visitor<Element>} */
	  let method;

	  if (behavior === 'after' || behavior === 'before') {
	    method = around;
	  } else if (behavior === 'wrap') {
	    method = wrap;
	  } else {
	    method = inject;

	    if (!properties) {
	      properties = {ariaHidden: 'true', tabIndex: -1};
	    }
	  }

	  /**
	   * Transform.
	   *
	   * @param {Root} tree
	   *   Tree.
	   * @returns {undefined}
	   *   Nothing.
	   */
	  return function (tree) {
	    visit$1(tree, 'element', function (node, index, parent) {
	      if (headingRank(node) && node.properties.id && is(node, index, parent)) {
	        Object.assign(node.properties, toProperties(headingOroperties, node));
	        return method(node, index, parent)
	      }
	    });
	  }

	  /** @type {import('unist-util-visit').Visitor<Element>} */
	  function inject(node) {
	    const children = toChildren(content || contentDefaults, node);
	    node.children[behavior === 'prepend' ? 'unshift' : 'push'](
	      create(node, toProperties(properties, node), children)
	    );

	    return [SKIP$1]
	  }

	  /** @type {import('unist-util-visit').Visitor<Element>} */
	  function around(node, index, parent) {
	    /* c8 ignore next -- uncommon */
	    if (typeof index !== 'number' || !parent) return

	    const children = toChildren(content || contentDefaults, node);
	    const link = create(node, toProperties(properties, node), children);
	    let nodes = behavior === 'before' ? [link, node] : [node, link];

	    if (group) {
	      const grouping = toNode(group, node);

	      if (grouping && !Array.isArray(grouping) && grouping.type === 'element') {
	        grouping.children = nodes;
	        nodes = [grouping];
	      }
	    }

	    parent.children.splice(index, 1, ...nodes);

	    return [SKIP$1, index + nodes.length]
	  }

	  /** @type {import('unist-util-visit').Visitor<Element>} */
	  function wrap(node) {
	    /** @type {Array<ElementContent>} */
	    let before = node.children;
	    /** @type {Array<ElementContent> | ElementContent} */
	    let after = [];

	    if (typeof content === 'function') {
	      before = [];
	      after = content(node);
	    } else if (content) {
	      after = clone(content);
	    }

	    node.children = [
	      create(
	        node,
	        toProperties(properties, node),
	        Array.isArray(after) ? [...before, ...after] : [...before, after]
	      )
	    ];

	    return [SKIP$1]
	  }
	}

	/**
	 * Deep clone.
	 *
	 * @template T
	 *   Kind.
	 * @param {T} thing
	 *   Thing to clone.
	 * @returns {Cloneable<T>}
	 *   Cloned thing.
	 */
	function clone(thing) {
	  // Cast because it’s mutable now.
	  return /** @type {Cloneable<T>} */ (structuredClone$1(thing))
	}

	/**
	 * Create an `a`.
	 *
	 * @param {Readonly<Element>} node
	 *   Related heading.
	 * @param {Properties | undefined} properties
	 *   Properties to set on the link.
	 * @param {Array<ElementContent>} children
	 *   Content.
	 * @returns {Element}
	 *   Link.
	 */
	function create(node, properties, children) {
	  return {
	    type: 'element',
	    tagName: 'a',
	    properties: {...properties, href: '#' + node.properties.id},
	    children
	  }
	}

	/**
	 * Turn into children.
	 *
	 * @param {Readonly<ElementContent> | ReadonlyArray<ElementContent> | Build} value
	 *   Content.
	 * @param {Readonly<Element>} node
	 *   Related heading.
	 * @returns {Array<ElementContent>}
	 *   Children.
	 */
	function toChildren(value, node) {
	  const result = toNode(value, node);
	  return Array.isArray(result) ? result : [result]
	}

	/**
	 * Turn into a node.
	 *
	 * @param {Readonly<ElementContent> | ReadonlyArray<ElementContent> | Build} value
	 *   Content.
	 * @param {Readonly<Element>} node
	 *   Related heading.
	 * @returns {Array<ElementContent> | ElementContent}
	 *   Node.
	 */
	function toNode(value, node) {
	  if (typeof value === 'function') return value(node)
	  return clone(value)
	}

	/**
	 * Turn into properties.
	 *
	 * @param {Readonly<Properties> | BuildProperties | null | undefined} value
	 *   Properties.
	 * @param {Readonly<Element>} node
	 *   Related heading.
	 * @returns {Properties}
	 *   Properties.
	 */
	function toProperties(value, node) {
	  if (typeof value === 'function') return value(node)
	  return value ? clone(value) : {}
	}

	const rehypeIgnore = (options = {}) => {
	    const { openDelimiter = 'rehype:ignore:start', closeDelimiter = 'rehype:ignore:end' } = options;
	    return (tree) => {
	        visit$1(tree, (node, index, parent) => {
	            if (node.type === 'element' || node.type === 'root') {
	                // const start = node.children.findIndex((item) => item.type === 'comment' && item.value === openDelimiter);
	                // const end = node.children.findIndex((item) => item.type === 'comment' && item.value === closeDelimiter);
	                // if (start > -1 && end > -1) {
	                //   node.children = node.children.filter((_, idx) => idx < start || idx > end);
	                // }
	                let start = false;
	                node.children = node.children.filter((item) => {
	                    if (item.type === 'raw' || item.type === 'comment') {
	                        let str = (item.value || '').trim();
	                        str = str.replace(/^<!--(.*?)-->/, '$1');
	                        if (str === openDelimiter) {
	                            start = true;
	                            return false;
	                        }
	                        if (str === closeDelimiter) {
	                            start = false;
	                            return false;
	                        }
	                    }
	                    return !start;
	                });
	            }
	        });
	    };
	};
	const rehypeIgnore$1 = rehypeIgnore;

	var octiconLink = {
	  type: 'element',
	  tagName: 'svg',
	  properties: {
	    className: 'octicon octicon-link',
	    viewBox: '0 0 16 16',
	    version: '1.1',
	    width: '16',
	    height: '16',
	    ariaHidden: 'true'
	  },
	  children: [{
	    type: 'element',
	    tagName: 'path',
	    children: [],
	    properties: {
	      fillRule: 'evenodd',
	      d: 'M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'
	    }
	  }]
	};

	function copyElement(str) {
	  if (str === void 0) {
	    str = '';
	  }
	  return {
	    type: 'element',
	    tagName: 'div',
	    properties: {
	      class: 'copied',
	      'data-code': str
	    },
	    children: [{
	      type: 'element',
	      tagName: 'svg',
	      properties: {
	        className: 'octicon-copy',
	        ariaHidden: 'true',
	        viewBox: '0 0 16 16',
	        fill: 'currentColor',
	        height: 12,
	        width: 12
	      },
	      children: [{
	        type: 'element',
	        tagName: 'path',
	        properties: {
	          fillRule: 'evenodd',
	          d: 'M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z'
	        },
	        children: []
	      }, {
	        type: 'element',
	        tagName: 'path',
	        properties: {
	          fillRule: 'evenodd',
	          d: 'M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z'
	        },
	        children: []
	      }]
	    }, {
	      type: 'element',
	      tagName: 'svg',
	      properties: {
	        className: 'octicon-check',
	        ariaHidden: 'true',
	        viewBox: '0 0 16 16',
	        fill: 'currentColor',
	        height: 12,
	        width: 12
	      },
	      children: [{
	        type: 'element',
	        tagName: 'path',
	        properties: {
	          fillRule: 'evenodd',
	          d: 'M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z'
	        },
	        children: []
	      }]
	    }]
	  };
	}

	var rehypeRewriteHandle = (disableCopy, rewrite) => (node, index, parent) => {
	  if (node.type === 'element' && parent && parent.type === 'root' && /h(1|2|3|4|5|6)/.test(node.tagName)) {
	    var child = node.children && node.children[0];
	    if (child && child.properties && child.properties.ariaHidden === 'true') {
	      child.properties = _extends({
	        class: 'anchor'
	      }, child.properties);
	      child.children = [octiconLink];
	    }
	  }
	  if (node.type === 'element' && node.tagName === 'pre' && !disableCopy) {
	    var code = getCodeString(node.children);
	    node.children.push(copyElement(code));
	  }
	  rewrite && rewrite(node, index === null ? undefined : index, parent === null ? undefined : parent);
	};
	var defaultRehypePlugins = [rehypeSlug, rehypeAutolinkHeadings, rehypeIgnore$1];

	const MarkdownPreview = /*#__PURE__*/React.forwardRef((props, ref) => {
	  var _props$disableCopy;
	  var rehypePlugins = [reservedMeta, rehypeRaw, retrieveMeta, [f, {
	    ignoreMissing: true
	  }], ...defaultRehypePlugins, [rehypeRewrite, {
	    rewrite: rehypeRewriteHandle((_props$disableCopy = props.disableCopy) != null ? _props$disableCopy : false, props.rehypeRewrite)
	  }], [rehypeAttrs$1, {
	    properties: 'attr'
	  }], ...(props.rehypePlugins || [])];
	  return /*#__PURE__*/jsxRuntimeExports.jsx(MarkdownPreview$1, _extends({}, props, {
	    rehypePlugins: rehypePlugins,
	    ref: ref
	  }));
	});

	function reducer(state, action) {
	  return _extends({}, state, action);
	}
	var EditorContext = /*#__PURE__*/React.createContext({
	  markdown: ''
	});

	function getCommands$1(data, resulte) {
	  if (data === void 0) {
	    data = [];
	  }
	  if (resulte === void 0) {
	    resulte = {};
	  }
	  data.forEach(item => {
	    if (item.children && Array.isArray(item.children)) {
	      resulte = _extends({}, resulte, getCommands$1(item.children || []));
	    } else if (item.keyCommand && item.shortcuts && item.execute) {
	      resulte[item.shortcuts.toLocaleLowerCase()] = item;
	    }
	  });
	  return resulte;
	}
	function shortcutsHandle(e, commands, commandOrchestrator, dispatch, state) {
	  if (commands === void 0) {
	    commands = [];
	  }
	  var data = getCommands$1(commands || []);
	  var shortcuts = [];
	  if (e.altKey) {
	    shortcuts.push('alt');
	  }
	  if (e.shiftKey) {
	    shortcuts.push('shift');
	  }
	  if (e.metaKey) {
	    shortcuts.push('cmd');
	  }
	  if (e.ctrlKey) {
	    shortcuts.push('ctrl');
	  }
	  if (shortcuts.length > 0 && !/(control|alt|meta|shift)/.test(e.key.toLocaleLowerCase())) {
	    shortcuts.push(e.key.toLocaleLowerCase());
	  }
	  if (/escape/.test(e.key.toLocaleLowerCase())) {
	    shortcuts.push('escape');
	  }
	  if (shortcuts.length < 1) {
	    return;
	  }
	  var equal = !!data[shortcuts.join('+')];
	  var command = equal ? data[shortcuts.join('+')] : undefined;
	  Object.keys(data).forEach(item => {
	    var isequal = item.split('+').every(v => {
	      if (/ctrlcmd/.test(v)) {
	        return shortcuts.includes('ctrl') || shortcuts.includes('cmd');
	      }
	      return shortcuts.includes(v);
	    });
	    if (isequal) {
	      command = data[item];
	    }
	  });
	  if (command && commandOrchestrator) {
	    e.stopPropagation();
	    e.preventDefault();
	    commandOrchestrator.executeCommand(command, dispatch, state, shortcuts);
	    return;
	  }
	}

	function _taggedTemplateLiteralLoose(strings, raw) {
	  if (!raw) {
	    raw = strings.slice(0);
	  }
	  strings.raw = raw;
	  return strings;
	}

	/**
	 * @typedef ErrorInfo
	 *   Info on a `parse5` error.
	 * @property {string} reason
	 *   Reason of error.
	 * @property {string} description
	 *   More info on error.
	 * @property {false} [url]
	 *   Turn off if this is not documented in the html5 spec (optional).
	 */

	const errors = {
	  /** @type {ErrorInfo} */
	  abandonedHeadElementChild: {
	    reason: 'Unexpected metadata element after head',
	    description:
	      'Unexpected element after head. Expected the element before `</head>`',
	    url: false
	  },
	  /** @type {ErrorInfo} */
	  abruptClosingOfEmptyComment: {
	    reason: 'Unexpected abruptly closed empty comment',
	    description: 'Unexpected `>` or `->`. Expected `-->` to close comments'
	  },
	  /** @type {ErrorInfo} */
	  abruptDoctypePublicIdentifier: {
	    reason: 'Unexpected abruptly closed public identifier',
	    description:
	      'Unexpected `>`. Expected a closing `"` or `\'` after the public identifier'
	  },
	  /** @type {ErrorInfo} */
	  abruptDoctypeSystemIdentifier: {
	    reason: 'Unexpected abruptly closed system identifier',
	    description:
	      'Unexpected `>`. Expected a closing `"` or `\'` after the identifier identifier'
	  },
	  /** @type {ErrorInfo} */
	  absenceOfDigitsInNumericCharacterReference: {
	    reason: 'Unexpected non-digit at start of numeric character reference',
	    description:
	      'Unexpected `%c`. Expected `[0-9]` for decimal references or `[0-9a-fA-F]` for hexadecimal references'
	  },
	  /** @type {ErrorInfo} */
	  cdataInHtmlContent: {
	    reason: 'Unexpected CDATA section in HTML',
	    description:
	      'Unexpected `<![CDATA[` in HTML. Remove it, use a comment, or encode special characters instead'
	  },
	  /** @type {ErrorInfo} */
	  characterReferenceOutsideUnicodeRange: {
	    reason: 'Unexpected too big numeric character reference',
	    description:
	      'Unexpectedly high character reference. Expected character references to be at most hexadecimal 10ffff (or decimal 1114111)'
	  },
	  /** @type {ErrorInfo} */
	  closingOfElementWithOpenChildElements: {
	    reason: 'Unexpected closing tag with open child elements',
	    description:
	      'Unexpectedly closing tag. Expected other tags to be closed first',
	    url: false
	  },
	  /** @type {ErrorInfo} */
	  controlCharacterInInputStream: {
	    reason: 'Unexpected control character',
	    description:
	      'Unexpected control character `%x`. Expected a non-control code point, 0x00, or ASCII whitespace'
	  },
	  /** @type {ErrorInfo} */
	  controlCharacterReference: {
	    reason: 'Unexpected control character reference',
	    description:
	      'Unexpectedly control character in reference. Expected a non-control code point, 0x00, or ASCII whitespace'
	  },
	  /** @type {ErrorInfo} */
	  disallowedContentInNoscriptInHead: {
	    reason: 'Disallowed content inside `<noscript>` in `<head>`',
	    description:
	      'Unexpected text character `%c`. Only use text in `<noscript>`s in `<body>`',
	    url: false
	  },
	  /** @type {ErrorInfo} */
	  duplicateAttribute: {
	    reason: 'Unexpected duplicate attribute',
	    description:
	      'Unexpectedly double attribute. Expected attributes to occur only once'
	  },
	  /** @type {ErrorInfo} */
	  endTagWithAttributes: {
	    reason: 'Unexpected attribute on closing tag',
	    description: 'Unexpected attribute. Expected `>` instead'
	  },
	  /** @type {ErrorInfo} */
	  endTagWithTrailingSolidus: {
	    reason: 'Unexpected slash at end of closing tag',
	    description: 'Unexpected `%c-1`. Expected `>` instead'
	  },
	  /** @type {ErrorInfo} */
	  endTagWithoutMatchingOpenElement: {
	    reason: 'Unexpected unopened end tag',
	    description: 'Unexpected end tag. Expected no end tag or another end tag',
	    url: false
	  },
	  /** @type {ErrorInfo} */
	  eofBeforeTagName: {
	    reason: 'Unexpected end of file',
	    description: 'Unexpected end of file. Expected tag name instead'
	  },
	  /** @type {ErrorInfo} */
	  eofInCdata: {
	    reason: 'Unexpected end of file in CDATA',
	    description: 'Unexpected end of file. Expected `]]>` to close the CDATA'
	  },
	  /** @type {ErrorInfo} */
	  eofInComment: {
	    reason: 'Unexpected end of file in comment',
	    description: 'Unexpected end of file. Expected `-->` to close the comment'
	  },
	  /** @type {ErrorInfo} */
	  eofInDoctype: {
	    reason: 'Unexpected end of file in doctype',
	    description:
	      'Unexpected end of file. Expected a valid doctype (such as `<!doctype html>`)'
	  },
	  /** @type {ErrorInfo} */
	  eofInElementThatCanContainOnlyText: {
	    reason: 'Unexpected end of file in element that can only contain text',
	    description: 'Unexpected end of file. Expected text or a closing tag',
	    url: false
	  },
	  /** @type {ErrorInfo} */
	  eofInScriptHtmlCommentLikeText: {
	    reason: 'Unexpected end of file in comment inside script',
	    description: 'Unexpected end of file. Expected `-->` to close the comment'
	  },
	  /** @type {ErrorInfo} */
	  eofInTag: {
	    reason: 'Unexpected end of file in tag',
	    description: 'Unexpected end of file. Expected `>` to close the tag'
	  },
	  /** @type {ErrorInfo} */
	  incorrectlyClosedComment: {
	    reason: 'Incorrectly closed comment',
	    description: 'Unexpected `%c-1`. Expected `-->` to close the comment'
	  },
	  /** @type {ErrorInfo} */
	  incorrectlyOpenedComment: {
	    reason: 'Incorrectly opened comment',
	    description: 'Unexpected `%c`. Expected `<!--` to open the comment'
	  },
	  /** @type {ErrorInfo} */
	  invalidCharacterSequenceAfterDoctypeName: {
	    reason: 'Invalid sequence after doctype name',
	    description: 'Unexpected sequence at `%c`. Expected `public` or `system`'
	  },
	  /** @type {ErrorInfo} */
	  invalidFirstCharacterOfTagName: {
	    reason: 'Invalid first character in tag name',
	    description: 'Unexpected `%c`. Expected an ASCII letter instead'
	  },
	  /** @type {ErrorInfo} */
	  misplacedDoctype: {
	    reason: 'Misplaced doctype',
	    description: 'Unexpected doctype. Expected doctype before head',
	    url: false
	  },
	  /** @type {ErrorInfo} */
	  misplacedStartTagForHeadElement: {
	    reason: 'Misplaced `<head>` start tag',
	    description:
	      'Unexpected start tag `<head>`. Expected `<head>` directly after doctype',
	    url: false
	  },
	  /** @type {ErrorInfo} */
	  missingAttributeValue: {
	    reason: 'Missing attribute value',
	    description:
	      'Unexpected `%c-1`. Expected an attribute value or no `%c-1` instead'
	  },
	  /** @type {ErrorInfo} */
	  missingDoctype: {
	    reason: 'Missing doctype before other content',
	    description: 'Expected a `<!doctype html>` before anything else',
	    url: false
	  },
	  /** @type {ErrorInfo} */
	  missingDoctypeName: {
	    reason: 'Missing doctype name',
	    description: 'Unexpected doctype end at `%c`. Expected `html` instead'
	  },
	  /** @type {ErrorInfo} */
	  missingDoctypePublicIdentifier: {
	    reason: 'Missing public identifier in doctype',
	    description: 'Unexpected `%c`. Expected identifier for `public` instead'
	  },
	  /** @type {ErrorInfo} */
	  missingDoctypeSystemIdentifier: {
	    reason: 'Missing system identifier in doctype',
	    description:
	      'Unexpected `%c`. Expected identifier for `system` instead (suggested: `"about:legacy-compat"`)'
	  },
	  /** @type {ErrorInfo} */
	  missingEndTagName: {
	    reason: 'Missing name in end tag',
	    description: 'Unexpected `%c`. Expected an ASCII letter instead'
	  },
	  /** @type {ErrorInfo} */
	  missingQuoteBeforeDoctypePublicIdentifier: {
	    reason: 'Missing quote before public identifier in doctype',
	    description: 'Unexpected `%c`. Expected `"` or `\'` instead'
	  },
	  /** @type {ErrorInfo} */
	  missingQuoteBeforeDoctypeSystemIdentifier: {
	    reason: 'Missing quote before system identifier in doctype',
	    description: 'Unexpected `%c`. Expected `"` or `\'` instead'
	  },
	  /** @type {ErrorInfo} */
	  missingSemicolonAfterCharacterReference: {
	    reason: 'Missing semicolon after character reference',
	    description: 'Unexpected `%c`. Expected `;` instead'
	  },
	  /** @type {ErrorInfo} */
	  missingWhitespaceAfterDoctypePublicKeyword: {
	    reason: 'Missing whitespace after public identifier in doctype',
	    description: 'Unexpected `%c`. Expected ASCII whitespace instead'
	  },
	  /** @type {ErrorInfo} */
	  missingWhitespaceAfterDoctypeSystemKeyword: {
	    reason: 'Missing whitespace after system identifier in doctype',
	    description: 'Unexpected `%c`. Expected ASCII whitespace instead'
	  },
	  /** @type {ErrorInfo} */
	  missingWhitespaceBeforeDoctypeName: {
	    reason: 'Missing whitespace before doctype name',
	    description: 'Unexpected `%c`. Expected ASCII whitespace instead'
	  },
	  /** @type {ErrorInfo} */
	  missingWhitespaceBetweenAttributes: {
	    reason: 'Missing whitespace between attributes',
	    description: 'Unexpected `%c`. Expected ASCII whitespace instead'
	  },
	  /** @type {ErrorInfo} */
	  missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers: {
	    reason:
	      'Missing whitespace between public and system identifiers in doctype',
	    description: 'Unexpected `%c`. Expected ASCII whitespace instead'
	  },
	  /** @type {ErrorInfo} */
	  nestedComment: {
	    reason: 'Unexpected nested comment',
	    description: 'Unexpected `<!--`. Expected `-->`'
	  },
	  /** @type {ErrorInfo} */
	  nestedNoscriptInHead: {
	    reason: 'Unexpected nested `<noscript>` in `<head>`',
	    description:
	      'Unexpected `<noscript>`. Expected a closing tag or a meta element',
	    url: false
	  },
	  /** @type {ErrorInfo} */
	  nonConformingDoctype: {
	    reason: 'Unexpected non-conforming doctype declaration',
	    description:
	      'Expected `<!doctype html>` or `<!doctype html system "about:legacy-compat">`',
	    url: false
	  },
	  /** @type {ErrorInfo} */
	  nonVoidHtmlElementStartTagWithTrailingSolidus: {
	    reason: 'Unexpected trailing slash on start tag of non-void element',
	    description: 'Unexpected `/`. Expected `>` instead'
	  },
	  /** @type {ErrorInfo} */
	  noncharacterCharacterReference: {
	    reason:
	      'Unexpected noncharacter code point referenced by character reference',
	    description: 'Unexpected code point. Do not use noncharacters in HTML'
	  },
	  /** @type {ErrorInfo} */
	  noncharacterInInputStream: {
	    reason: 'Unexpected noncharacter character',
	    description: 'Unexpected code point `%x`. Do not use noncharacters in HTML'
	  },
	  /** @type {ErrorInfo} */
	  nullCharacterReference: {
	    reason: 'Unexpected NULL character referenced by character reference',
	    description: 'Unexpected code point. Do not use NULL characters in HTML'
	  },
	  /** @type {ErrorInfo} */
	  openElementsLeftAfterEof: {
	    reason: 'Unexpected end of file',
	    description: 'Unexpected end of file. Expected closing tag instead',
	    url: false
	  },
	  /** @type {ErrorInfo} */
	  surrogateCharacterReference: {
	    reason: 'Unexpected surrogate character referenced by character reference',
	    description:
	      'Unexpected code point. Do not use lone surrogate characters in HTML'
	  },
	  /** @type {ErrorInfo} */
	  surrogateInInputStream: {
	    reason: 'Unexpected surrogate character',
	    description:
	      'Unexpected code point `%x`. Do not use lone surrogate characters in HTML'
	  },
	  /** @type {ErrorInfo} */
	  unexpectedCharacterAfterDoctypeSystemIdentifier: {
	    reason: 'Invalid character after system identifier in doctype',
	    description: 'Unexpected character at `%c`. Expected `>`'
	  },
	  /** @type {ErrorInfo} */
	  unexpectedCharacterInAttributeName: {
	    reason: 'Unexpected character in attribute name',
	    description:
	      'Unexpected `%c`. Expected whitespace, `/`, `>`, `=`, or probably an ASCII letter'
	  },
	  /** @type {ErrorInfo} */
	  unexpectedCharacterInUnquotedAttributeValue: {
	    reason: 'Unexpected character in unquoted attribute value',
	    description: 'Unexpected `%c`. Quote the attribute value to include it'
	  },
	  /** @type {ErrorInfo} */
	  unexpectedEqualsSignBeforeAttributeName: {
	    reason: 'Unexpected equals sign before attribute name',
	    description: 'Unexpected `%c`. Add an attribute name before it'
	  },
	  /** @type {ErrorInfo} */
	  unexpectedNullCharacter: {
	    reason: 'Unexpected NULL character',
	    description:
	      'Unexpected code point `%x`. Do not use NULL characters in HTML'
	  },
	  /** @type {ErrorInfo} */
	  unexpectedQuestionMarkInsteadOfTagName: {
	    reason: 'Unexpected question mark instead of tag name',
	    description: 'Unexpected `%c`. Expected an ASCII letter instead'
	  },
	  /** @type {ErrorInfo} */
	  unexpectedSolidusInTag: {
	    reason: 'Unexpected slash in tag',
	    description:
	      'Unexpected `%c-1`. Expected it followed by `>` or in a quoted attribute value'
	  },
	  /** @type {ErrorInfo} */
	  unknownNamedCharacterReference: {
	    reason: 'Unexpected unknown named character reference',
	    description:
	      'Unexpected character reference. Expected known named character references'
	  }
	};

	/**
	 * @typedef {import('hast').Root} Root
	 * @typedef {import('parse5').ParserError} ParserError
	 * @typedef {import('vfile').Value} Value
	 */


	const base = 'https://html.spec.whatwg.org/multipage/parsing.html#parse-error-';

	const dashToCamelRe = /-[a-z]/g;
	const formatCRe = /%c(?:([-+])(\d+))?/g;
	const formatXRe = /%x/g;

	const fatalities = {2: true, 1: false, 0: null};

	/** @type {Readonly<Options>} */
	const emptyOptions$1 = {};

	/**
	 * Turn serialized HTML into a hast tree.
	 *
	 * @param {VFile | Value} value
	 *   Serialized HTML to parse.
	 * @param {Readonly<Options> | null | undefined} [options]
	 *   Configuration (optional).
	 * @returns {Root}
	 *   Tree.
	 */
	function fromHtml(value, options) {
	  const settings = options || emptyOptions$1;
	  const onerror = settings.onerror;
	  const file = value instanceof VFile ? value : new VFile(value);
	  const fn = settings.fragment ? parseFragment : parse$2;
	  const doc = String(file);
	  const p5doc = fn(doc, {
	    sourceCodeLocationInfo: true,
	    // Note `parse5` types currently do not allow `undefined`.
	    onParseError: settings.onerror ? internalOnerror : null,
	    scriptingEnabled: false
	  });

	  // `parse5` returns document which are always mapped to roots.
	  return /** @type {Root} */ (
	    fromParse5(p5doc, {
	      file,
	      space: settings.space,
	      verbose: settings.verbose
	    })
	  )

	  /**
	   * Handle a parse error.
	   *
	   * @param {ParserError} error
	   *   Parse5 error.
	   * @returns {undefined}
	   *   Nothing.
	   */
	  function internalOnerror(error) {
	    const code = error.code;
	    const name = camelcase(code);
	    const setting = settings[name];
	    const config = setting === null || setting === undefined ? true : setting;
	    const level = typeof config === 'number' ? config : config ? 1 : 0;

	    if (level) {
	      const info = errors[name];

	      const message = new VFileMessage(format(info.reason), {
	        place: {
	          start: {
	            line: error.startLine,
	            column: error.startCol,
	            offset: error.startOffset
	          },
	          end: {
	            line: error.endLine,
	            column: error.endCol,
	            offset: error.endOffset
	          }
	        },
	        ruleId: code,
	        source: 'hast-util-from-html'
	      });

	      if (file.path) {
	        message.file = file.path;
	        message.name = file.path + ':' + message.name;
	      }

	      message.fatal = fatalities[level];
	      message.note = format(info.description);
	      message.url = info.url === false ? undefined : base + code;
	      onerror(message);
	    }

	    /**
	     * Format a human readable string about an error.
	     *
	     * @param {string} value
	     *   Value to format.
	     * @returns {string}
	     *   Formatted.
	     */
	    function format(value) {
	      return value.replace(formatCRe, formatC).replace(formatXRe, formatX)

	      /**
	       * Format the character.
	       *
	       * @param {string} _
	       *   Match.
	       * @param {string} $1
	       *   Sign (`-` or `+`, optional).
	       * @param {string} $2
	       *   Offset.
	       * @returns {string}
	       *   Formatted.
	       */
	      function formatC(_, $1, $2) {
	        const offset =
	          ($2 ? Number.parseInt($2, 10) : 0) * ($1 === '-' ? -1 : 1);
	        const char = doc.charAt(error.startOffset + offset);
	        return visualizeCharacter(char)
	      }

	      /**
	       * Format the character code.
	       *
	       * @returns {string}
	       *   Formatted.
	       */
	      function formatX() {
	        return visualizeCharacterCode(doc.charCodeAt(error.startOffset))
	      }
	    }
	  }
	}

	/**
	 * @param {string} value
	 *   Error code in dash case.
	 * @returns {ErrorCode}
	 *   Error code in camelcase.
	 */
	function camelcase(value) {
	  // This should match an error code.
	  return /** @type {ErrorCode} */ (value.replace(dashToCamelRe, dashToCamel))
	}

	/**
	 * @param {string} $0
	 *   Match.
	 * @returns {string}
	 *   Camelcased.
	 */
	function dashToCamel($0) {
	  return $0.charAt(1).toUpperCase()
	}

	/**
	 * @param {string} char
	 *   Character.
	 * @returns {string}
	 *   Formatted.
	 */
	function visualizeCharacter(char) {
	  return char === '`' ? '` ` `' : char
	}

	/**
	 * @param {number} charCode
	 *   Character code.
	 * @returns {string}
	 *   Formatted.
	 */
	function visualizeCharacterCode(charCode) {
	  return '0x' + charCode.toString(16).toUpperCase()
	}

	/**
	 * @typedef {import('hast').Root} Root
	 * @typedef {import('hast-util-from-html').Options} FromHtmlOptions
	 * @typedef {import('unified').Parser<Root>} Parser
	 */


	/**
	 * Plugin to add support for parsing from HTML.
	 *
	 * > 👉 **Note**: this is not an XML parser.
	 * > It supports SVG as embedded in HTML.
	 * > It does not support the features available in XML.
	 * > Passing SVG files might break but fragments of modern SVG should be fine.
	 * > Use [`xast-util-from-xml`][xast-util-from-xml] to parse XML.
	 *
	 * @param {Options | null | undefined} [options]
	 *   Configuration (optional).
	 * @returns {undefined}
	 *   Nothing.
	 */
	function rehypeParse(options) {
	  /** @type {import('unified').Processor<Root>} */
	  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.
	  const self = this;
	  const {emitParseErrors, ...settings} = {...self.data('settings'), ...options};

	  self.parser = parser;

	  /**
	   * @type {Parser}
	   */
	  function parser(doc, file) {
	    return fromHtml(doc, {
	      ...settings,
	      onerror: emitParseErrors
	        ? function (message) {
	            if (file.path) {
	              message.name = file.path + ':' + message.name;
	              message.file = file.path;
	            }

	            file.messages.push(message);
	          }
	        : undefined
	    })
	  }
	}

	/**
	 * @typedef CoreOptions
	 * @property {Array<string>} [subset=[]]
	 *   Whether to only escape the given subset of characters.
	 * @property {boolean} [escapeOnly=false]
	 *   Whether to only escape possibly dangerous characters.
	 *   Those characters are `"`, `&`, `'`, `<`, `>`, and `` ` ``.
	 *
	 * @typedef FormatOptions
	 * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format
	 *   Format strategy.
	 *
	 * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions
	 */

	/**
	 * Encode certain characters in `value`.
	 *
	 * @param {string} value
	 * @param {CoreWithFormatOptions} options
	 * @returns {string}
	 */
	function core(value, options) {
	  value = value.replace(
	    options.subset ? charactersToExpression(options.subset) : /["&'<>`]/g,
	    basic
	  );

	  if (options.subset || options.escapeOnly) {
	    return value
	  }

	  return (
	    value
	      // Surrogate pairs.
	      .replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, surrogate)
	      // BMP control characters (C0 except for LF, CR, SP; DEL; and some more
	      // non-ASCII ones).
	      .replace(
	        // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape
	        /[\x01-\t\v\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g,
	        basic
	      )
	  )

	  /**
	   * @param {string} pair
	   * @param {number} index
	   * @param {string} all
	   */
	  function surrogate(pair, index, all) {
	    return options.format(
	      (pair.charCodeAt(0) - 0xd800) * 0x400 +
	        pair.charCodeAt(1) -
	        0xdc00 +
	        0x10000,
	      all.charCodeAt(index + 2),
	      options
	    )
	  }

	  /**
	   * @param {string} character
	   * @param {number} index
	   * @param {string} all
	   */
	  function basic(character, index, all) {
	    return options.format(
	      character.charCodeAt(0),
	      all.charCodeAt(index + 1),
	      options
	    )
	  }
	}

	/**
	 * @param {Array<string>} subset
	 * @returns {RegExp}
	 */
	function charactersToExpression(subset) {
	  /** @type {Array<string>} */
	  const groups = [];
	  let index = -1;

	  while (++index < subset.length) {
	    groups.push(subset[index].replace(/[|\\{}()[\]^$+*?.]/g, '\\$&'));
	  }

	  return new RegExp('(?:' + groups.join('|') + ')', 'g')
	}

	/**
	 * Configurable ways to encode characters as hexadecimal references.
	 *
	 * @param {number} code
	 * @param {number} next
	 * @param {boolean|undefined} omit
	 * @returns {string}
	 */
	function toHexadecimal(code, next, omit) {
	  const value = '&#x' + code.toString(16).toUpperCase();
	  return omit && next && !/[\dA-Fa-f]/.test(String.fromCharCode(next))
	    ? value
	    : value + ';'
	}

	/**
	 * Configurable ways to encode characters as decimal references.
	 *
	 * @param {number} code
	 * @param {number} next
	 * @param {boolean|undefined} omit
	 * @returns {string}
	 */
	function toDecimal(code, next, omit) {
	  const value = '&#' + String(code);
	  return omit && next && !/\d/.test(String.fromCharCode(next))
	    ? value
	    : value + ';'
	}

	/**
	 * Map of named character references from HTML 4.
	 *
	 * @type {Record<string, string>}
	 */
	const characterEntitiesHtml4 = {
	  nbsp: ' ',
	  iexcl: '¡',
	  cent: '¢',
	  pound: '£',
	  curren: '¤',
	  yen: '¥',
	  brvbar: '¦',
	  sect: '§',
	  uml: '¨',
	  copy: '©',
	  ordf: 'ª',
	  laquo: '«',
	  not: '¬',
	  shy: '­',
	  reg: '®',
	  macr: '¯',
	  deg: '°',
	  plusmn: '±',
	  sup2: '²',
	  sup3: '³',
	  acute: '´',
	  micro: 'µ',
	  para: '¶',
	  middot: '·',
	  cedil: '¸',
	  sup1: '¹',
	  ordm: 'º',
	  raquo: '»',
	  frac14: '¼',
	  frac12: '½',
	  frac34: '¾',
	  iquest: '¿',
	  Agrave: 'À',
	  Aacute: 'Á',
	  Acirc: 'Â',
	  Atilde: 'Ã',
	  Auml: 'Ä',
	  Aring: 'Å',
	  AElig: 'Æ',
	  Ccedil: 'Ç',
	  Egrave: 'È',
	  Eacute: 'É',
	  Ecirc: 'Ê',
	  Euml: 'Ë',
	  Igrave: 'Ì',
	  Iacute: 'Í',
	  Icirc: 'Î',
	  Iuml: 'Ï',
	  ETH: 'Ð',
	  Ntilde: 'Ñ',
	  Ograve: 'Ò',
	  Oacute: 'Ó',
	  Ocirc: 'Ô',
	  Otilde: 'Õ',
	  Ouml: 'Ö',
	  times: '×',
	  Oslash: 'Ø',
	  Ugrave: 'Ù',
	  Uacute: 'Ú',
	  Ucirc: 'Û',
	  Uuml: 'Ü',
	  Yacute: 'Ý',
	  THORN: 'Þ',
	  szlig: 'ß',
	  agrave: 'à',
	  aacute: 'á',
	  acirc: 'â',
	  atilde: 'ã',
	  auml: 'ä',
	  aring: 'å',
	  aelig: 'æ',
	  ccedil: 'ç',
	  egrave: 'è',
	  eacute: 'é',
	  ecirc: 'ê',
	  euml: 'ë',
	  igrave: 'ì',
	  iacute: 'í',
	  icirc: 'î',
	  iuml: 'ï',
	  eth: 'ð',
	  ntilde: 'ñ',
	  ograve: 'ò',
	  oacute: 'ó',
	  ocirc: 'ô',
	  otilde: 'õ',
	  ouml: 'ö',
	  divide: '÷',
	  oslash: 'ø',
	  ugrave: 'ù',
	  uacute: 'ú',
	  ucirc: 'û',
	  uuml: 'ü',
	  yacute: 'ý',
	  thorn: 'þ',
	  yuml: 'ÿ',
	  fnof: 'ƒ',
	  Alpha: 'Α',
	  Beta: 'Β',
	  Gamma: 'Γ',
	  Delta: 'Δ',
	  Epsilon: 'Ε',
	  Zeta: 'Ζ',
	  Eta: 'Η',
	  Theta: 'Θ',
	  Iota: 'Ι',
	  Kappa: 'Κ',
	  Lambda: 'Λ',
	  Mu: 'Μ',
	  Nu: 'Ν',
	  Xi: 'Ξ',
	  Omicron: 'Ο',
	  Pi: 'Π',
	  Rho: 'Ρ',
	  Sigma: 'Σ',
	  Tau: 'Τ',
	  Upsilon: 'Υ',
	  Phi: 'Φ',
	  Chi: 'Χ',
	  Psi: 'Ψ',
	  Omega: 'Ω',
	  alpha: 'α',
	  beta: 'β',
	  gamma: 'γ',
	  delta: 'δ',
	  epsilon: 'ε',
	  zeta: 'ζ',
	  eta: 'η',
	  theta: 'θ',
	  iota: 'ι',
	  kappa: 'κ',
	  lambda: 'λ',
	  mu: 'μ',
	  nu: 'ν',
	  xi: 'ξ',
	  omicron: 'ο',
	  pi: 'π',
	  rho: 'ρ',
	  sigmaf: 'ς',
	  sigma: 'σ',
	  tau: 'τ',
	  upsilon: 'υ',
	  phi: 'φ',
	  chi: 'χ',
	  psi: 'ψ',
	  omega: 'ω',
	  thetasym: 'ϑ',
	  upsih: 'ϒ',
	  piv: 'ϖ',
	  bull: '•',
	  hellip: '…',
	  prime: '′',
	  Prime: '″',
	  oline: '‾',
	  frasl: '⁄',
	  weierp: '℘',
	  image: 'ℑ',
	  real: 'ℜ',
	  trade: '™',
	  alefsym: 'ℵ',
	  larr: '←',
	  uarr: '↑',
	  rarr: '→',
	  darr: '↓',
	  harr: '↔',
	  crarr: '↵',
	  lArr: '⇐',
	  uArr: '⇑',
	  rArr: '⇒',
	  dArr: '⇓',
	  hArr: '⇔',
	  forall: '∀',
	  part: '∂',
	  exist: '∃',
	  empty: '∅',
	  nabla: '∇',
	  isin: '∈',
	  notin: '∉',
	  ni: '∋',
	  prod: '∏',
	  sum: '∑',
	  minus: '−',
	  lowast: '∗',
	  radic: '√',
	  prop: '∝',
	  infin: '∞',
	  ang: '∠',
	  and: '∧',
	  or: '∨',
	  cap: '∩',
	  cup: '∪',
	  int: '∫',
	  there4: '∴',
	  sim: '∼',
	  cong: '≅',
	  asymp: '≈',
	  ne: '≠',
	  equiv: '≡',
	  le: '≤',
	  ge: '≥',
	  sub: '⊂',
	  sup: '⊃',
	  nsub: '⊄',
	  sube: '⊆',
	  supe: '⊇',
	  oplus: '⊕',
	  otimes: '⊗',
	  perp: '⊥',
	  sdot: '⋅',
	  lceil: '⌈',
	  rceil: '⌉',
	  lfloor: '⌊',
	  rfloor: '⌋',
	  lang: '〈',
	  rang: '〉',
	  loz: '◊',
	  spades: '♠',
	  clubs: '♣',
	  hearts: '♥',
	  diams: '♦',
	  quot: '"',
	  amp: '&',
	  lt: '<',
	  gt: '>',
	  OElig: 'Œ',
	  oelig: 'œ',
	  Scaron: 'Š',
	  scaron: 'š',
	  Yuml: 'Ÿ',
	  circ: 'ˆ',
	  tilde: '˜',
	  ensp: ' ',
	  emsp: ' ',
	  thinsp: ' ',
	  zwnj: '‌',
	  zwj: '‍',
	  lrm: '‎',
	  rlm: '‏',
	  ndash: '–',
	  mdash: '—',
	  lsquo: '‘',
	  rsquo: '’',
	  sbquo: '‚',
	  ldquo: '“',
	  rdquo: '”',
	  bdquo: '„',
	  dagger: '†',
	  Dagger: '‡',
	  permil: '‰',
	  lsaquo: '‹',
	  rsaquo: '›',
	  euro: '€'
	};

	/**
	 * List of legacy (that don’t need a trailing `;`) named references which could,
	 * depending on what follows them, turn into a different meaning
	 *
	 * @type {Array<string>}
	 */
	const dangerous = [
	  'cent',
	  'copy',
	  'divide',
	  'gt',
	  'lt',
	  'not',
	  'para',
	  'times'
	];

	const own$1 = {}.hasOwnProperty;

	/**
	 * `characterEntitiesHtml4` but inverted.
	 *
	 * @type {Record<string, string>}
	 */
	const characters = {};

	/** @type {string} */
	let key;

	for (key in characterEntitiesHtml4) {
	  if (own$1.call(characterEntitiesHtml4, key)) {
	    characters[characterEntitiesHtml4[key]] = key;
	  }
	}

	/**
	 * Configurable ways to encode characters as named references.
	 *
	 * @param {number} code
	 * @param {number} next
	 * @param {boolean|undefined} omit
	 * @param {boolean|undefined} attribute
	 * @returns {string}
	 */
	function toNamed(code, next, omit, attribute) {
	  const character = String.fromCharCode(code);

	  if (own$1.call(characters, character)) {
	    const name = characters[character];
	    const value = '&' + name;

	    if (
	      omit &&
	      characterEntitiesLegacy.includes(name) &&
	      !dangerous.includes(name) &&
	      (!attribute ||
	        (next &&
	          next !== 61 /* `=` */ &&
	          /[^\da-z]/i.test(String.fromCharCode(next))))
	    ) {
	      return value
	    }

	    return value + ';'
	  }

	  return ''
	}

	/**
	 * @typedef FormatSmartOptions
	 * @property {boolean} [useNamedReferences=false]
	 *   Prefer named character references (`&amp;`) where possible.
	 * @property {boolean} [useShortestReferences=false]
	 *   Prefer the shortest possible reference, if that results in less bytes.
	 *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.
	 * @property {boolean} [omitOptionalSemicolons=false]
	 *   Whether to omit semicolons when possible.
	 *   **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier.
	 *   Omitting semicolons is possible for certain named and numeric references in some cases.
	 * @property {boolean} [attribute=false]
	 *   Create character references which don’t fail in attributes.
	 *   **Note**: `attribute` only applies when operating dangerously with
	 *   `omitOptionalSemicolons: true`.
	 */


	/**
	 * Configurable ways to encode a character yielding pretty or small results.
	 *
	 * @param {number} code
	 * @param {number} next
	 * @param {FormatSmartOptions} options
	 * @returns {string}
	 */
	function formatSmart(code, next, options) {
	  let numeric = toHexadecimal(code, next, options.omitOptionalSemicolons);
	  /** @type {string|undefined} */
	  let named;

	  if (options.useNamedReferences || options.useShortestReferences) {
	    named = toNamed(
	      code,
	      next,
	      options.omitOptionalSemicolons,
	      options.attribute
	    );
	  }

	  // Use the shortest numeric reference when requested.
	  // A simple algorithm would use decimal for all code points under 100, as
	  // those are shorter than hexadecimal:
	  //
	  // * `&#99;` vs `&#x63;` (decimal shorter)
	  // * `&#100;` vs `&#x64;` (equal)
	  //
	  // However, because we take `next` into consideration when `omit` is used,
	  // And it would be possible that decimals are shorter on bigger values as
	  // well if `next` is hexadecimal but not decimal, we instead compare both.
	  if (
	    (options.useShortestReferences || !named) &&
	    options.useShortestReferences
	  ) {
	    const decimal = toDecimal(code, next, options.omitOptionalSemicolons);

	    if (decimal.length < numeric.length) {
	      numeric = decimal;
	    }
	  }

	  return named &&
	    (!options.useShortestReferences || named.length < numeric.length)
	    ? named
	    : numeric
	}

	/**
	 * @typedef {import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions} Options
	 * @typedef {import('./core.js').CoreOptions} LightOptions
	 */


	/**
	 * Encode special characters in `value`.
	 *
	 * @param {string} value
	 *   Value to encode.
	 * @param {Options} [options]
	 *   Configuration.
	 * @returns {string}
	 *   Encoded value.
	 */
	function stringifyEntities(value, options) {
	  return core(value, Object.assign({format: formatSmart}, options))
	}

	/**
	 * @typedef {import('hast').Comment} Comment
	 * @typedef {import('hast').Parents} Parents
	 *
	 * @typedef {import('../index.js').State} State
	 */


	/**
	 * Serialize a comment.
	 *
	 * @param {Comment} node
	 *   Node to handle.
	 * @param {number | undefined} _1
	 *   Index of `node` in `parent.
	 * @param {Parents | undefined} _2
	 *   Parent of `node`.
	 * @param {State} state
	 *   Info passed around about the current state.
	 * @returns {string}
	 *   Serialized node.
	 */
	function comment$1(node, _1, _2, state) {
	  // See: <https://html.spec.whatwg.org/multipage/syntax.html#comments>
	  return state.settings.bogusComments
	    ? '<?' +
	        stringifyEntities(
	          node.value,
	          Object.assign({}, state.settings.characterReferences, {subset: ['>']})
	        ) +
	        '>'
	    : '<!--' + node.value.replace(/^>|^->|<!--|-->|--!>|<!-$/g, encode) + '-->'

	  /**
	   * @param {string} $0
	   */
	  function encode($0) {
	    return stringifyEntities(
	      $0,
	      Object.assign({}, state.settings.characterReferences, {
	        subset: ['<', '>']
	      })
	    )
	  }
	}

	/**
	 * @typedef {import('hast').Doctype} Doctype
	 * @typedef {import('hast').Parents} Parents
	 *
	 * @typedef {import('../index.js').State} State
	 */


	/**
	 * Serialize a doctype.
	 *
	 * @param {Doctype} _1
	 *   Node to handle.
	 * @param {number | undefined} _2
	 *   Index of `node` in `parent.
	 * @param {Parents | undefined} _3
	 *   Parent of `node`.
	 * @param {State} state
	 *   Info passed around about the current state.
	 * @returns {string}
	 *   Serialized node.
	 */
	function doctype(_1, _2, _3, state) {
	  return (
	    '<!' +
	    (state.settings.upperDoctype ? 'DOCTYPE' : 'doctype') +
	    (state.settings.tightDoctype ? '' : ' ') +
	    'html>'
	  )
	}

	/**
	 * @typedef {import('hast').Parents} Parents
	 * @typedef {import('hast').RootContent} RootContent
	 */


	const siblingAfter = siblings(1);
	const siblingBefore = siblings(-1);

	/** @type {Array<RootContent>} */
	const emptyChildren$1 = [];

	/**
	 * Factory to check siblings in a direction.
	 *
	 * @param {number} increment
	 */
	function siblings(increment) {
	  return sibling

	  /**
	   * Find applicable siblings in a direction.
	   *
	   * @template {Parents} Parent
	   *   Parent type.
	   * @param {Parent | undefined} parent
	   *   Parent.
	   * @param {number | undefined} index
	   *   Index of child in `parent`.
	   * @param {boolean | undefined} [includeWhitespace=false]
	   *   Whether to include whitespace (default: `false`).
	   * @returns {Parent extends {children: Array<infer Child>} ? Child | undefined : never}
	   *   Child of parent.
	   */
	  function sibling(parent, index, includeWhitespace) {
	    const siblings = parent ? parent.children : emptyChildren$1;
	    let offset = (index || 0) + increment;
	    let next = siblings[offset];

	    if (!includeWhitespace) {
	      while (next && whitespace$1(next)) {
	        offset += increment;
	        next = siblings[offset];
	      }
	    }

	    // @ts-expect-error: it’s a correct child.
	    return next
	  }
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').Parents} Parents
	 */

	/**
	 * @callback OmitHandle
	 *   Check if a tag can be omitted.
	 * @param {Element} element
	 *   Element to check.
	 * @param {number | undefined} index
	 *   Index of element in parent.
	 * @param {Parents | undefined} parent
	 *   Parent of element.
	 * @returns {boolean}
	 *   Whether to omit a tag.
	 *
	 */

	const own = {}.hasOwnProperty;

	/**
	 * Factory to check if a given node can have a tag omitted.
	 *
	 * @param {Record<string, OmitHandle>} handlers
	 *   Omission handlers, where each key is a tag name, and each value is the
	 *   corresponding handler.
	 * @returns {OmitHandle}
	 *   Whether to omit a tag of an element.
	 */
	function omission(handlers) {
	  return omit

	  /**
	   * Check if a given node can have a tag omitted.
	   *
	   * @type {OmitHandle}
	   */
	  function omit(node, index, parent) {
	    return (
	      own.call(handlers, node.tagName) &&
	      handlers[node.tagName](node, index, parent)
	    )
	  }
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').Parents} Parents
	 */


	const closing = omission({
	  body: body$1,
	  caption: headOrColgroupOrCaption,
	  colgroup: headOrColgroupOrCaption,
	  dd,
	  dt,
	  head: headOrColgroupOrCaption,
	  html: html$1,
	  li,
	  optgroup,
	  option,
	  p,
	  rp: rubyElement,
	  rt: rubyElement,
	  tbody: tbody$1,
	  td: cells,
	  tfoot,
	  th: cells,
	  thead,
	  tr
	});

	/**
	 * Macro for `</head>`, `</colgroup>`, and `</caption>`.
	 *
	 * @param {Element} _
	 *   Element.
	 * @param {number | undefined} index
	 *   Index of element in parent.
	 * @param {Parents | undefined} parent
	 *   Parent of element.
	 * @returns {boolean}
	 *   Whether the closing tag can be omitted.
	 */
	function headOrColgroupOrCaption(_, index, parent) {
	  const next = siblingAfter(parent, index, true);
	  return (
	    !next ||
	    (next.type !== 'comment' &&
	      !(next.type === 'text' && whitespace$1(next.value.charAt(0))))
	  )
	}

	/**
	 * Whether to omit `</html>`.
	 *
	 * @param {Element} _
	 *   Element.
	 * @param {number | undefined} index
	 *   Index of element in parent.
	 * @param {Parents | undefined} parent
	 *   Parent of element.
	 * @returns {boolean}
	 *   Whether the closing tag can be omitted.
	 */
	function html$1(_, index, parent) {
	  const next = siblingAfter(parent, index);
	  return !next || next.type !== 'comment'
	}

	/**
	 * Whether to omit `</body>`.
	 *
	 * @param {Element} _
	 *   Element.
	 * @param {number | undefined} index
	 *   Index of element in parent.
	 * @param {Parents | undefined} parent
	 *   Parent of element.
	 * @returns {boolean}
	 *   Whether the closing tag can be omitted.
	 */
	function body$1(_, index, parent) {
	  const next = siblingAfter(parent, index);
	  return !next || next.type !== 'comment'
	}

	/**
	 * Whether to omit `</p>`.
	 *
	 * @param {Element} _
	 *   Element.
	 * @param {number | undefined} index
	 *   Index of element in parent.
	 * @param {Parents | undefined} parent
	 *   Parent of element.
	 * @returns {boolean}
	 *   Whether the closing tag can be omitted.
	 */
	function p(_, index, parent) {
	  const next = siblingAfter(parent, index);
	  return next
	    ? next.type === 'element' &&
	        (next.tagName === 'address' ||
	          next.tagName === 'article' ||
	          next.tagName === 'aside' ||
	          next.tagName === 'blockquote' ||
	          next.tagName === 'details' ||
	          next.tagName === 'div' ||
	          next.tagName === 'dl' ||
	          next.tagName === 'fieldset' ||
	          next.tagName === 'figcaption' ||
	          next.tagName === 'figure' ||
	          next.tagName === 'footer' ||
	          next.tagName === 'form' ||
	          next.tagName === 'h1' ||
	          next.tagName === 'h2' ||
	          next.tagName === 'h3' ||
	          next.tagName === 'h4' ||
	          next.tagName === 'h5' ||
	          next.tagName === 'h6' ||
	          next.tagName === 'header' ||
	          next.tagName === 'hgroup' ||
	          next.tagName === 'hr' ||
	          next.tagName === 'main' ||
	          next.tagName === 'menu' ||
	          next.tagName === 'nav' ||
	          next.tagName === 'ol' ||
	          next.tagName === 'p' ||
	          next.tagName === 'pre' ||
	          next.tagName === 'section' ||
	          next.tagName === 'table' ||
	          next.tagName === 'ul')
	    : !parent ||
	        // Confusing parent.
	        !(
	          parent.type === 'element' &&
	          (parent.tagName === 'a' ||
	            parent.tagName === 'audio' ||
	            parent.tagName === 'del' ||
	            parent.tagName === 'ins' ||
	            parent.tagName === 'map' ||
	            parent.tagName === 'noscript' ||
	            parent.tagName === 'video')
	        )
	}

	/**
	 * Whether to omit `</li>`.
	 *
	 * @param {Element} _
	 *   Element.
	 * @param {number | undefined} index
	 *   Index of element in parent.
	 * @param {Parents | undefined} parent
	 *   Parent of element.
	 * @returns {boolean}
	 *   Whether the closing tag can be omitted.
	 */
	function li(_, index, parent) {
	  const next = siblingAfter(parent, index);
	  return !next || (next.type === 'element' && next.tagName === 'li')
	}

	/**
	 * Whether to omit `</dt>`.
	 *
	 * @param {Element} _
	 *   Element.
	 * @param {number | undefined} index
	 *   Index of element in parent.
	 * @param {Parents | undefined} parent
	 *   Parent of element.
	 * @returns {boolean}
	 *   Whether the closing tag can be omitted.
	 */
	function dt(_, index, parent) {
	  const next = siblingAfter(parent, index);
	  return Boolean(
	    next &&
	      next.type === 'element' &&
	      (next.tagName === 'dt' || next.tagName === 'dd')
	  )
	}

	/**
	 * Whether to omit `</dd>`.
	 *
	 * @param {Element} _
	 *   Element.
	 * @param {number | undefined} index
	 *   Index of element in parent.
	 * @param {Parents | undefined} parent
	 *   Parent of element.
	 * @returns {boolean}
	 *   Whether the closing tag can be omitted.
	 */
	function dd(_, index, parent) {
	  const next = siblingAfter(parent, index);
	  return (
	    !next ||
	    (next.type === 'element' &&
	      (next.tagName === 'dt' || next.tagName === 'dd'))
	  )
	}

	/**
	 * Whether to omit `</rt>` or `</rp>`.
	 *
	 * @param {Element} _
	 *   Element.
	 * @param {number | undefined} index
	 *   Index of element in parent.
	 * @param {Parents | undefined} parent
	 *   Parent of element.
	 * @returns {boolean}
	 *   Whether the closing tag can be omitted.
	 */
	function rubyElement(_, index, parent) {
	  const next = siblingAfter(parent, index);
	  return (
	    !next ||
	    (next.type === 'element' &&
	      (next.tagName === 'rp' || next.tagName === 'rt'))
	  )
	}

	/**
	 * Whether to omit `</optgroup>`.
	 *
	 * @param {Element} _
	 *   Element.
	 * @param {number | undefined} index
	 *   Index of element in parent.
	 * @param {Parents | undefined} parent
	 *   Parent of element.
	 * @returns {boolean}
	 *   Whether the closing tag can be omitted.
	 */
	function optgroup(_, index, parent) {
	  const next = siblingAfter(parent, index);
	  return !next || (next.type === 'element' && next.tagName === 'optgroup')
	}

	/**
	 * Whether to omit `</option>`.
	 *
	 * @param {Element} _
	 *   Element.
	 * @param {number | undefined} index
	 *   Index of element in parent.
	 * @param {Parents | undefined} parent
	 *   Parent of element.
	 * @returns {boolean}
	 *   Whether the closing tag can be omitted.
	 */
	function option(_, index, parent) {
	  const next = siblingAfter(parent, index);
	  return (
	    !next ||
	    (next.type === 'element' &&
	      (next.tagName === 'option' || next.tagName === 'optgroup'))
	  )
	}

	/**
	 * Whether to omit `</thead>`.
	 *
	 * @param {Element} _
	 *   Element.
	 * @param {number | undefined} index
	 *   Index of element in parent.
	 * @param {Parents | undefined} parent
	 *   Parent of element.
	 * @returns {boolean}
	 *   Whether the closing tag can be omitted.
	 */
	function thead(_, index, parent) {
	  const next = siblingAfter(parent, index);
	  return Boolean(
	    next &&
	      next.type === 'element' &&
	      (next.tagName === 'tbody' || next.tagName === 'tfoot')
	  )
	}

	/**
	 * Whether to omit `</tbody>`.
	 *
	 * @param {Element} _
	 *   Element.
	 * @param {number | undefined} index
	 *   Index of element in parent.
	 * @param {Parents | undefined} parent
	 *   Parent of element.
	 * @returns {boolean}
	 *   Whether the closing tag can be omitted.
	 */
	function tbody$1(_, index, parent) {
	  const next = siblingAfter(parent, index);
	  return (
	    !next ||
	    (next.type === 'element' &&
	      (next.tagName === 'tbody' || next.tagName === 'tfoot'))
	  )
	}

	/**
	 * Whether to omit `</tfoot>`.
	 *
	 * @param {Element} _
	 *   Element.
	 * @param {number | undefined} index
	 *   Index of element in parent.
	 * @param {Parents | undefined} parent
	 *   Parent of element.
	 * @returns {boolean}
	 *   Whether the closing tag can be omitted.
	 */
	function tfoot(_, index, parent) {
	  return !siblingAfter(parent, index)
	}

	/**
	 * Whether to omit `</tr>`.
	 *
	 * @param {Element} _
	 *   Element.
	 * @param {number | undefined} index
	 *   Index of element in parent.
	 * @param {Parents | undefined} parent
	 *   Parent of element.
	 * @returns {boolean}
	 *   Whether the closing tag can be omitted.
	 */
	function tr(_, index, parent) {
	  const next = siblingAfter(parent, index);
	  return !next || (next.type === 'element' && next.tagName === 'tr')
	}

	/**
	 * Whether to omit `</td>` or `</th>`.
	 *
	 * @param {Element} _
	 *   Element.
	 * @param {number | undefined} index
	 *   Index of element in parent.
	 * @param {Parents | undefined} parent
	 *   Parent of element.
	 * @returns {boolean}
	 *   Whether the closing tag can be omitted.
	 */
	function cells(_, index, parent) {
	  const next = siblingAfter(parent, index);
	  return (
	    !next ||
	    (next.type === 'element' &&
	      (next.tagName === 'td' || next.tagName === 'th'))
	  )
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').Parents} Parents
	 */


	const opening = omission({
	  body,
	  colgroup,
	  head,
	  html,
	  tbody
	});

	/**
	 * Whether to omit `<html>`.
	 *
	 * @param {Element} node
	 *   Element.
	 * @returns {boolean}
	 *   Whether the opening tag can be omitted.
	 */
	function html(node) {
	  const head = siblingAfter(node, -1);
	  return !head || head.type !== 'comment'
	}

	/**
	 * Whether to omit `<head>`.
	 *
	 * @param {Element} node
	 *   Element.
	 * @returns {boolean}
	 *   Whether the opening tag can be omitted.
	 */
	function head(node) {
	  const children = node.children;
	  /** @type {Array<string>} */
	  const seen = [];
	  let index = -1;

	  while (++index < children.length) {
	    const child = children[index];
	    if (
	      child.type === 'element' &&
	      (child.tagName === 'title' || child.tagName === 'base')
	    ) {
	      if (seen.includes(child.tagName)) return false
	      seen.push(child.tagName);
	    }
	  }

	  return children.length > 0
	}

	/**
	 * Whether to omit `<body>`.
	 *
	 * @param {Element} node
	 *   Element.
	 * @returns {boolean}
	 *   Whether the opening tag can be omitted.
	 */
	function body(node) {
	  const head = siblingAfter(node, -1, true);

	  return (
	    !head ||
	    (head.type !== 'comment' &&
	      !(head.type === 'text' && whitespace$1(head.value.charAt(0))) &&
	      !(
	        head.type === 'element' &&
	        (head.tagName === 'meta' ||
	          head.tagName === 'link' ||
	          head.tagName === 'script' ||
	          head.tagName === 'style' ||
	          head.tagName === 'template')
	      ))
	  )
	}

	/**
	 * Whether to omit `<colgroup>`.
	 * The spec describes some logic for the opening tag, but it’s easier to
	 * implement in the closing tag, to the same effect, so we handle it there
	 * instead.
	 *
	 * @param {Element} node
	 *   Element.
	 * @param {number | undefined} index
	 *   Index of element in parent.
	 * @param {Parents | undefined} parent
	 *   Parent of element.
	 * @returns {boolean}
	 *   Whether the opening tag can be omitted.
	 */
	function colgroup(node, index, parent) {
	  const previous = siblingBefore(parent, index);
	  const head = siblingAfter(node, -1, true);

	  // Previous colgroup was already omitted.
	  if (
	    parent &&
	    previous &&
	    previous.type === 'element' &&
	    previous.tagName === 'colgroup' &&
	    closing(previous, parent.children.indexOf(previous), parent)
	  ) {
	    return false
	  }

	  return Boolean(head && head.type === 'element' && head.tagName === 'col')
	}

	/**
	 * Whether to omit `<tbody>`.
	 *
	 * @param {Element} node
	 *   Element.
	 * @param {number | undefined} index
	 *   Index of element in parent.
	 * @param {Parents | undefined} parent
	 *   Parent of element.
	 * @returns {boolean}
	 *   Whether the opening tag can be omitted.
	 */
	function tbody(node, index, parent) {
	  const previous = siblingBefore(parent, index);
	  const head = siblingAfter(node, -1);

	  // Previous table section was already omitted.
	  if (
	    parent &&
	    previous &&
	    previous.type === 'element' &&
	    (previous.tagName === 'thead' || previous.tagName === 'tbody') &&
	    closing(previous, parent.children.indexOf(previous), parent)
	  ) {
	    return false
	  }

	  return Boolean(head && head.type === 'element' && head.tagName === 'tr')
	}

	/**
	 * @typedef {import('hast').Element} Element
	 * @typedef {import('hast').Parents} Parents
	 * @typedef {import('hast').Properties} Properties
	 *
	 * @typedef {import('../index.js').State} State
	 */


	/**
	 * Maps of subsets.
	 *
	 * Each value is a matrix of tuples.
	 * The value at `0` causes parse errors, the value at `1` is valid.
	 * Of both, the value at `0` is unsafe, and the value at `1` is safe.
	 *
	 * @type {Record<'double' | 'name' | 'single' | 'unquoted', Array<[Array<string>, Array<string>]>>}
	 */
	const constants = {
	  // See: <https://html.spec.whatwg.org/#attribute-name-state>.
	  name: [
	    ['\t\n\f\r &/=>'.split(''), '\t\n\f\r "&\'/=>`'.split('')],
	    ['\0\t\n\f\r "&\'/<=>'.split(''), '\0\t\n\f\r "&\'/<=>`'.split('')]
	  ],
	  // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.
	  unquoted: [
	    ['\t\n\f\r &>'.split(''), '\0\t\n\f\r "&\'<=>`'.split('')],
	    ['\0\t\n\f\r "&\'<=>`'.split(''), '\0\t\n\f\r "&\'<=>`'.split('')]
	  ],
	  // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.
	  single: [
	    ["&'".split(''), '"&\'`'.split('')],
	    ["\0&'".split(''), '\0"&\'`'.split('')]
	  ],
	  // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.
	  double: [
	    ['"&'.split(''), '"&\'`'.split('')],
	    ['\0"&'.split(''), '\0"&\'`'.split('')]
	  ]
	};

	/**
	 * Serialize an element node.
	 *
	 * @param {Element} node
	 *   Node to handle.
	 * @param {number | undefined} index
	 *   Index of `node` in `parent.
	 * @param {Parents | undefined} parent
	 *   Parent of `node`.
	 * @param {State} state
	 *   Info passed around about the current state.
	 * @returns {string}
	 *   Serialized node.
	 */
	function element(node, index, parent, state) {
	  const schema = state.schema;
	  const omit = schema.space === 'svg' ? false : state.settings.omitOptionalTags;
	  let selfClosing =
	    schema.space === 'svg'
	      ? state.settings.closeEmptyElements
	      : state.settings.voids.includes(node.tagName.toLowerCase());
	  /** @type {Array<string>} */
	  const parts = [];
	  /** @type {string} */
	  let last;

	  if (schema.space === 'html' && node.tagName === 'svg') {
	    state.schema = svg;
	  }

	  const attrs = serializeAttributes(state, node.properties);

	  const content = state.all(
	    schema.space === 'html' && node.tagName === 'template' ? node.content : node
	  );

	  state.schema = schema;

	  // If the node is categorised as void, but it has children, remove the
	  // categorisation.
	  // This enables for example `menuitem`s, which are void in W3C HTML but not
	  // void in WHATWG HTML, to be stringified properly.
	  // Note: `menuitem` has since been removed from the HTML spec, and so is no
	  // longer void.
	  if (content) selfClosing = false;

	  if (attrs || !omit || !opening(node, index, parent)) {
	    parts.push('<', node.tagName, attrs ? ' ' + attrs : '');

	    if (
	      selfClosing &&
	      (schema.space === 'svg' || state.settings.closeSelfClosing)
	    ) {
	      last = attrs.charAt(attrs.length - 1);
	      if (
	        !state.settings.tightSelfClosing ||
	        last === '/' ||
	        (last && last !== '"' && last !== "'")
	      ) {
	        parts.push(' ');
	      }

	      parts.push('/');
	    }

	    parts.push('>');
	  }

	  parts.push(content);

	  if (!selfClosing && (!omit || !closing(node, index, parent))) {
	    parts.push('</' + node.tagName + '>');
	  }

	  return parts.join('')
	}

	/**
	 * @param {State} state
	 * @param {Properties | null | undefined} props
	 * @returns {string}
	 */
	function serializeAttributes(state, props) {
	  /** @type {Array<string>} */
	  const values = [];
	  let index = -1;
	  /** @type {string} */
	  let key;

	  if (props) {
	    for (key in props) {
	      if (props[key] !== null && props[key] !== undefined) {
	        const value = serializeAttribute(state, key, props[key]);
	        if (value) values.push(value);
	      }
	    }
	  }

	  while (++index < values.length) {
	    const last = state.settings.tightAttributes
	      ? values[index].charAt(values[index].length - 1)
	      : undefined;

	    // In tight mode, don’t add a space after quoted attributes.
	    if (index !== values.length - 1 && last !== '"' && last !== "'") {
	      values[index] += ' ';
	    }
	  }

	  return values.join('')
	}

	/**
	 * @param {State} state
	 * @param {string} key
	 * @param {Properties[keyof Properties]} value
	 * @returns {string}
	 */
	function serializeAttribute(state, key, value) {
	  const info = find(state.schema, key);
	  const x =
	    state.settings.allowParseErrors && state.schema.space === 'html' ? 0 : 1;
	  const y = state.settings.allowDangerousCharacters ? 0 : 1;
	  let quote = state.quote;
	  /** @type {string | undefined} */
	  let result;

	  if (info.overloadedBoolean && (value === info.attribute || value === '')) {
	    value = true;
	  } else if (
	    info.boolean ||
	    (info.overloadedBoolean && typeof value !== 'string')
	  ) {
	    value = Boolean(value);
	  }

	  if (
	    value === null ||
	    value === undefined ||
	    value === false ||
	    (typeof value === 'number' && Number.isNaN(value))
	  ) {
	    return ''
	  }

	  const name = stringifyEntities(
	    info.attribute,
	    Object.assign({}, state.settings.characterReferences, {
	      // Always encode without parse errors in non-HTML.
	      subset: constants.name[x][y]
	    })
	  );

	  // No value.
	  // There is currently only one boolean property in SVG: `[download]` on
	  // `<a>`.
	  // This property does not seem to work in browsers (Firefox, Safari, Chrome),
	  // so I can’t test if dropping the value works.
	  // But I assume that it should:
	  //
	  // ```html
	  // <!doctype html>
	  // <svg viewBox="0 0 100 100">
	  //   <a href=https://example.com download>
	  //     <circle cx=50 cy=40 r=35 />
	  //   </a>
	  // </svg>
	  // ```
	  //
	  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>
	  if (value === true) return name

	  // `spaces` doesn’t accept a second argument, but it’s given here just to
	  // keep the code cleaner.
	  value = Array.isArray(value)
	    ? (info.commaSeparated ? stringify$2 : stringify$1)(value, {
	        padLeft: !state.settings.tightCommaSeparatedLists
	      })
	    : String(value);

	  if (state.settings.collapseEmptyAttributes && !value) return name

	  // Check unquoted value.
	  if (state.settings.preferUnquoted) {
	    result = stringifyEntities(
	      value,
	      Object.assign({}, state.settings.characterReferences, {
	        attribute: true,
	        subset: constants.unquoted[x][y]
	      })
	    );
	  }

	  // If we don’t want unquoted, or if `value` contains character references when
	  // unquoted…
	  if (result !== value) {
	    // If the alternative is less common than `quote`, switch.
	    if (
	      state.settings.quoteSmart &&
	      ccount(value, quote) > ccount(value, state.alternative)
	    ) {
	      quote = state.alternative;
	    }

	    result =
	      quote +
	      stringifyEntities(
	        value,
	        Object.assign({}, state.settings.characterReferences, {
	          // Always encode without parse errors in non-HTML.
	          subset: (quote === "'" ? constants.single : constants.double)[x][y],
	          attribute: true
	        })
	      ) +
	      quote;
	  }

	  // Don’t add a `=` for unquoted empties.
	  return name + (result ? '=' + result : result)
	}

	/**
	 * @typedef {import('hast').Parents} Parents
	 * @typedef {import('hast').Text} Text
	 *
	 * @typedef {import('mdast-util-to-hast').Raw} Raw
	 *
	 * @typedef {import('../index.js').State} State
	 */


	/**
	 * Serialize a text node.
	 *
	 * @param {Raw | Text} node
	 *   Node to handle.
	 * @param {number | undefined} _
	 *   Index of `node` in `parent.
	 * @param {Parents | undefined} parent
	 *   Parent of `node`.
	 * @param {State} state
	 *   Info passed around about the current state.
	 * @returns {string}
	 *   Serialized node.
	 */
	function text(node, _, parent, state) {
	  // Check if content of `node` should be escaped.
	  return parent &&
	    parent.type === 'element' &&
	    (parent.tagName === 'script' || parent.tagName === 'style')
	    ? node.value
	    : stringifyEntities(
	        node.value,
	        Object.assign({}, state.settings.characterReferences, {
	          subset: ['<', '&']
	        })
	      )
	}

	/**
	 * @typedef {import('hast').Parents} Parents
	 *
	 * @typedef {import('mdast-util-to-hast').Raw} Raw
	 *
	 * @typedef {import('../index.js').State} State
	 */


	/**
	 * Serialize a raw node.
	 *
	 * @param {Raw} node
	 *   Node to handle.
	 * @param {number | undefined} index
	 *   Index of `node` in `parent.
	 * @param {Parents | undefined} parent
	 *   Parent of `node`.
	 * @param {State} state
	 *   Info passed around about the current state.
	 * @returns {string}
	 *   Serialized node.
	 */
	function raw(node, index, parent, state) {
	  return state.settings.allowDangerousHtml
	    ? node.value
	    : text(node, index, parent, state)
	}

	/**
	 * @typedef {import('hast').Parents} Parents
	 * @typedef {import('hast').Root} Root
	 *
	 * @typedef {import('../index.js').State} State
	 */


	/**
	 * Serialize a root.
	 *
	 * @param {Root} node
	 *   Node to handle.
	 * @param {number | undefined} _1
	 *   Index of `node` in `parent.
	 * @param {Parents | undefined} _2
	 *   Parent of `node`.
	 * @param {State} state
	 *   Info passed around about the current state.
	 * @returns {string}
	 *   Serialized node.
	 */
	function root$1(node, _1, _2, state) {
	  return state.all(node)
	}

	/**
	 * @typedef {import('hast').Nodes} Nodes
	 * @typedef {import('hast').Parents} Parents
	 *
	 * @typedef {import('../index.js').State} State
	 */


	/**
	 * @type {(node: Nodes, index: number | undefined, parent: Parents | undefined, state: State) => string}
	 */
	const handle = zwitch('type', {
	  invalid,
	  unknown,
	  handlers: {comment: comment$1, doctype, element, raw, root: root$1, text}
	});

	/**
	 * Fail when a non-node is found in the tree.
	 *
	 * @param {unknown} node
	 *   Unknown value.
	 * @returns {never}
	 *   Never.
	 */
	function invalid(node) {
	  throw new Error('Expected node, not `' + node + '`')
	}

	/**
	 * Fail when a node with an unknown type is found in the tree.
	 *
	 * @param {unknown} node_
	 *  Unknown node.
	 * @returns {never}
	 *   Never.
	 */
	function unknown(node_) {
	  // `type` is guaranteed by runtime JS.
	  const node = /** @type {Nodes} */ (node_);
	  throw new Error('Cannot compile unknown node `' + node.type + '`')
	}

	/**
	 * @typedef {import('hast').Nodes} Nodes
	 * @typedef {import('hast').Parents} Parents
	 * @typedef {import('hast').RootContent} RootContent
	 *
	 * @typedef {import('property-information').Schema} Schema
	 *
	 * @typedef {import('stringify-entities').Options} StringifyEntitiesOptions
	 */


	/** @type {Options} */
	const emptyOptions = {};

	/** @type {CharacterReferences} */
	const emptyCharacterReferences = {};

	/** @type {Array<never>} */
	const emptyChildren = [];

	/**
	 * Serialize hast as HTML.
	 *
	 * @param {Array<RootContent> | Nodes} tree
	 *   Tree to serialize.
	 * @param {Options | null | undefined} [options]
	 *   Configuration (optional).
	 * @returns {string}
	 *   Serialized HTML.
	 */
	function toHtml(tree, options) {
	  const options_ = options || emptyOptions;
	  const quote = options_.quote || '"';
	  const alternative = quote === '"' ? "'" : '"';

	  if (quote !== '"' && quote !== "'") {
	    throw new Error('Invalid quote `' + quote + '`, expected `\'` or `"`')
	  }

	  /** @type {State} */
	  const state = {
	    one,
	    all,
	    settings: {
	      omitOptionalTags: options_.omitOptionalTags || false,
	      allowParseErrors: options_.allowParseErrors || false,
	      allowDangerousCharacters: options_.allowDangerousCharacters || false,
	      quoteSmart: options_.quoteSmart || false,
	      preferUnquoted: options_.preferUnquoted || false,
	      tightAttributes: options_.tightAttributes || false,
	      upperDoctype: options_.upperDoctype || false,
	      tightDoctype: options_.tightDoctype || false,
	      bogusComments: options_.bogusComments || false,
	      tightCommaSeparatedLists: options_.tightCommaSeparatedLists || false,
	      tightSelfClosing: options_.tightSelfClosing || false,
	      collapseEmptyAttributes: options_.collapseEmptyAttributes || false,
	      allowDangerousHtml: options_.allowDangerousHtml || false,
	      voids: options_.voids || htmlVoidElements,
	      characterReferences:
	        options_.characterReferences || emptyCharacterReferences,
	      closeSelfClosing: options_.closeSelfClosing || false,
	      closeEmptyElements: options_.closeEmptyElements || false
	    },
	    schema: options_.space === 'svg' ? svg : html$4,
	    quote,
	    alternative
	  };

	  return state.one(
	    Array.isArray(tree) ? {type: 'root', children: tree} : tree,
	    undefined,
	    undefined
	  )
	}

	/**
	 * Serialize a node.
	 *
	 * @this {State}
	 *   Info passed around about the current state.
	 * @param {Nodes} node
	 *   Node to handle.
	 * @param {number | undefined} index
	 *   Index of `node` in `parent.
	 * @param {Parents | undefined} parent
	 *   Parent of `node`.
	 * @returns {string}
	 *   Serialized node.
	 */
	function one(node, index, parent) {
	  return handle(node, index, parent, this)
	}

	/**
	 * Serialize all children of `parent`.
	 *
	 * @this {State}
	 *   Info passed around about the current state.
	 * @param {Parents | undefined} parent
	 *   Parent whose children to serialize.
	 * @returns {string}
	 */
	function all(parent) {
	  /** @type {Array<string>} */
	  const results = [];
	  const children = (parent && parent.children) || emptyChildren;
	  let index = -1;

	  while (++index < children.length) {
	    results[index] = this.one(children[index], index, parent);
	  }

	  return results.join('')
	}

	/**
	 * @typedef {import('hast').Root} Root
	 * @typedef {import('hast-util-to-html').Options} Options
	 * @typedef {import('unified').Compiler<Root, string>} Compiler
	 */


	/**
	 * Plugin to add support for serializing as HTML.
	 *
	 * @param {Options | null | undefined} [options]
	 *   Configuration (optional).
	 * @returns {undefined}
	 *   Nothing.
	 */
	function rehypeStringify(options) {
	  /** @type {import('unified').Processor<undefined, undefined, undefined, Root, string>} */
	  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.
	  const self = this;
	  const settings = {...self.data('settings'), ...options};

	  self.compiler = compiler;

	  /**
	   * @type {Compiler}
	   */
	  function compiler(tree) {
	    return toHtml(tree, settings)
	  }
	}

	// Note: types exposed from `index.d.ts`

	/**
	 * Create a new unified processor that already uses `rehype-parse` and
	 * `rehype-stringify`.
	 */
	const rehype = unified().use(rehypeParse).use(rehypeStringify).freeze();

	var _templateObject;
	function html2Escape(sHtml) {
	  return sHtml
	  // .replace(/```(\w+)?([\s\S]*?)(\s.+)?```/g, (str: string) => {
	  //   return str.replace(
	  //     /[<&"]/g,
	  //     (c: string) => (({ '<': '&lt;', '>': '&gt;', '&': '&amp;', '"': '&quot;' } as Record<string, string>)[c]),
	  //   );
	  // })
	  .replace(/[<&"]/g, c => ({
	    '<': '&lt;',
	    '>': '&gt;',
	    '&': '&amp;',
	    '"': '&quot;'
	  })[c]);
	}
	function Markdown(props) {
	  var {
	    prefixCls
	  } = props;
	  var {
	    markdown = '',
	    highlightEnable,
	    dispatch
	  } = reactExports.useContext(EditorContext);
	  var preRef = /*#__PURE__*/React.createRef();
	  reactExports.useEffect(() => {
	    if (preRef.current && dispatch) {
	      dispatch({
	        textareaPre: preRef.current
	      });
	    }
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, []);
	  if (!markdown) {
	    return /*#__PURE__*/jsxRuntimeExports.jsx("pre", {
	      ref: preRef,
	      className: prefixCls + "-text-pre wmde-markdown-color"
	    });
	  }
	  var mdStr = "<pre class=\"language-markdown " + prefixCls + "-text-pre wmde-markdown-color\"><code class=\"language-markdown\">" + html2Escape(String.raw(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["", ""])), markdown)) + "\n</code></pre>";
	  if (highlightEnable) {
	    try {
	      mdStr = rehype().data('settings', {
	        fragment: true
	      })
	      // https://github.com/uiwjs/react-md-editor/issues/593
	      // @ts-ignore
	      .use(f, {
	        ignoreMissing: true
	      }).processSync(mdStr).toString();
	    } catch (error) {}
	  }
	  return /*#__PURE__*/React.createElement('div', {
	    className: 'wmde-markdown-color',
	    dangerouslySetInnerHTML: {
	      __html: mdStr || ''
	    }
	  });
	}

	/**
	 * The MIT License
	 * Copyright (c) 2018 Dmitriy Kubyshkin
	 * Copied from https://github.com/grassator/insert-text-at-cursor
	 */

	var browserSupportsTextareaTextNodes;

	/**
	 * @param {HTMLElement} input
	 * @return {boolean}
	 */
	function canManipulateViaTextNodes(input) {
	  if (input.nodeName !== 'TEXTAREA') {
	    return false;
	  }
	  if (typeof browserSupportsTextareaTextNodes === 'undefined') {
	    var textarea = document.createElement('textarea');
	    textarea.value = '1';
	    browserSupportsTextareaTextNodes = !!textarea.firstChild;
	  }
	  return browserSupportsTextareaTextNodes;
	}

	/**
	 * @param {HTMLTextAreaElement|HTMLInputElement} input
	 * @param {string} text
	 * @returns {void}
	 */
	function insertTextAtPosition(input, text) {
	  // Most of the used APIs only work with the field selected
	  input.focus();

	  // IE 8-10
	  if (document.selection) {
	    var ieRange = document.selection.createRange();
	    ieRange.text = text;

	    // Move cursor after the inserted text
	    ieRange.collapse(false /* to the end */);
	    ieRange.select();
	    return;
	  }

	  // Webkit + Edge
	  var isSuccess = false;
	  if (text !== '') {
	    isSuccess = document.execCommand && document.execCommand('insertText', false, text);
	  } else {
	    isSuccess = document.execCommand && document.execCommand('delete', false);
	  }
	  if (!isSuccess) {
	    var start = input.selectionStart;
	    var end = input.selectionEnd;
	    // Firefox (non-standard method)
	    if (typeof input.setRangeText === 'function') {
	      input.setRangeText(text);
	    } else {
	      // To make a change we just need a Range, not a Selection
	      var range = document.createRange();
	      var textNode = document.createTextNode(text);
	      if (canManipulateViaTextNodes(input)) {
	        var node = input.firstChild;

	        // If textarea is empty, just insert the text
	        if (!node) {
	          input.appendChild(textNode);
	        } else {
	          // Otherwise we need to find a nodes for start and end
	          var offset = 0;
	          var startNode = null;
	          var endNode = null;
	          while (node && (startNode === null || endNode === null)) {
	            var nodeLength = node.nodeValue.length;

	            // if start of the selection falls into current node
	            if (start >= offset && start <= offset + nodeLength) {
	              range.setStart(startNode = node, start - offset);
	            }

	            // if end of the selection falls into current node
	            if (end >= offset && end <= offset + nodeLength) {
	              range.setEnd(endNode = node, end - offset);
	            }
	            offset += nodeLength;
	            node = node.nextSibling;
	          }

	          // If there is some text selected, remove it as we should replace it
	          if (start !== end) {
	            range.deleteContents();
	          }
	        }
	      }

	      // If the node is a textarea and the range doesn't span outside the element
	      //
	      // Get the commonAncestorContainer of the selected range and test its type
	      // If the node is of type `#text` it means that we're still working with text nodes within our textarea element
	      // otherwise, if it's of type `#document` for example it means our selection spans outside the textarea.
	      if (canManipulateViaTextNodes(input) && range.commonAncestorContainer.nodeName === '#text') {
	        // Finally insert a new node. The browser will automatically split start and end nodes into two if necessary
	        range.insertNode(textNode);
	      } else {
	        // If the node is not a textarea or the range spans outside a textarea the only way is to replace the whole value
	        var value = input.value;
	        input.value = value.slice(0, start) + text + value.slice(end);
	      }
	    }

	    // Correct the cursor position to be at the end of the insertion
	    input.setSelectionRange(start + text.length, start + text.length);

	    // Notify any possible listeners of the change
	    var e = document.createEvent('UIEvent');
	    e.initEvent('input', true, false);
	    input.dispatchEvent(e);
	  }
	}

	function selectWord(_ref) {
	  var {
	    text,
	    selection,
	    prefix,
	    suffix = prefix
	  } = _ref;
	  var result = selection;
	  if (text && text.length && selection.start === selection.end) {
	    result = getSurroundingWord(text, selection.start);
	  }
	  if (result.start >= prefix.length && result.end <= text.length - suffix.length) {
	    var selectedTextContext = text.slice(result.start - prefix.length, result.end + suffix.length);
	    if (selectedTextContext.startsWith(prefix) && selectedTextContext.endsWith(suffix)) {
	      return {
	        start: result.start - prefix.length,
	        end: result.end + suffix.length
	      };
	    }
	  }
	  return result;
	}
	function selectLine(_ref2) {
	  var {
	    text,
	    selection
	  } = _ref2;
	  var start = text.slice(0, selection.start).lastIndexOf('\n') + 1;
	  var end = text.slice(selection.end).indexOf('\n') + selection.end;
	  if (end === selection.end - 1) {
	    end = text.length;
	  }
	  return {
	    start,
	    end
	  };
	}

	/**
	 *  Gets the number of line-breaks that would have to be inserted before the given 'startPosition'
	 *  to make sure there's an empty line between 'startPosition' and the previous text
	 */
	function getBreaksNeededForEmptyLineBefore(text, startPosition) {
	  if (text === void 0) {
	    text = '';
	  }
	  if (startPosition === 0) return 0;

	  // rules:
	  // - If we're in the first line, no breaks are needed
	  // - Otherwise there must be 2 breaks before the previous character. Depending on how many breaks exist already, we
	  //      may need to insert 0, 1 or 2 breaks

	  var neededBreaks = 2;
	  var isInFirstLine = true;
	  for (var i = startPosition - 1; i >= 0 && neededBreaks >= 0; i--) {
	    switch (text.charCodeAt(i)) {
	      case 32:
	        // blank space
	        continue;
	      case 10:
	        // line break
	        neededBreaks--;
	        isInFirstLine = false;
	        break;
	      default:
	        return neededBreaks;
	    }
	  }
	  return isInFirstLine ? 0 : neededBreaks;
	}

	/**
	 *  Gets the number of line-breaks that would have to be inserted after the given 'startPosition'
	 *  to make sure there's an empty line between 'startPosition' and the next text
	 */
	function getBreaksNeededForEmptyLineAfter(text, startPosition) {
	  if (text === void 0) {
	    text = '';
	  }
	  if (startPosition === text.length - 1) return 0;

	  // rules:
	  // - If we're in the first line, no breaks are needed
	  // - Otherwise there must be 2 breaks before the previous character. Depending on how many breaks exist already, we
	  //      may need to insert 0, 1 or 2 breaks

	  var neededBreaks = 2;
	  var isInLastLine = true;
	  for (var i = startPosition; i < text.length && neededBreaks >= 0; i++) {
	    switch (text.charCodeAt(i)) {
	      case 32:
	        continue;
	      case 10:
	        {
	          neededBreaks--;
	          isInLastLine = false;
	          break;
	        }
	      default:
	        return neededBreaks;
	    }
	  }
	  return isInLastLine ? 0 : neededBreaks;
	}
	function getSurroundingWord(text, position) {
	  if (!text) throw Error("Argument 'text' should be truthy");
	  var isWordDelimiter = c => c === ' ' || c.charCodeAt(0) === 10;

	  // leftIndex is initialized to 0 because if selection is 0, it won't even enter the iteration
	  var start = 0;
	  // rightIndex is initialized to text.length because if selection is equal to text.length it won't even enter the interation
	  var end = text.length;

	  // iterate to the left
	  for (var i = position; i - 1 > -1; i--) {
	    if (isWordDelimiter(text[i - 1])) {
	      start = i;
	      break;
	    }
	  }

	  // iterate to the right
	  for (var _i = position; _i < text.length; _i++) {
	    if (isWordDelimiter(text[_i])) {
	      end = _i;
	      break;
	    }
	  }
	  return {
	    start,
	    end
	  };
	}
	function executeCommand(_ref3) {
	  var {
	    api,
	    selectedText,
	    selection,
	    prefix,
	    suffix = prefix
	  } = _ref3;
	  if (selectedText.length >= prefix.length + suffix.length && selectedText.startsWith(prefix) && selectedText.endsWith(suffix)) {
	    api.replaceSelection(selectedText.slice(prefix.length, suffix.length ? -suffix.length : undefined));
	    api.setSelectionRange({
	      start: selection.start - prefix.length,
	      end: selection.end - prefix.length
	    });
	  } else {
	    api.replaceSelection("" + prefix + selectedText + suffix);
	    api.setSelectionRange({
	      start: selection.start + prefix.length,
	      end: selection.end + prefix.length
	    });
	  }
	}
	/**
	 * Inserts insertionString before each line
	 */
	function insertBeforeEachLine(selectedText, insertBefore) {
	  var lines = selectedText.split(/\n/);
	  var insertionLength = 0;
	  var modifiedText = lines.map((item, index) => {
	    if (typeof insertBefore === 'string') {
	      if (item.startsWith(insertBefore)) {
	        insertionLength -= insertBefore.length;
	        return item.slice(insertBefore.length);
	      }
	      insertionLength += insertBefore.length;
	      return insertBefore + item;
	    }
	    if (typeof insertBefore === 'function') {
	      if (item.startsWith(insertBefore(item, index))) {
	        insertionLength -= insertBefore(item, index).length;
	        return item.slice(insertBefore(item, index).length);
	      }
	      var insertionResult = insertBefore(item, index);
	      insertionLength += insertionResult.length;
	      return insertBefore(item, index) + item;
	    }
	    throw Error('insertion is expected to be either a string or a function');
	  }).join('\n');
	  return {
	    modifiedText,
	    insertionLength
	  };
	}

	var bold = {
	  name: 'bold',
	  keyCommand: 'bold',
	  shortcuts: 'ctrlcmd+b',
	  prefix: '**',
	  buttonProps: {
	    'aria-label': 'Add bold text (ctrl + b)',
	    title: 'Add bold text (ctrl + b)'
	  },
	  icon: /*#__PURE__*/jsxRuntimeExports.jsx("svg", {
	    role: "img",
	    width: "12",
	    height: "12",
	    viewBox: "0 0 384 512",
	    children: /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	      fill: "currentColor",
	      d: "M304.793 243.891c33.639-18.537 53.657-54.16 53.657-95.693 0-48.236-26.25-87.626-68.626-104.179C265.138 34.01 240.849 32 209.661 32H24c-8.837 0-16 7.163-16 16v33.049c0 8.837 7.163 16 16 16h33.113v318.53H24c-8.837 0-16 7.163-16 16V464c0 8.837 7.163 16 16 16h195.69c24.203 0 44.834-1.289 66.866-7.584C337.52 457.193 376 410.647 376 350.014c0-52.168-26.573-91.684-71.207-106.123zM142.217 100.809h67.444c16.294 0 27.536 2.019 37.525 6.717 15.828 8.479 24.906 26.502 24.906 49.446 0 35.029-20.32 56.79-53.029 56.79h-76.846V100.809zm112.642 305.475c-10.14 4.056-22.677 4.907-31.409 4.907h-81.233V281.943h84.367c39.645 0 63.057 25.38 63.057 63.057.001 28.425-13.66 52.483-34.782 61.284z"
	    })
	  }),
	  execute: (state, api) => {
	    var newSelectionRange = selectWord({
	      text: state.text,
	      selection: state.selection,
	      prefix: state.command.prefix
	    });
	    var state1 = api.setSelectionRange(newSelectionRange);
	    executeCommand({
	      api,
	      selectedText: state1.selectedText,
	      selection: state.selection,
	      prefix: state.command.prefix
	    });
	  }
	};

	var codeBlock = {
	  name: 'codeBlock',
	  keyCommand: 'codeBlock',
	  shortcuts: 'ctrlcmd+shift+j',
	  prefix: '```',
	  buttonProps: {
	    'aria-label': 'Insert Code Block (ctrl + shift + j)',
	    title: 'Insert Code Block (ctrl + shift +j)'
	  },
	  icon: /*#__PURE__*/jsxRuntimeExports.jsx("svg", {
	    width: "13",
	    height: "13",
	    role: "img",
	    viewBox: "0 0 156 156",
	    children: /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	      fill: "currentColor",
	      d: "M110.85 120.575 43.7 120.483333 43.7083334 110.091667 110.85 110.191667 110.841667 120.583333 110.85 120.575ZM85.1333334 87.1916666 43.625 86.7083332 43.7083334 76.3166666 85.2083334 76.7916666 85.1333334 87.1916666 85.1333334 87.1916666ZM110.841667 53.4166666 43.7 53.3166666 43.7083334 42.925 110.85 43.025 110.841667 53.4166666ZM36 138C27.2916666 138 20.75 136.216667 16.4 132.666667 12.1333334 129.2 10 124.308333 10 118L10 95.3333332C10 91.0666666 9.25 88.1333332 7.7333334 86.5333332 6.3166668 84.8416666 3.7333334 84 0 84L0 72C3.7333334 72 6.3083334 71.2 7.7333334 69.6 9.2416668 67.9083334 10 64.9333334 10 60.6666666L10 38C10 31.775 12.1333334 26.8833334 16.4 23.3333332 20.7583334 19.7749998 27.2916666 18 36 18L40.6666668 18 40.6666668 30 36 30C34.0212222 29.9719277 32.1263151 30.7979128 30.8 32.2666666 29.3605875 33.8216362 28.5938182 35.8823287 28.6666668 38L28.6666668 60.6666666C28.6666668 67.5083332 26.6666668 72.4 22.6666668 75.3333332 20.9317416 76.7274684 18.8640675 77.6464347 16.6666668 78 18.8916668 78.35 20.8916668 79.2416666 22.6666668 80.6666666 26.6666668 83.95 28.6666668 88.8416666 28.6666668 95.3333332L28.6666668 118C28.6666668 120.308333 29.3750002 122.216667 30.8 123.733333 32.2166666 125.241667 33.9583334 126 36 126L40.6666668 126 40.6666668 138 36 138 36 138ZM114.116667 126 118.783333 126C120.833333 126 122.566667 125.241667 123.983333 123.733333 125.422746 122.178364 126.189515 120.117671 126.116667 118L126.116667 95.3333332C126.116667 88.8333332 128.116667 83.9499998 132.116667 80.6666666 133.9 79.2416666 135.9 78.35 138.116667 78 135.919156 77.6468047 133.851391 76.7277979 132.116667 75.3333332 128.116667 72.3999998 126.116667 67.5 126.116667 60.6666666L126.116667 38C126.189515 35.8823287 125.422746 33.8216361 123.983333 32.2666666 122.657018 30.7979128 120.762111 29.9719277 118.783333 30L114.116667 30 114.116667 18 118.783333 18C127.5 18 133.983333 19.775 138.25 23.3333332 142.608333 26.8833332 144.783333 31.7749998 144.783333 38L144.783333 60.6666666C144.783333 64.9333332 145.5 67.9083332 146.916667 69.6 148.433333 71.2 151.05 72 154.783333 72L154.783333 84C151.05 84 148.433333 84.8333334 146.916667 86.5333332 145.5 88.1333332 144.783333 91.0666666 144.783333 95.3333332L144.783333 118C144.783333 124.308333 142.616667 129.2 138.25 132.666667 133.983333 136.216667 127.5 138 118.783333 138L114.116667 138 114.116667 126 114.116667 126Z"
	    })
	  }),
	  execute: (state, api) => {
	    var newSelectionRange = selectWord({
	      text: state.text,
	      selection: state.selection,
	      prefix: '```\n',
	      suffix: '\n```'
	    });
	    var state1 = api.setSelectionRange(newSelectionRange);

	    // Based on context determine if new line is needed or not
	    var prefix = '\n```\n';
	    var suffix = '\n```\n';
	    if (state1.selectedText.length >= prefix.length + suffix.length - 2 && state1.selectedText.startsWith(prefix) && state1.selectedText.endsWith(suffix)) {
	      // Remove code block
	      prefix = '```\n';
	      suffix = '\n```';
	    } else {
	      // Add code block
	      if (state1.selection.start >= 1 && state.text.slice(state1.selection.start - 1, state1.selection.start) === '\n' || state1.selection.start === 0) {
	        prefix = '```\n';
	      }
	      if (state1.selection.end <= state.text.length - 1 && state.text.slice(state1.selection.end, state1.selection.end + 1) === '\n' || state1.selection.end === state.text.length) {
	        suffix = '\n```';
	      }
	    }
	    var newSelectionRange2 = selectWord({
	      text: state.text,
	      selection: state.selection,
	      prefix,
	      suffix
	    });
	    var state2 = api.setSelectionRange(newSelectionRange2);
	    executeCommand({
	      api,
	      selectedText: state2.selectedText,
	      selection: state.selection,
	      prefix,
	      suffix
	    });
	  }
	};
	var code = {
	  name: 'code',
	  keyCommand: 'code',
	  shortcuts: 'ctrlcmd+j',
	  prefix: '`',
	  buttonProps: {
	    'aria-label': 'Insert code (ctrl + j)',
	    title: 'Insert code (ctrl + j)'
	  },
	  icon: /*#__PURE__*/jsxRuntimeExports.jsx("svg", {
	    width: "14",
	    height: "14",
	    role: "img",
	    viewBox: "0 0 640 512",
	    children: /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	      fill: "currentColor",
	      d: "M278.9 511.5l-61-17.7c-6.4-1.8-10-8.5-8.2-14.9L346.2 8.7c1.8-6.4 8.5-10 14.9-8.2l61 17.7c6.4 1.8 10 8.5 8.2 14.9L293.8 503.3c-1.9 6.4-8.5 10.1-14.9 8.2zm-114-112.2l43.5-46.4c4.6-4.9 4.3-12.7-.8-17.2L117 256l90.6-79.7c5.1-4.5 5.5-12.3.8-17.2l-43.5-46.4c-4.5-4.8-12.1-5.1-17-.5L3.8 247.2c-5.1 4.7-5.1 12.8 0 17.5l144.1 135.1c4.9 4.6 12.5 4.4 17-.5zm327.2.6l144.1-135.1c5.1-4.7 5.1-12.8 0-17.5L492.1 112.1c-4.8-4.5-12.4-4.3-17 .5L431.6 159c-4.6 4.9-4.3 12.7.8 17.2L523 256l-90.6 79.7c-5.1 4.5-5.5 12.3-.8 17.2l43.5 46.4c4.5 4.9 12.1 5.1 17 .6z"
	    })
	  }),
	  execute: (state, api) => {
	    if (state.selectedText.indexOf('\n') === -1) {
	      var newSelectionRange = selectWord({
	        text: state.text,
	        selection: state.selection,
	        prefix: state.command.prefix
	      });
	      var state1 = api.setSelectionRange(newSelectionRange);
	      executeCommand({
	        api,
	        selectedText: state1.selectedText,
	        selection: state.selection,
	        prefix: state.command.prefix
	      });
	    } else {
	      codeBlock.execute(state, api);
	    }
	  }
	};

	var comment = {
	  name: 'comment',
	  keyCommand: 'comment',
	  shortcuts: 'ctrlcmd+/',
	  prefix: '<!-- ',
	  suffix: ' -->',
	  buttonProps: {
	    'aria-label': 'Insert comment (ctrl + /)',
	    title: 'Insert comment (ctrl + /)'
	  },
	  icon: /*#__PURE__*/jsxRuntimeExports.jsx("svg", {
	    height: "1em",
	    width: "1em",
	    viewBox: "0 0 25 25",
	    children: /*#__PURE__*/jsxRuntimeExports.jsxs("g", {
	      fill: "none",
	      fillRule: "evenodd",
	      children: [/*#__PURE__*/jsxRuntimeExports.jsx("polygon", {
	        points: ".769 .727 24.981 .727 24.981 24.727 .769 24.727"
	      }), /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	        stroke: "currentColor",
	        strokeLinecap: "round",
	        strokeLinejoin: "round",
	        strokeWidth: "3",
	        d: "M12.625,23.8787879 L8.125,19.6969697 L5.125,19.6969697 C2.63971863,19.6969697 0.625,17.8247059 0.625,15.5151515 L0.625,7.15151515 C0.625,4.84196074 2.63971863,2.96969697 5.125,2.96969697 L20.125,2.96969697 C22.6102814,2.96969697 24.625,4.84196074 24.625,7.15151515 L24.625,15.5151515 C24.625,17.8247059 22.6102814,19.6969697 20.125,19.6969697 L17.125,19.6969697 L12.625,23.8787879"
	      }), /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	        stroke: "currentColor",
	        strokeLinecap: "round",
	        strokeLinejoin: "round",
	        strokeWidth: "3",
	        d: "M10.625,8.54545455 L7.25,11.3333333 L10.625,14.1212121 M15.6875,8.54545455 L19.0625,11.3333333 L15.6875,14.1212121"
	      })]
	    })
	  }),
	  execute: (state, api) => {
	    var newSelectionRange = selectWord({
	      text: state.text,
	      selection: state.selection,
	      prefix: state.command.prefix,
	      suffix: state.command.suffix
	    });
	    var state1 = api.setSelectionRange(newSelectionRange);
	    executeCommand({
	      api,
	      selectedText: state1.selectedText,
	      selection: state.selection,
	      prefix: state.command.prefix,
	      suffix: state.command.suffix
	    });
	  }
	};

	var divider = {
	  keyCommand: 'divider'
	};

	var fullscreen = {
	  name: 'fullscreen',
	  keyCommand: 'fullscreen',
	  shortcuts: 'ctrlcmd+0',
	  value: 'fullscreen',
	  buttonProps: {
	    'aria-label': 'Toggle fullscreen (ctrl + 0)',
	    title: 'Toggle fullscreen (ctrl+ 0)'
	  },
	  icon: /*#__PURE__*/jsxRuntimeExports.jsx("svg", {
	    width: "12",
	    height: "12",
	    viewBox: "0 0 520 520",
	    children: /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	      fill: "currentColor",
	      d: "M118 171.133334L118 342.200271C118 353.766938 126.675 365.333605 141.133333 365.333605L382.634614 365.333605C394.201281 365.333605 405.767948 356.658605 405.767948 342.200271L405.767948 171.133334C405.767948 159.566667 397.092948 148 382.634614 148L141.133333 148C126.674999 148 117.999999 156.675 118 171.133334zM465.353591 413.444444L370 413.444444 370 471.222222 474.0221 471.222222C500.027624 471.222222 520.254143 451 520.254143 425L520.254143 321 462.464089 321 462.464089 413.444444 465.353591 413.444444zM471.0221 43L367 43 367 100.777778 462.353591 100.777778 462.353591 196.111111 520.143647 196.111111 520.143647 89.2222219C517.254144 63.2222219 497.027624 43 471.0221 43zM57.7900547 100.777778L153.143646 100.777778 153.143646 43 46.2320439 43C20.2265191 43 0 63.2222219 0 89.2222219L0 193.222222 57.7900547 193.222222 57.7900547 100.777778zM57.7900547 321L0 321 0 425C0 451 20.2265191 471.222222 46.2320439 471.222223L150.254143 471.222223 150.254143 413.444445 57.7900547 413.444445 57.7900547 321z"
	    })
	  }),
	  execute: (state, api, dispatch, executeCommandState, shortcuts) => {
	    api.textArea.focus();
	    if (shortcuts && dispatch && executeCommandState) {
	      dispatch({
	        fullscreen: !executeCommandState.fullscreen
	      });
	    }
	  }
	};

	function _objectDestructuringEmpty(obj) {
	  if (obj == null) throw new TypeError("Cannot destructure " + obj);
	}

	var group = (arr, options) => {
	  var data = _extends({
	    children: arr,
	    icon: /*#__PURE__*/jsxRuntimeExports.jsx("svg", {
	      width: "12",
	      height: "12",
	      viewBox: "0 0 520 520",
	      children: /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	        fill: "currentColor",
	        d: "M15.7083333,468 C7.03242448,468 0,462.030833 0,454.666667 L0,421.333333 C0,413.969167 7.03242448,408 15.7083333,408 L361.291667,408 C369.967576,408 377,413.969167 377,421.333333 L377,454.666667 C377,462.030833 369.967576,468 361.291667,468 L15.7083333,468 Z M21.6666667,366 C9.69989583,366 0,359.831861 0,352.222222 L0,317.777778 C0,310.168139 9.69989583,304 21.6666667,304 L498.333333,304 C510.300104,304 520,310.168139 520,317.777778 L520,352.222222 C520,359.831861 510.300104,366 498.333333,366 L21.6666667,366 Z M136.835938,64 L136.835937,126 L107.25,126 L107.25,251 L40.75,251 L40.75,126 L-5.68434189e-14,126 L-5.68434189e-14,64 L136.835938,64 Z M212,64 L212,251 L161.648438,251 L161.648438,64 L212,64 Z M378,64 L378,126 L343.25,126 L343.25,251 L281.75,251 L281.75,126 L238,126 L238,64 L378,64 Z M449.047619,189.550781 L520,189.550781 L520,251 L405,251 L405,64 L449.047619,64 L449.047619,189.550781 Z"
	      })
	    }),
	    execute: () => {}
	  }, options, {
	    keyCommand: 'group'
	  });
	  if (Array.isArray(data.children)) {
	    data.children = data.children.map(_ref => {
	      var item = _extends({}, (_objectDestructuringEmpty(_ref), _ref));
	      item.parent = data;
	      return _extends({}, item);
	    });
	  }
	  return data;
	};

	var hr = {
	  name: 'hr',
	  keyCommand: 'hr',
	  shortcuts: 'ctrlcmd+h',
	  prefix: '\n\n---\n',
	  suffix: '',
	  buttonProps: {
	    'aria-label': 'Insert HR (ctrl + h)',
	    title: 'Insert HR (ctrl + h)'
	  },
	  icon: /*#__PURE__*/jsxRuntimeExports.jsx("svg", {
	    width: "12",
	    height: "12",
	    viewBox: "0 0 175 175",
	    children: /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	      fill: "currentColor",
	      d: "M0,129 L175,129 L175,154 L0,154 L0,129 Z M3,9 L28.2158203,9 L28.2158203,47.9824219 L55.7695313,47.9824219 L55.7695313,9 L81.0966797,9 L81.0966797,107.185547 L55.7695313,107.185547 L55.7695313,68.0214844 L28.2158203,68.0214844 L28.2158203,107.185547 L3,107.185547 L3,9 Z M93.1855469,100.603516 L93.1855469,19 L135.211914,19 C143.004922,19 148.960917,19.6679621 153.080078,21.0039063 C157.199239,22.3398504 160.520495,24.8168764 163.043945,28.4350586 C165.567395,32.0532407 166.829102,36.459935 166.829102,41.6552734 C166.829102,46.1826398 165.864267,50.0883625 163.93457,53.3725586 C162.004873,56.6567547 159.351579,59.3193257 155.974609,61.3603516 C153.822255,62.6591862 150.872089,63.7353473 147.124023,64.5888672 C150.129898,65.5908253 152.319329,66.5927684 153.692383,67.5947266 C154.620122,68.2626987 155.965323,69.6913953 157.728027,71.8808594 C159.490731,74.0703234 160.668942,75.7587831 161.262695,76.9462891 L173,100.603516 L144.953125,100.603516 L131.482422,75.6660156 C129.775382,72.4374839 128.253913,70.3408251 126.917969,69.3759766 C125.0996,68.1142515 123.040051,67.4833984 120.739258,67.4833984 L118.512695,67.4833984 L118.512695,100.603516 L93.1855469,100.603516 Z M118.512695,52.0644531 L129.144531,52.0644531 C130.294928,52.0644531 132.521468,51.6933631 135.824219,50.9511719 C137.494149,50.6171858 138.857905,49.7636787 139.915527,48.390625 C140.97315,47.0175713 141.501953,45.4404386 141.501953,43.6591797 C141.501953,41.0244009 140.667001,39.0019602 138.99707,37.5917969 C137.32714,36.1816336 134.191429,35.4765625 129.589844,35.4765625 L117.512695,35.4765625 L118.512695,52.0644531 Z",
	      transform: "translate(0 9)"
	    })
	  }),
	  execute: (state, api) => {
	    var newSelectionRange = selectWord({
	      text: state.text,
	      selection: state.selection,
	      prefix: state.command.prefix,
	      suffix: state.command.suffix
	    });
	    var state1 = api.setSelectionRange(newSelectionRange);
	    if (state1.selectedText.length >= state.command.prefix.length && state1.selectedText.startsWith(state.command.prefix)) {
	      // Remove
	      executeCommand({
	        api,
	        selectedText: state1.selectedText,
	        selection: state.selection,
	        prefix: state.command.prefix,
	        suffix: state.command.suffix
	      });
	    } else {
	      // Add
	      state1 = api.setSelectionRange({
	        start: state.selection.start,
	        end: state.selection.start
	      });
	      executeCommand({
	        api,
	        selectedText: state1.selectedText,
	        selection: state.selection,
	        prefix: state.command.prefix,
	        suffix: state.command.suffix
	      });
	    }
	  }
	};

	var image = {
	  name: 'image',
	  keyCommand: 'image',
	  shortcuts: 'ctrlcmd+k',
	  prefix: '![image](',
	  suffix: ')',
	  buttonProps: {
	    'aria-label': 'Add image (ctrl + k)',
	    title: 'Add image (ctrl + k)'
	  },
	  icon: /*#__PURE__*/jsxRuntimeExports.jsx("svg", {
	    width: "13",
	    height: "13",
	    viewBox: "0 0 20 20",
	    children: /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	      fill: "currentColor",
	      d: "M15 9c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm4-7H1c-.55 0-1 .45-1 1v14c0 .55.45 1 1 1h18c.55 0 1-.45 1-1V3c0-.55-.45-1-1-1zm-1 13l-6-5-2 2-4-5-4 8V4h16v11z"
	    })
	  }),
	  execute: (state, api) => {
	    var newSelectionRange = selectWord({
	      text: state.text,
	      selection: state.selection,
	      prefix: state.command.prefix,
	      suffix: state.command.suffix
	    });
	    var state1 = api.setSelectionRange(newSelectionRange);
	    if (state1.selectedText.includes('http') || state1.selectedText.includes('www')) {
	      executeCommand({
	        api,
	        selectedText: state1.selectedText,
	        selection: state.selection,
	        prefix: state.command.prefix,
	        suffix: state.command.suffix
	      });
	    } else {
	      newSelectionRange = selectWord({
	        text: state.text,
	        selection: state.selection,
	        prefix: '![',
	        suffix: ']()'
	      });
	      state1 = api.setSelectionRange(newSelectionRange);
	      if (state1.selectedText.length === 0) {
	        executeCommand({
	          api,
	          selectedText: state1.selectedText,
	          selection: state.selection,
	          prefix: '![image',
	          suffix: '](url)'
	        });
	      } else {
	        executeCommand({
	          api,
	          selectedText: state1.selectedText,
	          selection: state.selection,
	          prefix: '![',
	          suffix: ']()'
	        });
	      }
	    }
	  }
	};

	var italic = {
	  name: 'italic',
	  keyCommand: 'italic',
	  shortcuts: 'ctrlcmd+i',
	  prefix: '*',
	  buttonProps: {
	    'aria-label': 'Add italic text (ctrl + i)',
	    title: 'Add italic text (ctrl + i)'
	  },
	  icon: /*#__PURE__*/jsxRuntimeExports.jsx("svg", {
	    "data-name": "italic",
	    width: "12",
	    height: "12",
	    role: "img",
	    viewBox: "0 0 320 512",
	    children: /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	      fill: "currentColor",
	      d: "M204.758 416h-33.849l62.092-320h40.725a16 16 0 0 0 15.704-12.937l6.242-32C297.599 41.184 290.034 32 279.968 32H120.235a16 16 0 0 0-15.704 12.937l-6.242 32C96.362 86.816 103.927 96 113.993 96h33.846l-62.09 320H46.278a16 16 0 0 0-15.704 12.935l-6.245 32C22.402 470.815 29.967 480 40.034 480h158.479a16 16 0 0 0 15.704-12.935l6.245-32c1.927-9.88-5.638-19.065-15.704-19.065z"
	    })
	  }),
	  execute: (state, api) => {
	    var newSelectionRange = selectWord({
	      text: state.text,
	      selection: state.selection,
	      prefix: state.command.prefix
	    });
	    var state1 = api.setSelectionRange(newSelectionRange);
	    executeCommand({
	      api,
	      selectedText: state1.selectedText,
	      selection: state.selection,
	      prefix: state.command.prefix
	    });
	  }
	};

	var link = {
	  name: 'link',
	  keyCommand: 'link',
	  shortcuts: 'ctrlcmd+l',
	  prefix: '[',
	  suffix: '](url)',
	  buttonProps: {
	    'aria-label': 'Add a link (ctrl + l)',
	    title: 'Add a link (ctrl + l)'
	  },
	  icon: /*#__PURE__*/jsxRuntimeExports.jsx("svg", {
	    "data-name": "italic",
	    width: "12",
	    height: "12",
	    role: "img",
	    viewBox: "0 0 520 520",
	    children: /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	      fill: "currentColor",
	      d: "M331.751196,182.121107 C392.438214,241.974735 391.605313,337.935283 332.11686,396.871226 C332.005129,396.991316 331.873084,397.121413 331.751196,397.241503 L263.493918,464.491645 C203.291404,523.80587 105.345257,523.797864 45.151885,464.491645 C-15.0506283,405.187427 -15.0506283,308.675467 45.151885,249.371249 L82.8416853,212.237562 C92.836501,202.39022 110.049118,208.9351 110.56511,222.851476 C111.223305,240.5867 114.451306,258.404985 120.407566,275.611815 C122.424812,281.438159 120.983487,287.882964 116.565047,292.23621 L103.272145,305.332975 C74.8052033,333.379887 73.9123737,379.047937 102.098973,407.369054 C130.563883,435.969378 177.350591,436.139505 206.033884,407.879434 L274.291163,340.6393 C302.9257,312.427264 302.805844,266.827265 274.291163,238.733318 C270.531934,235.036561 266.74528,232.16442 263.787465,230.157924 C259.544542,227.2873 256.928256,222.609848 256.731165,217.542518 C256.328935,206.967633 260.13184,196.070508 268.613213,187.714278 L289.998463,166.643567 C295.606326,161.118448 304.403592,160.439942 310.906317,164.911276 C318.353355,170.034591 325.328531,175.793397 331.751196,182.121107 Z M240.704978,55.4828366 L172.447607,122.733236 C172.325719,122.853326 172.193674,122.983423 172.081943,123.103513 C117.703294,179.334654 129.953294,261.569283 185.365841,328.828764 C191.044403,335.721376 198.762988,340.914712 206.209732,346.037661 C212.712465,350.509012 221.510759,349.829503 227.117615,344.305363 L248.502893,323.234572 C256.984277,314.87831 260.787188,303.981143 260.384957,293.406218 C260.187865,288.338869 257.571576,283.661398 253.328648,280.790763 C250.370829,278.78426 246.58417,275.912107 242.824936,272.215337 C214.310216,244.121282 206.209732,204.825874 229.906702,179.334654 L298.164073,112.094263 C326.847404,83.8340838 373.633159,84.0042113 402.099123,112.604645 C430.285761,140.92587 429.393946,186.594095 400.92595,214.641114 L387.63303,227.737929 C383.214584,232.091191 381.773257,238.536021 383.790506,244.362388 C389.746774,261.569283 392.974779,279.387637 393.632975,297.122928 C394.149984,311.039357 411.361608,317.584262 421.356437,307.736882 L459.046288,270.603053 C519.249898,211.29961 519.249898,114.787281 459.047304,55.4828366 C398.853851,-3.82360914 300.907572,-3.83161514 240.704978,55.4828366 Z"
	    })
	  }),
	  execute: (state, api) => {
	    var newSelectionRange = selectWord({
	      text: state.text,
	      selection: state.selection,
	      prefix: state.command.prefix,
	      suffix: state.command.suffix
	    });
	    var state1 = api.setSelectionRange(newSelectionRange);
	    if (state1.selectedText.includes('http') || state1.selectedText.includes('www')) {
	      newSelectionRange = selectWord({
	        text: state.text,
	        selection: state.selection,
	        prefix: '[](',
	        suffix: ')'
	      });
	      state1 = api.setSelectionRange(newSelectionRange);
	      executeCommand({
	        api,
	        selectedText: state1.selectedText,
	        selection: state.selection,
	        prefix: '[](',
	        suffix: ')'
	      });
	    } else {
	      if (state1.selectedText.length === 0) {
	        executeCommand({
	          api,
	          selectedText: state1.selectedText,
	          selection: state.selection,
	          prefix: '[title',
	          suffix: '](url)'
	        });
	      } else {
	        executeCommand({
	          api,
	          selectedText: state1.selectedText,
	          selection: state.selection,
	          prefix: state.command.prefix,
	          suffix: state.command.suffix
	        });
	      }
	    }
	  }
	};

	var makeList = (state, api, insertBefore) => {
	  var newSelectionRange = selectWord({
	    text: state.text,
	    selection: state.selection,
	    prefix: state.command.prefix
	  });
	  var state1 = api.setSelectionRange(newSelectionRange);
	  var breaksBeforeCount = getBreaksNeededForEmptyLineBefore(state1.text, state1.selection.start);
	  var breaksBefore = Array(breaksBeforeCount + 1).join('\n');
	  var breaksAfterCount = getBreaksNeededForEmptyLineAfter(state1.text, state1.selection.end);
	  var breaksAfter = Array(breaksAfterCount + 1).join('\n');
	  var {
	    modifiedText,
	    insertionLength
	  } = insertBeforeEachLine(state1.selectedText, insertBefore);
	  if (insertionLength < 0) {
	    // Remove
	    var selectionStart = state1.selection.start;
	    var selectionEnd = state1.selection.end;
	    if (state1.selection.start > 0 && state.text.slice(state1.selection.start - 1, state1.selection.start) === '\n') {
	      selectionStart -= 1;
	    }
	    if (state1.selection.end < state.text.length - 1 && state.text.slice(state1.selection.end, state1.selection.end + 1) === '\n') {
	      selectionEnd += 1;
	    }
	    api.setSelectionRange({
	      start: selectionStart,
	      end: selectionEnd
	    });
	    api.replaceSelection("" + modifiedText);
	    api.setSelectionRange({
	      start: selectionStart,
	      end: selectionStart + modifiedText.length
	    });
	  } else {
	    // Add
	    api.replaceSelection("" + breaksBefore + modifiedText + breaksAfter);
	    var _selectionStart = state1.selection.start + breaksBeforeCount;
	    var _selectionEnd = _selectionStart + modifiedText.length;
	    api.setSelectionRange({
	      start: _selectionStart,
	      end: _selectionEnd
	    });
	  }
	};
	var unorderedListCommand = {
	  name: 'unordered-list',
	  keyCommand: 'list',
	  shortcuts: 'ctrl+shift+u',
	  prefix: '- ',
	  buttonProps: {
	    'aria-label': 'Add unordered list (ctrl + shift + u)',
	    title: 'Add unordered list (ctrl + shift + u)'
	  },
	  icon: /*#__PURE__*/jsxRuntimeExports.jsx("svg", {
	    "data-name": "unordered-list",
	    width: "12",
	    height: "12",
	    viewBox: "0 0 512 512",
	    children: /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	      fill: "currentColor",
	      d: "M96 96c0 26.51-21.49 48-48 48S0 122.51 0 96s21.49-48 48-48 48 21.49 48 48zM48 208c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zm0 160c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zm96-236h352c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H144c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h352c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H144c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h352c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H144c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"
	    })
	  }),
	  execute: (state, api) => {
	    makeList(state, api, '- ');
	  }
	};
	var orderedListCommand = {
	  name: 'ordered-list',
	  keyCommand: 'list',
	  shortcuts: 'ctrl+shift+o',
	  prefix: '1. ',
	  buttonProps: {
	    'aria-label': 'Add ordered list (ctrl + shift + o)',
	    title: 'Add ordered list (ctrl + shift + o)'
	  },
	  icon: /*#__PURE__*/jsxRuntimeExports.jsx("svg", {
	    "data-name": "ordered-list",
	    width: "12",
	    height: "12",
	    role: "img",
	    viewBox: "0 0 512 512",
	    children: /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	      fill: "currentColor",
	      d: "M3.263 139.527c0-7.477 3.917-11.572 11.573-11.572h15.131V88.078c0-5.163.534-10.503.534-10.503h-.356s-1.779 2.67-2.848 3.738c-4.451 4.273-10.504 4.451-15.666-1.068l-5.518-6.231c-5.342-5.341-4.984-11.216.534-16.379l21.72-19.938C32.815 33.602 36.732 32 42.785 32H54.89c7.656 0 11.749 3.916 11.749 11.572v84.384h15.488c7.655 0 11.572 4.094 11.572 11.572v8.901c0 7.477-3.917 11.572-11.572 11.572H14.836c-7.656 0-11.573-4.095-11.573-11.572v-8.902zM2.211 304.591c0-47.278 50.955-56.383 50.955-69.165 0-7.18-5.954-8.755-9.28-8.755-3.153 0-6.479 1.051-9.455 3.852-5.079 4.903-10.507 7.004-16.111 2.451l-8.579-6.829c-5.779-4.553-7.18-9.805-2.803-15.409C13.592 201.981 26.025 192 47.387 192c19.437 0 44.476 10.506 44.476 39.573 0 38.347-46.753 46.402-48.679 56.909h39.049c7.529 0 11.557 4.027 11.557 11.382v8.755c0 7.354-4.028 11.382-11.557 11.382h-67.94c-7.005 0-12.083-4.028-12.083-11.382v-4.028zM5.654 454.61l5.603-9.28c3.853-6.654 9.105-7.004 15.584-3.152 4.903 2.101 9.63 3.152 14.359 3.152 10.155 0 14.358-3.502 14.358-8.23 0-6.654-5.604-9.106-15.934-9.106h-4.728c-5.954 0-9.28-2.101-12.258-7.88l-1.05-1.926c-2.451-4.728-1.226-9.806 2.801-14.884l5.604-7.004c6.829-8.405 12.257-13.483 12.257-13.483v-.35s-4.203 1.051-12.608 1.051H16.685c-7.53 0-11.383-4.028-11.383-11.382v-8.755c0-7.53 3.853-11.382 11.383-11.382h58.484c7.529 0 11.382 4.027 11.382 11.382v3.327c0 5.778-1.401 9.806-5.079 14.183l-17.509 20.137c19.611 5.078 28.716 20.487 28.716 34.845 0 21.363-14.358 44.126-48.503 44.126-16.636 0-28.192-4.728-35.896-9.455-5.779-4.202-6.304-9.805-2.626-15.934zM144 132h352c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H144c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h352c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H144c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h352c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H144c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"
	    })
	  }),
	  execute: (state, api) => {
	    makeList(state, api, (item, index) => index + 1 + ". ");
	  }
	};
	var checkedListCommand = {
	  name: 'checked-list',
	  keyCommand: 'list',
	  shortcuts: 'ctrl+shift+c',
	  prefix: '- [ ] ',
	  buttonProps: {
	    'aria-label': 'Add checked list (ctrl + shift + c)',
	    title: 'Add checked list (ctrl + shift + c)'
	  },
	  icon: /*#__PURE__*/jsxRuntimeExports.jsx("svg", {
	    "data-name": "checked-list",
	    width: "12",
	    height: "12",
	    role: "img",
	    viewBox: "0 0 512 512",
	    children: /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	      fill: "currentColor",
	      d: "M208 132h288c8.8 0 16-7.2 16-16V76c0-8.8-7.2-16-16-16H208c-8.8 0-16 7.2-16 16v40c0 8.8 7.2 16 16 16zm0 160h288c8.8 0 16-7.2 16-16v-40c0-8.8-7.2-16-16-16H208c-8.8 0-16 7.2-16 16v40c0 8.8 7.2 16 16 16zm0 160h288c8.8 0 16-7.2 16-16v-40c0-8.8-7.2-16-16-16H208c-8.8 0-16 7.2-16 16v40c0 8.8 7.2 16 16 16zM64 368c-26.5 0-48.6 21.5-48.6 48s22.1 48 48.6 48 48-21.5 48-48-21.5-48-48-48zm92.5-299l-72.2 72.2-15.6 15.6c-4.7 4.7-12.9 4.7-17.6 0L3.5 109.4c-4.7-4.7-4.7-12.3 0-17l15.7-15.7c4.7-4.7 12.3-4.7 17 0l22.7 22.1 63.7-63.3c4.7-4.7 12.3-4.7 17 0l17 16.5c4.6 4.7 4.6 12.3-.1 17zm0 159.6l-72.2 72.2-15.7 15.7c-4.7 4.7-12.9 4.7-17.6 0L3.5 269c-4.7-4.7-4.7-12.3 0-17l15.7-15.7c4.7-4.7 12.3-4.7 17 0l22.7 22.1 63.7-63.7c4.7-4.7 12.3-4.7 17 0l17 17c4.6 4.6 4.6 12.2-.1 16.9z"
	    })
	  }),
	  execute: (state, api) => {
	    makeList(state, api, (item, index) => "- [ ] ");
	  }
	};

	var codePreview = {
	  name: 'preview',
	  keyCommand: 'preview',
	  value: 'preview',
	  shortcuts: 'ctrlcmd+9',
	  buttonProps: {
	    'aria-label': 'Preview code (ctrl + 9)',
	    title: 'Preview code (ctrl + 9)'
	  },
	  icon: /*#__PURE__*/jsxRuntimeExports.jsxs("svg", {
	    width: "12",
	    height: "12",
	    viewBox: "0 0 520 520",
	    children: [/*#__PURE__*/jsxRuntimeExports.jsx("polygon", {
	      fill: "currentColor",
	      points: "0 71.293 0 122 38.023 123 38.023 398 0 397 0 449.707 91.023 450.413 91.023 72.293"
	    }), /*#__PURE__*/jsxRuntimeExports.jsx("polygon", {
	      fill: "currentColor",
	      points: "148.023 72.293 520 71.293 520 122 200.023 124 200.023 397 520 396 520 449.707 148.023 450.413"
	    })]
	  }),
	  execute: (state, api, dispatch, executeCommandState, shortcuts) => {
	    api.textArea.focus();
	    if (shortcuts && dispatch && executeCommandState) {
	      dispatch({
	        preview: 'preview'
	      });
	    }
	  }
	};
	var codeEdit = {
	  name: 'edit',
	  keyCommand: 'preview',
	  value: 'edit',
	  shortcuts: 'ctrlcmd+7',
	  buttonProps: {
	    'aria-label': 'Edit code (ctrl + 7)',
	    title: 'Edit code (ctrl + 7)'
	  },
	  icon: /*#__PURE__*/jsxRuntimeExports.jsxs("svg", {
	    width: "12",
	    height: "12",
	    viewBox: "0 0 520 520",
	    children: [/*#__PURE__*/jsxRuntimeExports.jsx("polygon", {
	      fill: "currentColor",
	      points: "0 71.293 0 122 319 122 319 397 0 397 0 449.707 372 449.413 372 71.293"
	    }), /*#__PURE__*/jsxRuntimeExports.jsx("polygon", {
	      fill: "currentColor",
	      points: "429 71.293 520 71.293 520 122 481 123 481 396 520 396 520 449.707 429 449.413"
	    })]
	  }),
	  execute: (state, api, dispatch, executeCommandState, shortcuts) => {
	    api.textArea.focus();
	    if (shortcuts && dispatch && executeCommandState) {
	      dispatch({
	        preview: 'edit'
	      });
	    }
	  }
	};
	var codeLive = {
	  name: 'live',
	  keyCommand: 'preview',
	  value: 'live',
	  shortcuts: 'ctrlcmd+8',
	  buttonProps: {
	    'aria-label': 'Live code (ctrl + 8)',
	    title: 'Live code (ctrl + 8)'
	  },
	  icon: /*#__PURE__*/jsxRuntimeExports.jsxs("svg", {
	    width: "12",
	    height: "12",
	    viewBox: "0 0 520 520",
	    children: [/*#__PURE__*/jsxRuntimeExports.jsx("polygon", {
	      fill: "currentColor",
	      points: "0 71.293 0 122 179 122 179 397 0 397 0 449.707 232 449.413 232 71.293"
	    }), /*#__PURE__*/jsxRuntimeExports.jsx("polygon", {
	      fill: "currentColor",
	      points: "289 71.293 520 71.293 520 122 341 123 341 396 520 396 520 449.707 289 449.413"
	    })]
	  }),
	  execute: (state, api, dispatch, executeCommandState, shortcuts) => {
	    api.textArea.focus();
	    if (shortcuts && dispatch && executeCommandState) {
	      dispatch({
	        preview: 'live'
	      });
	    }
	  }
	};

	var quote = {
	  name: 'quote',
	  keyCommand: 'quote',
	  shortcuts: 'ctrlcmd+q',
	  prefix: '> ',
	  buttonProps: {
	    'aria-label': 'Insert a quote (ctrl + q)',
	    title: 'Insert a quote (ctrl + q)'
	  },
	  icon: /*#__PURE__*/jsxRuntimeExports.jsx("svg", {
	    width: "12",
	    height: "12",
	    viewBox: "0 0 520 520",
	    children: /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	      fill: "currentColor",
	      d: "M520,95.75 L520,225.75 C520,364.908906 457.127578,437.050625 325.040469,472.443125 C309.577578,476.586875 294.396016,464.889922 294.396016,448.881641 L294.396016,414.457031 C294.396016,404.242891 300.721328,395.025078 310.328125,391.554687 C377.356328,367.342187 414.375,349.711094 414.375,274.5 L341.25,274.5 C314.325781,274.5 292.5,252.674219 292.5,225.75 L292.5,95.75 C292.5,68.8257812 314.325781,47 341.25,47 L471.25,47 C498.174219,47 520,68.8257812 520,95.75 Z M178.75,47 L48.75,47 C21.8257813,47 0,68.8257812 0,95.75 L0,225.75 C0,252.674219 21.8257813,274.5 48.75,274.5 L121.875,274.5 C121.875,349.711094 84.8563281,367.342187 17.828125,391.554687 C8.22132813,395.025078 1.89601563,404.242891 1.89601563,414.457031 L1.89601563,448.881641 C1.89601563,464.889922 17.0775781,476.586875 32.5404687,472.443125 C164.627578,437.050625 227.5,364.908906 227.5,225.75 L227.5,95.75 C227.5,68.8257812 205.674219,47 178.75,47 Z"
	    })
	  }),
	  execute: (state, api) => {
	    var newSelectionRange = selectWord({
	      text: state.text,
	      selection: state.selection,
	      prefix: state.command.prefix
	    });
	    var state1 = api.setSelectionRange(newSelectionRange);
	    var breaksBeforeCount = getBreaksNeededForEmptyLineBefore(state1.text, state1.selection.start);
	    var breaksBefore = Array(breaksBeforeCount + 1).join('\n');
	    var breaksAfterCount = getBreaksNeededForEmptyLineAfter(state1.text, state1.selection.end);
	    var breaksAfter = Array(breaksAfterCount + 1).join('\n');
	    var modifiedText = insertBeforeEachLine(state1.selectedText, state.command.prefix);
	    api.replaceSelection("" + breaksBefore + modifiedText.modifiedText + breaksAfter);
	    var selectionStart = state1.selection.start + breaksBeforeCount;
	    var selectionEnd = selectionStart + modifiedText.modifiedText.length;
	    api.setSelectionRange({
	      start: selectionStart,
	      end: selectionEnd
	    });
	  }
	};

	var strikethrough = {
	  name: 'strikethrough',
	  keyCommand: 'strikethrough',
	  shortcuts: 'ctrl+shift+x',
	  buttonProps: {
	    'aria-label': 'Add strikethrough text (ctrl + shift + x)',
	    title: 'Add strikethrough text (ctrl + shift + x)'
	  },
	  prefix: '~~',
	  icon: /*#__PURE__*/jsxRuntimeExports.jsx("svg", {
	    "data-name": "strikethrough",
	    width: "12",
	    height: "12",
	    role: "img",
	    viewBox: "0 0 512 512",
	    children: /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	      fill: "currentColor",
	      d: "M496 288H16c-8.837 0-16-7.163-16-16v-32c0-8.837 7.163-16 16-16h480c8.837 0 16 7.163 16 16v32c0 8.837-7.163 16-16 16zm-214.666 16c27.258 12.937 46.524 28.683 46.524 56.243 0 33.108-28.977 53.676-75.621 53.676-32.325 0-76.874-12.08-76.874-44.271V368c0-8.837-7.164-16-16-16H113.75c-8.836 0-16 7.163-16 16v19.204c0 66.845 77.717 101.82 154.487 101.82 88.578 0 162.013-45.438 162.013-134.424 0-19.815-3.618-36.417-10.143-50.6H281.334zm-30.952-96c-32.422-13.505-56.836-28.946-56.836-59.683 0-33.92 30.901-47.406 64.962-47.406 42.647 0 64.962 16.593 64.962 32.985V136c0 8.837 7.164 16 16 16h45.613c8.836 0 16-7.163 16-16v-30.318c0-52.438-71.725-79.875-142.575-79.875-85.203 0-150.726 40.972-150.726 125.646 0 22.71 4.665 41.176 12.777 56.547h129.823z"
	    })
	  }),
	  execute: (state, api) => {
	    var newSelectionRange = selectWord({
	      text: state.text,
	      selection: state.selection,
	      prefix: state.command.prefix
	    });
	    var state1 = api.setSelectionRange(newSelectionRange);
	    executeCommand({
	      api,
	      selectedText: state1.selectedText,
	      selection: state.selection,
	      prefix: state.command.prefix
	    });
	  }
	};

	var title1 = {
	  name: 'title1',
	  keyCommand: 'title1',
	  shortcuts: 'ctrlcmd+1',
	  prefix: '# ',
	  suffix: '',
	  buttonProps: {
	    'aria-label': 'Insert title1 (ctrl + 1)',
	    title: 'Insert title1 (ctrl + 1)'
	  },
	  icon: /*#__PURE__*/jsxRuntimeExports.jsx("div", {
	    style: {
	      fontSize: 18,
	      textAlign: 'left'
	    },
	    children: "Title 1"
	  }),
	  execute: (state, api) => {
	    titleExecute({
	      state,
	      api,
	      prefix: state.command.prefix,
	      suffix: state.command.suffix
	    });
	  }
	};

	function titleExecute(_ref) {
	  var {
	    state,
	    api,
	    prefix,
	    suffix = prefix
	  } = _ref;
	  var newSelectionRange = selectLine({
	    text: state.text,
	    selection: state.selection
	  });
	  var state1 = api.setSelectionRange(newSelectionRange);
	  executeCommand({
	    api,
	    selectedText: state1.selectedText,
	    selection: state.selection,
	    prefix,
	    suffix
	  });
	}
	_extends({}, title1, {
	  icon: /*#__PURE__*/jsxRuntimeExports.jsx("svg", {
	    width: "12",
	    height: "12",
	    viewBox: "0 0 520 520",
	    children: /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	      fill: "currentColor",
	      d: "M15.7083333,468 C7.03242448,468 0,462.030833 0,454.666667 L0,421.333333 C0,413.969167 7.03242448,408 15.7083333,408 L361.291667,408 C369.967576,408 377,413.969167 377,421.333333 L377,454.666667 C377,462.030833 369.967576,468 361.291667,468 L15.7083333,468 Z M21.6666667,366 C9.69989583,366 0,359.831861 0,352.222222 L0,317.777778 C0,310.168139 9.69989583,304 21.6666667,304 L498.333333,304 C510.300104,304 520,310.168139 520,317.777778 L520,352.222222 C520,359.831861 510.300104,366 498.333333,366 L21.6666667,366 Z M136.835938,64 L136.835937,126 L107.25,126 L107.25,251 L40.75,251 L40.75,126 L-5.68434189e-14,126 L-5.68434189e-14,64 L136.835938,64 Z M212,64 L212,251 L161.648438,251 L161.648438,64 L212,64 Z M378,64 L378,126 L343.25,126 L343.25,251 L281.75,251 L281.75,126 L238,126 L238,64 L378,64 Z M449.047619,189.550781 L520,189.550781 L520,251 L405,251 L405,64 L449.047619,64 L449.047619,189.550781 Z"
	    })
	  })
	});

	var title2 = {
	  name: 'title2',
	  keyCommand: 'title2',
	  shortcuts: 'ctrlcmd+2',
	  prefix: '## ',
	  suffix: '',
	  buttonProps: {
	    'aria-label': 'Insert title2 (ctrl + 2)',
	    title: 'Insert title2 (ctrl + 2)'
	  },
	  icon: /*#__PURE__*/jsxRuntimeExports.jsx("div", {
	    style: {
	      fontSize: 16,
	      textAlign: 'left'
	    },
	    children: "Title 2"
	  }),
	  execute: (state, api) => {
	    titleExecute({
	      state,
	      api,
	      prefix: state.command.prefix,
	      suffix: state.command.suffix
	    });
	  }
	};

	var title3 = {
	  name: 'title3',
	  keyCommand: 'title3',
	  shortcuts: 'ctrlcmd+3',
	  prefix: '### ',
	  suffix: '',
	  buttonProps: {
	    'aria-label': 'Insert title3 (ctrl + 3)',
	    title: 'Insert title3 (ctrl + 3)'
	  },
	  icon: /*#__PURE__*/jsxRuntimeExports.jsx("div", {
	    style: {
	      fontSize: 15,
	      textAlign: 'left'
	    },
	    children: "Title 3"
	  }),
	  execute: (state, api) => {
	    titleExecute({
	      state,
	      api,
	      prefix: state.command.prefix,
	      suffix: state.command.suffix
	    });
	  }
	};

	var title4 = {
	  name: 'title4',
	  keyCommand: 'title4',
	  shortcuts: 'ctrlcmd+4',
	  prefix: '#### ',
	  suffix: '',
	  buttonProps: {
	    'aria-label': 'Insert title4 (ctrl + 4)',
	    title: 'Insert title4 (ctrl + 4)'
	  },
	  icon: /*#__PURE__*/jsxRuntimeExports.jsx("div", {
	    style: {
	      fontSize: 14,
	      textAlign: 'left'
	    },
	    children: "Title 4"
	  }),
	  execute: (state, api) => {
	    titleExecute({
	      state,
	      api,
	      prefix: state.command.prefix,
	      suffix: state.command.suffix
	    });
	  }
	};

	var title5 = {
	  name: 'title5',
	  keyCommand: 'title5',
	  shortcuts: 'ctrlcmd+5',
	  prefix: '##### ',
	  suffix: '',
	  buttonProps: {
	    'aria-label': 'Insert title5 (ctrl + 5)',
	    title: 'Insert title5 (ctrl + 5)'
	  },
	  icon: /*#__PURE__*/jsxRuntimeExports.jsx("div", {
	    style: {
	      fontSize: 12,
	      textAlign: 'left'
	    },
	    children: "Title 5"
	  }),
	  execute: (state, api) => {
	    titleExecute({
	      state,
	      api,
	      prefix: state.command.prefix,
	      suffix: state.command.suffix
	    });
	  }
	};

	var title6 = {
	  name: 'title6',
	  keyCommand: 'title6',
	  shortcuts: 'ctrlcmd+6',
	  prefix: '###### ',
	  suffix: '',
	  buttonProps: {
	    'aria-label': 'Insert title6 (ctrl + 6)',
	    title: 'Insert title6 (ctrl + 6)'
	  },
	  icon: /*#__PURE__*/jsxRuntimeExports.jsx("div", {
	    style: {
	      fontSize: 12,
	      textAlign: 'left'
	    },
	    children: "Title 6"
	  }),
	  execute: (state, api) => {
	    titleExecute({
	      state,
	      api,
	      prefix: state.command.prefix,
	      suffix: state.command.suffix
	    });
	  }
	};

	var table = {
	  name: 'table',
	  keyCommand: 'table',
	  prefix: '\n| Header | Header |\n|--------|--------|\n| Cell | Cell |\n| Cell | Cell |\n| Cell | Cell |\n\n',
	  suffix: '',
	  buttonProps: {
	    'aria-label': 'Add table',
	    title: 'Add table'
	  },
	  icon: /*#__PURE__*/jsxRuntimeExports.jsx("svg", {
	    role: "img",
	    width: "12",
	    height: "12",
	    viewBox: "0 0 512 512",
	    children: /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	      fill: "currentColor",
	      d: "M64 256V160H224v96H64zm0 64H224v96H64V320zm224 96V320H448v96H288zM448 256H288V160H448v96zM64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64z"
	      //Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com
	    })
	  }),
	  execute: (state, api) => {
	    var newSelectionRange = selectWord({
	      text: state.text,
	      selection: state.selection,
	      prefix: state.command.prefix,
	      suffix: state.command.suffix
	    });
	    var state1 = api.setSelectionRange(newSelectionRange);
	    if (state1.selectedText.length >= state.command.prefix.length + state.command.suffix.length && state1.selectedText.startsWith(state.command.prefix)) {
	      // Remove
	      executeCommand({
	        api,
	        selectedText: state1.selectedText,
	        selection: state.selection,
	        prefix: state.command.prefix,
	        suffix: state.command.suffix
	      });
	    } else {
	      // Add
	      state1 = api.setSelectionRange({
	        start: state.selection.start,
	        end: state.selection.start
	      });
	      executeCommand({
	        api,
	        selectedText: state1.selectedText,
	        selection: state.selection,
	        prefix: state.command.prefix,
	        suffix: state.command.suffix
	      });
	    }
	  }
	};

	var help = {
	  name: 'help',
	  keyCommand: 'help',
	  buttonProps: {
	    'aria-label': 'Open help',
	    title: 'Open help'
	  },
	  icon: /*#__PURE__*/jsxRuntimeExports.jsx("svg", {
	    viewBox: "0 0 16 16",
	    width: "12px",
	    height: "12px",
	    children: /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	      d: "M8 0C3.6 0 0 3.6 0 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8Zm.9 13H7v-1.8h1.9V13Zm-.1-3.6v.5H7.1v-.6c.2-2.1 2-1.9 1.9-3.2.1-.7-.3-1.1-1-1.1-.8 0-1.2.7-1.2 1.6H5c0-1.7 1.2-3 2.9-3 2.3 0 3 1.4 3 2.3.1 2.3-1.9 2-2.1 3.5Z",
	      fill: "currentColor"
	    })
	  }),
	  execute: () => {
	    window.open('https://www.markdownguide.org/basic-syntax/', '_blank', 'noreferrer');
	  }
	};

	var getCommands = () => [bold, italic, strikethrough, hr, group([title1, title2, title3, title4, title5, title6], {
	  name: 'title',
	  groupName: 'title',
	  buttonProps: {
	    'aria-label': 'Insert title',
	    title: 'Insert title'
	  }
	}), divider, link, quote, code, codeBlock, comment, image, table, divider, unorderedListCommand, orderedListCommand, checkedListCommand, divider, help];
	var getExtraCommands = () => [codeEdit, codeLive, codePreview, divider, fullscreen];
	function getStateFromTextArea(textArea) {
	  var _textArea$value;
	  return {
	    selection: {
	      start: textArea.selectionStart,
	      end: textArea.selectionEnd
	    },
	    text: textArea.value,
	    selectedText: (_textArea$value = textArea.value) == null ? void 0 : _textArea$value.slice(textArea.selectionStart, textArea.selectionEnd)
	  };
	}
	class TextAreaTextApi {
	  constructor(textArea) {
	    this.textArea = void 0;
	    this.textArea = textArea;
	  }

	  /**
	   * Replaces the current selection with the new text. This will make the new selectedText to be empty, the
	   * selection start and selection end will be the same and will both point to the end
	   * @param text Text that should replace the current selection
	   */
	  replaceSelection(text) {
	    insertTextAtPosition(this.textArea, text);
	    return getStateFromTextArea(this.textArea);
	  }

	  /**
	   * Selects the specified text range
	   * @param selection
	   */
	  setSelectionRange(selection) {
	    this.textArea.focus();
	    this.textArea.selectionStart = selection.start;
	    this.textArea.selectionEnd = selection.end;
	    return getStateFromTextArea(this.textArea);
	  }
	}
	class TextAreaCommandOrchestrator {
	  constructor(textArea) {
	    this.textArea = void 0;
	    this.textApi = void 0;
	    this.textArea = textArea;
	    this.textApi = new TextAreaTextApi(textArea);
	  }
	  getState() {
	    if (!this.textArea) return false;
	    return getStateFromTextArea(this.textArea);
	  }
	  executeCommand(command, dispatch, state, shortcuts) {
	    command.execute && command.execute(_extends({
	      command
	    }, getStateFromTextArea(this.textArea)), this.textApi, dispatch, state, shortcuts);
	  }
	}

	/**
	 * - `13` - `Enter`
	 * - `9` - `Tab`
	 */
	function stopPropagation(e) {
	  e.stopPropagation();
	  e.preventDefault();
	}
	function handleLineMove(e, direction) {
	  stopPropagation(e);
	  var target = e.target;
	  var textArea = new TextAreaTextApi(target);
	  var selection = {
	    start: target.selectionStart,
	    end: target.selectionEnd
	  };
	  selection = selectLine({
	    text: target.value,
	    selection
	  });
	  if (direction < 0 && selection.start <= 0 || direction > 0 && selection.end >= target.value.length) {
	    return;
	  }
	  var blockText = target.value.slice(selection.start, selection.end);
	  if (direction < 0) {
	    var prevLineSelection = selectLine({
	      text: target.value,
	      selection: {
	        start: selection.start - 1,
	        end: selection.start - 1
	      }
	    });
	    var prevLineText = target.value.slice(prevLineSelection.start, prevLineSelection.end);
	    textArea.setSelectionRange({
	      start: prevLineSelection.start,
	      end: selection.end
	    });
	    insertTextAtPosition(target, blockText + "\n" + prevLineText);
	    textArea.setSelectionRange({
	      start: prevLineSelection.start,
	      end: prevLineSelection.start + blockText.length
	    });
	  } else {
	    var nextLineSelection = selectLine({
	      text: target.value,
	      selection: {
	        start: selection.end + 1,
	        end: selection.end + 1
	      }
	    });
	    var nextLineText = target.value.slice(nextLineSelection.start, nextLineSelection.end);
	    textArea.setSelectionRange({
	      start: selection.start,
	      end: nextLineSelection.end
	    });
	    insertTextAtPosition(target, nextLineText + "\n" + blockText);
	    textArea.setSelectionRange({
	      start: nextLineSelection.end - blockText.length,
	      end: nextLineSelection.end
	    });
	  }
	}
	function handleKeyDown(e, tabSize, defaultTabEnable) {
	  if (tabSize === void 0) {
	    tabSize = 2;
	  }
	  if (defaultTabEnable === void 0) {
	    defaultTabEnable = false;
	  }
	  var target = e.target;
	  var starVal = target.value.substr(0, target.selectionStart);
	  var valArr = starVal.split('\n');
	  var currentLineStr = valArr[valArr.length - 1];
	  var textArea = new TextAreaTextApi(target);

	  /**
	   * `9` - `Tab`
	   */
	  if (!defaultTabEnable && e.code && e.code.toLowerCase() === 'tab') {
	    stopPropagation(e);
	    var space = new Array(tabSize + 1).join('  ');
	    if (target.selectionStart !== target.selectionEnd) {
	      var _star = target.value.substring(0, target.selectionStart).split('\n');
	      var _end = target.value.substring(0, target.selectionEnd).split('\n');
	      var modifiedTextLine = [];
	      _end.forEach((item, idx) => {
	        if (item !== _star[idx]) {
	          modifiedTextLine.push(item);
	        }
	      });
	      var modifiedText = modifiedTextLine.join('\n');
	      var oldSelectText = target.value.substring(target.selectionStart, target.selectionEnd);
	      var newStarNum = target.value.substring(0, target.selectionStart).length;
	      textArea.setSelectionRange({
	        start: target.value.indexOf(modifiedText),
	        end: target.selectionEnd
	      });
	      var modifiedTextObj = insertBeforeEachLine(modifiedText, e.shiftKey ? '' : space);
	      var text = modifiedTextObj.modifiedText;
	      if (e.shiftKey) {
	        text = text.split('\n').map(item => item.replace(new RegExp("^" + space), '')).join('\n');
	      }
	      textArea.replaceSelection(text);
	      var startTabSize = e.shiftKey ? -tabSize : tabSize;
	      var endTabSize = e.shiftKey ? -modifiedTextLine.length * tabSize : modifiedTextLine.length * tabSize;
	      textArea.setSelectionRange({
	        start: newStarNum + startTabSize,
	        end: newStarNum + oldSelectText.length + endTabSize
	      });
	    } else {
	      return insertTextAtPosition(target, space);
	    }
	  } else if (e.keyCode === 13 && e.code.toLowerCase() === 'enter' && (/^(-|\*)\s/.test(currentLineStr) || /^\d+.\s/.test(currentLineStr)) && !e.shiftKey) {
	    /**
	     * `13` - `Enter`
	     */
	    stopPropagation(e);
	    var startStr = '\n- ';
	    if (currentLineStr.startsWith('*')) {
	      startStr = '\n* ';
	    }
	    if (currentLineStr.startsWith('- [ ]') || currentLineStr.startsWith('- [X]') || currentLineStr.startsWith('- [x]')) {
	      startStr = '\n- [ ] ';
	    }
	    if (/^\d+.\s/.test(currentLineStr)) {
	      startStr = "\n" + (parseInt(currentLineStr) + 1) + ". ";
	    }
	    return insertTextAtPosition(target, startStr);
	  } else if (e.code && e.code.toLowerCase() === 'keyd' && e.ctrlKey) {
	    // Duplicate lines
	    stopPropagation(e);
	    var selection = {
	      start: target.selectionStart,
	      end: target.selectionEnd
	    };
	    var savedSelection = selection;
	    selection = selectLine({
	      text: target.value,
	      selection
	    });
	    var textToDuplicate = target.value.slice(selection.start, selection.end);
	    textArea.setSelectionRange({
	      start: selection.end,
	      end: selection.end
	    });
	    insertTextAtPosition(target, "\n" + textToDuplicate);
	    textArea.setSelectionRange({
	      start: savedSelection.start,
	      end: savedSelection.end
	    });
	  } else if (e.code && e.code.toLowerCase() === 'arrowup' && e.altKey) {
	    handleLineMove(e, -1);
	  } else if (e.code && e.code.toLowerCase() === 'arrowdown' && e.altKey) {
	    handleLineMove(e, 1);
	  }
	}

	var css_248z$4 = ".w-md-editor-area {\n  overflow: auto;\n  border-radius: 5px;\n}\n.w-md-editor-text {\n  min-height: 100%;\n  position: relative;\n  text-align: left;\n  white-space: pre-wrap;\n  word-break: keep-all;\n  overflow-wrap: break-word;\n  box-sizing: border-box;\n  padding: 10px;\n  margin: 0;\n  font-size: 14px !important;\n  line-height: 18px !important;\n  font-variant-ligatures: common-ligatures;\n}\n.w-md-editor-text-pre,\n.w-md-editor-text-input,\n.w-md-editor-text > .w-md-editor-text-pre {\n  margin: 0;\n  border: 0;\n  background: none;\n  box-sizing: inherit;\n  display: inherit;\n  font-family: inherit;\n  font-family: var(--md-editor-font-family) !important;\n  font-size: inherit;\n  font-style: inherit;\n  font-variant-ligatures: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  line-height: inherit;\n  tab-size: inherit;\n  text-indent: inherit;\n  text-rendering: inherit;\n  text-transform: inherit;\n  white-space: inherit;\n  overflow-wrap: inherit;\n  word-break: inherit;\n  word-break: normal;\n  padding: 0;\n}\n.w-md-editor-text-pre {\n  position: relative;\n  margin: 0px !important;\n  pointer-events: none;\n  background-color: transparent !important;\n}\n.w-md-editor-text-pre > code {\n  padding: 0 !important;\n  font-family: var(--md-editor-font-family) !important;\n  font-size: 14px !important;\n  line-height: 18px !important;\n}\n.w-md-editor-text-input {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  height: 100%;\n  width: 100%;\n  resize: none;\n  color: inherit;\n  overflow: hidden;\n  outline: 0;\n  padding: inherit;\n  -webkit-font-smoothing: antialiased;\n  -webkit-text-fill-color: transparent;\n}\n.w-md-editor-text-input:empty {\n  -webkit-text-fill-color: inherit !important;\n}\n.w-md-editor-text-pre,\n.w-md-editor-text-input {\n  word-wrap: pre;\n  word-break: break-word;\n  white-space: pre-wrap;\n}\n/**\n * Hack to apply on some CSS on IE10 and IE11\n */\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  /**\n    * IE doesn't support '-webkit-text-fill-color'\n    * So we use 'color: transparent' to make the text transparent on IE\n    * Unlike other browsers, it doesn't affect caret color in IE\n    */\n  .w-md-editor-text-input {\n    color: transparent !important;\n  }\n  .w-md-editor-text-input::selection {\n    background-color: #accef7 !important;\n    color: transparent !important;\n  }\n}\n.w-md-editor-text-pre .punctuation {\n  color: var(--color-prettylights-syntax-comment, #8b949e) !important;\n}\n.w-md-editor-text-pre .token.url,\n.w-md-editor-text-pre .token.content {\n  color: var(--color-prettylights-syntax-constant, #0550ae) !important;\n}\n.w-md-editor-text-pre .token.title.important {\n  color: var(--color-prettylights-syntax-markup-bold, #24292f);\n}\n.w-md-editor-text-pre .token.code-block .function {\n  color: var(--color-prettylights-syntax-entity, #8250df);\n}\n.w-md-editor-text-pre .token.bold {\n  font-weight: unset !important;\n}\n.w-md-editor-text-pre .token.title {\n  line-height: unset !important;\n  font-size: unset !important;\n  font-weight: unset !important;\n}\n.w-md-editor-text-pre .token.code.keyword {\n  color: var(--color-prettylights-syntax-constant, #0550ae) !important;\n}\n.w-md-editor-text-pre .token.strike,\n.w-md-editor-text-pre .token.strike .content {\n  color: var(--color-prettylights-syntax-markup-deleted-text, #82071e) !important;\n}\n";
	styleInject(css_248z$4);

	var _excluded$2 = ["prefixCls", "onChange"],
	  _excluded2 = ["markdown", "commands", "fullscreen", "preview", "highlightEnable", "extraCommands", "tabSize", "defaultTabEnable", "dispatch"];
	function Textarea(props) {
	  var {
	      prefixCls,
	      onChange: _onChange
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$2);
	  var _useContext = reactExports.useContext(EditorContext),
	    {
	      markdown,
	      commands,
	      fullscreen,
	      preview,
	      highlightEnable,
	      extraCommands,
	      tabSize,
	      defaultTabEnable,
	      dispatch
	    } = _useContext;
	    _objectWithoutPropertiesLoose(_useContext, _excluded2);
	  var textRef = React.useRef(null);
	  var executeRef = React.useRef();
	  var statesRef = React.useRef({
	    fullscreen,
	    preview
	  });
	  reactExports.useEffect(() => {
	    statesRef.current = {
	      fullscreen,
	      preview,
	      highlightEnable
	    };
	  }, [fullscreen, preview, highlightEnable]);
	  reactExports.useEffect(() => {
	    if (textRef.current && dispatch) {
	      var commandOrchestrator = new TextAreaCommandOrchestrator(textRef.current);
	      executeRef.current = commandOrchestrator;
	      dispatch({
	        textarea: textRef.current,
	        commandOrchestrator
	      });
	    }
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, []);
	  var onKeyDown = e => {
	    handleKeyDown(e, tabSize, defaultTabEnable);
	    shortcutsHandle(e, [...(commands || []), ...(extraCommands || [])], executeRef.current, dispatch, statesRef.current);
	  };
	  reactExports.useEffect(() => {
	    if (textRef.current) {
	      textRef.current.addEventListener('keydown', onKeyDown);
	    }
	    return () => {
	      if (textRef.current) {
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	        textRef.current.removeEventListener('keydown', onKeyDown);
	      }
	    };
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, []);
	  return /*#__PURE__*/jsxRuntimeExports.jsx("textarea", _extends({
	    autoComplete: "off",
	    autoCorrect: "off",
	    autoCapitalize: "off",
	    spellCheck: false
	  }, other, {
	    ref: textRef,
	    className: prefixCls + "-text-input " + (other.className ? other.className : ''),
	    value: markdown,
	    onChange: e => {
	      dispatch && dispatch({
	        markdown: e.target.value
	      });
	      _onChange && _onChange(e);
	    }
	  }));
	}

	var _excluded$1 = ["prefixCls", "className", "onScroll", "renderTextarea"];
	function TextArea(props) {
	  var _ref = props || {},
	    {
	      prefixCls,
	      className,
	      onScroll,
	      renderTextarea
	    } = _ref,
	    otherProps = _objectWithoutPropertiesLoose(_ref, _excluded$1);
	  var {
	    markdown,
	    scrollTop,
	    commands,
	    minHeight,
	    highlightEnable,
	    extraCommands,
	    dispatch
	  } = reactExports.useContext(EditorContext);
	  var textRef = React.useRef(null);
	  var executeRef = React.useRef();
	  var warp = /*#__PURE__*/React.createRef();
	  reactExports.useEffect(() => {
	    var state = {};
	    if (warp.current) {
	      state.textareaWarp = warp.current || undefined;
	      warp.current.scrollTop = scrollTop || 0;
	    }
	    if (dispatch) {
	      dispatch(_extends({}, state));
	    }
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, []);
	  reactExports.useEffect(() => {
	    if (textRef.current && dispatch) {
	      var _commandOrchestrator = new TextAreaCommandOrchestrator(textRef.current);
	      executeRef.current = _commandOrchestrator;
	      dispatch({
	        textarea: textRef.current,
	        commandOrchestrator: _commandOrchestrator
	      });
	    }
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, []);
	  var textStyle = highlightEnable ? {} : {
	    WebkitTextFillColor: 'initial',
	    overflow: 'auto'
	  };
	  return /*#__PURE__*/jsxRuntimeExports.jsx("div", {
	    ref: warp,
	    className: prefixCls + "-area " + (className || ''),
	    onScroll: onScroll,
	    children: /*#__PURE__*/jsxRuntimeExports.jsx("div", {
	      className: prefixCls + "-text",
	      style: {
	        minHeight
	      },
	      children: renderTextarea ? ( /*#__PURE__*/React.cloneElement(renderTextarea(_extends({}, otherProps, {
	        value: markdown,
	        autoComplete: 'off',
	        autoCorrect: 'off',
	        spellCheck: 'false',
	        autoCapitalize: 'off',
	        className: prefixCls + "-text-input",
	        style: {
	          WebkitTextFillColor: 'inherit',
	          overflow: 'auto'
	        }
	      }), {
	        dispatch,
	        onChange: otherProps.onChange,
	        shortcuts: shortcutsHandle,
	        useContext: {
	          commands,
	          extraCommands,
	          commandOrchestrator: executeRef.current
	        }
	      }), {
	        ref: textRef
	      })) : /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	        children: [highlightEnable && /*#__PURE__*/jsxRuntimeExports.jsx(Markdown, {
	          prefixCls: prefixCls
	        }), /*#__PURE__*/jsxRuntimeExports.jsx(Textarea, _extends({
	          prefixCls: prefixCls
	        }, otherProps, {
	          style: textStyle
	        }))]
	      })
	    })
	  });
	}

	var css_248z$3 = ".w-md-editor-toolbar-child {\n  position: absolute;\n  border-radius: 3px;\n  box-shadow: 0 0 0 1px var(--md-editor-box-shadow-color), 0 0 0 var(--md-editor-box-shadow-color), 0 1px 1px var(--md-editor-box-shadow-color);\n  background-color: var(--md-editor-background-color);\n  z-index: 1;\n  display: none;\n}\n.w-md-editor-toolbar-child.active {\n  display: block;\n}\n.w-md-editor-toolbar-child .w-md-editor-toolbar {\n  border-bottom: 0;\n  padding: 3px;\n  border-radius: 3px;\n}\n.w-md-editor-toolbar-child .w-md-editor-toolbar ul > li {\n  display: block;\n}\n.w-md-editor-toolbar-child .w-md-editor-toolbar ul > li button {\n  width: -webkit-fill-available;\n  height: initial;\n  box-sizing: border-box;\n  padding: 3px 4px 2px 4px;\n  margin: 0;\n}\n";
	styleInject(css_248z$3);

	function Child(props) {
	  var {
	    prefixCls,
	    groupName,
	    commands,
	    children
	  } = props || {};
	  var {
	    barPopup = {}
	  } = reactExports.useContext(EditorContext);
	  return reactExports.useMemo(() => /*#__PURE__*/jsxRuntimeExports.jsx("div", {
	    className: prefixCls + "-toolbar-child " + (groupName && barPopup[groupName] ? 'active' : ''),
	    onClick: e => e.stopPropagation(),
	    children: Array.isArray(commands) ? /*#__PURE__*/jsxRuntimeExports.jsx(Toolbar, _extends({
	      commands: commands
	    }, props, {
	      isChild: true
	    })) : children
	  }),
	  // eslint-disable-next-line react-hooks/exhaustive-deps
	  [commands, barPopup, groupName, prefixCls]);
	}

	var css_248z$2 = ".w-md-editor-toolbar {\n  border-bottom: 1px solid var(--md-editor-box-shadow-color);\n  background-color: var(--md-editor-background-color);\n  padding: 3px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-radius: 3px 3px 0 0;\n  -webkit-user-select: none;\n          user-select: none;\n  flex-wrap: wrap;\n}\n.w-md-editor-toolbar.bottom {\n  border-bottom: 0px;\n  border-top: 1px solid var(--md-editor-box-shadow-color);\n  border-radius: 0 0 3px 3px;\n}\n.w-md-editor-toolbar ul,\n.w-md-editor-toolbar li {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  line-height: initial;\n}\n.w-md-editor-toolbar li {\n  display: inline-block;\n  font-size: 14px;\n}\n.w-md-editor-toolbar li + li {\n  margin: 0;\n}\n.w-md-editor-toolbar li > button {\n  border: none;\n  height: 20px;\n  line-height: 14px;\n  background: none;\n  padding: 4px;\n  margin: 0 1px;\n  border-radius: 2px;\n  text-transform: none;\n  font-weight: normal;\n  overflow: visible;\n  outline: none;\n  cursor: pointer;\n  transition: all 0.3s;\n  white-space: nowrap;\n  color: var(--color-fg-default);\n}\n.w-md-editor-toolbar li > button:hover,\n.w-md-editor-toolbar li > button:focus {\n  background-color: var(--color-neutral-muted);\n  color: var(--color-accent-fg);\n}\n.w-md-editor-toolbar li > button:active {\n  background-color: var(--color-neutral-muted);\n  color: var(--color-danger-fg);\n}\n.w-md-editor-toolbar li > button:disabled {\n  color: var(--md-editor-box-shadow-color);\n  cursor: not-allowed;\n}\n.w-md-editor-toolbar li > button:disabled:hover {\n  background-color: transparent;\n  color: var(--md-editor-box-shadow-color);\n}\n.w-md-editor-toolbar li.active > button {\n  color: var(--color-accent-fg);\n  background-color: var(--color-neutral-muted);\n}\n.w-md-editor-toolbar-divider {\n  height: 14px;\n  width: 1px;\n  margin: -3px 3px 0 3px !important;\n  vertical-align: middle;\n  background-color: var(--md-editor-box-shadow-color);\n}\n";
	styleInject(css_248z$2);

	function ToolbarItems(props) {
	  var {
	    prefixCls,
	    overflow
	  } = props;
	  var {
	    fullscreen,
	    preview,
	    barPopup = {},
	    components,
	    commandOrchestrator,
	    dispatch
	  } = reactExports.useContext(EditorContext);
	  var originalOverflow = reactExports.useRef('');
	  function handleClick(command, name) {
	    if (!dispatch) return;
	    var state = {
	      barPopup: _extends({}, barPopup)
	    };
	    if (command.keyCommand === 'preview') {
	      state.preview = command.value;
	    }
	    if (command.keyCommand === 'fullscreen') {
	      state.fullscreen = !fullscreen;
	    }
	    if (props.commands && command.keyCommand === 'group') {
	      props.commands.forEach(item => {
	        if (name === item.groupName) {
	          state.barPopup[name] = true;
	        } else if (item.keyCommand) {
	          state.barPopup[item.groupName] = false;
	        }
	      });
	    } else if (name || command.parent) {
	      Object.keys(state.barPopup || {}).forEach(keyName => {
	        state.barPopup[keyName] = false;
	      });
	    }
	    if (Object.keys(state).length) {
	      dispatch(_extends({}, state));
	    }
	    commandOrchestrator && commandOrchestrator.executeCommand(command);
	  }
	  reactExports.useEffect(() => {
	    if (document && overflow) {
	      if (fullscreen) {
	        // prevent scroll on fullscreen
	        document.body.style.overflow = 'hidden';
	      } else {
	        // get the original overflow only the first time
	        if (!originalOverflow.current) {
	          originalOverflow.current = window.getComputedStyle(document.body, null).overflow;
	        }
	        // reset to the original overflow
	        document.body.style.overflow = originalOverflow.current;
	      }
	    }
	  }, [fullscreen, originalOverflow, overflow]);
	  return /*#__PURE__*/jsxRuntimeExports.jsx("ul", {
	    children: (props.commands || []).map((item, idx) => {
	      if (item.keyCommand === 'divider') {
	        return /*#__PURE__*/jsxRuntimeExports.jsx("li", _extends({}, item.liProps, {
	          className: prefixCls + "-toolbar-divider"
	        }), idx);
	      }
	      if (!item.keyCommand) return /*#__PURE__*/jsxRuntimeExports.jsx(reactExports.Fragment, {}, idx);
	      var activeBtn = fullscreen && item.keyCommand === 'fullscreen' || item.keyCommand === 'preview' && preview === item.value;
	      var childNode = item.children && typeof item.children === 'function' ? item.children({
	        getState: () => commandOrchestrator.getState(),
	        textApi: commandOrchestrator ? commandOrchestrator.textApi : undefined,
	        close: () => handleClick({}, item.groupName),
	        execute: () => handleClick({
	          execute: item.execute
	        }),
	        dispatch
	      }) : undefined;
	      var disabled = barPopup && preview && preview === 'preview' && !/(preview|fullscreen)/.test(item.keyCommand);
	      var render = (components == null ? void 0 : components.toolbar) || item.render;
	      var com = render && typeof render === 'function' ? render(item, !!disabled, handleClick, idx) : null;
	      return /*#__PURE__*/jsxRuntimeExports.jsxs("li", _extends({}, item.liProps, {
	        className: activeBtn ? "active" : '',
	        children: [com && /*#__PURE__*/React.isValidElement(com) && com, !com && !item.buttonProps && item.icon, !com && item.buttonProps && /*#__PURE__*/React.createElement('button', _extends({
	          type: 'button',
	          key: idx,
	          disabled,
	          'data-name': item.name
	        }, item.buttonProps, {
	          onClick: evn => {
	            evn.stopPropagation();
	            handleClick(item, item.groupName);
	          }
	        }), item.icon), item.children && /*#__PURE__*/jsxRuntimeExports.jsx(Child, {
	          overflow: overflow,
	          groupName: item.groupName,
	          prefixCls: prefixCls,
	          children: childNode,
	          commands: Array.isArray(item.children) ? item.children : undefined
	        })]
	      }), idx);
	    })
	  });
	}
	function Toolbar(props) {
	  if (props === void 0) {
	    props = {};
	  }
	  var {
	    prefixCls,
	    isChild,
	    className
	  } = props;
	  var {
	    commands,
	    extraCommands
	  } = reactExports.useContext(EditorContext);
	  return /*#__PURE__*/jsxRuntimeExports.jsxs("div", {
	    className: prefixCls + "-toolbar " + className,
	    children: [/*#__PURE__*/jsxRuntimeExports.jsx(ToolbarItems, _extends({}, props, {
	      commands: props.commands || commands || []
	    })), !isChild && /*#__PURE__*/jsxRuntimeExports.jsx(ToolbarItems, _extends({}, props, {
	      commands: extraCommands || []
	    }))]
	  });
	}
	function ToolbarVisibility(props) {
	  var {
	    hideToolbar,
	    toolbarBottom,
	    placement,
	    overflow,
	    prefixCls
	  } = props;
	  if (hideToolbar || placement === 'bottom' && !toolbarBottom || placement === 'top' && toolbarBottom) {
	    return null;
	  }
	  var cls = toolbarBottom ? 'bottom' : '';
	  return /*#__PURE__*/jsxRuntimeExports.jsx(Toolbar, {
	    prefixCls: prefixCls,
	    overflow: overflow,
	    className: cls
	  });
	}

	var css_248z$1 = ".w-md-editor-bar {\n  position: absolute;\n  cursor: s-resize;\n  right: 0;\n  bottom: 0;\n  margin-top: -11px;\n  margin-right: 0;\n  width: 14px;\n  z-index: 3;\n  height: 10px;\n  border-radius: 0 0 3px 0;\n  -webkit-user-select: none;\n          user-select: none;\n}\n.w-md-editor-bar svg {\n  display: block;\n  margin: 0 auto;\n}\n";
	styleInject(css_248z$1);

	var DragBar = props => {
	  var {
	    prefixCls,
	    onChange
	  } = props || {};
	  var $dom = reactExports.useRef(null);
	  var dragRef = reactExports.useRef();
	  var heightRef = reactExports.useRef(props.height);
	  reactExports.useEffect(() => {
	    if (heightRef.current !== props.height) {
	      heightRef.current = props.height;
	    }
	  }, [props.height]);
	  function handleMouseMove(event) {
	    if (dragRef.current) {
	      var _changedTouches$;
	      var clientY = event.clientY || ((_changedTouches$ = event.changedTouches[0]) == null ? void 0 : _changedTouches$.clientY);
	      var newHeight = dragRef.current.height + clientY - dragRef.current.dragY;
	      if (newHeight >= props.minHeight && newHeight <= props.maxHeight) {
	        onChange && onChange(dragRef.current.height + (clientY - dragRef.current.dragY));
	      }
	    }
	  }
	  function handleMouseUp() {
	    var _$dom$current, _$dom$current2;
	    dragRef.current = undefined;
	    document.removeEventListener('mousemove', handleMouseMove);
	    document.removeEventListener('mouseup', handleMouseUp);
	    (_$dom$current = $dom.current) == null || _$dom$current.removeEventListener('touchmove', handleMouseMove);
	    (_$dom$current2 = $dom.current) == null || _$dom$current2.removeEventListener('touchend', handleMouseUp);
	  }
	  function handleMouseDown(event) {
	    var _changedTouches$2, _$dom$current3, _$dom$current4;
	    event.preventDefault();
	    var clientY = event.clientY || ((_changedTouches$2 = event.changedTouches[0]) == null ? void 0 : _changedTouches$2.clientY);
	    dragRef.current = {
	      height: heightRef.current,
	      dragY: clientY
	    };
	    document.addEventListener('mousemove', handleMouseMove);
	    document.addEventListener('mouseup', handleMouseUp);
	    (_$dom$current3 = $dom.current) == null || _$dom$current3.addEventListener('touchmove', handleMouseMove, {
	      passive: false
	    });
	    (_$dom$current4 = $dom.current) == null || _$dom$current4.addEventListener('touchend', handleMouseUp, {
	      passive: false
	    });
	  }
	  reactExports.useEffect(() => {
	    if (document) {
	      var _$dom$current5, _$dom$current6;
	      (_$dom$current5 = $dom.current) == null || _$dom$current5.addEventListener('touchstart', handleMouseDown, {
	        passive: false
	      });
	      (_$dom$current6 = $dom.current) == null || _$dom$current6.addEventListener('mousedown', handleMouseDown);
	    }
	    return () => {
	      if (document) {
	        var _$dom$current7;
	        (_$dom$current7 = $dom.current) == null || _$dom$current7.removeEventListener('touchstart', handleMouseDown);
	        document.removeEventListener('mousemove', handleMouseMove);
	      }
	    };
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, []);
	  var svg = reactExports.useMemo(() => /*#__PURE__*/jsxRuntimeExports.jsx("svg", {
	    viewBox: "0 0 512 512",
	    height: "100%",
	    children: /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	      fill: "currentColor",
	      d: "M304 256c0 26.5-21.5 48-48 48s-48-21.5-48-48 21.5-48 48-48 48 21.5 48 48zm120-48c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48zm-336 0c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48z"
	    })
	  }), []);
	  return /*#__PURE__*/jsxRuntimeExports.jsx("div", {
	    className: prefixCls + "-bar",
	    ref: $dom,
	    children: svg
	  });
	};

	var _excluded = ["prefixCls", "className", "value", "commands", "commandsFilter", "direction", "extraCommands", "height", "enableScroll", "visibleDragbar", "highlightEnable", "preview", "fullscreen", "overflow", "previewOptions", "textareaProps", "maxHeight", "minHeight", "autoFocus", "tabSize", "defaultTabEnable", "onChange", "onStatistics", "onHeightChange", "hideToolbar", "toolbarBottom", "components", "renderTextarea"];
	function setGroupPopFalse(data) {
	  if (data === void 0) {
	    data = {};
	  }
	  Object.keys(data).forEach(keyname => {
	    data[keyname] = false;
	  });
	  return data;
	}
	var InternalMDEditor = /*#__PURE__*/React.forwardRef((props, ref) => {
	  var _ref = props || {},
	    {
	      prefixCls = 'w-md-editor',
	      className,
	      value: propsValue,
	      commands = getCommands(),
	      commandsFilter,
	      direction,
	      extraCommands = getExtraCommands(),
	      height = 200,
	      enableScroll = true,
	      visibleDragbar = typeof props.visiableDragbar === 'boolean' ? props.visiableDragbar : true,
	      highlightEnable = true,
	      preview: previewType = 'live',
	      fullscreen = false,
	      overflow = true,
	      previewOptions = {},
	      textareaProps,
	      maxHeight = 1200,
	      minHeight = 100,
	      autoFocus,
	      tabSize = 2,
	      defaultTabEnable = false,
	      onChange,
	      onStatistics,
	      onHeightChange,
	      hideToolbar,
	      toolbarBottom = false,
	      components,
	      renderTextarea
	    } = _ref,
	    other = _objectWithoutPropertiesLoose(_ref, _excluded);
	  var cmds = commands.map(item => commandsFilter ? commandsFilter(item, false) : item).filter(Boolean);
	  var extraCmds = extraCommands.map(item => commandsFilter ? commandsFilter(item, true) : item).filter(Boolean);
	  var [state, dispatch] = reactExports.useReducer(reducer, {
	    markdown: propsValue,
	    preview: previewType,
	    components,
	    height,
	    minHeight,
	    highlightEnable,
	    tabSize,
	    defaultTabEnable,
	    scrollTop: 0,
	    scrollTopPreview: 0,
	    commands: cmds,
	    extraCommands: extraCmds,
	    fullscreen,
	    barPopup: {}
	  });
	  var container = reactExports.useRef(null);
	  var previewRef = reactExports.useRef(null);
	  var enableScrollRef = reactExports.useRef(enableScroll);
	  reactExports.useImperativeHandle(ref, () => _extends({}, state, {
	    container: container.current,
	    dispatch
	  }));
	  reactExports.useMemo(() => enableScrollRef.current = enableScroll, [enableScroll]);
	  reactExports.useEffect(() => {
	    var stateInit = {};
	    if (container.current) {
	      stateInit.container = container.current || undefined;
	    }
	    stateInit.markdown = propsValue || '';
	    stateInit.barPopup = {};
	    if (dispatch) {
	      dispatch(_extends({}, state, stateInit));
	    }
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, []);
	  var cls = [className, 'wmde-markdown-var', direction ? prefixCls + "-" + direction : null, prefixCls, state.preview ? prefixCls + "-show-" + state.preview : null, state.fullscreen ? prefixCls + "-fullscreen" : null].filter(Boolean).join(' ').trim();
	  reactExports.useMemo(() => propsValue !== state.markdown && dispatch({
	    markdown: propsValue || ''
	  }), [propsValue, state.markdown]);
	  // eslint-disable-next-line react-hooks/exhaustive-deps
	  reactExports.useMemo(() => previewType !== state.preview && dispatch({
	    preview: previewType
	  }), [previewType]);
	  // eslint-disable-next-line react-hooks/exhaustive-deps
	  reactExports.useMemo(() => tabSize !== state.tabSize && dispatch({
	    tabSize
	  }), [tabSize]);
	  reactExports.useMemo(() => highlightEnable !== state.highlightEnable && dispatch({
	    highlightEnable
	  }),
	  // eslint-disable-next-line react-hooks/exhaustive-deps
	  [highlightEnable]);
	  // eslint-disable-next-line react-hooks/exhaustive-deps
	  reactExports.useMemo(() => autoFocus !== state.autoFocus && dispatch({
	    autoFocus: autoFocus
	  }), [autoFocus]);
	  reactExports.useMemo(() => fullscreen !== state.fullscreen && dispatch({
	    fullscreen: fullscreen
	  }),
	  // eslint-disable-next-line react-hooks/exhaustive-deps
	  [fullscreen]);
	  // eslint-disable-next-line react-hooks/exhaustive-deps
	  reactExports.useMemo(() => height !== state.height && dispatch({
	    height: height
	  }), [height]);
	  reactExports.useMemo(() => height !== state.height && onHeightChange && onHeightChange(state.height, height, state), [height, onHeightChange, state]);
	  // eslint-disable-next-line react-hooks/exhaustive-deps
	  reactExports.useMemo(() => commands !== state.commands && dispatch({
	    commands: cmds
	  }), [props.commands]);
	  // eslint-disable-next-line react-hooks/exhaustive-deps
	  reactExports.useMemo(() => extraCommands !== state.extraCommands && dispatch({
	    extraCommands: extraCmds
	  }), [props.extraCommands]);
	  var textareaDomRef = reactExports.useRef();
	  var active = reactExports.useRef('preview');
	  var initScroll = reactExports.useRef(false);
	  reactExports.useMemo(() => {
	    textareaDomRef.current = state.textareaWarp;
	    if (state.textareaWarp) {
	      state.textareaWarp.addEventListener('mouseover', () => {
	        active.current = 'text';
	      });
	      state.textareaWarp.addEventListener('mouseleave', () => {
	        active.current = 'preview';
	      });
	    }
	  }, [state.textareaWarp]);
	  var handleScroll = (e, type) => {
	    if (!enableScrollRef.current) return;
	    var textareaDom = textareaDomRef.current;
	    var previewDom = previewRef.current ? previewRef.current : undefined;
	    if (!initScroll.current) {
	      active.current = type;
	      initScroll.current = true;
	    }
	    if (textareaDom && previewDom) {
	      var scale = (textareaDom.scrollHeight - textareaDom.offsetHeight) / (previewDom.scrollHeight - previewDom.offsetHeight);
	      if (e.target === textareaDom && active.current === 'text') {
	        previewDom.scrollTop = textareaDom.scrollTop / scale;
	      }
	      if (e.target === previewDom && active.current === 'preview') {
	        textareaDom.scrollTop = previewDom.scrollTop * scale;
	      }
	      var scrollTop = 0;
	      if (active.current === 'text') {
	        scrollTop = textareaDom.scrollTop || 0;
	      } else if (active.current === 'preview') {
	        scrollTop = previewDom.scrollTop || 0;
	      }
	      dispatch({
	        scrollTop
	      });
	    }
	  };
	  var previewClassName = prefixCls + "-preview " + (previewOptions.className || '');
	  var handlePreviewScroll = e => handleScroll(e, 'preview');
	  var mdPreview = reactExports.useMemo(() => /*#__PURE__*/jsxRuntimeExports.jsx("div", {
	    ref: previewRef,
	    className: previewClassName,
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(MarkdownPreview, _extends({}, previewOptions, {
	      onScroll: handlePreviewScroll,
	      source: state.markdown || ''
	    }))
	  }), [previewClassName, previewOptions, state.markdown]);
	  var preview = (components == null ? void 0 : components.preview) && (components == null ? void 0 : components.preview(state.markdown || '', state, dispatch));
	  if (preview && /*#__PURE__*/React.isValidElement(preview)) {
	    mdPreview = /*#__PURE__*/jsxRuntimeExports.jsx("div", {
	      className: previewClassName,
	      ref: previewRef,
	      onScroll: handlePreviewScroll,
	      children: preview
	    });
	  }
	  var containerStyle = _extends({}, other.style, {
	    height: state.height || '100%'
	  });
	  var containerClick = () => dispatch({
	    barPopup: _extends({}, setGroupPopFalse(state.barPopup))
	  });
	  var dragBarChange = newHeight => dispatch({
	    height: newHeight
	  });
	  var changeHandle = evn => {
	    onChange && onChange(evn.target.value, evn, state);
	    if (textareaProps && textareaProps.onChange) {
	      textareaProps.onChange(evn);
	    }
	    if (state.textarea && state.textarea instanceof HTMLTextAreaElement && onStatistics) {
	      var obj = new TextAreaCommandOrchestrator(state.textarea);
	      var objState = obj.getState() || {};
	      onStatistics(_extends({}, objState, {
	        lineCount: evn.target.value.split('\n').length,
	        length: evn.target.value.length
	      }));
	    }
	  };
	  return /*#__PURE__*/jsxRuntimeExports.jsx(EditorContext.Provider, {
	    value: _extends({}, state, {
	      dispatch
	    }),
	    children: /*#__PURE__*/jsxRuntimeExports.jsxs("div", _extends({
	      ref: container,
	      className: cls
	    }, other, {
	      onClick: containerClick,
	      style: containerStyle,
	      children: [/*#__PURE__*/jsxRuntimeExports.jsx(ToolbarVisibility, {
	        hideToolbar: hideToolbar,
	        toolbarBottom: toolbarBottom,
	        prefixCls: prefixCls,
	        overflow: overflow,
	        placement: "top"
	      }), /*#__PURE__*/jsxRuntimeExports.jsxs("div", {
	        className: prefixCls + "-content",
	        children: [/(edit|live)/.test(state.preview || '') && /*#__PURE__*/jsxRuntimeExports.jsx(TextArea, _extends({
	          className: prefixCls + "-input",
	          prefixCls: prefixCls,
	          autoFocus: autoFocus
	        }, textareaProps, {
	          onChange: changeHandle,
	          renderTextarea: (components == null ? void 0 : components.textarea) || renderTextarea,
	          onScroll: e => handleScroll(e, 'text')
	        })), /(live|preview)/.test(state.preview || '') && mdPreview]
	      }), visibleDragbar && !state.fullscreen && /*#__PURE__*/jsxRuntimeExports.jsx(DragBar, {
	        prefixCls: prefixCls,
	        height: state.height,
	        maxHeight: maxHeight,
	        minHeight: minHeight,
	        onChange: dragBarChange
	      }), /*#__PURE__*/jsxRuntimeExports.jsx(ToolbarVisibility, {
	        hideToolbar: hideToolbar,
	        toolbarBottom: toolbarBottom,
	        prefixCls: prefixCls,
	        overflow: overflow,
	        placement: "bottom"
	      })]
	    }))
	  });
	});
	var Editor = InternalMDEditor;
	Editor.Markdown = MarkdownPreview;

	var css_248z = ".w-md-editor {\n  text-align: left;\n  border-radius: 3px;\n  padding-bottom: 1px;\n  position: relative;\n  color: var(--color-fg-default);\n  --md-editor-font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  --md-editor-background-color: var(--color-canvas-default, #ffffff);\n  --md-editor-box-shadow-color: var(--color-border-default, #d0d7de);\n  box-shadow: 0 0 0 1px var(--md-editor-box-shadow-color), 0 0 0 var(--md-editor-box-shadow-color), 0 1px 1px var(--md-editor-box-shadow-color);\n  background-color: var(--md-editor-background-color);\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  display: flex;\n  flex-direction: column;\n}\n.w-md-editor.w-md-editor-rtl {\n  direction: rtl !important;\n  text-align: right !important;\n}\n.w-md-editor.w-md-editor-rtl .w-md-editor-preview {\n  right: unset !important;\n  left: 0;\n  text-align: right !important;\n  box-shadow: inset -1px 0 0 0 var(--md-editor-box-shadow-color);\n}\n.w-md-editor.w-md-editor-rtl .w-md-editor-text {\n  text-align: right !important;\n}\n.w-md-editor-toolbar {\n  height: -webkit-fit-content;\n  height: fit-content;\n}\n.w-md-editor-content {\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  border-radius: 0 0 3px 0;\n}\n.w-md-editor .copied {\n  display: none !important;\n}\n.w-md-editor-input {\n  width: 50%;\n  height: 100%;\n}\n.w-md-editor-text-pre > code {\n  word-break: break-word !important;\n  white-space: pre-wrap !important;\n}\n.w-md-editor-preview {\n  width: 50%;\n  box-sizing: border-box;\n  box-shadow: inset 1px 0 0 0 var(--md-editor-box-shadow-color);\n  position: absolute;\n  padding: 10px 20px;\n  overflow: auto;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  border-radius: 0 0 5px 0;\n  display: flex;\n  flex-direction: column;\n}\n.w-md-editor-preview .anchor {\n  display: none;\n}\n.w-md-editor-preview .contains-task-list li.task-list-item {\n  list-style: none;\n}\n.w-md-editor-show-preview .w-md-editor-input {\n  width: 0%;\n  overflow: hidden;\n  background-color: var(--md-editor-background-color);\n}\n.w-md-editor-show-preview .w-md-editor-preview {\n  width: 100%;\n  box-shadow: inset 0 0 0 0;\n}\n.w-md-editor-show-edit .w-md-editor-input {\n  width: 100%;\n}\n.w-md-editor-show-edit .w-md-editor-preview {\n  width: 0%;\n  padding: 0;\n}\n.w-md-editor-fullscreen {\n  overflow: hidden;\n  position: fixed;\n  z-index: 99999;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  height: 100% !important;\n}\n.w-md-editor-fullscreen .w-md-editor-content {\n  height: 100%;\n}\n";
	styleInject(css_248z);

	function FieldIsRequired(_ref) {
	  var replyTo = _ref.replyTo;
	  return /*#__PURE__*/React.createElement("span", _extends$1({
	    className: "form-text small invalid-feedback"
	  }, replyTo > 0 && {
	    style: {
	      "fontSize": "0.71rem"
	    }
	  }), django$1.gettext("This field is required."));
	}
	function PreviewComment(_ref2) {
	  var avatar = _ref2.avatar,
	    name = _ref2.name,
	    url = _ref2.url,
	    comment = _ref2.comment,
	    replyTo = _ref2.replyTo;
	  var _useContext = reactExports.useContext(InitContext),
	    is_authenticated = _useContext.is_authenticated,
	    current_user = _useContext.current_user;
	  var get_heading_name = function get_heading_name() {
	    if (url.length > 0) return /*#__PURE__*/React.createElement("a", {
	      href: url,
	      target: "_new"
	    }, name);else if (is_authenticated) return current_user.split(":")[1];else return name;
	  };
	  var raw_markup = function raw_markup() {
	    var md = new Remarkable();
	    var _raw_markup = md.render(comment);
	    return {
	      __html: _raw_markup
	    };
	  };
	  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("hr", null), !replyTo && /*#__PURE__*/React.createElement("h5", {
	    className: "text-center"
	  }, django$1.gettext("Your comment in preview")), /*#__PURE__*/React.createElement("div", {
	    className: "comment d-flex " + (replyTo > 0 ? "mt-1" : "mt-5")
	  }, /*#__PURE__*/React.createElement("img", {
	    className: "me-3",
	    src: avatar,
	    height: "48",
	    width: "48"
	  }), /*#__PURE__*/React.createElement("div", {
	    className: "d-flex flex-column pb-3"
	  }, /*#__PURE__*/React.createElement("span", {
	    style: {
	      fontSize: "0.8rem"
	    }
	  }, django$1.gettext("Now"), " - ", get_heading_name(), "  ", replyTo > 0 && /*#__PURE__*/React.createElement("div", {
	    className: "badge badge-info"
	  }, "preview")), /*#__PURE__*/React.createElement("div", {
	    className: "content py-2",
	    dangerouslySetInnerHTML: raw_markup()
	  }))));
	}
	function CommentForm(_ref3) {
	  var replyTo = _ref3.replyTo,
	    onCommentCreated = _ref3.onCommentCreated;
	  var _useContext2 = reactExports.useContext(InitContext),
	    default_followup = _useContext2.default_followup,
	    default_form = _useContext2.default_form,
	    is_authenticated = _useContext2.is_authenticated,
	    preview_url = _useContext2.preview_url,
	    request_email_address = _useContext2.request_email_address,
	    request_name = _useContext2.request_name,
	    send_url = _useContext2.send_url;
	  var _useState = reactExports.useState({
	      previewing: false,
	      submitted: false,
	      avatar: undefined,
	      name: "",
	      email: "",
	      url: "",
	      comment: "",
	      followup: default_followup,
	      errors: {
	        name: false,
	        email: false,
	        comment: false
	      },
	      alert: {
	        message: "",
	        cssc: ""
	      }
	    }),
	    _useState2 = _slicedToArray(_useState, 2),
	    lstate = _useState2[0],
	    setLstate = _useState2[1];
	  var handle_input_change = function handle_input_change(event) {
	    var target = event.target;
	    var value = target.type === 'checkbox' ? target.checked : target.value;
	    var iname = target.name;
	    setLstate(_objectSpread2(_objectSpread2({}, lstate), {}, _defineProperty({}, iname, value)));
	  };
	  var is_valid_data = function is_valid_data() {
	    var is_valid_name = true,
	      is_valid_email = true;
	    if (!is_authenticated || request_name) is_valid_name = /^\s*$/.test(lstate.name) ? false : true;
	    if (!is_authenticated || request_email_address) is_valid_email = /\S+@\S+\.\S+/.test(lstate.email) ? true : false;
	    var is_valid_comment = /^\s*$/.test(lstate.comment) ? false : true;
	    setLstate(_objectSpread2(_objectSpread2({}, lstate), {}, {
	      errors: _objectSpread2(_objectSpread2({}, lstate.errors), {}, {
	        name: !is_valid_name,
	        email: !is_valid_email,
	        comment: !is_valid_comment
	      })
	    }));
	    return is_valid_name && is_valid_email && is_valid_comment;
	  };
	  var handle_submit = function handle_submit(event) {
	    event.preventDefault();
	    if (!is_valid_data()) {
	      return;
	    }
	    var data = _objectSpread2(_objectSpread2({}, default_form), {}, {
	      honeypot: '',
	      comment: lstate.comment,
	      name: lstate.name,
	      email: lstate.email,
	      url: lstate.url,
	      followup: lstate.followup,
	      reply_to: replyTo
	    });
	    var _promise = fetch(send_url, {
	      method: 'POST',
	      mode: 'cors',
	      headers: {
	        "Content-Type": "application/json",
	        "X-CSRFToken": getCookie("csrftoken")
	      },
	      body: JSON.stringify(data)
	    });
	    _promise.then(function (response) {
	      if ([201, 202, 204, 403].includes(response.status)) {
	        var css_class = "";
	        var msg_202 = django$1.gettext("Your comment will be reviewed. Thank your for your patience.");
	        var msg_204 = django$1.gettext("Thank you, a comment confirmation request has been sent by mail.");
	        var msg_403 = django$1.gettext("Sorry, your comment has been rejected.");
	        var message = {
	          202: msg_202,
	          204: msg_204,
	          403: msg_403
	        };
	        var cssc = (replyTo > 0 ? "mb-0 " : "") + "small alert alert-";
	        css_class = response.status == 403 ? cssc + "danger" : cssc + "info";
	        var _errors = response.status < 300 ? {
	          name: false,
	          email: false,
	          comment: false
	        } : _objectSpread2({}, lstate.errors);
	        setLstate(_objectSpread2(_objectSpread2({}, lstate), {}, {
	          alert: {
	            message: message[response.status],
	            cssc: css_class
	          },
	          previewing: false,
	          submitted: true,
	          name: '',
	          email: '',
	          url: '',
	          followup: false,
	          comment: '',
	          errors: _errors
	        }));
	        onCommentCreated();
	      }
	    });
	  };
	  var handle_preview = function handle_preview(event) {
	    event.preventDefault();
	    if (!is_valid_data()) return;
	    var _promise = fetch(preview_url, {
	      method: 'POST',
	      mode: 'cors',
	      headers: {
	        "Content-Type": "application/json",
	        "X-CSRFToken": getCookie("csrftoken")
	      },
	      body: JSON.stringify({
	        email: lstate.email
	      })
	    });
	    _promise.then(function (response) {
	      if (response.status === 200) return response.json();else throw new Error("Status ".concat(response.status));
	    }).then(function (data) {
	      setLstate(_objectSpread2(_objectSpread2({}, lstate), {}, {
	        avatar: data.url,
	        previewing: true
	      }));
	    })["catch"](function (error) {
	      return console.error(error);
	    });
	  };
	  var get_field_css_classes = function get_field_css_classes(field) {
	    var css_classes = "row justify-content-center form-group";
	    if (field === "followup") css_classes += " my-3";else css_classes += replyTo > 0 ? " my-2" : " my-3";
	    if (field === "name" && lstate.errors.name || field === "email" && lstate.errors.email || field === "comment" && lstate.errors.comment) {
	      css_classes += " has-danger";
	    }
	    return css_classes;
	  };
	  var get_input_css_classes = function get_input_css_classes(field) {
	    var css_classes = "form-control";
	    css_classes += replyTo > 0 ? " form-control-sm" : "";
	    if (field === "name" && lstate.errors.name || field === "email" && lstate.errors.email || field === "comment" && lstate.errors.comment) {
	      css_classes += " is-invalid";
	    }
	    return css_classes;
	  };
	  var handle_input_change_mdeditor = function handle_input_change_mdeditor(val) {
	    setLstate(_objectSpread2(_objectSpread2({}, lstate), {}, {
	      comment: val
	    }));
	  };
	  var render_comment_field = function render_comment_field() {
	    return /*#__PURE__*/React.createElement("div", {
	      className: get_field_css_classes("comment")
	    }, /*#__PURE__*/React.createElement("div", {
	      className: "col-12"
	    }, /*#__PURE__*/React.createElement("style", {
	      jsx: true,
	      global: true
	    }, "\n            .w-md-editor-toolbar li {\n              line-height: 1.5rem;\n            }\n            .w-md-editor-toolbar li + li {\n              margin-left: 2px;\n            }\n          "), /*#__PURE__*/React.createElement(Editor, {
	      required: true,
	      value: lstate.comment,
	      onChange: handle_input_change_mdeditor,
	      preview: "live"
	    }), lstate.errors.comment && /*#__PURE__*/React.createElement(FieldIsRequired, {
	      replyTo: replyTo
	    })));
	  };
	  var render_name_field = function render_name_field() {
	    if (is_authenticated && !request_name) return /*#__PURE__*/React.createElement(React.Fragment, null);
	    return /*#__PURE__*/React.createElement("div", {
	      className: get_field_css_classes("name")
	    }, /*#__PURE__*/React.createElement("div", {
	      className: "col-2 text-end"
	    }, /*#__PURE__*/React.createElement("label", {
	      htmlFor: "id_name",
	      className: replyTo > 0 ? "form-control-sm" : "col-form-label"
	    }, django$1.gettext("Name"))), /*#__PURE__*/React.createElement("div", {
	      className: replyTo > 0 ? "col-9" : "col-7"
	    }, /*#__PURE__*/React.createElement("input", {
	      required: true,
	      type: "text",
	      name: "name",
	      id: "id_name",
	      value: lstate.name,
	      placeholder: django$1.gettext('name'),
	      onChange: handle_input_change,
	      className: get_input_css_classes("name")
	    }), lstate.errors.name && /*#__PURE__*/React.createElement(FieldIsRequired, {
	      replyTo: replyTo
	    })));
	  };
	  var render_email_field = function render_email_field() {
	    if (is_authenticated && !request_email_address) return /*#__PURE__*/React.createElement(React.Fragment, null);
	    var help_cssc = "form-text small";
	    help_cssc += lstate.errors.email ? " invalid-feedback" : "";
	    return /*#__PURE__*/React.createElement("div", {
	      className: get_field_css_classes("email")
	    }, /*#__PURE__*/React.createElement("div", {
	      className: "col-2 text-end"
	    }, /*#__PURE__*/React.createElement("label", {
	      htmlFor: "id_name",
	      className: replyTo > 0 ? "form-control-sm" : "col-form-label"
	    }, django$1.gettext("Mail"))), /*#__PURE__*/React.createElement("div", {
	      className: replyTo > 0 ? "col-9" : "col-7"
	    }, /*#__PURE__*/React.createElement("input", {
	      required: true,
	      type: "text",
	      name: "email",
	      id: "id_email",
	      value: lstate.email,
	      placeholder: django$1.gettext('mail address'),
	      onChange: handle_input_change,
	      className: get_input_css_classes("email")
	    }), /*#__PURE__*/React.createElement("span", _extends$1({
	      className: help_cssc
	    }, replyTo > 0 && {
	      style: {
	        "fontSize": "0.71rem"
	      }
	    }), django$1.gettext('Required for comment verification.'))));
	  };
	  var render_url_field = function render_url_field() {
	    if (is_authenticated) return /*#__PURE__*/React.createElement(React.Fragment, null);
	    return /*#__PURE__*/React.createElement("div", {
	      className: get_field_css_classes("url")
	    }, /*#__PURE__*/React.createElement("div", {
	      className: "col-2 text-end"
	    }, /*#__PURE__*/React.createElement("label", {
	      htmlFor: "id_url",
	      className: replyTo > 0 ? "form-control-sm" : "col-form-label"
	    }, django$1.gettext("Link"))), /*#__PURE__*/React.createElement("div", {
	      className: replyTo > 0 ? "col-9" : "col-7"
	    }, /*#__PURE__*/React.createElement("input", {
	      type: "text",
	      name: "url",
	      id: "id_url",
	      value: lstate.url,
	      placeholder: django$1.gettext("url your name links to (optional)"),
	      onChange: handle_input_change,
	      className: get_input_css_classes("url")
	    })));
	  };
	  var render_followup_field = function render_followup_field() {
	    var elem_id = replyTo > 0 ? "_".concat(replyTo) : "id_followup";
	    var cssc = "form-check d-flex justify-content-center align-items-center";
	    return /*#__PURE__*/React.createElement("div", {
	      className: get_field_css_classes("followup")
	    }, /*#__PURE__*/React.createElement("div", {
	      className: replyTo > 0 ? "col-10" : "col-7"
	    }, /*#__PURE__*/React.createElement("div", {
	      className: cssc
	    }, /*#__PURE__*/React.createElement("input", {
	      name: "followup",
	      type: "checkbox",
	      id: elem_id,
	      onChange: handle_input_change,
	      className: "form-check-input",
	      checked: lstate.followup
	    }), /*#__PURE__*/React.createElement("label", {
	      htmlFor: elem_id,
	      className: "ps-2 form-check-label" + (replyTo > 0 && " small")
	    }, "\xA0", django$1.gettext("Notify me about follow-up comments")))));
	  };
	  return /*#__PURE__*/React.createElement("div", null, lstate.previewing && /*#__PURE__*/React.createElement(PreviewComment, {
	    avatar: lstate.avatar,
	    name: lstate.name,
	    url: lstate.url,
	    comment: lstate.comment,
	    replyTo: replyTo
	  }), /*#__PURE__*/React.createElement("div", {
	    className: replyTo === 0 ? "mt-4 mb-5" : "mt-2"
	  }, /*#__PURE__*/React.createElement("div", null, lstate.alert.message && lstate.alert.message.length > 0 && /*#__PURE__*/React.createElement("div", {
	    className: lstate.alert.cssc
	  }, lstate.alert.message), (!lstate.submitted || replyTo === 0) && /*#__PURE__*/React.createElement("form", {
	    method: "POST",
	    onSubmit: handle_submit
	  }, /*#__PURE__*/React.createElement("fieldset", null, /*#__PURE__*/React.createElement("input", {
	    type: "hidden",
	    name: "content_type",
	    defaultValue: default_form.content_type
	  }), /*#__PURE__*/React.createElement("input", {
	    type: "hidden",
	    name: "object_pk",
	    defaultValue: default_form.object_pk
	  }), /*#__PURE__*/React.createElement("input", {
	    type: "hidden",
	    name: "timestamp",
	    defaultValue: default_form.timestamp
	  }), /*#__PURE__*/React.createElement("input", {
	    type: "hidden",
	    name: "security_hash",
	    defaultValue: default_form.security_hash
	  }), /*#__PURE__*/React.createElement("input", {
	    type: "hidden",
	    name: "reply_to",
	    defaultValue: replyTo
	  }), /*#__PURE__*/React.createElement("div", {
	    style: {
	      display: 'none'
	    }
	  }, /*#__PURE__*/React.createElement("input", {
	    type: "text",
	    name: "honeypot",
	    defaultValue: ""
	  })), render_comment_field(), render_name_field(), render_email_field(), render_url_field(), render_followup_field()), /*#__PURE__*/React.createElement("div", {
	    className: "row my-2 form-group" + (replyTo > 0 ? " mb-0" : "")
	  }, /*#__PURE__*/React.createElement("div", {
	    className: "d-flex justify-content-center"
	  }, /*#__PURE__*/React.createElement("button", {
	    type: "submit",
	    name: "post",
	    className: "btn btn-primary me-1" + (replyTo > 0 ? " btn-sm" : "")
	  }, django$1.gettext("send")), /*#__PURE__*/React.createElement("button", {
	    name: "preview",
	    className: "btn btn-secondary" + (replyTo > 0 ? " btn-sm" : ""),
	    onClick: handle_preview
	  }, django$1.gettext("preview"))))))));
	}

	// --------------------------------------------------------------------
	function UserPart(_ref) {
	  var userName = _ref.userName,
	    userUrl = _ref.userUrl,
	    isRemoved = _ref.isRemoved,
	    userModerator = _ref.userModerator;
	  var user = reactExports.useMemo(function () {
	    return userUrl && !isRemoved ? /*#__PURE__*/React.createElement("a", {
	      href: userUrl,
	      className: "text-decoration-none",
	      title: "User's link"
	    }, userName) : userName;
	  }, [userUrl, isRemoved]);
	  var moderator = reactExports.useMemo(function () {
	    if (userModerator) {
	      var label = django$1.gettext("moderator");
	      return /*#__PURE__*/React.createElement("span", null, "\xA0", /*#__PURE__*/React.createElement("span", {
	        className: "badge text-bg-secondary"
	      }, label));
	    } else return /*#__PURE__*/React.createElement(React.Fragment, null);
	  }, [userModerator]);
	  return /*#__PURE__*/React.createElement("span", null, user, moderator);
	}

	// --------------------------------------------------------------------
	// The TopRightPart displays:
	//  * The "flag this comment" link, and
	//  * The "remove this comment" link.

	function TopRightPart(_ref2) {
	  var allowFlagging = _ref2.allowFlagging,
	    canModerate = _ref2.canModerate,
	    commentId = _ref2.commentId,
	    deleteUrl = _ref2.deleteUrl,
	    flagUrl = _ref2.flagUrl,
	    isAuthenticated = _ref2.isAuthenticated,
	    isRemoved = _ref2.isRemoved,
	    loginUrl = _ref2.loginUrl,
	    userRequestedRemoval = _ref2.userRequestedRemoval,
	    removalCount = _ref2.removalCount;
	  var flagging_count = reactExports.useMemo(function () {
	    if (isAuthenticated && canModerate && removalCount > 0) {
	      var fmts = django$1.ngettext("%s user has flagged this comment as inappropriate.", "%s users have flagged this comment as inappropriate.", removalCount);
	      var text = django$1.interpolate(fmts, [removalCount]);
	      return /*#__PURE__*/React.createElement("span", {
	        className: "small text-danger",
	        title: text
	      }, removalCount);
	    } else {
	      return /*#__PURE__*/React.createElement(React.Fragment, null);
	    }
	  }, [isAuthenticated, canModerate, removalCount]);
	  var flagging_html = reactExports.useMemo(function () {
	    if (!allowFlagging) return /*#__PURE__*/React.createElement(React.Fragment, null);
	    var inapp_msg = "";
	    if (userRequestedRemoval) {
	      inapp_msg = django$1.gettext("I flagged it as inappropriate");
	      return /*#__PURE__*/React.createElement(React.Fragment, null, flagging_count, "\xA0", /*#__PURE__*/React.createElement("i", {
	        className: "bi bi-flag text-danger",
	        title: inapp_msg
	      }));
	    } else {
	      var url = isAuthenticated ? flagUrl.replace('0', commentId) : loginUrl + "?next=" + flagUrl.replace('0', commentId);
	      inapp_msg = django$1.gettext("flag comment as inappropriate");
	      return /*#__PURE__*/React.createElement(React.Fragment, null, flagging_count, "\xA0", /*#__PURE__*/React.createElement("a", {
	        className: "text-decoration-none",
	        href: url
	      }, /*#__PURE__*/React.createElement("i", {
	        className: "bi bi-flag",
	        title: inapp_msg
	      })));
	    }
	  }, [allowFlagging, userRequestedRemoval]);
	  var moderate_html = reactExports.useMemo(function () {
	    if (isAuthenticated && canModerate) {
	      var remove_msg = django$1.gettext("remove comment");
	      var url = deleteUrl.replace('0', commentId);
	      return /*#__PURE__*/React.createElement("a", {
	        className: "text-decoration-none",
	        href: url
	      }, /*#__PURE__*/React.createElement("i", {
	        className: "bi bi-trash",
	        title: remove_msg
	      }));
	    } else {
	      return /*#__PURE__*/React.createElement(React.Fragment, null);
	    }
	  }, [isAuthenticated, canModerate]);
	  if (isRemoved) return /*#__PURE__*/React.createElement(React.Fragment, null);
	  return /*#__PURE__*/React.createElement("div", {
	    className: "d-inline"
	  }, flagging_html, " ", moderate_html);
	}

	// --------------------------------------------------------------------
	// The FeedbackPart displays:
	//  * The "flag this comment" link, and
	//  * The "remove this comment" link.

	function FeedbackPart(_ref3) {
	  var allowFeedback = _ref3.allowFeedback,
	    commentId = _ref3.commentId,
	    currentUser = _ref3.currentUser,
	    onLikeClicked = _ref3.onLikeClicked,
	    onDislikeClicked = _ref3.onDislikeClicked,
	    showFeedback = _ref3.showFeedback,
	    userLikeList = _ref3.userLikeList,
	    userDislikeList = _ref3.userDislikeList;
	  var cur_user_id = currentUser.split(":")[0];
	  var get_user_list = function get_user_list(dir) {
	    return dir === "like" ? userLikeList : userDislikeList;
	  };
	  var get_feedback_chunk = function get_feedback_chunk(dir) {
	    if (!allowFeedback) return /*#__PURE__*/React.createElement(React.Fragment, null);
	    var user_list = _toConsumableArray(get_user_list(dir));
	    var userids = new Set(user_list.map(function (item) {
	      return item.split(":")[0];
	    }));
	    var usernames = user_list.map(function (item) {
	      return item.split(":")[1];
	    });
	    var click_hdl = dir == 'like' ? onLikeClicked : onDislikeClicked;
	    var icon = dir == 'like' ? 'hand-thumbs-up' : 'hand-thumbs-down';
	    icon += userids.has(cur_user_id) ? '-fill' : '';
	    var class_icon = "bi bi-" + icon;
	    var title = dir == 'like' ? django$1.gettext('I like it') : django$1.gettext('I dislike it');
	    return /*#__PURE__*/React.createElement(React.Fragment, null, showFeedback && user_list.length > 0 && /*#__PURE__*/React.createElement("a", {
	      className: "small text-decoration-none",
	      "data-bs-html": "true",
	      "data-bs-toggle": "tooltip",
	      "data-bs-title": usernames.join("<br/>")
	    }, user_list.length), /*#__PURE__*/React.createElement("a", {
	      href: "#",
	      onClick: click_hdl
	    }, /*#__PURE__*/React.createElement("i", {
	      className: class_icon,
	      title: title
	    })));
	  };
	  var likeFeedback = get_feedback_chunk("like");
	  var dislikeFeedback = get_feedback_chunk("dislike");
	  return allowFeedback ? /*#__PURE__*/React.createElement("div", {
	    id: "feedback-".concat(commentId),
	    className: "d-inline small"
	  }, likeFeedback, "\xA0", /*#__PURE__*/React.createElement("span", {
	    className: "text-muted"
	  }, "\u22C5"), "\xA0", dislikeFeedback) : /*#__PURE__*/React.createElement(React.Fragment, null);
	}

	// --------------------------------------------------------------------
	// The ReplyFormPart displays:
	//  * The "reply" link. (it can be precedeed with a &bull;)
	//  * The "reply" form.

	function ReplyFormPart(_ref4) {
	  var allowFeedback = _ref4.allowFeedback,
	    commentId = _ref4.commentId,
	    level = _ref4.level,
	    maxThreadLevel = _ref4.maxThreadLevel,
	    onCommentCreated = _ref4.onCommentCreated,
	    onReplyClick = _ref4.onReplyClick,
	    replyFormVisible = _ref4.replyFormVisible,
	    replyUrl = _ref4.replyUrl;
	  var url = replyUrl.replace('0', commentId);
	  var label = django$1.gettext("Reply");
	  if (level >= maxThreadLevel) return /*#__PURE__*/React.createElement(React.Fragment, null);
	  return /*#__PURE__*/React.createElement(React.Fragment, null, allowFeedback ? /*#__PURE__*/React.createElement("span", null, "\xA0\xA0", /*#__PURE__*/React.createElement("span", {
	    className: "text-muted"
	  }, "\u2022"), "\xA0\xA0", /*#__PURE__*/React.createElement("a", {
	    className: "small text-decoration-none",
	    onClick: onReplyClick,
	    href: url
	  }, label)) : /*#__PURE__*/React.createElement("a", {
	    className: "small text-decoration-none",
	    onClick: onReplyClick,
	    href: url
	  }, label), replyFormVisible ? /*#__PURE__*/React.createElement(CommentForm, {
	    replyTo: commentId,
	    onCommentCreated: onCommentCreated
	  }) : /*#__PURE__*/React.createElement(React.Fragment, null));
	}

	// --------------------------------------------------------------------
	// The CommentBodyPart component.

	function CommentBodyPart(_ref5) {
	  var allowFeedback = _ref5.allowFeedback,
	    comment = _ref5.comment,
	    isRemoved = _ref5.isRemoved;
	  var rawMarkup = reactExports.useMemo(function () {
	    var md = new Remarkable();
	    var _markup = md.render(comment);
	    return {
	      __html: _markup
	    };
	  }, [comment]);
	  var extra_space = allowFeedback ? "py-1" : "pt-1 pb-3";
	  if (isRemoved) {
	    var cls = "text-muted ".concat(extra_space);
	    return /*#__PURE__*/React.createElement("p", {
	      className: cls
	    }, /*#__PURE__*/React.createElement("em", null, comment));
	  } else {
	    var _cls = "content ".concat(extra_space);
	    return /*#__PURE__*/React.createElement("div", {
	      className: _cls,
	      dangerouslySetInnerHTML: rawMarkup
	    });
	  }
	}

	// --------------------------------------------------------------------
	function reduce_flags(data, current_user) {
	  var result = {
	    like: [],
	    dislike: [],
	    removal: {
	      is_active: false,
	      count: 0
	    }
	  };
	  var _iterator = _createForOfIteratorHelper(data),
	    _step;
	  try {
	    for (_iterator.s(); !(_step = _iterator.n()).done;) {
	      var item = _step.value;
	      var user = [item.id, item.user].join(":");
	      switch (item.flag) {
	        case "like":
	          {
	            result.like.push(user);
	            break;
	          }
	        case "dislike":
	          {
	            result.dislike.push(user);
	            break;
	          }
	        case "removal":
	          {
	            result.removal.count += 1;
	            result.removal.is_active = user === current_user ? true : false;
	            break;
	          }
	      }
	    }
	  } catch (err) {
	    _iterator.e(err);
	  } finally {
	    _iterator.f();
	  }
	  return result;
	}
	function Comment(props) {
	  var _data$children;
	  var data = props.data;
	  var _useContext = reactExports.useContext(InitContext),
	    allow_feedback = _useContext.allow_feedback,
	    allow_flagging = _useContext.allow_flagging,
	    can_moderate = _useContext.can_moderate,
	    current_user = _useContext.current_user,
	    delete_url = _useContext.delete_url,
	    dislike_url = _useContext.dislike_url,
	    feedback_url = _useContext.feedback_url,
	    flag_url = _useContext.flag_url,
	    is_authenticated = _useContext.is_authenticated,
	    like_url = _useContext.like_url,
	    login_url = _useContext.login_url,
	    max_thread_level = _useContext.max_thread_level,
	    reply_url = _useContext.reply_url,
	    show_feedback = _useContext.show_feedback,
	    who_can_post = _useContext.who_can_post;
	  var _useContext2 = reactExports.useContext(StateContext),
	    state = _useContext2.state;
	  var newcids = state.newcids;
	  var _flags = reduce_flags(data.flags, current_user);
	  var _useState = reactExports.useState({
	      current_user: current_user,
	      removal: _flags.removal.is_active,
	      removal_count: _flags.removal.count,
	      like_users: _flags.like,
	      dislike_users: _flags.dislike,
	      is_reply_form_visible: false
	    }),
	    _useState2 = _slicedToArray(_useState, 2),
	    lstate = _useState2[0],
	    setLstate = _useState2[1];
	  var handle_comment_created = function handle_comment_created() {
	    props.onCommentCreated();
	    if (is_authenticated) {
	      setLstate(_objectSpread2(_objectSpread2({}, lstate), {}, {
	        is_reply_form_visible: false
	      }));
	    }
	  };
	  var handle_reply_click = function handle_reply_click(event) {
	    event.preventDefault();
	    if (who_can_post === 'users' && !is_authenticated) {
	      return window.location.href = "".concat(login_url, "?next=").concat(reply_url.replace('0', data.id));
	    }
	    setLstate(_objectSpread2(_objectSpread2({}, lstate), {}, {
	      is_reply_form_visible: !lstate.is_reply_form_visible
	    }));
	  };
	  var post_feedback = function post_feedback(flag) {
	    var _promise = fetch(feedback_url, {
	      method: 'POST',
	      mode: 'cors',
	      headers: {
	        "Content-Type": "application/json",
	        "X-CSRFToken": getCookie("csrftoken")
	      },
	      body: JSON.stringify({
	        comment: data.id,
	        flag: flag
	      })
	    });
	    _promise.then(function (response) {
	      var _like_users = new Set(lstate.like_users);
	      var _dislike_users = new Set(lstate.dislike_users);
	      switch (response.status) {
	        case 201:
	          {
	            if (flag == 'like') {
	              _like_users.add(current_user);
	              _dislike_users["delete"](current_user);
	            } else if (flag == 'dislike') {
	              _like_users["delete"](current_user);
	              _dislike_users.add(current_user);
	            }
	            setLstate(_objectSpread2(_objectSpread2({}, lstate), {}, {
	              like_users: _toConsumableArray(_like_users),
	              dislike_users: _toConsumableArray(_dislike_users)
	            }));
	            break;
	          }
	        case 204:
	          {
	            if (flag == 'like') {
	              _like_users["delete"](current_user);
	            } else if (flag == 'dislike') {
	              _dislike_users["delete"](current_user);
	            }
	            setLstate(_objectSpread2(_objectSpread2({}, lstate), {}, {
	              like_users: _toConsumableArray(_like_users),
	              dislike_users: _toConsumableArray(_dislike_users)
	            }));
	            break;
	          }
	        case 400:
	          {
	            response.json().then(function (data) {
	              console.error(data);
	            });
	            break;
	          }
	      }
	    });
	  };
	  var action_like = function action_like(event) {
	    event.preventDefault();
	    if (is_authenticated) {
	      return post_feedback('like');
	    }
	    var redirect = "".concat(login_url, "?next=").concat(like_url.replace('0', data.id));
	    return window.location.href = redirect;
	  };
	  var action_dislike = function action_dislike(event) {
	    event.preventDefault();
	    if (is_authenticated) {
	      return post_feedback('dislike');
	    }
	    var redirect = "".concat(login_url, "?next=").concat(dislike_url.replace('0', data.id));
	    return window.location.href = redirect;
	  };
	  reactExports.useEffect(function () {
	    var qs_tooltip = '[data-bs-toggle="tooltip"]';
	    var tooltipTriggerList = document.querySelectorAll(qs_tooltip);
	    _toConsumableArray(tooltipTriggerList).map(function (tooltipTriggerEl) {
	      return new bootstrap.Tooltip(tooltipTriggerEl);
	    });
	  }, [lstate]);
	  return /*#__PURE__*/React.createElement("div", {
	    id: "c".concat(data.id),
	    className: "comment d-flex"
	  }, /*#__PURE__*/React.createElement("img", {
	    src: data.user_avatar,
	    className: "me-3",
	    height: "48",
	    width: "48"
	  }), /*#__PURE__*/React.createElement("div", {
	    className: "d-flex flex-column flex-grow-1 pb-3"
	  }, /*#__PURE__*/React.createElement("h6", {
	    className: "comment-header mb-1 d-flex justify-content-between",
	    style: {
	      fontSize: "0.8rem"
	    }
	  }, /*#__PURE__*/React.createElement("div", {
	    className: "d-inline flex-grow-1"
	  }, newcids.has(data.id) && /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("span", {
	    className: "badge text-bg-success"
	  }, "new"), "\xA0-\xA0"), data.submit_date, "\xA0-\xA0", /*#__PURE__*/React.createElement(UserPart, {
	    userName: data.user_name,
	    userUrl: data.user_url,
	    isRemoved: data.is_removed,
	    userModerator: data.user_moderator
	  }), "\xA0\xA0", /*#__PURE__*/React.createElement("a", {
	    className: "permalink text-decoration-none",
	    title: django$1.gettext("comment permalink"),
	    href: data.permalink
	  }, "\xB6")), /*#__PURE__*/React.createElement(TopRightPart, {
	    allowFlagging: allow_flagging,
	    canModerate: can_moderate,
	    commentId: data.id,
	    deleteUrl: delete_url,
	    flagUrl: flag_url,
	    isAuthenticated: is_authenticated,
	    isRemoved: data.is_removed,
	    loginUrl: login_url,
	    userRequestedRemoval: lstate.removal,
	    removalCount: lstate.removal_count
	  })), /*#__PURE__*/React.createElement(CommentBodyPart, {
	    allowFeedback: allow_feedback,
	    comment: data.comment,
	    isRemoved: data.is_removed
	  }), !data.is_removed && /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(FeedbackPart, {
	    allowFeedback: allow_feedback,
	    commentId: data.id,
	    currentUser: current_user,
	    onLikeClicked: action_like,
	    onDislikeClicked: action_dislike,
	    showFeedback: show_feedback,
	    userLikeList: lstate.like_users,
	    userDislikeList: lstate.dislike_users
	  }), /*#__PURE__*/React.createElement(ReplyFormPart, {
	    allowFeedback: allow_feedback,
	    commentId: data.id,
	    level: data.level,
	    maxThreadLevel: max_thread_level,
	    onCommentCreated: handle_comment_created,
	    onReplyClick: handle_reply_click,
	    replyFormVisible: lstate.is_reply_form_visible,
	    replyUrl: reply_url
	  })), data.children.length > 0 && /*#__PURE__*/React.createElement("div", {
	    className: "pt-3"
	  }, (_data$children = data.children) === null || _data$children === void 0 ? void 0 : _data$children.map(function (item) {
	    return /*#__PURE__*/React.createElement(Comment, {
	      key: item.id,
	      data: item,
	      onCommentCreated: props.onCommentCreated
	    });
	  }))));
	}

	function CommentCounter(_ref) {
	  var counter = _ref.counter;
	  var text = reactExports.useMemo(function () {
	    var fmts = django$1.ngettext("%s comment.", "%s comments.", counter);
	    return django$1.interpolate(fmts, [counter]);
	  }, [counter]);
	  return counter > 0 ? /*#__PURE__*/React.createElement("h5", {
	    className: "text-center"
	  }, text) : /*#__PURE__*/React.createElement(React.Fragment, null);
	}
	function CommentFormWrapper(_ref2) {
	  var replyTo = _ref2.replyTo,
	    onCommentCreated = _ref2.onCommentCreated;
	  var _useContext = reactExports.useContext(InitContext),
	    allow_comments = _useContext.allow_comments,
	    who_can_post = _useContext.who_can_post,
	    is_authenticated = _useContext.is_authenticated,
	    html_id_suffix = _useContext.html_id_suffix;
	  if (allow_comments) {
	    if (who_can_post === 'all' || who_can_post === 'users' && is_authenticated) {
	      return /*#__PURE__*/React.createElement(CommentForm, {
	        replyTo: replyTo,
	        onCommentCreated: onCommentCreated
	      });
	    }
	    var _id = "only-users-can-post-".concat(html_id_suffix);
	    var elem = document.getElementById(_id);
	    return elem ? /*#__PURE__*/React.createElement("div", {
	      dangerouslySetInnerHTML: {
	        __html: elem.innerHTML
	      }
	    }) : /*#__PURE__*/React.createElement("h5", {
	      className: "mt-4 mb-5 text-center text-info"
	    }, django$1.gettext("Only registered users can post comments."));
	  }
	  return /*#__PURE__*/React.createElement("h4", {
	    className: "mt-4 mb-5 text-center text-secondary"
	  }, django$1.gettext("Comments are disabled for this article."));
	}
	function UpdateAlert(_ref3) {
	  var counter = _ref3.counter,
	    cids = _ref3.cids,
	    _onClick = _ref3.onClick;
	  var diff = counter - cids.size;
	  if (diff > 0) {
	    var fmts = django$1.ngettext("There is %s new comment.", "There are %s new comments.", diff);
	    var message = django$1.interpolate(fmts, [diff]);
	    return /*#__PURE__*/React.createElement("div", {
	      className: "alert alert-info" + " d-flex justify-content-between align-items-center"
	    }, /*#__PURE__*/React.createElement("p", {
	      className: "mb-0"
	    }, message), /*#__PURE__*/React.createElement("button", {
	      type: "button",
	      className: "btn btn-secondary btn-xs",
	      onClick: function onClick() {
	        return _onClick();
	      }
	    }, "update"));
	  } else return /*#__PURE__*/React.createElement(React.Fragment, null);
	}
	function CommentBox() {
	  var _useContext2 = reactExports.useContext(InitContext),
	    count_url = _useContext2.count_url,
	    list_url = _useContext2.list_url,
	    polling_interval = _useContext2.polling_interval;
	  var _useContext3 = reactExports.useContext(StateContext),
	    state = _useContext3.state,
	    dispatch = _useContext3.dispatch;
	  var counter = state.counter,
	    cids = state.cids,
	    tree = state.tree;
	  var load_comments = function load_comments() {
	    var _promise = fetch(list_url);
	    _promise.then(function (response) {
	      return response.json();
	    }).then(function (data) {
	      dispatch({
	        type: 'CREATE_TREE',
	        data: data
	      });
	    })["catch"](function (error) {
	      return console.error(error);
	    });
	  };
	  var load_count = function load_count() {
	    var _promise = fetch(count_url);
	    _promise.then(function (response) {
	      return response.json();
	    }).then(function (data) {
	      dispatch({
	        type: 'UPDATE_COUNTER',
	        counter: data.count
	      });
	    })["catch"](function (error) {
	      return console.error(error);
	    });
	  };
	  reactExports.useEffect(function () {
	    if (polling_interval > 0) {
	      setInterval(load_count, polling_interval);
	    }
	    load_comments();
	  }, [polling_interval]);
	  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(CommentCounter, {
	    counter: counter
	  }), /*#__PURE__*/React.createElement(CommentFormWrapper, {
	    replyTo: 0,
	    onCommentCreated: load_comments
	  }), /*#__PURE__*/React.createElement(UpdateAlert, {
	    counter: counter,
	    cids: cids,
	    onClick: load_comments
	  }), /*#__PURE__*/React.createElement("div", {
	    className: "row"
	  }, /*#__PURE__*/React.createElement("div", {
	    className: "comment-tree col col-lg-10 m-auto"
	  }, tree.map(function (item) {
	    return /*#__PURE__*/React.createElement(Comment, {
	      key: item.id,
	      data: item,
	      onCommentCreated: load_comments
	    });
	  }))));
	}

	/*
	 * props is an object containing all the attributes sent
	 * by the get_commentbox_props templatetag (a django-comments-xtd tag).
	 * It happens to be the output of the function commentbox_props, in the
	 * module django_comments_xtd/frontend.py.
	 * Here in JavaScript the structure of the props matches the
	 * InitContext, in the context.js module.
	 */

	function App(props) {
	  var initial_state = {
	    tree: [],
	    cids: new Set(),
	    newcids: new Set(),
	    counter: props.comment_count
	  };
	  var _useReducer = reactExports.useReducer(reducer$1, initial_state),
	    _useReducer2 = _slicedToArray(_useReducer, 2),
	    state = _useReducer2[0],
	    dispatch = _useReducer2[1];
	  return /*#__PURE__*/React.createElement(StateContext.Provider, {
	    value: {
	      state: state,
	      dispatch: dispatch
	    }
	  }, /*#__PURE__*/React.createElement(InitContext.Provider, {
	    value: props
	  }, /*#__PURE__*/React.createElement(CommentBox, null)));
	}

	var root = ReactDOM.createRoot(document.getElementById('comments'));
	root.render( /*#__PURE__*/React.createElement(App, Object.assign(window.comments_props, window.comments_props_override)));

})(django);
//# sourceMappingURL=django-comments-xtd-2.9.13.js.map
