# Generated by Django 4.2.9 on 2024-01-07 16:50

import apps.base.utils
import colorfield.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.search.index


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("wagtailcore", "0089_log_entry_data_json_null_to_object"),
    ]

    operations = [
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, unique=True, verbose_name="name"),
                ),
                (
                    "slug",
                    models.SlugField(
                        allow_unicode=True,
                        max_length=100,
                        unique=True,
                        verbose_name="slug",
                    ),
                ),
                (
                    "color",
                    colorfield.fields.ColorField(
                        default=apps.base.utils.random_color,
                        image_field=None,
                        max_length=25,
                        samples=None,
                        verbose_name="태그 컬러",
                    ),
                ),
            ],
            options={
                "verbose_name": "태그",
                "verbose_name_plural": "태그",
                "unique_together": {("name",)},
            },
        ),
        migrations.CreateModel(
            name="TaggedPageItem",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_items",
                        to="base.tag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PageFormField",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "clean_name",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Safe name of the form field, the label converted to ascii_snake_case",
                        max_length=255,
                        verbose_name="name",
                    ),
                ),
                (
                    "field_type",
                    models.CharField(
                        choices=[
                            ("singleline", "Single line text"),
                            ("multiline", "Multi-line text"),
                            ("email", "Email"),
                            ("number", "Number"),
                            ("url", "URL"),
                            ("checkbox", "Checkbox"),
                            ("checkboxes", "Checkboxes"),
                            ("dropdown", "Drop down"),
                            ("multiselect", "Multiple select"),
                            ("radio", "Radio buttons"),
                            ("date", "Date"),
                            ("datetime", "Date/time"),
                            ("hidden", "Hidden field"),
                        ],
                        max_length=16,
                        verbose_name="field type",
                    ),
                ),
                (
                    "required",
                    models.BooleanField(default=True, verbose_name="required"),
                ),
                (
                    "choices",
                    models.TextField(
                        blank=True,
                        help_text="Comma or new line separated list of choices. Only applicable in checkboxes, radio and dropdown.",
                        verbose_name="choices",
                    ),
                ),
                (
                    "default_value",
                    models.TextField(
                        blank=True,
                        help_text="Default value. Comma or new line separated values supported for checkboxes.",
                        verbose_name="default value",
                    ),
                ),
                ("label", models.CharField(max_length=2000, verbose_name="제목")),
                (
                    "help_text",
                    models.TextField(blank=True, max_length=255, verbose_name="설명"),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="form_fields",
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tn_ancestors_pks",
                    models.TextField(
                        blank=True,
                        default="",
                        editable=False,
                        verbose_name="Ancestors pks",
                    ),
                ),
                (
                    "tn_ancestors_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Ancestors count"
                    ),
                ),
                (
                    "tn_children_pks",
                    models.TextField(
                        blank=True,
                        default="",
                        editable=False,
                        verbose_name="Children pks",
                    ),
                ),
                (
                    "tn_children_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Children count"
                    ),
                ),
                (
                    "tn_depth",
                    models.PositiveIntegerField(
                        default=0,
                        editable=False,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="Depth",
                    ),
                ),
                (
                    "tn_descendants_pks",
                    models.TextField(
                        blank=True,
                        default="",
                        editable=False,
                        verbose_name="Descendants pks",
                    ),
                ),
                (
                    "tn_descendants_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Descendants count"
                    ),
                ),
                (
                    "tn_index",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Index"
                    ),
                ),
                (
                    "tn_level",
                    models.PositiveIntegerField(
                        default=1,
                        editable=False,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="Level",
                    ),
                ),
                (
                    "tn_priority",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(9999),
                        ],
                        verbose_name="Priority",
                    ),
                ),
                (
                    "tn_order",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Order"
                    ),
                ),
                (
                    "tn_siblings_pks",
                    models.TextField(
                        blank=True,
                        default="",
                        editable=False,
                        verbose_name="Siblings pks",
                    ),
                ),
                (
                    "tn_siblings_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Siblings count"
                    ),
                ),
                (
                    "name",
                    models.CharField(db_index=True, max_length=50, verbose_name="제목"),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="설명"),
                ),
                (
                    "tn_parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tn_children",
                        to="base.category",
                        verbose_name="Parent",
                    ),
                ),
            ],
            options={
                "verbose_name": "카테고리",
                "verbose_name_plural": "카테고리",
                "ordering": ["tn_order"],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
    ]
